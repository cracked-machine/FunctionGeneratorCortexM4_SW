
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001436c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001400  08014550  08014550  00024550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015950  08015950  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08015950  08015950  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015950  08015950  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015950  08015950  00025950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015954  08015954  00025954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08015958  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20001e0c  08017764  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cf4  08017764  00032cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000496ee  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e58  00000000  00000000  0007b52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002368  00000000  00000000  00083388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ef8  00000000  00000000  000856f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c02  00000000  00000000  000875e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000302e5  00000000  00000000  000bd1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c80  00000000  00000000  000ed4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021414f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bec  00000000  00000000  002141cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014534 	.word	0x08014534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	08014534 	.word	0x08014534

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00e fcae 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f908 	bl	8000f28 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08014550 	.word	0x08014550

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00e fce3 	bl	800f6f2 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00f f939 	bl	800ffa4 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00e ff1b 	bl	800fb70 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00e fc8a 	bl	800f670 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fea2 	bl	8008aa8 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fba0 	bl	80014a8 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	0801455c 	.word	0x0801455c

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f004 f8b1 	bl	8004ee0 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f004 f8ac 	bl	8004ee0 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e083      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 ff13 	bl	8003bc4 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e07f      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 ff0f 	bl	8003bc4 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e07b      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 ff0b 	bl	8003bc4 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e077      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fe86 	bl	8004ac0 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fe81 	bl	8004ac0 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e068      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f94a 	bl	8003068 <FuncMenu_DrawMenu>
				break;
 8000dd4:	e064      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f946 	bl	8003068 <FuncMenu_DrawMenu>
				break;
 8000ddc:	e060      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f942 	bl	8003068 <FuncMenu_DrawMenu>
				break;
 8000de4:	e05c      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 ff61 	bl	8004cac <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 ff5c 	bl	8004cac <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e04d      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fe03 	bl	8003a10 <GainMenu_DrawMenu>
				break;
 8000e0a:	e049      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdff 	bl	8003a10 <GainMenu_DrawMenu>
				break;
 8000e12:	e045      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdfb 	bl	8003a10 <GainMenu_DrawMenu>
				break;
 8000e1a:	e041      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fe44 	bl	8004aa8 <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d026      	beq.n	8000e74 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fe3f 	bl	8004aa8 <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d835      	bhi.n	8000e9e <DM_UpdateDisplay+0x12a>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e55 	.word	0x08000e55
 8000e40:	08000e5d 	.word	0x08000e5d
 8000e44:	08000e65 	.word	0x08000e65
 8000e48:	08000e6d 	.word	0x08000e6d
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fb8f 	bl	8001570 <FreqMenu_DrawMenu>

				break;
 8000e52:	e025      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f000 fb8b 	bl	8001570 <FreqMenu_DrawMenu>
				break;
 8000e5a:	e021      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fb87 	bl	8001570 <FreqMenu_DrawMenu>

				break;
 8000e62:	e01d      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e64:	2004      	movs	r0, #4
 8000e66:	f000 fb83 	bl	8001570 <FreqMenu_DrawMenu>
				break;
 8000e6a:	e019      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f000 fb7f 	bl	8001570 <FreqMenu_DrawMenu>
				break;
 8000e72:	e015      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e74:	f003 f894 	bl	8003fa0 <BiasMenu_getStatus>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff ff2a 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e84:	e00c      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e86:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2232      	movs	r2, #50	; 0x32
 8000e94:	210a      	movs	r1, #10
 8000e96:	4820      	ldr	r0, [pc, #128]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000e98:	f00e fbea 	bl	800f670 <ILI9341_Draw_Text>
 8000e9c:	e000      	b.n	8000ea0 <DM_UpdateDisplay+0x12c>
				break;
 8000e9e:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	222e      	movs	r2, #46	; 0x2e
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00f fabb 	bl	8010428 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000eb2:	f004 fa6f 	bl	8005394 <BO_GetOutputBias>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <DM_UpdateDisplay+0x1a8>)
 8000ebe:	2132      	movs	r1, #50	; 0x32
 8000ec0:	f00f ff92 	bl	8010de8 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ec8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	21dc      	movs	r1, #220	; 0xdc
 8000ed8:	f00e fbca 	bl	800f670 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	222e      	movs	r2, #46	; 0x2e
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00f fa9e 	bl	8010428 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <DM_UpdateDisplay+0x1ac>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <DM_UpdateDisplay+0x1b0>)
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	f00f ff77 	bl	8010de8 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000efa:	4638      	mov	r0, r7
 8000efc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2214      	movs	r2, #20
 8000f0a:	21dc      	movs	r1, #220	; 0xdc
 8000f0c:	f00e fbb0 	bl	800f670 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f10:	bf00      	nop
 8000f12:	3768      	adds	r7, #104	; 0x68
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0801456c 	.word	0x0801456c
 8000f1c:	08014590 	.word	0x08014590
 8000f20:	40012c00 	.word	0x40012c00
 8000f24:	080145a0 	.word	0x080145a0

08000f28 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b09f      	sub	sp, #124	; 0x7c
 8000f2c:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f46:	238c      	movs	r3, #140	; 0x8c
 8000f48:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f4c:	2328      	movs	r3, #40	; 0x28
 8000f4e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f64:	23af      	movs	r3, #175	; 0xaf
 8000f66:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f6a:	2346      	movs	r3, #70	; 0x46
 8000f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f82:	238a      	movs	r3, #138	; 0x8a
 8000f84:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f88:	2364      	movs	r3, #100	; 0x64
 8000f8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f8e:	4bc4      	ldr	r3, [pc, #784]	; (80012a0 <DM_DisplayFormattedOutput+0x378>)
 8000f90:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000fa0:	23a1      	movs	r3, #161	; 0xa1
 8000fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000fa6:	2382      	movs	r3, #130	; 0x82
 8000fa8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fac:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	9201      	str	r2, [sp, #4]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fc2:	460a      	mov	r2, r1
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	48b7      	ldr	r0, [pc, #732]	; (80012a4 <DM_DisplayFormattedOutput+0x37c>)
 8000fc8:	f00e fb52 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	48b0      	ldr	r0, [pc, #704]	; (80012a8 <DM_DisplayFormattedOutput+0x380>)
 8000fe8:	f00e fb42 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	9201      	str	r2, [sp, #4]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001002:	460a      	mov	r2, r1
 8001004:	2103      	movs	r1, #3
 8001006:	48a9      	ldr	r0, [pc, #676]	; (80012ac <DM_DisplayFormattedOutput+0x384>)
 8001008:	f00e fb32 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800100c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001010:	b299      	uxth	r1, r3
 8001012:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001016:	b29b      	uxth	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001022:	460a      	mov	r2, r1
 8001024:	2103      	movs	r1, #3
 8001026:	48a2      	ldr	r0, [pc, #648]	; (80012b0 <DM_DisplayFormattedOutput+0x388>)
 8001028:	f00e fb22 	bl	800f670 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 800102c:	f005 fd3e 	bl	8006aac <SM_GetOutputInHertz>
 8001030:	ee10 3a10 	vmov	r3, s0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff faaf 	bl	8000598 <__aeabi_f2d>
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
 800103e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001042:	e9cd 3400 	strd	r3, r4, [sp]
 8001046:	4a9b      	ldr	r2, [pc, #620]	; (80012b4 <DM_DisplayFormattedOutput+0x38c>)
 8001048:	210f      	movs	r1, #15
 800104a:	f00f fecd 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800104e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001052:	b299      	uxth	r1, r3
 8001054:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001058:	b29c      	uxth	r4, r3
 800105a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800105e:	b29b      	uxth	r3, r3
 8001060:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001064:	2200      	movs	r2, #0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800106e:	4622      	mov	r2, r4
 8001070:	f00e fafe 	bl	800f670 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001074:	2000      	movs	r0, #0
 8001076:	f005 fa81 	bl	800657c <SM_GetOutputChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001080:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01d      	beq.n	80010c4 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa83 	bl	8000598 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800109a:	e9cd 3400 	strd	r3, r4, [sp]
 800109e:	4a86      	ldr	r2, [pc, #536]	; (80012b8 <DM_DisplayFormattedOutput+0x390>)
 80010a0:	2112      	movs	r1, #18
 80010a2:	f00f fea1 	bl	8010de8 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80010a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa74 	bl	8000598 <__aeabi_f2d>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	f107 0014 	add.w	r0, r7, #20
 80010b8:	e9cd 3400 	strd	r3, r4, [sp]
 80010bc:	4a7f      	ldr	r2, [pc, #508]	; (80012bc <DM_DisplayFormattedOutput+0x394>)
 80010be:	2114      	movs	r1, #20
 80010c0:	f00f fe92 	bl	8010de8 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010c4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010c8:	b299      	uxth	r1, r3
 80010ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010ce:	b29c      	uxth	r4, r3
 80010d0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010da:	2200      	movs	r2, #0
 80010dc:	9201      	str	r2, [sp, #4]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010e4:	4622      	mov	r2, r4
 80010e6:	f00e fac3 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010ee:	b299      	uxth	r1, r3
 80010f0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010f4:	b29c      	uxth	r4, r3
 80010f6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f107 0014 	add.w	r0, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800110a:	4622      	mov	r2, r4
 800110c:	f00e fab0 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001110:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001114:	b29b      	uxth	r3, r3
 8001116:	3380      	adds	r3, #128	; 0x80
 8001118:	b299      	uxth	r1, r3
 800111a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800111e:	b298      	uxth	r0, r3
 8001120:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001124:	b29b      	uxth	r3, r3
 8001126:	2200      	movs	r2, #0
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001130:	4602      	mov	r2, r0
 8001132:	4863      	ldr	r0, [pc, #396]	; (80012c0 <DM_DisplayFormattedOutput+0x398>)
 8001134:	f00e fa9c 	bl	800f670 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001138:	f004 f92c 	bl	8005394 <BO_GetOutputBias>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <DM_DisplayFormattedOutput+0x222>
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
 8001148:	e00b      	b.n	8001162 <DM_DisplayFormattedOutput+0x23a>
 800114a:	f004 f923 	bl	8005394 <BO_GetOutputBias>
 800114e:	ee07 0a90 	vmov	s15, r0
 8001152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001156:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001162:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001164:	f7ff fa18 	bl	8000598 <__aeabi_f2d>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	f107 0008 	add.w	r0, r7, #8
 8001170:	e9cd 3400 	strd	r3, r4, [sp]
 8001174:	4a53      	ldr	r2, [pc, #332]	; (80012c4 <DM_DisplayFormattedOutput+0x39c>)
 8001176:	210c      	movs	r1, #12
 8001178:	f00f fe36 	bl	8010de8 <sniprintf>
	if(BO_GetBiasPolarity())
 800117c:	f004 f8aa 	bl	80052d4 <BO_GetBiasPolarity>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d022      	beq.n	80011cc <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001186:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <DM_DisplayFormattedOutput+0x3a0>)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	4611      	mov	r1, r2
 800118e:	8019      	strh	r1, [r3, #0]
 8001190:	3302      	adds	r3, #2
 8001192:	0c12      	lsrs	r2, r2, #16
 8001194:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f00f fe56 	bl	8010e50 <strcat>
 80011a4:	4604      	mov	r4, r0
 80011a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011aa:	b299      	uxth	r1, r3
 80011ac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011b0:	b298      	uxth	r0, r3
 80011b2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2200      	movs	r2, #0
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011c2:	4602      	mov	r2, r0
 80011c4:	4620      	mov	r0, r4
 80011c6:	f00e fa53 	bl	800f670 <ILI9341_Draw_Text>
 80011ca:	e021      	b.n	8001210 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011cc:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <DM_DisplayFormattedOutput+0x3a4>)
 80011ce:	463b      	mov	r3, r7
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	4611      	mov	r1, r2
 80011d4:	8019      	strh	r1, [r3, #0]
 80011d6:	3302      	adds	r3, #2
 80011d8:	0c12      	lsrs	r2, r2, #16
 80011da:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	463b      	mov	r3, r7
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00f fe33 	bl	8010e50 <strcat>
 80011ea:	4604      	mov	r4, r0
 80011ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011f0:	b299      	uxth	r1, r3
 80011f2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011f6:	b298      	uxth	r0, r3
 80011f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	9201      	str	r2, [sp, #4]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001208:	4602      	mov	r2, r0
 800120a:	4620      	mov	r0, r4
 800120c:	f00e fa30 	bl	800f670 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001210:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001214:	b29b      	uxth	r3, r3
 8001216:	2200      	movs	r2, #0
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001220:	22aa      	movs	r2, #170	; 0xaa
 8001222:	2103      	movs	r1, #3
 8001224:	482a      	ldr	r0, [pc, #168]	; (80012d0 <DM_DisplayFormattedOutput+0x3a8>)
 8001226:	f00e fa23 	bl	800f670 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800122a:	2000      	movs	r0, #0
 800122c:	f005 f9a6 	bl	800657c <SM_GetOutputChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800123c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001240:	2b06      	cmp	r3, #6
 8001242:	f200 8091 	bhi.w	8001368 <DM_DisplayFormattedOutput+0x440>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <DM_DisplayFormattedOutput+0x324>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001269 	.word	0x08001269
 8001250:	08001285 	.word	0x08001285
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012f9 	.word	0x080012f9
 800125c:	08001315 	.word	0x08001315
 8001260:	08001331 	.word	0x08001331
 8001264:	0800134d 	.word	0x0800134d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001268:	233c      	movs	r3, #60	; 0x3c
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <DM_DisplayFormattedOutput+0x3ac>)
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2364      	movs	r3, #100	; 0x64
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001278:	2203      	movs	r2, #3
 800127a:	218c      	movs	r1, #140	; 0x8c
 800127c:	2050      	movs	r0, #80	; 0x50
 800127e:	f00e f853 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 8001282:	e071      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001284:	233c      	movs	r3, #60	; 0x3c
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <DM_DisplayFormattedOutput+0x3b0>)
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	23c8      	movs	r3, #200	; 0xc8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001294:	2203      	movs	r2, #3
 8001296:	21a0      	movs	r1, #160	; 0xa0
 8001298:	2050      	movs	r0, #80	; 0x50
 800129a:	f00e f845 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 800129e:	e063      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
 80012a0:	3a449ba6 	.word	0x3a449ba6
 80012a4:	080145b0 	.word	0x080145b0
 80012a8:	080145c0 	.word	0x080145c0
 80012ac:	080145d0 	.word	0x080145d0
 80012b0:	080145e0 	.word	0x080145e0
 80012b4:	080145f0 	.word	0x080145f0
 80012b8:	08014600 	.word	0x08014600
 80012bc:	0801460c 	.word	0x0801460c
 80012c0:	08014618 	.word	0x08014618
 80012c4:	08014620 	.word	0x08014620
 80012c8:	08014640 	.word	0x08014640
 80012cc:	08014644 	.word	0x08014644
 80012d0:	0801462c 	.word	0x0801462c
 80012d4:	20000e28 	.word	0x20000e28
 80012d8:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012dc:	233c      	movs	r3, #60	; 0x3c
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <DM_DisplayFormattedOutput+0x564>)
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	23c8      	movs	r3, #200	; 0xc8
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012ec:	2203      	movs	r2, #3
 80012ee:	21a0      	movs	r1, #160	; 0xa0
 80012f0:	2050      	movs	r0, #80	; 0x50
 80012f2:	f00e f819 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 80012f6:	e037      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012f8:	233c      	movs	r3, #60	; 0x3c
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	4b64      	ldr	r3, [pc, #400]	; (8001490 <DM_DisplayFormattedOutput+0x568>)
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	23c8      	movs	r3, #200	; 0xc8
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001308:	2203      	movs	r2, #3
 800130a:	21a0      	movs	r1, #160	; 0xa0
 800130c:	2050      	movs	r0, #80	; 0x50
 800130e:	f00e f80b 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 8001312:	e029      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001314:	233c      	movs	r3, #60	; 0x3c
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <DM_DisplayFormattedOutput+0x56c>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	23c8      	movs	r3, #200	; 0xc8
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001324:	2203      	movs	r2, #3
 8001326:	21a0      	movs	r1, #160	; 0xa0
 8001328:	2050      	movs	r0, #80	; 0x50
 800132a:	f00d fffd 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 800132e:	e01b      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001330:	233c      	movs	r3, #60	; 0x3c
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <DM_DisplayFormattedOutput+0x56c>)
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	23c8      	movs	r3, #200	; 0xc8
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001340:	2203      	movs	r2, #3
 8001342:	21a0      	movs	r1, #160	; 0xa0
 8001344:	2050      	movs	r0, #80	; 0x50
 8001346:	f00d ffef 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 800134a:	e00d      	b.n	8001368 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800134c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001350:	b29b      	uxth	r3, r3
 8001352:	2200      	movs	r2, #0
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f240 23fd 	movw	r3, #765	; 0x2fd
 800135c:	22aa      	movs	r2, #170	; 0xaa
 800135e:	2150      	movs	r1, #80	; 0x50
 8001360:	484d      	ldr	r0, [pc, #308]	; (8001498 <DM_DisplayFormattedOutput+0x570>)
 8001362:	f00e f985 	bl	800f670 <ILI9341_Draw_Text>
			break;
 8001366:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001368:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800136c:	b29b      	uxth	r3, r3
 800136e:	2200      	movs	r2, #0
 8001370:	9201      	str	r2, [sp, #4]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001378:	22aa      	movs	r2, #170	; 0xaa
 800137a:	21b4      	movs	r1, #180	; 0xb4
 800137c:	4847      	ldr	r0, [pc, #284]	; (800149c <DM_DisplayFormattedOutput+0x574>)
 800137e:	f00e f977 	bl	800f670 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001382:	2001      	movs	r0, #1
 8001384:	f005 f8fa 	bl	800657c <SM_GetOutputChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001394:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001398:	2b06      	cmp	r3, #6
 800139a:	d873      	bhi.n	8001484 <DM_DisplayFormattedOutput+0x55c>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <DM_DisplayFormattedOutput+0x47c>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013c1 	.word	0x080013c1
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	08001415 	.word	0x08001415
 80013b4:	08001431 	.word	0x08001431
 80013b8:	0800144d 	.word	0x0800144d
 80013bc:	08001469 	.word	0x08001469
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013c0:	233c      	movs	r3, #60	; 0x3c
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <DM_DisplayFormattedOutput+0x578>)
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d0:	2203      	movs	r2, #3
 80013d2:	218c      	movs	r1, #140	; 0x8c
 80013d4:	20f5      	movs	r0, #245	; 0xf5
 80013d6:	f00d ffa7 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 80013da:	e053      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013dc:	233c      	movs	r3, #60	; 0x3c
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <DM_DisplayFormattedOutput+0x57c>)
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	23c8      	movs	r3, #200	; 0xc8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013ec:	2203      	movs	r2, #3
 80013ee:	21a0      	movs	r1, #160	; 0xa0
 80013f0:	20f5      	movs	r0, #245	; 0xf5
 80013f2:	f00d ff99 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 80013f6:	e045      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013f8:	233c      	movs	r3, #60	; 0x3c
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <DM_DisplayFormattedOutput+0x564>)
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	23c8      	movs	r3, #200	; 0xc8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001408:	2203      	movs	r2, #3
 800140a:	21a0      	movs	r1, #160	; 0xa0
 800140c:	20f5      	movs	r0, #245	; 0xf5
 800140e:	f00d ff8b 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 8001412:	e037      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001414:	233c      	movs	r3, #60	; 0x3c
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <DM_DisplayFormattedOutput+0x568>)
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	23c8      	movs	r3, #200	; 0xc8
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001424:	2203      	movs	r2, #3
 8001426:	21a0      	movs	r1, #160	; 0xa0
 8001428:	20f5      	movs	r0, #245	; 0xf5
 800142a:	f00d ff7d 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 800142e:	e029      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001430:	233c      	movs	r3, #60	; 0x3c
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <DM_DisplayFormattedOutput+0x56c>)
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	23c8      	movs	r3, #200	; 0xc8
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001440:	2203      	movs	r2, #3
 8001442:	21a0      	movs	r1, #160	; 0xa0
 8001444:	20f5      	movs	r0, #245	; 0xf5
 8001446:	f00d ff6f 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 800144a:	e01b      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800144c:	233c      	movs	r3, #60	; 0x3c
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <DM_DisplayFormattedOutput+0x56c>)
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	23c8      	movs	r3, #200	; 0xc8
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800145c:	2203      	movs	r2, #3
 800145e:	21a0      	movs	r1, #160	; 0xa0
 8001460:	20f5      	movs	r0, #245	; 0xf5
 8001462:	f00d ff61 	bl	800f328 <ILI9341_Draw_Wave>
			break;
 8001466:	e00d      	b.n	8001484 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001468:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800146c:	b29b      	uxth	r3, r3
 800146e:	2200      	movs	r2, #0
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001478:	22aa      	movs	r2, #170	; 0xaa
 800147a:	21f5      	movs	r1, #245	; 0xf5
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <DM_DisplayFormattedOutput+0x570>)
 800147e:	f00e f8f7 	bl	800f670 <ILI9341_Draw_Text>
			break;
 8001482:	bf00      	nop
	}



}
 8001484:	bf00      	nop
 8001486:	376c      	adds	r7, #108	; 0x6c
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	20000c48 	.word	0x20000c48
 8001490:	20000d38 	.word	0x20000d38
 8001494:	20001008 	.word	0x20001008
 8001498:	08014634 	.word	0x08014634
 800149c:	08014638 	.word	0x08014638
 80014a0:	20000e28 	.word	0x20000e28
 80014a4:	20000f18 	.word	0x20000f18

080014a8 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <DM_RefreshScreen+0x88>)
 80014b0:	f00b ff28 	bl	800d304 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f00e fb5b 	bl	800fb70 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ba:	2300      	movs	r3, #0
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2302      	movs	r3, #2
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2328      	movs	r3, #40	; 0x28
 80014ca:	2250      	movs	r2, #80	; 0x50
 80014cc:	21c8      	movs	r1, #200	; 0xc8
 80014ce:	2000      	movs	r0, #0
 80014d0:	f00d ff6b 	bl	800f3aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014d4:	2300      	movs	r3, #0
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2302      	movs	r3, #2
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2328      	movs	r3, #40	; 0x28
 80014e4:	2250      	movs	r2, #80	; 0x50
 80014e6:	21c8      	movs	r1, #200	; 0xc8
 80014e8:	2050      	movs	r0, #80	; 0x50
 80014ea:	f00d ff5e 	bl	800f3aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014ee:	2300      	movs	r3, #0
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	2302      	movs	r3, #2
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2328      	movs	r3, #40	; 0x28
 80014fe:	2250      	movs	r2, #80	; 0x50
 8001500:	21c8      	movs	r1, #200	; 0xc8
 8001502:	20a0      	movs	r0, #160	; 0xa0
 8001504:	f00d ff51 	bl	800f3aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001508:	2300      	movs	r3, #0
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2302      	movs	r3, #2
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2328      	movs	r3, #40	; 0x28
 8001518:	2250      	movs	r2, #80	; 0x50
 800151a:	21c8      	movs	r1, #200	; 0xc8
 800151c:	20f0      	movs	r0, #240	; 0xf0
 800151e:	f00d ff44 	bl	800f3aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <DM_RefreshScreen+0x88>)
 8001524:	f00b feb8 	bl	800d298 <HAL_TIM_Base_Start_IT>


}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002b24 	.word	0x20002b24

08001534 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <DM_SetErrorDebugMsg+0x34>)
 8001540:	212d      	movs	r1, #45	; 0x2d
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <DM_SetErrorDebugMsg+0x38>)
 8001544:	f00f fc50 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001548:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2301      	movs	r3, #1
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	22be      	movs	r2, #190	; 0xbe
 8001556:	210a      	movs	r1, #10
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <DM_SetErrorDebugMsg+0x38>)
 800155a:	f00e f889 	bl	800f670 <ILI9341_Draw_Text>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	080146c4 	.word	0x080146c4
 800156c:	20001e28 	.word	0x20001e28

08001570 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	3b01      	subs	r3, #1
 800157e:	2b04      	cmp	r3, #4
 8001580:	d81b      	bhi.n	80015ba <FreqMenu_DrawMenu+0x4a>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <FreqMenu_DrawMenu+0x18>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	0800159d 	.word	0x0800159d
 800158c:	080015a3 	.word	0x080015a3
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015af 	.word	0x080015af
 8001598:	080015b5 	.word	0x080015b5
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800159c:	f000 f812 	bl	80015c4 <FreqMenu_DrawMainMenu>
			break;
 80015a0:	e00c      	b.n	80015bc <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80015a2:	f000 f859 	bl	8001658 <FreqMenu_DrawPresetMenu>
			break;
 80015a6:	e009      	b.n	80015bc <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80015a8:	f001 fb04 	bl	8002bb4 <FreqMenu_DrawAdjustMenu>
			break;
 80015ac:	e006      	b.n	80015bc <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80015ae:	f001 fb17 	bl	8002be0 <FreqMenu_DrawSweepMenu>
			break;
 80015b2:	e003      	b.n	80015bc <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 80015b4:	f001 fd42 	bl	800303c <FreqMenu_DrawPrescalerMenu>
			break;
 80015b8:	e000      	b.n	80015bc <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 80015ba:	bf00      	nop

	}
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2302      	movs	r3, #2
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	220a      	movs	r2, #10
 80015d8:	2105      	movs	r1, #5
 80015da:	481a      	ldr	r0, [pc, #104]	; (8001644 <FreqMenu_DrawMainMenu+0x80>)
 80015dc:	f00e f848 	bl	800f670 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015e0:	f7ff fca2 	bl	8000f28 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015e4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2302      	movs	r3, #2
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	22d2      	movs	r2, #210	; 0xd2
 80015f2:	2105      	movs	r1, #5
 80015f4:	4814      	ldr	r0, [pc, #80]	; (8001648 <FreqMenu_DrawMainMenu+0x84>)
 80015f6:	f00e f83b 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015fa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	2302      	movs	r3, #2
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	22d2      	movs	r2, #210	; 0xd2
 8001608:	2161      	movs	r1, #97	; 0x61
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <FreqMenu_DrawMainMenu+0x88>)
 800160c:	f00e f830 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8001610:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2302      	movs	r3, #2
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	22d2      	movs	r2, #210	; 0xd2
 800161e:	21ac      	movs	r1, #172	; 0xac
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <FreqMenu_DrawMainMenu+0x8c>)
 8001622:	f00e f825 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8001626:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	22d2      	movs	r2, #210	; 0xd2
 8001634:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <FreqMenu_DrawMainMenu+0x90>)
 800163a:	f00e f819 	bl	800f670 <ILI9341_Draw_Text>
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	080146c8 	.word	0x080146c8
 8001648:	080146d4 	.word	0x080146d4
 800164c:	080146dc 	.word	0x080146dc
 8001650:	080146e4 	.word	0x080146e4
 8001654:	080146ec 	.word	0x080146ec

08001658 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800165e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2302      	movs	r3, #2
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	220a      	movs	r2, #10
 800166c:	2105      	movs	r1, #5
 800166e:	4886      	ldr	r0, [pc, #536]	; (8001888 <FreqMenu_DrawPresetMenu+0x230>)
 8001670:	f00d fffe 	bl	800f670 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001674:	2328      	movs	r3, #40	; 0x28
 8001676:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001678:	233c      	movs	r3, #60	; 0x3c
 800167a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800167c:	2350      	movs	r3, #80	; 0x50
 800167e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001684:	2378      	movs	r3, #120	; 0x78
 8001686:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001688:	238c      	movs	r3, #140	; 0x8c
 800168a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001690:	f004 f830 	bl	80056f4 <FreqO_GetFPresetObject>
 8001694:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f001 825d 	beq.w	8002b58 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f000 849a 	beq.w	8001fe0 <FreqMenu_DrawPresetMenu+0x988>
 80016ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d817      	bhi.n	80016e4 <FreqMenu_DrawPresetMenu+0x8c>
 80016b4:	2b32      	cmp	r3, #50	; 0x32
 80016b6:	f000 81b3 	beq.w	8001a20 <FreqMenu_DrawPresetMenu+0x3c8>
 80016ba:	2b32      	cmp	r3, #50	; 0x32
 80016bc:	d806      	bhi.n	80016cc <FreqMenu_DrawPresetMenu+0x74>
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d038      	beq.n	8001734 <FreqMenu_DrawPresetMenu+0xdc>
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	f000 8102 	beq.w	80018cc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80016c8:	f001 ba52 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016cc:	2bfa      	cmp	r3, #250	; 0xfa
 80016ce:	f000 8317 	beq.w	8001d00 <FreqMenu_DrawPresetMenu+0x6a8>
 80016d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d6:	f000 83d9 	beq.w	8001e8c <FreqMenu_DrawPresetMenu+0x834>
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	f000 8266 	beq.w	8001bac <FreqMenu_DrawPresetMenu+0x554>
}
 80016e0:	f001 ba46 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f000 8758 	beq.w	800259e <FreqMenu_DrawPresetMenu+0xf46>
 80016ee:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d80f      	bhi.n	8001716 <FreqMenu_DrawPresetMenu+0xbe>
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 85e0 	beq.w	80022c0 <FreqMenu_DrawPresetMenu+0xc68>
 8001700:	f242 7210 	movw	r2, #10000	; 0x2710
 8001704:	4293      	cmp	r3, r2
 8001706:	f000 86a1 	beq.w	800244c <FreqMenu_DrawPresetMenu+0xdf4>
 800170a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170e:	f000 852d 	beq.w	800216c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001712:	f001 ba2d 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001716:	4a5d      	ldr	r2, [pc, #372]	; (800188c <FreqMenu_DrawPresetMenu+0x234>)
 8001718:	4293      	cmp	r3, r2
 800171a:	f001 80ae 	beq.w	800287a <FreqMenu_DrawPresetMenu+0x1222>
 800171e:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <FreqMenu_DrawPresetMenu+0x238>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f001 816f 	beq.w	8002a04 <FreqMenu_DrawPresetMenu+0x13ac>
 8001726:	f24c 3250 	movw	r2, #50000	; 0xc350
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 87fc 	beq.w	8002728 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001730:	f001 ba1e 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2302      	movs	r3, #2
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	2105      	movs	r1, #5
 8001746:	4853      	ldr	r0, [pc, #332]	; (8001894 <FreqMenu_DrawPresetMenu+0x23c>)
 8001748:	f00d ff92 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	484e      	ldr	r0, [pc, #312]	; (8001898 <FreqMenu_DrawPresetMenu+0x240>)
 8001760:	f00d ff86 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7b7b      	ldrb	r3, [r7, #13]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	4849      	ldr	r0, [pc, #292]	; (800189c <FreqMenu_DrawPresetMenu+0x244>)
 8001778:	f00d ff7a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7b3b      	ldrb	r3, [r7, #12]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	4844      	ldr	r0, [pc, #272]	; (80018a0 <FreqMenu_DrawPresetMenu+0x248>)
 8001790:	f00d ff6e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	483f      	ldr	r0, [pc, #252]	; (80018a4 <FreqMenu_DrawPresetMenu+0x24c>)
 80017a8:	f00d ff62 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7abb      	ldrb	r3, [r7, #10]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2105      	movs	r1, #5
 80017be:	483a      	ldr	r0, [pc, #232]	; (80018a8 <FreqMenu_DrawPresetMenu+0x250>)
 80017c0:	f00d ff56 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7a7b      	ldrb	r3, [r7, #9]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2105      	movs	r1, #5
 80017d6:	4835      	ldr	r0, [pc, #212]	; (80018ac <FreqMenu_DrawPresetMenu+0x254>)
 80017d8:	f00d ff4a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4830      	ldr	r0, [pc, #192]	; (80018b0 <FreqMenu_DrawPresetMenu+0x258>)
 80017f0:	f00d ff3e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001808:	f00d ff32 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7b7b      	ldrb	r3, [r7, #13]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	4826      	ldr	r0, [pc, #152]	; (80018b8 <FreqMenu_DrawPresetMenu+0x260>)
 8001820:	f00d ff26 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7b3b      	ldrb	r3, [r7, #12]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <FreqMenu_DrawPresetMenu+0x264>)
 8001838:	f00d ff1a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	481c      	ldr	r0, [pc, #112]	; (80018c0 <FreqMenu_DrawPresetMenu+0x268>)
 8001850:	f00d ff0e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001854:	7abb      	ldrb	r3, [r7, #10]
 8001856:	b29a      	uxth	r2, r3
 8001858:	2300      	movs	r3, #0
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	2302      	movs	r3, #2
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001864:	2178      	movs	r1, #120	; 0x78
 8001866:	4817      	ldr	r0, [pc, #92]	; (80018c4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001868:	f00d ff02 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800186c:	7a7b      	ldrb	r3, [r7, #9]
 800186e:	b29a      	uxth	r2, r3
 8001870:	2300      	movs	r3, #0
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2302      	movs	r3, #2
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800187c:	2178      	movs	r1, #120	; 0x78
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <FreqMenu_DrawPresetMenu+0x270>)
 8001880:	f00d fef6 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001884:	f001 b974 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8001888:	080146f0 	.word	0x080146f0
 800188c:	000124f8 	.word	0x000124f8
 8001890:	000186a0 	.word	0x000186a0
 8001894:	08014704 	.word	0x08014704
 8001898:	0801470c 	.word	0x0801470c
 800189c:	08014714 	.word	0x08014714
 80018a0:	0801471c 	.word	0x0801471c
 80018a4:	08014724 	.word	0x08014724
 80018a8:	0801472c 	.word	0x0801472c
 80018ac:	08014734 	.word	0x08014734
 80018b0:	0801473c 	.word	0x0801473c
 80018b4:	08014744 	.word	0x08014744
 80018b8:	0801474c 	.word	0x0801474c
 80018bc:	08014754 	.word	0x08014754
 80018c0:	0801475c 	.word	0x0801475c
 80018c4:	08014764 	.word	0x08014764
 80018c8:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	48a5      	ldr	r0, [pc, #660]	; (8001b74 <FreqMenu_DrawPresetMenu+0x51c>)
 80018e0:	f00d fec6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	2302      	movs	r3, #2
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	48a0      	ldr	r0, [pc, #640]	; (8001b78 <FreqMenu_DrawPresetMenu+0x520>)
 80018f8:	f00d feba 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	489b      	ldr	r0, [pc, #620]	; (8001b7c <FreqMenu_DrawPresetMenu+0x524>)
 8001910:	f00d feae 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7b3b      	ldrb	r3, [r7, #12]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	4896      	ldr	r0, [pc, #600]	; (8001b80 <FreqMenu_DrawPresetMenu+0x528>)
 8001928:	f00d fea2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4891      	ldr	r0, [pc, #580]	; (8001b84 <FreqMenu_DrawPresetMenu+0x52c>)
 8001940:	f00d fe96 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7abb      	ldrb	r3, [r7, #10]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2105      	movs	r1, #5
 8001956:	488c      	ldr	r0, [pc, #560]	; (8001b88 <FreqMenu_DrawPresetMenu+0x530>)
 8001958:	f00d fe8a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7a7b      	ldrb	r3, [r7, #9]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2105      	movs	r1, #5
 800196e:	4887      	ldr	r0, [pc, #540]	; (8001b8c <FreqMenu_DrawPresetMenu+0x534>)
 8001970:	f00d fe7e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4882      	ldr	r0, [pc, #520]	; (8001b90 <FreqMenu_DrawPresetMenu+0x538>)
 8001988:	f00d fe72 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	487d      	ldr	r0, [pc, #500]	; (8001b94 <FreqMenu_DrawPresetMenu+0x53c>)
 80019a0:	f00d fe66 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	4878      	ldr	r0, [pc, #480]	; (8001b98 <FreqMenu_DrawPresetMenu+0x540>)
 80019b8:	f00d fe5a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7b3b      	ldrb	r3, [r7, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4873      	ldr	r0, [pc, #460]	; (8001b9c <FreqMenu_DrawPresetMenu+0x544>)
 80019d0:	f00d fe4e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	486e      	ldr	r0, [pc, #440]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x548>)
 80019e8:	f00d fe42 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019ec:	7abb      	ldrb	r3, [r7, #10]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	2300      	movs	r3, #0
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019fc:	2178      	movs	r1, #120	; 0x78
 80019fe:	4869      	ldr	r0, [pc, #420]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001a00:	f00d fe36 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a04:	7a7b      	ldrb	r3, [r7, #9]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a14:	2178      	movs	r1, #120	; 0x78
 8001a16:	4864      	ldr	r0, [pc, #400]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x550>)
 8001a18:	f00d fe2a 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001a1c:	f001 b8a8 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	2302      	movs	r3, #2
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4850      	ldr	r0, [pc, #320]	; (8001b74 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a34:	f00d fe1c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	484b      	ldr	r0, [pc, #300]	; (8001b78 <FreqMenu_DrawPresetMenu+0x520>)
 8001a4c:	f00d fe10 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a50:	7b7b      	ldrb	r3, [r7, #13]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2105      	movs	r1, #5
 8001a62:	4846      	ldr	r0, [pc, #280]	; (8001b7c <FreqMenu_DrawPresetMenu+0x524>)
 8001a64:	f00d fe04 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4841      	ldr	r0, [pc, #260]	; (8001b80 <FreqMenu_DrawPresetMenu+0x528>)
 8001a7c:	f00d fdf8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7afb      	ldrb	r3, [r7, #11]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	483c      	ldr	r0, [pc, #240]	; (8001b84 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a94:	f00d fdec 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7abb      	ldrb	r3, [r7, #10]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	4837      	ldr	r0, [pc, #220]	; (8001b88 <FreqMenu_DrawPresetMenu+0x530>)
 8001aac:	f00d fde0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7a7b      	ldrb	r3, [r7, #9]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	4832      	ldr	r0, [pc, #200]	; (8001b8c <FreqMenu_DrawPresetMenu+0x534>)
 8001ac4:	f00d fdd4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <FreqMenu_DrawPresetMenu+0x538>)
 8001adc:	f00d fdc8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	4828      	ldr	r0, [pc, #160]	; (8001b94 <FreqMenu_DrawPresetMenu+0x53c>)
 8001af4:	f00d fdbc 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4823      	ldr	r0, [pc, #140]	; (8001b98 <FreqMenu_DrawPresetMenu+0x540>)
 8001b0c:	f00d fdb0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	481e      	ldr	r0, [pc, #120]	; (8001b9c <FreqMenu_DrawPresetMenu+0x544>)
 8001b24:	f00d fda4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x548>)
 8001b3c:	f00d fd98 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7abb      	ldrb	r3, [r7, #10]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2178      	movs	r1, #120	; 0x78
 8001b52:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b54:	f00d fd8c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7a7b      	ldrb	r3, [r7, #9]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2178      	movs	r1, #120	; 0x78
 8001b6a:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x550>)
 8001b6c:	f00d fd80 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001b70:	f000 bffe 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8001b74:	08014704 	.word	0x08014704
 8001b78:	0801470c 	.word	0x0801470c
 8001b7c:	08014714 	.word	0x08014714
 8001b80:	0801471c 	.word	0x0801471c
 8001b84:	08014724 	.word	0x08014724
 8001b88:	0801472c 	.word	0x0801472c
 8001b8c:	08014734 	.word	0x08014734
 8001b90:	0801473c 	.word	0x0801473c
 8001b94:	08014744 	.word	0x08014744
 8001b98:	0801474c 	.word	0x0801474c
 8001b9c:	08014754 	.word	0x08014754
 8001ba0:	0801475c 	.word	0x0801475c
 8001ba4:	08014764 	.word	0x08014764
 8001ba8:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	48a5      	ldr	r0, [pc, #660]	; (8001e54 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001bc0:	f00d fd56 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	48a0      	ldr	r0, [pc, #640]	; (8001e58 <FreqMenu_DrawPresetMenu+0x800>)
 8001bd8:	f00d fd4a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7b7b      	ldrb	r3, [r7, #13]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	489b      	ldr	r0, [pc, #620]	; (8001e5c <FreqMenu_DrawPresetMenu+0x804>)
 8001bf0:	f00d fd3e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bf4:	7b3b      	ldrb	r3, [r7, #12]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	2302      	movs	r3, #2
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	2105      	movs	r1, #5
 8001c06:	4896      	ldr	r0, [pc, #600]	; (8001e60 <FreqMenu_DrawPresetMenu+0x808>)
 8001c08:	f00d fd32 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4891      	ldr	r0, [pc, #580]	; (8001e64 <FreqMenu_DrawPresetMenu+0x80c>)
 8001c20:	f00d fd26 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7abb      	ldrb	r3, [r7, #10]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2105      	movs	r1, #5
 8001c36:	488c      	ldr	r0, [pc, #560]	; (8001e68 <FreqMenu_DrawPresetMenu+0x810>)
 8001c38:	f00d fd1a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7a7b      	ldrb	r3, [r7, #9]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	4887      	ldr	r0, [pc, #540]	; (8001e6c <FreqMenu_DrawPresetMenu+0x814>)
 8001c50:	f00d fd0e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4882      	ldr	r0, [pc, #520]	; (8001e70 <FreqMenu_DrawPresetMenu+0x818>)
 8001c68:	f00d fd02 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	487d      	ldr	r0, [pc, #500]	; (8001e74 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c80:	f00d fcf6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7b7b      	ldrb	r3, [r7, #13]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	4878      	ldr	r0, [pc, #480]	; (8001e78 <FreqMenu_DrawPresetMenu+0x820>)
 8001c98:	f00d fcea 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7b3b      	ldrb	r3, [r7, #12]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4873      	ldr	r0, [pc, #460]	; (8001e7c <FreqMenu_DrawPresetMenu+0x824>)
 8001cb0:	f00d fcde 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	486e      	ldr	r0, [pc, #440]	; (8001e80 <FreqMenu_DrawPresetMenu+0x828>)
 8001cc8:	f00d fcd2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ccc:	7abb      	ldrb	r3, [r7, #10]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cdc:	2178      	movs	r1, #120	; 0x78
 8001cde:	4869      	ldr	r0, [pc, #420]	; (8001e84 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ce0:	f00d fcc6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce4:	7a7b      	ldrb	r3, [r7, #9]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	2302      	movs	r3, #2
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf4:	2178      	movs	r1, #120	; 0x78
 8001cf6:	4864      	ldr	r0, [pc, #400]	; (8001e88 <FreqMenu_DrawPresetMenu+0x830>)
 8001cf8:	f00d fcba 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001cfc:	f000 bf38 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4850      	ldr	r0, [pc, #320]	; (8001e54 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001d14:	f00d fcac 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	484b      	ldr	r0, [pc, #300]	; (8001e58 <FreqMenu_DrawPresetMenu+0x800>)
 8001d2c:	f00d fca0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d40:	2105      	movs	r1, #5
 8001d42:	4846      	ldr	r0, [pc, #280]	; (8001e5c <FreqMenu_DrawPresetMenu+0x804>)
 8001d44:	f00d fc94 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7b3b      	ldrb	r3, [r7, #12]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4841      	ldr	r0, [pc, #260]	; (8001e60 <FreqMenu_DrawPresetMenu+0x808>)
 8001d5c:	f00d fc88 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	483c      	ldr	r0, [pc, #240]	; (8001e64 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d74:	f00d fc7c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	4837      	ldr	r0, [pc, #220]	; (8001e68 <FreqMenu_DrawPresetMenu+0x810>)
 8001d8c:	f00d fc70 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7a7b      	ldrb	r3, [r7, #9]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2105      	movs	r1, #5
 8001da2:	4832      	ldr	r0, [pc, #200]	; (8001e6c <FreqMenu_DrawPresetMenu+0x814>)
 8001da4:	f00d fc64 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	482d      	ldr	r0, [pc, #180]	; (8001e70 <FreqMenu_DrawPresetMenu+0x818>)
 8001dbc:	f00d fc58 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7bbb      	ldrb	r3, [r7, #14]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	4828      	ldr	r0, [pc, #160]	; (8001e74 <FreqMenu_DrawPresetMenu+0x81c>)
 8001dd4:	f00d fc4c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7b7b      	ldrb	r3, [r7, #13]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4823      	ldr	r0, [pc, #140]	; (8001e78 <FreqMenu_DrawPresetMenu+0x820>)
 8001dec:	f00d fc40 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	481e      	ldr	r0, [pc, #120]	; (8001e7c <FreqMenu_DrawPresetMenu+0x824>)
 8001e04:	f00d fc34 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	4819      	ldr	r0, [pc, #100]	; (8001e80 <FreqMenu_DrawPresetMenu+0x828>)
 8001e1c:	f00d fc28 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e20:	7abb      	ldrb	r3, [r7, #10]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e30:	2178      	movs	r1, #120	; 0x78
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e34:	f00d fc1c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e38:	7a7b      	ldrb	r3, [r7, #9]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e48:	2178      	movs	r1, #120	; 0x78
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <FreqMenu_DrawPresetMenu+0x830>)
 8001e4c:	f00d fc10 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001e50:	f000 be8e 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8001e54:	08014704 	.word	0x08014704
 8001e58:	0801470c 	.word	0x0801470c
 8001e5c:	08014714 	.word	0x08014714
 8001e60:	0801471c 	.word	0x0801471c
 8001e64:	08014724 	.word	0x08014724
 8001e68:	0801472c 	.word	0x0801472c
 8001e6c:	08014734 	.word	0x08014734
 8001e70:	0801473c 	.word	0x0801473c
 8001e74:	08014744 	.word	0x08014744
 8001e78:	0801474c 	.word	0x0801474c
 8001e7c:	08014754 	.word	0x08014754
 8001e80:	0801475c 	.word	0x0801475c
 8001e84:	08014764 	.word	0x08014764
 8001e88:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	48a5      	ldr	r0, [pc, #660]	; (8002134 <FreqMenu_DrawPresetMenu+0xadc>)
 8001ea0:	f00d fbe6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	48a0      	ldr	r0, [pc, #640]	; (8002138 <FreqMenu_DrawPresetMenu+0xae0>)
 8001eb8:	f00d fbda 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7b7b      	ldrb	r3, [r7, #13]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	489b      	ldr	r0, [pc, #620]	; (800213c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ed0:	f00d fbce 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed4:	7b3b      	ldrb	r3, [r7, #12]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	2302      	movs	r3, #2
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	4896      	ldr	r0, [pc, #600]	; (8002140 <FreqMenu_DrawPresetMenu+0xae8>)
 8001ee8:	f00d fbc2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7afb      	ldrb	r3, [r7, #11]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4891      	ldr	r0, [pc, #580]	; (8002144 <FreqMenu_DrawPresetMenu+0xaec>)
 8001f00:	f00d fbb6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f04:	7abb      	ldrb	r3, [r7, #10]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2105      	movs	r1, #5
 8001f16:	488c      	ldr	r0, [pc, #560]	; (8002148 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001f18:	f00d fbaa 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7a7b      	ldrb	r3, [r7, #9]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2105      	movs	r1, #5
 8001f2e:	4887      	ldr	r0, [pc, #540]	; (800214c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f30:	f00d fb9e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4882      	ldr	r0, [pc, #520]	; (8002150 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f48:	f00d fb92 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	487d      	ldr	r0, [pc, #500]	; (8002154 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f60:	f00d fb86 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7b7b      	ldrb	r3, [r7, #13]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	4878      	ldr	r0, [pc, #480]	; (8002158 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f78:	f00d fb7a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7b3b      	ldrb	r3, [r7, #12]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4873      	ldr	r0, [pc, #460]	; (800215c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f90:	f00d fb6e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	486e      	ldr	r0, [pc, #440]	; (8002160 <FreqMenu_DrawPresetMenu+0xb08>)
 8001fa8:	f00d fb62 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fac:	7abb      	ldrb	r3, [r7, #10]
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fbc:	2178      	movs	r1, #120	; 0x78
 8001fbe:	4869      	ldr	r0, [pc, #420]	; (8002164 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001fc0:	f00d fb56 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc4:	7a7b      	ldrb	r3, [r7, #9]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2302      	movs	r3, #2
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd4:	2178      	movs	r1, #120	; 0x78
 8001fd6:	4864      	ldr	r0, [pc, #400]	; (8002168 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fd8:	f00d fb4a 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8001fdc:	f000 bdc8 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4850      	ldr	r0, [pc, #320]	; (8002134 <FreqMenu_DrawPresetMenu+0xadc>)
 8001ff4:	f00d fb3c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	484b      	ldr	r0, [pc, #300]	; (8002138 <FreqMenu_DrawPresetMenu+0xae0>)
 800200c:	f00d fb30 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7b7b      	ldrb	r3, [r7, #13]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	4846      	ldr	r0, [pc, #280]	; (800213c <FreqMenu_DrawPresetMenu+0xae4>)
 8002024:	f00d fb24 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7b3b      	ldrb	r3, [r7, #12]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4841      	ldr	r0, [pc, #260]	; (8002140 <FreqMenu_DrawPresetMenu+0xae8>)
 800203c:	f00d fb18 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2302      	movs	r3, #2
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002050:	2105      	movs	r1, #5
 8002052:	483c      	ldr	r0, [pc, #240]	; (8002144 <FreqMenu_DrawPresetMenu+0xaec>)
 8002054:	f00d fb0c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7abb      	ldrb	r3, [r7, #10]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2105      	movs	r1, #5
 800206a:	4837      	ldr	r0, [pc, #220]	; (8002148 <FreqMenu_DrawPresetMenu+0xaf0>)
 800206c:	f00d fb00 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002070:	7a7b      	ldrb	r3, [r7, #9]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2302      	movs	r3, #2
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	2105      	movs	r1, #5
 8002082:	4832      	ldr	r0, [pc, #200]	; (800214c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002084:	f00d faf4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	482d      	ldr	r0, [pc, #180]	; (8002150 <FreqMenu_DrawPresetMenu+0xaf8>)
 800209c:	f00d fae8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7bbb      	ldrb	r3, [r7, #14]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	4828      	ldr	r0, [pc, #160]	; (8002154 <FreqMenu_DrawPresetMenu+0xafc>)
 80020b4:	f00d fadc 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4823      	ldr	r0, [pc, #140]	; (8002158 <FreqMenu_DrawPresetMenu+0xb00>)
 80020cc:	f00d fad0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7b3b      	ldrb	r3, [r7, #12]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	481e      	ldr	r0, [pc, #120]	; (800215c <FreqMenu_DrawPresetMenu+0xb04>)
 80020e4:	f00d fac4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	4819      	ldr	r0, [pc, #100]	; (8002160 <FreqMenu_DrawPresetMenu+0xb08>)
 80020fc:	f00d fab8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002100:	7abb      	ldrb	r3, [r7, #10]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2302      	movs	r3, #2
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002110:	2178      	movs	r1, #120	; 0x78
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002114:	f00d faac 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002118:	7a7b      	ldrb	r3, [r7, #9]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002128:	2178      	movs	r1, #120	; 0x78
 800212a:	480f      	ldr	r0, [pc, #60]	; (8002168 <FreqMenu_DrawPresetMenu+0xb10>)
 800212c:	f00d faa0 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8002130:	f000 bd1e 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8002134:	08014704 	.word	0x08014704
 8002138:	0801470c 	.word	0x0801470c
 800213c:	08014714 	.word	0x08014714
 8002140:	0801471c 	.word	0x0801471c
 8002144:	08014724 	.word	0x08014724
 8002148:	0801472c 	.word	0x0801472c
 800214c:	08014734 	.word	0x08014734
 8002150:	0801473c 	.word	0x0801473c
 8002154:	08014744 	.word	0x08014744
 8002158:	0801474c 	.word	0x0801474c
 800215c:	08014754 	.word	0x08014754
 8002160:	0801475c 	.word	0x0801475c
 8002164:	08014764 	.word	0x08014764
 8002168:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	48a5      	ldr	r0, [pc, #660]	; (8002414 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002180:	f00d fa76 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	48a0      	ldr	r0, [pc, #640]	; (8002418 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002198:	f00d fa6a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	489b      	ldr	r0, [pc, #620]	; (800241c <FreqMenu_DrawPresetMenu+0xdc4>)
 80021b0:	f00d fa5e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7b3b      	ldrb	r3, [r7, #12]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	4896      	ldr	r0, [pc, #600]	; (8002420 <FreqMenu_DrawPresetMenu+0xdc8>)
 80021c8:	f00d fa52 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4891      	ldr	r0, [pc, #580]	; (8002424 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021e0:	f00d fa46 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e4:	7abb      	ldrb	r3, [r7, #10]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2302      	movs	r3, #2
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f4:	2105      	movs	r1, #5
 80021f6:	488c      	ldr	r0, [pc, #560]	; (8002428 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021f8:	f00d fa3a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7a7b      	ldrb	r3, [r7, #9]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2105      	movs	r1, #5
 800220e:	4887      	ldr	r0, [pc, #540]	; (800242c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002210:	f00d fa2e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	b29a      	uxth	r2, r3
 8002218:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2302      	movs	r3, #2
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2300      	movs	r3, #0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4882      	ldr	r0, [pc, #520]	; (8002430 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002228:	f00d fa22 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7bbb      	ldrb	r3, [r7, #14]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	487d      	ldr	r0, [pc, #500]	; (8002434 <FreqMenu_DrawPresetMenu+0xddc>)
 8002240:	f00d fa16 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7b7b      	ldrb	r3, [r7, #13]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	4878      	ldr	r0, [pc, #480]	; (8002438 <FreqMenu_DrawPresetMenu+0xde0>)
 8002258:	f00d fa0a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7b3b      	ldrb	r3, [r7, #12]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4873      	ldr	r0, [pc, #460]	; (800243c <FreqMenu_DrawPresetMenu+0xde4>)
 8002270:	f00d f9fe 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	486e      	ldr	r0, [pc, #440]	; (8002440 <FreqMenu_DrawPresetMenu+0xde8>)
 8002288:	f00d f9f2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800228c:	7abb      	ldrb	r3, [r7, #10]
 800228e:	b29a      	uxth	r2, r3
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	2302      	movs	r3, #2
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800229c:	2178      	movs	r1, #120	; 0x78
 800229e:	4869      	ldr	r0, [pc, #420]	; (8002444 <FreqMenu_DrawPresetMenu+0xdec>)
 80022a0:	f00d f9e6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a4:	7a7b      	ldrb	r3, [r7, #9]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	2300      	movs	r3, #0
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	2302      	movs	r3, #2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b4:	2178      	movs	r1, #120	; 0x78
 80022b6:	4864      	ldr	r0, [pc, #400]	; (8002448 <FreqMenu_DrawPresetMenu+0xdf0>)
 80022b8:	f00d f9da 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80022bc:	f000 bc58 	b.w	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4850      	ldr	r0, [pc, #320]	; (8002414 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022d4:	f00d f9cc 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7bbb      	ldrb	r3, [r7, #14]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	484b      	ldr	r0, [pc, #300]	; (8002418 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022ec:	f00d f9c0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	4846      	ldr	r0, [pc, #280]	; (800241c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002304:	f00d f9b4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7b3b      	ldrb	r3, [r7, #12]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4841      	ldr	r0, [pc, #260]	; (8002420 <FreqMenu_DrawPresetMenu+0xdc8>)
 800231c:	f00d f9a8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	483c      	ldr	r0, [pc, #240]	; (8002424 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002334:	f00d f99c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7abb      	ldrb	r3, [r7, #10]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2105      	movs	r1, #5
 800234a:	4837      	ldr	r0, [pc, #220]	; (8002428 <FreqMenu_DrawPresetMenu+0xdd0>)
 800234c:	f00d f990 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002350:	7a7b      	ldrb	r3, [r7, #9]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2302      	movs	r3, #2
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002360:	2105      	movs	r1, #5
 8002362:	4832      	ldr	r0, [pc, #200]	; (800242c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002364:	f00d f984 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	482d      	ldr	r0, [pc, #180]	; (8002430 <FreqMenu_DrawPresetMenu+0xdd8>)
 800237c:	f00d f978 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002380:	7bbb      	ldrb	r3, [r7, #14]
 8002382:	b29a      	uxth	r2, r3
 8002384:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2302      	movs	r3, #2
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	4828      	ldr	r0, [pc, #160]	; (8002434 <FreqMenu_DrawPresetMenu+0xddc>)
 8002394:	f00d f96c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7b7b      	ldrb	r3, [r7, #13]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4823      	ldr	r0, [pc, #140]	; (8002438 <FreqMenu_DrawPresetMenu+0xde0>)
 80023ac:	f00d f960 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7b3b      	ldrb	r3, [r7, #12]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	481e      	ldr	r0, [pc, #120]	; (800243c <FreqMenu_DrawPresetMenu+0xde4>)
 80023c4:	f00d f954 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	4819      	ldr	r0, [pc, #100]	; (8002440 <FreqMenu_DrawPresetMenu+0xde8>)
 80023dc:	f00d f948 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e0:	7abb      	ldrb	r3, [r7, #10]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f0:	2178      	movs	r1, #120	; 0x78
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <FreqMenu_DrawPresetMenu+0xdec>)
 80023f4:	f00d f93c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f8:	7a7b      	ldrb	r3, [r7, #9]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2302      	movs	r3, #2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002408:	2178      	movs	r1, #120	; 0x78
 800240a:	480f      	ldr	r0, [pc, #60]	; (8002448 <FreqMenu_DrawPresetMenu+0xdf0>)
 800240c:	f00d f930 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8002410:	e3ae      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8002412:	bf00      	nop
 8002414:	08014704 	.word	0x08014704
 8002418:	0801470c 	.word	0x0801470c
 800241c:	08014714 	.word	0x08014714
 8002420:	0801471c 	.word	0x0801471c
 8002424:	08014724 	.word	0x08014724
 8002428:	0801472c 	.word	0x0801472c
 800242c:	08014734 	.word	0x08014734
 8002430:	0801473c 	.word	0x0801473c
 8002434:	08014744 	.word	0x08014744
 8002438:	0801474c 	.word	0x0801474c
 800243c:	08014754 	.word	0x08014754
 8002440:	0801475c 	.word	0x0801475c
 8002444:	08014764 	.word	0x08014764
 8002448:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	48a4      	ldr	r0, [pc, #656]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002460:	f00d f906 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7bbb      	ldrb	r3, [r7, #14]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	489f      	ldr	r0, [pc, #636]	; (80026f4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002478:	f00d f8fa 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7b7b      	ldrb	r3, [r7, #13]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	489a      	ldr	r0, [pc, #616]	; (80026f8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002490:	f00d f8ee 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7b3b      	ldrb	r3, [r7, #12]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	4895      	ldr	r0, [pc, #596]	; (80026fc <FreqMenu_DrawPresetMenu+0x10a4>)
 80024a8:	f00d f8e2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4890      	ldr	r0, [pc, #576]	; (8002700 <FreqMenu_DrawPresetMenu+0x10a8>)
 80024c0:	f00d f8d6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7abb      	ldrb	r3, [r7, #10]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2105      	movs	r1, #5
 80024d6:	488b      	ldr	r0, [pc, #556]	; (8002704 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024d8:	f00d f8ca 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7a7b      	ldrb	r3, [r7, #9]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2105      	movs	r1, #5
 80024ee:	4886      	ldr	r0, [pc, #536]	; (8002708 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024f0:	f00d f8be 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2302      	movs	r3, #2
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4881      	ldr	r0, [pc, #516]	; (800270c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002508:	f00d f8b2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7bbb      	ldrb	r3, [r7, #14]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	487c      	ldr	r0, [pc, #496]	; (8002710 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002520:	f00d f8a6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002524:	7b7b      	ldrb	r3, [r7, #13]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2302      	movs	r3, #2
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	4877      	ldr	r0, [pc, #476]	; (8002714 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002538:	f00d f89a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7b3b      	ldrb	r3, [r7, #12]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4872      	ldr	r0, [pc, #456]	; (8002718 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002550:	f00d f88e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	486d      	ldr	r0, [pc, #436]	; (800271c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002568:	f00d f882 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256c:	7abb      	ldrb	r3, [r7, #10]
 800256e:	b29a      	uxth	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	2302      	movs	r3, #2
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257c:	2178      	movs	r1, #120	; 0x78
 800257e:	4868      	ldr	r0, [pc, #416]	; (8002720 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002580:	f00d f876 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002584:	7a7b      	ldrb	r3, [r7, #9]
 8002586:	b29a      	uxth	r2, r3
 8002588:	2300      	movs	r3, #0
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	2302      	movs	r3, #2
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002594:	2178      	movs	r1, #120	; 0x78
 8002596:	4863      	ldr	r0, [pc, #396]	; (8002724 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002598:	f00d f86a 	bl	800f670 <ILI9341_Draw_Text>
				break;
 800259c:	e2e8      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	484f      	ldr	r0, [pc, #316]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1098>)
 80025b2:	f00d f85d 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	484a      	ldr	r0, [pc, #296]	; (80026f4 <FreqMenu_DrawPresetMenu+0x109c>)
 80025ca:	f00d f851 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7b7b      	ldrb	r3, [r7, #13]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	4845      	ldr	r0, [pc, #276]	; (80026f8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025e2:	f00d f845 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7b3b      	ldrb	r3, [r7, #12]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4840      	ldr	r0, [pc, #256]	; (80026fc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025fa:	f00d f839 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	483b      	ldr	r0, [pc, #236]	; (8002700 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002612:	f00d f82d 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7abb      	ldrb	r3, [r7, #10]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2105      	movs	r1, #5
 8002628:	4836      	ldr	r0, [pc, #216]	; (8002704 <FreqMenu_DrawPresetMenu+0x10ac>)
 800262a:	f00d f821 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7a7b      	ldrb	r3, [r7, #9]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2105      	movs	r1, #5
 8002640:	4831      	ldr	r0, [pc, #196]	; (8002708 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002642:	f00d f815 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	482c      	ldr	r0, [pc, #176]	; (800270c <FreqMenu_DrawPresetMenu+0x10b4>)
 800265a:	f00d f809 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800265e:	7bbb      	ldrb	r3, [r7, #14]
 8002660:	b29a      	uxth	r2, r3
 8002662:	2300      	movs	r3, #0
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2302      	movs	r3, #2
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	4827      	ldr	r0, [pc, #156]	; (8002710 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002672:	f00c fffd 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7b7b      	ldrb	r3, [r7, #13]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4822      	ldr	r0, [pc, #136]	; (8002714 <FreqMenu_DrawPresetMenu+0x10bc>)
 800268a:	f00c fff1 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800268e:	7b3b      	ldrb	r3, [r7, #12]
 8002690:	b29a      	uxth	r2, r3
 8002692:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2302      	movs	r3, #2
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	481d      	ldr	r0, [pc, #116]	; (8002718 <FreqMenu_DrawPresetMenu+0x10c0>)
 80026a2:	f00c ffe5 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	4818      	ldr	r0, [pc, #96]	; (800271c <FreqMenu_DrawPresetMenu+0x10c4>)
 80026ba:	f00c ffd9 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026be:	7abb      	ldrb	r3, [r7, #10]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2302      	movs	r3, #2
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ce:	2178      	movs	r1, #120	; 0x78
 80026d0:	4813      	ldr	r0, [pc, #76]	; (8002720 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026d2:	f00c ffcd 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d6:	7a7b      	ldrb	r3, [r7, #9]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	2300      	movs	r3, #0
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	2302      	movs	r3, #2
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e6:	2178      	movs	r1, #120	; 0x78
 80026e8:	480e      	ldr	r0, [pc, #56]	; (8002724 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ea:	f00c ffc1 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80026ee:	e23f      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 80026f0:	08014704 	.word	0x08014704
 80026f4:	0801470c 	.word	0x0801470c
 80026f8:	08014714 	.word	0x08014714
 80026fc:	0801471c 	.word	0x0801471c
 8002700:	08014724 	.word	0x08014724
 8002704:	0801472c 	.word	0x0801472c
 8002708:	08014734 	.word	0x08014734
 800270c:	0801473c 	.word	0x0801473c
 8002710:	08014744 	.word	0x08014744
 8002714:	0801474c 	.word	0x0801474c
 8002718:	08014754 	.word	0x08014754
 800271c:	0801475c 	.word	0x0801475c
 8002720:	08014764 	.word	0x08014764
 8002724:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	48a4      	ldr	r0, [pc, #656]	; (80029cc <FreqMenu_DrawPresetMenu+0x1374>)
 800273c:	f00c ff98 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	489f      	ldr	r0, [pc, #636]	; (80029d0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002754:	f00c ff8c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7b7b      	ldrb	r3, [r7, #13]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	489a      	ldr	r0, [pc, #616]	; (80029d4 <FreqMenu_DrawPresetMenu+0x137c>)
 800276c:	f00c ff80 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7b3b      	ldrb	r3, [r7, #12]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	4895      	ldr	r0, [pc, #596]	; (80029d8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002784:	f00c ff74 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4890      	ldr	r0, [pc, #576]	; (80029dc <FreqMenu_DrawPresetMenu+0x1384>)
 800279c:	f00c ff68 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7abb      	ldrb	r3, [r7, #10]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2105      	movs	r1, #5
 80027b2:	488b      	ldr	r0, [pc, #556]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1388>)
 80027b4:	f00c ff5c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7a7b      	ldrb	r3, [r7, #9]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2105      	movs	r1, #5
 80027ca:	4886      	ldr	r0, [pc, #536]	; (80029e4 <FreqMenu_DrawPresetMenu+0x138c>)
 80027cc:	f00c ff50 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4881      	ldr	r0, [pc, #516]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027e4:	f00c ff44 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	487c      	ldr	r0, [pc, #496]	; (80029ec <FreqMenu_DrawPresetMenu+0x1394>)
 80027fc:	f00c ff38 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	b29a      	uxth	r2, r3
 8002804:	2300      	movs	r3, #0
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2302      	movs	r3, #2
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	4877      	ldr	r0, [pc, #476]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002814:	f00c ff2c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7b3b      	ldrb	r3, [r7, #12]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4872      	ldr	r0, [pc, #456]	; (80029f4 <FreqMenu_DrawPresetMenu+0x139c>)
 800282c:	f00c ff20 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	b29a      	uxth	r2, r3
 8002834:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2302      	movs	r3, #2
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	486d      	ldr	r0, [pc, #436]	; (80029f8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002844:	f00c ff14 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002848:	7abb      	ldrb	r3, [r7, #10]
 800284a:	b29a      	uxth	r2, r3
 800284c:	2300      	movs	r3, #0
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2302      	movs	r3, #2
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002858:	2178      	movs	r1, #120	; 0x78
 800285a:	4868      	ldr	r0, [pc, #416]	; (80029fc <FreqMenu_DrawPresetMenu+0x13a4>)
 800285c:	f00c ff08 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002860:	7a7b      	ldrb	r3, [r7, #9]
 8002862:	b29a      	uxth	r2, r3
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	2302      	movs	r3, #2
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002870:	2178      	movs	r1, #120	; 0x78
 8002872:	4863      	ldr	r0, [pc, #396]	; (8002a00 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002874:	f00c fefc 	bl	800f670 <ILI9341_Draw_Text>
			break;
 8002878:	e17a      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	484f      	ldr	r0, [pc, #316]	; (80029cc <FreqMenu_DrawPresetMenu+0x1374>)
 800288e:	f00c feef 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7bbb      	ldrb	r3, [r7, #14]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	484a      	ldr	r0, [pc, #296]	; (80029d0 <FreqMenu_DrawPresetMenu+0x1378>)
 80028a6:	f00c fee3 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7b7b      	ldrb	r3, [r7, #13]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	4845      	ldr	r0, [pc, #276]	; (80029d4 <FreqMenu_DrawPresetMenu+0x137c>)
 80028be:	f00c fed7 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7b3b      	ldrb	r3, [r7, #12]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4840      	ldr	r0, [pc, #256]	; (80029d8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028d6:	f00c fecb 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	483b      	ldr	r0, [pc, #236]	; (80029dc <FreqMenu_DrawPresetMenu+0x1384>)
 80028ee:	f00c febf 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7abb      	ldrb	r3, [r7, #10]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2105      	movs	r1, #5
 8002904:	4836      	ldr	r0, [pc, #216]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002906:	f00c feb3 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7a7b      	ldrb	r3, [r7, #9]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2105      	movs	r1, #5
 800291c:	4831      	ldr	r0, [pc, #196]	; (80029e4 <FreqMenu_DrawPresetMenu+0x138c>)
 800291e:	f00c fea7 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	482c      	ldr	r0, [pc, #176]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002936:	f00c fe9b 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	4827      	ldr	r0, [pc, #156]	; (80029ec <FreqMenu_DrawPresetMenu+0x1394>)
 800294e:	f00c fe8f 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4822      	ldr	r0, [pc, #136]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002966:	f00c fe83 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800296a:	7b3b      	ldrb	r3, [r7, #12]
 800296c:	b29a      	uxth	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2302      	movs	r3, #2
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	481d      	ldr	r0, [pc, #116]	; (80029f4 <FreqMenu_DrawPresetMenu+0x139c>)
 800297e:	f00c fe77 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	4818      	ldr	r0, [pc, #96]	; (80029f8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002996:	f00c fe6b 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800299a:	7abb      	ldrb	r3, [r7, #10]
 800299c:	b29a      	uxth	r2, r3
 800299e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2302      	movs	r3, #2
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	2178      	movs	r1, #120	; 0x78
 80029ac:	4813      	ldr	r0, [pc, #76]	; (80029fc <FreqMenu_DrawPresetMenu+0x13a4>)
 80029ae:	f00c fe5f 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b2:	7a7b      	ldrb	r3, [r7, #9]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	2300      	movs	r3, #0
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	2302      	movs	r3, #2
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c2:	2178      	movs	r1, #120	; 0x78
 80029c4:	480e      	ldr	r0, [pc, #56]	; (8002a00 <FreqMenu_DrawPresetMenu+0x13a8>)
 80029c6:	f00c fe53 	bl	800f670 <ILI9341_Draw_Text>
			break;
 80029ca:	e0d1      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 80029cc:	08014704 	.word	0x08014704
 80029d0:	0801470c 	.word	0x0801470c
 80029d4:	08014714 	.word	0x08014714
 80029d8:	0801471c 	.word	0x0801471c
 80029dc:	08014724 	.word	0x08014724
 80029e0:	0801472c 	.word	0x0801472c
 80029e4:	08014734 	.word	0x08014734
 80029e8:	0801473c 	.word	0x0801473c
 80029ec:	08014744 	.word	0x08014744
 80029f0:	0801474c 	.word	0x0801474c
 80029f4:	08014754 	.word	0x08014754
 80029f8:	0801475c 	.word	0x0801475c
 80029fc:	08014764 	.word	0x08014764
 8002a00:	0801476c 	.word	0x0801476c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	4858      	ldr	r0, [pc, #352]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1520>)
 8002a18:	f00c fe2a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4853      	ldr	r0, [pc, #332]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a30:	f00c fe1e 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7b7b      	ldrb	r3, [r7, #13]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	484e      	ldr	r0, [pc, #312]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a48:	f00c fe12 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7b3b      	ldrb	r3, [r7, #12]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	4849      	ldr	r0, [pc, #292]	; (8002b84 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a60:	f00c fe06 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	4844      	ldr	r0, [pc, #272]	; (8002b88 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a78:	f00c fdfa 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7abb      	ldrb	r3, [r7, #10]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	483f      	ldr	r0, [pc, #252]	; (8002b8c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a90:	f00c fdee 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7a7b      	ldrb	r3, [r7, #9]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	483a      	ldr	r0, [pc, #232]	; (8002b90 <FreqMenu_DrawPresetMenu+0x1538>)
 8002aa8:	f00c fde2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	4835      	ldr	r0, [pc, #212]	; (8002b94 <FreqMenu_DrawPresetMenu+0x153c>)
 8002ac0:	f00c fdd6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4830      	ldr	r0, [pc, #192]	; (8002b98 <FreqMenu_DrawPresetMenu+0x1540>)
 8002ad8:	f00c fdca 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	482b      	ldr	r0, [pc, #172]	; (8002b9c <FreqMenu_DrawPresetMenu+0x1544>)
 8002af0:	f00c fdbe 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7b3b      	ldrb	r3, [r7, #12]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	4826      	ldr	r0, [pc, #152]	; (8002ba0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002b08:	f00c fdb2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	2300      	movs	r3, #0
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	2302      	movs	r3, #2
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4821      	ldr	r0, [pc, #132]	; (8002ba4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002b20:	f00c fda6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b24:	7abb      	ldrb	r3, [r7, #10]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b34:	2178      	movs	r1, #120	; 0x78
 8002b36:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b38:	f00c fd9a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b3c:	7a7b      	ldrb	r3, [r7, #9]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2178      	movs	r1, #120	; 0x78
 8002b4e:	4817      	ldr	r0, [pc, #92]	; (8002bac <FreqMenu_DrawPresetMenu+0x1554>)
 8002b50:	f00c fd8e 	bl	800f670 <ILI9341_Draw_Text>
			break;
 8002b54:	bf00      	nop
 8002b56:	e00b      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b58:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	22b4      	movs	r2, #180	; 0xb4
 8002b66:	2105      	movs	r1, #5
 8002b68:	4811      	ldr	r0, [pc, #68]	; (8002bb0 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b6a:	f00c fd81 	bl	800f670 <ILI9341_Draw_Text>
}
 8002b6e:	e7ff      	b.n	8002b70 <FreqMenu_DrawPresetMenu+0x1518>
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	08014704 	.word	0x08014704
 8002b7c:	0801470c 	.word	0x0801470c
 8002b80:	08014714 	.word	0x08014714
 8002b84:	0801471c 	.word	0x0801471c
 8002b88:	08014724 	.word	0x08014724
 8002b8c:	0801472c 	.word	0x0801472c
 8002b90:	08014734 	.word	0x08014734
 8002b94:	0801473c 	.word	0x0801473c
 8002b98:	08014744 	.word	0x08014744
 8002b9c:	0801474c 	.word	0x0801474c
 8002ba0:	08014754 	.word	0x08014754
 8002ba4:	0801475c 	.word	0x0801475c
 8002ba8:	08014764 	.word	0x08014764
 8002bac:	0801476c 	.word	0x0801476c
 8002bb0:	08014778 	.word	0x08014778

08002bb4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	220a      	movs	r2, #10
 8002bc8:	2105      	movs	r1, #5
 8002bca:	4804      	ldr	r0, [pc, #16]	; (8002bdc <FreqMenu_DrawAdjustMenu+0x28>)
 8002bcc:	f00c fd50 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002bd0:	f7fe f9aa 	bl	8000f28 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	080147a8 	.word	0x080147a8

08002be0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b0a0      	sub	sp, #128	; 0x80
 8002be4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	2302      	movs	r3, #2
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	48a2      	ldr	r0, [pc, #648]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002bf8:	f00c fd3a 	bl	800f670 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8002c00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c0e:	4b9d      	ldr	r3, [pc, #628]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d109      	bne.n	8002c2e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002c1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c1e:	4a9a      	ldr	r2, [pc, #616]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c20:	461c      	mov	r4, r3
 8002c22:	4615      	mov	r5, r2
 8002c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c28:	682b      	ldr	r3, [r5, #0]
 8002c2a:	7023      	strb	r3, [r4, #0]
 8002c2c:	e008      	b.n	8002c40 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002c2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c32:	4a96      	ldr	r2, [pc, #600]	; (8002e8c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c34:	461c      	mov	r4, r3
 8002c36:	4615      	mov	r5, r2
 8002c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c40:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c44:	2300      	movs	r3, #0
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2302      	movs	r3, #2
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c50:	2228      	movs	r2, #40	; 0x28
 8002c52:	2105      	movs	r1, #5
 8002c54:	f00c fd0c 	bl	800f670 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c6e:	f003 ff1d 	bl	8006aac <SM_GetOutputInHertz>
 8002c72:	ee10 3a10 	vmov	r3, s0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc8e 	bl	8000598 <__aeabi_f2d>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c84:	e9cd 3400 	strd	r3, r4, [sp]
 8002c88:	4a81      	ldr	r2, [pc, #516]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c8a:	2119      	movs	r1, #25
 8002c8c:	f00e f8ac 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c90:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c94:	2300      	movs	r3, #0
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	2302      	movs	r3, #2
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca0:	223c      	movs	r2, #60	; 0x3c
 8002ca2:	2105      	movs	r1, #5
 8002ca4:	f00c fce4 	bl	800f670 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cb4:	2264      	movs	r2, #100	; 0x64
 8002cb6:	2105      	movs	r1, #5
 8002cb8:	4876      	ldr	r0, [pc, #472]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cba:	f00c fcd9 	bl	800f670 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002cbe:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d117      	bne.n	8002cfa <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	21eb      	movs	r1, #235	; 0xeb
 8002cda:	486f      	ldr	r0, [pc, #444]	; (8002e98 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cdc:	f00c fcc8 	bl	800f670 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2300      	movs	r3, #0
 8002cec:	2264      	movs	r2, #100	; 0x64
 8002cee:	f240 1109 	movw	r1, #265	; 0x109
 8002cf2:	486a      	ldr	r0, [pc, #424]	; (8002e9c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cf4:	f00c fcbc 	bl	800f670 <ILI9341_Draw_Text>
 8002cf8:	e016      	b.n	8002d28 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d06:	2264      	movs	r2, #100	; 0x64
 8002d08:	f240 1109 	movw	r1, #265	; 0x109
 8002d0c:	4863      	ldr	r0, [pc, #396]	; (8002e9c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d0e:	f00c fcaf 	bl	800f670 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d12:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2302      	movs	r3, #2
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2264      	movs	r2, #100	; 0x64
 8002d20:	21eb      	movs	r1, #235	; 0xeb
 8002d22:	485d      	ldr	r0, [pc, #372]	; (8002e98 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d24:	f00c fca4 	bl	800f670 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002d28:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d30:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2302      	movs	r3, #2
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2278      	movs	r2, #120	; 0x78
 8002d3e:	2105      	movs	r1, #5
 8002d40:	4858      	ldr	r0, [pc, #352]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d42:	f00c fc95 	bl	800f670 <ILI9341_Draw_Text>
 8002d46:	e00a      	b.n	8002d5e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d54:	2278      	movs	r2, #120	; 0x78
 8002d56:	2105      	movs	r1, #5
 8002d58:	4852      	ldr	r0, [pc, #328]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d5a:	f00c fc89 	bl	800f670 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fc0d 	bl	8000598 <__aeabi_f2d>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d86:	e9cd 3400 	strd	r3, r4, [sp]
 8002d8a:	4a48      	ldr	r2, [pc, #288]	; (8002eac <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d8c:	2119      	movs	r1, #25
 8002d8e:	f00e f82b 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d96:	2300      	movs	r3, #0
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da2:	2278      	movs	r2, #120	; 0x78
 8002da4:	21b6      	movs	r1, #182	; 0xb6
 8002da6:	f00c fc63 	bl	800f670 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10f      	bne.n	8002dd2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002db2:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10b      	bne.n	8002dd2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002dba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	228c      	movs	r2, #140	; 0x8c
 8002dc8:	2105      	movs	r1, #5
 8002dca:	483a      	ldr	r0, [pc, #232]	; (8002eb4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002dcc:	f00c fc50 	bl	800f670 <ILI9341_Draw_Text>
 8002dd0:	e00a      	b.n	8002de8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dde:	228c      	movs	r2, #140	; 0x8c
 8002de0:	2105      	movs	r1, #5
 8002de2:	4834      	ldr	r0, [pc, #208]	; (8002eb4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002de4:	f00c fc44 	bl	800f670 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f003 fe91 	bl	8006b38 <SM_ConvertPeriodToHertz>
 8002e16:	eeb0 7a40 	vmov.f32	s14, s0
 8002e1a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ebc <FreqMenu_DrawSweepMenu+0x2dc>
 8002e1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e22:	ee16 0a90 	vmov	r0, s13
 8002e26:	f7fd fbb7 	bl	8000598 <__aeabi_f2d>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	f107 0018 	add.w	r0, r7, #24
 8002e32:	e9cd 3400 	strd	r3, r4, [sp]
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e38:	2114      	movs	r1, #20
 8002e3a:	f00d ffd5 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e3e:	f107 0018 	add.w	r0, r7, #24
 8002e42:	2300      	movs	r3, #0
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	2302      	movs	r3, #2
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e4e:	228c      	movs	r2, #140	; 0x8c
 8002e50:	219e      	movs	r1, #158	; 0x9e
 8002e52:	f00c fc0d 	bl	800f670 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d134      	bne.n	8002ec8 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d130      	bne.n	8002ec8 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e66:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2300      	movs	r3, #0
 8002e72:	22a0      	movs	r2, #160	; 0xa0
 8002e74:	2105      	movs	r1, #5
 8002e76:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e78:	f00c fbfa 	bl	800f670 <ILI9341_Draw_Text>
 8002e7c:	e02f      	b.n	8002ede <FreqMenu_DrawSweepMenu+0x2fe>
 8002e7e:	bf00      	nop
 8002e80:	080147bc 	.word	0x080147bc
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	080147d0 	.word	0x080147d0
 8002e8c:	080147e4 	.word	0x080147e4
 8002e90:	080147f8 	.word	0x080147f8
 8002e94:	0801480c 	.word	0x0801480c
 8002e98:	08014818 	.word	0x08014818
 8002e9c:	0801481c 	.word	0x0801481c
 8002ea0:	20001e59 	.word	0x20001e59
 8002ea4:	08014824 	.word	0x08014824
 8002ea8:	2000226c 	.word	0x2000226c
 8002eac:	08014834 	.word	0x08014834
 8002eb0:	20001e58 	.word	0x20001e58
 8002eb4:	08014840 	.word	0x08014840
 8002eb8:	20000120 	.word	0x20000120
 8002ebc:	42f00000 	.word	0x42f00000
 8002ec0:	08014850 	.word	0x08014850
 8002ec4:	0801485c 	.word	0x0801485c
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2302      	movs	r3, #2
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed4:	22a0      	movs	r2, #160	; 0xa0
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	484d      	ldr	r0, [pc, #308]	; (8003010 <FreqMenu_DrawSweepMenu+0x430>)
 8002eda:	f00c fbc9 	bl	800f670 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ef0:	4b48      	ldr	r3, [pc, #288]	; (8003014 <FreqMenu_DrawSweepMenu+0x434>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	ee17 0a90 	vmov	r0, s15
 8002f08:	f003 fe16 	bl	8006b38 <SM_ConvertPeriodToHertz>
 8002f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f10:	eddf 7a41 	vldr	s15, [pc, #260]	; 8003018 <FreqMenu_DrawSweepMenu+0x438>
 8002f14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f18:	ee16 0a90 	vmov	r0, s13
 8002f1c:	f7fd fb3c 	bl	8000598 <__aeabi_f2d>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	1d38      	adds	r0, r7, #4
 8002f26:	e9cd 3400 	strd	r3, r4, [sp]
 8002f2a:	4a3c      	ldr	r2, [pc, #240]	; (800301c <FreqMenu_DrawSweepMenu+0x43c>)
 8002f2c:	2114      	movs	r1, #20
 8002f2e:	f00d ff5b 	bl	8010de8 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f32:	1d38      	adds	r0, r7, #4
 8002f34:	2300      	movs	r3, #0
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f40:	22a0      	movs	r2, #160	; 0xa0
 8002f42:	21aa      	movs	r1, #170	; 0xaa
 8002f44:	f00c fb94 	bl	800f670 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <FreqMenu_DrawSweepMenu+0x440>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10b      	bne.n	8002f6c <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f54:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	22d5      	movs	r2, #213	; 0xd5
 8002f62:	2106      	movs	r1, #6
 8002f64:	482f      	ldr	r0, [pc, #188]	; (8003024 <FreqMenu_DrawSweepMenu+0x444>)
 8002f66:	f00c fb83 	bl	800f670 <ILI9341_Draw_Text>
 8002f6a:	e00a      	b.n	8002f82 <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f6c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	22d5      	movs	r2, #213	; 0xd5
 8002f7a:	2105      	movs	r1, #5
 8002f7c:	482a      	ldr	r0, [pc, #168]	; (8003028 <FreqMenu_DrawSweepMenu+0x448>)
 8002f7e:	f00c fb77 	bl	800f670 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f82:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	22cc      	movs	r2, #204	; 0xcc
 8002f90:	2168      	movs	r1, #104	; 0x68
 8002f92:	4826      	ldr	r0, [pc, #152]	; (800302c <FreqMenu_DrawSweepMenu+0x44c>)
 8002f94:	f00c fb6c 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f98:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	22de      	movs	r2, #222	; 0xde
 8002fa6:	2161      	movs	r1, #97	; 0x61
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <FreqMenu_DrawSweepMenu+0x450>)
 8002faa:	f00c fb61 	bl	800f670 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	22cc      	movs	r2, #204	; 0xcc
 8002fbc:	21b7      	movs	r1, #183	; 0xb7
 8002fbe:	481b      	ldr	r0, [pc, #108]	; (800302c <FreqMenu_DrawSweepMenu+0x44c>)
 8002fc0:	f00c fb56 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fc4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	22de      	movs	r2, #222	; 0xde
 8002fd2:	21ad      	movs	r1, #173	; 0xad
 8002fd4:	4817      	ldr	r0, [pc, #92]	; (8003034 <FreqMenu_DrawSweepMenu+0x454>)
 8002fd6:	f00c fb4b 	bl	800f670 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fda:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	22cc      	movs	r2, #204	; 0xcc
 8002fe8:	f240 1107 	movw	r1, #263	; 0x107
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <FreqMenu_DrawSweepMenu+0x44c>)
 8002fee:	f00c fb3f 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002ff2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	22de      	movs	r2, #222	; 0xde
 8003000:	21fc      	movs	r1, #252	; 0xfc
 8003002:	480d      	ldr	r0, [pc, #52]	; (8003038 <FreqMenu_DrawSweepMenu+0x458>)
 8003004:	f00c fb34 	bl	800f670 <ILI9341_Draw_Text>
}
 8003008:	bf00      	nop
 800300a:	3778      	adds	r7, #120	; 0x78
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}
 8003010:	0801485c 	.word	0x0801485c
 8003014:	20000124 	.word	0x20000124
 8003018:	42f00000 	.word	0x42f00000
 800301c:	0801486c 	.word	0x0801486c
 8003020:	40000c00 	.word	0x40000c00
 8003024:	08014878 	.word	0x08014878
 8003028:	08014880 	.word	0x08014880
 800302c:	08014888 	.word	0x08014888
 8003030:	0801488c 	.word	0x0801488c
 8003034:	08014894 	.word	0x08014894
 8003038:	0801489c 	.word	0x0801489c

0800303c <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	220a      	movs	r2, #10
 8003050:	2105      	movs	r1, #5
 8003052:	4804      	ldr	r0, [pc, #16]	; (8003064 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003054:	f00c fb0c 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003058:	f7fd ff66 	bl	8000f28 <DM_DisplayFormattedOutput>

}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	080148a4 	.word	0x080148a4

08003068 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d007      	beq.n	8003088 <FuncMenu_DrawMenu+0x20>
 8003078:	2b03      	cmp	r3, #3
 800307a:	d009      	beq.n	8003090 <FuncMenu_DrawMenu+0x28>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d000      	beq.n	8003082 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003080:	e00a      	b.n	8003098 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003082:	f000 f80d 	bl	80030a0 <FuncMenu_DrawMainMenu>
			break;
 8003086:	e007      	b.n	8003098 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003088:	2000      	movs	r0, #0
 800308a:	f000 f851 	bl	8003130 <FuncMenu_DrawOutputMenu>
			break;
 800308e:	e003      	b.n	8003098 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003090:	2001      	movs	r0, #1
 8003092:	f000 f84d 	bl	8003130 <FuncMenu_DrawOutputMenu>
			break;
 8003096:	bf00      	nop

	}
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	220a      	movs	r2, #10
 80030b4:	210a      	movs	r1, #10
 80030b6:	481a      	ldr	r0, [pc, #104]	; (8003120 <FuncMenu_DrawMainMenu+0x80>)
 80030b8:	f00c fada 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80030bc:	f7fd ff34 	bl	8000f28 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80030c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	2302      	movs	r3, #2
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2300      	movs	r3, #0
 80030cc:	22d2      	movs	r2, #210	; 0xd2
 80030ce:	2105      	movs	r1, #5
 80030d0:	4814      	ldr	r0, [pc, #80]	; (8003124 <FuncMenu_DrawMainMenu+0x84>)
 80030d2:	f00c facd 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80030d6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	2302      	movs	r3, #2
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	22d2      	movs	r2, #210	; 0xd2
 80030e4:	2164      	movs	r1, #100	; 0x64
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <FuncMenu_DrawMainMenu+0x88>)
 80030e8:	f00c fac2 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80030ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	2302      	movs	r3, #2
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	22d2      	movs	r2, #210	; 0xd2
 80030fa:	21af      	movs	r1, #175	; 0xaf
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <FuncMenu_DrawMainMenu+0x8c>)
 80030fe:	f00c fab7 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003102:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2302      	movs	r3, #2
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	22d2      	movs	r2, #210	; 0xd2
 8003110:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <FuncMenu_DrawMainMenu+0x8c>)
 8003116:	f00c faab 	bl	800f670 <ILI9341_Draw_Text>
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	080148b4 	.word	0x080148b4
 8003124:	080148c0 	.word	0x080148c0
 8003128:	080148c8 	.word	0x080148c8
 800312c:	080148cc 	.word	0x080148cc

08003130 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af02      	add	r7, sp, #8
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	220a      	movs	r2, #10
 800314e:	210a      	movs	r1, #10
 8003150:	4896      	ldr	r0, [pc, #600]	; (80033ac <FuncMenu_DrawOutputMenu+0x27c>)
 8003152:	f00c fa8d 	bl	800f670 <ILI9341_Draw_Text>
 8003156:	e00a      	b.n	800316e <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2302      	movs	r3, #2
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	220a      	movs	r2, #10
 8003166:	210a      	movs	r1, #10
 8003168:	4891      	ldr	r0, [pc, #580]	; (80033b0 <FuncMenu_DrawOutputMenu+0x280>)
 800316a:	f00c fa81 	bl	800f670 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fa03 	bl	800657c <SM_GetOutputChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800317c:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8424 	beq.w	80039ce <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b06      	cmp	r3, #6
 800318c:	f200 841f 	bhi.w	80039ce <FuncMenu_DrawOutputMenu+0x89e>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <FuncMenu_DrawOutputMenu+0x68>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031b5 	.word	0x080031b5
 800319c:	080032b1 	.word	0x080032b1
 80031a0:	080033d5 	.word	0x080033d5
 80031a4:	080034d1 	.word	0x080034d1
 80031a8:	080035cd 	.word	0x080035cd
 80031ac:	08003705 	.word	0x08003705
 80031b0:	08003817 	.word	0x08003817
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80031b4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2302      	movs	r3, #2
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2300      	movs	r3, #0
 80031c0:	2232      	movs	r2, #50	; 0x32
 80031c2:	210a      	movs	r1, #10
 80031c4:	487b      	ldr	r0, [pc, #492]	; (80033b4 <FuncMenu_DrawOutputMenu+0x284>)
 80031c6:	f00c fa53 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031ca:	2300      	movs	r3, #0
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2302      	movs	r3, #2
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d6:	2246      	movs	r2, #70	; 0x46
 80031d8:	210a      	movs	r1, #10
 80031da:	4877      	ldr	r0, [pc, #476]	; (80033b8 <FuncMenu_DrawOutputMenu+0x288>)
 80031dc:	f00c fa48 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e0:	2300      	movs	r3, #0
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ec:	225a      	movs	r2, #90	; 0x5a
 80031ee:	210a      	movs	r1, #10
 80031f0:	4872      	ldr	r0, [pc, #456]	; (80033bc <FuncMenu_DrawOutputMenu+0x28c>)
 80031f2:	f00c fa3d 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f6:	2300      	movs	r3, #0
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2302      	movs	r3, #2
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003202:	226e      	movs	r2, #110	; 0x6e
 8003204:	210a      	movs	r1, #10
 8003206:	486e      	ldr	r0, [pc, #440]	; (80033c0 <FuncMenu_DrawOutputMenu+0x290>)
 8003208:	f00c fa32 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800320c:	2300      	movs	r3, #0
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2302      	movs	r3, #2
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003218:	2282      	movs	r2, #130	; 0x82
 800321a:	210a      	movs	r1, #10
 800321c:	4869      	ldr	r0, [pc, #420]	; (80033c4 <FuncMenu_DrawOutputMenu+0x294>)
 800321e:	f00c fa27 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003222:	2300      	movs	r3, #0
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2302      	movs	r3, #2
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322e:	2296      	movs	r2, #150	; 0x96
 8003230:	210a      	movs	r1, #10
 8003232:	4865      	ldr	r0, [pc, #404]	; (80033c8 <FuncMenu_DrawOutputMenu+0x298>)
 8003234:	f00c fa1c 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800323e:	2300      	movs	r3, #0
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	2302      	movs	r3, #2
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800324a:	22aa      	movs	r2, #170	; 0xaa
 800324c:	210a      	movs	r1, #10
 800324e:	485f      	ldr	r0, [pc, #380]	; (80033cc <FuncMenu_DrawOutputMenu+0x29c>)
 8003250:	f00c fa0e 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003254:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2302      	movs	r3, #2
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	22d2      	movs	r2, #210	; 0xd2
 8003262:	2105      	movs	r1, #5
 8003264:	485a      	ldr	r0, [pc, #360]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003266:	f00c fa03 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800326a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	22d2      	movs	r2, #210	; 0xd2
 8003278:	2161      	movs	r1, #97	; 0x61
 800327a:	4855      	ldr	r0, [pc, #340]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800327c:	f00c f9f8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003280:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	2302      	movs	r3, #2
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	22d2      	movs	r2, #210	; 0xd2
 800328e:	21af      	movs	r1, #175	; 0xaf
 8003290:	484f      	ldr	r0, [pc, #316]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003292:	f00c f9ed 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003296:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	2302      	movs	r3, #2
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2300      	movs	r3, #0
 80032a2:	22d2      	movs	r2, #210	; 0xd2
 80032a4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032a8:	4849      	ldr	r0, [pc, #292]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 80032aa:	f00c f9e1 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80032ae:	e38e      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032bc:	2232      	movs	r2, #50	; 0x32
 80032be:	210a      	movs	r1, #10
 80032c0:	483c      	ldr	r0, [pc, #240]	; (80033b4 <FuncMenu_DrawOutputMenu+0x284>)
 80032c2:	f00c f9d5 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80032c6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	2246      	movs	r2, #70	; 0x46
 80032d4:	210a      	movs	r1, #10
 80032d6:	4838      	ldr	r0, [pc, #224]	; (80033b8 <FuncMenu_DrawOutputMenu+0x288>)
 80032d8:	f00c f9ca 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e8:	225a      	movs	r2, #90	; 0x5a
 80032ea:	210a      	movs	r1, #10
 80032ec:	4833      	ldr	r0, [pc, #204]	; (80033bc <FuncMenu_DrawOutputMenu+0x28c>)
 80032ee:	f00c f9bf 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	226e      	movs	r2, #110	; 0x6e
 8003300:	210a      	movs	r1, #10
 8003302:	482f      	ldr	r0, [pc, #188]	; (80033c0 <FuncMenu_DrawOutputMenu+0x290>)
 8003304:	f00c f9b4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003308:	2300      	movs	r3, #0
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2302      	movs	r3, #2
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003314:	2282      	movs	r2, #130	; 0x82
 8003316:	210a      	movs	r1, #10
 8003318:	482a      	ldr	r0, [pc, #168]	; (80033c4 <FuncMenu_DrawOutputMenu+0x294>)
 800331a:	f00c f9a9 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800331e:	2300      	movs	r3, #0
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2302      	movs	r3, #2
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800332a:	2296      	movs	r2, #150	; 0x96
 800332c:	210a      	movs	r1, #10
 800332e:	4826      	ldr	r0, [pc, #152]	; (80033c8 <FuncMenu_DrawOutputMenu+0x298>)
 8003330:	f00c f99e 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800333a:	2300      	movs	r3, #0
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	2302      	movs	r3, #2
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003346:	22aa      	movs	r2, #170	; 0xaa
 8003348:	210a      	movs	r1, #10
 800334a:	4820      	ldr	r0, [pc, #128]	; (80033cc <FuncMenu_DrawOutputMenu+0x29c>)
 800334c:	f00c f990 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003350:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	22d2      	movs	r2, #210	; 0xd2
 800335e:	2105      	movs	r1, #5
 8003360:	481b      	ldr	r0, [pc, #108]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003362:	f00c f985 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003366:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	22d2      	movs	r2, #210	; 0xd2
 8003374:	2161      	movs	r1, #97	; 0x61
 8003376:	4816      	ldr	r0, [pc, #88]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003378:	f00c f97a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800337c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2300      	movs	r3, #0
 8003388:	22d2      	movs	r2, #210	; 0xd2
 800338a:	21af      	movs	r1, #175	; 0xaf
 800338c:	4810      	ldr	r0, [pc, #64]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800338e:	f00c f96f 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003392:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	22d2      	movs	r2, #210	; 0xd2
 80033a0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033a4:	480a      	ldr	r0, [pc, #40]	; (80033d0 <FuncMenu_DrawOutputMenu+0x2a0>)
 80033a6:	f00c f963 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80033aa:	e310      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
 80033ac:	080148d4 	.word	0x080148d4
 80033b0:	080148e4 	.word	0x080148e4
 80033b4:	080148f4 	.word	0x080148f4
 80033b8:	080148fc 	.word	0x080148fc
 80033bc:	08014908 	.word	0x08014908
 80033c0:	08014910 	.word	0x08014910
 80033c4:	0801491c 	.word	0x0801491c
 80033c8:	08014928 	.word	0x08014928
 80033cc:	08014930 	.word	0x08014930
 80033d0:	080148cc 	.word	0x080148cc
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d4:	2300      	movs	r3, #0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2302      	movs	r3, #2
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033e0:	2232      	movs	r2, #50	; 0x32
 80033e2:	210a      	movs	r1, #10
 80033e4:	48be      	ldr	r0, [pc, #760]	; (80036e0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80033e6:	f00c f943 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ea:	2300      	movs	r3, #0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2302      	movs	r3, #2
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f6:	2246      	movs	r2, #70	; 0x46
 80033f8:	210a      	movs	r1, #10
 80033fa:	48ba      	ldr	r0, [pc, #744]	; (80036e4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80033fc:	f00c f938 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003400:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	225a      	movs	r2, #90	; 0x5a
 800340e:	210a      	movs	r1, #10
 8003410:	48b5      	ldr	r0, [pc, #724]	; (80036e8 <FuncMenu_DrawOutputMenu+0x5b8>)
 8003412:	f00c f92d 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003416:	2300      	movs	r3, #0
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2302      	movs	r3, #2
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003422:	226e      	movs	r2, #110	; 0x6e
 8003424:	210a      	movs	r1, #10
 8003426:	48b1      	ldr	r0, [pc, #708]	; (80036ec <FuncMenu_DrawOutputMenu+0x5bc>)
 8003428:	f00c f922 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800342c:	2300      	movs	r3, #0
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2302      	movs	r3, #2
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003438:	2282      	movs	r2, #130	; 0x82
 800343a:	210a      	movs	r1, #10
 800343c:	48ac      	ldr	r0, [pc, #688]	; (80036f0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800343e:	f00c f917 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2302      	movs	r3, #2
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800344e:	2296      	movs	r2, #150	; 0x96
 8003450:	210a      	movs	r1, #10
 8003452:	48a8      	ldr	r0, [pc, #672]	; (80036f4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003454:	f00c f90c 	bl	800f670 <ILI9341_Draw_Text>
				if(pOutChan)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800345e:	2300      	movs	r3, #0
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2302      	movs	r3, #2
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800346a:	22aa      	movs	r2, #170	; 0xaa
 800346c:	210a      	movs	r1, #10
 800346e:	48a2      	ldr	r0, [pc, #648]	; (80036f8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003470:	f00c f8fe 	bl	800f670 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003474:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2302      	movs	r3, #2
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	22d2      	movs	r2, #210	; 0xd2
 8003482:	2105      	movs	r1, #5
 8003484:	489d      	ldr	r0, [pc, #628]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003486:	f00c f8f3 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800348a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	2302      	movs	r3, #2
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	22d2      	movs	r2, #210	; 0xd2
 8003498:	2161      	movs	r1, #97	; 0x61
 800349a:	4898      	ldr	r0, [pc, #608]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 800349c:	f00c f8e8 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2302      	movs	r3, #2
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	22d2      	movs	r2, #210	; 0xd2
 80034ae:	21af      	movs	r1, #175	; 0xaf
 80034b0:	4892      	ldr	r0, [pc, #584]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80034b2:	f00c f8dd 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034b6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	22d2      	movs	r2, #210	; 0xd2
 80034c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034c8:	488c      	ldr	r0, [pc, #560]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80034ca:	f00c f8d1 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80034ce:	e27e      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034d0:	2300      	movs	r3, #0
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2302      	movs	r3, #2
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034dc:	2232      	movs	r2, #50	; 0x32
 80034de:	210a      	movs	r1, #10
 80034e0:	487f      	ldr	r0, [pc, #508]	; (80036e0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80034e2:	f00c f8c5 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034f2:	2246      	movs	r2, #70	; 0x46
 80034f4:	210a      	movs	r1, #10
 80034f6:	487b      	ldr	r0, [pc, #492]	; (80036e4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80034f8:	f00c f8ba 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	225a      	movs	r2, #90	; 0x5a
 800350a:	210a      	movs	r1, #10
 800350c:	4876      	ldr	r0, [pc, #472]	; (80036e8 <FuncMenu_DrawOutputMenu+0x5b8>)
 800350e:	f00c f8af 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003512:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	226e      	movs	r2, #110	; 0x6e
 8003520:	210a      	movs	r1, #10
 8003522:	4872      	ldr	r0, [pc, #456]	; (80036ec <FuncMenu_DrawOutputMenu+0x5bc>)
 8003524:	f00c f8a4 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003528:	2300      	movs	r3, #0
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2302      	movs	r3, #2
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003534:	2282      	movs	r2, #130	; 0x82
 8003536:	210a      	movs	r1, #10
 8003538:	486d      	ldr	r0, [pc, #436]	; (80036f0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800353a:	f00c f899 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800354a:	2296      	movs	r2, #150	; 0x96
 800354c:	210a      	movs	r1, #10
 800354e:	4869      	ldr	r0, [pc, #420]	; (80036f4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003550:	f00c f88e 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800355a:	2300      	movs	r3, #0
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2302      	movs	r3, #2
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003566:	22aa      	movs	r2, #170	; 0xaa
 8003568:	210a      	movs	r1, #10
 800356a:	4863      	ldr	r0, [pc, #396]	; (80036f8 <FuncMenu_DrawOutputMenu+0x5c8>)
 800356c:	f00c f880 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003570:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2302      	movs	r3, #2
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	22d2      	movs	r2, #210	; 0xd2
 800357e:	2105      	movs	r1, #5
 8003580:	485e      	ldr	r0, [pc, #376]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003582:	f00c f875 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003586:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2302      	movs	r3, #2
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2300      	movs	r3, #0
 8003592:	22d2      	movs	r2, #210	; 0xd2
 8003594:	2161      	movs	r1, #97	; 0x61
 8003596:	4859      	ldr	r0, [pc, #356]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003598:	f00c f86a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800359c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2302      	movs	r3, #2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	22d2      	movs	r2, #210	; 0xd2
 80035aa:	21af      	movs	r1, #175	; 0xaf
 80035ac:	4853      	ldr	r0, [pc, #332]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80035ae:	f00c f85f 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035b2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2302      	movs	r3, #2
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	22d2      	movs	r2, #210	; 0xd2
 80035c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035c4:	484d      	ldr	r0, [pc, #308]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80035c6:	f00c f853 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80035ca:	e200      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035cc:	2300      	movs	r3, #0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2302      	movs	r3, #2
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d8:	2232      	movs	r2, #50	; 0x32
 80035da:	210a      	movs	r1, #10
 80035dc:	4840      	ldr	r0, [pc, #256]	; (80036e0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80035de:	f00c f847 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e2:	2300      	movs	r3, #0
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2302      	movs	r3, #2
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ee:	2246      	movs	r2, #70	; 0x46
 80035f0:	210a      	movs	r1, #10
 80035f2:	483c      	ldr	r0, [pc, #240]	; (80036e4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80035f4:	f00c f83c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035f8:	2300      	movs	r3, #0
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2302      	movs	r3, #2
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003604:	225a      	movs	r2, #90	; 0x5a
 8003606:	210a      	movs	r1, #10
 8003608:	4837      	ldr	r0, [pc, #220]	; (80036e8 <FuncMenu_DrawOutputMenu+0x5b8>)
 800360a:	f00c f831 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360e:	2300      	movs	r3, #0
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800361a:	226e      	movs	r2, #110	; 0x6e
 800361c:	210a      	movs	r1, #10
 800361e:	4833      	ldr	r0, [pc, #204]	; (80036ec <FuncMenu_DrawOutputMenu+0x5bc>)
 8003620:	f00c f826 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003624:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2302      	movs	r3, #2
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	2282      	movs	r2, #130	; 0x82
 8003632:	210a      	movs	r1, #10
 8003634:	482e      	ldr	r0, [pc, #184]	; (80036f0 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003636:	f00c f81b 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800363a:	2300      	movs	r3, #0
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2302      	movs	r3, #2
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003646:	2296      	movs	r2, #150	; 0x96
 8003648:	210a      	movs	r1, #10
 800364a:	482a      	ldr	r0, [pc, #168]	; (80036f4 <FuncMenu_DrawOutputMenu+0x5c4>)
 800364c:	f00c f810 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2302      	movs	r3, #2
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003662:	22aa      	movs	r2, #170	; 0xaa
 8003664:	210a      	movs	r1, #10
 8003666:	4824      	ldr	r0, [pc, #144]	; (80036f8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003668:	f00c f802 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800366c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2302      	movs	r3, #2
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	22d2      	movs	r2, #210	; 0xd2
 800367a:	2105      	movs	r1, #5
 800367c:	481f      	ldr	r0, [pc, #124]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 800367e:	f00b fff7 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003682:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	22d2      	movs	r2, #210	; 0xd2
 8003690:	2161      	movs	r1, #97	; 0x61
 8003692:	481a      	ldr	r0, [pc, #104]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003694:	f00b ffec 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003698:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2302      	movs	r3, #2
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	22d2      	movs	r2, #210	; 0xd2
 80036a6:	21af      	movs	r1, #175	; 0xaf
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80036aa:	f00b ffe1 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036ae:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22d2      	movs	r2, #210	; 0xd2
 80036bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80036c0:	480e      	ldr	r0, [pc, #56]	; (80036fc <FuncMenu_DrawOutputMenu+0x5cc>)
 80036c2:	f00b ffd5 	bl	800f670 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2302      	movs	r3, #2
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d2:	2232      	movs	r2, #50	; 0x32
 80036d4:	2196      	movs	r1, #150	; 0x96
 80036d6:	480a      	ldr	r0, [pc, #40]	; (8003700 <FuncMenu_DrawOutputMenu+0x5d0>)
 80036d8:	f00b ffca 	bl	800f670 <ILI9341_Draw_Text>
				break;
 80036dc:	e177      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
 80036de:	bf00      	nop
 80036e0:	080148f4 	.word	0x080148f4
 80036e4:	080148fc 	.word	0x080148fc
 80036e8:	08014908 	.word	0x08014908
 80036ec:	08014910 	.word	0x08014910
 80036f0:	0801491c 	.word	0x0801491c
 80036f4:	08014928 	.word	0x08014928
 80036f8:	08014930 	.word	0x08014930
 80036fc:	080148cc 	.word	0x080148cc
 8003700:	08014938 	.word	0x08014938
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2302      	movs	r3, #2
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003710:	2232      	movs	r2, #50	; 0x32
 8003712:	210a      	movs	r1, #10
 8003714:	48b0      	ldr	r0, [pc, #704]	; (80039d8 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003716:	f00b ffab 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800371a:	2300      	movs	r3, #0
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2302      	movs	r3, #2
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003726:	2246      	movs	r2, #70	; 0x46
 8003728:	210a      	movs	r1, #10
 800372a:	48ac      	ldr	r0, [pc, #688]	; (80039dc <FuncMenu_DrawOutputMenu+0x8ac>)
 800372c:	f00b ffa0 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003730:	2300      	movs	r3, #0
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	2302      	movs	r3, #2
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800373c:	225a      	movs	r2, #90	; 0x5a
 800373e:	210a      	movs	r1, #10
 8003740:	48a7      	ldr	r0, [pc, #668]	; (80039e0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003742:	f00b ff95 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003746:	2300      	movs	r3, #0
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2302      	movs	r3, #2
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003752:	226e      	movs	r2, #110	; 0x6e
 8003754:	210a      	movs	r1, #10
 8003756:	48a3      	ldr	r0, [pc, #652]	; (80039e4 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003758:	f00b ff8a 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	2302      	movs	r3, #2
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003768:	2282      	movs	r2, #130	; 0x82
 800376a:	210a      	movs	r1, #10
 800376c:	489e      	ldr	r0, [pc, #632]	; (80039e8 <FuncMenu_DrawOutputMenu+0x8b8>)
 800376e:	f00b ff7f 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003772:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2302      	movs	r3, #2
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	2296      	movs	r2, #150	; 0x96
 8003780:	210a      	movs	r1, #10
 8003782:	489a      	ldr	r0, [pc, #616]	; (80039ec <FuncMenu_DrawOutputMenu+0x8bc>)
 8003784:	f00b ff74 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800378e:	2300      	movs	r3, #0
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2302      	movs	r3, #2
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800379a:	22aa      	movs	r2, #170	; 0xaa
 800379c:	210a      	movs	r1, #10
 800379e:	4894      	ldr	r0, [pc, #592]	; (80039f0 <FuncMenu_DrawOutputMenu+0x8c0>)
 80037a0:	f00b ff66 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	22d2      	movs	r2, #210	; 0xd2
 80037b2:	2105      	movs	r1, #5
 80037b4:	488f      	ldr	r0, [pc, #572]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80037b6:	f00b ff5b 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	22d2      	movs	r2, #210	; 0xd2
 80037c8:	2161      	movs	r1, #97	; 0x61
 80037ca:	488a      	ldr	r0, [pc, #552]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80037cc:	f00b ff50 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	22d2      	movs	r2, #210	; 0xd2
 80037de:	21af      	movs	r1, #175	; 0xaf
 80037e0:	4884      	ldr	r0, [pc, #528]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80037e2:	f00b ff45 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037e6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22d2      	movs	r2, #210	; 0xd2
 80037f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037f8:	487e      	ldr	r0, [pc, #504]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80037fa:	f00b ff39 	bl	800f670 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fe:	2300      	movs	r3, #0
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2302      	movs	r3, #2
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800380a:	2232      	movs	r2, #50	; 0x32
 800380c:	2196      	movs	r1, #150	; 0x96
 800380e:	487a      	ldr	r0, [pc, #488]	; (80039f8 <FuncMenu_DrawOutputMenu+0x8c8>)
 8003810:	f00b ff2e 	bl	800f670 <ILI9341_Draw_Text>
				break;
 8003814:	e0db      	b.n	80039ce <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	2232      	movs	r2, #50	; 0x32
 8003824:	210a      	movs	r1, #10
 8003826:	486c      	ldr	r0, [pc, #432]	; (80039d8 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003828:	f00b ff22 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	210a      	movs	r1, #10
 800383c:	4867      	ldr	r0, [pc, #412]	; (80039dc <FuncMenu_DrawOutputMenu+0x8ac>)
 800383e:	f00b ff17 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003842:	2300      	movs	r3, #0
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	2302      	movs	r3, #2
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800384e:	225a      	movs	r2, #90	; 0x5a
 8003850:	210a      	movs	r1, #10
 8003852:	4863      	ldr	r0, [pc, #396]	; (80039e0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003854:	f00b ff0c 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003858:	2300      	movs	r3, #0
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	2302      	movs	r3, #2
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003864:	226e      	movs	r2, #110	; 0x6e
 8003866:	210a      	movs	r1, #10
 8003868:	485e      	ldr	r0, [pc, #376]	; (80039e4 <FuncMenu_DrawOutputMenu+0x8b4>)
 800386a:	f00b ff01 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800386e:	2300      	movs	r3, #0
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2302      	movs	r3, #2
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800387a:	2282      	movs	r2, #130	; 0x82
 800387c:	210a      	movs	r1, #10
 800387e:	485a      	ldr	r0, [pc, #360]	; (80039e8 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003880:	f00b fef6 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003884:	2300      	movs	r3, #0
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2302      	movs	r3, #2
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003890:	2296      	movs	r2, #150	; 0x96
 8003892:	210a      	movs	r1, #10
 8003894:	4855      	ldr	r0, [pc, #340]	; (80039ec <FuncMenu_DrawOutputMenu+0x8bc>)
 8003896:	f00b feeb 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038a0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2302      	movs	r3, #2
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	22aa      	movs	r2, #170	; 0xaa
 80038ae:	210a      	movs	r1, #10
 80038b0:	484f      	ldr	r0, [pc, #316]	; (80039f0 <FuncMenu_DrawOutputMenu+0x8c0>)
 80038b2:	f00b fedd 	bl	800f670 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80038b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	22d2      	movs	r2, #210	; 0xd2
 80038c4:	2105      	movs	r1, #5
 80038c6:	484b      	ldr	r0, [pc, #300]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038c8:	f00b fed2 	bl	800f670 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80038cc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	22d2      	movs	r2, #210	; 0xd2
 80038da:	2161      	movs	r1, #97	; 0x61
 80038dc:	4845      	ldr	r0, [pc, #276]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038de:	f00b fec7 	bl	800f670 <ILI9341_Draw_Text>

				if(pOutChan)
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05a      	beq.n	800399e <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	2302      	movs	r3, #2
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	22d2      	movs	r2, #210	; 0xd2
 80038f6:	21af      	movs	r1, #175	; 0xaf
 80038f8:	4840      	ldr	r0, [pc, #256]	; (80039fc <FuncMenu_DrawOutputMenu+0x8cc>)
 80038fa:	f00b feb9 	bl	800f670 <ILI9341_Draw_Text>
					char duty[10] = "";
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 800390c:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <FuncMenu_DrawOutputMenu+0x8d0>)
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <FuncMenu_DrawOutputMenu+0x8d0>)
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003a04 <FuncMenu_DrawOutputMenu+0x8d4>
 800392c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003930:	ee17 0a90 	vmov	r0, s15
 8003934:	f7fc fe30 	bl	8000598 <__aeabi_f2d>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	f107 0008 	add.w	r0, r7, #8
 8003940:	e9cd 3400 	strd	r3, r4, [sp]
 8003944:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003946:	210a      	movs	r1, #10
 8003948:	f00d fa4e 	bl	8010de8 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800394c:	f107 0008 	add.w	r0, r7, #8
 8003950:	2300      	movs	r3, #0
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	2302      	movs	r3, #2
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800395c:	2232      	movs	r2, #50	; 0x32
 800395e:	21dc      	movs	r1, #220	; 0xdc
 8003960:	f00b fe86 	bl	800f670 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003964:	f003 f90e 	bl	8006b84 <SM_IsFuncPwmDutyMode>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800396e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2302      	movs	r3, #2
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	2232      	movs	r2, #50	; 0x32
 800397c:	2196      	movs	r1, #150	; 0x96
 800397e:	4823      	ldr	r0, [pc, #140]	; (8003a0c <FuncMenu_DrawOutputMenu+0x8dc>)
 8003980:	f00b fe76 	bl	800f670 <ILI9341_Draw_Text>
 8003984:	e016      	b.n	80039b4 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003986:	2300      	movs	r3, #0
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2302      	movs	r3, #2
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003992:	2232      	movs	r2, #50	; 0x32
 8003994:	2196      	movs	r1, #150	; 0x96
 8003996:	481d      	ldr	r0, [pc, #116]	; (8003a0c <FuncMenu_DrawOutputMenu+0x8dc>)
 8003998:	f00b fe6a 	bl	800f670 <ILI9341_Draw_Text>
 800399c:	e00a      	b.n	80039b4 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800399e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	2302      	movs	r3, #2
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	22d2      	movs	r2, #210	; 0xd2
 80039ac:	21af      	movs	r1, #175	; 0xaf
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039b0:	f00b fe5e 	bl	800f670 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039b4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2302      	movs	r3, #2
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	22d2      	movs	r2, #210	; 0xd2
 80039c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039c6:	480b      	ldr	r0, [pc, #44]	; (80039f4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039c8:	f00b fe52 	bl	800f670 <ILI9341_Draw_Text>

				break;
 80039cc:	bf00      	nop
				//
		}
	}
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	080148f4 	.word	0x080148f4
 80039dc:	080148fc 	.word	0x080148fc
 80039e0:	08014908 	.word	0x08014908
 80039e4:	08014910 	.word	0x08014910
 80039e8:	0801491c 	.word	0x0801491c
 80039ec:	08014928 	.word	0x08014928
 80039f0:	08014930 	.word	0x08014930
 80039f4:	080148cc 	.word	0x080148cc
 80039f8:	08014938 	.word	0x08014938
 80039fc:	08014948 	.word	0x08014948
 8003a00:	40000400 	.word	0x40000400
 8003a04:	42c80000 	.word	0x42c80000
 8003a08:	08014950 	.word	0x08014950
 8003a0c:	08014958 	.word	0x08014958

08003a10 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d007      	beq.n	8003a30 <GainMenu_DrawMenu+0x20>
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d008      	beq.n	8003a36 <GainMenu_DrawMenu+0x26>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d000      	beq.n	8003a2a <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003a28:	e008      	b.n	8003a3c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003a2a:	f000 f80b 	bl	8003a44 <GainMenu_DrawMainMenu>
			break;
 8003a2e:	e005      	b.n	8003a3c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003a30:	f000 f868 	bl	8003b04 <GainMenu_DrawSignalMenu>
			break;
 8003a34:	e002      	b.n	8003a3c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003a36:	f000 f8af 	bl	8003b98 <GainMenu_DrawAuxMenu>
			break;
 8003a3a:	bf00      	nop

	}
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2302      	movs	r3, #2
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	220a      	movs	r2, #10
 8003a58:	210a      	movs	r1, #10
 8003a5a:	4826      	ldr	r0, [pc, #152]	; (8003af4 <GainMenu_DrawMainMenu+0xb0>)
 8003a5c:	f00b fe08 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a60:	f7fd fa62 	bl	8000f28 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a64:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	22d2      	movs	r2, #210	; 0xd2
 8003a72:	2105      	movs	r1, #5
 8003a74:	4820      	ldr	r0, [pc, #128]	; (8003af8 <GainMenu_DrawMainMenu+0xb4>)
 8003a76:	f00b fdfb 	bl	800f670 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f002 fd7e 	bl	800657c <SM_GetOutputChannel>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d10b      	bne.n	8003aa8 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	2302      	movs	r3, #2
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	22d2      	movs	r2, #210	; 0xd2
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	4816      	ldr	r0, [pc, #88]	; (8003afc <GainMenu_DrawMainMenu+0xb8>)
 8003aa2:	f00b fde5 	bl	800f670 <ILI9341_Draw_Text>
 8003aa6:	e00a      	b.n	8003abe <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003aa8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2302      	movs	r3, #2
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	22d2      	movs	r2, #210	; 0xd2
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	4811      	ldr	r0, [pc, #68]	; (8003b00 <GainMenu_DrawMainMenu+0xbc>)
 8003aba:	f00b fdd9 	bl	800f670 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003abe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	22d2      	movs	r2, #210	; 0xd2
 8003acc:	21af      	movs	r1, #175	; 0xaf
 8003ace:	480b      	ldr	r0, [pc, #44]	; (8003afc <GainMenu_DrawMainMenu+0xb8>)
 8003ad0:	f00b fdce 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ad4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2302      	movs	r3, #2
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	22d2      	movs	r2, #210	; 0xd2
 8003ae2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <GainMenu_DrawMainMenu+0xb8>)
 8003ae8:	f00b fdc2 	bl	800f670 <ILI9341_Draw_Text>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	08014960 	.word	0x08014960
 8003af8:	0801496c 	.word	0x0801496c
 8003afc:	08014974 	.word	0x08014974
 8003b00:	0801497c 	.word	0x0801497c

08003b04 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	220a      	movs	r2, #10
 8003b18:	210a      	movs	r1, #10
 8003b1a:	481a      	ldr	r0, [pc, #104]	; (8003b84 <GainMenu_DrawSignalMenu+0x80>)
 8003b1c:	f00b fda8 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b20:	f7fd fa02 	bl	8000f28 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b24:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	22d2      	movs	r2, #210	; 0xd2
 8003b32:	210f      	movs	r1, #15
 8003b34:	4814      	ldr	r0, [pc, #80]	; (8003b88 <GainMenu_DrawSignalMenu+0x84>)
 8003b36:	f00b fd9b 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b3a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2302      	movs	r3, #2
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	22d2      	movs	r2, #210	; 0xd2
 8003b48:	2161      	movs	r1, #97	; 0x61
 8003b4a:	4810      	ldr	r0, [pc, #64]	; (8003b8c <GainMenu_DrawSignalMenu+0x88>)
 8003b4c:	f00b fd90 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2302      	movs	r3, #2
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	22d2      	movs	r2, #210	; 0xd2
 8003b5e:	21be      	movs	r1, #190	; 0xbe
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <GainMenu_DrawSignalMenu+0x8c>)
 8003b62:	f00b fd85 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b66:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	22d2      	movs	r2, #210	; 0xd2
 8003b74:	f240 1109 	movw	r1, #265	; 0x109
 8003b78:	4806      	ldr	r0, [pc, #24]	; (8003b94 <GainMenu_DrawSignalMenu+0x90>)
 8003b7a:	f00b fd79 	bl	800f670 <ILI9341_Draw_Text>
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	08014980 	.word	0x08014980
 8003b88:	08014990 	.word	0x08014990
 8003b8c:	08014998 	.word	0x08014998
 8003b90:	080149a0 	.word	0x080149a0
 8003b94:	080149a4 	.word	0x080149a4

08003b98 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	220a      	movs	r2, #10
 8003bac:	210a      	movs	r1, #10
 8003bae:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <GainMenu_DrawAuxMenu+0x28>)
 8003bb0:	f00b fd5e 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bb4:	f7fd f9b8 	bl	8000f28 <DM_DisplayFormattedOutput>
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	080149a8 	.word	0x080149a8

08003bc4 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d007      	beq.n	8003be4 <ToplevelMenu_DrawMenu+0x20>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d008      	beq.n	8003bea <ToplevelMenu_DrawMenu+0x26>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d000      	beq.n	8003bde <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003bdc:	e008      	b.n	8003bf0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003bde:	f000 f80b 	bl	8003bf8 <ToplevelMenu_DrawMainMenu>
			break;
 8003be2:	e005      	b.n	8003bf0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003be4:	f000 f844 	bl	8003c70 <ToplevelMenu_DrawOutputMenu>
			break;
 8003be8:	e002      	b.n	8003bf0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003bea:	f000 f88b 	bl	8003d04 <ToplevelMenu_DrawInputMenu>
			break;
 8003bee:	bf00      	nop

	}
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003bfe:	f7fd f993 	bl	8000f28 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c02:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	2302      	movs	r3, #2
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	22d2      	movs	r2, #210	; 0xd2
 8003c10:	2106      	movs	r1, #6
 8003c12:	4814      	ldr	r0, [pc, #80]	; (8003c64 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003c14:	f00b fd2c 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c18:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	2302      	movs	r3, #2
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	22d2      	movs	r2, #210	; 0xd2
 8003c26:	215d      	movs	r1, #93	; 0x5d
 8003c28:	480f      	ldr	r0, [pc, #60]	; (8003c68 <ToplevelMenu_DrawMainMenu+0x70>)
 8003c2a:	f00b fd21 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	2302      	movs	r3, #2
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	22d2      	movs	r2, #210	; 0xd2
 8003c3c:	21af      	movs	r1, #175	; 0xaf
 8003c3e:	480b      	ldr	r0, [pc, #44]	; (8003c6c <ToplevelMenu_DrawMainMenu+0x74>)
 8003c40:	f00b fd16 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c44:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	22d2      	movs	r2, #210	; 0xd2
 8003c52:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003c56:	4805      	ldr	r0, [pc, #20]	; (8003c6c <ToplevelMenu_DrawMainMenu+0x74>)
 8003c58:	f00b fd0a 	bl	800f670 <ILI9341_Draw_Text>


}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	080149b8 	.word	0x080149b8
 8003c68:	080149c0 	.word	0x080149c0
 8003c6c:	080149c8 	.word	0x080149c8

08003c70 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	220a      	movs	r2, #10
 8003c84:	210a      	movs	r1, #10
 8003c86:	481a      	ldr	r0, [pc, #104]	; (8003cf0 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003c88:	f00b fcf2 	bl	800f670 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c8c:	f7fd f94c 	bl	8000f28 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c90:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	22d2      	movs	r2, #210	; 0xd2
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	4814      	ldr	r0, [pc, #80]	; (8003cf4 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003ca2:	f00b fce5 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ca6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2302      	movs	r3, #2
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	22d2      	movs	r2, #210	; 0xd2
 8003cb4:	2162      	movs	r1, #98	; 0x62
 8003cb6:	4810      	ldr	r0, [pc, #64]	; (8003cf8 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003cb8:	f00b fcda 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	22d2      	movs	r2, #210	; 0xd2
 8003cca:	21b0      	movs	r1, #176	; 0xb0
 8003ccc:	480b      	ldr	r0, [pc, #44]	; (8003cfc <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003cce:	f00b fccf 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003cd2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	22d2      	movs	r2, #210	; 0xd2
 8003ce0:	21f5      	movs	r1, #245	; 0xf5
 8003ce2:	4807      	ldr	r0, [pc, #28]	; (8003d00 <ToplevelMenu_DrawOutputMenu+0x90>)
 8003ce4:	f00b fcc4 	bl	800f670 <ILI9341_Draw_Text>
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	080149d0 	.word	0x080149d0
 8003cf4:	080149d8 	.word	0x080149d8
 8003cf8:	080149e0 	.word	0x080149e0
 8003cfc:	080149e8 	.word	0x080149e8
 8003d00:	080149f0 	.word	0x080149f0

08003d04 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	2302      	movs	r3, #2
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	220a      	movs	r2, #10
 8003d18:	210a      	movs	r1, #10
 8003d1a:	4892      	ldr	r0, [pc, #584]	; (8003f64 <ToplevelMenu_DrawInputMenu+0x260>)
 8003d1c:	f00b fca8 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d20:	2300      	movs	r3, #0
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	2302      	movs	r3, #2
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d2c:	2232      	movs	r2, #50	; 0x32
 8003d2e:	210a      	movs	r1, #10
 8003d30:	488d      	ldr	r0, [pc, #564]	; (8003f68 <ToplevelMenu_DrawInputMenu+0x264>)
 8003d32:	f00b fc9d 	bl	800f670 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003d36:	f002 fab7 	bl	80062a8 <IT_GetTriggerStatus>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <ToplevelMenu_DrawInputMenu+0x6a>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2302      	movs	r3, #2
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2232      	movs	r2, #50	; 0x32
 8003d4e:	2196      	movs	r1, #150	; 0x96
 8003d50:	4886      	ldr	r0, [pc, #536]	; (8003f6c <ToplevelMenu_DrawInputMenu+0x268>)
 8003d52:	f00b fc8d 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d56:	2300      	movs	r3, #0
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d62:	2232      	movs	r2, #50	; 0x32
 8003d64:	21c8      	movs	r1, #200	; 0xc8
 8003d66:	4882      	ldr	r0, [pc, #520]	; (8003f70 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003d68:	f00b fc82 	bl	800f670 <ILI9341_Draw_Text>
 8003d6c:	e015      	b.n	8003d9a <ToplevelMenu_DrawInputMenu+0x96>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	2302      	movs	r3, #2
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d7a:	2232      	movs	r2, #50	; 0x32
 8003d7c:	2196      	movs	r1, #150	; 0x96
 8003d7e:	487b      	ldr	r0, [pc, #492]	; (8003f6c <ToplevelMenu_DrawInputMenu+0x268>)
 8003d80:	f00b fc76 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d84:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2232      	movs	r2, #50	; 0x32
 8003d92:	21c8      	movs	r1, #200	; 0xc8
 8003d94:	4876      	ldr	r0, [pc, #472]	; (8003f70 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003d96:	f00b fc6b 	bl	800f670 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2302      	movs	r3, #2
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003da6:	2246      	movs	r2, #70	; 0x46
 8003da8:	210a      	movs	r1, #10
 8003daa:	4872      	ldr	r0, [pc, #456]	; (8003f74 <ToplevelMenu_DrawInputMenu+0x270>)
 8003dac:	f00b fc60 	bl	800f670 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003db0:	f002 fa5e 	bl	8006270 <IT_GetActiveTriggerMode>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d12d      	bne.n	8003e16 <ToplevelMenu_DrawInputMenu+0x112>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2246      	movs	r2, #70	; 0x46
 8003dc8:	2196      	movs	r1, #150	; 0x96
 8003dca:	486b      	ldr	r0, [pc, #428]	; (8003f78 <ToplevelMenu_DrawInputMenu+0x274>)
 8003dcc:	f00b fc50 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ddc:	2246      	movs	r2, #70	; 0x46
 8003dde:	21c8      	movs	r1, #200	; 0xc8
 8003de0:	4866      	ldr	r0, [pc, #408]	; (8003f7c <ToplevelMenu_DrawInputMenu+0x278>)
 8003de2:	f00b fc45 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003de6:	2300      	movs	r3, #0
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2302      	movs	r3, #2
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003df2:	2246      	movs	r2, #70	; 0x46
 8003df4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003df8:	4861      	ldr	r0, [pc, #388]	; (8003f80 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003dfa:	f00b fc39 	bl	800f670 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	2302      	movs	r3, #2
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e0a:	2264      	movs	r2, #100	; 0x64
 8003e0c:	2196      	movs	r1, #150	; 0x96
 8003e0e:	485d      	ldr	r0, [pc, #372]	; (8003f84 <ToplevelMenu_DrawInputMenu+0x280>)
 8003e10:	f00b fc2e 	bl	800f670 <ILI9341_Draw_Text>
 8003e14:	e076      	b.n	8003f04 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003e16:	f002 fa2b 	bl	8006270 <IT_GetActiveTriggerMode>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d13f      	bne.n	8003ea0 <ToplevelMenu_DrawInputMenu+0x19c>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e20:	2300      	movs	r3, #0
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	2302      	movs	r3, #2
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e2c:	2246      	movs	r2, #70	; 0x46
 8003e2e:	2196      	movs	r1, #150	; 0x96
 8003e30:	4851      	ldr	r0, [pc, #324]	; (8003f78 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e32:	f00b fc1d 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	2246      	movs	r2, #70	; 0x46
 8003e44:	21c8      	movs	r1, #200	; 0xc8
 8003e46:	484d      	ldr	r0, [pc, #308]	; (8003f7c <ToplevelMenu_DrawInputMenu+0x278>)
 8003e48:	f00b fc12 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	2302      	movs	r3, #2
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e58:	2246      	movs	r2, #70	; 0x46
 8003e5a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003e5e:	4848      	ldr	r0, [pc, #288]	; (8003f80 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003e60:	f00b fc06 	bl	800f670 <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003e64:	2300      	movs	r3, #0
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003e76:	4844      	ldr	r0, [pc, #272]	; (8003f88 <ToplevelMenu_DrawInputMenu+0x284>)
 8003e78:	f006 fe20 	bl	800aabc <HAL_COMP_GetOutputLevel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	1d38      	adds	r0, r7, #4
 8003e80:	4a42      	ldr	r2, [pc, #264]	; (8003f8c <ToplevelMenu_DrawInputMenu+0x288>)
 8003e82:	2114      	movs	r1, #20
 8003e84:	f00c ffb0 	bl	8010de8 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e88:	1d38      	adds	r0, r7, #4
 8003e8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2302      	movs	r3, #2
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2264      	movs	r2, #100	; 0x64
 8003e98:	2196      	movs	r1, #150	; 0x96
 8003e9a:	f00b fbe9 	bl	800f670 <ILI9341_Draw_Text>
 8003e9e:	e031      	b.n	8003f04 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003ea0:	f002 f9e6 	bl	8006270 <IT_GetActiveTriggerMode>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d12c      	bne.n	8003f04 <ToplevelMenu_DrawInputMenu+0x200>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2302      	movs	r3, #2
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003eb6:	2246      	movs	r2, #70	; 0x46
 8003eb8:	2196      	movs	r1, #150	; 0x96
 8003eba:	482f      	ldr	r0, [pc, #188]	; (8003f78 <ToplevelMenu_DrawInputMenu+0x274>)
 8003ebc:	f00b fbd8 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ecc:	2246      	movs	r2, #70	; 0x46
 8003ece:	21c8      	movs	r1, #200	; 0xc8
 8003ed0:	482a      	ldr	r0, [pc, #168]	; (8003f7c <ToplevelMenu_DrawInputMenu+0x278>)
 8003ed2:	f00b fbcd 	bl	800f670 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003ed6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2302      	movs	r3, #2
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2246      	movs	r2, #70	; 0x46
 8003ee4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003ee8:	4825      	ldr	r0, [pc, #148]	; (8003f80 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003eea:	f00b fbc1 	bl	800f670 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003efa:	2264      	movs	r2, #100	; 0x64
 8003efc:	2196      	movs	r1, #150	; 0x96
 8003efe:	4821      	ldr	r0, [pc, #132]	; (8003f84 <ToplevelMenu_DrawInputMenu+0x280>)
 8003f00:	f00b fbb6 	bl	800f670 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f04:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	22cc      	movs	r2, #204	; 0xcc
 8003f12:	2114      	movs	r1, #20
 8003f14:	481e      	ldr	r0, [pc, #120]	; (8003f90 <ToplevelMenu_DrawInputMenu+0x28c>)
 8003f16:	f00b fbab 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f1a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	2302      	movs	r3, #2
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	22de      	movs	r2, #222	; 0xde
 8003f28:	2114      	movs	r1, #20
 8003f2a:	481a      	ldr	r0, [pc, #104]	; (8003f94 <ToplevelMenu_DrawInputMenu+0x290>)
 8003f2c:	f00b fba0 	bl	800f670 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f30:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	2302      	movs	r3, #2
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	22cc      	movs	r2, #204	; 0xcc
 8003f3e:	2168      	movs	r1, #104	; 0x68
 8003f40:	4815      	ldr	r0, [pc, #84]	; (8003f98 <ToplevelMenu_DrawInputMenu+0x294>)
 8003f42:	f00b fb95 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f46:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	22de      	movs	r2, #222	; 0xde
 8003f54:	2161      	movs	r1, #97	; 0x61
 8003f56:	4811      	ldr	r0, [pc, #68]	; (8003f9c <ToplevelMenu_DrawInputMenu+0x298>)
 8003f58:	f00b fb8a 	bl	800f670 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	080149f8 	.word	0x080149f8
 8003f68:	08014a00 	.word	0x08014a00
 8003f6c:	08014a0c 	.word	0x08014a0c
 8003f70:	08014a10 	.word	0x08014a10
 8003f74:	08014a14 	.word	0x08014a14
 8003f78:	08014a1c 	.word	0x08014a1c
 8003f7c:	08014a20 	.word	0x08014a20
 8003f80:	08014a28 	.word	0x08014a28
 8003f84:	08014a2c 	.word	0x08014a2c
 8003f88:	200029c8 	.word	0x200029c8
 8003f8c:	08014a34 	.word	0x08014a34
 8003f90:	08014a3c 	.word	0x08014a3c
 8003f94:	08014a40 	.word	0x08014a40
 8003f98:	08014a48 	.word	0x08014a48
 8003f9c:	08014a4c 	.word	0x08014a4c

08003fa0 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <BiasMenu_getStatus+0x14>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20001e55 	.word	0x20001e55

08003fb8 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003fbc:	f7fd fa74 	bl	80014a8 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <BiasMenuEntryHandler+0x30>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <BiasMenuEntryHandler+0x34>)
 8003fc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003fce:	f001 f98d 	bl	80052ec <BO_GetDcBiasEncoderValue>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <BiasMenuEntryHandler+0x34>)
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <BiasMenuEntryHandler+0x38>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003fe0:	230f      	movs	r3, #15
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20001e55 	.word	0x20001e55
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	20001e57 	.word	0x20001e57

08003ff4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f002 fd3b 	bl	8006a74 <SM_GetEncoderValue>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f97f 	bl	8005304 <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8004006:	4b03      	ldr	r3, [pc, #12]	; (8004014 <BiasMenuInputHandler+0x20>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800400c:	230f      	movs	r3, #15
}
 800400e:	4618      	mov	r0, r3
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20001e57 	.word	0x20001e57

08004018 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <BiasMenuExitHandler+0x1c>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004022:	f7fd fa41 	bl	80014a8 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <BiasMenuExitHandler+0x20>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800402c:	2301      	movs	r3, #1
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20001e55 	.word	0x20001e55
 8004038:	20001e57 	.word	0x20001e57

0800403c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <EM_ProcessEvent+0xb4>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d850      	bhi.n	80040ea <EM_ProcessEvent+0xae>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <EM_ProcessEvent+0x14>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004091 	.word	0x08004091
 8004054:	08004097 	.word	0x08004097
 8004058:	0800409d 	.word	0x0800409d
 800405c:	080040a3 	.word	0x080040a3
 8004060:	080040a9 	.word	0x080040a9
 8004064:	080040af 	.word	0x080040af
 8004068:	080040b5 	.word	0x080040b5
 800406c:	080040bb 	.word	0x080040bb
 8004070:	080040c1 	.word	0x080040c1
 8004074:	080040eb 	.word	0x080040eb
 8004078:	080040c7 	.word	0x080040c7
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040d3 	.word	0x080040d3
 8004084:	080040df 	.word	0x080040df
 8004088:	080040d9 	.word	0x080040d9
 800408c:	080040e5 	.word	0x080040e5
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 8004090:	f000 f830 	bl	80040f4 <_ProcessIdleStateEvents>
			break;
 8004094:	e02a      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 8004096:	f000 f849 	bl	800412c <_ProcessTopLevelOutputMenuStateEvents>
			break;
 800409a:	e027      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 800409c:	f000 f88c 	bl	80041b8 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80040a0:	e024      	b.n	80040ec <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80040a2:	f000 f8b5 	bl	8004210 <_ProcessFuncMainMenuStateEvents>
			break;
 80040a6:	e021      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80040a8:	f000 f8d8 	bl	800425c <_ProcessFuncSignalMenuStateEvents>
			break;
 80040ac:	e01e      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80040ae:	f000 f8f1 	bl	8004294 <_ProcessFuncAuxMenuStateEvents>
			break;
 80040b2:	e01b      	b.n	80040ec <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80040b4:	f000 f914 	bl	80042e0 <_ProcessGainMainMenuStateEvents>
			break;
 80040b8:	e018      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80040ba:	f000 f949 	bl	8004350 <_ProcessGainSignalMenuStateEvents>
			break;
 80040be:	e015      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 80040c0:	f000 f990 	bl	80043e4 <_ProcessGainAuxMenuStateEvents>
			break;
 80040c4:	e012      	b.n	80040ec <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 80040c6:	f000 f9a9 	bl	800441c <_ProcessFreqMainMenuStateEvents>
			break;
 80040ca:	e00f      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 80040cc:	f000 f9e4 	bl	8004498 <_ProcessFreqPresetMenuStateEvents>
			break;
 80040d0:	e00c      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 80040d2:	f000 f9fd 	bl	80044d0 <_ProcessFreqAdjustMenuState>
			break;
 80040d6:	e009      	b.n	80040ec <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 80040d8:	f000 fa16 	bl	8004508 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 80040dc:	e006      	b.n	80040ec <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 80040de:	f000 fa2f 	bl	8004540 <_ProcessFreqSweepMenuStateEvents>
			break;
 80040e2:	e003      	b.n	80040ec <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 80040e4:	f000 fa76 	bl	80045d4 <_ProcessBiasMainMenuEvents>
			break;
 80040e8:	e000      	b.n	80040ec <EM_ProcessEvent+0xb0>

		default:
			break;
 80040ea:	bf00      	nop
	}

}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20001e56 	.word	0x20001e56

080040f4 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <_ProcessIdleStateEvents+0x30>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004100:	f000 ff0a 	bl	8004f18 <ToplevelOutputMenuEntryHandler>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <_ProcessIdleStateEvents+0x34>)
 800410a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <_ProcessIdleStateEvents+0x30>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d105      	bne.n	8004120 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004114:	f000 ff24 	bl	8004f60 <ToplevelInputMenuEntryHandler>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <_ProcessIdleStateEvents+0x34>)
 800411e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20001e57 	.word	0x20001e57
 8004128:	20001e56 	.word	0x20001e56

0800412c <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b06      	cmp	r3, #6
 8004136:	d105      	bne.n	8004144 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004138:	f000 ff00 	bl	8004f3c <ToplevelOutputMenuExitHandler>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004142:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d108      	bne.n	800415e <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800414c:	2000      	movs	r0, #0
 800414e:	f000 fed3 	bl	8004ef8 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 8004152:	f000 fcc1 	bl	8004ad8 <FuncMainMenuEntryHandler>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800415c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d108      	bne.n	8004178 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004166:	2000      	movs	r0, #0
 8004168:	f000 fec6 	bl	8004ef8 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 800416c:	f000 fbae 	bl	80048cc <FreqMainMenuEntryHandler>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004176:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d108      	bne.n	8004192 <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004180:	2000      	movs	r0, #0
 8004182:	f000 feb9 	bl	8004ef8 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 8004186:	f000 fd9d 	bl	8004cc4 <GainMainMenuEntryHandler>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004190:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d108      	bne.n	80041ac <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800419a:	2000      	movs	r0, #0
 800419c:	f000 feac 	bl	8004ef8 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80041a0:	f7ff ff0a 	bl	8003fb8 <BiasMenuEntryHandler>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80041aa:	701a      	strb	r2, [r3, #0]
	}
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20001e57 	.word	0x20001e57
 80041b4:	20001e56 	.word	0x20001e56

080041b8 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d105      	bne.n	80041d0 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 80041c4:	f000 ff00 	bl	8004fc8 <ToplevelInputMenuExitHandler>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80041ce:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d108      	bne.n	80041ea <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fed1 	bl	8004f84 <ToplevelInputMenuInputHandler>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80041e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d108      	bne.n	8004204 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fec4 	bl	8004f84 <ToplevelInputMenuInputHandler>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004202:	701a      	strb	r2, [r3, #0]
	}
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20001e57 	.word	0x20001e57
 800420c:	20001e56 	.word	0x20001e56

08004210 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <_ProcessFuncMainMenuStateEvents+0x44>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b06      	cmp	r3, #6
 800421a:	d105      	bne.n	8004228 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 800421c:	f000 fc6e 	bl	8004afc <FuncMainMenuExitHandler>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004226:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <_ProcessFuncMainMenuStateEvents+0x44>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004230:	f000 fc78 	bl	8004b24 <FuncSignalMenuEntryHandler>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <_ProcessFuncMainMenuStateEvents+0x48>)
 800423a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <_ProcessFuncMainMenuStateEvents+0x44>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d105      	bne.n	8004250 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 8004244:	f000 fcb2 	bl	8004bac <FuncAuxMenuEntryHandler>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	4b02      	ldr	r3, [pc, #8]	; (8004258 <_ProcessFuncMainMenuStateEvents+0x48>)
 800424e:	701a      	strb	r2, [r3, #0]
	}
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20001e57 	.word	0x20001e57
 8004258:	20001e56 	.word	0x20001e56

0800425c <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d105      	bne.n	8004274 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 8004268:	f000 fc7a 	bl	8004b60 <FuncSignalMenuInputHandler>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004272:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b06      	cmp	r3, #6
 800427a:	d105      	bne.n	8004288 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 800427c:	f000 fc82 	bl	8004b84 <FuncSignalMenuExitHandler>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004286:	701a      	strb	r2, [r3, #0]
	}
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20001e57 	.word	0x20001e57
 8004290:	20001e56 	.word	0x20001e56

08004294 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d105      	bne.n	80042ac <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80042a0:	f000 fca2 	bl	8004be8 <FuncAuxMenuInputHandler>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <_ProcessFuncAuxMenuStateEvents+0x48>)
 80042aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d105      	bne.n	80042c0 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80042b4:	f000 fce6 	bl	8004c84 <FuncAuxMenuExitHandler>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <_ProcessFuncAuxMenuStateEvents+0x48>)
 80042be:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d105      	bne.n	80042d4 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 80042c8:	f000 fcca 	bl	8004c60 <FuncAuxToggleDutyMode>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <_ProcessFuncAuxMenuStateEvents+0x48>)
 80042d2:	701a      	strb	r2, [r3, #0]
	}

}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20001e57 	.word	0x20001e57
 80042dc:	20001e56 	.word	0x20001e56

080042e0 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <_ProcessGainMainMenuStateEvents+0x68>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d108      	bne.n	8004300 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 80042ee:	f000 fcfb 	bl	8004ce8 <GainMainMenuExitHandler>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <_ProcessGainMainMenuStateEvents+0x6c>)
 80042f8:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80042fa:	2002      	movs	r0, #2
 80042fc:	f000 fdfc 	bl	8004ef8 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <_ProcessGainMainMenuStateEvents+0x68>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004308:	f000 fd00 	bl	8004d0c <GainSignalMenuEntryHandler>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <_ProcessGainMainMenuStateEvents+0x6c>)
 8004312:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <_ProcessGainMainMenuStateEvents+0x68>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d110      	bne.n	800433e <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800431c:	2001      	movs	r0, #1
 800431e:	f002 f92d 	bl	800657c <SM_GetOutputChannel>
 8004322:	4603      	mov	r3, r0
 8004324:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d005      	beq.n	800433e <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 8004332:	f000 fd81 	bl	8004e38 <GainAuxMenuEntryHandler>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <_ProcessGainMainMenuStateEvents+0x6c>)
 800433c:	701a      	strb	r2, [r3, #0]
	}
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20001e57 	.word	0x20001e57
 800434c:	20001e56 	.word	0x20001e56

08004350 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004354:	4b21      	ldr	r3, [pc, #132]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d106      	bne.n	800436a <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 800435c:	2005      	movs	r0, #5
 800435e:	f000 fd07 	bl	8004d70 <GainSignalMenuInputHandler>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004368:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d105      	bne.n	800437e <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 8004372:	f000 fd4f 	bl	8004e14 <GainSignalMenuExitHandler>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 800437c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 8004386:	2001      	movs	r0, #1
 8004388:	f000 fcf2 	bl	8004d70 <GainSignalMenuInputHandler>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004392:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d106      	bne.n	80043aa <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 800439c:	2002      	movs	r0, #2
 800439e:	f000 fce7 	bl	8004d70 <GainSignalMenuInputHandler>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 80043a8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d106      	bne.n	80043c0 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80043b2:	2003      	movs	r0, #3
 80043b4:	f000 fcdc 	bl	8004d70 <GainSignalMenuInputHandler>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 80043be:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <_ProcessGainSignalMenuStateEvents+0x8c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d106      	bne.n	80043d6 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 80043c8:	2004      	movs	r0, #4
 80043ca:	f000 fcd1 	bl	8004d70 <GainSignalMenuInputHandler>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <_ProcessGainSignalMenuStateEvents+0x90>)
 80043d4:	701a      	strb	r2, [r3, #0]
	}

}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20001e57 	.word	0x20001e57
 80043e0:	20001e56 	.word	0x20001e56

080043e4 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <_ProcessGainAuxMenuStateEvents+0x30>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d105      	bne.n	80043fc <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 80043f0:	f000 fd52 	bl	8004e98 <GainAuxMenuInputHandler>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <_ProcessGainAuxMenuStateEvents+0x34>)
 80043fa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_ProcessGainAuxMenuStateEvents+0x30>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b06      	cmp	r3, #6
 8004402:	d105      	bne.n	8004410 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004404:	f000 fd5a 	bl	8004ebc <GainAuxMenuExitHandler>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	4b02      	ldr	r3, [pc, #8]	; (8004418 <_ProcessGainAuxMenuStateEvents+0x34>)
 800440e:	701a      	strb	r2, [r3, #0]
	}
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20001e57 	.word	0x20001e57
 8004418:	20001e56 	.word	0x20001e56

0800441c <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b06      	cmp	r3, #6
 8004426:	d108      	bne.n	800443a <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004428:	f000 fa62 	bl	80048f0 <FreqMainMenuExitHandler>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004432:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004434:	2002      	movs	r0, #2
 8004436:	f000 fd5f 	bl	8004ef8 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <_ProcessFreqMainMenuStateEvents+0x74>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004442:	f000 fa6d 	bl	8004920 <FreqPresetMenuEntryHandler>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <_ProcessFreqMainMenuStateEvents+0x78>)
 800444c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d105      	bne.n	8004462 <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 8004456:	f000 fab3 	bl	80049c0 <FreqAdjustMenuEntryHandler>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004460:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d105      	bne.n	8004476 <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 800446a:	f000 f8e3 	bl	8004634 <FreqSweepMenuEntryHandler>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004474:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d105      	bne.n	800448a <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 800447e:	f000 fad9 	bl	8004a34 <FreqPrescalerMenuEntryHandler>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b03      	ldr	r3, [pc, #12]	; (8004494 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004488:	701a      	strb	r2, [r3, #0]
	}
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20001e57 	.word	0x20001e57
 8004494:	20001e56 	.word	0x20001e56

08004498 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <_ProcessFreqPresetMenuStateEvents+0x30>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d105      	bne.n	80044b0 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80044a4:	f000 fa68 	bl	8004978 <FreqPresetMenuInputHandler>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <_ProcessFreqPresetMenuStateEvents+0x34>)
 80044ae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d105      	bne.n	80044c4 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80044b8:	f000 fa70 	bl	800499c <FreqPresetMenuExitHandler>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <_ProcessFreqPresetMenuStateEvents+0x34>)
 80044c2:	701a      	strb	r2, [r3, #0]
	}
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20001e57 	.word	0x20001e57
 80044cc:	20001e56 	.word	0x20001e56

080044d0 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <_ProcessFreqAdjustMenuState+0x30>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d105      	bne.n	80044e8 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 80044dc:	f000 fa8c 	bl	80049f8 <FreqAdjustMenuInputHandler>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <_ProcessFreqAdjustMenuState+0x34>)
 80044e6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_ProcessFreqAdjustMenuState+0x30>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d105      	bne.n	80044fc <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 80044f0:	f000 fa8e 	bl	8004a10 <FreqAdjustMenuExitHandler>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <_ProcessFreqAdjustMenuState+0x34>)
 80044fa:	701a      	strb	r2, [r3, #0]
	}
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20001e57 	.word	0x20001e57
 8004504:	20001e56 	.word	0x20001e56

08004508 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b05      	cmp	r3, #5
 8004512:	d105      	bne.n	8004520 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004514:	f000 faaa 	bl	8004a6c <FreqPrescalerMenuInputHandler>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 800451e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d105      	bne.n	8004534 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004528:	f000 faac 	bl	8004a84 <FreqPrescalerMenuExitHandler>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b02      	ldr	r3, [pc, #8]	; (800453c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004532:	701a      	strb	r2, [r3, #0]
	}
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20001e57 	.word	0x20001e57
 800453c:	20001e56 	.word	0x20001e56

08004540 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d106      	bne.n	800455a <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 800454c:	2007      	movs	r0, #7
 800454e:	f000 f8c7 	bl	80046e0 <FreqSweepMenuInputHandler>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004558:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d106      	bne.n	8004570 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004562:	2008      	movs	r0, #8
 8004564:	f000 f8bc 	bl	80046e0 <FreqSweepMenuInputHandler>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800456e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d106      	bne.n	8004586 <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004578:	2009      	movs	r0, #9
 800457a:	f000 f8b1 	bl	80046e0 <FreqSweepMenuInputHandler>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004584:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b04      	cmp	r3, #4
 800458c:	d106      	bne.n	800459c <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 800458e:	200a      	movs	r0, #10
 8004590:	f000 f8a6 	bl	80046e0 <FreqSweepMenuInputHandler>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800459a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d106      	bne.n	80045b2 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80045a4:	200b      	movs	r0, #11
 80045a6:	f000 f89b 	bl	80046e0 <FreqSweepMenuInputHandler>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80045b0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d105      	bne.n	80045c6 <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 80045ba:	f000 f967 	bl	800488c <FreqSweepMenuExitHandler>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80045c4:	701a      	strb	r2, [r3, #0]
	}

}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20001e57 	.word	0x20001e57
 80045d0:	20001e56 	.word	0x20001e56

080045d4 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <_ProcessBiasMainMenuEvents+0x38>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d105      	bne.n	80045ec <_ProcessBiasMainMenuEvents+0x18>
	{
		eNextState = BiasMenuInputHandler();
 80045e0:	f7ff fd08 	bl	8003ff4 <BiasMenuInputHandler>
 80045e4:	4603      	mov	r3, r0
 80045e6:	461a      	mov	r2, r3
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <_ProcessBiasMainMenuEvents+0x3c>)
 80045ea:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <_ProcessBiasMainMenuEvents+0x38>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d108      	bne.n	8004606 <_ProcessBiasMainMenuEvents+0x32>
	{
		eNextState = BiasMenuExitHandler();
 80045f4:	f7ff fd10 	bl	8004018 <BiasMenuExitHandler>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <_ProcessBiasMainMenuEvents+0x3c>)
 80045fe:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004600:	2002      	movs	r0, #2
 8004602:	f000 fc79 	bl	8004ef8 <ToplevelMenu_setStatus>
	}
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20001e57 	.word	0x20001e57
 8004610:	20001e56 	.word	0x20001e56

08004614 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800461e:	4a04      	ldr	r2, [pc, #16]	; (8004630 <EM_SetNewEvent+0x1c>)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	7013      	strb	r3, [r2, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20001e57 	.word	0x20001e57

08004634 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004638:	f7fc ff36 	bl	80014a8 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 800463c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <FreqSweepMenuEntryHandler+0x98>)
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	eeb4 7a67 	vcmp.f32	s14, s15
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	d009      	beq.n	800466e <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800465a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <FreqSweepMenuEntryHandler+0x98>)
 800466a:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <FreqSweepMenuEntryHandler+0x98>)
 8004670:	edd3 7a00 	vldr	s15, [r3]
 8004674:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004678:	eef4 7a47 	vcmp.f32	s15, s14
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	d101      	bne.n	8004686 <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 8004682:	f001 f891 	bl	80057a8 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004686:	2000      	movs	r0, #0
 8004688:	f001 f8e4 	bl	8005854 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800468c:	2000      	movs	r0, #0
 800468e:	f001 f93f 	bl	8005910 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004692:	f001 f979 	bl	8005988 <FS_GetCalculatedSweepFrequencyInHertz>
 8004696:	eef0 7a40 	vmov.f32	s15, s0
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <FreqSweepMenuEntryHandler+0x9c>)
 800469c:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <FreqSweepMenuEntryHandler+0xa0>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80046a6:	2009      	movs	r0, #9
 80046a8:	f000 f81a 	bl	80046e0 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80046ac:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <FreqSweepMenuEntryHandler+0xa0>)
 80046ae:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <FreqSweepMenuEntryHandler+0xa0>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <FreqSweepMenuEntryHandler+0xa4>)
 80046bc:	2204      	movs	r2, #4
 80046be:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <FreqSweepMenuEntryHandler+0xa8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80046c6:	230d      	movs	r3, #13
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000124 	.word	0x20000124
 80046d0:	2000226c 	.word	0x2000226c
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	20001e5a 	.word	0x20001e5a
 80046dc:	20001e57 	.word	0x20001e57

080046e0 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	3b07      	subs	r3, #7
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	f200 80b2 	bhi.w	8004858 <FreqSweepMenuInputHandler+0x178>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <FreqSweepMenuInputHandler+0x1c>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004711 	.word	0x08004711
 8004700:	0800472b 	.word	0x0800472b
 8004704:	08004849 	.word	0x08004849
 8004708:	08004851 	.word	0x08004851
 800470c:	08004765 	.word	0x08004765
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004710:	4b56      	ldr	r3, [pc, #344]	; (800486c <FreqSweepMenuInputHandler+0x18c>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a55      	ldr	r2, [pc, #340]	; (800486c <FreqSweepMenuInputHandler+0x18c>)
 8004716:	f083 0301 	eor.w	r3, r3, #1
 800471a:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <FreqSweepMenuInputHandler+0x18c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <FreqSweepMenuInputHandler+0x18c>)
 8004722:	f083 0301 	eor.w	r3, r3, #1
 8004726:	6013      	str	r3, [r2, #0]
			break;
 8004728:	e097      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <FreqSweepMenuInputHandler+0x190>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <FreqSweepMenuInputHandler+0x190>)
 8004736:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004738:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <FreqSweepMenuInputHandler+0x190>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d004      	beq.n	800474a <FreqSweepMenuInputHandler+0x6a>
 8004740:	2b02      	cmp	r3, #2
 8004742:	d008      	beq.n	8004756 <FreqSweepMenuInputHandler+0x76>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <FreqSweepMenuInputHandler+0x70>
 8004748:	e006      	b.n	8004758 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 800474a:	f001 f82d 	bl	80057a8 <FS_SetSweepModeDown>
					break;
 800474e:	e003      	b.n	8004758 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004750:	f001 f858 	bl	8005804 <FS_SetSweepModeUp>
					break;
 8004754:	e000      	b.n	8004758 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004756:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004758:	4b46      	ldr	r3, [pc, #280]	; (8004874 <FreqSweepMenuInputHandler+0x194>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f879 	bl	8005854 <FS_SetEncoderControlMode>

			break;
 8004762:	e07a      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004764:	4b43      	ldr	r3, [pc, #268]	; (8004874 <FreqSweepMenuInputHandler+0x194>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <FreqSweepMenuInputHandler+0x92>
 800476c:	2b01      	cmp	r3, #1
 800476e:	d00b      	beq.n	8004788 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004770:	e073      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004772:	2000      	movs	r0, #0
 8004774:	f001 f8cc 	bl	8005910 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004778:	f001 f906 	bl	8005988 <FS_GetCalculatedSweepFrequencyInHertz>
 800477c:	eef0 7a40 	vmov.f32	s15, s0
 8004780:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <FreqSweepMenuInputHandler+0x198>)
 8004782:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004786:	e05e      	b.n	8004846 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004788:	4b39      	ldr	r3, [pc, #228]	; (8004870 <FreqSweepMenuInputHandler+0x190>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <FreqSweepMenuInputHandler+0xb6>
 8004790:	2b01      	cmp	r3, #1
 8004792:	d02a      	beq.n	80047ea <FreqSweepMenuInputHandler+0x10a>
							break;
 8004794:	e056      	b.n	8004844 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d803      	bhi.n	80047a6 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047a0:	220d      	movs	r2, #13
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80047a4:	e04e      	b.n	8004844 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80047a6:	4b35      	ldr	r3, [pc, #212]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047b2:	4b33      	ldr	r3, [pc, #204]	; (8004880 <FreqSweepMenuInputHandler+0x1a0>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	dd09      	ble.n	80047d6 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <FreqSweepMenuInputHandler+0x1a0>)
 80047c4:	edd3 7a00 	vldr	s15, [r3]
 80047c8:	4b2c      	ldr	r3, [pc, #176]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ce:	ee17 2a90 	vmov	r2, s15
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80047d4:	e036      	b.n	8004844 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	4b28      	ldr	r3, [pc, #160]	; (8004884 <FreqSweepMenuInputHandler+0x1a4>)
 80047e4:	edc3 7a00 	vstr	s15, [r3]
							break;
 80047e8:	e02c      	b.n	8004844 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d904      	bls.n	8004800 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 80047f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80047fe:	e020      	b.n	8004842 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <FreqSweepMenuInputHandler+0x1a4>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d509      	bpl.n	8004830 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <FreqSweepMenuInputHandler+0x1a4>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 8004824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004828:	ee17 2a90 	vmov	r2, s15
 800482c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800482e:	e008      	b.n	8004842 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <FreqSweepMenuInputHandler+0x19c>)
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <FreqSweepMenuInputHandler+0x1a0>)
 800483e:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004842:	bf00      	nop
					break;
 8004844:	bf00      	nop
			break;
 8004846:	e008      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004848:	2000      	movs	r0, #0
 800484a:	f001 f803 	bl	8005854 <FS_SetEncoderControlMode>

			break;
 800484e:	e004      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004850:	2001      	movs	r0, #1
 8004852:	f000 ffff 	bl	8005854 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004856:	e000      	b.n	800485a <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004858:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <FreqSweepMenuInputHandler+0x1a8>)
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004860:	230d      	movs	r3, #13
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40000c00 	.word	0x40000c00
 8004870:	20001e58 	.word	0x20001e58
 8004874:	20001e59 	.word	0x20001e59
 8004878:	2000226c 	.word	0x2000226c
 800487c:	40012c00 	.word	0x40012c00
 8004880:	20000124 	.word	0x20000124
 8004884:	20000120 	.word	0x20000120
 8004888:	20001e57 	.word	0x20001e57

0800488c <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004890:	f7fc fe0a 	bl	80014a8 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <FreqSweepMenuExitHandler+0x34>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <FreqSweepMenuExitHandler+0x34>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <FreqSweepMenuExitHandler+0x34>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a06      	ldr	r2, [pc, #24]	; (80048c0 <FreqSweepMenuExitHandler+0x34>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <FreqSweepMenuExitHandler+0x38>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <FreqSweepMenuExitHandler+0x3c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80048b8:	230a      	movs	r3, #10
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	20001e5a 	.word	0x20001e5a
 80048c8:	20001e57 	.word	0x20001e57

080048cc <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80048d0:	f7fc fdea 	bl	80014a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <FreqMainMenuEntryHandler+0x1c>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <FreqMainMenuEntryHandler+0x20>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80048e0:	230a      	movs	r3, #10
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20001e5a 	.word	0x20001e5a
 80048ec:	20001e57 	.word	0x20001e57

080048f0 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <FreqMainMenuExitHandler+0x24>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <FreqMainMenuExitHandler+0x28>)
 80048fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004902:	f7fc fdd1 	bl	80014a8 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <FreqMainMenuExitHandler+0x2c>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20001e5a 	.word	0x20001e5a
 8004918:	40012c00 	.word	0x40012c00
 800491c:	20001e57 	.word	0x20001e57

08004920 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004926:	f7fc fdbf 	bl	80014a8 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 800492a:	f000 ff31 	bl	8005790 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <FreqPresetMenuEntryHandler+0x48>)
 8004930:	2202      	movs	r2, #2
 8004932:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004934:	f000 fede 	bl	80056f4 <FreqO_GetFPresetObject>
 8004938:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <FreqPresetMenuEntryHandler+0x4c>)
 8004942:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004946:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004948:	4b08      	ldr	r3, [pc, #32]	; (800496c <FreqPresetMenuEntryHandler+0x4c>)
 800494a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004950:	e002      	b.n	8004958 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <FreqPresetMenuEntryHandler+0x50>)
 8004954:	f7fc fdee 	bl	8001534 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <FreqPresetMenuEntryHandler+0x54>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800495e:	230b      	movs	r3, #11
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20001e5a 	.word	0x20001e5a
 800496c:	40012c00 	.word	0x40012c00
 8004970:	08014a54 	.word	0x08014a54
 8004974:	20001e57 	.word	0x20001e57

08004978 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 800497c:	2000      	movs	r0, #0
 800497e:	f002 f879 	bl	8006a74 <SM_GetEncoderValue>
 8004982:	4603      	mov	r3, r0
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd91 	bl	80054ac <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <FreqPresetMenuInputHandler+0x20>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004990:	230b      	movs	r3, #11
}
 8004992:	4618      	mov	r0, r3
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20001e57 	.word	0x20001e57

0800499c <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049a0:	f7fc fd82 	bl	80014a8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <FreqPresetMenuExitHandler+0x1c>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <FreqPresetMenuExitHandler+0x20>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80049b0:	230a      	movs	r3, #10
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20001e5a 	.word	0x20001e5a
 80049bc:	20001e57 	.word	0x20001e57

080049c0 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049c4:	f7fc fd70 	bl	80014a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <FreqAdjustMenuEntryHandler+0x2c>)
 80049ca:	2203      	movs	r2, #3
 80049cc:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80049ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <FreqAdjustMenuEntryHandler+0x30>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <FreqAdjustMenuEntryHandler+0x30>)
 80049da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <FreqAdjustMenuEntryHandler+0x34>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80049e6:	230c      	movs	r3, #12
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20001e5a 	.word	0x20001e5a
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	20001e57 	.word	0x20001e57

080049f8 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 80049fc:	f000 fe26 	bl	800564c <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <FreqAdjustMenuInputHandler+0x14>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004a06:	230c      	movs	r3, #12
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20001e57 	.word	0x20001e57

08004a10 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a14:	f7fc fd48 	bl	80014a8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <FreqAdjustMenuExitHandler+0x1c>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <FreqAdjustMenuExitHandler+0x20>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a24:	230a      	movs	r3, #10
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001e5a 	.word	0x20001e5a
 8004a30:	20001e57 	.word	0x20001e57

08004a34 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a38:	f7fc fd36 	bl	80014a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004a3e:	2205      	movs	r2, #5
 8004a40:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <FreqPrescalerMenuEntryHandler+0x30>)
 8004a44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <FreqPrescalerMenuEntryHandler+0x30>)
 8004a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <FreqPrescalerMenuEntryHandler+0x34>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004a58:	230e      	movs	r3, #14
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20001e5a 	.word	0x20001e5a
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	20001e57 	.word	0x20001e57

08004a6c <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004a70:	f000 fe18 	bl	80056a4 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <FreqPrescalerMenuInputHandler+0x14>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004a7a:	230e      	movs	r3, #14
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20001e57 	.word	0x20001e57

08004a84 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a88:	f7fc fd0e 	bl	80014a8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <FreqPrescalerMenuExitHandler+0x1c>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <FreqPrescalerMenuExitHandler+0x20>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a98:	230a      	movs	r3, #10
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20001e5a 	.word	0x20001e5a
 8004aa4:	20001e57 	.word	0x20001e57

08004aa8 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <FreqMenu_getStatus+0x14>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20001e5a 	.word	0x20001e5a

08004ac0 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <FuncMenu_getStatus+0x14>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20001e5b 	.word	0x20001e5b

08004ad8 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004adc:	f7fc fce4 	bl	80014a8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <FuncMainMenuEntryHandler+0x1c>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <FuncMainMenuEntryHandler+0x20>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004aec:	2303      	movs	r3, #3
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20001e5b 	.word	0x20001e5b
 8004af8:	20001e57 	.word	0x20001e57

08004afc <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <FuncMainMenuExitHandler+0x20>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004b06:	2002      	movs	r0, #2
 8004b08:	f000 f9f6 	bl	8004ef8 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004b0c:	f7fc fccc 	bl	80014a8 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <FuncMainMenuExitHandler+0x24>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20001e5b 	.word	0x20001e5b
 8004b20:	20001e57 	.word	0x20001e57

08004b24 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b28:	f7fc fcbe 	bl	80014a8 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004b2c:	f000 ff5a 	bl	80059e4 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <FuncSignalMenuEntryHandler+0x30>)
 8004b32:	2202      	movs	r2, #2
 8004b34:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <FuncSignalMenuEntryHandler+0x34>)
 8004b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <FuncSignalMenuEntryHandler+0x34>)
 8004b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <FuncSignalMenuEntryHandler+0x38>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004b4c:	2304      	movs	r3, #4
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20001e5b 	.word	0x20001e5b
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	20001e57 	.word	0x20001e57

08004b60 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004b64:	2000      	movs	r0, #0
 8004b66:	f001 ff85 	bl	8006a74 <SM_GetEncoderValue>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ff45 	bl	80059fc <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004b72:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <FuncSignalMenuInputHandler+0x20>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004b78:	2304      	movs	r3, #4
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20001e57 	.word	0x20001e57

08004b84 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <FuncSignalMenuExitHandler+0x20>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004b8e:	f7fc fc8b 	bl	80014a8 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004b92:	f002 f813 	bl	8006bbc <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <FuncSignalMenuExitHandler+0x24>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004b9c:	2303      	movs	r3, #3
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20001e5b 	.word	0x20001e5b
 8004ba8:	20001e57 	.word	0x20001e57

08004bac <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb0:	f7fc fc7a 	bl	80014a8 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004bb4:	f000 ff16 	bl	80059e4 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <FuncAuxMenuEntryHandler+0x30>)
 8004bba:	2203      	movs	r2, #3
 8004bbc:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <FuncAuxMenuEntryHandler+0x34>)
 8004bc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <FuncAuxMenuEntryHandler+0x34>)
 8004bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bcc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <FuncAuxMenuEntryHandler+0x38>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004bd4:	2305      	movs	r3, #5
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20001e5b 	.word	0x20001e5b
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	20001e57 	.word	0x20001e57

08004be8 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004bee:	f001 ffc9 	bl	8006b84 <SM_IsFuncPwmDutyMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01a      	beq.n	8004c2e <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f001 ff3b 	bl	8006a74 <SM_GetEncoderValue>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fca5 	bl	8000554 <__aeabi_ui2d>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004c50 <FuncAuxMenuInputHandler+0x68>
 8004c12:	ec44 3b10 	vmov	d0, r3, r4
 8004c16:	f00e f9f7 	bl	8013008 <pow>
 8004c1a:	ec53 2b10 	vmov	r2, r3, d0
 8004c1e:	4c0e      	ldr	r4, [pc, #56]	; (8004c58 <FuncAuxMenuInputHandler+0x70>)
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7fb ffe8 	bl	8000bf8 <__aeabi_d2uiz>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2c:	e006      	b.n	8004c3c <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f001 ff20 	bl	8006a74 <SM_GetEncoderValue>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 ff1a 	bl	8005a70 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <FuncAuxMenuInputHandler+0x74>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004c42:	2305      	movs	r3, #5
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}
 8004c4c:	f3af 8000 	nop.w
 8004c50:	00000000 	.word	0x00000000
 8004c54:	40000000 	.word	0x40000000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	20001e57 	.word	0x20001e57

08004c60 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004c64:	f001 ff9a 	bl	8006b9c <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <FuncAuxToggleDutyMode+0x1c>)
 8004c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <FuncAuxToggleDutyMode+0x20>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004c76:	2305      	movs	r3, #5
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	20001e57 	.word	0x20001e57

08004c84 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <FuncAuxMenuExitHandler+0x20>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004c8e:	f001 ff95 	bl	8006bbc <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004c92:	f7fc fc09 	bl	80014a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <FuncAuxMenuExitHandler+0x24>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004c9c:	2303      	movs	r3, #3
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20001e5b 	.word	0x20001e5b
 8004ca8:	20001e57 	.word	0x20001e57

08004cac <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <GainMenu_getStatus+0x14>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20001e5c 	.word	0x20001e5c

08004cc4 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004cc8:	f7fc fbee 	bl	80014a8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <GainMainMenuEntryHandler+0x1c>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <GainMainMenuEntryHandler+0x20>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004cd8:	2306      	movs	r3, #6
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20001e5c 	.word	0x20001e5c
 8004ce4:	20001e57 	.word	0x20001e57

08004ce8 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <GainMainMenuExitHandler+0x1c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004cf2:	f7fc fbd9 	bl	80014a8 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <GainMainMenuExitHandler+0x20>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004cfc:	2301      	movs	r3, #1
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20001e5c 	.word	0x20001e5c
 8004d08:	20001e57 	.word	0x20001e57

08004d0c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d12:	f7fc fbc9 	bl	80014a8 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004d16:	f001 f8a3 	bl	8005e60 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004d1a:	f001 ff5b 	bl	8006bd4 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <GainSignalMenuEntryHandler+0x54>)
 8004d20:	2202      	movs	r2, #2
 8004d22:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004d24:	2000      	movs	r0, #0
 8004d26:	f001 fc29 	bl	800657c <SM_GetOutputChannel>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004d30:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <GainSignalMenuEntryHandler+0x58>)
 8004d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <GainSignalMenuEntryHandler+0x58>)
 8004d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d48:	e002      	b.n	8004d50 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004d4a:	4807      	ldr	r0, [pc, #28]	; (8004d68 <GainSignalMenuEntryHandler+0x5c>)
 8004d4c:	f7fc fbf2 	bl	8001534 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <GainSignalMenuEntryHandler+0x60>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004d56:	2307      	movs	r3, #7
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20001e5c 	.word	0x20001e5c
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	08014a90 	.word	0x08014a90
 8004d6c:	20001e57 	.word	0x20001e57

08004d70 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f001 fbfe 	bl	800657c <SM_GetOutputChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004d86:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d834      	bhi.n	8004dfa <GainSignalMenuInputHandler+0x8a>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <GainSignalMenuInputHandler+0x28>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004ddb 	.word	0x08004ddb
 8004d9c:	08004de3 	.word	0x08004de3
 8004da0:	08004deb 	.word	0x08004deb
 8004da4:	08004df3 	.word	0x08004df3
 8004da8:	08004dad 	.word	0x08004dad
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d025      	beq.n	8004dfe <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d107      	bne.n	8004dca <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f001 fe5a 	bl	8006a74 <SM_GetEncoderValue>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f858 	bl	8005e78 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8004dc8:	e019      	b.n	8004dfe <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f001 fe52 	bl	8006a74 <SM_GetEncoderValue>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f002 f870 	bl	8006eb8 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8004dd8:	e011      	b.n	8004dfe <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8004dda:	2011      	movs	r0, #17
 8004ddc:	f001 ff06 	bl	8006bec <VPP_ApplyProfileToSignal>
			break;
 8004de0:	e00e      	b.n	8004e00 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8004de2:	2020      	movs	r0, #32
 8004de4:	f001 ff02 	bl	8006bec <VPP_ApplyProfileToSignal>
			break;
 8004de8:	e00a      	b.n	8004e00 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8004dea:	2031      	movs	r0, #49	; 0x31
 8004dec:	f001 fefe 	bl	8006bec <VPP_ApplyProfileToSignal>
			break;
 8004df0:	e006      	b.n	8004e00 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8004df2:	2059      	movs	r0, #89	; 0x59
 8004df4:	f001 fefa 	bl	8006bec <VPP_ApplyProfileToSignal>
			break;
 8004df8:	e002      	b.n	8004e00 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <GainSignalMenuInputHandler+0x90>
			break;
 8004dfe:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <GainSignalMenuInputHandler+0xa0>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004e06:	2307      	movs	r3, #7
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20001e57 	.word	0x20001e57

08004e14 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <GainSignalMenuExitHandler+0x1c>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004e1e:	f7fc fb43 	bl	80014a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <GainSignalMenuExitHandler+0x20>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004e28:	2306      	movs	r3, #6
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20001e5c 	.word	0x20001e5c
 8004e34:	20001e57 	.word	0x20001e57

08004e38 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e3e:	f7fc fb33 	bl	80014a8 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004e42:	f001 fec7 	bl	8006bd4 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <GainAuxMenuEntryHandler+0x50>)
 8004e48:	2203      	movs	r2, #3
 8004e4a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f001 fb95 	bl	800657c <SM_GetOutputChannel>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004e58:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <GainAuxMenuEntryHandler+0x54>)
 8004e62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <GainAuxMenuEntryHandler+0x54>)
 8004e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e70:	e002      	b.n	8004e78 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004e72:	4807      	ldr	r0, [pc, #28]	; (8004e90 <GainAuxMenuEntryHandler+0x58>)
 8004e74:	f7fc fb5e 	bl	8001534 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <GainAuxMenuEntryHandler+0x5c>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004e7e:	2308      	movs	r3, #8
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20001e5c 	.word	0x20001e5c
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	08014a90 	.word	0x08014a90
 8004e94:	20001e57 	.word	0x20001e57

08004e98 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f001 fde9 	bl	8006a74 <SM_GetEncoderValue>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 f841 	bl	8006f2c <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004eaa:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <GainAuxMenuInputHandler+0x20>)
 8004eac:	2203      	movs	r2, #3
 8004eae:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004eb0:	2308      	movs	r3, #8
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20001e57 	.word	0x20001e57

08004ebc <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <GainAuxMenuExitHandler+0x1c>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004ec6:	f7fc faef 	bl	80014a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <GainAuxMenuExitHandler+0x20>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004ed0:	2306      	movs	r3, #6
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20001e5c 	.word	0x20001e5c
 8004edc:	20001e57 	.word	0x20001e57

08004ee0 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <ToplevelMenu_getStatus+0x14>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000000 	.word	0x20000000

08004ef8 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004f02:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <ToplevelMenu_setStatus+0x1c>)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	7013      	strb	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000000 	.word	0x20000000

08004f18 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f1c:	f7fc fac4 	bl	80014a8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <ToplevelOutputMenuEntryHandler+0x1c>)
 8004f22:	2202      	movs	r2, #2
 8004f24:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004f26:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <ToplevelOutputMenuEntryHandler+0x20>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004f2c:	2301      	movs	r3, #1
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000000 	.word	0x20000000
 8004f38:	20001e57 	.word	0x20001e57

08004f3c <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f40:	f7fc fab2 	bl	80014a8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <ToplevelOutputMenuExitHandler+0x1c>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <ToplevelOutputMenuExitHandler+0x20>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20001e57 	.word	0x20001e57

08004f60 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f64:	f7fc faa0 	bl	80014a8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <ToplevelInputMenuEntryHandler+0x1c>)
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <ToplevelInputMenuEntryHandler+0x20>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004f74:	2302      	movs	r3, #2
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	20001e57 	.word	0x20001e57

08004f84 <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d002      	beq.n	8004f9a <ToplevelInputMenuInputHandler+0x16>
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d003      	beq.n	8004fa0 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8004f98:	e00b      	b.n	8004fb2 <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8004f9a:	f001 f859 	bl	8006050 <IT_ArbitrateInputTrigger>
				break;
 8004f9e:	e008      	b.n	8004fb2 <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8004fa0:	f001 f94c 	bl	800623c <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7ff ffed 	bl	8004f84 <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7ff ffea 	bl	8004f84 <ToplevelInputMenuInputHandler>
				break;
 8004fb0:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <ToplevelInputMenuInputHandler+0x40>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004fb8:	2302      	movs	r3, #2
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20001e57 	.word	0x20001e57

08004fc8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fcc:	f7fc fa6c 	bl	80014a8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <ToplevelInputMenuExitHandler+0x1c>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004fd6:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <ToplevelInputMenuExitHandler+0x20>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	20001e57 	.word	0x20001e57

08004fec <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d101      	bne.n	8005006 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010400 	.word	0x40010400

08005018 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <IM_Init+0x1c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <IM_Init+0x1c>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40014400 	.word	0x40014400

08005038 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800503c:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d11f      	bne.n	8005088 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8005048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8005058:	edd3 7a00 	vldr	s15, [r3]
 800505c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005064:	db0a      	blt.n	800507c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005074:	ee17 2a90 	vmov	r2, s15
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800507a:	e02f      	b.n	80050dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 800507c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	3201      	adds	r2, #1
 8005084:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005086:	e029      	b.n	80050dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d105      	bne.n	800509e <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8005092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800509c:	e01e      	b.n	80050dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800509e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 80050ae:	edd3 7a00 	vldr	s15, [r3]
 80050b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ba:	d80a      	bhi.n	80050d2 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 80050be:	edd3 7a00 	vldr	s15, [r3]
 80050c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ca:	ee17 2a90 	vmov	r2, s15
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050d0:	e004      	b.n	80050dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 80050d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	3a01      	subs	r2, #1
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	20000124 	.word	0x20000124
 80050f0:	20000120 	.word	0x20000120

080050f4 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80050fa:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <IM_BTN1_EXTI14_Handler+0x44>)
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <IM_BTN1_EXTI14_Handler+0x48>)
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510c:	dd0c      	ble.n	8005128 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800510e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005112:	f7ff ff6b 	bl	8004fec <LL_EXTI_IsActiveFlag_0_31>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 800511c:	2001      	movs	r0, #1
 800511e:	f7ff fa79 	bl	8004614 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8005122:	4807      	ldr	r0, [pc, #28]	; (8005140 <IM_BTN1_EXTI14_Handler+0x4c>)
 8005124:	f00b fe58 	bl	8010dd8 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <IM_BTN1_EXTI14_Handler+0x48>)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	8013      	strh	r3, [r2, #0]


}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40014400 	.word	0x40014400
 800513c:	20001e5e 	.word	0x20001e5e
 8005140:	08014ac8 	.word	0x08014ac8

08005144 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <IM_BTN2_EXTI15_Handler+0x44>)
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <IM_BTN2_EXTI15_Handler+0x48>)
 8005154:	8812      	ldrh	r2, [r2, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800515c:	dd0c      	ble.n	8005178 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800515e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005162:	f7ff ff43 	bl	8004fec <LL_EXTI_IsActiveFlag_0_31>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 800516c:	2003      	movs	r0, #3
 800516e:	f7ff fa51 	bl	8004614 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005172:	4807      	ldr	r0, [pc, #28]	; (8005190 <IM_BTN2_EXTI15_Handler+0x4c>)
 8005174:	f00b fe30 	bl	8010dd8 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <IM_BTN2_EXTI15_Handler+0x48>)
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	8013      	strh	r3, [r2, #0]


}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40014400 	.word	0x40014400
 800518c:	20001e60 	.word	0x20001e60
 8005190:	08014ae0 	.word	0x08014ae0

08005194 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <IM_BTN3_EXTI0_Handler+0x40>)
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <IM_BTN3_EXTI0_Handler+0x44>)
 80051a4:	8812      	ldrh	r2, [r2, #0]
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ac:	dd0b      	ble.n	80051c6 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80051ae:	2001      	movs	r0, #1
 80051b0:	f7ff ff1c 	bl	8004fec <LL_EXTI_IsActiveFlag_0_31>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80051ba:	2004      	movs	r0, #4
 80051bc:	f7ff fa2a 	bl	8004614 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80051c0:	4806      	ldr	r0, [pc, #24]	; (80051dc <IM_BTN3_EXTI0_Handler+0x48>)
 80051c2:	f00b fe09 	bl	8010dd8 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <IM_BTN3_EXTI0_Handler+0x44>)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	8013      	strh	r3, [r2, #0]


}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40014400 	.word	0x40014400
 80051d8:	20001e62 	.word	0x20001e62
 80051dc:	08014afc 	.word	0x08014afc

080051e0 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <IM_BTN4_EXTI1_Handler+0x40>)
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <IM_BTN4_EXTI1_Handler+0x44>)
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f8:	dd0b      	ble.n	8005212 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80051fa:	2002      	movs	r0, #2
 80051fc:	f7ff fef6 	bl	8004fec <LL_EXTI_IsActiveFlag_0_31>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005206:	2002      	movs	r0, #2
 8005208:	f7ff fa04 	bl	8004614 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <IM_BTN4_EXTI1_Handler+0x48>)
 800520e:	f00b fde3 	bl	8010dd8 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8005212:	4a04      	ldr	r2, [pc, #16]	; (8005224 <IM_BTN4_EXTI1_Handler+0x44>)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	8013      	strh	r3, [r2, #0]


}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40014400 	.word	0x40014400
 8005224:	20001e64 	.word	0x20001e64
 8005228:	08014b14 	.word	0x08014b14

0800522c <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <IM_ENC_EXTI2_Handler+0x40>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <IM_ENC_EXTI2_Handler+0x44>)
 800523c:	8812      	ldrh	r2, [r2, #0]
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	dd0b      	ble.n	800525e <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005246:	2004      	movs	r0, #4
 8005248:	f7ff fed0 	bl	8004fec <LL_EXTI_IsActiveFlag_0_31>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8005252:	2006      	movs	r0, #6
 8005254:	f7ff f9de 	bl	8004614 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005258:	4806      	ldr	r0, [pc, #24]	; (8005274 <IM_ENC_EXTI2_Handler+0x48>)
 800525a:	f00b fdbd 	bl	8010dd8 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 800525e:	4a04      	ldr	r2, [pc, #16]	; (8005270 <IM_ENC_EXTI2_Handler+0x44>)
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	8013      	strh	r3, [r2, #0]


}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40014400 	.word	0x40014400
 8005270:	20001e66 	.word	0x20001e66
 8005274:	08014b2c 	.word	0x08014b2c

08005278 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <IM_ENC_DIRF_Handler+0x4c>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800528a:	d117      	bne.n	80052bc <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <IM_ENC_DIRF_Handler+0x50>)
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <IM_ENC_DIRF_Handler+0x54>)
 8005296:	8812      	ldrh	r2, [r2, #0]
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	dd0b      	ble.n	80052b6 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 800529e:	2005      	movs	r0, #5
 80052a0:	f7ff f9b8 	bl	8004614 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 80052a4:	480a      	ldr	r0, [pc, #40]	; (80052d0 <IM_ENC_DIRF_Handler+0x58>)
 80052a6:	f00b fd97 	bl	8010dd8 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <IM_ENC_DIRF_Handler+0x4c>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <IM_ENC_DIRF_Handler+0x4c>)
 80052b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052b4:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 80052b6:	4a05      	ldr	r2, [pc, #20]	; (80052cc <IM_ENC_DIRF_Handler+0x54>)
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	8013      	strh	r3, [r2, #0]


	}


}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40014400 	.word	0x40014400
 80052cc:	20001e68 	.word	0x20001e68
 80052d0:	08014b48 	.word	0x08014b48

080052d4 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <BO_GetBiasPolarity+0x14>)
 80052da:	781b      	ldrb	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000001 	.word	0x20000001

080052ec <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <BO_GetDcBiasEncoderValue+0x14>)
 80052f2:	881b      	ldrh	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000002 	.word	0x20000002

08005304 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800530e:	2000      	movs	r0, #0
 8005310:	f001 fbb0 	bl	8006a74 <SM_GetEncoderValue>
 8005314:	4603      	mov	r3, r0
 8005316:	461a      	mov	r2, r3
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <BO_MapEncoderPositionToSignalOutput+0x84>)
 800531a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005322:	d214      	bcs.n	800534e <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005338:	2200      	movs	r2, #0
 800533a:	2110      	movs	r1, #16
 800533c:	4814      	ldr	r0, [pc, #80]	; (8005390 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 800533e:	f005 fe99 	bl	800b074 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 8005342:	2201      	movs	r2, #1
 8005344:	2108      	movs	r1, #8
 8005346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800534a:	f006 fe55 	bl	800bff8 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005354:	d314      	bcc.n	8005380 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800536a:	2200      	movs	r2, #0
 800536c:	2110      	movs	r1, #16
 800536e:	4808      	ldr	r0, [pc, #32]	; (8005390 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005370:	f005 fe80 	bl	800b074 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 8005374:	2200      	movs	r2, #0
 8005376:	2108      	movs	r1, #8
 8005378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800537c:	f006 fe3c 	bl	800bff8 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000002 	.word	0x20000002
 800538c:	20000001 	.word	0x20000001
 8005390:	20002a00 	.word	0x20002a00

08005394 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005398:	2110      	movs	r1, #16
 800539a:	4803      	ldr	r0, [pc, #12]	; (80053a8 <BO_GetOutputBias+0x14>)
 800539c:	f005 feb0 	bl	800b100 <HAL_DAC_GetValue>
 80053a0:	4603      	mov	r3, r0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20002a00 	.word	0x20002a00

080053ac <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	e06b      	b.n	8005490 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80053b8:	493a      	ldr	r1, [pc, #232]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3308      	adds	r3, #8
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d129      	bne.n	8005422 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80053ce:	4935      	ldr	r1, [pc, #212]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3304      	adds	r3, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <FreqO_InitFreqProfiles+0xfc>)
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053ee:	492d      	ldr	r1, [pc, #180]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3310      	adds	r3, #16
 80053fe:	edd3 7a00 	vldr	s15, [r3]
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540a:	ee17 0a90 	vmov	r0, s15
 800540e:	4925      	ldr	r1, [pc, #148]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	330c      	adds	r3, #12
 800541e:	6018      	str	r0, [r3, #0]
 8005420:	e033      	b.n	800548a <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8005422:	4920      	ldr	r1, [pc, #128]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3304      	adds	r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <FreqO_InitFreqProfiles+0xfc>)
 8005436:	fbb2 f1f3 	udiv	r1, r2, r3
 800543a:	481a      	ldr	r0, [pc, #104]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4403      	add	r3, r0
 8005448:	3308      	adds	r3, #8
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005458:	4912      	ldr	r1, [pc, #72]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3310      	adds	r3, #16
 8005468:	edd3 7a00 	vldr	s15, [r3]
 800546c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005474:	ee17 0a90 	vmov	r0, s15
 8005478:	490a      	ldr	r1, [pc, #40]	; (80054a4 <FreqO_InitFreqProfiles+0xf8>)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	330c      	adds	r3, #12
 8005488:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3301      	adds	r3, #1
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b0d      	cmp	r3, #13
 8005494:	dd90      	ble.n	80053b8 <FreqO_InitFreqProfiles+0xc>
	}
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000004 	.word	0x20000004
 80054a8:	00155cc0 	.word	0x00155cc0

080054ac <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <FreqO_MapEncoderPositionCoarse+0x78>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80054be:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d910      	bls.n	80054ea <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b0d      	cmp	r3, #13
 80054d2:	d901      	bls.n	80054d8 <FreqO_MapEncoderPositionCoarse+0x2c>
 80054d4:	230d      	movs	r3, #13
 80054d6:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f945 	bl	8005768 <FreqO_GetProfileByIndex>
 80054de:	4603      	mov	r3, r0
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f872 	bl	80055cc <FreqO_ApplyProfile>
 80054e8:	e014      	b.n	8005514 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d20f      	bcs.n	8005514 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b0d      	cmp	r3, #13
 80054fe:	d901      	bls.n	8005504 <FreqO_MapEncoderPositionCoarse+0x58>
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f92f 	bl	8005768 <FreqO_GetProfileByIndex>
 800550a:	4603      	mov	r3, r0
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f85c 	bl	80055cc <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005514:	4a04      	ldr	r2, [pc, #16]	; (8005528 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	8013      	strh	r3, [r2, #0]

}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	2000011c 	.word	0x2000011c
 8005528:	20001e6a 	.word	0x20001e6a

0800552c <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <FreqO_MapEncoderPositionFine+0x48>)
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	429a      	cmp	r2, r3
 800553e:	d905      	bls.n	800554c <FreqO_MapEncoderPositionFine+0x20>
	{
		OUTPUT_TIMER->ARR++;
 8005540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005546:	3201      	adds	r2, #1
 8005548:	62da      	str	r2, [r3, #44]	; 0x2c
 800554a:	e009      	b.n	8005560 <FreqO_MapEncoderPositionFine+0x34>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <FreqO_MapEncoderPositionFine+0x48>)
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	429a      	cmp	r2, r3
 8005554:	d204      	bcs.n	8005560 <FreqO_MapEncoderPositionFine+0x34>
	{
		OUTPUT_TIMER->ARR--;
 8005556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	3a01      	subs	r2, #1
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005560:	4a04      	ldr	r2, [pc, #16]	; (8005574 <FreqO_MapEncoderPositionFine+0x48>)
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	8013      	strh	r3, [r2, #0]

}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20001e6a 	.word	0x20001e6a

08005578 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	429a      	cmp	r2, r3
 800558a:	d905      	bls.n	8005598 <FreqO_MapEncoderPositionToPrescaler+0x20>
	{
		OUTPUT_TIMER->PSC++;
 800558c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005592:	3201      	adds	r2, #1
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
 8005596:	e00e      	b.n	80055b6 <FreqO_MapEncoderPositionToPrescaler+0x3e>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d209      	bcs.n	80055b6 <FreqO_MapEncoderPositionToPrescaler+0x3e>
	{
		if(OUTPUT_TIMER->PSC > 0)
 80055a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <FreqO_MapEncoderPositionToPrescaler+0x3e>
			OUTPUT_TIMER->PSC--;
 80055ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b2:	3a01      	subs	r2, #1
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80055b6:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	8013      	strh	r3, [r2, #0]

}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20001e6a 	.word	0x20001e6a

080055cc <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f899 	bl	800570c <FreqO_FindFPresetObject>
 80055da:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d026      	beq.n	8005630 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80055e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80055ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80055f6:	2001      	movs	r0, #1
 80055f8:	f000 ffc0 	bl	800657c <SM_GetOutputChannel>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d10d      	bne.n	8005628 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <FreqO_ApplyProfile+0x74>)
 800560e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4a09      	ldr	r2, [pc, #36]	; (8005640 <FreqO_ApplyProfile+0x74>)
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <FreqO_ApplyProfile+0x74>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	4a07      	ldr	r2, [pc, #28]	; (8005640 <FreqO_ApplyProfile+0x74>)
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005628:	4a06      	ldr	r2, [pc, #24]	; (8005644 <FreqO_ApplyProfile+0x78>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 800562e:	e002      	b.n	8005636 <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005630:	4805      	ldr	r0, [pc, #20]	; (8005648 <FreqO_ApplyProfile+0x7c>)
 8005632:	f7fb ff7f 	bl	8001534 <DM_SetErrorDebugMsg>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40000400 	.word	0x40000400
 8005644:	2000011c 	.word	0x2000011c
 8005648:	08014b60 	.word	0x08014b60

0800564c <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 8005652:	2000      	movs	r0, #0
 8005654:	f001 fa0e 	bl	8006a74 <SM_GetEncoderValue>
 8005658:	4603      	mov	r3, r0
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff66 	bl	800552c <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005660:	2001      	movs	r0, #1
 8005662:	f000 ff8b 	bl	800657c <SM_GetOutputChannel>
 8005666:	4603      	mov	r3, r0
 8005668:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d110      	bne.n	8005698 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <FreqO_AdjustFreq+0x54>)
 8005678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 800567e:	2000      	movs	r0, #0
 8005680:	f001 f9f8 	bl	8006a74 <SM_GetEncoderValue>
 8005684:	4603      	mov	r3, r0
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <FreqO_AdjustFreq+0x54>)
 800568c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <FreqO_AdjustFreq+0x54>)
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <FreqO_AdjustFreq+0x54>)
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40000400 	.word	0x40000400

080056a4 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 80056aa:	2000      	movs	r0, #0
 80056ac:	f001 f9e2 	bl	8006a74 <SM_GetEncoderValue>
 80056b0:	4603      	mov	r3, r0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ff60 	bl	8005578 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80056b8:	2001      	movs	r0, #1
 80056ba:	f000 ff5f 	bl	800657c <SM_GetOutputChannel>
 80056be:	4603      	mov	r3, r0
 80056c0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d10c      	bne.n	80056e8 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80056ce:	2000      	movs	r0, #0
 80056d0:	f001 f9d0 	bl	8006a74 <SM_GetEncoderValue>
 80056d4:	4603      	mov	r3, r0
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <FreqO_AdjustPrescaler+0x4c>)
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <FreqO_AdjustPrescaler+0x4c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a03      	ldr	r2, [pc, #12]	; (80056f0 <FreqO_AdjustPrescaler+0x4c>)
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40000400 	.word	0x40000400

080056f4 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
	return freq_profile;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <FreqO_GetFPresetObject+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000011c 	.word	0x2000011c

0800570c <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e016      	b.n	8005748 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800571a:	4911      	ldr	r1, [pc, #68]	; (8005760 <FreqO_FindFPresetObject+0x54>)
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	3304      	adds	r3, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d107      	bne.n	8005742 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a08      	ldr	r2, [pc, #32]	; (8005760 <FreqO_FindFPresetObject+0x54>)
 800573e:	4413      	add	r3, r2
 8005740:	e009      	b.n	8005756 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b0d      	cmp	r3, #13
 800574c:	dde5      	ble.n	800571a <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800574e:	4805      	ldr	r0, [pc, #20]	; (8005764 <FreqO_FindFPresetObject+0x58>)
 8005750:	f7fb fef0 	bl	8001534 <DM_SetErrorDebugMsg>
	return 0;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000004 	.word	0x20000004
 8005764:	08014b88 	.word	0x08014b88

08005768 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <FreqO_GetProfileByIndex+0x24>)
 800577c:	4413      	add	r3, r2
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000004 	.word	0x20000004

08005790 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <FreqO_ResetLastEncoderValue+0x14>)
 8005796:	2200      	movs	r2, #0
 8005798:	801a      	strh	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20001e6a 	.word	0x20001e6a

080057a8 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80057ac:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <FS_SetSweepModeDown+0x48>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <FS_SetSweepModeDown+0x48>)
 80057b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80057b6:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <FS_SetSweepModeDown+0x48>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <FS_SetSweepModeDown+0x48>)
 80057be:	f043 0310 	orr.w	r3, r3, #16
 80057c2:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80057c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <FS_SetSweepModeDown+0x4c>)
 80057d4:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <FS_SetSweepModeDown+0x50>)
 80057da:	4a08      	ldr	r2, [pc, #32]	; (80057fc <FS_SetSweepModeDown+0x54>)
 80057dc:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <FS_SetSweepModeDown+0x58>)
 80057e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	20000120 	.word	0x20000120
 80057f8:	20000124 	.word	0x20000124
 80057fc:	477fff00 	.word	0x477fff00
 8005800:	40012c00 	.word	0x40012c00

08005804 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <FS_SetSweepModeUp+0x40>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <FS_SetSweepModeUp+0x40>)
 800580e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005812:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <FS_SetSweepModeUp+0x40>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <FS_SetSweepModeUp+0x40>)
 800581a:	f023 0310 	bic.w	r3, r3, #16
 800581e:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <FS_SetSweepModeUp+0x44>)
 8005830:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <FS_SetSweepModeUp+0x48>)
 8005836:	4a06      	ldr	r2, [pc, #24]	; (8005850 <FS_SetSweepModeUp+0x4c>)
 8005838:	601a      	str	r2, [r3, #0]


}
 800583a:	bf00      	nop
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	40000c00 	.word	0x40000c00
 8005848:	20000124 	.word	0x20000124
 800584c:	20000120 	.word	0x20000120
 8005850:	41500000 	.word	0x41500000

08005854 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d03a      	beq.n	80058da <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <FS_SetEncoderControlMode+0xa8>)
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800586a:	4b25      	ldr	r3, [pc, #148]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 800586c:	220d      	movs	r2, #13
 800586e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <FS_SetEncoderControlMode+0xb0>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <FS_SetEncoderControlMode+0x32>
 8005880:	2b01      	cmp	r3, #1
 8005882:	d015      	beq.n	80058b0 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005884:	e033      	b.n	80058ee <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005886:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <FS_SetEncoderControlMode+0xb4>)
 8005894:	edd3 7a00 	vldr	s15, [r3]
 8005898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a0:	dc00      	bgt.n	80058a4 <FS_SetEncoderControlMode+0x50>
				break;
 80058a2:	e024      	b.n	80058ee <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80058a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80058ae:	e01e      	b.n	80058ee <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80058b0:	4b13      	ldr	r3, [pc, #76]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058bc:	4b13      	ldr	r3, [pc, #76]	; (800590c <FS_SetEncoderControlMode+0xb8>)
 80058be:	edd3 7a00 	vldr	s15, [r3]
 80058c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ca:	d400      	bmi.n	80058ce <FS_SetEncoderControlMode+0x7a>
				break;
 80058cc:	e00f      	b.n	80058ee <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80058ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058d2:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80058d8:	e009      	b.n	80058ee <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <FS_SetEncoderControlMode+0xa8>)
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <FS_SetEncoderControlMode+0xac>)
 80058e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20001e59 	.word	0x20001e59
 8005900:	40012c00 	.word	0x40012c00
 8005904:	20001e58 	.word	0x20001e58
 8005908:	20000124 	.word	0x20000124
 800590c:	20000120 	.word	0x20000120

08005910 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d122      	bne.n	8005966 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005920:	4b17      	ldr	r3, [pc, #92]	; (8005980 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f7fa fe15 	bl	8000554 <__aeabi_ui2d>
 800592a:	4603      	mov	r3, r0
 800592c:	460c      	mov	r4, r1
 800592e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005970 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005932:	ec44 3b10 	vmov	d0, r3, r4
 8005936:	f00d fb67 	bl	8013008 <pow>
 800593a:	ec51 0b10 	vmov	r0, r1, d0
 800593e:	a30e      	add	r3, pc, #56	; (adr r3, 8005978 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fcca 	bl	80002dc <__adddf3>
 8005948:	4603      	mov	r3, r0
 800594a:	460c      	mov	r4, r1
 800594c:	4618      	mov	r0, r3
 800594e:	4621      	mov	r1, r4
 8005950:	f7fb f952 	bl	8000bf8 <__aeabi_d2uiz>
 8005954:	4603      	mov	r3, r0
 8005956:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800595e:	d002      	beq.n	8005966 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	bd90      	pop	{r4, r7, pc}
 800596e:	bf00      	nop
 8005970:	00000000 	.word	0x00000000
 8005974:	40080000 	.word	0x40080000
 8005978:	00000000 	.word	0x00000000
 800597c:	40d06800 	.word	0x40d06800
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000c00 	.word	0x40000c00

08005988 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80059e0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 80059a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a8:	e011      	b.n	80059ce <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c6:	eddf 6a06 	vldr	s13, [pc, #24]	; 80059e0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 80059ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80059ce:	eeb0 0a67 	vmov.f32	s0, s15
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	4d2037a0 	.word	0x4d2037a0

080059e4 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <FuncO_ResetLastEncoderValue+0x14>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	801a      	strh	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20001e96 	.word	0x20001e96

080059fc <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005a06:	2000      	movs	r0, #0
 8005a08:	f000 fdb8 	bl	800657c <SM_GetOutputChannel>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d90c      	bls.n	8005a3a <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	3301      	adds	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	2b05      	cmp	r3, #5
 8005a2a:	d901      	bls.n	8005a30 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005a2c:	2305      	movs	r3, #5
 8005a2e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f856 	bl	8005ae4 <FuncO_ApplyProfileToSignal>
 8005a38:	e010      	b.n	8005a5c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d20b      	bcs.n	8005a5c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b06      	cmp	r3, #6
 8005a4e:	d901      	bls.n	8005a54 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f844 	bl	8005ae4 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005a5c:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	8013      	strh	r3, [r2, #0]
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20001e96 	.word	0x20001e96

08005a70 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	f000 fd7e 	bl	800657c <SM_GetOutputChannel>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d90c      	bls.n	8005aae <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	3301      	adds	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b06      	cmp	r3, #6
 8005a9e:	d901      	bls.n	8005aa4 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005aa0:	2306      	movs	r3, #6
 8005aa2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f882 	bl	8005bb0 <FuncO_ApplyProfileToAux>
 8005aac:	e010      	b.n	8005ad0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d20b      	bcs.n	8005ad0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d901      	bls.n	8005ac8 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f870 	bl	8005bb0 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005ad0:	4a03      	ldr	r2, [pc, #12]	; (8005ae0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	8013      	strh	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20001e96 	.word	0x20001e96

08005ae4 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005aee:	79fc      	ldrb	r4, [r7, #7]
 8005af0:	2000      	movs	r0, #0
 8005af2:	f000 fd43 	bl	800657c <SM_GetOutputChannel>
 8005af6:	4601      	mov	r1, r0
 8005af8:	00e3      	lsls	r3, r4, #3
 8005afa:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005afc:	4413      	add	r3, r2
 8005afe:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005b02:	4828      	ldr	r0, [pc, #160]	; (8005ba4 <FuncO_ApplyProfileToSignal+0xc0>)
 8005b04:	f00b f968 	bl	8010dd8 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005b08:	79fc      	ldrb	r4, [r7, #7]
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	f000 fd36 	bl	800657c <SM_GetOutputChannel>
 8005b10:	4601      	mov	r1, r0
 8005b12:	4a23      	ldr	r2, [pc, #140]	; (8005ba0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005b14:	00e3      	lsls	r3, r4, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f000 fd2d 	bl	800657c <SM_GetOutputChannel>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 f85c 	bl	8006bec <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005b44:	2100      	movs	r1, #0
 8005b46:	4818      	ldr	r0, [pc, #96]	; (8005ba8 <FuncO_ApplyProfileToSignal+0xc4>)
 8005b48:	f005 fa3e 	bl	800afc8 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f000 fd15 	bl	800657c <SM_GetOutputChannel>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f103 0208 	add.w	r2, r3, #8
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	2378      	movs	r3, #120	; 0x78
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4811      	ldr	r0, [pc, #68]	; (8005ba8 <FuncO_ApplyProfileToSignal+0xc4>)
 8005b62:	f005 f96f 	bl	800ae44 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005b66:	2100      	movs	r1, #0
 8005b68:	4810      	ldr	r0, [pc, #64]	; (8005bac <FuncO_ApplyProfileToSignal+0xc8>)
 8005b6a:	f005 fa2d 	bl	800afc8 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f000 fd04 	bl	800657c <SM_GetOutputChannel>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f103 0208 	add.w	r2, r3, #8
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2378      	movs	r3, #120	; 0x78
 8005b80:	2100      	movs	r1, #0
 8005b82:	480a      	ldr	r0, [pc, #40]	; (8005bac <FuncO_ApplyProfileToSignal+0xc8>)
 8005b84:	f005 f95e 	bl	800ae44 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6013      	str	r3, [r2, #0]



}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd90      	pop	{r4, r7, pc}
 8005ba0:	20000128 	.word	0x20000128
 8005ba4:	08014bb8 	.word	0x08014bb8
 8005ba8:	20002a00 	.word	0x20002a00
 8005bac:	200029ec 	.word	0x200029ec

08005bb0 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005bba:	79fc      	ldrb	r4, [r7, #7]
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f000 fcdd 	bl	800657c <SM_GetOutputChannel>
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	00e3      	lsls	r3, r4, #3
 8005bc6:	4a96      	ldr	r2, [pc, #600]	; (8005e20 <FuncO_ApplyProfileToAux+0x270>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d10a      	bne.n	8005bea <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005bd4:	4893      	ldr	r0, [pc, #588]	; (8005e24 <FuncO_ApplyProfileToAux+0x274>)
 8005bd6:	f00b f8ff 	bl	8010dd8 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005bda:	f000 ff37 	bl	8006a4c <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005bde:	f000 fce3 	bl	80065a8 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005be2:	4b91      	ldr	r3, [pc, #580]	; (8005e28 <FuncO_ApplyProfileToAux+0x278>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim2);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005be8:	e115      	b.n	8005e16 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005bea:	4b8f      	ldr	r3, [pc, #572]	; (8005e28 <FuncO_ApplyProfileToAux+0x278>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 808e 	beq.w	8005d10 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005bf4:	488d      	ldr	r0, [pc, #564]	; (8005e2c <FuncO_ApplyProfileToAux+0x27c>)
 8005bf6:	f00b f8ef 	bl	8010dd8 <puts>
		SM_DisablePwmToAux();
 8005bfa:	f000 fe11 	bl	8006820 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005bfe:	f000 fe4b 	bl	8006898 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005c02:	488b      	ldr	r0, [pc, #556]	; (8005e30 <FuncO_ApplyProfileToAux+0x280>)
 8005c04:	f00b f8e8 	bl	8010dd8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005c08:	79fc      	ldrb	r4, [r7, #7]
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	f000 fcb6 	bl	800657c <SM_GetOutputChannel>
 8005c10:	4601      	mov	r1, r0
 8005c12:	4a83      	ldr	r2, [pc, #524]	; (8005e20 <FuncO_ApplyProfileToAux+0x270>)
 8005c14:	00e3      	lsls	r3, r4, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005c1c:	4884      	ldr	r0, [pc, #528]	; (8005e30 <FuncO_ApplyProfileToAux+0x280>)
 8005c1e:	f00b f8db 	bl	8010dd8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005c22:	2001      	movs	r0, #1
 8005c24:	f000 fcaa 	bl	800657c <SM_GetOutputChannel>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005c32:	4880      	ldr	r0, [pc, #512]	; (8005e34 <FuncO_ApplyProfileToAux+0x284>)
 8005c34:	f00b f85c 	bl	8010cf0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005c38:	7b7b      	ldrb	r3, [r7, #13]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f804 	bl	8006c48 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005c40:	487d      	ldr	r0, [pc, #500]	; (8005e38 <FuncO_ApplyProfileToAux+0x288>)
 8005c42:	f00b f8c9 	bl	8010dd8 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005c46:	487d      	ldr	r0, [pc, #500]	; (8005e3c <FuncO_ApplyProfileToAux+0x28c>)
 8005c48:	f007 fafe 	bl	800d248 <HAL_TIM_Base_Stop>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	4619      	mov	r1, r3
 8005c54:	487a      	ldr	r0, [pc, #488]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005c56:	f00b f84b 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005c5a:	487a      	ldr	r0, [pc, #488]	; (8005e44 <FuncO_ApplyProfileToAux+0x294>)
 8005c5c:	f00b f8bc 	bl	8010dd8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005c60:	2100      	movs	r1, #0
 8005c62:	4879      	ldr	r0, [pc, #484]	; (8005e48 <FuncO_ApplyProfileToAux+0x298>)
 8005c64:	f005 f9b0 	bl	800afc8 <HAL_DAC_Stop_DMA>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4873      	ldr	r0, [pc, #460]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005c72:	f00b f83d 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005c76:	4875      	ldr	r0, [pc, #468]	; (8005e4c <FuncO_ApplyProfileToAux+0x29c>)
 8005c78:	f00b f8ae 	bl	8010dd8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f000 fc7d 	bl	800657c <SM_GetOutputChannel>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f103 0208 	add.w	r2, r3, #8
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2378      	movs	r3, #120	; 0x78
 8005c8e:	2100      	movs	r1, #0
 8005c90:	486d      	ldr	r0, [pc, #436]	; (8005e48 <FuncO_ApplyProfileToAux+0x298>)
 8005c92:	f005 f8d7 	bl	800ae44 <HAL_DAC_Start_DMA>
 8005c96:	4603      	mov	r3, r0
 8005c98:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4868      	ldr	r0, [pc, #416]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005ca0:	f00b f826 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005ca4:	486a      	ldr	r0, [pc, #424]	; (8005e50 <FuncO_ApplyProfileToAux+0x2a0>)
 8005ca6:	f00b f897 	bl	8010dd8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005caa:	2100      	movs	r1, #0
 8005cac:	4869      	ldr	r0, [pc, #420]	; (8005e54 <FuncO_ApplyProfileToAux+0x2a4>)
 8005cae:	f005 f98b 	bl	800afc8 <HAL_DAC_Stop_DMA>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4861      	ldr	r0, [pc, #388]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005cbc:	f00b f818 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005cc0:	4865      	ldr	r0, [pc, #404]	; (8005e58 <FuncO_ApplyProfileToAux+0x2a8>)
 8005cc2:	f00b f889 	bl	8010dd8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f000 fc58 	bl	800657c <SM_GetOutputChannel>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f103 0208 	add.w	r2, r3, #8
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2378      	movs	r3, #120	; 0x78
 8005cd8:	2100      	movs	r1, #0
 8005cda:	485e      	ldr	r0, [pc, #376]	; (8005e54 <FuncO_ApplyProfileToAux+0x2a4>)
 8005cdc:	f005 f8b2 	bl	800ae44 <HAL_DAC_Start_DMA>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4855      	ldr	r0, [pc, #340]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005cea:	f00b f801 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005cee:	485b      	ldr	r0, [pc, #364]	; (8005e5c <FuncO_ApplyProfileToAux+0x2ac>)
 8005cf0:	f00b f872 	bl	8010dd8 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005cf4:	4851      	ldr	r0, [pc, #324]	; (8005e3c <FuncO_ApplyProfileToAux+0x28c>)
 8005cf6:	f007 fa79 	bl	800d1ec <HAL_TIM_Base_Start>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	4619      	mov	r1, r3
 8005d02:	484f      	ldr	r0, [pc, #316]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005d04:	f00a fff4 	bl	8010cf0 <iprintf>
		last_output_mode_was_pwm = 0;
 8005d08:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <FuncO_ApplyProfileToAux+0x278>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
}
 8005d0e:	e082      	b.n	8005e16 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d10:	4847      	ldr	r0, [pc, #284]	; (8005e30 <FuncO_ApplyProfileToAux+0x280>)
 8005d12:	f00b f861 	bl	8010dd8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d16:	79fc      	ldrb	r4, [r7, #7]
 8005d18:	2001      	movs	r0, #1
 8005d1a:	f000 fc2f 	bl	800657c <SM_GetOutputChannel>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	4a3f      	ldr	r2, [pc, #252]	; (8005e20 <FuncO_ApplyProfileToAux+0x270>)
 8005d22:	00e3      	lsls	r3, r4, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d2a:	4841      	ldr	r0, [pc, #260]	; (8005e30 <FuncO_ApplyProfileToAux+0x280>)
 8005d2c:	f00b f854 	bl	8010dd8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005d30:	2001      	movs	r0, #1
 8005d32:	f000 fc23 	bl	800657c <SM_GetOutputChannel>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005d40:	483c      	ldr	r0, [pc, #240]	; (8005e34 <FuncO_ApplyProfileToAux+0x284>)
 8005d42:	f00a ffd5 	bl	8010cf0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 ff7d 	bl	8006c48 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005d4e:	483a      	ldr	r0, [pc, #232]	; (8005e38 <FuncO_ApplyProfileToAux+0x288>)
 8005d50:	f00b f842 	bl	8010dd8 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005d54:	4839      	ldr	r0, [pc, #228]	; (8005e3c <FuncO_ApplyProfileToAux+0x28c>)
 8005d56:	f007 fa77 	bl	800d248 <HAL_TIM_Base_Stop>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	4619      	mov	r1, r3
 8005d62:	4837      	ldr	r0, [pc, #220]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005d64:	f00a ffc4 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005d68:	4836      	ldr	r0, [pc, #216]	; (8005e44 <FuncO_ApplyProfileToAux+0x294>)
 8005d6a:	f00b f835 	bl	8010dd8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4835      	ldr	r0, [pc, #212]	; (8005e48 <FuncO_ApplyProfileToAux+0x298>)
 8005d72:	f005 f929 	bl	800afc8 <HAL_DAC_Stop_DMA>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4830      	ldr	r0, [pc, #192]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005d80:	f00a ffb6 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005d84:	4831      	ldr	r0, [pc, #196]	; (8005e4c <FuncO_ApplyProfileToAux+0x29c>)
 8005d86:	f00b f827 	bl	8010dd8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f000 fbf6 	bl	800657c <SM_GetOutputChannel>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f103 0208 	add.w	r2, r3, #8
 8005d96:	2300      	movs	r3, #0
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	2378      	movs	r3, #120	; 0x78
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	482a      	ldr	r0, [pc, #168]	; (8005e48 <FuncO_ApplyProfileToAux+0x298>)
 8005da0:	f005 f850 	bl	800ae44 <HAL_DAC_Start_DMA>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4824      	ldr	r0, [pc, #144]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005dae:	f00a ff9f 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005db2:	4827      	ldr	r0, [pc, #156]	; (8005e50 <FuncO_ApplyProfileToAux+0x2a0>)
 8005db4:	f00b f810 	bl	8010dd8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005db8:	2100      	movs	r1, #0
 8005dba:	4826      	ldr	r0, [pc, #152]	; (8005e54 <FuncO_ApplyProfileToAux+0x2a4>)
 8005dbc:	f005 f904 	bl	800afc8 <HAL_DAC_Stop_DMA>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	481d      	ldr	r0, [pc, #116]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005dca:	f00a ff91 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005dce:	4822      	ldr	r0, [pc, #136]	; (8005e58 <FuncO_ApplyProfileToAux+0x2a8>)
 8005dd0:	f00b f802 	bl	8010dd8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f000 fbd1 	bl	800657c <SM_GetOutputChannel>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f103 0208 	add.w	r2, r3, #8
 8005de0:	2300      	movs	r3, #0
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2378      	movs	r3, #120	; 0x78
 8005de6:	2100      	movs	r1, #0
 8005de8:	481a      	ldr	r0, [pc, #104]	; (8005e54 <FuncO_ApplyProfileToAux+0x2a4>)
 8005dea:	f005 f82b 	bl	800ae44 <HAL_DAC_Start_DMA>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	4619      	mov	r1, r3
 8005df6:	4812      	ldr	r0, [pc, #72]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005df8:	f00a ff7a 	bl	8010cf0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005dfc:	4817      	ldr	r0, [pc, #92]	; (8005e5c <FuncO_ApplyProfileToAux+0x2ac>)
 8005dfe:	f00a ffeb 	bl	8010dd8 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005e02:	480e      	ldr	r0, [pc, #56]	; (8005e3c <FuncO_ApplyProfileToAux+0x28c>)
 8005e04:	f007 f9f2 	bl	800d1ec <HAL_TIM_Base_Start>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	480b      	ldr	r0, [pc, #44]	; (8005e40 <FuncO_ApplyProfileToAux+0x290>)
 8005e12:	f00a ff6d 	bl	8010cf0 <iprintf>
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000128 	.word	0x20000128
 8005e24:	08014bcc 	.word	0x08014bcc
 8005e28:	20001e94 	.word	0x20001e94
 8005e2c:	08014bf4 	.word	0x08014bf4
 8005e30:	08014c20 	.word	0x08014c20
 8005e34:	08014c4c 	.word	0x08014c4c
 8005e38:	08014c64 	.word	0x08014c64
 8005e3c:	20002c54 	.word	0x20002c54
 8005e40:	08014c98 	.word	0x08014c98
 8005e44:	08014ca4 	.word	0x08014ca4
 8005e48:	200029ec 	.word	0x200029ec
 8005e4c:	08014ce8 	.word	0x08014ce8
 8005e50:	08014d2c 	.word	0x08014d2c
 8005e54:	20002a00 	.word	0x20002a00
 8005e58:	08014d70 	.word	0x08014d70
 8005e5c:	08014db4 	.word	0x08014db4

08005e60 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <GO_ResetLastEncoderValue+0x14>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	801a      	strh	r2, [r3, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20001e98 	.word	0x20001e98

08005e78 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005e82:	2000      	movs	r0, #0
 8005e84:	f000 fb7a 	bl	800657c <SM_GetOutputChannel>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d90c      	bls.n	8005eb6 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d901      	bls.n	8005eac <GO_MapEncoderPositionToSignalOutput+0x34>
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f81c 	bl	8005eec <GO_ApplyPresetToSignal>
 8005eb4:	e010      	b.n	8005ed8 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d20b      	bcs.n	8005ed8 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b07      	cmp	r3, #7
 8005eca:	d901      	bls.n	8005ed0 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f80a 	bl	8005eec <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005ed8:	4a03      	ldr	r2, [pc, #12]	; (8005ee8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001e98 	.word	0x20001e98

08005eec <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005ef6:	79fc      	ldrb	r4, [r7, #7]
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f000 fb3f 	bl	800657c <SM_GetOutputChannel>
 8005efe:	4601      	mov	r1, r0
 8005f00:	4623      	mov	r3, r4
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4423      	add	r3, r4
 8005f06:	4a4f      	ldr	r2, [pc, #316]	; (8006044 <GO_ApplyPresetToSignal+0x158>)
 8005f08:	4413      	add	r3, r2
 8005f0a:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b07      	cmp	r3, #7
 8005f12:	f200 8093 	bhi.w	800603c <GO_ApplyPresetToSignal+0x150>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <GO_ApplyPresetToSignal+0x30>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f9d 	.word	0x08005f9d
 8005f2c:	08005fbd 	.word	0x08005fbd
 8005f30:	08005fdd 	.word	0x08005fdd
 8005f34:	08005ffd 	.word	0x08005ffd
 8005f38:	0800601d 	.word	0x0800601d
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4841      	ldr	r0, [pc, #260]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005f42:	f006 f859 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2120      	movs	r1, #32
 8005f4a:	4840      	ldr	r0, [pc, #256]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f4c:	f006 f854 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005f50:	2200      	movs	r2, #0
 8005f52:	2110      	movs	r1, #16
 8005f54:	483d      	ldr	r0, [pc, #244]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f56:	f006 f84f 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005f5a:	e06f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4839      	ldr	r0, [pc, #228]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005f62:	f006 f849 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005f66:	2200      	movs	r2, #0
 8005f68:	2120      	movs	r1, #32
 8005f6a:	4838      	ldr	r0, [pc, #224]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f6c:	f006 f844 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005f70:	2200      	movs	r2, #0
 8005f72:	2110      	movs	r1, #16
 8005f74:	4835      	ldr	r0, [pc, #212]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f76:	f006 f83f 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005f7a:	e05f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4831      	ldr	r0, [pc, #196]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005f82:	f006 f839 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005f86:	2201      	movs	r2, #1
 8005f88:	2120      	movs	r1, #32
 8005f8a:	4830      	ldr	r0, [pc, #192]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f8c:	f006 f834 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005f90:	2200      	movs	r2, #0
 8005f92:	2110      	movs	r1, #16
 8005f94:	482d      	ldr	r0, [pc, #180]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005f96:	f006 f82f 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005f9a:	e04f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4829      	ldr	r0, [pc, #164]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005fa2:	f006 f829 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	2120      	movs	r1, #32
 8005faa:	4828      	ldr	r0, [pc, #160]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005fac:	f006 f824 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2110      	movs	r1, #16
 8005fb4:	4825      	ldr	r0, [pc, #148]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005fb6:	f006 f81f 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005fba:	e03f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4821      	ldr	r0, [pc, #132]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005fc2:	f006 f819 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2120      	movs	r1, #32
 8005fca:	4820      	ldr	r0, [pc, #128]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005fcc:	f006 f814 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	2110      	movs	r1, #16
 8005fd4:	481d      	ldr	r0, [pc, #116]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005fd6:	f006 f80f 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005fda:	e02f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4819      	ldr	r0, [pc, #100]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8005fe2:	f006 f809 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2120      	movs	r1, #32
 8005fea:	4818      	ldr	r0, [pc, #96]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005fec:	f006 f804 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	2110      	movs	r1, #16
 8005ff4:	4815      	ldr	r0, [pc, #84]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8005ff6:	f005 ffff 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 8005ffa:	e01f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2101      	movs	r1, #1
 8006000:	4811      	ldr	r0, [pc, #68]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8006002:	f005 fff9 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006006:	2201      	movs	r2, #1
 8006008:	2120      	movs	r1, #32
 800600a:	4810      	ldr	r0, [pc, #64]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 800600c:	f005 fff4 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006010:	2201      	movs	r2, #1
 8006012:	2110      	movs	r1, #16
 8006014:	480d      	ldr	r0, [pc, #52]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8006016:	f005 ffef 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 800601a:	e00f      	b.n	800603c <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 800601c:	2201      	movs	r2, #1
 800601e:	2101      	movs	r1, #1
 8006020:	4809      	ldr	r0, [pc, #36]	; (8006048 <GO_ApplyPresetToSignal+0x15c>)
 8006022:	f005 ffe9 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006026:	2201      	movs	r2, #1
 8006028:	2120      	movs	r1, #32
 800602a:	4808      	ldr	r0, [pc, #32]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 800602c:	f005 ffe4 	bl	800bff8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006030:	2201      	movs	r2, #1
 8006032:	2110      	movs	r1, #16
 8006034:	4805      	ldr	r0, [pc, #20]	; (800604c <GO_ApplyPresetToSignal+0x160>)
 8006036:	f005 ffdf 	bl	800bff8 <HAL_GPIO_WritePin>
			break;
 800603a:	bf00      	nop
	}

}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bd90      	pop	{r4, r7, pc}
 8006044:	20000160 	.word	0x20000160
 8006048:	48000400 	.word	0x48000400
 800604c:	48000800 	.word	0x48000800

08006050 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 8006056:	f000 f927 	bl	80062a8 <IT_GetTriggerStatus>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d034      	beq.n	80060ca <IT_ArbitrateInputTrigger+0x7a>
	{
		// disable timer external clock source
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8006060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800606a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606e:	6093      	str	r3, [r2, #8]
		// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
		OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8006070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800607a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800607e:	6093      	str	r3, [r2, #8]
		// disable timer reset trigger mode
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8006080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	6093      	str	r3, [r2, #8]
		// set status to disabled

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006090:	4863      	ldr	r0, [pc, #396]	; (8006220 <IT_ArbitrateInputTrigger+0x1d0>)
 8006092:	f004 fc6d 	bl	800a970 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 8006096:	4863      	ldr	r0, [pc, #396]	; (8006224 <IT_ArbitrateInputTrigger+0x1d4>)
 8006098:	f003 fa10 	bl	80094bc <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 800609c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 80060ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060b6:	f023 0308 	bic.w	r3, r3, #8
 80060ba:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 80060bc:	2000      	movs	r0, #0
 80060be:	f000 f8ff 	bl	80062c0 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7ff fd0e 	bl	8005ae4 <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 80060c8:	e0a6      	b.n	8006218 <IT_ArbitrateInputTrigger+0x1c8>
		switch(IT_GetActiveTriggerMode())
 80060ca:	f000 f8d1 	bl	8006270 <IT_GetActiveTriggerMode>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d04a      	beq.n	800616a <IT_ArbitrateInputTrigger+0x11a>
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	f000 8087 	beq.w	80061e8 <IT_ArbitrateInputTrigger+0x198>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d000      	beq.n	80060e0 <IT_ArbitrateInputTrigger+0x90>
				break;
 80060de:	e098      	b.n	8006212 <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80060e0:	2201      	movs	r2, #1
 80060e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060e6:	4850      	ldr	r0, [pc, #320]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 80060e8:	f005 ff86 	bl	800bff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060f2:	484d      	ldr	r0, [pc, #308]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 80060f4:	f005 ff80 	bl	800bff8 <HAL_GPIO_WritePin>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset
 80060f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8006108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006112:	f043 0302 	orr.w	r3, r3, #2
 8006116:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8006118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006122:	f023 031e 	bic.w	r3, r3, #30
 8006126:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;	// set alt pin function to TIM2 CH1
 8006128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 8006138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006146:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);		// enable timer "Filtered timer input 1" (tim_ti1fp1)
 8006148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006152:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006156:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 8006158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006162:	f043 0304 	orr.w	r3, r3, #4
 8006166:	6093      	str	r3, [r2, #8]
				break;
 8006168:	e053      	b.n	8006212 <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006170:	482d      	ldr	r0, [pc, #180]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 8006172:	f005 ff41 	bl	800bff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8006176:	2201      	movs	r2, #1
 8006178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800617c:	482a      	ldr	r0, [pc, #168]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 800617e:	f005 ff3b 	bl	800bff8 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 8006182:	4b2a      	ldr	r3, [pc, #168]	; (800622c <IT_ArbitrateInputTrigger+0x1dc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a29      	ldr	r2, [pc, #164]	; (800622c <IT_ArbitrateInputTrigger+0x1dc>)
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 800618e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006198:	f023 031e 	bic.w	r3, r3, #30
 800619c:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 800619e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80061a8:	f043 0308 	orr.w	r3, r3, #8
 80061ac:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80061ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80061be:	2100      	movs	r1, #0
 80061c0:	481b      	ldr	r0, [pc, #108]	; (8006230 <IT_ArbitrateInputTrigger+0x1e0>)
 80061c2:	f004 ff01 	bl	800afc8 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2301      	movs	r3, #1
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <IT_ArbitrateInputTrigger+0x1e4>)
 80061ce:	2100      	movs	r1, #0
 80061d0:	4817      	ldr	r0, [pc, #92]	; (8006230 <IT_ArbitrateInputTrigger+0x1e0>)
 80061d2:	f004 fe37 	bl	800ae44 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80061d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	6013      	str	r3, [r2, #0]
				break;
 80061e6:	e014      	b.n	8006212 <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80061e8:	2201      	movs	r2, #1
 80061ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ee:	480e      	ldr	r0, [pc, #56]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 80061f0:	f005 ff02 	bl	800bff8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80061f4:	2201      	movs	r2, #1
 80061f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061fa:	480b      	ldr	r0, [pc, #44]	; (8006228 <IT_ArbitrateInputTrigger+0x1d8>)
 80061fc:	f005 fefc 	bl	800bff8 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 8006200:	22f0      	movs	r2, #240	; 0xf0
 8006202:	490d      	ldr	r1, [pc, #52]	; (8006238 <IT_ArbitrateInputTrigger+0x1e8>)
 8006204:	4807      	ldr	r0, [pc, #28]	; (8006224 <IT_ArbitrateInputTrigger+0x1d4>)
 8006206:	f003 f88b 	bl	8009320 <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800620a:	2000      	movs	r0, #0
 800620c:	f7ff fc6a 	bl	8005ae4 <FuncO_ApplyProfileToSignal>
				break;
 8006210:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 8006212:	2001      	movs	r0, #1
 8006214:	f000 f854 	bl	80062c0 <IT_SetTriggerStatus>
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200029c8 	.word	0x200029c8
 8006224:	200028fc 	.word	0x200028fc
 8006228:	48000800 	.word	0x48000800
 800622c:	40010200 	.word	0x40010200
 8006230:	20002a00 	.word	0x20002a00
 8006234:	2000232c 	.word	0x2000232c
 8006238:	20001e9c 	.word	0x20001e9c

0800623c <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006240:	f000 f816 	bl	8006270 <IT_GetActiveTriggerMode>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d008      	beq.n	800625c <IT_CycleInputTriggerMode+0x20>
 800624a:	2b02      	cmp	r3, #2
 800624c:	d00a      	beq.n	8006264 <IT_CycleInputTriggerMode+0x28>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d000      	beq.n	8006254 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 8006252:	e00b      	b.n	800626c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 8006254:	2001      	movs	r0, #1
 8006256:	f000 f817 	bl	8006288 <IT_SetActiveTriggerMode>
			break;
 800625a:	e007      	b.n	800626c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 800625c:	2002      	movs	r0, #2
 800625e:	f000 f813 	bl	8006288 <IT_SetActiveTriggerMode>
			break;
 8006262:	e003      	b.n	800626c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 8006264:	2000      	movs	r0, #0
 8006266:	f000 f80f 	bl	8006288 <IT_SetActiveTriggerMode>
			break;
 800626a:	bf00      	nop
	}
}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}

08006270 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006274:	4b03      	ldr	r3, [pc, #12]	; (8006284 <IT_GetActiveTriggerMode+0x14>)
 8006276:	781b      	ldrb	r3, [r3, #0]
}
 8006278:	4618      	mov	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000178 	.word	0x20000178

08006288 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8006292:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <IT_SetActiveTriggerMode+0x1c>)
 8006294:	79fb      	ldrb	r3, [r7, #7]
 8006296:	7013      	strb	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000178 	.word	0x20000178

080062a8 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 80062ac:	4b03      	ldr	r3, [pc, #12]	; (80062bc <IT_GetTriggerStatus+0x14>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20001e9a 	.word	0x20001e9a

080062c0 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <IT_SetTriggerStatus+0x1c>)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	7013      	strb	r3, [r2, #0]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20001e9a 	.word	0x20001e9a

080062e0 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <HAL_COMP_TriggerCallback+0x2c>)
 80062ea:	f004 fbe7 	bl	800aabc <HAL_COMP_GetOutputLevel>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_COMP_TriggerCallback+0x30>)
 80062f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80062fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80062fc:	e002      	b.n	8006304 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_COMP_TriggerCallback+0x30>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200029c8 	.word	0x200029c8
 8006310:	2000232c 	.word	0x2000232c

08006314 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_ADC_ConvCpltCallback+0x38>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_ADC_ConvCpltCallback+0x1a>
		OUTPUT_TIMER->ARR = 1;
 8006324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006328:	2201      	movs	r2, #1
 800632a:	62da      	str	r2, [r3, #44]	; 0x2c
 800632c:	e004      	b.n	8006338 <HAL_ADC_ConvCpltCallback+0x24>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 800632e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_ADC_ConvCpltCallback+0x38>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <HAL_ADC_ConvCpltCallback+0x38>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4619      	mov	r1, r3
 800633e:	4804      	ldr	r0, [pc, #16]	; (8006350 <HAL_ADC_ConvCpltCallback+0x3c>)
 8006340:	f00a fcd6 	bl	8010cf0 <iprintf>
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20001e9c 	.word	0x20001e9c
 8006350:	08014e18 	.word	0x08014e18

08006354 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8006358:	f7ff f828 	bl	80053ac <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 800635c:	f000 f8ae 	bl	80064bc <_InitOutputChannels>
	_InitAmpProfiles();
 8006360:	f000 f824 	bl	80063ac <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006364:	2110      	movs	r1, #16
 8006366:	4810      	ldr	r0, [pc, #64]	; (80063a8 <SM_Init+0x54>)
 8006368:	f004 fd19 	bl	800ad9e <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 800636c:	2201      	movs	r2, #1
 800636e:	2108      	movs	r1, #8
 8006370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006374:	f005 fe40 	bl	800bff8 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006388:	2000      	movs	r0, #0
 800638a:	f7ff fbab 	bl	8005ae4 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 800638e:	2059      	movs	r0, #89	; 0x59
 8006390:	f000 fc2c 	bl	8006bec <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8006394:	2000      	movs	r0, #0
 8006396:	f7ff fc0b 	bl	8005bb0 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 800639a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800639e:	f7ff f915 	bl	80055cc <FreqO_ApplyProfile>

}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20002a00 	.word	0x20002a00

080063ac <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b08b      	sub	sp, #44	; 0x2c
 80063b0:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
 80063b6:	e033      	b.n	8006420 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80063b8:	493c      	ldr	r1, [pc, #240]	; (80064ac <_InitAmpProfiles+0x100>)
 80063ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063bc:	4613      	mov	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	3304      	adds	r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <_InitAmpProfiles+0x104>)
 80063ce:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80063d0:	4936      	ldr	r1, [pc, #216]	; (80064ac <_InitAmpProfiles+0x100>)
 80063d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d4:	4613      	mov	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3308      	adds	r3, #8
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80063ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80063f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80063f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80063fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006402:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8006406:	4929      	ldr	r1, [pc, #164]	; (80064ac <_InitAmpProfiles+0x100>)
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	3310      	adds	r3, #16
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	3301      	adds	r3, #1
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b61      	cmp	r3, #97	; 0x61
 8006424:	ddc8      	ble.n	80063b8 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	e037      	b.n	800649c <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 800642c:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <_InitAmpProfiles+0x108>)
 800642e:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006430:	491e      	ldr	r1, [pc, #120]	; (80064ac <_InitAmpProfiles+0x100>)
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	3304      	adds	r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8006444:	ed97 7a06 	vldr	s14, [r7, #24]
 8006448:	edd7 7a07 	vldr	s15, [r7, #28]
 800644c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006450:	ee16 0a90 	vmov	r0, s13
 8006454:	f7fa f8a0 	bl	8000598 <__aeabi_f2d>
 8006458:	4603      	mov	r3, r0
 800645a:	460c      	mov	r4, r1
 800645c:	ec44 3b10 	vmov	d0, r3, r4
 8006460:	f00c fd52 	bl	8012f08 <log10>
 8006464:	ec51 0b10 	vmov	r0, r1, d0
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <_InitAmpProfiles+0x10c>)
 800646e:	f7fa f8eb 	bl	8000648 <__aeabi_dmul>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	4618      	mov	r0, r3
 8006478:	4621      	mov	r1, r4
 800647a:	f7fa fbdd 	bl	8000c38 <__aeabi_d2f>
 800647e:	4603      	mov	r3, r0
 8006480:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8006482:	490a      	ldr	r1, [pc, #40]	; (80064ac <_InitAmpProfiles+0x100>)
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	4613      	mov	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	330c      	adds	r3, #12
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	3301      	adds	r3, #1
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b61      	cmp	r3, #97	; 0x61
 80064a0:	ddc4      	ble.n	800642c <_InitAmpProfiles+0x80>

	}
}
 80064a2:	bf00      	nop
 80064a4:	372c      	adds	r7, #44	; 0x2c
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd90      	pop	{r4, r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2000017c 	.word	0x2000017c
 80064b0:	402ccccd 	.word	0x402ccccd
 80064b4:	3a83126f 	.word	0x3a83126f
 80064b8:	40340000 	.word	0x40340000

080064bc <_InitOutputChannels>:

void _InitOutputChannels()
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80064c2:	4b28      	ldr	r3, [pc, #160]	; (8006564 <_InitOutputChannels+0xa8>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <_InitOutputChannels+0xac>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a25      	ldr	r2, [pc, #148]	; (8006564 <_InitOutputChannels+0xa8>)
 80064ce:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80064d0:	4b24      	ldr	r3, [pc, #144]	; (8006564 <_InitOutputChannels+0xa8>)
 80064d2:	4a25      	ldr	r2, [pc, #148]	; (8006568 <_InitOutputChannels+0xac>)
 80064d4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064d8:	2300      	movs	r3, #0
 80064da:	607b      	str	r3, [r7, #4]
 80064dc:	e00b      	b.n	80064f6 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80064de:	4a23      	ldr	r2, [pc, #140]	; (800656c <_InitOutputChannels+0xb0>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064e6:	491f      	ldr	r1, [pc, #124]	; (8006564 <_InitOutputChannels+0xa8>)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3302      	adds	r3, #2
 80064ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3301      	adds	r3, #1
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b77      	cmp	r3, #119	; 0x77
 80064fa:	ddf0      	ble.n	80064de <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <_InitOutputChannels+0xa8>)
 80064fe:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <_InitOutputChannels+0xb4>)
 8006500:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <_InitOutputChannels+0xa8>)
 8006506:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <_InitOutputChannels+0xb8>)
 8006508:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <_InitOutputChannels+0xbc>)
 800650e:	2201      	movs	r2, #1
 8006510:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <_InitOutputChannels+0xac>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <_InitOutputChannels+0xbc>)
 8006518:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800651a:	4b17      	ldr	r3, [pc, #92]	; (8006578 <_InitOutputChannels+0xbc>)
 800651c:	4a12      	ldr	r2, [pc, #72]	; (8006568 <_InitOutputChannels+0xac>)
 800651e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	603b      	str	r3, [r7, #0]
 8006526:	e00b      	b.n	8006540 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006528:	4a10      	ldr	r2, [pc, #64]	; (800656c <_InitOutputChannels+0xb0>)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006530:	4911      	ldr	r1, [pc, #68]	; (8006578 <_InitOutputChannels+0xbc>)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	3302      	adds	r3, #2
 8006536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b77      	cmp	r3, #119	; 0x77
 8006544:	ddf0      	ble.n	8006528 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006546:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <_InitOutputChannels+0xbc>)
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <_InitOutputChannels+0xb4>)
 800654a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <_InitOutputChannels+0xbc>)
 8006550:	4a08      	ldr	r2, [pc, #32]	; (8006574 <_InitOutputChannels+0xb8>)
 8006552:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20002334 	.word	0x20002334
 8006568:	20000128 	.word	0x20000128
 800656c:	200014b8 	.word	0x200014b8
 8006570:	20000b38 	.word	0x20000b38
 8006574:	20000175 	.word	0x20000175
 8006578:	20002528 	.word	0x20002528

0800657c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <SM_GetOutputChannel+0x24>)
 800658e:	e000      	b.n	8006592 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <SM_GetOutputChannel+0x28>)
}
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20002334 	.word	0x20002334
 80065a4:	20002528 	.word	0x20002528

080065a8 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b096      	sub	sp, #88	; 0x58
 80065ac:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 80065ae:	4889      	ldr	r0, [pc, #548]	; (80067d4 <SM_EnablePwmToAux+0x22c>)
 80065b0:	f00a fc12 	bl	8010dd8 <puts>

	HAL_StatusTypeDef res = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	605a      	str	r2, [r3, #4]
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80065d4:	f107 031c 	add.w	r3, r7, #28
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	611a      	str	r2, [r3, #16]
 80065e4:	615a      	str	r2, [r3, #20]
 80065e6:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065e8:	f107 0308 	add.w	r3, r7, #8
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 80065f8:	4b77      	ldr	r3, [pc, #476]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 80065fa:	4a78      	ldr	r2, [pc, #480]	; (80067dc <SM_EnablePwmToAux+0x234>)
 80065fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80065fe:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006604:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006606:	2210      	movs	r2, #16
 8006608:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 800660c:	2201      	movs	r2, #1
 800660e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006610:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006616:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 800661a:	2280      	movs	r2, #128	; 0x80
 800661c:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 800661e:	486e      	ldr	r0, [pc, #440]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006620:	f006 fd8c 	bl	800d13c <HAL_TIM_Base_Init>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800662c:	4293      	cmp	r3, r2
 800662e:	d107      	bne.n	8006640 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006634:	4619      	mov	r1, r3
 8006636:	486a      	ldr	r0, [pc, #424]	; (80067e0 <SM_EnablePwmToAux+0x238>)
 8006638:	f00a fb5a 	bl	8010cf0 <iprintf>
		Error_Handler();
 800663c:	f001 fb94 	bl	8007d68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800664a:	4619      	mov	r1, r3
 800664c:	4862      	ldr	r0, [pc, #392]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 800664e:	f007 fb95 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800665a:	4293      	cmp	r3, r2
 800665c:	d107      	bne.n	800666e <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 800665e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006662:	4619      	mov	r1, r3
 8006664:	485f      	ldr	r0, [pc, #380]	; (80067e4 <SM_EnablePwmToAux+0x23c>)
 8006666:	f00a fb43 	bl	8010cf0 <iprintf>
		Error_Handler();
 800666a:	f001 fb7d 	bl	8007d68 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 800666e:	485a      	ldr	r0, [pc, #360]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006670:	f006 fe77 	bl	800d362 <HAL_TIM_PWM_Init>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800667c:	4293      	cmp	r3, r2
 800667e:	d107      	bne.n	8006690 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006684:	4619      	mov	r1, r3
 8006686:	4858      	ldr	r0, [pc, #352]	; (80067e8 <SM_EnablePwmToAux+0x240>)
 8006688:	f00a fb32 	bl	8010cf0 <iprintf>
		Error_Handler();
 800668c:	f001 fb6c 	bl	8007d68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006690:	2320      	movs	r3, #32
 8006692:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006694:	2300      	movs	r3, #0
 8006696:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006698:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800669c:	4619      	mov	r1, r3
 800669e:	484e      	ldr	r0, [pc, #312]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 80066a0:	f008 f922 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 80066a4:	4603      	mov	r3, r0
 80066a6:	461a      	mov	r2, r3
 80066a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d107      	bne.n	80066c0 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 80066b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066b4:	4619      	mov	r1, r3
 80066b6:	484d      	ldr	r0, [pc, #308]	; (80067ec <SM_EnablePwmToAux+0x244>)
 80066b8:	f00a fb1a 	bl	8010cf0 <iprintf>
		Error_Handler();
 80066bc:	f001 fb54 	bl	8007d68 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066c0:	2360      	movs	r3, #96	; 0x60
 80066c2:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066c8:	2300      	movs	r3, #0
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 80066d0:	f107 031c 	add.w	r3, r7, #28
 80066d4:	2200      	movs	r2, #0
 80066d6:	4619      	mov	r1, r3
 80066d8:	483f      	ldr	r0, [pc, #252]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 80066da:	f007 fa3f 	bl	800db5c <HAL_TIM_PWM_ConfigChannel>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d107      	bne.n	80066fa <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 80066ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ee:	4619      	mov	r1, r3
 80066f0:	483f      	ldr	r0, [pc, #252]	; (80067f0 <SM_EnablePwmToAux+0x248>)
 80066f2:	f00a fafd 	bl	8010cf0 <iprintf>
		Error_Handler();
 80066f6:	f001 fb37 	bl	8007d68 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 80066fa:	483e      	ldr	r0, [pc, #248]	; (80067f4 <SM_EnablePwmToAux+0x24c>)
 80066fc:	f00a fb6c 	bl	8010dd8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006700:	4b3d      	ldr	r3, [pc, #244]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	4a3c      	ldr	r2, [pc, #240]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800670c:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006728:	2302      	movs	r3, #2
 800672a:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 800672c:	4833      	ldr	r0, [pc, #204]	; (80067fc <SM_EnablePwmToAux+0x254>)
 800672e:	f00a fb53 	bl	8010dd8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	4619      	mov	r1, r3
 8006738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800673c:	f005 f9f8 	bl	800bb30 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006740:	482f      	ldr	r0, [pc, #188]	; (8006800 <SM_EnablePwmToAux+0x258>)
 8006742:	f00a fb49 	bl	8010dd8 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006746:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	4a2b      	ldr	r2, [pc, #172]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	6593      	str	r3, [r2, #88]	; 0x58
 8006752:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <SM_EnablePwmToAux+0x250>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 800675e:	4829      	ldr	r0, [pc, #164]	; (8006804 <SM_EnablePwmToAux+0x25c>)
 8006760:	f00a fb3a 	bl	8010dd8 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006764:	2200      	movs	r2, #0
 8006766:	2100      	movs	r1, #0
 8006768:	201d      	movs	r0, #29
 800676a:	f004 fab4 	bl	800acd6 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 800676e:	4826      	ldr	r0, [pc, #152]	; (8006808 <SM_EnablePwmToAux+0x260>)
 8006770:	f00a fb32 	bl	8010dd8 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006774:	201d      	movs	r0, #29
 8006776:	f004 fac8 	bl	800ad0a <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 800677a:	4824      	ldr	r0, [pc, #144]	; (800680c <SM_EnablePwmToAux+0x264>)
 800677c:	f00a fb2c 	bl	8010dd8 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006780:	2100      	movs	r1, #0
 8006782:	4815      	ldr	r0, [pc, #84]	; (80067d8 <SM_EnablePwmToAux+0x230>)
 8006784:	f006 fe4e 	bl	800d424 <HAL_TIM_PWM_Start>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006790:	4293      	cmp	r3, r2
 8006792:	d107      	bne.n	80067a4 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006798:	4619      	mov	r1, r3
 800679a:	481d      	ldr	r0, [pc, #116]	; (8006810 <SM_EnablePwmToAux+0x268>)
 800679c:	f00a faa8 	bl	8010cf0 <iprintf>
		Error_Handler();
 80067a0:	f001 fae2 	bl	8007d68 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 80067a4:	481b      	ldr	r0, [pc, #108]	; (8006814 <SM_EnablePwmToAux+0x26c>)
 80067a6:	f00a fb17 	bl	8010dd8 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 80067aa:	2007      	movs	r0, #7
 80067ac:	f7ff fb9e 	bl	8005eec <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 80067b0:	4819      	ldr	r0, [pc, #100]	; (8006818 <SM_EnablePwmToAux+0x270>)
 80067b2:	f00a fb11 	bl	8010dd8 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <SM_EnablePwmToAux+0x234>)
 80067b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 80067be:	4817      	ldr	r0, [pc, #92]	; (800681c <SM_EnablePwmToAux+0x274>)
 80067c0:	f00a fb0a 	bl	8010dd8 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <SM_EnablePwmToAux+0x234>)
 80067c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067cc:	bf00      	nop
 80067ce:	3758      	adds	r7, #88	; 0x58
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	08014e68 	.word	0x08014e68
 80067d8:	200022dc 	.word	0x200022dc
 80067dc:	40000400 	.word	0x40000400
 80067e0:	08014e7c 	.word	0x08014e7c
 80067e4:	08014eb0 	.word	0x08014eb0
 80067e8:	08014eec 	.word	0x08014eec
 80067ec:	08014f1c 	.word	0x08014f1c
 80067f0:	08014f64 	.word	0x08014f64
 80067f4:	08014fa0 	.word	0x08014fa0
 80067f8:	40021000 	.word	0x40021000
 80067fc:	08014fd0 	.word	0x08014fd0
 8006800:	08014ff4 	.word	0x08014ff4
 8006804:	0801502c 	.word	0x0801502c
 8006808:	08015054 	.word	0x08015054
 800680c:	0801507c 	.word	0x0801507c
 8006810:	080150a4 	.word	0x080150a4
 8006814:	080150d8 	.word	0x080150d8
 8006818:	08015104 	.word	0x08015104
 800681c:	08015138 	.word	0x08015138

08006820 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006826:	4815      	ldr	r0, [pc, #84]	; (800687c <SM_DisablePwmToAux+0x5c>)
 8006828:	f00a fa62 	bl	8010cf0 <iprintf>

	HAL_StatusTypeDef res = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006830:	4813      	ldr	r0, [pc, #76]	; (8006880 <SM_DisablePwmToAux+0x60>)
 8006832:	f00a fad1 	bl	8010dd8 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006836:	2100      	movs	r1, #0
 8006838:	4812      	ldr	r0, [pc, #72]	; (8006884 <SM_DisablePwmToAux+0x64>)
 800683a:	f006 fecd 	bl	800d5d8 <HAL_TIM_PWM_Stop>
 800683e:	4603      	mov	r3, r0
 8006840:	461a      	mov	r2, r3
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	4293      	cmp	r3, r2
 8006846:	d106      	bne.n	8006856 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	4619      	mov	r1, r3
 800684c:	480e      	ldr	r0, [pc, #56]	; (8006888 <SM_DisablePwmToAux+0x68>)
 800684e:	f00a fa4f 	bl	8010cf0 <iprintf>
		Error_Handler();
 8006852:	f001 fa89 	bl	8007d68 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006856:	480d      	ldr	r0, [pc, #52]	; (800688c <SM_DisablePwmToAux+0x6c>)
 8006858:	f00a fabe 	bl	8010dd8 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <SM_DisablePwmToAux+0x70>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	4a0b      	ldr	r2, [pc, #44]	; (8006890 <SM_DisablePwmToAux+0x70>)
 8006862:	f023 0302 	bic.w	r3, r3, #2
 8006866:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006868:	480a      	ldr	r0, [pc, #40]	; (8006894 <SM_DisablePwmToAux+0x74>)
 800686a:	f00a fab5 	bl	8010dd8 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800686e:	201d      	movs	r0, #29
 8006870:	f004 fa59 	bl	800ad26 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08015168 	.word	0x08015168
 8006880:	0801517c 	.word	0x0801517c
 8006884:	200022dc 	.word	0x200022dc
 8006888:	080151a4 	.word	0x080151a4
 800688c:	080151d8 	.word	0x080151d8
 8006890:	40021000 	.word	0x40021000
 8006894:	08015214 	.word	0x08015214

08006898 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b0b2      	sub	sp, #200	; 0xc8
 800689c:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 800689e:	4860      	ldr	r0, [pc, #384]	; (8006a20 <SM_EnableDacToAux+0x188>)
 80068a0:	f00a fa26 	bl	8010cf0 <iprintf>

	HAL_StatusTypeDef res = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 80068aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068ae:	2230      	movs	r2, #48	; 0x30
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f009 fdb8 	bl	8010428 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 80068c8:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <SM_EnableDacToAux+0x18c>)
 80068ca:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 80068cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80068d0:	4618      	mov	r0, r3
 80068d2:	f004 fa42 	bl	800ad5a <HAL_DAC_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80068de:	4293      	cmp	r3, r2
 80068e0:	d107      	bne.n	80068f2 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 80068e2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80068e6:	4619      	mov	r1, r3
 80068e8:	484f      	ldr	r0, [pc, #316]	; (8006a28 <SM_EnableDacToAux+0x190>)
 80068ea:	f00a fa01 	bl	8010cf0 <iprintf>
		Error_Handler();
 80068ee:	f001 fa3b 	bl	8007d68 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80068f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 800690c:	2312      	movs	r3, #18
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006912:	2300      	movs	r3, #0
 8006914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800691e:	2301      	movs	r3, #1
 8006920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 800692a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800692e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006932:	2200      	movs	r2, #0
 8006934:	4618      	mov	r0, r3
 8006936:	f004 fbf9 	bl	800b12c <HAL_DAC_ConfigChannel>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006942:	4293      	cmp	r3, r2
 8006944:	d107      	bne.n	8006956 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006946:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800694a:	4619      	mov	r1, r3
 800694c:	4837      	ldr	r0, [pc, #220]	; (8006a2c <SM_EnableDacToAux+0x194>)
 800694e:	f00a f9cf 	bl	8010cf0 <iprintf>
		Error_Handler();
 8006952:	f001 fa09 	bl	8007d68 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006956:	4836      	ldr	r0, [pc, #216]	; (8006a30 <SM_EnableDacToAux+0x198>)
 8006958:	f00a fa3e 	bl	8010dd8 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 800695c:	4b35      	ldr	r3, [pc, #212]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	4a34      	ldr	r2, [pc, #208]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 8006962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006968:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 800696a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006974:	4830      	ldr	r0, [pc, #192]	; (8006a38 <SM_EnableDacToAux+0x1a0>)
 8006976:	f00a fa2f 	bl	8010dd8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800697a:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 800697c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697e:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <SM_EnableDacToAux+0x19c>)
 8006988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006998:	2303      	movs	r3, #3
 800699a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 80069a4:	4825      	ldr	r0, [pc, #148]	; (8006a3c <SM_EnableDacToAux+0x1a4>)
 80069a6:	f00a fa17 	bl	8010dd8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069b4:	f005 f8bc 	bl	800bb30 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 80069b8:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <SM_EnableDacToAux+0x1a8>)
 80069ba:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80069bc:	2329      	movs	r3, #41	; 0x29
 80069be:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069c0:	2310      	movs	r3, #16
 80069c2:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d0:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80069d8:	2320      	movs	r3, #32
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 80069e0:	f107 030c 	add.w	r3, r7, #12
 80069e4:	4618      	mov	r0, r3
 80069e6:	f004 fdd7 	bl	800b598 <HAL_DMA_Init>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d107      	bne.n	8006a06 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 80069f6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80069fa:	4619      	mov	r1, r3
 80069fc:	4811      	ldr	r0, [pc, #68]	; (8006a44 <SM_EnableDacToAux+0x1ac>)
 80069fe:	f00a f977 	bl	8010cf0 <iprintf>
		Error_Handler();
 8006a02:	f001 f9b1 	bl	8007d68 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006a06:	4810      	ldr	r0, [pc, #64]	; (8006a48 <SM_EnableDacToAux+0x1b0>)
 8006a08:	f00a f9e6 	bl	8010dd8 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	677b      	str	r3, [r7, #116]	; 0x74
 8006a12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006a18:	bf00      	nop
 8006a1a:	37c8      	adds	r7, #200	; 0xc8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	0801523c 	.word	0x0801523c
 8006a24:	50000c00 	.word	0x50000c00
 8006a28:	08015250 	.word	0x08015250
 8006a2c:	0801527c 	.word	0x0801527c
 8006a30:	080152b4 	.word	0x080152b4
 8006a34:	40021000 	.word	0x40021000
 8006a38:	080152e4 	.word	0x080152e4
 8006a3c:	08015314 	.word	0x08015314
 8006a40:	40020030 	.word	0x40020030
 8006a44:	08015338 	.word	0x08015338
 8006a48:	08015364 	.word	0x08015364

08006a4c <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006a50:	4806      	ldr	r0, [pc, #24]	; (8006a6c <SM_DisableDacToAux+0x20>)
 8006a52:	f00a f9c1 	bl	8010dd8 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006a56:	4806      	ldr	r0, [pc, #24]	; (8006a70 <SM_DisableDacToAux+0x24>)
 8006a58:	f00a f9be 	bl	8010dd8 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006a5c:	2140      	movs	r1, #64	; 0x40
 8006a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a62:	f005 f9e7 	bl	800be34 <HAL_GPIO_DeInit>

}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08015388 	.word	0x08015388
 8006a70:	0801539c 	.word	0x0801539c

08006a74 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <SM_GetEncoderValue+0x34>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <SM_GetEncoderValue+0x34>)
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	e002      	b.n	8006a9c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006a96:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <SM_GetEncoderValue+0x34>)
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b29b      	uxth	r3, r3
	}
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40012c00 	.word	0x40012c00

08006aac <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <SM_GetOutputInHertz+0x18>
 8006abc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	e008      	b.n	8006ad6 <SM_GetOutputInHertz+0x2a>
 8006ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <SM_GetOutputInHertz+0x3c>
 8006ae0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	e008      	b.n	8006afa <SM_GetOutputInHertz+0x4e>
 8006ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8006afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b06:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006b30 <SM_GetOutputInHertz+0x84>
 8006b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b16:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006b34 <SM_GetOutputInHertz+0x88>
 8006b1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b1e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006b22:	eeb0 0a67 	vmov.f32	s0, s15
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	4d2037a0 	.word	0x4d2037a0
 8006b34:	42f00000 	.word	0x42f00000

08006b38 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <SM_ConvertPeriodToHertz+0x16>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006b4e:	887b      	ldrh	r3, [r7, #2]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006b80 <SM_ConvertPeriodToHertz+0x48>
 8006b6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006b72:	eeb0 0a67 	vmov.f32	s0, s15
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	4d2037a0 	.word	0x4d2037a0

08006b84 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <SM_IsFuncPwmDutyMode+0x14>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	2000225c 	.word	0x2000225c

08006b9c <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006bac:	701a      	strb	r2, [r3, #0]
}
 8006bae:	bf00      	nop
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	2000225c 	.word	0x2000225c

08006bbc <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <SM_ResetFuncPwmDutyMode+0x14>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]

}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	2000225c 	.word	0x2000225c

08006bd4 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <VPP_ResetLastEncoderValue+0x14>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	801a      	strh	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	2000225e 	.word	0x2000225e

08006bec <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006bf6:	79fa      	ldrb	r2, [r7, #7]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <VPP_ApplyProfileToSignal+0x58>)
 8006c02:	4413      	add	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7ff fcb8 	bl	800657c <SM_GetOutputChannel>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	7a1b      	ldrb	r3, [r3, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff f967 	bl	8005eec <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	ed93 7a05 	vldr	s14, [r3, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8b1b      	ldrh	r3, [r3, #24]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	eef0 0a47 	vmov.f32	s1, s14
 8006c34:	eeb0 0a67 	vmov.f32	s0, s15
 8006c38:	f000 f830 	bl	8006c9c <_ProcessSignalDataTable>


}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2000017c 	.word	0x2000017c

08006c48 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006c52:	79fa      	ldrb	r2, [r7, #7]
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4a0e      	ldr	r2, [pc, #56]	; (8006c98 <VPP_ApplyProfileToAux+0x50>)
 8006c5e:	4413      	add	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 8006c62:	2001      	movs	r0, #1
 8006c64:	f7ff fc8a 	bl	800657c <SM_GetOutputChannel>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	edd3 7a04 	vldr	s15, [r3, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	ed93 7a05 	vldr	s14, [r3, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8b1b      	ldrh	r3, [r3, #24]
 8006c80:	4618      	mov	r0, r3
 8006c82:	eef0 0a47 	vmov.f32	s1, s14
 8006c86:	eeb0 0a67 	vmov.f32	s0, s15
 8006c8a:	f000 f88d 	bl	8006da8 <_ProcessAuxDataTable>



}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000017c 	.word	0x2000017c

08006c9c <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	ed87 0a03 	vstr	s0, [r7, #12]
 8006ca6:	edc7 0a02 	vstr	s1, [r7, #8]
 8006caa:	4603      	mov	r3, r0
 8006cac:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f7ff fc64 	bl	800657c <SM_GetOutputChannel>
 8006cb4:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d06b      	beq.n	8006d9a <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	e00c      	b.n	8006ce2 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	4933      	ldr	r1, [pc, #204]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	3301      	adds	r3, #1
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	2b77      	cmp	r3, #119	; 0x77
 8006ce6:	ddef      	ble.n	8006cc8 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006ce8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006cec:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d02:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	e02e      	b.n	8006d6a <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006d0c:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d28:	ee17 1a90 	vmov	r1, s15
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d44:	edd7 7a08 	vldr	s15, [r7, #32]
 8006d48:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d58:	ee17 1a90 	vmov	r1, s15
 8006d5c:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b77      	cmp	r3, #119	; 0x77
 8006d6e:	ddcd      	ble.n	8006d0c <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006d70:	2300      	movs	r3, #0
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	e00e      	b.n	8006d94 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7ff fc00 	bl	800657c <SM_GetOutputChannel>
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <_ProcessSignalDataTable+0x108>)
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	3302      	adds	r3, #2
 8006d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	3301      	adds	r3, #1
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b77      	cmp	r3, #119	; 0x77
 8006d98:	dded      	ble.n	8006d76 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006d9a:	bf00      	nop
 8006d9c:	3728      	adds	r7, #40	; 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000271c 	.word	0x2000271c

08006da8 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8006db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8006db6:	4603      	mov	r3, r0
 8006db8:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006dba:	2001      	movs	r0, #1
 8006dbc:	f7ff fbde 	bl	800657c <SM_GetOutputChannel>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d059      	beq.n	8006e80 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	e00f      	b.n	8006df2 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f7ff fbd2 	bl	800657c <SM_GetOutputChannel>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4933      	ldr	r1, [pc, #204]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b77      	cmp	r3, #119	; 0x77
 8006df6:	ddec      	ble.n	8006dd2 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006df8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006dfc:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	089b      	lsrs	r3, r3, #2
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e12:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e02e      	b.n	8006e7a <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006e1c:	4a25      	ldr	r2, [pc, #148]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e38:	ee17 1a90 	vmov	r1, s15
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4c:	ee07 3a90 	vmov	s15, r3
 8006e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e58:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006e5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e68:	ee17 1a90 	vmov	r1, s15
 8006e6c:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3301      	adds	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b77      	cmp	r3, #119	; 0x77
 8006e7e:	ddcd      	ble.n	8006e1c <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	e00e      	b.n	8006ea4 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006e86:	2001      	movs	r0, #1
 8006e88:	f7ff fb78 	bl	800657c <SM_GetOutputChannel>
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <_ProcessAuxDataTable+0x10c>)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3302      	adds	r3, #2
 8006e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b77      	cmp	r3, #119	; 0x77
 8006ea8:	dded      	ble.n	8006e86 <_ProcessAuxDataTable+0xde>
	}
}
 8006eaa:	bf00      	nop
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	2000271c 	.word	0x2000271c

08006eb8 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7ff fb5a 	bl	800657c <SM_GetOutputChannel>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d90c      	bls.n	8006ef6 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b61      	cmp	r3, #97	; 0x61
 8006ee6:	d901      	bls.n	8006eec <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006ee8:	2361      	movs	r3, #97	; 0x61
 8006eea:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff fe7c 	bl	8006bec <VPP_ApplyProfileToSignal>
 8006ef4:	e010      	b.n	8006f18 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d20b      	bcs.n	8006f18 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b61      	cmp	r3, #97	; 0x61
 8006f0a:	d901      	bls.n	8006f10 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fe6a 	bl	8006bec <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8006f18:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	8013      	strh	r3, [r2, #0]

}
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000225e 	.word	0x2000225e

08006f2c <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8006f36:	2001      	movs	r0, #1
 8006f38:	f7ff fb20 	bl	800657c <SM_GetOutputChannel>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006f46:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d90c      	bls.n	8006f6a <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	3301      	adds	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b61      	cmp	r3, #97	; 0x61
 8006f5a:	d901      	bls.n	8006f60 <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006f5c:	2361      	movs	r3, #97	; 0x61
 8006f5e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fe70 	bl	8006c48 <VPP_ApplyProfileToAux>
 8006f68:	e010      	b.n	8006f8c <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d20b      	bcs.n	8006f8c <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	2b61      	cmp	r3, #97	; 0x61
 8006f7e:	d901      	bls.n	8006f84 <VPP_MapEncoderPositionToAuxOutput+0x58>
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fe5e 	bl	8006c48 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8006f8c:	4a03      	ldr	r2, [pc, #12]	; (8006f9c <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	8013      	strh	r3, [r2, #0]

}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000225e 	.word	0x2000225e

08006fa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	; 0x30
 8006fa4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f009 fa35 	bl	8010428 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006fbe:	4b32      	ldr	r3, [pc, #200]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006fc6:	4b30      	ldr	r3, [pc, #192]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006fcc:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fd2:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006fde:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006fe4:	4b28      	ldr	r3, [pc, #160]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006fea:	4b27      	ldr	r3, [pc, #156]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006ffc:	4b22      	ldr	r3, [pc, #136]	; (8007088 <MX_ADC1_Init+0xe8>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007004:	4b20      	ldr	r3, [pc, #128]	; (8007088 <MX_ADC1_Init+0xe8>)
 8007006:	2200      	movs	r2, #0
 8007008:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800700a:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <MX_ADC1_Init+0xe8>)
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007010:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <MX_ADC1_Init+0xe8>)
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007018:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <MX_ADC1_Init+0xe8>)
 800701a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <MX_ADC1_Init+0xe8>)
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007028:	4817      	ldr	r0, [pc, #92]	; (8007088 <MX_ADC1_Init+0xe8>)
 800702a:	f001 ffb9 	bl	8008fa0 <HAL_ADC_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007034:	f000 fe98 	bl	8007d68 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007038:	2300      	movs	r3, #0
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800703c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007040:	4619      	mov	r1, r3
 8007042:	4811      	ldr	r0, [pc, #68]	; (8007088 <MX_ADC1_Init+0xe8>)
 8007044:	f003 f880 	bl	800a148 <HAL_ADCEx_MultiModeConfigChannel>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800704e:	f000 fe8b 	bl	8007d68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007052:	4b0e      	ldr	r3, [pc, #56]	; (800708c <MX_ADC1_Init+0xec>)
 8007054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007056:	2306      	movs	r3, #6
 8007058:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800705e:	237f      	movs	r3, #127	; 0x7f
 8007060:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007062:	2304      	movs	r3, #4
 8007064:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800706a:	1d3b      	adds	r3, r7, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4806      	ldr	r0, [pc, #24]	; (8007088 <MX_ADC1_Init+0xe8>)
 8007070:	f002 fa9a 	bl	80095a8 <HAL_ADC_ConfigChannel>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800707a:	f000 fe75 	bl	8007d68 <Error_Handler>
  }

}
 800707e:	bf00      	nop
 8007080:	3730      	adds	r7, #48	; 0x30
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200028fc 	.word	0x200028fc
 800708c:	0c900008 	.word	0x0c900008

08007090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	; 0x28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007098:	f107 0314 	add.w	r3, r7, #20
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	609a      	str	r2, [r3, #8]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b0:	d14f      	bne.n	8007152 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80070b2:	4b2a      	ldr	r3, [pc, #168]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b6:	4a29      	ldr	r2, [pc, #164]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	4a23      	ldr	r2, [pc, #140]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <HAL_ADC_MspInit+0xcc>)
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070e2:	2304      	movs	r3, #4
 80070e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070e6:	2303      	movs	r3, #3
 80070e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	4619      	mov	r1, r3
 80070f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070f8:	f004 fd1a 	bl	800bb30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80070fc:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 80070fe:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_ADC_MspInit+0xd4>)
 8007100:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007102:	4b17      	ldr	r3, [pc, #92]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007104:	2205      	movs	r2, #5
 8007106:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007108:	4b15      	ldr	r3, [pc, #84]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 800710a:	2200      	movs	r2, #0
 800710c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800710e:	4b14      	ldr	r3, [pc, #80]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007110:	2200      	movs	r2, #0
 8007112:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007116:	2280      	movs	r2, #128	; 0x80
 8007118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 800711c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 800712c:	2220      	movs	r2, #32
 800712e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007132:	2200      	movs	r2, #0
 8007134:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007136:	480a      	ldr	r0, [pc, #40]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 8007138:	f004 fa2e 	bl	800b598 <HAL_DMA_Init>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8007142:	f000 fe11 	bl	8007d68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a05      	ldr	r2, [pc, #20]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 800714a:	655a      	str	r2, [r3, #84]	; 0x54
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_ADC_MspInit+0xd0>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007152:	bf00      	nop
 8007154:	3728      	adds	r7, #40	; 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40021000 	.word	0x40021000
 8007160:	20002968 	.word	0x20002968
 8007164:	40020008 	.word	0x40020008

08007168 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <MX_COMP1_Init+0x44>)
 800716e:	4a10      	ldr	r2, [pc, #64]	; (80071b0 <MX_COMP1_Init+0x48>)
 8007170:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8007172:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <MX_COMP1_Init+0x44>)
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <MX_COMP1_Init+0x44>)
 800717a:	4a0e      	ldr	r2, [pc, #56]	; (80071b4 <MX_COMP1_Init+0x4c>)
 800717c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <MX_COMP1_Init+0x44>)
 8007180:	2200      	movs	r2, #0
 8007182:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8007184:	4b09      	ldr	r3, [pc, #36]	; (80071ac <MX_COMP1_Init+0x44>)
 8007186:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800718a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800718c:	4b07      	ldr	r3, [pc, #28]	; (80071ac <MX_COMP1_Init+0x44>)
 800718e:	2200      	movs	r2, #0
 8007190:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <MX_COMP1_Init+0x44>)
 8007194:	2231      	movs	r2, #49	; 0x31
 8007196:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007198:	4804      	ldr	r0, [pc, #16]	; (80071ac <MX_COMP1_Init+0x44>)
 800719a:	f003 fa55 	bl	800a648 <HAL_COMP_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80071a4:	f000 fde0 	bl	8007d68 <Error_Handler>
  }

}
 80071a8:	bf00      	nop
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200029c8 	.word	0x200029c8
 80071b0:	40010200 	.word	0x40010200
 80071b4:	00800030 	.word	0x00800030

080071b8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	60da      	str	r2, [r3, #12]
 80071ce:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a13      	ldr	r2, [pc, #76]	; (8007224 <HAL_COMP_MspInit+0x6c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d120      	bne.n	800721c <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_COMP_MspInit+0x70>)
 80071dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071de:	4a12      	ldr	r2, [pc, #72]	; (8007228 <HAL_COMP_MspInit+0x70>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <HAL_COMP_MspInit+0x70>)
 80071e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	60bb      	str	r3, [r7, #8]
 80071f0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80071f2:	2302      	movs	r3, #2
 80071f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071f6:	2303      	movs	r3, #3
 80071f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4619      	mov	r1, r3
 8007204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007208:	f004 fc92 	bl	800bb30 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	2040      	movs	r0, #64	; 0x40
 8007212:	f003 fd60 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8007216:	2040      	movs	r0, #64	; 0x40
 8007218:	f003 fd77 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800721c:	bf00      	nop
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40010200 	.word	0x40010200
 8007228:	40021000 	.word	0x40021000

0800722c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007232:	463b      	mov	r3, r7
 8007234:	2230      	movs	r2, #48	; 0x30
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f009 f8f5 	bl	8010428 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800723e:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <MX_DAC1_Init+0x8c>)
 8007240:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <MX_DAC1_Init+0x90>)
 8007242:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007244:	481c      	ldr	r0, [pc, #112]	; (80072b8 <MX_DAC1_Init+0x8c>)
 8007246:	f003 fd88 	bl	800ad5a <HAL_DAC_Init>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007250:	f000 fd8a 	bl	8007d68 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007258:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800725a:	2300      	movs	r3, #0
 800725c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800725e:	2300      	movs	r3, #0
 8007260:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8007266:	2312      	movs	r3, #18
 8007268:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007272:	2301      	movs	r3, #1
 8007274:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800727a:	463b      	mov	r3, r7
 800727c:	2200      	movs	r2, #0
 800727e:	4619      	mov	r1, r3
 8007280:	480d      	ldr	r0, [pc, #52]	; (80072b8 <MX_DAC1_Init+0x8c>)
 8007282:	f003 ff53 	bl	800b12c <HAL_DAC_ConfigChannel>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800728c:	f000 fd6c 	bl	8007d68 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007294:	2301      	movs	r3, #1
 8007296:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007298:	463b      	mov	r3, r7
 800729a:	2210      	movs	r2, #16
 800729c:	4619      	mov	r1, r3
 800729e:	4806      	ldr	r0, [pc, #24]	; (80072b8 <MX_DAC1_Init+0x8c>)
 80072a0:	f003 ff44 	bl	800b12c <HAL_DAC_ConfigChannel>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80072aa:	f000 fd5d 	bl	8007d68 <Error_Handler>
  }

}
 80072ae:	bf00      	nop
 80072b0:	3730      	adds	r7, #48	; 0x30
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20002a00 	.word	0x20002a00
 80072bc:	50000800 	.word	0x50000800

080072c0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08c      	sub	sp, #48	; 0x30
 80072c4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80072c6:	463b      	mov	r3, r7
 80072c8:	2230      	movs	r2, #48	; 0x30
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f009 f8ab 	bl	8010428 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <MX_DAC2_Init+0x6c>)
 80072d4:	4a16      	ldr	r2, [pc, #88]	; (8007330 <MX_DAC2_Init+0x70>)
 80072d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80072d8:	4814      	ldr	r0, [pc, #80]	; (800732c <MX_DAC2_Init+0x6c>)
 80072da:	f003 fd3e 	bl	800ad5a <HAL_DAC_Init>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80072e4:	f000 fd40 	bl	8007d68 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80072e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072ec:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80072fa:	2312      	movs	r3, #18
 80072fc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007306:	2301      	movs	r3, #1
 8007308:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800730e:	463b      	mov	r3, r7
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	4805      	ldr	r0, [pc, #20]	; (800732c <MX_DAC2_Init+0x6c>)
 8007316:	f003 ff09 	bl	800b12c <HAL_DAC_ConfigChannel>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007320:	f000 fd22 	bl	8007d68 <Error_Handler>
  }

}
 8007324:	bf00      	nop
 8007326:	3730      	adds	r7, #48	; 0x30
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200029ec 	.word	0x200029ec
 8007330:	50000c00 	.word	0x50000c00

08007334 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733c:	f107 031c 	add.w	r3, r7, #28
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a56      	ldr	r2, [pc, #344]	; (80074ac <HAL_DAC_MspInit+0x178>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d150      	bne.n	80073f8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007356:	4b56      	ldr	r3, [pc, #344]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	4a55      	ldr	r2, [pc, #340]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 800735c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007362:	4b53      	ldr	r3, [pc, #332]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800736e:	4b50      	ldr	r3, [pc, #320]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	4a4f      	ldr	r2, [pc, #316]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800737a:	4b4d      	ldr	r3, [pc, #308]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 800737c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007386:	2330      	movs	r3, #48	; 0x30
 8007388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800738a:	2303      	movs	r3, #3
 800738c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007392:	f107 031c 	add.w	r3, r7, #28
 8007396:	4619      	mov	r1, r3
 8007398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800739c:	f004 fbc8 	bl	800bb30 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80073a0:	4b44      	ldr	r3, [pc, #272]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073a2:	4a45      	ldr	r2, [pc, #276]	; (80074b8 <HAL_DAC_MspInit+0x184>)
 80073a4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80073a6:	4b43      	ldr	r3, [pc, #268]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073a8:	2206      	movs	r2, #6
 80073aa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073ac:	4b41      	ldr	r3, [pc, #260]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073ae:	2210      	movs	r2, #16
 80073b0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80073b2:	4b40      	ldr	r3, [pc, #256]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80073b8:	4b3e      	ldr	r3, [pc, #248]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073ba:	2280      	movs	r2, #128	; 0x80
 80073bc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073be:	4b3d      	ldr	r3, [pc, #244]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80073c6:	4b3b      	ldr	r3, [pc, #236]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073cc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80073ce:	4b39      	ldr	r3, [pc, #228]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073d0:	2220      	movs	r2, #32
 80073d2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80073d4:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80073da:	4836      	ldr	r0, [pc, #216]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073dc:	f004 f8dc 	bl	800b598 <HAL_DMA_Init>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80073e6:	f000 fcbf 	bl	8007d68 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a31      	ldr	r2, [pc, #196]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073ee:	609a      	str	r2, [r3, #8]
 80073f0:	4a30      	ldr	r2, [pc, #192]	; (80074b4 <HAL_DAC_MspInit+0x180>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80073f6:	e054      	b.n	80074a2 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <HAL_DAC_MspInit+0x188>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d14f      	bne.n	80074a2 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8007402:	4b2b      	ldr	r3, [pc, #172]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800740e:	4b28      	ldr	r3, [pc, #160]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800741a:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 800741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741e:	4a24      	ldr	r2, [pc, #144]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007426:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <HAL_DAC_MspInit+0x17c>)
 8007428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007432:	2340      	movs	r3, #64	; 0x40
 8007434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007436:	2303      	movs	r3, #3
 8007438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	2300      	movs	r3, #0
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800743e:	f107 031c 	add.w	r3, r7, #28
 8007442:	4619      	mov	r1, r3
 8007444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007448:	f004 fb72 	bl	800bb30 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800744e:	4a1d      	ldr	r2, [pc, #116]	; (80074c4 <HAL_DAC_MspInit+0x190>)
 8007450:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007454:	2229      	movs	r2, #41	; 0x29
 8007456:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800745a:	2210      	movs	r2, #16
 800745c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007460:	2200      	movs	r2, #0
 8007462:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007464:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007466:	2280      	movs	r2, #128	; 0x80
 8007468:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800746c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007470:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007478:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800747a:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800747c:	2220      	movs	r2, #32
 800747e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007482:	2200      	movs	r2, #0
 8007484:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8007486:	480e      	ldr	r0, [pc, #56]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 8007488:	f004 f886 	bl	800b598 <HAL_DMA_Init>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007492:	f000 fc69 	bl	8007d68 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800749a:	609a      	str	r2, [r3, #8]
 800749c:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <HAL_DAC_MspInit+0x18c>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80074a2:	bf00      	nop
 80074a4:	3730      	adds	r7, #48	; 0x30
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	50000800 	.word	0x50000800
 80074b0:	40021000 	.word	0x40021000
 80074b4:	20002270 	.word	0x20002270
 80074b8:	4002001c 	.word	0x4002001c
 80074bc:	50000c00 	.word	0x50000c00
 80074c0:	20002a14 	.word	0x20002a14
 80074c4:	40020030 	.word	0x40020030

080074c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <MX_DMA_Init+0x70>)
 80074d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d2:	4a19      	ldr	r2, [pc, #100]	; (8007538 <MX_DMA_Init+0x70>)
 80074d4:	f043 0304 	orr.w	r3, r3, #4
 80074d8:	6493      	str	r3, [r2, #72]	; 0x48
 80074da:	4b17      	ldr	r3, [pc, #92]	; (8007538 <MX_DMA_Init+0x70>)
 80074dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <MX_DMA_Init+0x70>)
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <MX_DMA_Init+0x70>)
 80074ec:	f043 0301 	orr.w	r3, r3, #1
 80074f0:	6493      	str	r3, [r2, #72]	; 0x48
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <MX_DMA_Init+0x70>)
 80074f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80074fe:	2200      	movs	r2, #0
 8007500:	2101      	movs	r1, #1
 8007502:	200b      	movs	r0, #11
 8007504:	f003 fbe7 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007508:	200b      	movs	r0, #11
 800750a:	f003 fbfe 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	200c      	movs	r0, #12
 8007514:	f003 fbdf 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007518:	200c      	movs	r0, #12
 800751a:	f003 fbf6 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800751e:	2200      	movs	r2, #0
 8007520:	2100      	movs	r1, #0
 8007522:	200d      	movs	r0, #13
 8007524:	f003 fbd7 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007528:	200d      	movs	r0, #13
 800752a:	f003 fbee 	bl	800ad0a <HAL_NVIC_EnableIRQ>

}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40021000 	.word	0x40021000

0800753c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007540:	4b04      	ldr	r3, [pc, #16]	; (8007554 <__NVIC_GetPriorityGrouping+0x18>)
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	f003 0307 	and.w	r3, r3, #7
}
 800754a:	4618      	mov	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	e000ed00 	.word	0xe000ed00

08007558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	2b00      	cmp	r3, #0
 8007568:	db0b      	blt.n	8007582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	f003 021f 	and.w	r2, r3, #31
 8007570:	4907      	ldr	r1, [pc, #28]	; (8007590 <__NVIC_EnableIRQ+0x38>)
 8007572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2001      	movs	r0, #1
 800757a:	fa00 f202 	lsl.w	r2, r0, r2
 800757e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	e000e100 	.word	0xe000e100

08007594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	db0a      	blt.n	80075be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	490c      	ldr	r1, [pc, #48]	; (80075e0 <__NVIC_SetPriority+0x4c>)
 80075ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075b2:	0112      	lsls	r2, r2, #4
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	440b      	add	r3, r1
 80075b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075bc:	e00a      	b.n	80075d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	4908      	ldr	r1, [pc, #32]	; (80075e4 <__NVIC_SetPriority+0x50>)
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	3b04      	subs	r3, #4
 80075cc:	0112      	lsls	r2, r2, #4
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	440b      	add	r3, r1
 80075d2:	761a      	strb	r2, [r3, #24]
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	e000e100 	.word	0xe000e100
 80075e4:	e000ed00 	.word	0xe000ed00

080075e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	; 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	f1c3 0307 	rsb	r3, r3, #7
 8007602:	2b04      	cmp	r3, #4
 8007604:	bf28      	it	cs
 8007606:	2304      	movcs	r3, #4
 8007608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	3304      	adds	r3, #4
 800760e:	2b06      	cmp	r3, #6
 8007610:	d902      	bls.n	8007618 <NVIC_EncodePriority+0x30>
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	3b03      	subs	r3, #3
 8007616:	e000      	b.n	800761a <NVIC_EncodePriority+0x32>
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800761c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43da      	mvns	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	401a      	ands	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	fa01 f303 	lsl.w	r3, r1, r3
 800763a:	43d9      	mvns	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007640:	4313      	orrs	r3, r2
         );
}
 8007642:	4618      	mov	r0, r3
 8007644:	3724      	adds	r7, #36	; 0x24
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800765a:	4a14      	ldr	r2, [pc, #80]	; (80076ac <LL_SYSCFG_SetEXTISource+0x5c>)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	3302      	adds	r3, #2
 8007664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	43db      	mvns	r3, r3
 800766e:	ea02 0103 	and.w	r1, r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	fa93 f3a3 	rbit	r3, r3
 800767e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	fab3 f383 	clz	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	409a      	lsls	r2, r3
 8007690:	4806      	ldr	r0, [pc, #24]	; (80076ac <LL_SYSCFG_SetEXTISource+0x5c>)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	430a      	orrs	r2, r1
 800769a:	3302      	adds	r3, #2
 800769c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40010000 	.word	0x40010000

080076b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	fa93 f3a3 	rbit	r3, r3
 80076ca:	613b      	str	r3, [r7, #16]
  return result;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	fab3 f383 	clz	r3, r3
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2103      	movs	r1, #3
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	401a      	ands	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	fa93 f3a3 	rbit	r3, r3
 80076ea:	61bb      	str	r3, [r7, #24]
  return result;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	fab3 f383 	clz	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	fa01 f303 	lsl.w	r3, r1, r3
 80076fc:	431a      	orrs	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]
}
 8007702:	bf00      	nop
 8007704:	3724      	adds	r7, #36	; 0x24
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800770e:	b480      	push	{r7}
 8007710:	b089      	sub	sp, #36	; 0x24
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	fa93 f3a3 	rbit	r3, r3
 8007728:	613b      	str	r3, [r7, #16]
  return result;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	fab3 f383 	clz	r3, r3
 8007730:	b2db      	uxtb	r3, r3
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	2103      	movs	r1, #3
 8007736:	fa01 f303 	lsl.w	r3, r1, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	401a      	ands	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	fa93 f3a3 	rbit	r3, r3
 8007748:	61bb      	str	r3, [r7, #24]
  return result;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	fab3 f383 	clz	r3, r3
 8007750:	b2db      	uxtb	r3, r3
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	431a      	orrs	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	60da      	str	r2, [r3, #12]
}
 8007760:	bf00      	nop
 8007762:	3724      	adds	r7, #36	; 0x24
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007794:	4907      	ldr	r1, [pc, #28]	; (80077b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4313      	orrs	r3, r2
 800779a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800779e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4013      	ands	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80077a6:	68fb      	ldr	r3, [r7, #12]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40021000 	.word	0x40021000

080077b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80077be:	f107 031c 	add.w	r3, r7, #28
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	605a      	str	r2, [r3, #4]
 80077c8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	609a      	str	r2, [r3, #8]
 80077d4:	60da      	str	r2, [r3, #12]
 80077d6:	611a      	str	r2, [r3, #16]
 80077d8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80077da:	2004      	movs	r0, #4
 80077dc:	f7ff ffd4 	bl	8007788 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80077e0:	2020      	movs	r0, #32
 80077e2:	f7ff ffd1 	bl	8007788 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80077e6:	2001      	movs	r0, #1
 80077e8:	f7ff ffce 	bl	8007788 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80077ec:	2002      	movs	r0, #2
 80077ee:	f7ff ffcb 	bl	8007788 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80077f2:	2108      	movs	r1, #8
 80077f4:	48d3      	ldr	r0, [pc, #844]	; (8007b44 <MX_GPIO_Init+0x38c>)
 80077f6:	f7ff ffb9 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 80077fa:	2108      	movs	r1, #8
 80077fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007800:	f7ff ffb4 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007804:	2110      	movs	r1, #16
 8007806:	48cf      	ldr	r0, [pc, #828]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007808:	f7ff ffb0 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 800780c:	2120      	movs	r1, #32
 800780e:	48cd      	ldr	r0, [pc, #820]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007810:	f7ff ffac 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007814:	2101      	movs	r1, #1
 8007816:	48cc      	ldr	r0, [pc, #816]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007818:	f7ff ffa8 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 800781c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007820:	48c8      	ldr	r0, [pc, #800]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007822:	f7ff ffa3 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800782a:	48c6      	ldr	r0, [pc, #792]	; (8007b44 <MX_GPIO_Init+0x38c>)
 800782c:	f7ff ff9e 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007830:	2140      	movs	r1, #64	; 0x40
 8007832:	48c5      	ldr	r0, [pc, #788]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007834:	f7ff ff9a 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	48c3      	ldr	r0, [pc, #780]	; (8007b48 <MX_GPIO_Init+0x390>)
 800783c:	f7ff ff96 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007844:	48c0      	ldr	r0, [pc, #768]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007846:	f7ff ff91 	bl	800776c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800784a:	49c0      	ldr	r1, [pc, #768]	; (8007b4c <MX_GPIO_Init+0x394>)
 800784c:	2002      	movs	r0, #2
 800784e:	f7ff feff 	bl	8007650 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007852:	49bf      	ldr	r1, [pc, #764]	; (8007b50 <MX_GPIO_Init+0x398>)
 8007854:	2002      	movs	r0, #2
 8007856:	f7ff fefb 	bl	8007650 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800785a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800785e:	2005      	movs	r0, #5
 8007860:	f7ff fef6 	bl	8007650 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007864:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007868:	2005      	movs	r0, #5
 800786a:	f7ff fef1 	bl	8007650 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800786e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007872:	2002      	movs	r0, #2
 8007874:	f7ff feec 	bl	8007650 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007878:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800787c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800788a:	2302      	movs	r3, #2
 800788c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007890:	f107 031c 	add.w	r3, r7, #28
 8007894:	4618      	mov	r0, r3
 8007896:	f007 fae5 	bl	800ee64 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80078ac:	2302      	movs	r3, #2
 80078ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80078b2:	f107 031c 	add.w	r3, r7, #28
 80078b6:	4618      	mov	r0, r3
 80078b8:	f007 fad4 	bl	800ee64 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80078bc:	2301      	movs	r3, #1
 80078be:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80078cc:	2302      	movs	r3, #2
 80078ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80078d2:	f107 031c 	add.w	r3, r7, #28
 80078d6:	4618      	mov	r0, r3
 80078d8:	f007 fac4 	bl	800ee64 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80078dc:	2302      	movs	r3, #2
 80078de:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80078ec:	2302      	movs	r3, #2
 80078ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80078f2:	f107 031c 	add.w	r3, r7, #28
 80078f6:	4618      	mov	r0, r3
 80078f8:	f007 fab4 	bl	800ee64 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80078fc:	2304      	movs	r3, #4
 80078fe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007906:	2300      	movs	r3, #0
 8007908:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800790c:	2302      	movs	r3, #2
 800790e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007912:	f107 031c 	add.w	r3, r7, #28
 8007916:	4618      	mov	r0, r3
 8007918:	f007 faa4 	bl	800ee64 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 800791c:	2201      	movs	r2, #1
 800791e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007922:	4888      	ldr	r0, [pc, #544]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007924:	f7ff fef3 	bl	800770e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007928:	2201      	movs	r2, #1
 800792a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800792e:	4885      	ldr	r0, [pc, #532]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007930:	f7ff feed 	bl	800770e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007934:	2201      	movs	r2, #1
 8007936:	2101      	movs	r1, #1
 8007938:	4886      	ldr	r0, [pc, #536]	; (8007b54 <MX_GPIO_Init+0x39c>)
 800793a:	f7ff fee8 	bl	800770e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800793e:	2201      	movs	r2, #1
 8007940:	2102      	movs	r1, #2
 8007942:	4884      	ldr	r0, [pc, #528]	; (8007b54 <MX_GPIO_Init+0x39c>)
 8007944:	f7ff fee3 	bl	800770e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007948:	2201      	movs	r2, #1
 800794a:	2104      	movs	r1, #4
 800794c:	487d      	ldr	r0, [pc, #500]	; (8007b44 <MX_GPIO_Init+0x38c>)
 800794e:	f7ff fede 	bl	800770e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007952:	2200      	movs	r2, #0
 8007954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007958:	487a      	ldr	r0, [pc, #488]	; (8007b44 <MX_GPIO_Init+0x38c>)
 800795a:	f7ff fea9 	bl	80076b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800795e:	2200      	movs	r2, #0
 8007960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007964:	4877      	ldr	r0, [pc, #476]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007966:	f7ff fea3 	bl	80076b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800796a:	2200      	movs	r2, #0
 800796c:	2101      	movs	r1, #1
 800796e:	4879      	ldr	r0, [pc, #484]	; (8007b54 <MX_GPIO_Init+0x39c>)
 8007970:	f7ff fe9e 	bl	80076b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007974:	2200      	movs	r2, #0
 8007976:	2102      	movs	r1, #2
 8007978:	4876      	ldr	r0, [pc, #472]	; (8007b54 <MX_GPIO_Init+0x39c>)
 800797a:	f7ff fe99 	bl	80076b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 800797e:	2200      	movs	r2, #0
 8007980:	2104      	movs	r1, #4
 8007982:	4870      	ldr	r0, [pc, #448]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007984:	f7ff fe94 	bl	80076b0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007988:	2308      	movs	r3, #8
 800798a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800798c:	2301      	movs	r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007998:	2302      	movs	r3, #2
 800799a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800799c:	1d3b      	adds	r3, r7, #4
 800799e:	4619      	mov	r1, r3
 80079a0:	4868      	ldr	r0, [pc, #416]	; (8007b44 <MX_GPIO_Init+0x38c>)
 80079a2:	f007 fc52 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 80079a6:	2308      	movs	r3, #8
 80079a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80079aa:	2301      	movs	r3, #1
 80079ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80079ba:	1d3b      	adds	r3, r7, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079c2:	f007 fc42 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 80079c6:	2310      	movs	r3, #16
 80079c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80079ca:	2301      	movs	r3, #1
 80079cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4859      	ldr	r0, [pc, #356]	; (8007b44 <MX_GPIO_Init+0x38c>)
 80079e0:	f007 fc33 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 80079e4:	2320      	movs	r3, #32
 80079e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80079e8:	2301      	movs	r3, #1
 80079ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 80079f8:	1d3b      	adds	r3, r7, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4851      	ldr	r0, [pc, #324]	; (8007b44 <MX_GPIO_Init+0x38c>)
 80079fe:	f007 fc24 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007a02:	2301      	movs	r3, #1
 8007a04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a06:	2301      	movs	r3, #1
 8007a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007a16:	1d3b      	adds	r3, r7, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	484b      	ldr	r0, [pc, #300]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007a1c:	f007 fc15 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a26:	2301      	movs	r3, #1
 8007a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4842      	ldr	r0, [pc, #264]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007a3c:	f007 fc05 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a46:	2301      	movs	r3, #1
 8007a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	483a      	ldr	r0, [pc, #232]	; (8007b44 <MX_GPIO_Init+0x38c>)
 8007a5c:	f007 fbf5 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a64:	2301      	movs	r3, #1
 8007a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007a74:	1d3b      	adds	r3, r7, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4833      	ldr	r0, [pc, #204]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007a7a:	f007 fbe6 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a82:	2301      	movs	r3, #1
 8007a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007a86:	2303      	movs	r3, #3
 8007a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007a92:	1d3b      	adds	r3, r7, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	482c      	ldr	r0, [pc, #176]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007a98:	f007 fbd7 	bl	800f24a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4824      	ldr	r0, [pc, #144]	; (8007b48 <MX_GPIO_Init+0x390>)
 8007ab8:	f007 fbc7 	bl	800f24a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007abc:	f7ff fd3e 	bl	800753c <__NVIC_GetPriorityGrouping>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff fd8e 	bl	80075e8 <NVIC_EncodePriority>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	2006      	movs	r0, #6
 8007ad2:	f7ff fd5f 	bl	8007594 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007ad6:	2006      	movs	r0, #6
 8007ad8:	f7ff fd3e 	bl	8007558 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007adc:	f7ff fd2e 	bl	800753c <__NVIC_GetPriorityGrouping>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fd7e 	bl	80075e8 <NVIC_EncodePriority>
 8007aec:	4603      	mov	r3, r0
 8007aee:	4619      	mov	r1, r3
 8007af0:	2007      	movs	r0, #7
 8007af2:	f7ff fd4f 	bl	8007594 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007af6:	2007      	movs	r0, #7
 8007af8:	f7ff fd2e 	bl	8007558 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007afc:	f7ff fd1e 	bl	800753c <__NVIC_GetPriorityGrouping>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fd6e 	bl	80075e8 <NVIC_EncodePriority>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4619      	mov	r1, r3
 8007b10:	2008      	movs	r0, #8
 8007b12:	f7ff fd3f 	bl	8007594 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007b16:	2008      	movs	r0, #8
 8007b18:	f7ff fd1e 	bl	8007558 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007b1c:	f7ff fd0e 	bl	800753c <__NVIC_GetPriorityGrouping>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fd5e 	bl	80075e8 <NVIC_EncodePriority>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4619      	mov	r1, r3
 8007b30:	2028      	movs	r0, #40	; 0x28
 8007b32:	f7ff fd2f 	bl	8007594 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007b36:	2028      	movs	r0, #40	; 0x28
 8007b38:	f7ff fd0e 	bl	8007558 <__NVIC_EnableIRQ>

}
 8007b3c:	bf00      	nop
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e009      	b.n	8007b58 <MX_GPIO_Init+0x3a0>
 8007b44:	48000800 	.word	0x48000800
 8007b48:	48000400 	.word	0x48000400
 8007b4c:	0f000003 	.word	0x0f000003
 8007b50:	f0000003 	.word	0xf0000003
 8007b54:	48001400 	.word	0x48001400
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop

08007b5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007b64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007b68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007b74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007b78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007b7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007b84:	e000      	b.n	8007b88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007b86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007b88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f9      	beq.n	8007b86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007b92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007b9c:	687b      	ldr	r3, [r7, #4]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
  int i=0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e009      	b.n	8007bd4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	60ba      	str	r2, [r7, #8]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff ffc7 	bl	8007b5c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	dbf1      	blt.n	8007bc0 <_write+0x16>
  return len;
 8007bdc:	687b      	ldr	r3, [r7, #4]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007bec:	f000 feeb 	bl	80089c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007bf0:	f000 f84c 	bl	8007c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007bf4:	f7ff fde0 	bl	80077b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007bf8:	f7ff fc66 	bl	80074c8 <MX_DMA_Init>
  MX_DAC1_Init();
 8007bfc:	f7ff fb16 	bl	800722c <MX_DAC1_Init>
  MX_ADC1_Init();
 8007c00:	f7ff f9ce 	bl	8006fa0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007c04:	f7ff fab0 	bl	8007168 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007c08:	f000 f8ec 	bl	8007de4 <MX_SPI3_Init>
  MX_RNG_Init();
 8007c0c:	f000 f8dc 	bl	8007dc8 <MX_RNG_Init>
  MX_TIM1_Init();
 8007c10:	f000 fb46 	bl	80082a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007c14:	f000 fc9c 	bl	8008550 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007c18:	f000 fd54 	bl	80086c4 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007c1c:	f000 fd00 	bl	8008620 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007c20:	f000 fc48 	bl	80084b4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007c24:	f000 fbf8 	bl	8008418 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007c28:	f7ff fb4a 	bl	80072c0 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007c2c:	f000 fd72 	bl	8008714 <MX_TIM17_Init>
  MX_TIM2_Init();
 8007c30:	f000 fba6 	bl	8008380 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007c34:	f7fe fb8e 	bl	8006354 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007c38:	4810      	ldr	r0, [pc, #64]	; (8007c7c <main+0x94>)
 8007c3a:	f005 fb2d 	bl	800d298 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c44:	480e      	ldr	r0, [pc, #56]	; (8007c80 <main+0x98>)
 8007c46:	f004 f9d7 	bl	800bff8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c50:	480b      	ldr	r0, [pc, #44]	; (8007c80 <main+0x98>)
 8007c52:	f004 f9d1 	bl	800bff8 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007c56:	480b      	ldr	r0, [pc, #44]	; (8007c84 <main+0x9c>)
 8007c58:	f005 fac8 	bl	800d1ec <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <main+0xa0>)
 8007c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c62:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007c64:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <main+0xa0>)
 8007c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c6a:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007c6c:	f7f9 f85a 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007c70:	f7f9 f866 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007c74:	f7fd f9d0 	bl	8005018 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007c78:	e7fe      	b.n	8007c78 <main+0x90>
 8007c7a:	bf00      	nop
 8007c7c:	20002b70 	.word	0x20002b70
 8007c80:	48000800 	.word	0x48000800
 8007c84:	20002c08 	.word	0x20002c08
 8007c88:	40001000 	.word	0x40001000

08007c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b0a8      	sub	sp, #160	; 0xa0
 8007c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c96:	2238      	movs	r2, #56	; 0x38
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f008 fbc4 	bl	8010428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ca0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	60da      	str	r2, [r3, #12]
 8007cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	2254      	movs	r2, #84	; 0x54
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f008 fbb6 	bl	8010428 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f004 f9b3 	bl	800c028 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007cc2:	2322      	movs	r3, #34	; 0x22
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ccc:	2340      	movs	r3, #64	; 0x40
 8007cce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007ce8:	232a      	movs	r3, #42	; 0x2a
 8007cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d04:	4618      	mov	r0, r3
 8007d06:	f004 fa33 	bl	800c170 <HAL_RCC_OscConfig>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007d10:	f000 f82a 	bl	8007d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007d14:	230f      	movs	r3, #15
 8007d16:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007d20:	2300      	movs	r3, #0
 8007d22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007d24:	2300      	movs	r3, #0
 8007d26:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f004 fd36 	bl	800c7a0 <HAL_RCC_ClockConfig>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007d3a:	f000 f815 	bl	8007d68 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007d3e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007d42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007d44:	2300      	movs	r3, #0
 8007d46:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d4e:	463b      	mov	r3, r7
 8007d50:	4618      	mov	r0, r3
 8007d52:	f004 ff15 	bl	800cb80 <HAL_RCCEx_PeriphCLKConfig>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007d5c:	f000 f804 	bl	8007d68 <Error_Handler>
  }
}
 8007d60:	bf00      	nop
 8007d62:	37a0      	adds	r7, #160	; 0xa0
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007d6c:	bf00      	nop
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f043 0204 	orr.w	r2, r3, #4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <LL_AHB2_GRP1_EnableClock>:
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007da0:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007da4:	4907      	ldr	r1, [pc, #28]	; (8007dc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4013      	ands	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007dcc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007dd0:	f7ff ffe2 	bl	8007d98 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007dd4:	4802      	ldr	r0, [pc, #8]	; (8007de0 <MX_RNG_Init+0x18>)
 8007dd6:	f7ff ffce 	bl	8007d76 <LL_RNG_Enable>

}
 8007dda:	bf00      	nop
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	50060800 	.word	0x50060800

08007de4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007de8:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <MX_SPI3_Init+0x78>)
 8007dec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007dee:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007df4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007df6:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007dfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007e02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e04:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e0a:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007e10:	4b11      	ldr	r3, [pc, #68]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007e18:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e1a:	2210      	movs	r2, #16
 8007e1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e32:	2207      	movs	r2, #7
 8007e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007e36:	4b08      	ldr	r3, [pc, #32]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e3e:	2208      	movs	r2, #8
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007e42:	4805      	ldr	r0, [pc, #20]	; (8007e58 <MX_SPI3_Init+0x74>)
 8007e44:	f005 f8e8 	bl	800d018 <HAL_SPI_Init>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007e4e:	f7ff ff8b 	bl	8007d68 <Error_Handler>
  }

}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20002a74 	.word	0x20002a74
 8007e5c:	40003c00 	.word	0x40003c00

08007e60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <HAL_SPI_MspInit+0x7c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d128      	bne.n	8007ed4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007e82:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e86:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	4a10      	ldr	r2, [pc, #64]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007ea0:	f043 0304 	orr.w	r3, r3, #4
 8007ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ea6:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <HAL_SPI_MspInit+0x80>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007eb2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007ec4:	2306      	movs	r3, #6
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ec8:	f107 0314 	add.w	r3, r7, #20
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <HAL_SPI_MspInit+0x84>)
 8007ed0:	f003 fe2e 	bl	800bb30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3728      	adds	r7, #40	; 0x28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40003c00 	.word	0x40003c00
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	48000800 	.word	0x48000800

08007ee8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ef6:	6093      	str	r3, [r2, #8]
}
 8007ef8:	bf00      	nop
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40007000 	.word	0x40007000

08007f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <HAL_MspInit+0x44>)
 8007f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f12:	4a0e      	ldr	r2, [pc, #56]	; (8007f4c <HAL_MspInit+0x44>)
 8007f14:	f043 0301 	orr.w	r3, r3, #1
 8007f18:	6613      	str	r3, [r2, #96]	; 0x60
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_MspInit+0x44>)
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <HAL_MspInit+0x44>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <HAL_MspInit+0x44>)
 8007f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6593      	str	r3, [r2, #88]	; 0x58
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <HAL_MspInit+0x44>)
 8007f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007f3e:	f7ff ffd3 	bl	8007ee8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40021000 	.word	0x40021000

08007f50 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007f5a:	695a      	ldr	r2, [r3, #20]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d101      	bne.n	8007f6a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40010400 	.word	0x40010400

08007f7c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007f84:	4a04      	ldr	r2, [pc, #16]	; (8007f98 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6153      	str	r3, [r2, #20]
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40010400 	.word	0x40010400

08007f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007fa0:	bf00      	nop
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <HardFault_Handler+0xc>)
 8007fb2:	f7f9 fabf 	bl	8001534 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007fb6:	e7fe      	b.n	8007fb6 <HardFault_Handler+0xa>
 8007fb8:	080153c0 	.word	0x080153c0

08007fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <MemManage_Handler+0xc>)
 8007fc2:	f7f9 fab7 	bl	8001534 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007fc6:	e7fe      	b.n	8007fc6 <MemManage_Handler+0xa>
 8007fc8:	080153cc 	.word	0x080153cc

08007fcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <BusFault_Handler+0xc>)
 8007fd2:	f7f9 faaf 	bl	8001534 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007fd6:	e7fe      	b.n	8007fd6 <BusFault_Handler+0xa>
 8007fd8:	080153dc 	.word	0x080153dc

08007fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <UsageFault_Handler+0xc>)
 8007fe2:	f7f9 faa7 	bl	8001534 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007fe6:	e7fe      	b.n	8007fe6 <UsageFault_Handler+0xa>
 8007fe8:	080153e8 	.word	0x080153e8

08007fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ff0:	bf00      	nop
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800800c:	bf00      	nop
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800801a:	f000 fd27 	bl	8008a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800801e:	bf00      	nop
 8008020:	bd80      	pop	{r7, pc}

08008022 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008026:	f7fd f8b5 	bl	8005194 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800802a:	2001      	movs	r0, #1
 800802c:	f7ff ff90 	bl	8007f50 <LL_EXTI_IsActiveFlag_0_31>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8008036:	2001      	movs	r0, #1
 8008038:	f7ff ffa0 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}

08008040 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8008044:	f7fd f8cc 	bl	80051e0 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008048:	2002      	movs	r0, #2
 800804a:	f7ff ff81 	bl	8007f50 <LL_EXTI_IsActiveFlag_0_31>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8008054:	2002      	movs	r0, #2
 8008056:	f7ff ff91 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}

0800805e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8008062:	f7fd f8e3 	bl	800522c <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8008066:	2004      	movs	r0, #4
 8008068:	f7ff ff72 	bl	8007f50 <LL_EXTI_IsActiveFlag_0_31>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8008072:	2004      	movs	r0, #4
 8008074:	f7ff ff82 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008078:	bf00      	nop
 800807a:	bd80      	pop	{r7, pc}

0800807c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008080:	4802      	ldr	r0, [pc, #8]	; (800808c <DMA1_Channel1_IRQHandler+0x10>)
 8008082:	f003 fc05 	bl	800b890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008086:	bf00      	nop
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20002968 	.word	0x20002968

08008090 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008094:	4802      	ldr	r0, [pc, #8]	; (80080a0 <DMA1_Channel2_IRQHandler+0x10>)
 8008096:	f003 fbfb 	bl	800b890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800809a:	bf00      	nop
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20002270 	.word	0x20002270

080080a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80080a8:	4802      	ldr	r0, [pc, #8]	; (80080b4 <DMA1_Channel3_IRQHandler+0x10>)
 80080aa:	f003 fbf1 	bl	800b890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80080ae:	bf00      	nop
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20002a14 	.word	0x20002a14

080080b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80080bc:	f7f8 fe5a 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80080c0:	f7fd f8da 	bl	8005278 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080c4:	4803      	ldr	r0, [pc, #12]	; (80080d4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80080c6:	f005 fbc9 	bl	800d85c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80080ca:	4803      	ldr	r0, [pc, #12]	; (80080d8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80080cc:	f005 fbc6 	bl	800d85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80080d0:	bf00      	nop
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20002c08 	.word	0x20002c08
 80080d8:	20002b24 	.word	0x20002b24

080080dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 80080e0:	f7fb ffac 	bl	800403c <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080e4:	4803      	ldr	r0, [pc, #12]	; (80080f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80080e6:	f005 fbb9 	bl	800d85c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80080ea:	4803      	ldr	r0, [pc, #12]	; (80080f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80080ec:	f005 fbb6 	bl	800d85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80080f0:	bf00      	nop
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20002c08 	.word	0x20002c08
 80080f8:	20002b70 	.word	0x20002b70

080080fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008100:	4802      	ldr	r0, [pc, #8]	; (800810c <TIM3_IRQHandler+0x10>)
 8008102:	f005 fbab 	bl	800d85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008106:	bf00      	nop
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	200022dc 	.word	0x200022dc

08008110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8008114:	f7fc ffee 	bl	80050f4 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008118:	f7fd f814 	bl	8005144 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800811c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008120:	f7ff ff16 	bl	8007f50 <LL_EXTI_IsActiveFlag_0_31>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800812a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800812e:	f7ff ff25 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8008132:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008136:	f7ff ff0b 	bl	8007f50 <LL_EXTI_IsActiveFlag_0_31>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008140:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008144:	f7ff ff1a 	bl	8007f7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008148:	bf00      	nop
 800814a:	bd80      	pop	{r7, pc}

0800814c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008150:	f7fc ff72 	bl	8005038 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008154:	4802      	ldr	r0, [pc, #8]	; (8008160 <TIM5_IRQHandler+0x14>)
 8008156:	f005 fb81 	bl	800d85c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800815a:	bf00      	nop
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20002bbc 	.word	0x20002bbc

08008164 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008168:	4802      	ldr	r0, [pc, #8]	; (8008174 <COMP1_2_3_IRQHandler+0x10>)
 800816a:	f002 fc33 	bl	800a9d4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800816e:	bf00      	nop
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200029c8 	.word	0x200029c8

08008178 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e00a      	b.n	80081a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800818a:	f3af 8000 	nop.w
 800818e:	4601      	mov	r1, r0
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	60ba      	str	r2, [r7, #8]
 8008196:	b2ca      	uxtb	r2, r1
 8008198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	3301      	adds	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	dbf0      	blt.n	800818a <_read+0x12>
	}

return len;
 80081a8:	687b      	ldr	r3, [r7, #4]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
	return -1;
 80081ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081da:	605a      	str	r2, [r3, #4]
	return 0;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <_isatty>:

int _isatty(int file)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
	return 1;
 80081f2:	2301      	movs	r3, #1
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	return 0;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008224:	4b11      	ldr	r3, [pc, #68]	; (800826c <_sbrk+0x50>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <_sbrk+0x16>
		heap_end = &end;
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <_sbrk+0x50>)
 800822e:	4a10      	ldr	r2, [pc, #64]	; (8008270 <_sbrk+0x54>)
 8008230:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008232:	4b0e      	ldr	r3, [pc, #56]	; (800826c <_sbrk+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <_sbrk+0x50>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4413      	add	r3, r2
 8008240:	466a      	mov	r2, sp
 8008242:	4293      	cmp	r3, r2
 8008244:	d907      	bls.n	8008256 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008246:	f008 f8c5 	bl	80103d4 <__errno>
 800824a:	4602      	mov	r2, r0
 800824c:	230c      	movs	r3, #12
 800824e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008254:	e006      	b.n	8008264 <_sbrk+0x48>
	}

	heap_end += incr;
 8008256:	4b05      	ldr	r3, [pc, #20]	; (800826c <_sbrk+0x50>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	4a03      	ldr	r2, [pc, #12]	; (800826c <_sbrk+0x50>)
 8008260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008262:	68fb      	ldr	r3, [r7, #12]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20002260 	.word	0x20002260
 8008270:	20002cf8 	.word	0x20002cf8

08008274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <SystemInit+0x28>)
 800827a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827e:	4a07      	ldr	r2, [pc, #28]	; (800829c <SystemInit+0x28>)
 8008280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <SystemInit+0x28>)
 800828a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800828e:	609a      	str	r2, [r3, #8]
#endif
}
 8008290:	bf00      	nop
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	e000ed00 	.word	0xe000ed00

080082a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b09a      	sub	sp, #104	; 0x68
 80082a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80082a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082aa:	2224      	movs	r2, #36	; 0x24
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f008 f8ba 	bl	8010428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	2234      	movs	r2, #52	; 0x34
 80082c4:	2100      	movs	r1, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f008 f8ae 	bl	8010428 <memset>

  htim1.Instance = TIM1;
 80082cc:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082ce:	4a2b      	ldr	r2, [pc, #172]	; (800837c <MX_TIM1_Init+0xdc>)
 80082d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80082d2:	4b29      	ldr	r3, [pc, #164]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80082d8:	4b27      	ldr	r3, [pc, #156]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082da:	2260      	movs	r2, #96	; 0x60
 80082dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80082de:	4b26      	ldr	r3, [pc, #152]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082e6:	4b24      	ldr	r3, [pc, #144]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80082ec:	4b22      	ldr	r3, [pc, #136]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80082f2:	4b21      	ldr	r3, [pc, #132]	; (8008378 <MX_TIM1_Init+0xd8>)
 80082f4:	2280      	movs	r2, #128	; 0x80
 80082f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80082f8:	2302      	movs	r3, #2
 80082fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80082fc:	2300      	movs	r3, #0
 80082fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008300:	2301      	movs	r3, #1
 8008302:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008304:	2300      	movs	r3, #0
 8008306:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800830c:	2300      	movs	r3, #0
 800830e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008310:	2301      	movs	r3, #1
 8008312:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008314:	2300      	movs	r3, #0
 8008316:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800831c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008320:	4619      	mov	r1, r3
 8008322:	4815      	ldr	r0, [pc, #84]	; (8008378 <MX_TIM1_Init+0xd8>)
 8008324:	f005 f9f4 	bl	800d710 <HAL_TIM_Encoder_Init>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800832e:	f7ff fd1b 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008332:	2320      	movs	r3, #32
 8008334:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800833a:	2300      	movs	r3, #0
 800833c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800833e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008342:	4619      	mov	r1, r3
 8008344:	480c      	ldr	r0, [pc, #48]	; (8008378 <MX_TIM1_Init+0xd8>)
 8008346:	f006 facf 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008350:	f7ff fd0a 	bl	8007d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008354:	2300      	movs	r3, #0
 8008356:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008358:	2300      	movs	r3, #0
 800835a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800835c:	1d3b      	adds	r3, r7, #4
 800835e:	4619      	mov	r1, r3
 8008360:	4805      	ldr	r0, [pc, #20]	; (8008378 <MX_TIM1_Init+0xd8>)
 8008362:	f006 fb57 	bl	800ea14 <HAL_TIMEx_ConfigBreakDeadTime>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800836c:	f7ff fcfc 	bl	8007d68 <Error_Handler>
  }

}
 8008370:	bf00      	nop
 8008372:	3768      	adds	r7, #104	; 0x68
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20002c08 	.word	0x20002c08
 800837c:	40012c00 	.word	0x40012c00

08008380 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	605a      	str	r2, [r3, #4]
 8008390:	609a      	str	r2, [r3, #8]
 8008392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008394:	1d3b      	adds	r3, r7, #4
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800839e:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <MX_TIM2_Init+0x94>)
 80083a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80083a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80083a6:	4b1b      	ldr	r3, [pc, #108]	; (8008414 <MX_TIM2_Init+0x94>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083ac:	4b19      	ldr	r3, [pc, #100]	; (8008414 <MX_TIM2_Init+0x94>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <MX_TIM2_Init+0x94>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083b8:	4b16      	ldr	r3, [pc, #88]	; (8008414 <MX_TIM2_Init+0x94>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80083be:	4b15      	ldr	r3, [pc, #84]	; (8008414 <MX_TIM2_Init+0x94>)
 80083c0:	2280      	movs	r2, #128	; 0x80
 80083c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80083c4:	4813      	ldr	r0, [pc, #76]	; (8008414 <MX_TIM2_Init+0x94>)
 80083c6:	f004 feb9 	bl	800d13c <HAL_TIM_Base_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80083d0:	f7ff fcca 	bl	8007d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80083da:	f107 0310 	add.w	r3, r7, #16
 80083de:	4619      	mov	r1, r3
 80083e0:	480c      	ldr	r0, [pc, #48]	; (8008414 <MX_TIM2_Init+0x94>)
 80083e2:	f005 fccb 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80083ec:	f7ff fcbc 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80083f0:	2320      	movs	r3, #32
 80083f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <MX_TIM2_Init+0x94>)
 80083fe:	f006 fa73 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008408:	f7ff fcae 	bl	8007d68 <Error_Handler>
  }

}
 800840c:	bf00      	nop
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20002c54 	.word	0x20002c54

08008418 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	605a      	str	r2, [r3, #4]
 8008428:	609a      	str	r2, [r3, #8]
 800842a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <MX_TIM3_Init+0x94>)
 8008438:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <MX_TIM3_Init+0x98>)
 800843a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <MX_TIM3_Init+0x94>)
 800843e:	2200      	movs	r2, #0
 8008440:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008442:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <MX_TIM3_Init+0x94>)
 8008444:	2210      	movs	r2, #16
 8008446:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008448:	4b18      	ldr	r3, [pc, #96]	; (80084ac <MX_TIM3_Init+0x94>)
 800844a:	2201      	movs	r2, #1
 800844c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800844e:	4b17      	ldr	r3, [pc, #92]	; (80084ac <MX_TIM3_Init+0x94>)
 8008450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008454:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <MX_TIM3_Init+0x94>)
 8008458:	2280      	movs	r2, #128	; 0x80
 800845a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800845c:	4813      	ldr	r0, [pc, #76]	; (80084ac <MX_TIM3_Init+0x94>)
 800845e:	f004 fe6d 	bl	800d13c <HAL_TIM_Base_Init>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008468:	f7ff fc7e 	bl	8007d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800846c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008472:	f107 0310 	add.w	r3, r7, #16
 8008476:	4619      	mov	r1, r3
 8008478:	480c      	ldr	r0, [pc, #48]	; (80084ac <MX_TIM3_Init+0x94>)
 800847a:	f005 fc7f 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008484:	f7ff fc70 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008488:	2320      	movs	r3, #32
 800848a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008490:	1d3b      	adds	r3, r7, #4
 8008492:	4619      	mov	r1, r3
 8008494:	4805      	ldr	r0, [pc, #20]	; (80084ac <MX_TIM3_Init+0x94>)
 8008496:	f006 fa27 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80084a0:	f7ff fc62 	bl	8007d68 <Error_Handler>
  }

}
 80084a4:	bf00      	nop
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	200022dc 	.word	0x200022dc
 80084b0:	40000400 	.word	0x40000400

080084b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084ba:	f107 0310 	add.w	r3, r7, #16
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	605a      	str	r2, [r3, #4]
 80084c4:	609a      	str	r2, [r3, #8]
 80084c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	605a      	str	r2, [r3, #4]
 80084d0:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <MX_TIM5_Init+0x94>)
 80084d4:	4a1d      	ldr	r2, [pc, #116]	; (800854c <MX_TIM5_Init+0x98>)
 80084d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80084d8:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <MX_TIM5_Init+0x94>)
 80084da:	2200      	movs	r2, #0
 80084dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <MX_TIM5_Init+0x94>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80084e4:	4b18      	ldr	r3, [pc, #96]	; (8008548 <MX_TIM5_Init+0x94>)
 80084e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084ec:	4b16      	ldr	r3, [pc, #88]	; (8008548 <MX_TIM5_Init+0x94>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <MX_TIM5_Init+0x94>)
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80084f8:	4813      	ldr	r0, [pc, #76]	; (8008548 <MX_TIM5_Init+0x94>)
 80084fa:	f004 fe1f 	bl	800d13c <HAL_TIM_Base_Init>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008504:	f7ff fc30 	bl	8007d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800850c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800850e:	f107 0310 	add.w	r3, r7, #16
 8008512:	4619      	mov	r1, r3
 8008514:	480c      	ldr	r0, [pc, #48]	; (8008548 <MX_TIM5_Init+0x94>)
 8008516:	f005 fc31 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008520:	f7ff fc22 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008524:	2300      	movs	r3, #0
 8008526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	4619      	mov	r1, r3
 8008530:	4805      	ldr	r0, [pc, #20]	; (8008548 <MX_TIM5_Init+0x94>)
 8008532:	f006 f9d9 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800853c:	f7ff fc14 	bl	8007d68 <Error_Handler>
  }

}
 8008540:	bf00      	nop
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20002bbc 	.word	0x20002bbc
 800854c:	40000c00 	.word	0x40000c00

08008550 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b094      	sub	sp, #80	; 0x50
 8008554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	605a      	str	r2, [r3, #4]
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008570:	463b      	mov	r3, r7
 8008572:	2234      	movs	r2, #52	; 0x34
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f007 ff56 	bl	8010428 <memset>

  htim8.Instance = TIM8;
 800857c:	4b26      	ldr	r3, [pc, #152]	; (8008618 <MX_TIM8_Init+0xc8>)
 800857e:	4a27      	ldr	r2, [pc, #156]	; (800861c <MX_TIM8_Init+0xcc>)
 8008580:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008582:	4b25      	ldr	r3, [pc, #148]	; (8008618 <MX_TIM8_Init+0xc8>)
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008588:	4b23      	ldr	r3, [pc, #140]	; (8008618 <MX_TIM8_Init+0xc8>)
 800858a:	2200      	movs	r2, #0
 800858c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800858e:	4b22      	ldr	r3, [pc, #136]	; (8008618 <MX_TIM8_Init+0xc8>)
 8008590:	2201      	movs	r2, #1
 8008592:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008594:	4b20      	ldr	r3, [pc, #128]	; (8008618 <MX_TIM8_Init+0xc8>)
 8008596:	2200      	movs	r2, #0
 8008598:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800859a:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <MX_TIM8_Init+0xc8>)
 800859c:	2200      	movs	r2, #0
 800859e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <MX_TIM8_Init+0xc8>)
 80085a2:	2280      	movs	r2, #128	; 0x80
 80085a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80085a6:	481c      	ldr	r0, [pc, #112]	; (8008618 <MX_TIM8_Init+0xc8>)
 80085a8:	f004 fdc8 	bl	800d13c <HAL_TIM_Base_Init>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80085b2:	f7ff fbd9 	bl	8007d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085ba:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80085bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085c0:	4619      	mov	r1, r3
 80085c2:	4815      	ldr	r0, [pc, #84]	; (8008618 <MX_TIM8_Init+0xc8>)
 80085c4:	f005 fbda 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80085ce:	f7ff fbcb 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80085d2:	2320      	movs	r3, #32
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80085de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80085e2:	4619      	mov	r1, r3
 80085e4:	480c      	ldr	r0, [pc, #48]	; (8008618 <MX_TIM8_Init+0xc8>)
 80085e6:	f006 f97f 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80085f0:	f7ff fbba 	bl	8007d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80085f8:	2300      	movs	r3, #0
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80085fc:	463b      	mov	r3, r7
 80085fe:	4619      	mov	r1, r3
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <MX_TIM8_Init+0xc8>)
 8008602:	f006 fa07 	bl	800ea14 <HAL_TIMEx_ConfigBreakDeadTime>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800860c:	f7ff fbac 	bl	8007d68 <Error_Handler>
  }

}
 8008610:	bf00      	nop
 8008612:	3750      	adds	r7, #80	; 0x50
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20002ad8 	.word	0x20002ad8
 800861c:	40013400 	.word	0x40013400

08008620 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008626:	f107 0310 	add.w	r3, r7, #16
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800863e:	4b1f      	ldr	r3, [pc, #124]	; (80086bc <MX_TIM15_Init+0x9c>)
 8008640:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <MX_TIM15_Init+0xa0>)
 8008642:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008644:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <MX_TIM15_Init+0x9c>)
 8008646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800864a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800864c:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <MX_TIM15_Init+0x9c>)
 800864e:	2200      	movs	r2, #0
 8008650:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008652:	4b1a      	ldr	r3, [pc, #104]	; (80086bc <MX_TIM15_Init+0x9c>)
 8008654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008658:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800865a:	4b18      	ldr	r3, [pc, #96]	; (80086bc <MX_TIM15_Init+0x9c>)
 800865c:	2200      	movs	r2, #0
 800865e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008660:	4b16      	ldr	r3, [pc, #88]	; (80086bc <MX_TIM15_Init+0x9c>)
 8008662:	2200      	movs	r2, #0
 8008664:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008666:	4b15      	ldr	r3, [pc, #84]	; (80086bc <MX_TIM15_Init+0x9c>)
 8008668:	2200      	movs	r2, #0
 800866a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800866c:	4813      	ldr	r0, [pc, #76]	; (80086bc <MX_TIM15_Init+0x9c>)
 800866e:	f004 fd65 	bl	800d13c <HAL_TIM_Base_Init>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008678:	f7ff fb76 	bl	8007d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800867c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008682:	f107 0310 	add.w	r3, r7, #16
 8008686:	4619      	mov	r1, r3
 8008688:	480c      	ldr	r0, [pc, #48]	; (80086bc <MX_TIM15_Init+0x9c>)
 800868a:	f005 fb77 	bl	800dd7c <HAL_TIM_ConfigClockSource>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008694:	f7ff fb68 	bl	8007d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008698:	2300      	movs	r3, #0
 800869a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80086a0:	1d3b      	adds	r3, r7, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4805      	ldr	r0, [pc, #20]	; (80086bc <MX_TIM15_Init+0x9c>)
 80086a6:	f006 f91f 	bl	800e8e8 <HAL_TIMEx_MasterConfigSynchronization>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80086b0:	f7ff fb5a 	bl	8007d68 <Error_Handler>
  }

}
 80086b4:	bf00      	nop
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20002b24 	.word	0x20002b24
 80086c0:	40014000 	.word	0x40014000

080086c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <MX_TIM16_Init+0x48>)
 80086ca:	4a11      	ldr	r2, [pc, #68]	; (8008710 <MX_TIM16_Init+0x4c>)
 80086cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <MX_TIM16_Init+0x48>)
 80086d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <MX_TIM16_Init+0x48>)
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <MX_TIM16_Init+0x48>)
 80086de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <MX_TIM16_Init+0x48>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80086ea:	4b08      	ldr	r3, [pc, #32]	; (800870c <MX_TIM16_Init+0x48>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <MX_TIM16_Init+0x48>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80086f6:	4805      	ldr	r0, [pc, #20]	; (800870c <MX_TIM16_Init+0x48>)
 80086f8:	f004 fd20 	bl	800d13c <HAL_TIM_Base_Init>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008702:	f7ff fb31 	bl	8007d68 <Error_Handler>
  }

}
 8008706:	bf00      	nop
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20002ca0 	.word	0x20002ca0
 8008710:	40014400 	.word	0x40014400

08008714 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008718:	4b10      	ldr	r3, [pc, #64]	; (800875c <MX_TIM17_Init+0x48>)
 800871a:	4a11      	ldr	r2, [pc, #68]	; (8008760 <MX_TIM17_Init+0x4c>)
 800871c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 800871e:	4b0f      	ldr	r3, [pc, #60]	; (800875c <MX_TIM17_Init+0x48>)
 8008720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008724:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008726:	4b0d      	ldr	r3, [pc, #52]	; (800875c <MX_TIM17_Init+0x48>)
 8008728:	2200      	movs	r2, #0
 800872a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <MX_TIM17_Init+0x48>)
 800872e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008732:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008734:	4b09      	ldr	r3, [pc, #36]	; (800875c <MX_TIM17_Init+0x48>)
 8008736:	2200      	movs	r2, #0
 8008738:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <MX_TIM17_Init+0x48>)
 800873c:	2200      	movs	r2, #0
 800873e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <MX_TIM17_Init+0x48>)
 8008742:	2200      	movs	r2, #0
 8008744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008746:	4805      	ldr	r0, [pc, #20]	; (800875c <MX_TIM17_Init+0x48>)
 8008748:	f004 fcf8 	bl	800d13c <HAL_TIM_Base_Init>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008752:	f7ff fb09 	bl	8007d68 <Error_Handler>
  }

}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20002b70 	.word	0x20002b70
 8008760:	40014800 	.word	0x40014800

08008764 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	; 0x28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d137      	bne.n	80087f6 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008786:	4b1f      	ldr	r3, [pc, #124]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878a:	4a1e      	ldr	r2, [pc, #120]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 800878c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008790:	6613      	str	r3, [r2, #96]	; 0x60
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800879e:	4b19      	ldr	r3, [pc, #100]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 80087a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a2:	4a18      	ldr	r2, [pc, #96]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 80087a4:	f043 0304 	orr.w	r3, r3, #4
 80087a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087aa:	4b16      	ldr	r3, [pc, #88]	; (8008804 <HAL_TIM_Encoder_MspInit+0xa0>)
 80087ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087b6:	2303      	movs	r3, #3
 80087b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ba:	2302      	movs	r3, #2
 80087bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087c2:	2300      	movs	r3, #0
 80087c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80087c6:	2302      	movs	r3, #2
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087ca:	f107 0314 	add.w	r3, r7, #20
 80087ce:	4619      	mov	r1, r3
 80087d0:	480d      	ldr	r0, [pc, #52]	; (8008808 <HAL_TIM_Encoder_MspInit+0xa4>)
 80087d2:	f003 f9ad 	bl	800bb30 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	2018      	movs	r0, #24
 80087dc:	f002 fa7b 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80087e0:	2018      	movs	r0, #24
 80087e2:	f002 fa92 	bl	800ad0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80087e6:	2200      	movs	r2, #0
 80087e8:	2101      	movs	r1, #1
 80087ea:	201a      	movs	r0, #26
 80087ec:	f002 fa73 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80087f0:	201a      	movs	r0, #26
 80087f2:	f002 fa8a 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80087f6:	bf00      	nop
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	40012c00 	.word	0x40012c00
 8008804:	40021000 	.word	0x40021000
 8008808:	48000800 	.word	0x48000800

0800880c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881c:	d10c      	bne.n	8008838 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800881e:	4b4e      	ldr	r3, [pc, #312]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	4a4d      	ldr	r2, [pc, #308]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	6593      	str	r3, [r2, #88]	; 0x58
 800882a:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008836:	e08a      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a47      	ldr	r2, [pc, #284]	; (800895c <HAL_TIM_Base_MspInit+0x150>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d114      	bne.n	800886c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008842:	4b45      	ldr	r3, [pc, #276]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008846:	4a44      	ldr	r2, [pc, #272]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008848:	f043 0302 	orr.w	r3, r3, #2
 800884c:	6593      	str	r3, [r2, #88]	; 0x58
 800884e:	4b42      	ldr	r3, [pc, #264]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	623b      	str	r3, [r7, #32]
 8008858:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	201d      	movs	r0, #29
 8008860:	f002 fa39 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008864:	201d      	movs	r0, #29
 8008866:	f002 fa50 	bl	800ad0a <HAL_NVIC_EnableIRQ>
}
 800886a:	e070      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM5)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a3b      	ldr	r2, [pc, #236]	; (8008960 <HAL_TIM_Base_MspInit+0x154>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d114      	bne.n	80088a0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008876:	4b38      	ldr	r3, [pc, #224]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887a:	4a37      	ldr	r2, [pc, #220]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	6593      	str	r3, [r2, #88]	; 0x58
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 800888e:	2200      	movs	r2, #0
 8008890:	2102      	movs	r1, #2
 8008892:	2032      	movs	r0, #50	; 0x32
 8008894:	f002 fa1f 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008898:	2032      	movs	r0, #50	; 0x32
 800889a:	f002 fa36 	bl	800ad0a <HAL_NVIC_EnableIRQ>
}
 800889e:	e056      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM8)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a2f      	ldr	r2, [pc, #188]	; (8008964 <HAL_TIM_Base_MspInit+0x158>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d10c      	bne.n	80088c4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80088aa:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ae:	4a2a      	ldr	r2, [pc, #168]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088b4:	6613      	str	r3, [r2, #96]	; 0x60
 80088b6:	4b28      	ldr	r3, [pc, #160]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088be:	61bb      	str	r3, [r7, #24]
 80088c0:	69bb      	ldr	r3, [r7, #24]
}
 80088c2:	e044      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM15)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a27      	ldr	r2, [pc, #156]	; (8008968 <HAL_TIM_Base_MspInit+0x15c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d114      	bne.n	80088f8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80088ce:	4b22      	ldr	r3, [pc, #136]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088d2:	4a21      	ldr	r2, [pc, #132]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d8:	6613      	str	r3, [r2, #96]	; 0x60
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 80088dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	2018      	movs	r0, #24
 80088ec:	f002 f9f3 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80088f0:	2018      	movs	r0, #24
 80088f2:	f002 fa0a 	bl	800ad0a <HAL_NVIC_EnableIRQ>
}
 80088f6:	e02a      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM16)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <HAL_TIM_Base_MspInit+0x160>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d10c      	bne.n	800891c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	6613      	str	r3, [r2, #96]	; 0x60
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
}
 800891a:	e018      	b.n	800894e <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM17)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a13      	ldr	r2, [pc, #76]	; (8008970 <HAL_TIM_Base_MspInit+0x164>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d113      	bne.n	800894e <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892a:	4a0b      	ldr	r2, [pc, #44]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 800892c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008930:	6613      	str	r3, [r2, #96]	; 0x60
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <HAL_TIM_Base_MspInit+0x14c>)
 8008934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	2101      	movs	r1, #1
 8008942:	201a      	movs	r0, #26
 8008944:	f002 f9c7 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008948:	201a      	movs	r0, #26
 800894a:	f002 f9de 	bl	800ad0a <HAL_NVIC_EnableIRQ>
}
 800894e:	bf00      	nop
 8008950:	3728      	adds	r7, #40	; 0x28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40021000 	.word	0x40021000
 800895c:	40000400 	.word	0x40000400
 8008960:	40000c00 	.word	0x40000c00
 8008964:	40013400 	.word	0x40013400
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800

08008974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008974:	480d      	ldr	r0, [pc, #52]	; (80089ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008976:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008978:	480d      	ldr	r0, [pc, #52]	; (80089b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800897a:	490e      	ldr	r1, [pc, #56]	; (80089b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800897c:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <LoopForever+0xe>)
  movs r3, #0
 800897e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008980:	e002      	b.n	8008988 <LoopCopyDataInit>

08008982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008986:	3304      	adds	r3, #4

08008988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800898a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800898c:	d3f9      	bcc.n	8008982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800898e:	4a0b      	ldr	r2, [pc, #44]	; (80089bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008990:	4c0b      	ldr	r4, [pc, #44]	; (80089c0 <LoopForever+0x16>)
  movs r3, #0
 8008992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008994:	e001      	b.n	800899a <LoopFillZerobss>

08008996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008998:	3204      	adds	r2, #4

0800899a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800899a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800899c:	d3fb      	bcc.n	8008996 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800899e:	f7ff fc69 	bl	8008274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80089a2:	f007 fd1d 	bl	80103e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80089a6:	f7ff f91f 	bl	8007be8 <main>

080089aa <LoopForever>:

LoopForever:
    b LoopForever
 80089aa:	e7fe      	b.n	80089aa <LoopForever>
  ldr   r0, =_estack
 80089ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80089b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089b4:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 80089b8:	08015958 	.word	0x08015958
  ldr r2, =_sbss
 80089bc:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 80089c0:	20002cf4 	.word	0x20002cf4

080089c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80089c4:	e7fe      	b.n	80089c4 <ADC1_2_IRQHandler>

080089c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089d0:	2003      	movs	r0, #3
 80089d2:	f002 f975 	bl	800acc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80089d6:	2000      	movs	r0, #0
 80089d8:	f000 f80e 	bl	80089f8 <HAL_InitTick>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	71fb      	strb	r3, [r7, #7]
 80089e6:	e001      	b.n	80089ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80089e8:	f7ff fa8e 	bl	8007f08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80089ec:	79fb      	ldrb	r3, [r7, #7]

}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008a04:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <HAL_InitTick+0x68>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d022      	beq.n	8008a52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <HAL_InitTick+0x6c>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <HAL_InitTick+0x68>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 f98e 	bl	800ad42 <HAL_SYSTICK_Config>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10f      	bne.n	8008a4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d809      	bhi.n	8008a46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a32:	2200      	movs	r2, #0
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a3a:	f002 f94c 	bl	800acd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008a3e:	4a0a      	ldr	r2, [pc, #40]	; (8008a68 <HAL_InitTick+0x70>)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	e007      	b.n	8008a56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
 8008a4a:	e004      	b.n	8008a56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
 8008a50:	e001      	b.n	8008a56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000c3c 	.word	0x20000c3c
 8008a64:	20000c34 	.word	0x20000c34
 8008a68:	20000c38 	.word	0x20000c38

08008a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <HAL_IncTick+0x1c>)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <HAL_IncTick+0x20>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4413      	add	r3, r2
 8008a7a:	4a03      	ldr	r2, [pc, #12]	; (8008a88 <HAL_IncTick+0x1c>)
 8008a7c:	6013      	str	r3, [r2, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	20002cec 	.word	0x20002cec
 8008a8c:	20000c3c 	.word	0x20000c3c

08008a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  return uwTick;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <HAL_GetTick+0x14>)
 8008a96:	681b      	ldr	r3, [r3, #0]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20002cec 	.word	0x20002cec

08008aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ab0:	f7ff ffee 	bl	8008a90 <HAL_GetTick>
 8008ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac0:	d004      	beq.n	8008acc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <HAL_Delay+0x40>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008acc:	bf00      	nop
 8008ace:	f7ff ffdf 	bl	8008a90 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d8f7      	bhi.n	8008ace <HAL_Delay+0x26>
  {
  }
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000c3c 	.word	0x20000c3c

08008aec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	609a      	str	r2, [r3, #8]
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	609a      	str	r2, [r3, #8]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008b54:	b490      	push	{r4, r7}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3360      	adds	r3, #96	; 0x60
 8008b66:	461a      	mov	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008b70:	6822      	ldr	r2, [r4, #0]
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <LL_ADC_SetOffset+0x40>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b86:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc90      	pop	{r4, r7}
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	03fff000 	.word	0x03fff000

08008b98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008b98:	b490      	push	{r4, r7}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3360      	adds	r3, #96	; 0x60
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc90      	pop	{r4, r7}
 8008bbe:	4770      	bx	lr

08008bc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008bc0:	b490      	push	{r4, r7}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3360      	adds	r3, #96	; 0x60
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc90      	pop	{r4, r7}
 8008bee:	4770      	bx	lr

08008bf0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008bf0:	b490      	push	{r4, r7}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3360      	adds	r3, #96	; 0x60
 8008c00:	461a      	mov	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc90      	pop	{r4, r7}
 8008c1e:	4770      	bx	lr

08008c20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008c20:	b490      	push	{r4, r7}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3360      	adds	r3, #96	; 0x60
 8008c30:	461a      	mov	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc90      	pop	{r4, r7}
 8008c4e:	4770      	bx	lr

08008c50 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	615a      	str	r2, [r3, #20]
}
 8008c6a:	bf00      	nop
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008c9c:	b490      	push	{r4, r7}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3330      	adds	r3, #48	; 0x30
 8008cac:	461a      	mov	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	0a1b      	lsrs	r3, r3, #8
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	f003 030c 	and.w	r3, r3, #12
 8008cb8:	4413      	add	r3, r2
 8008cba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	211f      	movs	r1, #31
 8008cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cca:	43db      	mvns	r3, r3
 8008ccc:	401a      	ands	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	0e9b      	lsrs	r3, r3, #26
 8008cd2:	f003 011f 	and.w	r1, r3, #31
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 031f 	and.w	r3, r3, #31
 8008cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bc90      	pop	{r4, r7}
 8008cec:	4770      	bx	lr

08008cee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008cee:	b490      	push	{r4, r7}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3314      	adds	r3, #20
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	0e5b      	lsrs	r3, r3, #25
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	4413      	add	r3, r2
 8008d0c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	0d1b      	lsrs	r3, r3, #20
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	2107      	movs	r1, #7
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	401a      	ands	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	0d1b      	lsrs	r3, r3, #20
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d30:	4313      	orrs	r3, r2
 8008d32:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc90      	pop	{r4, r7}
 8008d3c:	4770      	bx	lr
	...

08008d40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	401a      	ands	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f003 0318 	and.w	r3, r3, #24
 8008d62:	4908      	ldr	r1, [pc, #32]	; (8008d84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008d64:	40d9      	lsrs	r1, r3
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	400b      	ands	r3, r1
 8008d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	0007ffff 	.word	0x0007ffff

08008d88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 031f 	and.w	r3, r3, #31
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6093      	str	r3, [r2, #8]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ddc:	d101      	bne.n	8008de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e2c:	d101      	bne.n	8008e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e000      	b.n	8008e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e54:	f043 0201 	orr.w	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e7c:	f043 0202 	orr.w	r2, r3, #2
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <LL_ADC_IsEnabled+0x18>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e000      	b.n	8008eaa <LL_ADC_IsEnabled+0x1a>
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d101      	bne.n	8008ece <LL_ADC_IsDisableOngoing+0x18>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <LL_ADC_IsDisableOngoing+0x1a>
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ef0:	f043 0204 	orr.w	r2, r3, #4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f18:	f043 0210 	orr.w	r2, r3, #16
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d101      	bne.n	8008f44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f66:	f043 0220 	orr.w	r2, r3, #32
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d101      	bne.n	8008f92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e1ad      	b.n	8009316 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe f861 	bl	8007090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fef1 	bl	8008dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fed7 	bl	8008da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff ff0c 	bl	8008e18 <LL_ADC_IsInternalRegulatorEnabled>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d113      	bne.n	800902e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fef0 	bl	8008df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009010:	4b9e      	ldr	r3, [pc, #632]	; (800928c <HAL_ADC_Init+0x2ec>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	099b      	lsrs	r3, r3, #6
 8009016:	4a9e      	ldr	r2, [pc, #632]	; (8009290 <HAL_ADC_Init+0x2f0>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	099b      	lsrs	r3, r3, #6
 800901e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009020:	e002      	b.n	8009028 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	3b01      	subs	r3, #1
 8009026:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f9      	bne.n	8009022 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fef0 	bl	8008e18 <LL_ADC_IsInternalRegulatorEnabled>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10d      	bne.n	800905a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009042:	f043 0210 	orr.w	r2, r3, #16
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904e:	f043 0201 	orr.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff ff64 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 8009064:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b00      	cmp	r3, #0
 8009070:	f040 8148 	bne.w	8009304 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 8144 	bne.w	8009304 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009080:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009084:	f043 0202 	orr.w	r2, r3, #2
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fefd 	bl	8008e90 <LL_ADC_IsEnabled>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d141      	bne.n	8009120 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a4:	d004      	beq.n	80090b0 <HAL_ADC_Init+0x110>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a7a      	ldr	r2, [pc, #488]	; (8009294 <HAL_ADC_Init+0x2f4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10f      	bne.n	80090d0 <HAL_ADC_Init+0x130>
 80090b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80090b4:	f7ff feec 	bl	8008e90 <LL_ADC_IsEnabled>
 80090b8:	4604      	mov	r4, r0
 80090ba:	4876      	ldr	r0, [pc, #472]	; (8009294 <HAL_ADC_Init+0x2f4>)
 80090bc:	f7ff fee8 	bl	8008e90 <LL_ADC_IsEnabled>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4323      	orrs	r3, r4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bf0c      	ite	eq
 80090c8:	2301      	moveq	r3, #1
 80090ca:	2300      	movne	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	e012      	b.n	80090f6 <HAL_ADC_Init+0x156>
 80090d0:	4871      	ldr	r0, [pc, #452]	; (8009298 <HAL_ADC_Init+0x2f8>)
 80090d2:	f7ff fedd 	bl	8008e90 <LL_ADC_IsEnabled>
 80090d6:	4604      	mov	r4, r0
 80090d8:	4870      	ldr	r0, [pc, #448]	; (800929c <HAL_ADC_Init+0x2fc>)
 80090da:	f7ff fed9 	bl	8008e90 <LL_ADC_IsEnabled>
 80090de:	4603      	mov	r3, r0
 80090e0:	431c      	orrs	r4, r3
 80090e2:	486f      	ldr	r0, [pc, #444]	; (80092a0 <HAL_ADC_Init+0x300>)
 80090e4:	f7ff fed4 	bl	8008e90 <LL_ADC_IsEnabled>
 80090e8:	4603      	mov	r3, r0
 80090ea:	4323      	orrs	r3, r4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf0c      	ite	eq
 80090f0:	2301      	moveq	r3, #1
 80090f2:	2300      	movne	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d012      	beq.n	8009120 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009102:	d004      	beq.n	800910e <HAL_ADC_Init+0x16e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a62      	ldr	r2, [pc, #392]	; (8009294 <HAL_ADC_Init+0x2f4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d101      	bne.n	8009112 <HAL_ADC_Init+0x172>
 800910e:	4a65      	ldr	r2, [pc, #404]	; (80092a4 <HAL_ADC_Init+0x304>)
 8009110:	e000      	b.n	8009114 <HAL_ADC_Init+0x174>
 8009112:	4a65      	ldr	r2, [pc, #404]	; (80092a8 <HAL_ADC_Init+0x308>)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7ff fce6 	bl	8008aec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	7f5b      	ldrb	r3, [r3, #29]
 8009124:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800912a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009130:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009136:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800913e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009140:	4313      	orrs	r3, r2
 8009142:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800914a:	2b01      	cmp	r3, #1
 800914c:	d106      	bne.n	800915c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	3b01      	subs	r3, #1
 8009154:	045b      	lsls	r3, r3, #17
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4313      	orrs	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4313      	orrs	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	4b4b      	ldr	r3, [pc, #300]	; (80092ac <HAL_ADC_Init+0x30c>)
 8009180:	4013      	ands	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	69b9      	ldr	r1, [r7, #24]
 8009188:	430b      	orrs	r3, r1
 800918a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fec0 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 80091ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fee1 	bl	8008f7a <LL_ADC_INJ_IsConversionOngoing>
 80091b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d17f      	bne.n	80092c0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d17c      	bne.n	80092c0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80091ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091d2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80091d4:	4313      	orrs	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091e2:	f023 0302 	bic.w	r3, r3, #2
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6812      	ldr	r2, [r2, #0]
 80091ea:	69b9      	ldr	r1, [r7, #24]
 80091ec:	430b      	orrs	r3, r1
 80091ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d017      	beq.n	8009228 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009206:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009210:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6911      	ldr	r1, [r2, #16]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	430b      	orrs	r3, r1
 8009222:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009226:	e013      	b.n	8009250 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009236:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6812      	ldr	r2, [r2, #0]
 8009244:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800924c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009256:	2b01      	cmp	r3, #1
 8009258:	d12a      	bne.n	80092b0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009264:	f023 0304 	bic.w	r3, r3, #4
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009270:	4311      	orrs	r1, r2
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009276:	4311      	orrs	r1, r2
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800927c:	430a      	orrs	r2, r1
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	611a      	str	r2, [r3, #16]
 800928a:	e019      	b.n	80092c0 <HAL_ADC_Init+0x320>
 800928c:	20000c34 	.word	0x20000c34
 8009290:	053e2d63 	.word	0x053e2d63
 8009294:	50000100 	.word	0x50000100
 8009298:	50000400 	.word	0x50000400
 800929c:	50000500 	.word	0x50000500
 80092a0:	50000600 	.word	0x50000600
 80092a4:	50000300 	.word	0x50000300
 80092a8:	50000700 	.word	0x50000700
 80092ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0201 	bic.w	r2, r2, #1
 80092be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d10c      	bne.n	80092e2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	f023 010f 	bic.w	r1, r3, #15
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	1e5a      	subs	r2, r3, #1
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
 80092e0:	e007      	b.n	80092f2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 020f 	bic.w	r2, r2, #15
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	f043 0201 	orr.w	r2, r3, #1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	65da      	str	r2, [r3, #92]	; 0x5c
 8009302:	e007      	b.n	8009314 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009308:	f043 0210 	orr.w	r2, r3, #16
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009314:	7ffb      	ldrb	r3, [r7, #31]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3724      	adds	r7, #36	; 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd90      	pop	{r4, r7, pc}
 800931e:	bf00      	nop

08009320 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009334:	d004      	beq.n	8009340 <HAL_ADC_Start_DMA+0x20>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a58      	ldr	r2, [pc, #352]	; (800949c <HAL_ADC_Start_DMA+0x17c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d101      	bne.n	8009344 <HAL_ADC_Start_DMA+0x24>
 8009340:	4b57      	ldr	r3, [pc, #348]	; (80094a0 <HAL_ADC_Start_DMA+0x180>)
 8009342:	e000      	b.n	8009346 <HAL_ADC_Start_DMA+0x26>
 8009344:	4b57      	ldr	r3, [pc, #348]	; (80094a4 <HAL_ADC_Start_DMA+0x184>)
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fd1e 	bl	8008d88 <LL_ADC_GetMultimode>
 800934c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fdea 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	f040 8096 	bne.w	800948c <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <HAL_ADC_Start_DMA+0x4e>
 800936a:	2302      	movs	r3, #2
 800936c:	e091      	b.n	8009492 <HAL_ADC_Start_DMA+0x172>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b05      	cmp	r3, #5
 8009380:	d002      	beq.n	8009388 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b09      	cmp	r3, #9
 8009386:	d17a      	bne.n	800947e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fd71 	bl	8009e70 <ADC_Enable>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d16d      	bne.n	8009474 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a3a      	ldr	r2, [pc, #232]	; (800949c <HAL_ADC_Start_DMA+0x17c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d009      	beq.n	80093ca <HAL_ADC_Start_DMA+0xaa>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3b      	ldr	r2, [pc, #236]	; (80094a8 <HAL_ADC_Start_DMA+0x188>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d002      	beq.n	80093c6 <HAL_ADC_Start_DMA+0xa6>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	e003      	b.n	80093ce <HAL_ADC_Start_DMA+0xae>
 80093c6:	4b39      	ldr	r3, [pc, #228]	; (80094ac <HAL_ADC_Start_DMA+0x18c>)
 80093c8:	e001      	b.n	80093ce <HAL_ADC_Start_DMA+0xae>
 80093ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d002      	beq.n	80093dc <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d006      	beq.n	8009402 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f8:	f023 0206 	bic.w	r2, r3, #6
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	661a      	str	r2, [r3, #96]	; 0x60
 8009400:	e002      	b.n	8009408 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940c:	4a28      	ldr	r2, [pc, #160]	; (80094b0 <HAL_ADC_Start_DMA+0x190>)
 800940e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009414:	4a27      	ldr	r2, [pc, #156]	; (80094b4 <HAL_ADC_Start_DMA+0x194>)
 8009416:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	4a26      	ldr	r2, [pc, #152]	; (80094b8 <HAL_ADC_Start_DMA+0x198>)
 800941e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	221c      	movs	r2, #28
 8009426:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0210 	orr.w	r2, r2, #16
 800943e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3340      	adds	r3, #64	; 0x40
 800945a:	4619      	mov	r1, r3
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f002 f942 	bl	800b6e8 <HAL_DMA_Start_IT>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fd35 	bl	8008edc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009472:	e00d      	b.n	8009490 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800947c:	e008      	b.n	8009490 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800948a:	e001      	b.n	8009490 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800948c:	2302      	movs	r3, #2
 800948e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	50000100 	.word	0x50000100
 80094a0:	50000300 	.word	0x50000300
 80094a4:	50000700 	.word	0x50000700
 80094a8:	50000500 	.word	0x50000500
 80094ac:	50000400 	.word	0x50000400
 80094b0:	08009fd5 	.word	0x08009fd5
 80094b4:	0800a0ad 	.word	0x0800a0ad
 80094b8:	0800a0c9 	.word	0x0800a0c9

080094bc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_ADC_Stop_DMA+0x16>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e051      	b.n	8009576 <HAL_ADC_Stop_DMA+0xba>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80094da:	2103      	movs	r1, #3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fc13 	bl	8009d08 <ADC_ConversionStop>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d13f      	bne.n	800956c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0201 	bic.w	r2, r2, #1
 80094fa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009500:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b02      	cmp	r3, #2
 8009508:	d10f      	bne.n	800952a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	4618      	mov	r0, r3
 8009510:	f002 f965 	bl	800b7de <HAL_DMA_Abort>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0210 	bic.w	r2, r2, #16
 8009538:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fcef 	bl	8009f24 <ADC_Disable>
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]
 800954a:	e002      	b.n	8009552 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fce9 	bl	8009f24 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d109      	bne.n	800956c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	f043 0201 	orr.w	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
	...

080095a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b0a6      	sub	sp, #152	; 0x98
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_ADC_ConfigChannel+0x22>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e38e      	b.n	8009ce8 <HAL_ADC_ConfigChannel+0x740>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fca8 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 836f 	bne.w	8009cc2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	6859      	ldr	r1, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	f7ff fb53 	bl	8008c9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fc96 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 8009600:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fcb6 	bl	8008f7a <LL_ADC_INJ_IsConversionOngoing>
 800960e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 817b 	bne.w	8009912 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800961c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009620:	2b00      	cmp	r3, #0
 8009622:	f040 8176 	bne.w	8009912 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800962e:	d10f      	bne.n	8009650 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	4619      	mov	r1, r3
 800963c:	f7ff fb57 	bl	8008cee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fb01 	bl	8008c50 <LL_ADC_SetSamplingTimeCommonConfig>
 800964e:	e00e      	b.n	800966e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	6819      	ldr	r1, [r3, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	461a      	mov	r2, r3
 800965e:	f7ff fb46 	bl	8008cee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff faf1 	bl	8008c50 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b04      	cmp	r3, #4
 800968e:	d022      	beq.n	80096d6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6818      	ldr	r0, [r3, #0]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	6919      	ldr	r1, [r3, #16]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a0:	f7ff fa58 	bl	8008b54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	6919      	ldr	r1, [r3, #16]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	461a      	mov	r2, r3
 80096b2:	f7ff fa9d 	bl	8008bf0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6919      	ldr	r1, [r3, #16]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	7f1b      	ldrb	r3, [r3, #28]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d102      	bne.n	80096cc <HAL_ADC_ConfigChannel+0x124>
 80096c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ca:	e000      	b.n	80096ce <HAL_ADC_ConfigChannel+0x126>
 80096cc:	2300      	movs	r3, #0
 80096ce:	461a      	mov	r2, r3
 80096d0:	f7ff faa6 	bl	8008c20 <LL_ADC_SetOffsetSaturation>
 80096d4:	e11d      	b.n	8009912 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff fa5b 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 80096e2:	4603      	mov	r3, r0
 80096e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <HAL_ADC_ConfigChannel+0x15a>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fa50 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 80096f8:	4603      	mov	r3, r0
 80096fa:	0e9b      	lsrs	r3, r3, #26
 80096fc:	f003 021f 	and.w	r2, r3, #31
 8009700:	e012      	b.n	8009728 <HAL_ADC_ConfigChannel+0x180>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2100      	movs	r1, #0
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fa45 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 800970e:	4603      	mov	r3, r0
 8009710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009718:	fa93 f3a3 	rbit	r3, r3
 800971c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800971e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009720:	fab3 f383 	clz	r3, r3
 8009724:	b2db      	uxtb	r3, r3
 8009726:	461a      	mov	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <HAL_ADC_ConfigChannel+0x198>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	0e9b      	lsrs	r3, r3, #26
 800973a:	f003 031f 	and.w	r3, r3, #31
 800973e:	e00a      	b.n	8009756 <HAL_ADC_ConfigChannel+0x1ae>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009748:	fa93 f3a3 	rbit	r3, r3
 800974c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800974e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009750:	fab3 f383 	clz	r3, r3
 8009754:	b2db      	uxtb	r3, r3
 8009756:	429a      	cmp	r2, r3
 8009758:	d106      	bne.n	8009768 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fa2c 	bl	8008bc0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2101      	movs	r1, #1
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff fa12 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 8009774:	4603      	mov	r3, r0
 8009776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <HAL_ADC_ConfigChannel+0x1ec>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2101      	movs	r1, #1
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fa07 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 800978a:	4603      	mov	r3, r0
 800978c:	0e9b      	lsrs	r3, r3, #26
 800978e:	f003 021f 	and.w	r2, r3, #31
 8009792:	e010      	b.n	80097b6 <HAL_ADC_ConfigChannel+0x20e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2101      	movs	r1, #1
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff f9fc 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 80097a0:	4603      	mov	r3, r0
 80097a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097a6:	fa93 f3a3 	rbit	r3, r3
 80097aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80097ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ae:	fab3 f383 	clz	r3, r3
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d105      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x226>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	0e9b      	lsrs	r3, r3, #26
 80097c8:	f003 031f 	and.w	r3, r3, #31
 80097cc:	e00a      	b.n	80097e4 <HAL_ADC_ConfigChannel+0x23c>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097d6:	fa93 f3a3 	rbit	r3, r3
 80097da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80097dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097de:	fab3 f383 	clz	r3, r3
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d106      	bne.n	80097f6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2200      	movs	r2, #0
 80097ee:	2101      	movs	r1, #1
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff f9e5 	bl	8008bc0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2102      	movs	r1, #2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff f9cb 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 8009802:	4603      	mov	r3, r0
 8009804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <HAL_ADC_ConfigChannel+0x27a>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2102      	movs	r1, #2
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff f9c0 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 8009818:	4603      	mov	r3, r0
 800981a:	0e9b      	lsrs	r3, r3, #26
 800981c:	f003 021f 	and.w	r2, r3, #31
 8009820:	e010      	b.n	8009844 <HAL_ADC_ConfigChannel+0x29c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2102      	movs	r1, #2
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff f9b5 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 800982e:	4603      	mov	r3, r0
 8009830:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009834:	fa93 f3a3 	rbit	r3, r3
 8009838:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800983a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800983c:	fab3 f383 	clz	r3, r3
 8009840:	b2db      	uxtb	r3, r3
 8009842:	461a      	mov	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800984c:	2b00      	cmp	r3, #0
 800984e:	d105      	bne.n	800985c <HAL_ADC_ConfigChannel+0x2b4>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	0e9b      	lsrs	r3, r3, #26
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	e00a      	b.n	8009872 <HAL_ADC_ConfigChannel+0x2ca>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009864:	fa93 f3a3 	rbit	r3, r3
 8009868:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800986a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800986c:	fab3 f383 	clz	r3, r3
 8009870:	b2db      	uxtb	r3, r3
 8009872:	429a      	cmp	r2, r3
 8009874:	d106      	bne.n	8009884 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	2102      	movs	r1, #2
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff f99e 	bl	8008bc0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2103      	movs	r1, #3
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff f984 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 8009890:	4603      	mov	r3, r0
 8009892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10a      	bne.n	80098b0 <HAL_ADC_ConfigChannel+0x308>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2103      	movs	r1, #3
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff f979 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 80098a6:	4603      	mov	r3, r0
 80098a8:	0e9b      	lsrs	r3, r3, #26
 80098aa:	f003 021f 	and.w	r2, r3, #31
 80098ae:	e010      	b.n	80098d2 <HAL_ADC_ConfigChannel+0x32a>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2103      	movs	r1, #3
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff f96e 	bl	8008b98 <LL_ADC_GetOffsetChannel>
 80098bc:	4603      	mov	r3, r0
 80098be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c2:	fa93 f3a3 	rbit	r3, r3
 80098c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80098c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ca:	fab3 f383 	clz	r3, r3
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	461a      	mov	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <HAL_ADC_ConfigChannel+0x342>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	0e9b      	lsrs	r3, r3, #26
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	e00a      	b.n	8009900 <HAL_ADC_ConfigChannel+0x358>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f2:	fa93 f3a3 	rbit	r3, r3
 80098f6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80098f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fa:	fab3 f383 	clz	r3, r3
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	429a      	cmp	r2, r3
 8009902:	d106      	bne.n	8009912 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2200      	movs	r2, #0
 800990a:	2103      	movs	r1, #3
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff f957 	bl	8008bc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff faba 	bl	8008e90 <LL_ADC_IsEnabled>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 810c 	bne.w	8009b3c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	6819      	ldr	r1, [r3, #0]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	461a      	mov	r2, r3
 8009932:	f7ff fa05 	bl	8008d40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	4aaf      	ldr	r2, [pc, #700]	; (8009bf8 <HAL_ADC_ConfigChannel+0x650>)
 800993c:	4293      	cmp	r3, r2
 800993e:	f040 80fd 	bne.w	8009b3c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10b      	bne.n	800996a <HAL_ADC_ConfigChannel+0x3c2>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	0e9b      	lsrs	r3, r3, #26
 8009958:	3301      	adds	r3, #1
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	2b09      	cmp	r3, #9
 8009960:	bf94      	ite	ls
 8009962:	2301      	movls	r3, #1
 8009964:	2300      	movhi	r3, #0
 8009966:	b2db      	uxtb	r3, r3
 8009968:	e012      	b.n	8009990 <HAL_ADC_ConfigChannel+0x3e8>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009972:	fa93 f3a3 	rbit	r3, r3
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	fab3 f383 	clz	r3, r3
 800997e:	b2db      	uxtb	r3, r3
 8009980:	3301      	adds	r3, #1
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	2b09      	cmp	r3, #9
 8009988:	bf94      	ite	ls
 800998a:	2301      	movls	r3, #1
 800998c:	2300      	movhi	r3, #0
 800998e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009990:	2b00      	cmp	r3, #0
 8009992:	d064      	beq.n	8009a5e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999c:	2b00      	cmp	r3, #0
 800999e:	d107      	bne.n	80099b0 <HAL_ADC_ConfigChannel+0x408>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	0e9b      	lsrs	r3, r3, #26
 80099a6:	3301      	adds	r3, #1
 80099a8:	069b      	lsls	r3, r3, #26
 80099aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80099ae:	e00e      	b.n	80099ce <HAL_ADC_ConfigChannel+0x426>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	fa93 f3a3 	rbit	r3, r3
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	fab3 f383 	clz	r3, r3
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	3301      	adds	r3, #1
 80099c8:	069b      	lsls	r3, r3, #26
 80099ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_ADC_ConfigChannel+0x446>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	0e9b      	lsrs	r3, r3, #26
 80099e0:	3301      	adds	r3, #1
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2101      	movs	r1, #1
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	e010      	b.n	8009a10 <HAL_ADC_ConfigChannel+0x468>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	fa93 f3a3 	rbit	r3, r3
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	fab3 f383 	clz	r3, r3
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	3301      	adds	r3, #1
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a10:	ea42 0103 	orr.w	r1, r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <HAL_ADC_ConfigChannel+0x48e>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	0e9b      	lsrs	r3, r3, #26
 8009a26:	3301      	adds	r3, #1
 8009a28:	f003 021f 	and.w	r2, r3, #31
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	4413      	add	r3, r2
 8009a32:	051b      	lsls	r3, r3, #20
 8009a34:	e011      	b.n	8009a5a <HAL_ADC_ConfigChannel+0x4b2>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	fa93 f3a3 	rbit	r3, r3
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	fab3 f383 	clz	r3, r3
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	f003 021f 	and.w	r2, r3, #31
 8009a52:	4613      	mov	r3, r2
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4413      	add	r3, r2
 8009a58:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	e069      	b.n	8009b32 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d107      	bne.n	8009a7a <HAL_ADC_ConfigChannel+0x4d2>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	0e9b      	lsrs	r3, r3, #26
 8009a70:	3301      	adds	r3, #1
 8009a72:	069b      	lsls	r3, r3, #26
 8009a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a78:	e00e      	b.n	8009a98 <HAL_ADC_ConfigChannel+0x4f0>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	fa93 f3a3 	rbit	r3, r3
 8009a86:	61fb      	str	r3, [r7, #28]
  return result;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	fab3 f383 	clz	r3, r3
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	3301      	adds	r3, #1
 8009a92:	069b      	lsls	r3, r3, #26
 8009a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <HAL_ADC_ConfigChannel+0x510>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	0e9b      	lsrs	r3, r3, #26
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	e010      	b.n	8009ada <HAL_ADC_ConfigChannel+0x532>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	fa93 f3a3 	rbit	r3, r3
 8009ac4:	617b      	str	r3, [r7, #20]
  return result;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	fab3 f383 	clz	r3, r3
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f003 031f 	and.w	r3, r3, #31
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8009ada:	ea42 0103 	orr.w	r1, r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10d      	bne.n	8009b06 <HAL_ADC_ConfigChannel+0x55e>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	0e9b      	lsrs	r3, r3, #26
 8009af0:	3301      	adds	r3, #1
 8009af2:	f003 021f 	and.w	r2, r3, #31
 8009af6:	4613      	mov	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4413      	add	r3, r2
 8009afc:	3b1e      	subs	r3, #30
 8009afe:	051b      	lsls	r3, r3, #20
 8009b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b04:	e014      	b.n	8009b30 <HAL_ADC_ConfigChannel+0x588>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	fa93 f3a3 	rbit	r3, r3
 8009b12:	60fb      	str	r3, [r7, #12]
  return result;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	fab3 f383 	clz	r3, r3
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f003 021f 	and.w	r2, r3, #31
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	3b1e      	subs	r3, #30
 8009b2a:	051b      	lsls	r3, r3, #20
 8009b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b30:	430b      	orrs	r3, r1
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	4619      	mov	r1, r3
 8009b38:	f7ff f8d9 	bl	8008cee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	4b2e      	ldr	r3, [pc, #184]	; (8009bfc <HAL_ADC_ConfigChannel+0x654>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 80c9 	beq.w	8009cdc <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b52:	d004      	beq.n	8009b5e <HAL_ADC_ConfigChannel+0x5b6>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a29      	ldr	r2, [pc, #164]	; (8009c00 <HAL_ADC_ConfigChannel+0x658>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d101      	bne.n	8009b62 <HAL_ADC_ConfigChannel+0x5ba>
 8009b5e:	4b29      	ldr	r3, [pc, #164]	; (8009c04 <HAL_ADC_ConfigChannel+0x65c>)
 8009b60:	e000      	b.n	8009b64 <HAL_ADC_ConfigChannel+0x5bc>
 8009b62:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <HAL_ADC_ConfigChannel+0x660>)
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe ffe7 	bl	8008b38 <LL_ADC_GetCommonPathInternalCh>
 8009b6a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a26      	ldr	r2, [pc, #152]	; (8009c0c <HAL_ADC_ConfigChannel+0x664>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d004      	beq.n	8009b82 <HAL_ADC_ConfigChannel+0x5da>
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a24      	ldr	r2, [pc, #144]	; (8009c10 <HAL_ADC_ConfigChannel+0x668>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d14e      	bne.n	8009c20 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d148      	bne.n	8009c20 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b96:	d005      	beq.n	8009ba4 <HAL_ADC_ConfigChannel+0x5fc>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a1d      	ldr	r2, [pc, #116]	; (8009c14 <HAL_ADC_ConfigChannel+0x66c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	f040 8099 	bne.w	8009cd6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bac:	d004      	beq.n	8009bb8 <HAL_ADC_ConfigChannel+0x610>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a13      	ldr	r2, [pc, #76]	; (8009c00 <HAL_ADC_ConfigChannel+0x658>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d101      	bne.n	8009bbc <HAL_ADC_ConfigChannel+0x614>
 8009bb8:	4a12      	ldr	r2, [pc, #72]	; (8009c04 <HAL_ADC_ConfigChannel+0x65c>)
 8009bba:	e000      	b.n	8009bbe <HAL_ADC_ConfigChannel+0x616>
 8009bbc:	4a12      	ldr	r2, [pc, #72]	; (8009c08 <HAL_ADC_ConfigChannel+0x660>)
 8009bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7fe ffa2 	bl	8008b12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009bce:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <HAL_ADC_ConfigChannel+0x670>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	099b      	lsrs	r3, r3, #6
 8009bd4:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <HAL_ADC_ConfigChannel+0x674>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	099a      	lsrs	r2, r3, #6
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009be6:	e002      	b.n	8009bee <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1f9      	bne.n	8009be8 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009bf4:	e06f      	b.n	8009cd6 <HAL_ADC_ConfigChannel+0x72e>
 8009bf6:	bf00      	nop
 8009bf8:	407f0000 	.word	0x407f0000
 8009bfc:	80080000 	.word	0x80080000
 8009c00:	50000100 	.word	0x50000100
 8009c04:	50000300 	.word	0x50000300
 8009c08:	50000700 	.word	0x50000700
 8009c0c:	c3210000 	.word	0xc3210000
 8009c10:	90c00010 	.word	0x90c00010
 8009c14:	50000600 	.word	0x50000600
 8009c18:	20000c34 	.word	0x20000c34
 8009c1c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a32      	ldr	r2, [pc, #200]	; (8009cf0 <HAL_ADC_ConfigChannel+0x748>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d125      	bne.n	8009c76 <HAL_ADC_ConfigChannel+0x6ce>
 8009c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d11f      	bne.n	8009c76 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a2e      	ldr	r2, [pc, #184]	; (8009cf4 <HAL_ADC_ConfigChannel+0x74c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d104      	bne.n	8009c4a <HAL_ADC_ConfigChannel+0x6a2>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a2c      	ldr	r2, [pc, #176]	; (8009cf8 <HAL_ADC_ConfigChannel+0x750>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d047      	beq.n	8009cda <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c52:	d004      	beq.n	8009c5e <HAL_ADC_ConfigChannel+0x6b6>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <HAL_ADC_ConfigChannel+0x74c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d101      	bne.n	8009c62 <HAL_ADC_ConfigChannel+0x6ba>
 8009c5e:	4a27      	ldr	r2, [pc, #156]	; (8009cfc <HAL_ADC_ConfigChannel+0x754>)
 8009c60:	e000      	b.n	8009c64 <HAL_ADC_ConfigChannel+0x6bc>
 8009c62:	4a27      	ldr	r2, [pc, #156]	; (8009d00 <HAL_ADC_ConfigChannel+0x758>)
 8009c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7fe ff4f 	bl	8008b12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009c74:	e031      	b.n	8009cda <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <HAL_ADC_ConfigChannel+0x75c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d12d      	bne.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d127      	bne.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <HAL_ADC_ConfigChannel+0x74c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d022      	beq.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c9e:	d004      	beq.n	8009caa <HAL_ADC_ConfigChannel+0x702>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <HAL_ADC_ConfigChannel+0x74c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d101      	bne.n	8009cae <HAL_ADC_ConfigChannel+0x706>
 8009caa:	4a14      	ldr	r2, [pc, #80]	; (8009cfc <HAL_ADC_ConfigChannel+0x754>)
 8009cac:	e000      	b.n	8009cb0 <HAL_ADC_ConfigChannel+0x708>
 8009cae:	4a14      	ldr	r2, [pc, #80]	; (8009d00 <HAL_ADC_ConfigChannel+0x758>)
 8009cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe ff29 	bl	8008b12 <LL_ADC_SetCommonPathInternalCh>
 8009cc0:	e00c      	b.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc6:	f043 0220 	orr.w	r2, r3, #32
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009cd4:	e002      	b.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009cda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009ce4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3798      	adds	r7, #152	; 0x98
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	c7520000 	.word	0xc7520000
 8009cf4:	50000100 	.word	0x50000100
 8009cf8:	50000500 	.word	0x50000500
 8009cfc:	50000300 	.word	0x50000300
 8009d00:	50000700 	.word	0x50000700
 8009d04:	cb840000 	.word	0xcb840000

08009d08 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff f904 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 8009d24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff f925 	bl	8008f7a <LL_ADC_INJ_IsConversionOngoing>
 8009d30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8090 	beq.w	8009e60 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d02a      	beq.n	8009da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7f5b      	ldrb	r3, [r3, #29]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d126      	bne.n	8009da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	7f1b      	ldrb	r3, [r3, #28]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d122      	bne.n	8009da4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009d62:	e014      	b.n	8009d8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	4a41      	ldr	r2, [pc, #260]	; (8009e6c <ADC_ConversionStop+0x164>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d90d      	bls.n	8009d88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d70:	f043 0210 	orr.w	r2, r3, #16
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7c:	f043 0201 	orr.w	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e06c      	b.n	8009e62 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d1e3      	bne.n	8009d64 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2240      	movs	r2, #64	; 0x40
 8009da2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d014      	beq.n	8009dd4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff f8bc 	bl	8008f2c <LL_ADC_REG_IsConversionOngoing>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00c      	beq.n	8009dd4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff f879 	bl	8008eb6 <LL_ADC_IsDisableOngoing>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d104      	bne.n	8009dd4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff f898 	bl	8008f04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d014      	beq.n	8009e04 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff f8cb 	bl	8008f7a <LL_ADC_INJ_IsConversionOngoing>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00c      	beq.n	8009e04 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff f861 	bl	8008eb6 <LL_ADC_IsDisableOngoing>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d104      	bne.n	8009e04 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff f8a7 	bl	8008f52 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d004      	beq.n	8009e14 <ADC_ConversionStop+0x10c>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d105      	bne.n	8009e1a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009e0e:	230c      	movs	r3, #12
 8009e10:	617b      	str	r3, [r7, #20]
        break;
 8009e12:	e005      	b.n	8009e20 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009e14:	2308      	movs	r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
        break;
 8009e18:	e002      	b.n	8009e20 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009e1a:	2304      	movs	r3, #4
 8009e1c:	617b      	str	r3, [r7, #20]
        break;
 8009e1e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009e20:	f7fe fe36 	bl	8008a90 <HAL_GetTick>
 8009e24:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009e26:	e014      	b.n	8009e52 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009e28:	f7fe fe32 	bl	8008a90 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d90d      	bls.n	8009e52 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e3a:	f043 0210 	orr.w	r2, r3, #16
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e46:	f043 0201 	orr.w	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e007      	b.n	8009e62 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e3      	bne.n	8009e28 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	a33fffff 	.word	0xa33fffff

08009e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff f807 	bl	8008e90 <LL_ADC_IsEnabled>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d146      	bne.n	8009f16 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	4b24      	ldr	r3, [pc, #144]	; (8009f20 <ADC_Enable+0xb0>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9a:	f043 0210 	orr.w	r2, r3, #16
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea6:	f043 0201 	orr.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e032      	b.n	8009f18 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe ffc2 	bl	8008e40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009ebc:	f7fe fde8 	bl	8008a90 <HAL_GetTick>
 8009ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009ec2:	e021      	b.n	8009f08 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fe ffe1 	bl	8008e90 <LL_ADC_IsEnabled>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe ffb1 	bl	8008e40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009ede:	f7fe fdd7 	bl	8008a90 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d90d      	bls.n	8009f08 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef0:	f043 0210 	orr.w	r2, r3, #16
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009efc:	f043 0201 	orr.w	r2, r3, #1
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e007      	b.n	8009f18 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d1d6      	bne.n	8009ec4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	8000003f 	.word	0x8000003f

08009f24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe ffc0 	bl	8008eb6 <LL_ADC_IsDisableOngoing>
 8009f36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe ffa7 	bl	8008e90 <LL_ADC_IsEnabled>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d040      	beq.n	8009fca <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d13d      	bne.n	8009fca <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 030d 	and.w	r3, r3, #13
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d10c      	bne.n	8009f76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe ff81 	bl	8008e68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009f6e:	f7fe fd8f 	bl	8008a90 <HAL_GetTick>
 8009f72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009f74:	e022      	b.n	8009fbc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f7a:	f043 0210 	orr.w	r2, r3, #16
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f86:	f043 0201 	orr.w	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e01c      	b.n	8009fcc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009f92:	f7fe fd7d 	bl	8008a90 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d90d      	bls.n	8009fbc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa4:	f043 0210 	orr.w	r2, r3, #16
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fb0:	f043 0201 	orr.w	r2, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e007      	b.n	8009fcc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e3      	bne.n	8009f92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d14b      	bne.n	800a086 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0308 	and.w	r3, r3, #8
 800a004:	2b00      	cmp	r3, #0
 800a006:	d021      	beq.n	800a04c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fe32 	bl	8008c76 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d032      	beq.n	800a07e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d12b      	bne.n	800a07e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d11f      	bne.n	800a07e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a042:	f043 0201 	orr.w	r2, r3, #1
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	65da      	str	r2, [r3, #92]	; 0x5c
 800a04a:	e018      	b.n	800a07e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d111      	bne.n	800a07e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a05e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a06a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d105      	bne.n	800a07e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a076:	f043 0201 	orr.w	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fc f948 	bl	8006314 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a084:	e00e      	b.n	800a0a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08a:	f003 0310 	and.w	r3, r3, #16
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff fa7d 	bl	8009592 <HAL_ADC_ErrorCallback>
}
 800a098:	e004      	b.n	800a0a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4798      	blx	r3
}
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff fa5f 	bl	800957e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e6:	f043 0204 	orr.w	r2, r3, #4
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff fa4f 	bl	8009592 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <LL_ADC_IsEnabled>:
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <LL_ADC_IsEnabled+0x18>
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <LL_ADC_IsEnabled+0x1a>
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <LL_ADC_REG_IsConversionOngoing>:
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b04      	cmp	r3, #4
 800a134:	d101      	bne.n	800a13a <LL_ADC_REG_IsConversionOngoing+0x18>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a148:	b590      	push	{r4, r7, lr}
 800a14a:	b0a1      	sub	sp, #132	; 0x84
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d101      	bne.n	800a166 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a162:	2302      	movs	r3, #2
 800a164:	e0e3      	b.n	800a32e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a176:	d102      	bne.n	800a17e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a178:	4b6f      	ldr	r3, [pc, #444]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a17a:	60bb      	str	r3, [r7, #8]
 800a17c:	e009      	b.n	800a192 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a6e      	ldr	r2, [pc, #440]	; (800a33c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d102      	bne.n	800a18e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a188:	4b6d      	ldr	r3, [pc, #436]	; (800a340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a18a:	60bb      	str	r3, [r7, #8]
 800a18c:	e001      	b.n	800a192 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10b      	bne.n	800a1b0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19c:	f043 0220 	orr.w	r2, r3, #32
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e0be      	b.n	800a32e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff ffb5 	bl	800a122 <LL_ADC_REG_IsConversionOngoing>
 800a1b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff ffaf 	bl	800a122 <LL_ADC_REG_IsConversionOngoing>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f040 80a0 	bne.w	800a30c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f040 809c 	bne.w	800a30c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1dc:	d004      	beq.n	800a1e8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a55      	ldr	r2, [pc, #340]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d101      	bne.n	800a1ec <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a1e8:	4b56      	ldr	r3, [pc, #344]	; (800a344 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a1ea:	e000      	b.n	800a1ee <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a1ec:	4b56      	ldr	r3, [pc, #344]	; (800a348 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a1ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d04b      	beq.n	800a290 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a1f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	6859      	ldr	r1, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a20a:	035b      	lsls	r3, r3, #13
 800a20c:	430b      	orrs	r3, r1
 800a20e:	431a      	orrs	r2, r3
 800a210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a212:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a21c:	d004      	beq.n	800a228 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a45      	ldr	r2, [pc, #276]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d10f      	bne.n	800a248 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a228:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a22c:	f7ff ff66 	bl	800a0fc <LL_ADC_IsEnabled>
 800a230:	4604      	mov	r4, r0
 800a232:	4841      	ldr	r0, [pc, #260]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a234:	f7ff ff62 	bl	800a0fc <LL_ADC_IsEnabled>
 800a238:	4603      	mov	r3, r0
 800a23a:	4323      	orrs	r3, r4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bf0c      	ite	eq
 800a240:	2301      	moveq	r3, #1
 800a242:	2300      	movne	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	e012      	b.n	800a26e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a248:	483c      	ldr	r0, [pc, #240]	; (800a33c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a24a:	f7ff ff57 	bl	800a0fc <LL_ADC_IsEnabled>
 800a24e:	4604      	mov	r4, r0
 800a250:	483b      	ldr	r0, [pc, #236]	; (800a340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a252:	f7ff ff53 	bl	800a0fc <LL_ADC_IsEnabled>
 800a256:	4603      	mov	r3, r0
 800a258:	431c      	orrs	r4, r3
 800a25a:	483c      	ldr	r0, [pc, #240]	; (800a34c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a25c:	f7ff ff4e 	bl	800a0fc <LL_ADC_IsEnabled>
 800a260:	4603      	mov	r3, r0
 800a262:	4323      	orrs	r3, r4
 800a264:	2b00      	cmp	r3, #0
 800a266:	bf0c      	ite	eq
 800a268:	2301      	moveq	r3, #1
 800a26a:	2300      	movne	r3, #0
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d056      	beq.n	800a320 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a27a:	f023 030f 	bic.w	r3, r3, #15
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	6811      	ldr	r1, [r2, #0]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	6892      	ldr	r2, [r2, #8]
 800a286:	430a      	orrs	r2, r1
 800a288:	431a      	orrs	r2, r3
 800a28a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a28c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a28e:	e047      	b.n	800a320 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a29a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2a4:	d004      	beq.n	800a2b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a23      	ldr	r2, [pc, #140]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10f      	bne.n	800a2d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a2b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a2b4:	f7ff ff22 	bl	800a0fc <LL_ADC_IsEnabled>
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	481f      	ldr	r0, [pc, #124]	; (800a338 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a2bc:	f7ff ff1e 	bl	800a0fc <LL_ADC_IsEnabled>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4323      	orrs	r3, r4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bf0c      	ite	eq
 800a2c8:	2301      	moveq	r3, #1
 800a2ca:	2300      	movne	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	e012      	b.n	800a2f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a2d0:	481a      	ldr	r0, [pc, #104]	; (800a33c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a2d2:	f7ff ff13 	bl	800a0fc <LL_ADC_IsEnabled>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4819      	ldr	r0, [pc, #100]	; (800a340 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a2da:	f7ff ff0f 	bl	800a0fc <LL_ADC_IsEnabled>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	431c      	orrs	r4, r3
 800a2e2:	481a      	ldr	r0, [pc, #104]	; (800a34c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a2e4:	f7ff ff0a 	bl	800a0fc <LL_ADC_IsEnabled>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4323      	orrs	r3, r4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2301      	moveq	r3, #1
 800a2f2:	2300      	movne	r3, #0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d012      	beq.n	800a320 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a302:	f023 030f 	bic.w	r3, r3, #15
 800a306:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a308:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a30a:	e009      	b.n	800a320 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a310:	f043 0220 	orr.w	r2, r3, #32
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a31e:	e000      	b.n	800a322 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a320:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a32a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3784      	adds	r7, #132	; 0x84
 800a332:	46bd      	mov	sp, r7
 800a334:	bd90      	pop	{r4, r7, pc}
 800a336:	bf00      	nop
 800a338:	50000100 	.word	0x50000100
 800a33c:	50000400 	.word	0x50000400
 800a340:	50000500 	.word	0x50000500
 800a344:	50000300 	.word	0x50000300
 800a348:	50000700 	.word	0x50000700
 800a34c:	50000600 	.word	0x50000600

0800a350 <LL_EXTI_EnableIT_0_31>:
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a358:	4b05      	ldr	r3, [pc, #20]	; (800a370 <LL_EXTI_EnableIT_0_31+0x20>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4904      	ldr	r1, [pc, #16]	; (800a370 <LL_EXTI_EnableIT_0_31+0x20>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4313      	orrs	r3, r2
 800a362:	600b      	str	r3, [r1, #0]
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	40010400 	.word	0x40010400

0800a374 <LL_EXTI_EnableIT_32_63>:
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <LL_EXTI_EnableIT_32_63+0x20>)
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	4904      	ldr	r1, [pc, #16]	; (800a394 <LL_EXTI_EnableIT_32_63+0x20>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4313      	orrs	r3, r2
 800a386:	620b      	str	r3, [r1, #32]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	40010400 	.word	0x40010400

0800a398 <LL_EXTI_DisableIT_0_31>:
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a3a0:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <LL_EXTI_DisableIT_0_31+0x24>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	43db      	mvns	r3, r3
 800a3a8:	4904      	ldr	r1, [pc, #16]	; (800a3bc <LL_EXTI_DisableIT_0_31+0x24>)
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	600b      	str	r3, [r1, #0]
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40010400 	.word	0x40010400

0800a3c0 <LL_EXTI_DisableIT_32_63>:
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <LL_EXTI_DisableIT_32_63+0x24>)
 800a3ca:	6a1a      	ldr	r2, [r3, #32]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	43db      	mvns	r3, r3
 800a3d0:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <LL_EXTI_DisableIT_32_63+0x24>)
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	620b      	str	r3, [r1, #32]
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40010400 	.word	0x40010400

0800a3e8 <LL_EXTI_EnableEvent_0_31>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a3f0:	4b05      	ldr	r3, [pc, #20]	; (800a408 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	4904      	ldr	r1, [pc, #16]	; (800a408 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	604b      	str	r3, [r1, #4]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	40010400 	.word	0x40010400

0800a40c <LL_EXTI_EnableEvent_32_63>:
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a414:	4b05      	ldr	r3, [pc, #20]	; (800a42c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a418:	4904      	ldr	r1, [pc, #16]	; (800a42c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	40010400 	.word	0x40010400

0800a430 <LL_EXTI_DisableEvent_0_31>:
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	43db      	mvns	r3, r3
 800a440:	4904      	ldr	r1, [pc, #16]	; (800a454 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a442:	4013      	ands	r3, r2
 800a444:	604b      	str	r3, [r1, #4]
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40010400 	.word	0x40010400

0800a458 <LL_EXTI_DisableEvent_32_63>:
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <LL_EXTI_DisableEvent_32_63+0x24>)
 800a462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	43db      	mvns	r3, r3
 800a468:	4904      	ldr	r1, [pc, #16]	; (800a47c <LL_EXTI_DisableEvent_32_63+0x24>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40010400 	.word	0x40010400

0800a480 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	4904      	ldr	r1, [pc, #16]	; (800a4a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4313      	orrs	r3, r2
 800a492:	608b      	str	r3, [r1, #8]
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	40010400 	.word	0x40010400

0800a4a4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a4ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4b0:	4904      	ldr	r1, [pc, #16]	; (800a4c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	4904      	ldr	r1, [pc, #16]	; (800a4ec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a4da:	4013      	ands	r3, r2
 800a4dc:	608b      	str	r3, [r1, #8]
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	40010400 	.word	0x40010400

0800a4f0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a4f8:	4b06      	ldr	r3, [pc, #24]	; (800a514 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a4fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	43db      	mvns	r3, r3
 800a500:	4904      	ldr	r1, [pc, #16]	; (800a514 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a502:	4013      	ands	r3, r2
 800a504:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	40010400 	.word	0x40010400

0800a518 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a520:	4b05      	ldr	r3, [pc, #20]	; (800a538 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	4904      	ldr	r1, [pc, #16]	; (800a538 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60cb      	str	r3, [r1, #12]
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	40010400 	.word	0x40010400

0800a53c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4904      	ldr	r1, [pc, #16]	; (800a55c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	40010400 	.word	0x40010400

0800a560 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a568:	4b06      	ldr	r3, [pc, #24]	; (800a584 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	43db      	mvns	r3, r3
 800a570:	4904      	ldr	r1, [pc, #16]	; (800a584 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a572:	4013      	ands	r3, r2
 800a574:	60cb      	str	r3, [r1, #12]
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40010400 	.word	0x40010400

0800a588 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a590:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	43db      	mvns	r3, r3
 800a598:	4904      	ldr	r1, [pc, #16]	; (800a5ac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a59a:	4013      	ands	r3, r2
 800a59c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	40010400 	.word	0x40010400

0800a5b0 <LL_EXTI_IsActiveFlag_0_31>:
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a5ba:	695a      	ldr	r2, [r3, #20]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d101      	bne.n	800a5ca <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40010400 	.word	0x40010400

0800a5dc <LL_EXTI_IsActiveFlag_32_63>:
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d101      	bne.n	800a5f6 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	40010400 	.word	0x40010400

0800a608 <LL_EXTI_ClearFlag_0_31>:
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a610:	4a04      	ldr	r2, [pc, #16]	; (800a624 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6153      	str	r3, [r2, #20]
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	40010400 	.word	0x40010400

0800a628 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a630:	4a04      	ldr	r2, [pc, #16]	; (800a644 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	40010400 	.word	0x40010400

0800a648 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	77fb      	strb	r3, [r7, #31]
 800a662:	e180      	b.n	800a966 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a66e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a672:	d102      	bne.n	800a67a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	77fb      	strb	r3, [r7, #31]
 800a678:	e175      	b.n	800a966 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	7f5b      	ldrb	r3, [r3, #29]
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d108      	bne.n	800a696 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7fc fd91 	bl	80071b8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6a0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4b98      	ldr	r3, [pc, #608]	; (800a928 <HAL_COMP_Init+0x2e0>)
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	6979      	ldr	r1, [r7, #20]
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d015      	beq.n	800a70e <HAL_COMP_Init+0xc6>
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d112      	bne.n	800a70e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a6e8:	4b90      	ldr	r3, [pc, #576]	; (800a92c <HAL_COMP_Init+0x2e4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	099b      	lsrs	r3, r3, #6
 800a6ee:	4a90      	ldr	r2, [pc, #576]	; (800a930 <HAL_COMP_Init+0x2e8>)
 800a6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f4:	099a      	lsrs	r2, r3, #6
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a700:	e002      	b.n	800a708 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3b01      	subs	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f9      	bne.n	800a702 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a88      	ldr	r2, [pc, #544]	; (800a934 <HAL_COMP_Init+0x2ec>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d028      	beq.n	800a76a <HAL_COMP_Init+0x122>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a86      	ldr	r2, [pc, #536]	; (800a938 <HAL_COMP_Init+0x2f0>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d020      	beq.n	800a764 <HAL_COMP_Init+0x11c>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a85      	ldr	r2, [pc, #532]	; (800a93c <HAL_COMP_Init+0x2f4>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d018      	beq.n	800a75e <HAL_COMP_Init+0x116>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a83      	ldr	r2, [pc, #524]	; (800a940 <HAL_COMP_Init+0x2f8>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d010      	beq.n	800a758 <HAL_COMP_Init+0x110>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a82      	ldr	r2, [pc, #520]	; (800a944 <HAL_COMP_Init+0x2fc>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d008      	beq.n	800a752 <HAL_COMP_Init+0x10a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a80      	ldr	r2, [pc, #512]	; (800a948 <HAL_COMP_Init+0x300>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d101      	bne.n	800a74e <HAL_COMP_Init+0x106>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e00f      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a74e:	2302      	movs	r3, #2
 800a750:	e00d      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a756:	e00a      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a75c:	e007      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a75e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a762:	e004      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a768:	e001      	b.n	800a76e <HAL_COMP_Init+0x126>
 800a76a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a76e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	f003 0303 	and.w	r3, r3, #3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80b6 	beq.w	800a8ea <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	2b00      	cmp	r3, #0
 800a788:	d011      	beq.n	800a7ae <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a6e      	ldr	r2, [pc, #440]	; (800a948 <HAL_COMP_Init+0x300>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d004      	beq.n	800a79e <HAL_COMP_Init+0x156>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a6c      	ldr	r2, [pc, #432]	; (800a94c <HAL_COMP_Init+0x304>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d103      	bne.n	800a7a6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a79e:	6938      	ldr	r0, [r7, #16]
 800a7a0:	f7ff fe80 	bl	800a4a4 <LL_EXTI_EnableRisingTrig_32_63>
 800a7a4:	e014      	b.n	800a7d0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a7a6:	6938      	ldr	r0, [r7, #16]
 800a7a8:	f7ff fe6a 	bl	800a480 <LL_EXTI_EnableRisingTrig_0_31>
 800a7ac:	e010      	b.n	800a7d0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a65      	ldr	r2, [pc, #404]	; (800a948 <HAL_COMP_Init+0x300>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d004      	beq.n	800a7c2 <HAL_COMP_Init+0x17a>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a63      	ldr	r2, [pc, #396]	; (800a94c <HAL_COMP_Init+0x304>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d103      	bne.n	800a7ca <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a7c2:	6938      	ldr	r0, [r7, #16]
 800a7c4:	f7ff fe94 	bl	800a4f0 <LL_EXTI_DisableRisingTrig_32_63>
 800a7c8:	e002      	b.n	800a7d0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff fe7c 	bl	800a4c8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d011      	beq.n	800a800 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a59      	ldr	r2, [pc, #356]	; (800a948 <HAL_COMP_Init+0x300>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d004      	beq.n	800a7f0 <HAL_COMP_Init+0x1a8>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a58      	ldr	r2, [pc, #352]	; (800a94c <HAL_COMP_Init+0x304>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d103      	bne.n	800a7f8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a7f0:	6938      	ldr	r0, [r7, #16]
 800a7f2:	f7ff fea3 	bl	800a53c <LL_EXTI_EnableFallingTrig_32_63>
 800a7f6:	e014      	b.n	800a822 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a7f8:	6938      	ldr	r0, [r7, #16]
 800a7fa:	f7ff fe8d 	bl	800a518 <LL_EXTI_EnableFallingTrig_0_31>
 800a7fe:	e010      	b.n	800a822 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a50      	ldr	r2, [pc, #320]	; (800a948 <HAL_COMP_Init+0x300>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d004      	beq.n	800a814 <HAL_COMP_Init+0x1cc>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a4f      	ldr	r2, [pc, #316]	; (800a94c <HAL_COMP_Init+0x304>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d103      	bne.n	800a81c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f7ff feb7 	bl	800a588 <LL_EXTI_DisableFallingTrig_32_63>
 800a81a:	e002      	b.n	800a822 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a81c:	6938      	ldr	r0, [r7, #16]
 800a81e:	f7ff fe9f 	bl	800a560 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a48      	ldr	r2, [pc, #288]	; (800a948 <HAL_COMP_Init+0x300>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d004      	beq.n	800a836 <HAL_COMP_Init+0x1ee>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a46      	ldr	r2, [pc, #280]	; (800a94c <HAL_COMP_Init+0x304>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d103      	bne.n	800a83e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a836:	6938      	ldr	r0, [r7, #16]
 800a838:	f7ff fef6 	bl	800a628 <LL_EXTI_ClearFlag_32_63>
 800a83c:	e002      	b.n	800a844 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	f7ff fee2 	bl	800a608 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d011      	beq.n	800a874 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a3c      	ldr	r2, [pc, #240]	; (800a948 <HAL_COMP_Init+0x300>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <HAL_COMP_Init+0x21c>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a3b      	ldr	r2, [pc, #236]	; (800a94c <HAL_COMP_Init+0x304>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d103      	bne.n	800a86c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a864:	6938      	ldr	r0, [r7, #16]
 800a866:	f7ff fdd1 	bl	800a40c <LL_EXTI_EnableEvent_32_63>
 800a86a:	e014      	b.n	800a896 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a86c:	6938      	ldr	r0, [r7, #16]
 800a86e:	f7ff fdbb 	bl	800a3e8 <LL_EXTI_EnableEvent_0_31>
 800a872:	e010      	b.n	800a896 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a33      	ldr	r2, [pc, #204]	; (800a948 <HAL_COMP_Init+0x300>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_COMP_Init+0x240>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a32      	ldr	r2, [pc, #200]	; (800a94c <HAL_COMP_Init+0x304>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d103      	bne.n	800a890 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800a888:	6938      	ldr	r0, [r7, #16]
 800a88a:	f7ff fde5 	bl	800a458 <LL_EXTI_DisableEvent_32_63>
 800a88e:	e002      	b.n	800a896 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800a890:	6938      	ldr	r0, [r7, #16]
 800a892:	f7ff fdcd 	bl	800a430 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d011      	beq.n	800a8c6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a28      	ldr	r2, [pc, #160]	; (800a948 <HAL_COMP_Init+0x300>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_COMP_Init+0x26e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <HAL_COMP_Init+0x304>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d103      	bne.n	800a8be <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800a8b6:	6938      	ldr	r0, [r7, #16]
 800a8b8:	f7ff fd5c 	bl	800a374 <LL_EXTI_EnableIT_32_63>
 800a8bc:	e04b      	b.n	800a956 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800a8be:	6938      	ldr	r0, [r7, #16]
 800a8c0:	f7ff fd46 	bl	800a350 <LL_EXTI_EnableIT_0_31>
 800a8c4:	e047      	b.n	800a956 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1f      	ldr	r2, [pc, #124]	; (800a948 <HAL_COMP_Init+0x300>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d004      	beq.n	800a8da <HAL_COMP_Init+0x292>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1d      	ldr	r2, [pc, #116]	; (800a94c <HAL_COMP_Init+0x304>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d103      	bne.n	800a8e2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f7ff fd70 	bl	800a3c0 <LL_EXTI_DisableIT_32_63>
 800a8e0:	e039      	b.n	800a956 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800a8e2:	6938      	ldr	r0, [r7, #16]
 800a8e4:	f7ff fd58 	bl	800a398 <LL_EXTI_DisableIT_0_31>
 800a8e8:	e035      	b.n	800a956 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a16      	ldr	r2, [pc, #88]	; (800a948 <HAL_COMP_Init+0x300>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d004      	beq.n	800a8fe <HAL_COMP_Init+0x2b6>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a14      	ldr	r2, [pc, #80]	; (800a94c <HAL_COMP_Init+0x304>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d103      	bne.n	800a906 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800a8fe:	6938      	ldr	r0, [r7, #16]
 800a900:	f7ff fdaa 	bl	800a458 <LL_EXTI_DisableEvent_32_63>
 800a904:	e002      	b.n	800a90c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800a906:	6938      	ldr	r0, [r7, #16]
 800a908:	f7ff fd92 	bl	800a430 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0d      	ldr	r2, [pc, #52]	; (800a948 <HAL_COMP_Init+0x300>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_COMP_Init+0x2d8>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a0c      	ldr	r2, [pc, #48]	; (800a94c <HAL_COMP_Init+0x304>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d117      	bne.n	800a950 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800a920:	6938      	ldr	r0, [r7, #16]
 800a922:	f7ff fd4d 	bl	800a3c0 <LL_EXTI_DisableIT_32_63>
 800a926:	e016      	b.n	800a956 <HAL_COMP_Init+0x30e>
 800a928:	ff007e0f 	.word	0xff007e0f
 800a92c:	20000c34 	.word	0x20000c34
 800a930:	053e2d63 	.word	0x053e2d63
 800a934:	40010200 	.word	0x40010200
 800a938:	40010204 	.word	0x40010204
 800a93c:	40010208 	.word	0x40010208
 800a940:	4001020c 	.word	0x4001020c
 800a944:	40010210 	.word	0x40010210
 800a948:	40010214 	.word	0x40010214
 800a94c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800a950:	6938      	ldr	r0, [r7, #16]
 800a952:	f7ff fd21 	bl	800a398 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	7f5b      	ldrb	r3, [r3, #29]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800a966:	7ffb      	ldrb	r3, [r7, #31]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3720      	adds	r7, #32
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
 800a986:	e01d      	b.n	800a9c4 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a996:	d102      	bne.n	800a99e <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	73fb      	strb	r3, [r7, #15]
 800a99c:	e012      	b.n	800a9c4 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	7f5b      	ldrb	r3, [r3, #29]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00b      	beq.n	800a9c0 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 0201 	bic.w	r2, r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	775a      	strb	r2, [r3, #29]
 800a9be:	e001      	b.n	800a9c4 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a2f      	ldr	r2, [pc, #188]	; (800aaa0 <HAL_COMP_IRQHandler+0xcc>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d028      	beq.n	800aa38 <HAL_COMP_IRQHandler+0x64>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <HAL_COMP_IRQHandler+0xd0>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d020      	beq.n	800aa32 <HAL_COMP_IRQHandler+0x5e>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a2c      	ldr	r2, [pc, #176]	; (800aaa8 <HAL_COMP_IRQHandler+0xd4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d018      	beq.n	800aa2c <HAL_COMP_IRQHandler+0x58>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a2b      	ldr	r2, [pc, #172]	; (800aaac <HAL_COMP_IRQHandler+0xd8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d010      	beq.n	800aa26 <HAL_COMP_IRQHandler+0x52>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a29      	ldr	r2, [pc, #164]	; (800aab0 <HAL_COMP_IRQHandler+0xdc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d008      	beq.n	800aa20 <HAL_COMP_IRQHandler+0x4c>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a28      	ldr	r2, [pc, #160]	; (800aab4 <HAL_COMP_IRQHandler+0xe0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d101      	bne.n	800aa1c <HAL_COMP_IRQHandler+0x48>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e00f      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e00d      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa24:	e00a      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa2a:	e007      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aa30:	e004      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa36:	e001      	b.n	800aa3c <HAL_COMP_IRQHandler+0x68>
 800aa38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa3c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <HAL_COMP_IRQHandler+0xe0>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d004      	beq.n	800aa56 <HAL_COMP_IRQHandler+0x82>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a19      	ldr	r2, [pc, #100]	; (800aab8 <HAL_COMP_IRQHandler+0xe4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d108      	bne.n	800aa68 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800aa56:	68b8      	ldr	r0, [r7, #8]
 800aa58:	f7ff fdc0 	bl	800a5dc <LL_EXTI_IsActiveFlag_32_63>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800aa62:	2302      	movs	r3, #2
 800aa64:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800aa66:	e007      	b.n	800aa78 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800aa68:	68b8      	ldr	r0, [r7, #8]
 800aa6a:	f7ff fda1 	bl	800a5b0 <LL_EXTI_IsActiveFlag_0_31>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800aa74:	2301      	movs	r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00c      	beq.n	800aa98 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d103      	bne.n	800aa8c <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800aa84:	68b8      	ldr	r0, [r7, #8]
 800aa86:	f7ff fdcf 	bl	800a628 <LL_EXTI_ClearFlag_32_63>
 800aa8a:	e002      	b.n	800aa92 <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800aa8c:	68b8      	ldr	r0, [r7, #8]
 800aa8e:	f7ff fdbb 	bl	800a608 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7fb fc24 	bl	80062e0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800aa98:	bf00      	nop
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	40010200 	.word	0x40010200
 800aaa4:	40010204 	.word	0x40010204
 800aaa8:	40010208 	.word	0x40010208
 800aaac:	4001020c 	.word	0x4001020c
 800aab0:	40010210 	.word	0x40010210
 800aab4:	40010214 	.word	0x40010214
 800aab8:	40010218 	.word	0x40010218

0800aabc <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	0f9b      	lsrs	r3, r3, #30
 800aacc:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <__NVIC_SetPriorityGrouping>:
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aaec:	4b0c      	ldr	r3, [pc, #48]	; (800ab20 <__NVIC_SetPriorityGrouping+0x44>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aaf8:	4013      	ands	r3, r2
 800aafa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ab04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ab08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab0e:	4a04      	ldr	r2, [pc, #16]	; (800ab20 <__NVIC_SetPriorityGrouping+0x44>)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	60d3      	str	r3, [r2, #12]
}
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	e000ed00 	.word	0xe000ed00

0800ab24 <__NVIC_GetPriorityGrouping>:
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab28:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <__NVIC_GetPriorityGrouping+0x18>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	f003 0307 	and.w	r3, r3, #7
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	e000ed00 	.word	0xe000ed00

0800ab40 <__NVIC_EnableIRQ>:
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	db0b      	blt.n	800ab6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	f003 021f 	and.w	r2, r3, #31
 800ab58:	4907      	ldr	r1, [pc, #28]	; (800ab78 <__NVIC_EnableIRQ+0x38>)
 800ab5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	2001      	movs	r0, #1
 800ab62:	fa00 f202 	lsl.w	r2, r0, r2
 800ab66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	e000e100 	.word	0xe000e100

0800ab7c <__NVIC_DisableIRQ>:
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	db10      	blt.n	800abb0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	f003 021f 	and.w	r2, r3, #31
 800ab94:	4909      	ldr	r1, [pc, #36]	; (800abbc <__NVIC_DisableIRQ+0x40>)
 800ab96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	fa00 f202 	lsl.w	r2, r0, r2
 800aba2:	3320      	adds	r3, #32
 800aba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aba8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800abac:	f3bf 8f6f 	isb	sy
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000e100 	.word	0xe000e100

0800abc0 <__NVIC_SetPriority>:
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	6039      	str	r1, [r7, #0]
 800abca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db0a      	blt.n	800abea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	490c      	ldr	r1, [pc, #48]	; (800ac0c <__NVIC_SetPriority+0x4c>)
 800abda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abde:	0112      	lsls	r2, r2, #4
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	440b      	add	r3, r1
 800abe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800abe8:	e00a      	b.n	800ac00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	b2da      	uxtb	r2, r3
 800abee:	4908      	ldr	r1, [pc, #32]	; (800ac10 <__NVIC_SetPriority+0x50>)
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	f003 030f 	and.w	r3, r3, #15
 800abf6:	3b04      	subs	r3, #4
 800abf8:	0112      	lsls	r2, r2, #4
 800abfa:	b2d2      	uxtb	r2, r2
 800abfc:	440b      	add	r3, r1
 800abfe:	761a      	strb	r2, [r3, #24]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	e000e100 	.word	0xe000e100
 800ac10:	e000ed00 	.word	0xe000ed00

0800ac14 <NVIC_EncodePriority>:
{
 800ac14:	b480      	push	{r7}
 800ac16:	b089      	sub	sp, #36	; 0x24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	f1c3 0307 	rsb	r3, r3, #7
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	bf28      	it	cs
 800ac32:	2304      	movcs	r3, #4
 800ac34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	2b06      	cmp	r3, #6
 800ac3c:	d902      	bls.n	800ac44 <NVIC_EncodePriority+0x30>
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	3b03      	subs	r3, #3
 800ac42:	e000      	b.n	800ac46 <NVIC_EncodePriority+0x32>
 800ac44:	2300      	movs	r3, #0
 800ac46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac52:	43da      	mvns	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	401a      	ands	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ac5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	fa01 f303 	lsl.w	r3, r1, r3
 800ac66:	43d9      	mvns	r1, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac6c:	4313      	orrs	r3, r2
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3724      	adds	r7, #36	; 0x24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
	...

0800ac7c <SysTick_Config>:
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac8c:	d301      	bcc.n	800ac92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e00f      	b.n	800acb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac92:	4a0a      	ldr	r2, [pc, #40]	; (800acbc <SysTick_Config+0x40>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac9a:	210f      	movs	r1, #15
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aca0:	f7ff ff8e 	bl	800abc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <SysTick_Config+0x40>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800acaa:	4b04      	ldr	r3, [pc, #16]	; (800acbc <SysTick_Config+0x40>)
 800acac:	2207      	movs	r2, #7
 800acae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	e000e010 	.word	0xe000e010

0800acc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ff07 	bl	800aadc <__NVIC_SetPriorityGrouping>
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b086      	sub	sp, #24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	4603      	mov	r3, r0
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ace4:	f7ff ff1e 	bl	800ab24 <__NVIC_GetPriorityGrouping>
 800ace8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7ff ff90 	bl	800ac14 <NVIC_EncodePriority>
 800acf4:	4602      	mov	r2, r0
 800acf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff ff5f 	bl	800abc0 <__NVIC_SetPriority>
}
 800ad02:	bf00      	nop
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	4603      	mov	r3, r0
 800ad12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff ff11 	bl	800ab40 <__NVIC_EnableIRQ>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ad30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ff21 	bl	800ab7c <__NVIC_DisableIRQ>
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff ff96 	bl	800ac7c <SysTick_Config>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e014      	b.n	800ad96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	791b      	ldrb	r3, [r3, #4]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d105      	bne.n	800ad82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7fc fad9 	bl	8007334 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	795b      	ldrb	r3, [r3, #5]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d101      	bne.n	800adb4 <HAL_DAC_Start+0x16>
 800adb0:	2302      	movs	r3, #2
 800adb2:	e043      	b.n	800ae3c <HAL_DAC_Start+0x9e>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6819      	ldr	r1, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	f003 0310 	and.w	r3, r3, #16
 800adcc:	2201      	movs	r2, #1
 800adce:	409a      	lsls	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800add8:	2001      	movs	r0, #1
 800adda:	f7fd fe65 	bl	8008aa8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10f      	bne.n	800ae04 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d11d      	bne.n	800ae2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f042 0201 	orr.w	r2, r2, #1
 800ae00:	605a      	str	r2, [r3, #4]
 800ae02:	e014      	b.n	800ae2e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2102      	movs	r1, #2
 800ae16:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d107      	bne.n	800ae2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f042 0202 	orr.w	r2, r2, #2
 800ae2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	795b      	ldrb	r3, [r3, #5]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d101      	bne.n	800ae62 <HAL_DAC_Start_DMA+0x1e>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e0a1      	b.n	800afa6 <HAL_DAC_Start_DMA+0x162>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d12a      	bne.n	800aeca <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	4a4d      	ldr	r2, [pc, #308]	; (800afb0 <HAL_DAC_Start_DMA+0x16c>)
 800ae7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	4a4c      	ldr	r2, [pc, #304]	; (800afb4 <HAL_DAC_Start_DMA+0x170>)
 800ae82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	4a4b      	ldr	r2, [pc, #300]	; (800afb8 <HAL_DAC_Start_DMA+0x174>)
 800ae8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d009      	beq.n	800aeb6 <HAL_DAC_Start_DMA+0x72>
 800aea2:	2b08      	cmp	r3, #8
 800aea4:	d00c      	beq.n	800aec0 <HAL_DAC_Start_DMA+0x7c>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d000      	beq.n	800aeac <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800aeaa:	e039      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	613b      	str	r3, [r7, #16]
        break;
 800aeb4:	e034      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	330c      	adds	r3, #12
 800aebc:	613b      	str	r3, [r7, #16]
        break;
 800aebe:	e02f      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3310      	adds	r3, #16
 800aec6:	613b      	str	r3, [r7, #16]
        break;
 800aec8:	e02a      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	4a3b      	ldr	r2, [pc, #236]	; (800afbc <HAL_DAC_Start_DMA+0x178>)
 800aed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	4a3a      	ldr	r2, [pc, #232]	; (800afc0 <HAL_DAC_Start_DMA+0x17c>)
 800aed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	4a39      	ldr	r2, [pc, #228]	; (800afc4 <HAL_DAC_Start_DMA+0x180>)
 800aee0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aef0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d009      	beq.n	800af0c <HAL_DAC_Start_DMA+0xc8>
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d00c      	beq.n	800af16 <HAL_DAC_Start_DMA+0xd2>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d000      	beq.n	800af02 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800af00:	e00e      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3314      	adds	r3, #20
 800af08:	613b      	str	r3, [r7, #16]
        break;
 800af0a:	e009      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3318      	adds	r3, #24
 800af12:	613b      	str	r3, [r7, #16]
        break;
 800af14:	e004      	b.n	800af20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	331c      	adds	r3, #28
 800af1c:	613b      	str	r3, [r7, #16]
        break;
 800af1e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d111      	bne.n	800af4a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6898      	ldr	r0, [r3, #8]
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	f000 fbd2 	bl	800b6e8 <HAL_DMA_Start_IT>
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]
 800af48:	e010      	b.n	800af6c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800af58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68d8      	ldr	r0, [r3, #12]
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	f000 fbc0 	bl	800b6e8 <HAL_DMA_Start_IT>
 800af68:	4603      	mov	r3, r0
 800af6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10f      	bne.n	800af98 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6819      	ldr	r1, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f003 0310 	and.w	r3, r3, #16
 800af84:	2201      	movs	r2, #1
 800af86:	409a      	lsls	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	430a      	orrs	r2, r1
 800af8e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800af90:	2001      	movs	r0, #1
 800af92:	f7fd fd89 	bl	8008aa8 <HAL_Delay>
 800af96:	e005      	b.n	800afa4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	f043 0204 	orr.w	r2, r3, #4
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	0800b485 	.word	0x0800b485
 800afb4:	0800b4a7 	.word	0x0800b4a7
 800afb8:	0800b4c3 	.word	0x0800b4c3
 800afbc:	0800b52d 	.word	0x0800b52d
 800afc0:	0800b54f 	.word	0x0800b54f
 800afc4:	0800b56b 	.word	0x0800b56b

0800afc8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6819      	ldr	r1, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f003 0310 	and.w	r3, r3, #16
 800afde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	43da      	mvns	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	400a      	ands	r2, r1
 800afee:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6819      	ldr	r1, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	f003 0310 	and.w	r3, r3, #16
 800affc:	2201      	movs	r2, #1
 800affe:	fa02 f303 	lsl.w	r3, r2, r3
 800b002:	43da      	mvns	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	400a      	ands	r2, r1
 800b00a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b00c:	2001      	movs	r0, #1
 800b00e:	f7fd fd4b 	bl	8008aa8 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10f      	bne.n	800b038 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fbde 	bl	800b7de <HAL_DMA_Abort>
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	e00e      	b.n	800b056 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 fbce 	bl	800b7de <HAL_DMA_Abort>
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b054:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2204      	movs	r2, #4
 800b060:	711a      	strb	r2, [r3, #4]
 800b062:	e002      	b.n	800b06a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d105      	bne.n	800b0a4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	3308      	adds	r3, #8
 800b0a0:	617b      	str	r3, [r7, #20]
 800b0a2:	e004      	b.n	800b0ae <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3314      	adds	r3, #20
 800b0ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	e002      	b.n	800b11e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b11e:	4618      	mov	r0, r3
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
	...

0800b12c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	795b      	ldrb	r3, [r3, #5]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_DAC_ConfigChannel+0x1c>
 800b144:	2302      	movs	r3, #2
 800b146:	e194      	b.n	800b472 <HAL_DAC_ConfigChannel+0x346>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2201      	movs	r2, #1
 800b14c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2202      	movs	r2, #2
 800b152:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	2b04      	cmp	r3, #4
 800b15a:	d174      	bne.n	800b246 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d137      	bne.n	800b1d2 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b162:	f7fd fc95 	bl	8008a90 <HAL_GetTick>
 800b166:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b168:	e011      	b.n	800b18e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b16a:	f7fd fc91 	bl	8008a90 <HAL_GetTick>
 800b16e:	4602      	mov	r2, r0
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	2b01      	cmp	r3, #1
 800b176:	d90a      	bls.n	800b18e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	f043 0208 	orr.w	r2, r3, #8
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2203      	movs	r2, #3
 800b188:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e171      	b.n	800b472 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e6      	bne.n	800b16a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b19c:	2001      	movs	r0, #1
 800b19e:	f7fd fc83 	bl	8008aa8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1aa:	641a      	str	r2, [r3, #64]	; 0x40
 800b1ac:	e01e      	b.n	800b1ec <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b1ae:	f7fd fc6f 	bl	8008a90 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d90a      	bls.n	800b1d2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f043 0208 	orr.w	r2, r3, #8
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e14f      	b.n	800b472 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dbe8      	blt.n	800b1ae <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b1dc:	2001      	movs	r0, #1
 800b1de:	f7fd fc63 	bl	8008aa8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f003 0310 	and.w	r3, r3, #16
 800b1f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	ea02 0103 	and.w	r1, r2, r3
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	409a      	lsls	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f003 0310 	and.w	r3, r3, #16
 800b226:	21ff      	movs	r1, #255	; 0xff
 800b228:	fa01 f303 	lsl.w	r3, r1, r3
 800b22c:	43db      	mvns	r3, r3
 800b22e:	ea02 0103 	and.w	r1, r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f003 0310 	and.w	r3, r3, #16
 800b23c:	409a      	lsls	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d11d      	bne.n	800b28a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f003 0310 	and.w	r3, r3, #16
 800b25c:	221f      	movs	r2, #31
 800b25e:	fa02 f303 	lsl.w	r3, r2, r3
 800b262:	43db      	mvns	r3, r3
 800b264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b266:	4013      	ands	r3, r2
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f003 0310 	and.w	r3, r3, #16
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	fa02 f303 	lsl.w	r3, r2, r3
 800b27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27e:	4313      	orrs	r3, r2
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b290:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f003 0310 	and.w	r3, r3, #16
 800b298:	2207      	movs	r2, #7
 800b29a:	fa02 f303 	lsl.w	r3, r2, r3
 800b29e:	43db      	mvns	r3, r3
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	623b      	str	r3, [r7, #32]
 800b2b6:	e011      	b.n	800b2dc <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	623b      	str	r3, [r7, #32]
 800b2c8:	e008      	b.n	800b2dc <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	623b      	str	r3, [r7, #32]
 800b2d6:	e001      	b.n	800b2dc <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	6a3a      	ldr	r2, [r7, #32]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f003 0310 	and.w	r3, r3, #16
 800b2f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	4013      	ands	r3, r2
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d102      	bne.n	800b310 <HAL_DAC_ConfigChannel+0x1e4>
 800b30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b30e:	e000      	b.n	800b312 <HAL_DAC_ConfigChannel+0x1e6>
 800b310:	2300      	movs	r3, #0
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	4313      	orrs	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f003 0310 	and.w	r3, r3, #16
 800b31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b322:	fa02 f303 	lsl.w	r3, r2, r3
 800b326:	43db      	mvns	r3, r3
 800b328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32a:	4013      	ands	r3, r2
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	795b      	ldrb	r3, [r3, #5]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d102      	bne.n	800b33c <HAL_DAC_ConfigChannel+0x210>
 800b336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b33a:	e000      	b.n	800b33e <HAL_DAC_ConfigChannel+0x212>
 800b33c:	2300      	movs	r3, #0
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	4313      	orrs	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b34a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d114      	bne.n	800b37e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b354:	f001 fbc2 	bl	800cadc <HAL_RCC_GetHCLKFreq>
 800b358:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	4a47      	ldr	r2, [pc, #284]	; (800b47c <HAL_DAC_ConfigChannel+0x350>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d904      	bls.n	800b36c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b368:	627b      	str	r3, [r7, #36]	; 0x24
 800b36a:	e00d      	b.n	800b388 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4a44      	ldr	r2, [pc, #272]	; (800b480 <HAL_DAC_ConfigChannel+0x354>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d909      	bls.n	800b388 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
 800b37c:	e004      	b.n	800b388 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b384:	4313      	orrs	r3, r2
 800b386:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f003 0310 	and.w	r3, r3, #16
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	fa02 f303 	lsl.w	r3, r2, r3
 800b394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b396:	4313      	orrs	r3, r2
 800b398:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6819      	ldr	r1, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f003 0310 	and.w	r3, r3, #16
 800b3ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b6:	43da      	mvns	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	400a      	ands	r2, r1
 800b3be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f003 0310 	and.w	r3, r3, #16
 800b3ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d6:	43db      	mvns	r3, r3
 800b3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3da:	4013      	ands	r3, r2
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f003 0310 	and.w	r3, r3, #16
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f003 0310 	and.w	r3, r3, #16
 800b40a:	22c0      	movs	r2, #192	; 0xc0
 800b40c:	fa02 f303 	lsl.w	r3, r2, r3
 800b410:	43da      	mvns	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	400a      	ands	r2, r1
 800b418:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	089b      	lsrs	r3, r3, #2
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	089b      	lsrs	r3, r3, #2
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	4313      	orrs	r3, r2
 800b436:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b448:	fa01 f303 	lsl.w	r3, r1, r3
 800b44c:	43db      	mvns	r3, r3
 800b44e:	ea02 0103 	and.w	r1, r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	409a      	lsls	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	430a      	orrs	r2, r1
 800b462:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3728      	adds	r7, #40	; 0x28
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	09896800 	.word	0x09896800
 800b480:	04c4b400 	.word	0x04c4b400

0800b484 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff fe16 	bl	800b0c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2201      	movs	r2, #1
 800b49c:	711a      	strb	r2, [r3, #4]
}
 800b49e:	bf00      	nop
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7ff fe0f 	bl	800b0d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	f043 0204 	orr.w	r2, r3, #4
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff fe05 	bl	800b0ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	711a      	strb	r2, [r3, #4]
}
 800b4e8:	bf00      	nop
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7ff ffd8 	bl	800b4f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	711a      	strb	r2, [r3, #4]
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7ff ffd1 	bl	800b504 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	f043 0204 	orr.w	r2, r3, #4
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff ffc7 	bl	800b518 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2201      	movs	r2, #1
 800b58e:	711a      	strb	r2, [r3, #4]
}
 800b590:	bf00      	nop
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e08d      	b.n	800b6c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4b47      	ldr	r3, [pc, #284]	; (800b6d0 <HAL_DMA_Init+0x138>)
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d80f      	bhi.n	800b5d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4b45      	ldr	r3, [pc, #276]	; (800b6d4 <HAL_DMA_Init+0x13c>)
 800b5be:	4413      	add	r3, r2
 800b5c0:	4a45      	ldr	r2, [pc, #276]	; (800b6d8 <HAL_DMA_Init+0x140>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	091b      	lsrs	r3, r3, #4
 800b5c8:	009a      	lsls	r2, r3, #2
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a42      	ldr	r2, [pc, #264]	; (800b6dc <HAL_DMA_Init+0x144>)
 800b5d2:	641a      	str	r2, [r3, #64]	; 0x40
 800b5d4:	e00e      	b.n	800b5f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4b40      	ldr	r3, [pc, #256]	; (800b6e0 <HAL_DMA_Init+0x148>)
 800b5de:	4413      	add	r3, r2
 800b5e0:	4a3d      	ldr	r2, [pc, #244]	; (800b6d8 <HAL_DMA_Init+0x140>)
 800b5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e6:	091b      	lsrs	r3, r3, #4
 800b5e8:	009a      	lsls	r2, r3, #2
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a3c      	ldr	r2, [pc, #240]	; (800b6e4 <HAL_DMA_Init+0x14c>)
 800b5f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b60e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa10 	bl	800ba6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b654:	d102      	bne.n	800b65c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685a      	ldr	r2, [r3, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b664:	b2d2      	uxtb	r2, r2
 800b666:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b670:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d010      	beq.n	800b69c <HAL_DMA_Init+0x104>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	2b04      	cmp	r3, #4
 800b680:	d80c      	bhi.n	800b69c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa30 	bl	800bae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	e008      	b.n	800b6ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40020407 	.word	0x40020407
 800b6d4:	bffdfff8 	.word	0xbffdfff8
 800b6d8:	cccccccd 	.word	0xcccccccd
 800b6dc:	40020000 	.word	0x40020000
 800b6e0:	bffdfbf8 	.word	0xbffdfbf8
 800b6e4:	40020400 	.word	0x40020400

0800b6e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_DMA_Start_IT+0x20>
 800b704:	2302      	movs	r3, #2
 800b706:	e066      	b.n	800b7d6 <HAL_DMA_Start_IT+0xee>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d155      	bne.n	800b7c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0201 	bic.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f954 	bl	800b9ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d008      	beq.n	800b760 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f042 020e 	orr.w	r2, r2, #14
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	e00f      	b.n	800b780 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f022 0204 	bic.w	r2, r2, #4
 800b76e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 020a 	orr.w	r2, r2, #10
 800b77e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b79c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f042 0201 	orr.w	r2, r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	e005      	b.n	800b7d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d005      	beq.n	800b802 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	73fb      	strb	r3, [r7, #15]
 800b800:	e037      	b.n	800b872 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 020e 	bic.w	r2, r2, #14
 800b810:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b81c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b820:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0201 	bic.w	r2, r2, #1
 800b830:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b836:	f003 021f 	and.w	r2, r3, #31
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83e:	2101      	movs	r1, #1
 800b840:	fa01 f202 	lsl.w	r2, r1, r2
 800b844:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b84e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00c      	beq.n	800b872 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b866:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b870:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b882:	7bfb      	ldrb	r3, [r7, #15]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	409a      	lsls	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d026      	beq.n	800b90a <HAL_DMA_IRQHandler+0x7a>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d021      	beq.n	800b90a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0320 	and.w	r3, r3, #32
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d107      	bne.n	800b8e4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f022 0204 	bic.w	r2, r2, #4
 800b8e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e8:	f003 021f 	and.w	r2, r3, #31
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f0:	2104      	movs	r1, #4
 800b8f2:	fa01 f202 	lsl.w	r2, r1, r2
 800b8f6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d071      	beq.n	800b9e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b908:	e06c      	b.n	800b9e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b90e:	f003 031f 	and.w	r3, r3, #31
 800b912:	2202      	movs	r2, #2
 800b914:	409a      	lsls	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4013      	ands	r3, r2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d02e      	beq.n	800b97c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d029      	beq.n	800b97c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0320 	and.w	r3, r3, #32
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10b      	bne.n	800b94e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 020a 	bic.w	r2, r2, #10
 800b944:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	f003 021f 	and.w	r2, r3, #31
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95a:	2102      	movs	r1, #2
 800b95c:	fa01 f202 	lsl.w	r2, r1, r2
 800b960:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d038      	beq.n	800b9e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b97a:	e033      	b.n	800b9e4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b980:	f003 031f 	and.w	r3, r3, #31
 800b984:	2208      	movs	r2, #8
 800b986:	409a      	lsls	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	4013      	ands	r3, r2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02a      	beq.n	800b9e6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d025      	beq.n	800b9e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 020e 	bic.w	r2, r2, #14
 800b9a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ae:	f003 021f 	and.w	r2, r3, #31
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	fa01 f202 	lsl.w	r2, r1, r2
 800b9bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
}
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b085      	sub	sp, #20
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ba04:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ba16:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba1c:	f003 021f 	and.w	r2, r3, #31
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	2101      	movs	r1, #1
 800ba26:	fa01 f202 	lsl.w	r2, r1, r2
 800ba2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	2b10      	cmp	r3, #16
 800ba3a:	d108      	bne.n	800ba4e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ba4c:	e007      	b.n	800ba5e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	60da      	str	r2, [r3, #12]
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
	...

0800ba6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d802      	bhi.n	800ba86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ba80:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e001      	b.n	800ba8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ba86:	4b15      	ldr	r3, [pc, #84]	; (800badc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ba88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	3b08      	subs	r3, #8
 800ba96:	4a12      	ldr	r2, [pc, #72]	; (800bae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ba98:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9c:	091b      	lsrs	r3, r3, #4
 800ba9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa4:	089b      	lsrs	r3, r3, #2
 800baa6:	009a      	lsls	r2, r3, #2
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	4413      	add	r3, r2
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a0b      	ldr	r2, [pc, #44]	; (800bae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bab6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2201      	movs	r2, #1
 800bac0:	409a      	lsls	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bac6:	bf00      	nop
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40020407 	.word	0x40020407
 800bad8:	40020800 	.word	0x40020800
 800badc:	40020820 	.word	0x40020820
 800bae0:	cccccccd 	.word	0xcccccccd
 800bae4:	40020880 	.word	0x40020880

0800bae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	461a      	mov	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bb0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	f003 031f 	and.w	r3, r3, #31
 800bb14:	2201      	movs	r2, #1
 800bb16:	409a      	lsls	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	1000823f 	.word	0x1000823f
 800bb2c:	40020940 	.word	0x40020940

0800bb30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bb3e:	e15a      	b.n	800bdf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	2101      	movs	r1, #1
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	fa01 f303 	lsl.w	r3, r1, r3
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 814c 	beq.w	800bdf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d00b      	beq.n	800bb78 <HAL_GPIO_Init+0x48>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d007      	beq.n	800bb78 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bb6c:	2b11      	cmp	r3, #17
 800bb6e:	d003      	beq.n	800bb78 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	2b12      	cmp	r3, #18
 800bb76:	d130      	bne.n	800bbda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	2203      	movs	r2, #3
 800bb84:	fa02 f303 	lsl.w	r3, r2, r3
 800bb88:	43db      	mvns	r3, r3
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bbae:	2201      	movs	r2, #1
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb6:	43db      	mvns	r3, r3
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	4013      	ands	r3, r2
 800bbbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	091b      	lsrs	r3, r3, #4
 800bbc4:	f003 0201 	and.w	r2, r3, #1
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	fa02 f303 	lsl.w	r3, r2, r3
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	2203      	movs	r2, #3
 800bbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbea:	43db      	mvns	r3, r3
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d003      	beq.n	800bc1a <HAL_GPIO_Init+0xea>
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	2b12      	cmp	r3, #18
 800bc18:	d123      	bne.n	800bc62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	08da      	lsrs	r2, r3, #3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	3208      	adds	r2, #8
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f003 0307 	and.w	r3, r3, #7
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	220f      	movs	r2, #15
 800bc32:	fa02 f303 	lsl.w	r3, r2, r3
 800bc36:	43db      	mvns	r3, r3
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	691a      	ldr	r2, [r3, #16]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f003 0307 	and.w	r3, r3, #7
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	08da      	lsrs	r2, r3, #3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3208      	adds	r2, #8
 800bc5c:	6939      	ldr	r1, [r7, #16]
 800bc5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	4013      	ands	r3, r2
 800bc78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f003 0203 	and.w	r2, r3, #3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f000 80a6 	beq.w	800bdf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bca4:	4b5b      	ldr	r3, [pc, #364]	; (800be14 <HAL_GPIO_Init+0x2e4>)
 800bca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca8:	4a5a      	ldr	r2, [pc, #360]	; (800be14 <HAL_GPIO_Init+0x2e4>)
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	6613      	str	r3, [r2, #96]	; 0x60
 800bcb0:	4b58      	ldr	r3, [pc, #352]	; (800be14 <HAL_GPIO_Init+0x2e4>)
 800bcb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	60bb      	str	r3, [r7, #8]
 800bcba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bcbc:	4a56      	ldr	r2, [pc, #344]	; (800be18 <HAL_GPIO_Init+0x2e8>)
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	089b      	lsrs	r3, r3, #2
 800bcc2:	3302      	adds	r3, #2
 800bcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	220f      	movs	r2, #15
 800bcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd8:	43db      	mvns	r3, r3
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	4013      	ands	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bce6:	d01f      	beq.n	800bd28 <HAL_GPIO_Init+0x1f8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a4c      	ldr	r2, [pc, #304]	; (800be1c <HAL_GPIO_Init+0x2ec>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d019      	beq.n	800bd24 <HAL_GPIO_Init+0x1f4>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a4b      	ldr	r2, [pc, #300]	; (800be20 <HAL_GPIO_Init+0x2f0>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d013      	beq.n	800bd20 <HAL_GPIO_Init+0x1f0>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a4a      	ldr	r2, [pc, #296]	; (800be24 <HAL_GPIO_Init+0x2f4>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d00d      	beq.n	800bd1c <HAL_GPIO_Init+0x1ec>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a49      	ldr	r2, [pc, #292]	; (800be28 <HAL_GPIO_Init+0x2f8>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d007      	beq.n	800bd18 <HAL_GPIO_Init+0x1e8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a48      	ldr	r2, [pc, #288]	; (800be2c <HAL_GPIO_Init+0x2fc>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d101      	bne.n	800bd14 <HAL_GPIO_Init+0x1e4>
 800bd10:	2305      	movs	r3, #5
 800bd12:	e00a      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd14:	2306      	movs	r3, #6
 800bd16:	e008      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	e006      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e004      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e002      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e000      	b.n	800bd2a <HAL_GPIO_Init+0x1fa>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	f002 0203 	and.w	r2, r2, #3
 800bd30:	0092      	lsls	r2, r2, #2
 800bd32:	4093      	lsls	r3, r2
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd3a:	4937      	ldr	r1, [pc, #220]	; (800be18 <HAL_GPIO_Init+0x2e8>)
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	089b      	lsrs	r3, r3, #2
 800bd40:	3302      	adds	r3, #2
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bd48:	4b39      	ldr	r3, [pc, #228]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	43db      	mvns	r3, r3
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4013      	ands	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bd6c:	4a30      	ldr	r2, [pc, #192]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bd72:	4b2f      	ldr	r3, [pc, #188]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	43db      	mvns	r3, r3
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4013      	ands	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bd96:	4a26      	ldr	r2, [pc, #152]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bd9c:	4b24      	ldr	r3, [pc, #144]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	43db      	mvns	r3, r3
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d003      	beq.n	800bdc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bdc6:	4b1a      	ldr	r3, [pc, #104]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	43db      	mvns	r3, r3
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bdea:	4a11      	ldr	r2, [pc, #68]	; (800be30 <HAL_GPIO_Init+0x300>)
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	f47f ae9d 	bne.w	800bb40 <HAL_GPIO_Init+0x10>
  }
}
 800be06:	bf00      	nop
 800be08:	371c      	adds	r7, #28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40021000 	.word	0x40021000
 800be18:	40010000 	.word	0x40010000
 800be1c:	48000400 	.word	0x48000400
 800be20:	48000800 	.word	0x48000800
 800be24:	48000c00 	.word	0x48000c00
 800be28:	48001000 	.word	0x48001000
 800be2c:	48001400 	.word	0x48001400
 800be30:	40010400 	.word	0x40010400

0800be34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800be42:	e0bd      	b.n	800bfc0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800be44:	2201      	movs	r2, #1
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	fa02 f303 	lsl.w	r3, r2, r3
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4013      	ands	r3, r2
 800be50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 80b0 	beq.w	800bfba <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800be5a:	4a60      	ldr	r2, [pc, #384]	; (800bfdc <HAL_GPIO_DeInit+0x1a8>)
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	089b      	lsrs	r3, r3, #2
 800be60:	3302      	adds	r3, #2
 800be62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	220f      	movs	r2, #15
 800be72:	fa02 f303 	lsl.w	r3, r2, r3
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4013      	ands	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800be82:	d01f      	beq.n	800bec4 <HAL_GPIO_DeInit+0x90>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a56      	ldr	r2, [pc, #344]	; (800bfe0 <HAL_GPIO_DeInit+0x1ac>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d019      	beq.n	800bec0 <HAL_GPIO_DeInit+0x8c>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a55      	ldr	r2, [pc, #340]	; (800bfe4 <HAL_GPIO_DeInit+0x1b0>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d013      	beq.n	800bebc <HAL_GPIO_DeInit+0x88>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a54      	ldr	r2, [pc, #336]	; (800bfe8 <HAL_GPIO_DeInit+0x1b4>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d00d      	beq.n	800beb8 <HAL_GPIO_DeInit+0x84>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a53      	ldr	r2, [pc, #332]	; (800bfec <HAL_GPIO_DeInit+0x1b8>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d007      	beq.n	800beb4 <HAL_GPIO_DeInit+0x80>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a52      	ldr	r2, [pc, #328]	; (800bff0 <HAL_GPIO_DeInit+0x1bc>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d101      	bne.n	800beb0 <HAL_GPIO_DeInit+0x7c>
 800beac:	2305      	movs	r3, #5
 800beae:	e00a      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800beb0:	2306      	movs	r3, #6
 800beb2:	e008      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800beb4:	2304      	movs	r3, #4
 800beb6:	e006      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800beb8:	2303      	movs	r3, #3
 800beba:	e004      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800bebc:	2302      	movs	r3, #2
 800bebe:	e002      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <HAL_GPIO_DeInit+0x92>
 800bec4:	2300      	movs	r3, #0
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	f002 0203 	and.w	r2, r2, #3
 800becc:	0092      	lsls	r2, r2, #2
 800bece:	4093      	lsls	r3, r2
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d132      	bne.n	800bf3c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bed6:	4b47      	ldr	r3, [pc, #284]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	43db      	mvns	r3, r3
 800bede:	4945      	ldr	r1, [pc, #276]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bee4:	4b43      	ldr	r3, [pc, #268]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	43db      	mvns	r3, r3
 800beec:	4941      	ldr	r1, [pc, #260]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800beee:	4013      	ands	r3, r2
 800bef0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bef2:	4b40      	ldr	r3, [pc, #256]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	43db      	mvns	r3, r3
 800befa:	493e      	ldr	r1, [pc, #248]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800befc:	4013      	ands	r3, r2
 800befe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bf00:	4b3c      	ldr	r3, [pc, #240]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	43db      	mvns	r3, r3
 800bf08:	493a      	ldr	r1, [pc, #232]	; (800bff4 <HAL_GPIO_DeInit+0x1c0>)
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	220f      	movs	r2, #15
 800bf18:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bf1e:	4a2f      	ldr	r2, [pc, #188]	; (800bfdc <HAL_GPIO_DeInit+0x1a8>)
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	089b      	lsrs	r3, r3, #2
 800bf24:	3302      	adds	r3, #2
 800bf26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	43da      	mvns	r2, r3
 800bf2e:	482b      	ldr	r0, [pc, #172]	; (800bfdc <HAL_GPIO_DeInit+0x1a8>)
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	089b      	lsrs	r3, r3, #2
 800bf34:	400a      	ands	r2, r1
 800bf36:	3302      	adds	r3, #2
 800bf38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	005b      	lsls	r3, r3, #1
 800bf44:	2103      	movs	r1, #3
 800bf46:	fa01 f303 	lsl.w	r3, r1, r3
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	08da      	lsrs	r2, r3, #3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3208      	adds	r2, #8
 800bf58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f003 0307 	and.w	r3, r3, #7
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	220f      	movs	r2, #15
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	08d2      	lsrs	r2, r2, #3
 800bf70:	4019      	ands	r1, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	3208      	adds	r2, #8
 800bf76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	2103      	movs	r1, #3
 800bf84:	fa01 f303 	lsl.w	r3, r1, r3
 800bf88:	43db      	mvns	r3, r3
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	2101      	movs	r1, #1
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	fa01 f303 	lsl.w	r3, r1, r3
 800bf9c:	43db      	mvns	r3, r3
 800bf9e:	401a      	ands	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	2103      	movs	r1, #3
 800bfae:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	401a      	ands	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	609a      	str	r2, [r3, #8]
    }

    position++;
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f47f af3b 	bne.w	800be44 <HAL_GPIO_DeInit+0x10>
  }
}
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	40010000 	.word	0x40010000
 800bfe0:	48000400 	.word	0x48000400
 800bfe4:	48000800 	.word	0x48000800
 800bfe8:	48000c00 	.word	0x48000c00
 800bfec:	48001000 	.word	0x48001000
 800bff0:	48001400 	.word	0x48001400
 800bff4:	40010400 	.word	0x40010400

0800bff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	460b      	mov	r3, r1
 800c002:	807b      	strh	r3, [r7, #2]
 800c004:	4613      	mov	r3, r2
 800c006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c008:	787b      	ldrb	r3, [r7, #1]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c00e:	887a      	ldrh	r2, [r7, #2]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c014:	e002      	b.n	800c01c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c016:	887a      	ldrh	r2, [r7, #2]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d141      	bne.n	800c0ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c036:	4b4b      	ldr	r3, [pc, #300]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c03e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c042:	d131      	bne.n	800c0a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c044:	4b47      	ldr	r3, [pc, #284]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04a:	4a46      	ldr	r2, [pc, #280]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c04c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c054:	4b43      	ldr	r3, [pc, #268]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c05c:	4a41      	ldr	r2, [pc, #260]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c05e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2232      	movs	r2, #50	; 0x32
 800c06a:	fb02 f303 	mul.w	r3, r2, r3
 800c06e:	4a3f      	ldr	r2, [pc, #252]	; (800c16c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c070:	fba2 2303 	umull	r2, r3, r2, r3
 800c074:	0c9b      	lsrs	r3, r3, #18
 800c076:	3301      	adds	r3, #1
 800c078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c07a:	e002      	b.n	800c082 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3b01      	subs	r3, #1
 800c080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c082:	4b38      	ldr	r3, [pc, #224]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c08e:	d102      	bne.n	800c096 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1f2      	bne.n	800c07c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c096:	4b33      	ldr	r3, [pc, #204]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c09e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a2:	d158      	bne.n	800c156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e057      	b.n	800c158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c0a8:	4b2e      	ldr	r3, [pc, #184]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ae:	4a2d      	ldr	r2, [pc, #180]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c0b8:	e04d      	b.n	800c156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0c0:	d141      	bne.n	800c146 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c0c2:	4b28      	ldr	r3, [pc, #160]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ce:	d131      	bne.n	800c134 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c0d0:	4b24      	ldr	r3, [pc, #144]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0d6:	4a23      	ldr	r2, [pc, #140]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0e0:	4b20      	ldr	r3, [pc, #128]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c0e8:	4a1e      	ldr	r2, [pc, #120]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c0ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0f0:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2232      	movs	r2, #50	; 0x32
 800c0f6:	fb02 f303 	mul.w	r3, r2, r3
 800c0fa:	4a1c      	ldr	r2, [pc, #112]	; (800c16c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c100:	0c9b      	lsrs	r3, r3, #18
 800c102:	3301      	adds	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c106:	e002      	b.n	800c10e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c10e:	4b15      	ldr	r3, [pc, #84]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c11a:	d102      	bne.n	800c122 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1f2      	bne.n	800c108 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c122:	4b10      	ldr	r3, [pc, #64]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c12a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c12e:	d112      	bne.n	800c156 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c130:	2303      	movs	r3, #3
 800c132:	e011      	b.n	800c158 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c134:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c13a:	4a0a      	ldr	r2, [pc, #40]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c13c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c144:	e007      	b.n	800c156 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c14e:	4a05      	ldr	r2, [pc, #20]	; (800c164 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c154:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	40007000 	.word	0x40007000
 800c168:	20000c34 	.word	0x20000c34
 800c16c:	431bde83 	.word	0x431bde83

0800c170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e308      	b.n	800c794 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d075      	beq.n	800c27a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c18e:	4ba3      	ldr	r3, [pc, #652]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f003 030c 	and.w	r3, r3, #12
 800c196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c198:	4ba0      	ldr	r3, [pc, #640]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b0c      	cmp	r3, #12
 800c1a6:	d102      	bne.n	800c1ae <HAL_RCC_OscConfig+0x3e>
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d002      	beq.n	800c1b4 <HAL_RCC_OscConfig+0x44>
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d10b      	bne.n	800c1cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1b4:	4b99      	ldr	r3, [pc, #612]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d05b      	beq.n	800c278 <HAL_RCC_OscConfig+0x108>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d157      	bne.n	800c278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e2e3      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d4:	d106      	bne.n	800c1e4 <HAL_RCC_OscConfig+0x74>
 800c1d6:	4b91      	ldr	r3, [pc, #580]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a90      	ldr	r2, [pc, #576]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	e01d      	b.n	800c220 <HAL_RCC_OscConfig+0xb0>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1ec:	d10c      	bne.n	800c208 <HAL_RCC_OscConfig+0x98>
 800c1ee:	4b8b      	ldr	r3, [pc, #556]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a8a      	ldr	r2, [pc, #552]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	4b88      	ldr	r3, [pc, #544]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a87      	ldr	r2, [pc, #540]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	e00b      	b.n	800c220 <HAL_RCC_OscConfig+0xb0>
 800c208:	4b84      	ldr	r3, [pc, #528]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a83      	ldr	r2, [pc, #524]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c20e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	4b81      	ldr	r3, [pc, #516]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a80      	ldr	r2, [pc, #512]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c21a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c21e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d013      	beq.n	800c250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c228:	f7fc fc32 	bl	8008a90 <HAL_GetTick>
 800c22c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c22e:	e008      	b.n	800c242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c230:	f7fc fc2e 	bl	8008a90 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	2b64      	cmp	r3, #100	; 0x64
 800c23c:	d901      	bls.n	800c242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e2a8      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c242:	4b76      	ldr	r3, [pc, #472]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0f0      	beq.n	800c230 <HAL_RCC_OscConfig+0xc0>
 800c24e:	e014      	b.n	800c27a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c250:	f7fc fc1e 	bl	8008a90 <HAL_GetTick>
 800c254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c256:	e008      	b.n	800c26a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c258:	f7fc fc1a 	bl	8008a90 <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	2b64      	cmp	r3, #100	; 0x64
 800c264:	d901      	bls.n	800c26a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c266:	2303      	movs	r3, #3
 800c268:	e294      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c26a:	4b6c      	ldr	r3, [pc, #432]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1f0      	bne.n	800c258 <HAL_RCC_OscConfig+0xe8>
 800c276:	e000      	b.n	800c27a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0302 	and.w	r3, r3, #2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d075      	beq.n	800c372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c286:	4b65      	ldr	r3, [pc, #404]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 030c 	and.w	r3, r3, #12
 800c28e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c290:	4b62      	ldr	r3, [pc, #392]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f003 0303 	and.w	r3, r3, #3
 800c298:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b0c      	cmp	r3, #12
 800c29e:	d102      	bne.n	800c2a6 <HAL_RCC_OscConfig+0x136>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d002      	beq.n	800c2ac <HAL_RCC_OscConfig+0x13c>
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2b04      	cmp	r3, #4
 800c2aa:	d11f      	bne.n	800c2ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2ac:	4b5b      	ldr	r3, [pc, #364]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x154>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e267      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2c4:	4b55      	ldr	r3, [pc, #340]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	061b      	lsls	r3, r3, #24
 800c2d2:	4952      	ldr	r1, [pc, #328]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c2d8:	4b51      	ldr	r3, [pc, #324]	; (800c420 <HAL_RCC_OscConfig+0x2b0>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fc fb8b 	bl	80089f8 <HAL_InitTick>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d043      	beq.n	800c370 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e253      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d023      	beq.n	800c33c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c2f4:	4b49      	ldr	r3, [pc, #292]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a48      	ldr	r2, [pc, #288]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c2fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c300:	f7fc fbc6 	bl	8008a90 <HAL_GetTick>
 800c304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c306:	e008      	b.n	800c31a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c308:	f7fc fbc2 	bl	8008a90 <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	2b02      	cmp	r3, #2
 800c314:	d901      	bls.n	800c31a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e23c      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c31a:	4b40      	ldr	r3, [pc, #256]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0f0      	beq.n	800c308 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c326:	4b3d      	ldr	r3, [pc, #244]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	061b      	lsls	r3, r3, #24
 800c334:	4939      	ldr	r1, [pc, #228]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c336:	4313      	orrs	r3, r2
 800c338:	604b      	str	r3, [r1, #4]
 800c33a:	e01a      	b.n	800c372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c33c:	4b37      	ldr	r3, [pc, #220]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a36      	ldr	r2, [pc, #216]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c348:	f7fc fba2 	bl	8008a90 <HAL_GetTick>
 800c34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c34e:	e008      	b.n	800c362 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c350:	f7fc fb9e 	bl	8008a90 <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d901      	bls.n	800c362 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e218      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c362:	4b2e      	ldr	r3, [pc, #184]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1f0      	bne.n	800c350 <HAL_RCC_OscConfig+0x1e0>
 800c36e:	e000      	b.n	800c372 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0308 	and.w	r3, r3, #8
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d03c      	beq.n	800c3f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d01c      	beq.n	800c3c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c386:	4b25      	ldr	r3, [pc, #148]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c38c:	4a23      	ldr	r2, [pc, #140]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c38e:	f043 0301 	orr.w	r3, r3, #1
 800c392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c396:	f7fc fb7b 	bl	8008a90 <HAL_GetTick>
 800c39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c39c:	e008      	b.n	800c3b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c39e:	f7fc fb77 	bl	8008a90 <HAL_GetTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d901      	bls.n	800c3b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e1f1      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c3b0:	4b1a      	ldr	r3, [pc, #104]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c3b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3b6:	f003 0302 	and.w	r3, r3, #2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0ef      	beq.n	800c39e <HAL_RCC_OscConfig+0x22e>
 800c3be:	e01b      	b.n	800c3f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3c0:	4b16      	ldr	r3, [pc, #88]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c3c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c6:	4a15      	ldr	r2, [pc, #84]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c3c8:	f023 0301 	bic.w	r3, r3, #1
 800c3cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3d0:	f7fc fb5e 	bl	8008a90 <HAL_GetTick>
 800c3d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c3d6:	e008      	b.n	800c3ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3d8:	f7fc fb5a 	bl	8008a90 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d901      	bls.n	800c3ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e1d4      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c3ea:	4b0c      	ldr	r3, [pc, #48]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c3ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3f0:	f003 0302 	and.w	r3, r3, #2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1ef      	bne.n	800c3d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 80ab 	beq.w	800c55c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c406:	2300      	movs	r3, #0
 800c408:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c40a:	4b04      	ldr	r3, [pc, #16]	; (800c41c <HAL_RCC_OscConfig+0x2ac>)
 800c40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <HAL_RCC_OscConfig+0x2b4>
 800c416:	2301      	movs	r3, #1
 800c418:	e005      	b.n	800c426 <HAL_RCC_OscConfig+0x2b6>
 800c41a:	bf00      	nop
 800c41c:	40021000 	.word	0x40021000
 800c420:	20000c38 	.word	0x20000c38
 800c424:	2300      	movs	r3, #0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00d      	beq.n	800c446 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c42a:	4baf      	ldr	r3, [pc, #700]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c42e:	4aae      	ldr	r2, [pc, #696]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c434:	6593      	str	r3, [r2, #88]	; 0x58
 800c436:	4bac      	ldr	r3, [pc, #688]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c442:	2301      	movs	r3, #1
 800c444:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c446:	4ba9      	ldr	r3, [pc, #676]	; (800c6ec <HAL_RCC_OscConfig+0x57c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d118      	bne.n	800c484 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c452:	4ba6      	ldr	r3, [pc, #664]	; (800c6ec <HAL_RCC_OscConfig+0x57c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4aa5      	ldr	r2, [pc, #660]	; (800c6ec <HAL_RCC_OscConfig+0x57c>)
 800c458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c45c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c45e:	f7fc fb17 	bl	8008a90 <HAL_GetTick>
 800c462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c464:	e008      	b.n	800c478 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c466:	f7fc fb13 	bl	8008a90 <HAL_GetTick>
 800c46a:	4602      	mov	r2, r0
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	2b02      	cmp	r3, #2
 800c472:	d901      	bls.n	800c478 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e18d      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c478:	4b9c      	ldr	r3, [pc, #624]	; (800c6ec <HAL_RCC_OscConfig+0x57c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0f0      	beq.n	800c466 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d108      	bne.n	800c49e <HAL_RCC_OscConfig+0x32e>
 800c48c:	4b96      	ldr	r3, [pc, #600]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c492:	4a95      	ldr	r2, [pc, #596]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c494:	f043 0301 	orr.w	r3, r3, #1
 800c498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c49c:	e024      	b.n	800c4e8 <HAL_RCC_OscConfig+0x378>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	d110      	bne.n	800c4c8 <HAL_RCC_OscConfig+0x358>
 800c4a6:	4b90      	ldr	r3, [pc, #576]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ac:	4a8e      	ldr	r2, [pc, #568]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4ae:	f043 0304 	orr.w	r3, r3, #4
 800c4b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4b6:	4b8c      	ldr	r3, [pc, #560]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4bc:	4a8a      	ldr	r2, [pc, #552]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4be:	f043 0301 	orr.w	r3, r3, #1
 800c4c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4c6:	e00f      	b.n	800c4e8 <HAL_RCC_OscConfig+0x378>
 800c4c8:	4b87      	ldr	r3, [pc, #540]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ce:	4a86      	ldr	r2, [pc, #536]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4d8:	4b83      	ldr	r3, [pc, #524]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4de:	4a82      	ldr	r2, [pc, #520]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c4e0:	f023 0304 	bic.w	r3, r3, #4
 800c4e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d016      	beq.n	800c51e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4f0:	f7fc face 	bl	8008a90 <HAL_GetTick>
 800c4f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4f6:	e00a      	b.n	800c50e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4f8:	f7fc faca 	bl	8008a90 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	f241 3288 	movw	r2, #5000	; 0x1388
 800c506:	4293      	cmp	r3, r2
 800c508:	d901      	bls.n	800c50e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e142      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c50e:	4b76      	ldr	r3, [pc, #472]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0ed      	beq.n	800c4f8 <HAL_RCC_OscConfig+0x388>
 800c51c:	e015      	b.n	800c54a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c51e:	f7fc fab7 	bl	8008a90 <HAL_GetTick>
 800c522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c524:	e00a      	b.n	800c53c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c526:	f7fc fab3 	bl	8008a90 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	f241 3288 	movw	r2, #5000	; 0x1388
 800c534:	4293      	cmp	r3, r2
 800c536:	d901      	bls.n	800c53c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e12b      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c53c:	4b6a      	ldr	r3, [pc, #424]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1ed      	bne.n	800c526 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c54a:	7ffb      	ldrb	r3, [r7, #31]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d105      	bne.n	800c55c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c550:	4b65      	ldr	r3, [pc, #404]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c554:	4a64      	ldr	r2, [pc, #400]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c55a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0320 	and.w	r3, r3, #32
 800c564:	2b00      	cmp	r3, #0
 800c566:	d03c      	beq.n	800c5e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d01c      	beq.n	800c5aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c570:	4b5d      	ldr	r3, [pc, #372]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c576:	4a5c      	ldr	r2, [pc, #368]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c578:	f043 0301 	orr.w	r3, r3, #1
 800c57c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c580:	f7fc fa86 	bl	8008a90 <HAL_GetTick>
 800c584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c586:	e008      	b.n	800c59a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c588:	f7fc fa82 	bl	8008a90 <HAL_GetTick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	2b02      	cmp	r3, #2
 800c594:	d901      	bls.n	800c59a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e0fc      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c59a:	4b53      	ldr	r3, [pc, #332]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c59c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0ef      	beq.n	800c588 <HAL_RCC_OscConfig+0x418>
 800c5a8:	e01b      	b.n	800c5e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c5aa:	4b4f      	ldr	r3, [pc, #316]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c5ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5b0:	4a4d      	ldr	r2, [pc, #308]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c5b2:	f023 0301 	bic.w	r3, r3, #1
 800c5b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5ba:	f7fc fa69 	bl	8008a90 <HAL_GetTick>
 800c5be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c5c0:	e008      	b.n	800c5d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c5c2:	f7fc fa65 	bl	8008a90 <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d901      	bls.n	800c5d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e0df      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c5d4:	4b44      	ldr	r3, [pc, #272]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c5d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1ef      	bne.n	800c5c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	69db      	ldr	r3, [r3, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80d3 	beq.w	800c792 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5ec:	4b3e      	ldr	r3, [pc, #248]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	f003 030c 	and.w	r3, r3, #12
 800c5f4:	2b0c      	cmp	r3, #12
 800c5f6:	f000 808d 	beq.w	800c714 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d15a      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c602:	4b39      	ldr	r3, [pc, #228]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a38      	ldr	r2, [pc, #224]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c60c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c60e:	f7fc fa3f 	bl	8008a90 <HAL_GetTick>
 800c612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c614:	e008      	b.n	800c628 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c616:	f7fc fa3b 	bl	8008a90 <HAL_GetTick>
 800c61a:	4602      	mov	r2, r0
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	2b02      	cmp	r3, #2
 800c622:	d901      	bls.n	800c628 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c624:	2303      	movs	r3, #3
 800c626:	e0b5      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c628:	4b2f      	ldr	r3, [pc, #188]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f0      	bne.n	800c616 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c634:	4b2c      	ldr	r3, [pc, #176]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	4b2d      	ldr	r3, [pc, #180]	; (800c6f0 <HAL_RCC_OscConfig+0x580>)
 800c63a:	4013      	ands	r3, r2
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	6a11      	ldr	r1, [r2, #32]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c644:	3a01      	subs	r2, #1
 800c646:	0112      	lsls	r2, r2, #4
 800c648:	4311      	orrs	r1, r2
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c64e:	0212      	lsls	r2, r2, #8
 800c650:	4311      	orrs	r1, r2
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c656:	0852      	lsrs	r2, r2, #1
 800c658:	3a01      	subs	r2, #1
 800c65a:	0552      	lsls	r2, r2, #21
 800c65c:	4311      	orrs	r1, r2
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c662:	0852      	lsrs	r2, r2, #1
 800c664:	3a01      	subs	r2, #1
 800c666:	0652      	lsls	r2, r2, #25
 800c668:	4311      	orrs	r1, r2
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c66e:	06d2      	lsls	r2, r2, #27
 800c670:	430a      	orrs	r2, r1
 800c672:	491d      	ldr	r1, [pc, #116]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c674:	4313      	orrs	r3, r2
 800c676:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c678:	4b1b      	ldr	r3, [pc, #108]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a1a      	ldr	r2, [pc, #104]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c67e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c682:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c684:	4b18      	ldr	r3, [pc, #96]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c68a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c68e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c690:	f7fc f9fe 	bl	8008a90 <HAL_GetTick>
 800c694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c696:	e008      	b.n	800c6aa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c698:	f7fc f9fa 	bl	8008a90 <HAL_GetTick>
 800c69c:	4602      	mov	r2, r0
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d901      	bls.n	800c6aa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e074      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c6aa:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d0f0      	beq.n	800c698 <HAL_RCC_OscConfig+0x528>
 800c6b6:	e06c      	b.n	800c792 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6b8:	4b0b      	ldr	r3, [pc, #44]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a0a      	ldr	r2, [pc, #40]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c6c4:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	4a07      	ldr	r2, [pc, #28]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c6d0:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	4a04      	ldr	r2, [pc, #16]	; (800c6e8 <HAL_RCC_OscConfig+0x578>)
 800c6d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6e0:	f7fc f9d6 	bl	8008a90 <HAL_GetTick>
 800c6e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6e6:	e00e      	b.n	800c706 <HAL_RCC_OscConfig+0x596>
 800c6e8:	40021000 	.word	0x40021000
 800c6ec:	40007000 	.word	0x40007000
 800c6f0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6f4:	f7fc f9cc 	bl	8008a90 <HAL_GetTick>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d901      	bls.n	800c706 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e046      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c706:	4b25      	ldr	r3, [pc, #148]	; (800c79c <HAL_RCC_OscConfig+0x62c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1f0      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x584>
 800c712:	e03e      	b.n	800c792 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	69db      	ldr	r3, [r3, #28]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d101      	bne.n	800c720 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e039      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c720:	4b1e      	ldr	r3, [pc, #120]	; (800c79c <HAL_RCC_OscConfig+0x62c>)
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f003 0203 	and.w	r2, r3, #3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	429a      	cmp	r2, r3
 800c732:	d12c      	bne.n	800c78e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	3b01      	subs	r3, #1
 800c740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c742:	429a      	cmp	r2, r3
 800c744:	d123      	bne.n	800c78e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c750:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c752:	429a      	cmp	r2, r3
 800c754:	d11b      	bne.n	800c78e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c762:	429a      	cmp	r2, r3
 800c764:	d113      	bne.n	800c78e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c770:	085b      	lsrs	r3, r3, #1
 800c772:	3b01      	subs	r3, #1
 800c774:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c776:	429a      	cmp	r2, r3
 800c778:	d109      	bne.n	800c78e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c784:	085b      	lsrs	r3, r3, #1
 800c786:	3b01      	subs	r3, #1
 800c788:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d001      	beq.n	800c792 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	40021000 	.word	0x40021000

0800c7a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e11e      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c7b8:	4b91      	ldr	r3, [pc, #580]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 030f 	and.w	r3, r3, #15
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d910      	bls.n	800c7e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7c6:	4b8e      	ldr	r3, [pc, #568]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f023 020f 	bic.w	r2, r3, #15
 800c7ce:	498c      	ldr	r1, [pc, #560]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7d6:	4b8a      	ldr	r3, [pc, #552]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 030f 	and.w	r3, r3, #15
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d001      	beq.n	800c7e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e106      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d073      	beq.n	800c8dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d129      	bne.n	800c850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7fc:	4b81      	ldr	r3, [pc, #516]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	e0f4      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c80c:	f000 f972 	bl	800caf4 <RCC_GetSysClockFreqFromPLLSource>
 800c810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	4a7c      	ldr	r2, [pc, #496]	; (800ca08 <HAL_RCC_ClockConfig+0x268>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d93f      	bls.n	800c89a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c81a:	4b7a      	ldr	r3, [pc, #488]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d033      	beq.n	800c89a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c836:	2b00      	cmp	r3, #0
 800c838:	d12f      	bne.n	800c89a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c83a:	4b72      	ldr	r3, [pc, #456]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c842:	4a70      	ldr	r2, [pc, #448]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c84a:	2380      	movs	r3, #128	; 0x80
 800c84c:	617b      	str	r3, [r7, #20]
 800c84e:	e024      	b.n	800c89a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d107      	bne.n	800c868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c858:	4b6a      	ldr	r3, [pc, #424]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d109      	bne.n	800c878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e0c6      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c868:	4b66      	ldr	r3, [pc, #408]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e0be      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c878:	f000 f8ce 	bl	800ca18 <HAL_RCC_GetSysClockFreq>
 800c87c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	4a61      	ldr	r2, [pc, #388]	; (800ca08 <HAL_RCC_ClockConfig+0x268>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d909      	bls.n	800c89a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c886:	4b5f      	ldr	r3, [pc, #380]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c88e:	4a5d      	ldr	r2, [pc, #372]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c896:	2380      	movs	r3, #128	; 0x80
 800c898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c89a:	4b5a      	ldr	r3, [pc, #360]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f023 0203 	bic.w	r2, r3, #3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	4957      	ldr	r1, [pc, #348]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8ac:	f7fc f8f0 	bl	8008a90 <HAL_GetTick>
 800c8b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8b2:	e00a      	b.n	800c8ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8b4:	f7fc f8ec 	bl	8008a90 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d901      	bls.n	800c8ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e095      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8ca:	4b4e      	ldr	r3, [pc, #312]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f003 020c 	and.w	r2, r3, #12
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d1eb      	bne.n	800c8b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d023      	beq.n	800c930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8f4:	4b43      	ldr	r3, [pc, #268]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	4a42      	ldr	r2, [pc, #264]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c8fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c8fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0308 	and.w	r3, r3, #8
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d007      	beq.n	800c91c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c90c:	4b3d      	ldr	r3, [pc, #244]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c914:	4a3b      	ldr	r2, [pc, #236]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c91a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c91c:	4b39      	ldr	r3, [pc, #228]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	4936      	ldr	r1, [pc, #216]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	608b      	str	r3, [r1, #8]
 800c92e:	e008      	b.n	800c942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2b80      	cmp	r3, #128	; 0x80
 800c934:	d105      	bne.n	800c942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c936:	4b33      	ldr	r3, [pc, #204]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	4a32      	ldr	r2, [pc, #200]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c93c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c942:	4b2f      	ldr	r3, [pc, #188]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 030f 	and.w	r3, r3, #15
 800c94a:	683a      	ldr	r2, [r7, #0]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d21d      	bcs.n	800c98c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c950:	4b2b      	ldr	r3, [pc, #172]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f023 020f 	bic.w	r2, r3, #15
 800c958:	4929      	ldr	r1, [pc, #164]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c960:	f7fc f896 	bl	8008a90 <HAL_GetTick>
 800c964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c966:	e00a      	b.n	800c97e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c968:	f7fc f892 	bl	8008a90 <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	f241 3288 	movw	r2, #5000	; 0x1388
 800c976:	4293      	cmp	r3, r2
 800c978:	d901      	bls.n	800c97e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e03b      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c97e:	4b20      	ldr	r3, [pc, #128]	; (800ca00 <HAL_RCC_ClockConfig+0x260>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 030f 	and.w	r3, r3, #15
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d1ed      	bne.n	800c968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0304 	and.w	r3, r3, #4
 800c994:	2b00      	cmp	r3, #0
 800c996:	d008      	beq.n	800c9aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c998:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	4917      	ldr	r1, [pc, #92]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0308 	and.w	r3, r3, #8
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d009      	beq.n	800c9ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c9b6:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	490f      	ldr	r1, [pc, #60]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c9ca:	f000 f825 	bl	800ca18 <HAL_RCC_GetSysClockFreq>
 800c9ce:	4601      	mov	r1, r0
 800c9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <HAL_RCC_ClockConfig+0x264>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	091b      	lsrs	r3, r3, #4
 800c9d6:	f003 030f 	and.w	r3, r3, #15
 800c9da:	4a0c      	ldr	r2, [pc, #48]	; (800ca0c <HAL_RCC_ClockConfig+0x26c>)
 800c9dc:	5cd3      	ldrb	r3, [r2, r3]
 800c9de:	f003 031f 	and.w	r3, r3, #31
 800c9e2:	fa21 f303 	lsr.w	r3, r1, r3
 800c9e6:	4a0a      	ldr	r2, [pc, #40]	; (800ca10 <HAL_RCC_ClockConfig+0x270>)
 800c9e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <HAL_RCC_ClockConfig+0x274>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fc f802 	bl	80089f8 <HAL_InitTick>
 800c9f4:	4603      	mov	r3, r0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	40022000 	.word	0x40022000
 800ca04:	40021000 	.word	0x40021000
 800ca08:	04c4b400 	.word	0x04c4b400
 800ca0c:	080153f4 	.word	0x080153f4
 800ca10:	20000c34 	.word	0x20000c34
 800ca14:	20000c38 	.word	0x20000c38

0800ca18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b087      	sub	sp, #28
 800ca1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ca1e:	4b2c      	ldr	r3, [pc, #176]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f003 030c 	and.w	r3, r3, #12
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d102      	bne.n	800ca30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ca2a:	4b2a      	ldr	r3, [pc, #168]	; (800cad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ca2c:	613b      	str	r3, [r7, #16]
 800ca2e:	e047      	b.n	800cac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ca30:	4b27      	ldr	r3, [pc, #156]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f003 030c 	and.w	r3, r3, #12
 800ca38:	2b08      	cmp	r3, #8
 800ca3a:	d102      	bne.n	800ca42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ca3c:	4b26      	ldr	r3, [pc, #152]	; (800cad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ca3e:	613b      	str	r3, [r7, #16]
 800ca40:	e03e      	b.n	800cac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ca42:	4b23      	ldr	r3, [pc, #140]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	f003 030c 	and.w	r3, r3, #12
 800ca4a:	2b0c      	cmp	r3, #12
 800ca4c:	d136      	bne.n	800cabc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ca4e:	4b20      	ldr	r3, [pc, #128]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	f003 0303 	and.w	r3, r3, #3
 800ca56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ca58:	4b1d      	ldr	r3, [pc, #116]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	091b      	lsrs	r3, r3, #4
 800ca5e:	f003 030f 	and.w	r3, r3, #15
 800ca62:	3301      	adds	r3, #1
 800ca64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d10c      	bne.n	800ca86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ca6c:	4a1a      	ldr	r2, [pc, #104]	; (800cad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca74:	4a16      	ldr	r2, [pc, #88]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca76:	68d2      	ldr	r2, [r2, #12]
 800ca78:	0a12      	lsrs	r2, r2, #8
 800ca7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca7e:	fb02 f303 	mul.w	r3, r2, r3
 800ca82:	617b      	str	r3, [r7, #20]
      break;
 800ca84:	e00c      	b.n	800caa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ca86:	4a13      	ldr	r2, [pc, #76]	; (800cad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca8e:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ca90:	68d2      	ldr	r2, [r2, #12]
 800ca92:	0a12      	lsrs	r2, r2, #8
 800ca94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca98:	fb02 f303 	mul.w	r3, r2, r3
 800ca9c:	617b      	str	r3, [r7, #20]
      break;
 800ca9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	0e5b      	lsrs	r3, r3, #25
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	3301      	adds	r3, #1
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab8:	613b      	str	r3, [r7, #16]
 800caba:	e001      	b.n	800cac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cabc:	2300      	movs	r3, #0
 800cabe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cac0:	693b      	ldr	r3, [r7, #16]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	40021000 	.word	0x40021000
 800cad4:	00f42400 	.word	0x00f42400
 800cad8:	007a1200 	.word	0x007a1200

0800cadc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cadc:	b480      	push	{r7}
 800cade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cae0:	4b03      	ldr	r3, [pc, #12]	; (800caf0 <HAL_RCC_GetHCLKFreq+0x14>)
 800cae2:	681b      	ldr	r3, [r3, #0]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20000c34 	.word	0x20000c34

0800caf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cafa:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f003 0303 	and.w	r3, r3, #3
 800cb02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb04:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	091b      	lsrs	r3, r3, #4
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	3301      	adds	r3, #1
 800cb10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d10c      	bne.n	800cb32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb18:	4a17      	ldr	r2, [pc, #92]	; (800cb78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb20:	4a14      	ldr	r2, [pc, #80]	; (800cb74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cb22:	68d2      	ldr	r2, [r2, #12]
 800cb24:	0a12      	lsrs	r2, r2, #8
 800cb26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb2a:	fb02 f303 	mul.w	r3, r2, r3
 800cb2e:	617b      	str	r3, [r7, #20]
    break;
 800cb30:	e00c      	b.n	800cb4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb32:	4a12      	ldr	r2, [pc, #72]	; (800cb7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3a:	4a0e      	ldr	r2, [pc, #56]	; (800cb74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cb3c:	68d2      	ldr	r2, [r2, #12]
 800cb3e:	0a12      	lsrs	r2, r2, #8
 800cb40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb44:	fb02 f303 	mul.w	r3, r2, r3
 800cb48:	617b      	str	r3, [r7, #20]
    break;
 800cb4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	0e5b      	lsrs	r3, r3, #25
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	3301      	adds	r3, #1
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cb66:	687b      	ldr	r3, [r7, #4]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	371c      	adds	r7, #28
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	40021000 	.word	0x40021000
 800cb78:	007a1200 	.word	0x007a1200
 800cb7c:	00f42400 	.word	0x00f42400

0800cb80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cb88:	2300      	movs	r3, #0
 800cb8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 8098 	beq.w	800ccce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cba2:	4b43      	ldr	r3, [pc, #268]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10d      	bne.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbae:	4b40      	ldr	r3, [pc, #256]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb2:	4a3f      	ldr	r2, [pc, #252]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cbb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbb8:	6593      	str	r3, [r2, #88]	; 0x58
 800cbba:	4b3d      	ldr	r3, [pc, #244]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cbbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbc2:	60bb      	str	r3, [r7, #8]
 800cbc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbca:	4b3a      	ldr	r3, [pc, #232]	; (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a39      	ldr	r2, [pc, #228]	; (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cbd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cbd6:	f7fb ff5b 	bl	8008a90 <HAL_GetTick>
 800cbda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cbdc:	e009      	b.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbde:	f7fb ff57 	bl	8008a90 <HAL_GetTick>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d902      	bls.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cbec:	2303      	movs	r3, #3
 800cbee:	74fb      	strb	r3, [r7, #19]
        break;
 800cbf0:	e005      	b.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cbf2:	4b30      	ldr	r3, [pc, #192]	; (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0ef      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cbfe:	7cfb      	ldrb	r3, [r7, #19]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d159      	bne.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cc04:	4b2a      	ldr	r3, [pc, #168]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01e      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d019      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cc20:	4b23      	ldr	r3, [pc, #140]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cc2c:	4b20      	ldr	r3, [pc, #128]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc32:	4a1f      	ldr	r2, [pc, #124]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cc3c:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc42:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cc4c:	4a18      	ldr	r2, [pc, #96]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d016      	beq.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc5e:	f7fb ff17 	bl	8008a90 <HAL_GetTick>
 800cc62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc64:	e00b      	b.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc66:	f7fb ff13 	bl	8008a90 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d902      	bls.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	74fb      	strb	r3, [r7, #19]
            break;
 800cc7c:	e006      	b.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d0ec      	beq.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cc8c:	7cfb      	ldrb	r3, [r7, #19]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca0:	4903      	ldr	r1, [pc, #12]	; (800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cca8:	e008      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ccaa:	7cfb      	ldrb	r3, [r7, #19]
 800ccac:	74bb      	strb	r3, [r7, #18]
 800ccae:	e005      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ccb0:	40021000 	.word	0x40021000
 800ccb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb8:	7cfb      	ldrb	r3, [r7, #19]
 800ccba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ccbc:	7c7b      	ldrb	r3, [r7, #17]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d105      	bne.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccc2:	4baf      	ldr	r3, [pc, #700]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ccc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc6:	4aae      	ldr	r2, [pc, #696]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ccc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ccda:	4ba9      	ldr	r3, [pc, #676]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ccdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cce0:	f023 0203 	bic.w	r2, r3, #3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	49a5      	ldr	r1, [pc, #660]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ccea:	4313      	orrs	r3, r2
 800ccec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00a      	beq.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ccfc:	4ba0      	ldr	r3, [pc, #640]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ccfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd02:	f023 020c 	bic.w	r2, r3, #12
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	499d      	ldr	r1, [pc, #628]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0304 	and.w	r3, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cd1e:	4b98      	ldr	r3, [pc, #608]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	4994      	ldr	r1, [pc, #592]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 0308 	and.w	r3, r3, #8
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00a      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cd40:	4b8f      	ldr	r3, [pc, #572]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	498c      	ldr	r1, [pc, #560]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd50:	4313      	orrs	r3, r2
 800cd52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 0310 	and.w	r3, r3, #16
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00a      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cd62:	4b87      	ldr	r3, [pc, #540]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	4983      	ldr	r1, [pc, #524]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0320 	and.w	r3, r3, #32
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00a      	beq.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd84:	4b7e      	ldr	r3, [pc, #504]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	497b      	ldr	r1, [pc, #492]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cd94:	4313      	orrs	r3, r2
 800cd96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cda6:	4b76      	ldr	r3, [pc, #472]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4972      	ldr	r1, [pc, #456]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00a      	beq.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cdc8:	4b6d      	ldr	r3, [pc, #436]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	496a      	ldr	r1, [pc, #424]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cdea:	4b65      	ldr	r3, [pc, #404]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf8:	4961      	ldr	r1, [pc, #388]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00a      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ce0c:	4b5c      	ldr	r3, [pc, #368]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce12:	f023 0203 	bic.w	r2, r3, #3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1a:	4959      	ldr	r1, [pc, #356]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce2e:	4b54      	ldr	r3, [pc, #336]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	4950      	ldr	r1, [pc, #320]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d015      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce50:	4b4b      	ldr	r3, [pc, #300]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5e:	4948      	ldr	r1, [pc, #288]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce6e:	d105      	bne.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ce70:	4b43      	ldr	r3, [pc, #268]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	4a42      	ldr	r2, [pc, #264]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d015      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ce88:	4b3d      	ldr	r3, [pc, #244]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce96:	493a      	ldr	r1, [pc, #232]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cea6:	d105      	bne.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cea8:	4b35      	ldr	r3, [pc, #212]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	4a34      	ldr	r2, [pc, #208]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d015      	beq.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cec0:	4b2f      	ldr	r3, [pc, #188]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	492c      	ldr	r1, [pc, #176]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cede:	d105      	bne.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cee0:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	4a26      	ldr	r2, [pc, #152]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d015      	beq.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cef8:	4b21      	ldr	r3, [pc, #132]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cefe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf06:	491e      	ldr	r1, [pc, #120]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf16:	d105      	bne.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cf18:	4b19      	ldr	r3, [pc, #100]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	4a18      	ldr	r2, [pc, #96]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d015      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf30:	4b13      	ldr	r3, [pc, #76]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	4910      	ldr	r1, [pc, #64]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf40:	4313      	orrs	r3, r2
 800cf42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf4e:	d105      	bne.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cf50:	4b0b      	ldr	r3, [pc, #44]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	4a0a      	ldr	r2, [pc, #40]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d018      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800cf68:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf76:	4902      	ldr	r1, [pc, #8]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cf7e:	e001      	b.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800cf80:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf8c:	d105      	bne.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cf8e:	4b21      	ldr	r3, [pc, #132]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	4a20      	ldr	r2, [pc, #128]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cf94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf98:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d015      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800cfa6:	4b1b      	ldr	r3, [pc, #108]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb4:	4917      	ldr	r1, [pc, #92]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfc4:	d105      	bne.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cfc6:	4b13      	ldr	r3, [pc, #76]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	4a12      	ldr	r2, [pc, #72]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfd0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d015      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cfde:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cfe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfec:	4909      	ldr	r1, [pc, #36]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cffc:	d105      	bne.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	4a04      	ldr	r2, [pc, #16]	; (800d014 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d008:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d00a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	40021000 	.word	0x40021000

0800d018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e084      	b.n	800d134 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d106      	bne.n	800d04a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7fa ff0b 	bl	8007e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2202      	movs	r2, #2
 800d04e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d060:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d06a:	d902      	bls.n	800d072 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e002      	b.n	800d078 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d076:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d080:	d007      	beq.n	800d092 <HAL_SPI_Init+0x7a>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d08a:	d002      	beq.n	800d092 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10b      	bne.n	800d0b2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d0a2:	d903      	bls.n	800d0ac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	631a      	str	r2, [r3, #48]	; 0x30
 800d0aa:	e002      	b.n	800d0b2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	431a      	orrs	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a1b      	ldr	r3, [r3, #32]
 800d0dc:	ea42 0103 	orr.w	r1, r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	0c1b      	lsrs	r3, r3, #16
 800d0f2:	f003 0204 	and.w	r2, r3, #4
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d100:	431a      	orrs	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	ea42 0103 	orr.w	r1, r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	430a      	orrs	r2, r1
 800d112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	69da      	ldr	r2, [r3, #28]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e049      	b.n	800d1e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7fb fb52 	bl	800880c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3304      	adds	r3, #4
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f000 ff20 	bl	800dfc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d001      	beq.n	800d204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e019      	b.n	800d238 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2202      	movs	r2, #2
 800d208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	689a      	ldr	r2, [r3, #8]
 800d212:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <HAL_TIM_Base_Start+0x58>)
 800d214:	4013      	ands	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b06      	cmp	r3, #6
 800d21c:	d00b      	beq.n	800d236 <HAL_TIM_Base_Start+0x4a>
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d224:	d007      	beq.n	800d236 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f042 0201 	orr.w	r2, r2, #1
 800d234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr
 800d244:	00010007 	.word	0x00010007

0800d248 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6a1a      	ldr	r2, [r3, #32]
 800d256:	f241 1311 	movw	r3, #4369	; 0x1111
 800d25a:	4013      	ands	r3, r2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10f      	bne.n	800d280 <HAL_TIM_Base_Stop+0x38>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6a1a      	ldr	r2, [r3, #32]
 800d266:	f244 4344 	movw	r3, #17476	; 0x4444
 800d26a:	4013      	ands	r3, r2
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d107      	bne.n	800d280 <HAL_TIM_Base_Stop+0x38>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f022 0201 	bic.w	r2, r2, #1
 800d27e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d001      	beq.n	800d2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e021      	b.n	800d2f4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68da      	ldr	r2, [r3, #12]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f042 0201 	orr.w	r2, r2, #1
 800d2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689a      	ldr	r2, [r3, #8]
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <HAL_TIM_Base_Start_IT+0x68>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b06      	cmp	r3, #6
 800d2d8:	d00b      	beq.n	800d2f2 <HAL_TIM_Base_Start_IT+0x5a>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e0:	d007      	beq.n	800d2f2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f042 0201 	orr.w	r2, r2, #1
 800d2f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr
 800d300:	00010007 	.word	0x00010007

0800d304 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68da      	ldr	r2, [r3, #12]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f022 0201 	bic.w	r2, r2, #1
 800d31a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6a1a      	ldr	r2, [r3, #32]
 800d322:	f241 1311 	movw	r3, #4369	; 0x1111
 800d326:	4013      	ands	r3, r2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10f      	bne.n	800d34c <HAL_TIM_Base_Stop_IT+0x48>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6a1a      	ldr	r2, [r3, #32]
 800d332:	f244 4344 	movw	r3, #17476	; 0x4444
 800d336:	4013      	ands	r3, r2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <HAL_TIM_Base_Stop_IT+0x48>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0201 	bic.w	r2, r2, #1
 800d34a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e049      	b.n	800d408 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f841 	bl	800d410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2202      	movs	r2, #2
 800d392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3304      	adds	r3, #4
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f000 fe0d 	bl	800dfc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d109      	bne.n	800d448 <HAL_TIM_PWM_Start+0x24>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	bf14      	ite	ne
 800d440:	2301      	movne	r3, #1
 800d442:	2300      	moveq	r3, #0
 800d444:	b2db      	uxtb	r3, r3
 800d446:	e03c      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d109      	bne.n	800d462 <HAL_TIM_PWM_Start+0x3e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b01      	cmp	r3, #1
 800d458:	bf14      	ite	ne
 800d45a:	2301      	movne	r3, #1
 800d45c:	2300      	moveq	r3, #0
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	e02f      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b08      	cmp	r3, #8
 800d466:	d109      	bne.n	800d47c <HAL_TIM_PWM_Start+0x58>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	2b01      	cmp	r3, #1
 800d472:	bf14      	ite	ne
 800d474:	2301      	movne	r3, #1
 800d476:	2300      	moveq	r3, #0
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	e022      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b0c      	cmp	r3, #12
 800d480:	d109      	bne.n	800d496 <HAL_TIM_PWM_Start+0x72>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	bf14      	ite	ne
 800d48e:	2301      	movne	r3, #1
 800d490:	2300      	moveq	r3, #0
 800d492:	b2db      	uxtb	r3, r3
 800d494:	e015      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b10      	cmp	r3, #16
 800d49a:	d109      	bne.n	800d4b0 <HAL_TIM_PWM_Start+0x8c>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	bf14      	ite	ne
 800d4a8:	2301      	movne	r3, #1
 800d4aa:	2300      	moveq	r3, #0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	e008      	b.n	800d4c2 <HAL_TIM_PWM_Start+0x9e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	bf14      	ite	ne
 800d4bc:	2301      	movne	r3, #1
 800d4be:	2300      	moveq	r3, #0
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e073      	b.n	800d5b2 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d104      	bne.n	800d4da <HAL_TIM_PWM_Start+0xb6>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d8:	e023      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b04      	cmp	r3, #4
 800d4de:	d104      	bne.n	800d4ea <HAL_TIM_PWM_Start+0xc6>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4e8:	e01b      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b08      	cmp	r3, #8
 800d4ee:	d104      	bne.n	800d4fa <HAL_TIM_PWM_Start+0xd6>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4f8:	e013      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b0c      	cmp	r3, #12
 800d4fe:	d104      	bne.n	800d50a <HAL_TIM_PWM_Start+0xe6>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d508:	e00b      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b10      	cmp	r3, #16
 800d50e:	d104      	bne.n	800d51a <HAL_TIM_PWM_Start+0xf6>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2202      	movs	r2, #2
 800d514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d518:	e003      	b.n	800d522 <HAL_TIM_PWM_Start+0xfe>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2202      	movs	r2, #2
 800d51e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2201      	movs	r2, #1
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f001 f9b6 	bl	800e89c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a21      	ldr	r2, [pc, #132]	; (800d5bc <HAL_TIM_PWM_Start+0x198>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d018      	beq.n	800d56c <HAL_TIM_PWM_Start+0x148>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a20      	ldr	r2, [pc, #128]	; (800d5c0 <HAL_TIM_PWM_Start+0x19c>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d013      	beq.n	800d56c <HAL_TIM_PWM_Start+0x148>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a1e      	ldr	r2, [pc, #120]	; (800d5c4 <HAL_TIM_PWM_Start+0x1a0>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d00e      	beq.n	800d56c <HAL_TIM_PWM_Start+0x148>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a1d      	ldr	r2, [pc, #116]	; (800d5c8 <HAL_TIM_PWM_Start+0x1a4>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d009      	beq.n	800d56c <HAL_TIM_PWM_Start+0x148>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a1b      	ldr	r2, [pc, #108]	; (800d5cc <HAL_TIM_PWM_Start+0x1a8>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d004      	beq.n	800d56c <HAL_TIM_PWM_Start+0x148>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a1a      	ldr	r2, [pc, #104]	; (800d5d0 <HAL_TIM_PWM_Start+0x1ac>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d101      	bne.n	800d570 <HAL_TIM_PWM_Start+0x14c>
 800d56c:	2301      	movs	r3, #1
 800d56e:	e000      	b.n	800d572 <HAL_TIM_PWM_Start+0x14e>
 800d570:	2300      	movs	r3, #0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	689a      	ldr	r2, [r3, #8]
 800d58c:	4b11      	ldr	r3, [pc, #68]	; (800d5d4 <HAL_TIM_PWM_Start+0x1b0>)
 800d58e:	4013      	ands	r3, r2
 800d590:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b06      	cmp	r3, #6
 800d596:	d00b      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x18c>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d59e:	d007      	beq.n	800d5b0 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f042 0201 	orr.w	r2, r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	40012c00 	.word	0x40012c00
 800d5c0:	40013400 	.word	0x40013400
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40014400 	.word	0x40014400
 800d5cc:	40014800 	.word	0x40014800
 800d5d0:	40015000 	.word	0x40015000
 800d5d4:	00010007 	.word	0x00010007

0800d5d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f001 f956 	bl	800e89c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a40      	ldr	r2, [pc, #256]	; (800d6f8 <HAL_TIM_PWM_Stop+0x120>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d018      	beq.n	800d62c <HAL_TIM_PWM_Stop+0x54>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a3f      	ldr	r2, [pc, #252]	; (800d6fc <HAL_TIM_PWM_Stop+0x124>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d013      	beq.n	800d62c <HAL_TIM_PWM_Stop+0x54>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a3d      	ldr	r2, [pc, #244]	; (800d700 <HAL_TIM_PWM_Stop+0x128>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d00e      	beq.n	800d62c <HAL_TIM_PWM_Stop+0x54>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a3c      	ldr	r2, [pc, #240]	; (800d704 <HAL_TIM_PWM_Stop+0x12c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d009      	beq.n	800d62c <HAL_TIM_PWM_Stop+0x54>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a3a      	ldr	r2, [pc, #232]	; (800d708 <HAL_TIM_PWM_Stop+0x130>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d004      	beq.n	800d62c <HAL_TIM_PWM_Stop+0x54>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a39      	ldr	r2, [pc, #228]	; (800d70c <HAL_TIM_PWM_Stop+0x134>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d101      	bne.n	800d630 <HAL_TIM_PWM_Stop+0x58>
 800d62c:	2301      	movs	r3, #1
 800d62e:	e000      	b.n	800d632 <HAL_TIM_PWM_Stop+0x5a>
 800d630:	2300      	movs	r3, #0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d017      	beq.n	800d666 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6a1a      	ldr	r2, [r3, #32]
 800d63c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d640:	4013      	ands	r3, r2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10f      	bne.n	800d666 <HAL_TIM_PWM_Stop+0x8e>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6a1a      	ldr	r2, [r3, #32]
 800d64c:	f244 4344 	movw	r3, #17476	; 0x4444
 800d650:	4013      	ands	r3, r2
 800d652:	2b00      	cmp	r3, #0
 800d654:	d107      	bne.n	800d666 <HAL_TIM_PWM_Stop+0x8e>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6a1a      	ldr	r2, [r3, #32]
 800d66c:	f241 1311 	movw	r3, #4369	; 0x1111
 800d670:	4013      	ands	r3, r2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10f      	bne.n	800d696 <HAL_TIM_PWM_Stop+0xbe>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	6a1a      	ldr	r2, [r3, #32]
 800d67c:	f244 4344 	movw	r3, #17476	; 0x4444
 800d680:	4013      	ands	r3, r2
 800d682:	2b00      	cmp	r3, #0
 800d684:	d107      	bne.n	800d696 <HAL_TIM_PWM_Stop+0xbe>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f022 0201 	bic.w	r2, r2, #1
 800d694:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <HAL_TIM_PWM_Stop+0xce>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6a4:	e023      	b.n	800d6ee <HAL_TIM_PWM_Stop+0x116>
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b04      	cmp	r3, #4
 800d6aa:	d104      	bne.n	800d6b6 <HAL_TIM_PWM_Stop+0xde>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6b4:	e01b      	b.n	800d6ee <HAL_TIM_PWM_Stop+0x116>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b08      	cmp	r3, #8
 800d6ba:	d104      	bne.n	800d6c6 <HAL_TIM_PWM_Stop+0xee>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6c4:	e013      	b.n	800d6ee <HAL_TIM_PWM_Stop+0x116>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	2b0c      	cmp	r3, #12
 800d6ca:	d104      	bne.n	800d6d6 <HAL_TIM_PWM_Stop+0xfe>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6d4:	e00b      	b.n	800d6ee <HAL_TIM_PWM_Stop+0x116>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b10      	cmp	r3, #16
 800d6da:	d104      	bne.n	800d6e6 <HAL_TIM_PWM_Stop+0x10e>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6e4:	e003      	b.n	800d6ee <HAL_TIM_PWM_Stop+0x116>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	40012c00 	.word	0x40012c00
 800d6fc:	40013400 	.word	0x40013400
 800d700:	40014000 	.word	0x40014000
 800d704:	40014400 	.word	0x40014400
 800d708:	40014800 	.word	0x40014800
 800d70c:	40015000 	.word	0x40015000

0800d710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e097      	b.n	800d854 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7fb f813 	bl	8008764 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2202      	movs	r2, #2
 800d742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	6812      	ldr	r2, [r2, #0]
 800d750:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d754:	f023 0307 	bic.w	r3, r3, #7
 800d758:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3304      	adds	r3, #4
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f000 fc2b 	bl	800dfc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6a1b      	ldr	r3, [r3, #32]
 800d780:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	4313      	orrs	r3, r2
 800d78a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d792:	f023 0303 	bic.w	r3, r3, #3
 800d796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	699b      	ldr	r3, [r3, #24]
 800d7a0:	021b      	lsls	r3, r3, #8
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d7b0:	f023 030c 	bic.w	r3, r3, #12
 800d7b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	011a      	lsls	r2, r3, #4
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	6a1b      	ldr	r3, [r3, #32]
 800d7de:	031b      	lsls	r3, r3, #12
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	693a      	ldr	r2, [r7, #16]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d7ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d7f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	011b      	lsls	r3, r3, #4
 800d802:	4313      	orrs	r3, r2
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	693a      	ldr	r2, [r7, #16]
 800d818:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	f003 0302 	and.w	r3, r3, #2
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d122      	bne.n	800d8b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	f003 0302 	and.w	r3, r3, #2
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d11b      	bne.n	800d8b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f06f 0202 	mvn.w	r2, #2
 800d888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	f003 0303 	and.w	r3, r3, #3
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d003      	beq.n	800d8a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fb70 	bl	800df84 <HAL_TIM_IC_CaptureCallback>
 800d8a4:	e005      	b.n	800d8b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fb62 	bl	800df70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fb73 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	f003 0304 	and.w	r3, r3, #4
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	d122      	bne.n	800d90c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b04      	cmp	r3, #4
 800d8d2:	d11b      	bne.n	800d90c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f06f 0204 	mvn.w	r2, #4
 800d8dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fb46 	bl	800df84 <HAL_TIM_IC_CaptureCallback>
 800d8f8:	e005      	b.n	800d906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fb38 	bl	800df70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fb49 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	f003 0308 	and.w	r3, r3, #8
 800d916:	2b08      	cmp	r3, #8
 800d918:	d122      	bne.n	800d960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	f003 0308 	and.w	r3, r3, #8
 800d924:	2b08      	cmp	r3, #8
 800d926:	d11b      	bne.n	800d960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f06f 0208 	mvn.w	r2, #8
 800d930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2204      	movs	r2, #4
 800d936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f003 0303 	and.w	r3, r3, #3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fb1c 	bl	800df84 <HAL_TIM_IC_CaptureCallback>
 800d94c:	e005      	b.n	800d95a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fb0e 	bl	800df70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fb1f 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	f003 0310 	and.w	r3, r3, #16
 800d96a:	2b10      	cmp	r3, #16
 800d96c:	d122      	bne.n	800d9b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	f003 0310 	and.w	r3, r3, #16
 800d978:	2b10      	cmp	r3, #16
 800d97a:	d11b      	bne.n	800d9b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f06f 0210 	mvn.w	r2, #16
 800d984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2208      	movs	r2, #8
 800d98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	69db      	ldr	r3, [r3, #28]
 800d992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d996:	2b00      	cmp	r3, #0
 800d998:	d003      	beq.n	800d9a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 faf2 	bl	800df84 <HAL_TIM_IC_CaptureCallback>
 800d9a0:	e005      	b.n	800d9ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fae4 	bl	800df70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 faf5 	bl	800df98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d10e      	bne.n	800d9e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d107      	bne.n	800d9e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f06f 0201 	mvn.w	r2, #1
 800d9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 fabe 	bl	800df5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ea:	2b80      	cmp	r3, #128	; 0x80
 800d9ec:	d10e      	bne.n	800da0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9f8:	2b80      	cmp	r3, #128	; 0x80
 800d9fa:	d107      	bne.n	800da0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f001 f8c0 	bl	800eb8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da1a:	d10e      	bne.n	800da3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da26:	2b80      	cmp	r3, #128	; 0x80
 800da28:	d107      	bne.n	800da3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 f8b3 	bl	800eba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da44:	2b40      	cmp	r3, #64	; 0x40
 800da46:	d10e      	bne.n	800da66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da52:	2b40      	cmp	r3, #64	; 0x40
 800da54:	d107      	bne.n	800da66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 faa3 	bl	800dfac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	f003 0320 	and.w	r3, r3, #32
 800da70:	2b20      	cmp	r3, #32
 800da72:	d10e      	bne.n	800da92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f003 0320 	and.w	r3, r3, #32
 800da7e:	2b20      	cmp	r3, #32
 800da80:	d107      	bne.n	800da92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f06f 0220 	mvn.w	r2, #32
 800da8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f001 f873 	bl	800eb78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daa0:	d10f      	bne.n	800dac2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800daac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dab0:	d107      	bne.n	800dac2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800daba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f001 f879 	bl	800ebb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dacc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dad0:	d10f      	bne.n	800daf2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dadc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dae0:	d107      	bne.n	800daf2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800daea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 f86b 	bl	800ebc8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dafc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db00:	d10f      	bne.n	800db22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db10:	d107      	bne.n	800db22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800db1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f001 f85d 	bl	800ebdc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db30:	d10f      	bne.n	800db52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db40:	d107      	bne.n	800db52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800db4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f001 f84f 	bl	800ebf0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d101      	bne.n	800db76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800db72:	2302      	movs	r3, #2
 800db74:	e0fd      	b.n	800dd72 <HAL_TIM_PWM_ConfigChannel+0x216>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b14      	cmp	r3, #20
 800db82:	f200 80f0 	bhi.w	800dd66 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800db86:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dbe1 	.word	0x0800dbe1
 800db90:	0800dd67 	.word	0x0800dd67
 800db94:	0800dd67 	.word	0x0800dd67
 800db98:	0800dd67 	.word	0x0800dd67
 800db9c:	0800dc21 	.word	0x0800dc21
 800dba0:	0800dd67 	.word	0x0800dd67
 800dba4:	0800dd67 	.word	0x0800dd67
 800dba8:	0800dd67 	.word	0x0800dd67
 800dbac:	0800dc63 	.word	0x0800dc63
 800dbb0:	0800dd67 	.word	0x0800dd67
 800dbb4:	0800dd67 	.word	0x0800dd67
 800dbb8:	0800dd67 	.word	0x0800dd67
 800dbbc:	0800dca3 	.word	0x0800dca3
 800dbc0:	0800dd67 	.word	0x0800dd67
 800dbc4:	0800dd67 	.word	0x0800dd67
 800dbc8:	0800dd67 	.word	0x0800dd67
 800dbcc:	0800dce5 	.word	0x0800dce5
 800dbd0:	0800dd67 	.word	0x0800dd67
 800dbd4:	0800dd67 	.word	0x0800dd67
 800dbd8:	0800dd67 	.word	0x0800dd67
 800dbdc:	0800dd25 	.word	0x0800dd25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 fa92 	bl	800e110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0208 	orr.w	r2, r2, #8
 800dbfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	699a      	ldr	r2, [r3, #24]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f022 0204 	bic.w	r2, r2, #4
 800dc0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6999      	ldr	r1, [r3, #24]
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	691a      	ldr	r2, [r3, #16]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	430a      	orrs	r2, r1
 800dc1c:	619a      	str	r2, [r3, #24]
      break;
 800dc1e:	e0a3      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68b9      	ldr	r1, [r7, #8]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fb0c 	bl	800e244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	699a      	ldr	r2, [r3, #24]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	699a      	ldr	r2, [r3, #24]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6999      	ldr	r1, [r3, #24]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	021a      	lsls	r2, r3, #8
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	619a      	str	r2, [r3, #24]
      break;
 800dc60:	e082      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	68b9      	ldr	r1, [r7, #8]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 fb7f 	bl	800e36c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69da      	ldr	r2, [r3, #28]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f042 0208 	orr.w	r2, r2, #8
 800dc7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	69da      	ldr	r2, [r3, #28]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f022 0204 	bic.w	r2, r2, #4
 800dc8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69d9      	ldr	r1, [r3, #28]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	691a      	ldr	r2, [r3, #16]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	61da      	str	r2, [r3, #28]
      break;
 800dca0:	e062      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 fbf1 	bl	800e490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69da      	ldr	r2, [r3, #28]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	69da      	ldr	r2, [r3, #28]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	69d9      	ldr	r1, [r3, #28]
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	691b      	ldr	r3, [r3, #16]
 800dcd8:	021a      	lsls	r2, r3, #8
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	61da      	str	r2, [r3, #28]
      break;
 800dce2:	e041      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68b9      	ldr	r1, [r7, #8]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 fc64 	bl	800e5b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0208 	orr.w	r2, r2, #8
 800dcfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f022 0204 	bic.w	r2, r2, #4
 800dd0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	691a      	ldr	r2, [r3, #16]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	430a      	orrs	r2, r1
 800dd20:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd22:	e021      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68b9      	ldr	r1, [r7, #8]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 fcae 	bl	800e68c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	021a      	lsls	r2, r3, #8
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	430a      	orrs	r2, r1
 800dd62:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dd64:	e000      	b.n	800dd68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800dd66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop

0800dd7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <HAL_TIM_ConfigClockSource+0x18>
 800dd90:	2302      	movs	r3, #2
 800dd92:	e0d2      	b.n	800df3a <HAL_TIM_ConfigClockSource+0x1be>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2202      	movs	r2, #2
 800dda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ddb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ddb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddd0:	f000 80a9 	beq.w	800df26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddd8:	d81a      	bhi.n	800de10 <HAL_TIM_ConfigClockSource+0x94>
 800ddda:	2b30      	cmp	r3, #48	; 0x30
 800dddc:	f000 809a 	beq.w	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800dde0:	2b30      	cmp	r3, #48	; 0x30
 800dde2:	d809      	bhi.n	800ddf8 <HAL_TIM_ConfigClockSource+0x7c>
 800dde4:	2b10      	cmp	r3, #16
 800dde6:	f000 8095 	beq.w	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800ddea:	2b20      	cmp	r3, #32
 800ddec:	f000 8092 	beq.w	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 808f 	beq.w	800df14 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ddf6:	e097      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ddf8:	2b50      	cmp	r3, #80	; 0x50
 800ddfa:	d05b      	beq.n	800deb4 <HAL_TIM_ConfigClockSource+0x138>
 800ddfc:	2b50      	cmp	r3, #80	; 0x50
 800ddfe:	d802      	bhi.n	800de06 <HAL_TIM_ConfigClockSource+0x8a>
 800de00:	2b40      	cmp	r3, #64	; 0x40
 800de02:	d077      	beq.n	800def4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800de04:	e090      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800de06:	2b60      	cmp	r3, #96	; 0x60
 800de08:	d064      	beq.n	800ded4 <HAL_TIM_ConfigClockSource+0x158>
 800de0a:	2b70      	cmp	r3, #112	; 0x70
 800de0c:	d028      	beq.n	800de60 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800de0e:	e08b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800de10:	4a4c      	ldr	r2, [pc, #304]	; (800df44 <HAL_TIM_ConfigClockSource+0x1c8>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d07e      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800de16:	4a4b      	ldr	r2, [pc, #300]	; (800df44 <HAL_TIM_ConfigClockSource+0x1c8>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d810      	bhi.n	800de3e <HAL_TIM_ConfigClockSource+0xc2>
 800de1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de20:	d078      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800de22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de26:	d803      	bhi.n	800de30 <HAL_TIM_ConfigClockSource+0xb4>
 800de28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de2c:	d02f      	beq.n	800de8e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800de2e:	e07b      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800de30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de34:	d06e      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800de36:	4a44      	ldr	r2, [pc, #272]	; (800df48 <HAL_TIM_ConfigClockSource+0x1cc>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d06b      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800de3c:	e074      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800de3e:	4a43      	ldr	r2, [pc, #268]	; (800df4c <HAL_TIM_ConfigClockSource+0x1d0>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d067      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800de44:	4a41      	ldr	r2, [pc, #260]	; (800df4c <HAL_TIM_ConfigClockSource+0x1d0>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d803      	bhi.n	800de52 <HAL_TIM_ConfigClockSource+0xd6>
 800de4a:	4a41      	ldr	r2, [pc, #260]	; (800df50 <HAL_TIM_ConfigClockSource+0x1d4>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d061      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800de50:	e06a      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800de52:	4a40      	ldr	r2, [pc, #256]	; (800df54 <HAL_TIM_ConfigClockSource+0x1d8>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d05d      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
 800de58:	4a3f      	ldr	r2, [pc, #252]	; (800df58 <HAL_TIM_ConfigClockSource+0x1dc>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d05a      	beq.n	800df14 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800de5e:	e063      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6818      	ldr	r0, [r3, #0]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	6899      	ldr	r1, [r3, #8]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f000 fcf4 	bl	800e85c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	609a      	str	r2, [r3, #8]
      break;
 800de8c:	e04c      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	6899      	ldr	r1, [r3, #8]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	f000 fcdd 	bl	800e85c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689a      	ldr	r2, [r3, #8]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800deb0:	609a      	str	r2, [r3, #8]
      break;
 800deb2:	e039      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6818      	ldr	r0, [r3, #0]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	6859      	ldr	r1, [r3, #4]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	461a      	mov	r2, r3
 800dec2:	f000 fc4f 	bl	800e764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2150      	movs	r1, #80	; 0x50
 800decc:	4618      	mov	r0, r3
 800dece:	f000 fca8 	bl	800e822 <TIM_ITRx_SetConfig>
      break;
 800ded2:	e029      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6818      	ldr	r0, [r3, #0]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	6859      	ldr	r1, [r3, #4]
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	461a      	mov	r2, r3
 800dee2:	f000 fc6e 	bl	800e7c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2160      	movs	r1, #96	; 0x60
 800deec:	4618      	mov	r0, r3
 800deee:	f000 fc98 	bl	800e822 <TIM_ITRx_SetConfig>
      break;
 800def2:	e019      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	6859      	ldr	r1, [r3, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	461a      	mov	r2, r3
 800df02:	f000 fc2f 	bl	800e764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2140      	movs	r1, #64	; 0x40
 800df0c:	4618      	mov	r0, r3
 800df0e:	f000 fc88 	bl	800e822 <TIM_ITRx_SetConfig>
      break;
 800df12:	e009      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f000 fc7f 	bl	800e822 <TIM_ITRx_SetConfig>
      break;
 800df24:	e000      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800df26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	00100030 	.word	0x00100030
 800df48:	00100020 	.word	0x00100020
 800df4c:	00100050 	.word	0x00100050
 800df50:	00100040 	.word	0x00100040
 800df54:	00100060 	.word	0x00100060
 800df58:	00100070 	.word	0x00100070

0800df5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfb4:	bf00      	nop
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a46      	ldr	r2, [pc, #280]	; (800e0ec <TIM_Base_SetConfig+0x12c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d017      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfde:	d013      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a43      	ldr	r2, [pc, #268]	; (800e0f0 <TIM_Base_SetConfig+0x130>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d00f      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a42      	ldr	r2, [pc, #264]	; (800e0f4 <TIM_Base_SetConfig+0x134>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d00b      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4a41      	ldr	r2, [pc, #260]	; (800e0f8 <TIM_Base_SetConfig+0x138>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d007      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4a40      	ldr	r2, [pc, #256]	; (800e0fc <TIM_Base_SetConfig+0x13c>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d003      	beq.n	800e008 <TIM_Base_SetConfig+0x48>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4a3f      	ldr	r2, [pc, #252]	; (800e100 <TIM_Base_SetConfig+0x140>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d108      	bne.n	800e01a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e00e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	4313      	orrs	r3, r2
 800e018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a33      	ldr	r2, [pc, #204]	; (800e0ec <TIM_Base_SetConfig+0x12c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d023      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e028:	d01f      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a30      	ldr	r2, [pc, #192]	; (800e0f0 <TIM_Base_SetConfig+0x130>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d01b      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a2f      	ldr	r2, [pc, #188]	; (800e0f4 <TIM_Base_SetConfig+0x134>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d017      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a2e      	ldr	r2, [pc, #184]	; (800e0f8 <TIM_Base_SetConfig+0x138>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d013      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a2d      	ldr	r2, [pc, #180]	; (800e0fc <TIM_Base_SetConfig+0x13c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d00f      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a2d      	ldr	r2, [pc, #180]	; (800e104 <TIM_Base_SetConfig+0x144>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d00b      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a2c      	ldr	r2, [pc, #176]	; (800e108 <TIM_Base_SetConfig+0x148>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d007      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4a2b      	ldr	r2, [pc, #172]	; (800e10c <TIM_Base_SetConfig+0x14c>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d003      	beq.n	800e06a <TIM_Base_SetConfig+0xaa>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a26      	ldr	r2, [pc, #152]	; (800e100 <TIM_Base_SetConfig+0x140>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d108      	bne.n	800e07c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	4313      	orrs	r3, r2
 800e07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	4313      	orrs	r3, r2
 800e088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	689a      	ldr	r2, [r3, #8]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a12      	ldr	r2, [pc, #72]	; (800e0ec <TIM_Base_SetConfig+0x12c>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d013      	beq.n	800e0d0 <TIM_Base_SetConfig+0x110>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a14      	ldr	r2, [pc, #80]	; (800e0fc <TIM_Base_SetConfig+0x13c>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d00f      	beq.n	800e0d0 <TIM_Base_SetConfig+0x110>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a14      	ldr	r2, [pc, #80]	; (800e104 <TIM_Base_SetConfig+0x144>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d00b      	beq.n	800e0d0 <TIM_Base_SetConfig+0x110>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4a13      	ldr	r2, [pc, #76]	; (800e108 <TIM_Base_SetConfig+0x148>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d007      	beq.n	800e0d0 <TIM_Base_SetConfig+0x110>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	4a12      	ldr	r2, [pc, #72]	; (800e10c <TIM_Base_SetConfig+0x14c>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d003      	beq.n	800e0d0 <TIM_Base_SetConfig+0x110>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4a0d      	ldr	r2, [pc, #52]	; (800e100 <TIM_Base_SetConfig+0x140>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d103      	bne.n	800e0d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	691a      	ldr	r2, [r3, #16]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	615a      	str	r2, [r3, #20]
}
 800e0de:	bf00      	nop
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	40012c00 	.word	0x40012c00
 800e0f0:	40000400 	.word	0x40000400
 800e0f4:	40000800 	.word	0x40000800
 800e0f8:	40000c00 	.word	0x40000c00
 800e0fc:	40013400 	.word	0x40013400
 800e100:	40015000 	.word	0x40015000
 800e104:	40014000 	.word	0x40014000
 800e108:	40014400 	.word	0x40014400
 800e10c:	40014800 	.word	0x40014800

0800e110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e110:	b480      	push	{r7}
 800e112:	b087      	sub	sp, #28
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	f023 0201 	bic.w	r2, r3, #1
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f023 0303 	bic.w	r3, r3, #3
 800e14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f023 0302 	bic.w	r3, r3, #2
 800e15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	4313      	orrs	r3, r2
 800e166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4a30      	ldr	r2, [pc, #192]	; (800e22c <TIM_OC1_SetConfig+0x11c>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d013      	beq.n	800e198 <TIM_OC1_SetConfig+0x88>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a2f      	ldr	r2, [pc, #188]	; (800e230 <TIM_OC1_SetConfig+0x120>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00f      	beq.n	800e198 <TIM_OC1_SetConfig+0x88>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a2e      	ldr	r2, [pc, #184]	; (800e234 <TIM_OC1_SetConfig+0x124>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00b      	beq.n	800e198 <TIM_OC1_SetConfig+0x88>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a2d      	ldr	r2, [pc, #180]	; (800e238 <TIM_OC1_SetConfig+0x128>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d007      	beq.n	800e198 <TIM_OC1_SetConfig+0x88>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a2c      	ldr	r2, [pc, #176]	; (800e23c <TIM_OC1_SetConfig+0x12c>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d003      	beq.n	800e198 <TIM_OC1_SetConfig+0x88>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a2b      	ldr	r2, [pc, #172]	; (800e240 <TIM_OC1_SetConfig+0x130>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d10c      	bne.n	800e1b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	f023 0308 	bic.w	r3, r3, #8
 800e19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f023 0304 	bic.w	r3, r3, #4
 800e1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a1d      	ldr	r2, [pc, #116]	; (800e22c <TIM_OC1_SetConfig+0x11c>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d013      	beq.n	800e1e2 <TIM_OC1_SetConfig+0xd2>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a1c      	ldr	r2, [pc, #112]	; (800e230 <TIM_OC1_SetConfig+0x120>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d00f      	beq.n	800e1e2 <TIM_OC1_SetConfig+0xd2>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a1b      	ldr	r2, [pc, #108]	; (800e234 <TIM_OC1_SetConfig+0x124>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d00b      	beq.n	800e1e2 <TIM_OC1_SetConfig+0xd2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a1a      	ldr	r2, [pc, #104]	; (800e238 <TIM_OC1_SetConfig+0x128>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d007      	beq.n	800e1e2 <TIM_OC1_SetConfig+0xd2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a19      	ldr	r2, [pc, #100]	; (800e23c <TIM_OC1_SetConfig+0x12c>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d003      	beq.n	800e1e2 <TIM_OC1_SetConfig+0xd2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a18      	ldr	r2, [pc, #96]	; (800e240 <TIM_OC1_SetConfig+0x130>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d111      	bne.n	800e206 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	695b      	ldr	r3, [r3, #20]
 800e1f6:	693a      	ldr	r2, [r7, #16]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	4313      	orrs	r3, r2
 800e204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	621a      	str	r2, [r3, #32]
}
 800e220:	bf00      	nop
 800e222:	371c      	adds	r7, #28
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	40012c00 	.word	0x40012c00
 800e230:	40013400 	.word	0x40013400
 800e234:	40014000 	.word	0x40014000
 800e238:	40014400 	.word	0x40014400
 800e23c:	40014800 	.word	0x40014800
 800e240:	40015000 	.word	0x40015000

0800e244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	f023 0210 	bic.w	r2, r3, #16
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	699b      	ldr	r3, [r3, #24]
 800e26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	4313      	orrs	r3, r2
 800e28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	f023 0320 	bic.w	r3, r3, #32
 800e292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	011b      	lsls	r3, r3, #4
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	4313      	orrs	r3, r2
 800e29e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a2c      	ldr	r2, [pc, #176]	; (800e354 <TIM_OC2_SetConfig+0x110>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d007      	beq.n	800e2b8 <TIM_OC2_SetConfig+0x74>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a2b      	ldr	r2, [pc, #172]	; (800e358 <TIM_OC2_SetConfig+0x114>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d003      	beq.n	800e2b8 <TIM_OC2_SetConfig+0x74>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a2a      	ldr	r2, [pc, #168]	; (800e35c <TIM_OC2_SetConfig+0x118>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d10d      	bne.n	800e2d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	011b      	lsls	r3, r3, #4
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a1f      	ldr	r2, [pc, #124]	; (800e354 <TIM_OC2_SetConfig+0x110>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d013      	beq.n	800e304 <TIM_OC2_SetConfig+0xc0>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a1e      	ldr	r2, [pc, #120]	; (800e358 <TIM_OC2_SetConfig+0x114>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d00f      	beq.n	800e304 <TIM_OC2_SetConfig+0xc0>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	; (800e360 <TIM_OC2_SetConfig+0x11c>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d00b      	beq.n	800e304 <TIM_OC2_SetConfig+0xc0>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a1d      	ldr	r2, [pc, #116]	; (800e364 <TIM_OC2_SetConfig+0x120>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d007      	beq.n	800e304 <TIM_OC2_SetConfig+0xc0>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a1c      	ldr	r2, [pc, #112]	; (800e368 <TIM_OC2_SetConfig+0x124>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d003      	beq.n	800e304 <TIM_OC2_SetConfig+0xc0>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a17      	ldr	r2, [pc, #92]	; (800e35c <TIM_OC2_SetConfig+0x118>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d113      	bne.n	800e32c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e30a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	695b      	ldr	r3, [r3, #20]
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	4313      	orrs	r3, r2
 800e32a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	685a      	ldr	r2, [r3, #4]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	621a      	str	r2, [r3, #32]
}
 800e346:	bf00      	nop
 800e348:	371c      	adds	r7, #28
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	40012c00 	.word	0x40012c00
 800e358:	40013400 	.word	0x40013400
 800e35c:	40015000 	.word	0x40015000
 800e360:	40014000 	.word	0x40014000
 800e364:	40014400 	.word	0x40014400
 800e368:	40014800 	.word	0x40014800

0800e36c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b087      	sub	sp, #28
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	69db      	ldr	r3, [r3, #28]
 800e392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f023 0303 	bic.w	r3, r3, #3
 800e3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	021b      	lsls	r3, r3, #8
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a2b      	ldr	r2, [pc, #172]	; (800e478 <TIM_OC3_SetConfig+0x10c>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d007      	beq.n	800e3de <TIM_OC3_SetConfig+0x72>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a2a      	ldr	r2, [pc, #168]	; (800e47c <TIM_OC3_SetConfig+0x110>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d003      	beq.n	800e3de <TIM_OC3_SetConfig+0x72>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a29      	ldr	r2, [pc, #164]	; (800e480 <TIM_OC3_SetConfig+0x114>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d10d      	bne.n	800e3fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	021b      	lsls	r3, r3, #8
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4a1e      	ldr	r2, [pc, #120]	; (800e478 <TIM_OC3_SetConfig+0x10c>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d013      	beq.n	800e42a <TIM_OC3_SetConfig+0xbe>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4a1d      	ldr	r2, [pc, #116]	; (800e47c <TIM_OC3_SetConfig+0x110>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d00f      	beq.n	800e42a <TIM_OC3_SetConfig+0xbe>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <TIM_OC3_SetConfig+0x118>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d00b      	beq.n	800e42a <TIM_OC3_SetConfig+0xbe>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a1c      	ldr	r2, [pc, #112]	; (800e488 <TIM_OC3_SetConfig+0x11c>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d007      	beq.n	800e42a <TIM_OC3_SetConfig+0xbe>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a1b      	ldr	r2, [pc, #108]	; (800e48c <TIM_OC3_SetConfig+0x120>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d003      	beq.n	800e42a <TIM_OC3_SetConfig+0xbe>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a16      	ldr	r2, [pc, #88]	; (800e480 <TIM_OC3_SetConfig+0x114>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d113      	bne.n	800e452 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	011b      	lsls	r3, r3, #4
 800e440:	693a      	ldr	r2, [r7, #16]
 800e442:	4313      	orrs	r3, r2
 800e444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	011b      	lsls	r3, r3, #4
 800e44c:	693a      	ldr	r2, [r7, #16]
 800e44e:	4313      	orrs	r3, r2
 800e450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	621a      	str	r2, [r3, #32]
}
 800e46c:	bf00      	nop
 800e46e:	371c      	adds	r7, #28
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr
 800e478:	40012c00 	.word	0x40012c00
 800e47c:	40013400 	.word	0x40013400
 800e480:	40015000 	.word	0x40015000
 800e484:	40014000 	.word	0x40014000
 800e488:	40014400 	.word	0x40014400
 800e48c:	40014800 	.word	0x40014800

0800e490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a1b      	ldr	r3, [r3, #32]
 800e4aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	021b      	lsls	r3, r3, #8
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	031b      	lsls	r3, r3, #12
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a2c      	ldr	r2, [pc, #176]	; (800e5a0 <TIM_OC4_SetConfig+0x110>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d007      	beq.n	800e504 <TIM_OC4_SetConfig+0x74>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a2b      	ldr	r2, [pc, #172]	; (800e5a4 <TIM_OC4_SetConfig+0x114>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d003      	beq.n	800e504 <TIM_OC4_SetConfig+0x74>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a2a      	ldr	r2, [pc, #168]	; (800e5a8 <TIM_OC4_SetConfig+0x118>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d10d      	bne.n	800e520 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e50a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	031b      	lsls	r3, r3, #12
 800e512:	697a      	ldr	r2, [r7, #20]
 800e514:	4313      	orrs	r3, r2
 800e516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e51e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a1f      	ldr	r2, [pc, #124]	; (800e5a0 <TIM_OC4_SetConfig+0x110>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d013      	beq.n	800e550 <TIM_OC4_SetConfig+0xc0>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a1e      	ldr	r2, [pc, #120]	; (800e5a4 <TIM_OC4_SetConfig+0x114>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d00f      	beq.n	800e550 <TIM_OC4_SetConfig+0xc0>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a1e      	ldr	r2, [pc, #120]	; (800e5ac <TIM_OC4_SetConfig+0x11c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d00b      	beq.n	800e550 <TIM_OC4_SetConfig+0xc0>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a1d      	ldr	r2, [pc, #116]	; (800e5b0 <TIM_OC4_SetConfig+0x120>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d007      	beq.n	800e550 <TIM_OC4_SetConfig+0xc0>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a1c      	ldr	r2, [pc, #112]	; (800e5b4 <TIM_OC4_SetConfig+0x124>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d003      	beq.n	800e550 <TIM_OC4_SetConfig+0xc0>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a17      	ldr	r2, [pc, #92]	; (800e5a8 <TIM_OC4_SetConfig+0x118>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d113      	bne.n	800e578 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e556:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e55e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	019b      	lsls	r3, r3, #6
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	4313      	orrs	r3, r2
 800e56a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	019b      	lsls	r3, r3, #6
 800e572:	693a      	ldr	r2, [r7, #16]
 800e574:	4313      	orrs	r3, r2
 800e576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	621a      	str	r2, [r3, #32]
}
 800e592:	bf00      	nop
 800e594:	371c      	adds	r7, #28
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	40012c00 	.word	0x40012c00
 800e5a4:	40013400 	.word	0x40013400
 800e5a8:	40015000 	.word	0x40015000
 800e5ac:	40014000 	.word	0x40014000
 800e5b0:	40014400 	.word	0x40014400
 800e5b4:	40014800 	.word	0x40014800

0800e5b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b087      	sub	sp, #28
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e5fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	041b      	lsls	r3, r3, #16
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	4313      	orrs	r3, r2
 800e608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4a19      	ldr	r2, [pc, #100]	; (800e674 <TIM_OC5_SetConfig+0xbc>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d013      	beq.n	800e63a <TIM_OC5_SetConfig+0x82>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4a18      	ldr	r2, [pc, #96]	; (800e678 <TIM_OC5_SetConfig+0xc0>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d00f      	beq.n	800e63a <TIM_OC5_SetConfig+0x82>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a17      	ldr	r2, [pc, #92]	; (800e67c <TIM_OC5_SetConfig+0xc4>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d00b      	beq.n	800e63a <TIM_OC5_SetConfig+0x82>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a16      	ldr	r2, [pc, #88]	; (800e680 <TIM_OC5_SetConfig+0xc8>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d007      	beq.n	800e63a <TIM_OC5_SetConfig+0x82>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a15      	ldr	r2, [pc, #84]	; (800e684 <TIM_OC5_SetConfig+0xcc>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d003      	beq.n	800e63a <TIM_OC5_SetConfig+0x82>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a14      	ldr	r2, [pc, #80]	; (800e688 <TIM_OC5_SetConfig+0xd0>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d109      	bne.n	800e64e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	695b      	ldr	r3, [r3, #20]
 800e646:	021b      	lsls	r3, r3, #8
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	621a      	str	r2, [r3, #32]
}
 800e668:	bf00      	nop
 800e66a:	371c      	adds	r7, #28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	40012c00 	.word	0x40012c00
 800e678:	40013400 	.word	0x40013400
 800e67c:	40014000 	.word	0x40014000
 800e680:	40014400 	.word	0x40014400
 800e684:	40014800 	.word	0x40014800
 800e688:	40015000 	.word	0x40015000

0800e68c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a1b      	ldr	r3, [r3, #32]
 800e69a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e6ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	021b      	lsls	r3, r3, #8
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	051b      	lsls	r3, r3, #20
 800e6da:	693a      	ldr	r2, [r7, #16]
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a1a      	ldr	r2, [pc, #104]	; (800e74c <TIM_OC6_SetConfig+0xc0>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d013      	beq.n	800e710 <TIM_OC6_SetConfig+0x84>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a19      	ldr	r2, [pc, #100]	; (800e750 <TIM_OC6_SetConfig+0xc4>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d00f      	beq.n	800e710 <TIM_OC6_SetConfig+0x84>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a18      	ldr	r2, [pc, #96]	; (800e754 <TIM_OC6_SetConfig+0xc8>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d00b      	beq.n	800e710 <TIM_OC6_SetConfig+0x84>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a17      	ldr	r2, [pc, #92]	; (800e758 <TIM_OC6_SetConfig+0xcc>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d007      	beq.n	800e710 <TIM_OC6_SetConfig+0x84>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a16      	ldr	r2, [pc, #88]	; (800e75c <TIM_OC6_SetConfig+0xd0>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d003      	beq.n	800e710 <TIM_OC6_SetConfig+0x84>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a15      	ldr	r2, [pc, #84]	; (800e760 <TIM_OC6_SetConfig+0xd4>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d109      	bne.n	800e724 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	029b      	lsls	r3, r3, #10
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	4313      	orrs	r3, r2
 800e722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	621a      	str	r2, [r3, #32]
}
 800e73e:	bf00      	nop
 800e740:	371c      	adds	r7, #28
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	40012c00 	.word	0x40012c00
 800e750:	40013400 	.word	0x40013400
 800e754:	40014000 	.word	0x40014000
 800e758:	40014400 	.word	0x40014400
 800e75c:	40014800 	.word	0x40014800
 800e760:	40015000 	.word	0x40015000

0800e764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e764:	b480      	push	{r7}
 800e766:	b087      	sub	sp, #28
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6a1b      	ldr	r3, [r3, #32]
 800e774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	f023 0201 	bic.w	r2, r3, #1
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	699b      	ldr	r3, [r3, #24]
 800e786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e78e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	011b      	lsls	r3, r3, #4
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	4313      	orrs	r3, r2
 800e798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	f023 030a 	bic.w	r3, r3, #10
 800e7a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	621a      	str	r2, [r3, #32]
}
 800e7b6:	bf00      	nop
 800e7b8:	371c      	adds	r7, #28
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b087      	sub	sp, #28
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	60f8      	str	r0, [r7, #12]
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	f023 0210 	bic.w	r2, r3, #16
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6a1b      	ldr	r3, [r3, #32]
 800e7e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	031b      	lsls	r3, r3, #12
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	011b      	lsls	r3, r3, #4
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	4313      	orrs	r3, r2
 800e808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	621a      	str	r2, [r3, #32]
}
 800e816:	bf00      	nop
 800e818:	371c      	adds	r7, #28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e822:	b480      	push	{r7}
 800e824:	b085      	sub	sp, #20
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e83c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4313      	orrs	r3, r2
 800e844:	f043 0307 	orr.w	r3, r3, #7
 800e848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	609a      	str	r2, [r3, #8]
}
 800e850:	bf00      	nop
 800e852:	3714      	adds	r7, #20
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	021a      	lsls	r2, r3, #8
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	431a      	orrs	r2, r3
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	4313      	orrs	r3, r2
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	4313      	orrs	r3, r2
 800e888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	609a      	str	r2, [r3, #8]
}
 800e890:	bf00      	nop
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f003 031f 	and.w	r3, r3, #31
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6a1a      	ldr	r2, [r3, #32]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	43db      	mvns	r3, r3
 800e8be:	401a      	ands	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6a1a      	ldr	r2, [r3, #32]
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f003 031f 	and.w	r3, r3, #31
 800e8ce:	6879      	ldr	r1, [r7, #4]
 800e8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d4:	431a      	orrs	r2, r3
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	621a      	str	r2, [r3, #32]
}
 800e8da:	bf00      	nop
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
	...

0800e8e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d101      	bne.n	800e900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8fc:	2302      	movs	r3, #2
 800e8fe:	e074      	b.n	800e9ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a34      	ldr	r2, [pc, #208]	; (800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d009      	beq.n	800e93e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a33      	ldr	r2, [pc, #204]	; (800e9fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d004      	beq.n	800e93e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a31      	ldr	r2, [pc, #196]	; (800ea00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d108      	bne.n	800e950 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e944:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e95a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a21      	ldr	r2, [pc, #132]	; (800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d022      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e980:	d01d      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a1f      	ldr	r2, [pc, #124]	; (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d018      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a1d      	ldr	r2, [pc, #116]	; (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d013      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a1c      	ldr	r2, [pc, #112]	; (800ea0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d00e      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a15      	ldr	r2, [pc, #84]	; (800e9fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d009      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a18      	ldr	r2, [pc, #96]	; (800ea10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d004      	beq.n	800e9be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a11      	ldr	r2, [pc, #68]	; (800ea00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d10c      	bne.n	800e9d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	40012c00 	.word	0x40012c00
 800e9fc:	40013400 	.word	0x40013400
 800ea00:	40015000 	.word	0x40015000
 800ea04:	40000400 	.word	0x40000400
 800ea08:	40000800 	.word	0x40000800
 800ea0c:	40000c00 	.word	0x40000c00
 800ea10:	40014000 	.word	0x40014000

0800ea14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d101      	bne.n	800ea30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	e096      	b.n	800eb5e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	695b      	ldr	r3, [r3, #20]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea96:	4313      	orrs	r3, r2
 800ea98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	041b      	lsls	r3, r3, #16
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a2f      	ldr	r2, [pc, #188]	; (800eb6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d009      	beq.n	800eac8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a2d      	ldr	r2, [pc, #180]	; (800eb70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d004      	beq.n	800eac8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a2c      	ldr	r2, [pc, #176]	; (800eb74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d106      	bne.n	800ead6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	69db      	ldr	r3, [r3, #28]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a24      	ldr	r2, [pc, #144]	; (800eb6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d009      	beq.n	800eaf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a22      	ldr	r2, [pc, #136]	; (800eb70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d004      	beq.n	800eaf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a21      	ldr	r2, [pc, #132]	; (800eb74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d12b      	bne.n	800eb4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafe:	051b      	lsls	r3, r3, #20
 800eb00:	4313      	orrs	r3, r2
 800eb02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a11      	ldr	r2, [pc, #68]	; (800eb6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d009      	beq.n	800eb3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a10      	ldr	r2, [pc, #64]	; (800eb70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d004      	beq.n	800eb3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a0e      	ldr	r2, [pc, #56]	; (800eb74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d106      	bne.n	800eb4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	40012c00 	.word	0x40012c00
 800eb70:	40013400 	.word	0x40013400
 800eb74:	40015000 	.word	0x40015000

0800eb78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb80:	bf00      	nop
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <LL_EXTI_EnableIT_0_31>:
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ec0c:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <LL_EXTI_EnableIT_0_31+0x20>)
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	4904      	ldr	r1, [pc, #16]	; (800ec24 <LL_EXTI_EnableIT_0_31+0x20>)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	600b      	str	r3, [r1, #0]
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr
 800ec24:	40010400 	.word	0x40010400

0800ec28 <LL_EXTI_EnableIT_32_63>:
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ec30:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <LL_EXTI_EnableIT_32_63+0x20>)
 800ec32:	6a1a      	ldr	r2, [r3, #32]
 800ec34:	4904      	ldr	r1, [pc, #16]	; (800ec48 <LL_EXTI_EnableIT_32_63+0x20>)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	620b      	str	r3, [r1, #32]
}
 800ec3c:	bf00      	nop
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40010400 	.word	0x40010400

0800ec4c <LL_EXTI_DisableIT_0_31>:
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ec54:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <LL_EXTI_DisableIT_0_31+0x24>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	43db      	mvns	r3, r3
 800ec5c:	4904      	ldr	r1, [pc, #16]	; (800ec70 <LL_EXTI_DisableIT_0_31+0x24>)
 800ec5e:	4013      	ands	r3, r2
 800ec60:	600b      	str	r3, [r1, #0]
}
 800ec62:	bf00      	nop
 800ec64:	370c      	adds	r7, #12
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	40010400 	.word	0x40010400

0800ec74 <LL_EXTI_DisableIT_32_63>:
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ec7c:	4b06      	ldr	r3, [pc, #24]	; (800ec98 <LL_EXTI_DisableIT_32_63+0x24>)
 800ec7e:	6a1a      	ldr	r2, [r3, #32]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	43db      	mvns	r3, r3
 800ec84:	4904      	ldr	r1, [pc, #16]	; (800ec98 <LL_EXTI_DisableIT_32_63+0x24>)
 800ec86:	4013      	ands	r3, r2
 800ec88:	620b      	str	r3, [r1, #32]
}
 800ec8a:	bf00      	nop
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	40010400 	.word	0x40010400

0800ec9c <LL_EXTI_EnableEvent_0_31>:
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800eca4:	4b05      	ldr	r3, [pc, #20]	; (800ecbc <LL_EXTI_EnableEvent_0_31+0x20>)
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	4904      	ldr	r1, [pc, #16]	; (800ecbc <LL_EXTI_EnableEvent_0_31+0x20>)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4313      	orrs	r3, r2
 800ecae:	604b      	str	r3, [r1, #4]
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	40010400 	.word	0x40010400

0800ecc0 <LL_EXTI_EnableEvent_32_63>:
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ecc8:	4b05      	ldr	r3, [pc, #20]	; (800ece0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ecca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eccc:	4904      	ldr	r1, [pc, #16]	; (800ece0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	40010400 	.word	0x40010400

0800ece4 <LL_EXTI_DisableEvent_0_31>:
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ecec:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ecee:	685a      	ldr	r2, [r3, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	43db      	mvns	r3, r3
 800ecf4:	4904      	ldr	r1, [pc, #16]	; (800ed08 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	604b      	str	r3, [r1, #4]
}
 800ecfa:	bf00      	nop
 800ecfc:	370c      	adds	r7, #12
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	40010400 	.word	0x40010400

0800ed0c <LL_EXTI_DisableEvent_32_63>:
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ed14:	4b06      	ldr	r3, [pc, #24]	; (800ed30 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ed16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	43db      	mvns	r3, r3
 800ed1c:	4904      	ldr	r1, [pc, #16]	; (800ed30 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ed1e:	4013      	ands	r3, r2
 800ed20:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ed22:	bf00      	nop
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop
 800ed30:	40010400 	.word	0x40010400

0800ed34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ed3c:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ed3e:	689a      	ldr	r2, [r3, #8]
 800ed40:	4904      	ldr	r1, [pc, #16]	; (800ed54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	608b      	str	r3, [r1, #8]
}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	40010400 	.word	0x40010400

0800ed58 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ed60:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ed62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed64:	4904      	ldr	r1, [pc, #16]	; (800ed78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	40010400 	.word	0x40010400

0800ed7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ed84:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	43db      	mvns	r3, r3
 800ed8c:	4904      	ldr	r1, [pc, #16]	; (800eda0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ed8e:	4013      	ands	r3, r2
 800ed90:	608b      	str	r3, [r1, #8]
}
 800ed92:	bf00      	nop
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	40010400 	.word	0x40010400

0800eda4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800edac:	4b06      	ldr	r3, [pc, #24]	; (800edc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800edae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	43db      	mvns	r3, r3
 800edb4:	4904      	ldr	r1, [pc, #16]	; (800edc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800edb6:	4013      	ands	r3, r2
 800edb8:	628b      	str	r3, [r1, #40]	; 0x28
}
 800edba:	bf00      	nop
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	40010400 	.word	0x40010400

0800edcc <LL_EXTI_EnableFallingTrig_0_31>:
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800edd4:	4b05      	ldr	r3, [pc, #20]	; (800edec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800edd6:	68da      	ldr	r2, [r3, #12]
 800edd8:	4904      	ldr	r1, [pc, #16]	; (800edec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4313      	orrs	r3, r2
 800edde:	60cb      	str	r3, [r1, #12]
}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	40010400 	.word	0x40010400

0800edf0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800edf8:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800edfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edfc:	4904      	ldr	r1, [pc, #16]	; (800ee10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ee04:	bf00      	nop
 800ee06:	370c      	adds	r7, #12
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	40010400 	.word	0x40010400

0800ee14 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ee1e:	68da      	ldr	r2, [r3, #12]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	43db      	mvns	r3, r3
 800ee24:	4904      	ldr	r1, [pc, #16]	; (800ee38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ee26:	4013      	ands	r3, r2
 800ee28:	60cb      	str	r3, [r1, #12]
}
 800ee2a:	bf00      	nop
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	40010400 	.word	0x40010400

0800ee3c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ee44:	4b06      	ldr	r3, [pc, #24]	; (800ee60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	43db      	mvns	r3, r3
 800ee4c:	4904      	ldr	r1, [pc, #16]	; (800ee60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ee4e:	4013      	ands	r3, r2
 800ee50:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ee52:	bf00      	nop
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	40010400 	.word	0x40010400

0800ee64 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	7a1b      	ldrb	r3, [r3, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 80c8 	beq.w	800f00a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d05d      	beq.n	800ef3e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	7a5b      	ldrb	r3, [r3, #9]
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d00e      	beq.n	800eea8 <LL_EXTI_Init+0x44>
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d017      	beq.n	800eebe <LL_EXTI_Init+0x5a>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d120      	bne.n	800eed4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7ff ff24 	bl	800ece4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff feaf 	bl	800ec04 <LL_EXTI_EnableIT_0_31>
          break;
 800eea6:	e018      	b.n	800eeda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff fecd 	bl	800ec4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff fef0 	bl	800ec9c <LL_EXTI_EnableEvent_0_31>
          break;
 800eebc:	e00d      	b.n	800eeda <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fe9e 	bl	800ec04 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fee5 	bl	800ec9c <LL_EXTI_EnableEvent_0_31>
          break;
 800eed2:	e002      	b.n	800eeda <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800eed4:	2301      	movs	r3, #1
 800eed6:	60fb      	str	r3, [r7, #12]
          break;
 800eed8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	7a9b      	ldrb	r3, [r3, #10]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d02d      	beq.n	800ef3e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	7a9b      	ldrb	r3, [r3, #10]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d00e      	beq.n	800ef08 <LL_EXTI_Init+0xa4>
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	d017      	beq.n	800ef1e <LL_EXTI_Init+0xba>
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d120      	bne.n	800ef34 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7ff ff8c 	bl	800ee14 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff ff17 	bl	800ed34 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ef06:	e01b      	b.n	800ef40 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff ff35 	bl	800ed7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff ff58 	bl	800edcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ef1c:	e010      	b.n	800ef40 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7ff ff06 	bl	800ed34 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7ff ff4d 	bl	800edcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ef32:	e005      	b.n	800ef40 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f043 0302 	orr.w	r3, r3, #2
 800ef3a:	60fb      	str	r3, [r7, #12]
            break;
 800ef3c:	e000      	b.n	800ef40 <LL_EXTI_Init+0xdc>
        }
      }
 800ef3e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d075      	beq.n	800f034 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7a5b      	ldrb	r3, [r3, #9]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d00e      	beq.n	800ef6e <LL_EXTI_Init+0x10a>
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d017      	beq.n	800ef84 <LL_EXTI_Init+0x120>
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d120      	bne.n	800ef9a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff fed5 	bl	800ed0c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff fe5e 	bl	800ec28 <LL_EXTI_EnableIT_32_63>
          break;
 800ef6c:	e01a      	b.n	800efa4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff fe7e 	bl	800ec74 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7ff fe9f 	bl	800ecc0 <LL_EXTI_EnableEvent_32_63>
          break;
 800ef82:	e00f      	b.n	800efa4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff fe4d 	bl	800ec28 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff fe94 	bl	800ecc0 <LL_EXTI_EnableEvent_32_63>
          break;
 800ef98:	e004      	b.n	800efa4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f043 0304 	orr.w	r3, r3, #4
 800efa0:	60fb      	str	r3, [r7, #12]
          break;
 800efa2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	7a9b      	ldrb	r3, [r3, #10]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d043      	beq.n	800f034 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	7a9b      	ldrb	r3, [r3, #10]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d00e      	beq.n	800efd2 <LL_EXTI_Init+0x16e>
 800efb4:	2b03      	cmp	r3, #3
 800efb6:	d017      	beq.n	800efe8 <LL_EXTI_Init+0x184>
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d120      	bne.n	800effe <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff ff3b 	bl	800ee3c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fec4 	bl	800ed58 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800efd0:	e031      	b.n	800f036 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fee4 	bl	800eda4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff ff05 	bl	800edf0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800efe6:	e026      	b.n	800f036 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff feb3 	bl	800ed58 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fefa 	bl	800edf0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800effc:	e01b      	b.n	800f036 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f043 0305 	orr.w	r3, r3, #5
 800f004:	60fb      	str	r3, [r7, #12]
            break;
 800f006:	bf00      	nop
 800f008:	e015      	b.n	800f036 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff fe1c 	bl	800ec4c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4618      	mov	r0, r3
 800f01a:	f7ff fe63 	bl	800ece4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff fe26 	bl	800ec74 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fe6d 	bl	800ed0c <LL_EXTI_DisableEvent_32_63>
 800f032:	e000      	b.n	800f036 <LL_EXTI_Init+0x1d2>
      }
 800f034:	bf00      	nop
  }

  return status;
 800f036:	68fb      	ldr	r3, [r7, #12]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <LL_GPIO_SetPinMode>:
{
 800f040:	b480      	push	{r7}
 800f042:	b089      	sub	sp, #36	; 0x24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	fa93 f3a3 	rbit	r3, r3
 800f05a:	613b      	str	r3, [r7, #16]
  return result;
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	fab3 f383 	clz	r3, r3
 800f062:	b2db      	uxtb	r3, r3
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	2103      	movs	r1, #3
 800f068:	fa01 f303 	lsl.w	r3, r1, r3
 800f06c:	43db      	mvns	r3, r3
 800f06e:	401a      	ands	r2, r3
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	fa93 f3a3 	rbit	r3, r3
 800f07a:	61bb      	str	r3, [r7, #24]
  return result;
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	fab3 f383 	clz	r3, r3
 800f082:	b2db      	uxtb	r3, r3
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	6879      	ldr	r1, [r7, #4]
 800f088:	fa01 f303 	lsl.w	r3, r1, r3
 800f08c:	431a      	orrs	r2, r3
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	601a      	str	r2, [r3, #0]
}
 800f092:	bf00      	nop
 800f094:	3724      	adds	r7, #36	; 0x24
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <LL_GPIO_SetPinOutputType>:
{
 800f09e:	b480      	push	{r7}
 800f0a0:	b085      	sub	sp, #20
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	43db      	mvns	r3, r3
 800f0b2:	401a      	ands	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	6879      	ldr	r1, [r7, #4]
 800f0b8:	fb01 f303 	mul.w	r3, r1, r3
 800f0bc:	431a      	orrs	r2, r3
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	605a      	str	r2, [r3, #4]
}
 800f0c2:	bf00      	nop
 800f0c4:	3714      	adds	r7, #20
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr

0800f0ce <LL_GPIO_SetPinSpeed>:
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b089      	sub	sp, #36	; 0x24
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	60f8      	str	r0, [r7, #12]
 800f0d6:	60b9      	str	r1, [r7, #8]
 800f0d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	689a      	ldr	r2, [r3, #8]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	fa93 f3a3 	rbit	r3, r3
 800f0e8:	613b      	str	r3, [r7, #16]
  return result;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	fab3 f383 	clz	r3, r3
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	2103      	movs	r1, #3
 800f0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f0fa:	43db      	mvns	r3, r3
 800f0fc:	401a      	ands	r2, r3
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	fa93 f3a3 	rbit	r3, r3
 800f108:	61bb      	str	r3, [r7, #24]
  return result;
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	fab3 f383 	clz	r3, r3
 800f110:	b2db      	uxtb	r3, r3
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	6879      	ldr	r1, [r7, #4]
 800f116:	fa01 f303 	lsl.w	r3, r1, r3
 800f11a:	431a      	orrs	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	609a      	str	r2, [r3, #8]
}
 800f120:	bf00      	nop
 800f122:	3724      	adds	r7, #36	; 0x24
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <LL_GPIO_SetPinPull>:
{
 800f12c:	b480      	push	{r7}
 800f12e:	b089      	sub	sp, #36	; 0x24
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68da      	ldr	r2, [r3, #12]
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	fa93 f3a3 	rbit	r3, r3
 800f146:	613b      	str	r3, [r7, #16]
  return result;
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	fab3 f383 	clz	r3, r3
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	2103      	movs	r1, #3
 800f154:	fa01 f303 	lsl.w	r3, r1, r3
 800f158:	43db      	mvns	r3, r3
 800f15a:	401a      	ands	r2, r3
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	fa93 f3a3 	rbit	r3, r3
 800f166:	61bb      	str	r3, [r7, #24]
  return result;
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	fab3 f383 	clz	r3, r3
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	005b      	lsls	r3, r3, #1
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	fa01 f303 	lsl.w	r3, r1, r3
 800f178:	431a      	orrs	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	60da      	str	r2, [r3, #12]
}
 800f17e:	bf00      	nop
 800f180:	3724      	adds	r7, #36	; 0x24
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr

0800f18a <LL_GPIO_SetAFPin_0_7>:
{
 800f18a:	b480      	push	{r7}
 800f18c:	b089      	sub	sp, #36	; 0x24
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6a1a      	ldr	r2, [r3, #32]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	fa93 f3a3 	rbit	r3, r3
 800f1a4:	613b      	str	r3, [r7, #16]
  return result;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	fab3 f383 	clz	r3, r3
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	210f      	movs	r1, #15
 800f1b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1b6:	43db      	mvns	r3, r3
 800f1b8:	401a      	ands	r2, r3
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	fa93 f3a3 	rbit	r3, r3
 800f1c4:	61bb      	str	r3, [r7, #24]
  return result;
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	fab3 f383 	clz	r3, r3
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	6879      	ldr	r1, [r7, #4]
 800f1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	621a      	str	r2, [r3, #32]
}
 800f1dc:	bf00      	nop
 800f1de:	3724      	adds	r7, #36	; 0x24
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <LL_GPIO_SetAFPin_8_15>:
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b089      	sub	sp, #36	; 0x24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	0a1b      	lsrs	r3, r3, #8
 800f1fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	fa93 f3a3 	rbit	r3, r3
 800f204:	613b      	str	r3, [r7, #16]
  return result;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	fab3 f383 	clz	r3, r3
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	210f      	movs	r1, #15
 800f212:	fa01 f303 	lsl.w	r3, r1, r3
 800f216:	43db      	mvns	r3, r3
 800f218:	401a      	ands	r2, r3
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	0a1b      	lsrs	r3, r3, #8
 800f21e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	fa93 f3a3 	rbit	r3, r3
 800f226:	61bb      	str	r3, [r7, #24]
  return result;
 800f228:	69bb      	ldr	r3, [r7, #24]
 800f22a:	fab3 f383 	clz	r3, r3
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	6879      	ldr	r1, [r7, #4]
 800f234:	fa01 f303 	lsl.w	r3, r1, r3
 800f238:	431a      	orrs	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f23e:	bf00      	nop
 800f240:	3724      	adds	r7, #36	; 0x24
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b086      	sub	sp, #24
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	fa93 f3a3 	rbit	r3, r3
 800f260:	60bb      	str	r3, [r7, #8]
  return result;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	fab3 f383 	clz	r3, r3
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f26c:	e040      	b.n	800f2f0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	2101      	movs	r1, #1
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	fa01 f303 	lsl.w	r3, r1, r3
 800f27a:	4013      	ands	r3, r2
 800f27c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d032      	beq.n	800f2ea <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	461a      	mov	r2, r3
 800f28a:	6939      	ldr	r1, [r7, #16]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff fed7 	bl	800f040 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d003      	beq.n	800f2a2 <LL_GPIO_Init+0x58>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d106      	bne.n	800f2b0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	6939      	ldr	r1, [r7, #16]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff ff0f 	bl	800f0ce <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	6939      	ldr	r1, [r7, #16]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff ff37 	bl	800f12c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d111      	bne.n	800f2ea <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	2bff      	cmp	r3, #255	; 0xff
 800f2ca:	d807      	bhi.n	800f2dc <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	6939      	ldr	r1, [r7, #16]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff ff58 	bl	800f18a <LL_GPIO_SetAFPin_0_7>
 800f2da:	e006      	b.n	800f2ea <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	6939      	ldr	r1, [r7, #16]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ff7f 	bl	800f1e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1b7      	bne.n	800f26e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d003      	beq.n	800f30e <LL_GPIO_Init+0xc4>
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d107      	bne.n	800f31e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	6819      	ldr	r1, [r3, #0]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	461a      	mov	r2, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff fec0 	bl	800f09e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800f328:	b590      	push	{r4, r7, lr}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4604      	mov	r4, r0
 800f330:	4608      	mov	r0, r1
 800f332:	4611      	mov	r1, r2
 800f334:	461a      	mov	r2, r3
 800f336:	4623      	mov	r3, r4
 800f338:	80fb      	strh	r3, [r7, #6]
 800f33a:	4603      	mov	r3, r0
 800f33c:	80bb      	strh	r3, [r7, #4]
 800f33e:	460b      	mov	r3, r1
 800f340:	70fb      	strb	r3, [r7, #3]
 800f342:	4613      	mov	r3, r2
 800f344:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800f346:	2300      	movs	r3, #0
 800f348:	60fb      	str	r3, [r7, #12]
 800f34a:	e026      	b.n	800f39a <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800f34c:	2300      	movs	r3, #0
 800f34e:	60bb      	str	r3, [r7, #8]
 800f350:	e01c      	b.n	800f38c <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	b29a      	uxth	r2, r3
 800f356:	88fb      	ldrh	r3, [r7, #6]
 800f358:	4413      	add	r3, r2
 800f35a:	b298      	uxth	r0, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f362:	4413      	add	r3, r2
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f36e:	b29a      	uxth	r2, r3
 800f370:	88bb      	ldrh	r3, [r7, #4]
 800f372:	4413      	add	r3, r2
 800f374:	b29a      	uxth	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4413      	add	r3, r2
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	883a      	ldrh	r2, [r7, #0]
 800f380:	4619      	mov	r1, r3
 800f382:	f000 fc1f 	bl	800fbc4 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	3301      	adds	r3, #1
 800f38a:	60bb      	str	r3, [r7, #8]
 800f38c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	429a      	cmp	r2, r3
 800f392:	dbde      	blt.n	800f352 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	3301      	adds	r3, #1
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	78fb      	ldrb	r3, [r7, #3]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	dbd4      	blt.n	800f34c <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd90      	pop	{r4, r7, pc}

0800f3aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800f3aa:	b590      	push	{r4, r7, lr}
 800f3ac:	b087      	sub	sp, #28
 800f3ae:	af02      	add	r7, sp, #8
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4623      	mov	r3, r4
 800f3ba:	80fb      	strh	r3, [r7, #6]
 800f3bc:	4603      	mov	r3, r0
 800f3be:	80bb      	strh	r3, [r7, #4]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	807b      	strh	r3, [r7, #2]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800f3cc:	7bfa      	ldrb	r2, [r7, #15]
 800f3ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d939      	bls.n	800f44a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800f3d6:	88ba      	ldrh	r2, [r7, #4]
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
 800f3da:	441a      	add	r2, r3
 800f3dc:	88b9      	ldrh	r1, [r7, #4]
 800f3de:	883b      	ldrh	r3, [r7, #0]
 800f3e0:	4419      	add	r1, r3
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
 800f3e4:	1acb      	subs	r3, r1, r3
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	f000 8089 	beq.w	800f4fe <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800f3ec:	88fa      	ldrh	r2, [r7, #6]
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
 800f3f0:	441a      	add	r2, r3
 800f3f2:	88f9      	ldrh	r1, [r7, #6]
 800f3f4:	887b      	ldrh	r3, [r7, #2]
 800f3f6:	4419      	add	r1, r3
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
 800f3fa:	1acb      	subs	r3, r1, r3
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d07e      	beq.n	800f4fe <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800f400:	7bfb      	ldrb	r3, [r7, #15]
 800f402:	b29a      	uxth	r2, r3
 800f404:	88fb      	ldrh	r3, [r7, #6]
 800f406:	4413      	add	r3, r2
 800f408:	b298      	uxth	r0, r3
 800f40a:	7bfb      	ldrb	r3, [r7, #15]
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	88bb      	ldrh	r3, [r7, #4]
 800f410:	4413      	add	r3, r2
 800f412:	b299      	uxth	r1, r3
 800f414:	7bfb      	ldrb	r3, [r7, #15]
 800f416:	b29b      	uxth	r3, r3
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	887a      	ldrh	r2, [r7, #2]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	b29b      	uxth	r3, r3
 800f422:	3301      	adds	r3, #1
 800f424:	b29c      	uxth	r4, r3
 800f426:	7bfb      	ldrb	r3, [r7, #15]
 800f428:	b29b      	uxth	r3, r3
 800f42a:	005b      	lsls	r3, r3, #1
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	883a      	ldrh	r2, [r7, #0]
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	b29b      	uxth	r3, r3
 800f434:	3301      	adds	r3, #1
 800f436:	b29a      	uxth	r2, r3
 800f438:	2304      	movs	r3, #4
 800f43a:	9301      	str	r3, [sp, #4]
 800f43c:	8c3b      	ldrh	r3, [r7, #32]
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	4613      	mov	r3, r2
 800f442:	4622      	mov	r2, r4
 800f444:	f000 fd18 	bl	800fe78 <ILI9341_Draw_Rectangle>
				goto finish;
 800f448:	e05a      	b.n	800f500 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	88fb      	ldrh	r3, [r7, #6]
 800f450:	4413      	add	r3, r2
 800f452:	b298      	uxth	r0, r3
 800f454:	7bfb      	ldrb	r3, [r7, #15]
 800f456:	b29a      	uxth	r2, r3
 800f458:	88bb      	ldrh	r3, [r7, #4]
 800f45a:	4413      	add	r3, r2
 800f45c:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	b29b      	uxth	r3, r3
 800f462:	887a      	ldrh	r2, [r7, #2]
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f468:	3301      	adds	r3, #1
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f46e:	f000 fa6b 	bl	800f948 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	b29a      	uxth	r2, r3
 800f476:	88fb      	ldrh	r3, [r7, #6]
 800f478:	4413      	add	r3, r2
 800f47a:	b298      	uxth	r0, r3
										(y + h) - b,
 800f47c:	88ba      	ldrh	r2, [r7, #4]
 800f47e:	883b      	ldrh	r3, [r7, #0]
 800f480:	4413      	add	r3, r2
 800f482:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f484:	7bfb      	ldrb	r3, [r7, #15]
 800f486:	b29b      	uxth	r3, r3
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	b299      	uxth	r1, r3
										(w - b)+1,
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	887a      	ldrh	r2, [r7, #2]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f496:	3301      	adds	r3, #1
 800f498:	b29a      	uxth	r2, r3
 800f49a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f49c:	f000 fa54 	bl	800f948 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	b298      	uxth	r0, r3
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	88bb      	ldrh	r3, [r7, #4]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b299      	uxth	r1, r3
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	883a      	ldrh	r2, [r7, #0]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4c4:	f000 faa4 	bl	800fa10 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f4c8:	88fa      	ldrh	r2, [r7, #6]
 800f4ca:	887b      	ldrh	r3, [r7, #2]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	b298      	uxth	r0, r3
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	88bb      	ldrh	r3, [r7, #4]
 800f4de:	4413      	add	r3, r2
 800f4e0:	b299      	uxth	r1, r3
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	005b      	lsls	r3, r3, #1
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	883a      	ldrh	r2, [r7, #0]
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4f2:	f000 fa8d 	bl	800fa10 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f4f6:	7bfb      	ldrb	r3, [r7, #15]
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f4fc:	e766      	b.n	800f3cc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f4fe:	bf00      	nop
	// done
	return;
 800f500:	bf00      	nop
}
 800f502:	3714      	adds	r7, #20
 800f504:	46bd      	mov	sp, r7
 800f506:	bd90      	pop	{r4, r7, pc}

0800f508 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f508:	b590      	push	{r4, r7, lr}
 800f50a:	b089      	sub	sp, #36	; 0x24
 800f50c:	af02      	add	r7, sp, #8
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	4611      	mov	r1, r2
 800f514:	461a      	mov	r2, r3
 800f516:	4623      	mov	r3, r4
 800f518:	71fb      	strb	r3, [r7, #7]
 800f51a:	4603      	mov	r3, r0
 800f51c:	80bb      	strh	r3, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	807b      	strh	r3, [r7, #2]
 800f522:	4613      	mov	r3, r2
 800f524:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	2b1f      	cmp	r3, #31
 800f52e:	d802      	bhi.n	800f536 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	71fb      	strb	r3, [r7, #7]
 800f534:	e002      	b.n	800f53c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f536:	7dfb      	ldrb	r3, [r7, #23]
 800f538:	3b20      	subs	r3, #32
 800f53a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f53c:	2300      	movs	r3, #0
 800f53e:	753b      	strb	r3, [r7, #20]
 800f540:	e012      	b.n	800f568 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f542:	7dfa      	ldrb	r2, [r7, #23]
 800f544:	7d38      	ldrb	r0, [r7, #20]
 800f546:	7d39      	ldrb	r1, [r7, #20]
 800f548:	4c48      	ldr	r4, [pc, #288]	; (800f66c <ILI9341_Draw_Char+0x164>)
 800f54a:	4613      	mov	r3, r2
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	4413      	add	r3, r2
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	4423      	add	r3, r4
 800f554:	4403      	add	r3, r0
 800f556:	781a      	ldrb	r2, [r3, #0]
 800f558:	f107 0318 	add.w	r3, r7, #24
 800f55c:	440b      	add	r3, r1
 800f55e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f562:	7d3b      	ldrb	r3, [r7, #20]
 800f564:	3301      	adds	r3, #1
 800f566:	753b      	strb	r3, [r7, #20]
 800f568:	7d3b      	ldrb	r3, [r7, #20]
 800f56a:	2b05      	cmp	r3, #5
 800f56c:	d9e9      	bls.n	800f542 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f56e:	2300      	movs	r3, #0
 800f570:	757b      	strb	r3, [r7, #21]
 800f572:	e074      	b.n	800f65e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f574:	2300      	movs	r3, #0
 800f576:	75bb      	strb	r3, [r7, #22]
 800f578:	e06b      	b.n	800f652 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f57a:	7d7b      	ldrb	r3, [r7, #21]
 800f57c:	f107 0218 	add.w	r2, r7, #24
 800f580:	4413      	add	r3, r2
 800f582:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f586:	461a      	mov	r2, r3
 800f588:	7dbb      	ldrb	r3, [r7, #22]
 800f58a:	fa42 f303 	asr.w	r3, r2, r3
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d02d      	beq.n	800f5f2 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f596:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d10e      	bne.n	800f5ba <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f59c:	7d7b      	ldrb	r3, [r7, #21]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	88bb      	ldrh	r3, [r7, #4]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	b298      	uxth	r0, r3
 800f5a6:	7dbb      	ldrb	r3, [r7, #22]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	887b      	ldrh	r3, [r7, #2]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	883a      	ldrh	r2, [r7, #0]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	f000 fb06 	bl	800fbc4 <ILI9341_Draw_Pixel>
 800f5b8:	e048      	b.n	800f64c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f5ba:	7d7b      	ldrb	r3, [r7, #21]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f5c0:	fb12 f303 	smulbb	r3, r2, r3
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	88bb      	ldrh	r3, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	b298      	uxth	r0, r3
 800f5cc:	7dbb      	ldrb	r3, [r7, #22]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f5d2:	fb12 f303 	smulbb	r3, r2, r3
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	887b      	ldrh	r3, [r7, #2]
 800f5da:	4413      	add	r3, r2
 800f5dc:	b299      	uxth	r1, r3
 800f5de:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f5e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	883b      	ldrh	r3, [r7, #0]
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	4623      	mov	r3, r4
 800f5ec:	f000 fc44 	bl	800fe78 <ILI9341_Draw_Rectangle>
 800f5f0:	e02c      	b.n	800f64c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f5f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d10e      	bne.n	800f616 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f5f8:	7d7b      	ldrb	r3, [r7, #21]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	88bb      	ldrh	r3, [r7, #4]
 800f5fe:	4413      	add	r3, r2
 800f600:	b298      	uxth	r0, r3
 800f602:	7dbb      	ldrb	r3, [r7, #22]
 800f604:	b29a      	uxth	r2, r3
 800f606:	887b      	ldrh	r3, [r7, #2]
 800f608:	4413      	add	r3, r2
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f60e:	4619      	mov	r1, r3
 800f610:	f000 fad8 	bl	800fbc4 <ILI9341_Draw_Pixel>
 800f614:	e01a      	b.n	800f64c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f616:	7d7b      	ldrb	r3, [r7, #21]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f61c:	fb12 f303 	smulbb	r3, r2, r3
 800f620:	b29a      	uxth	r2, r3
 800f622:	88bb      	ldrh	r3, [r7, #4]
 800f624:	4413      	add	r3, r2
 800f626:	b298      	uxth	r0, r3
 800f628:	7dbb      	ldrb	r3, [r7, #22]
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f62e:	fb12 f303 	smulbb	r3, r2, r3
 800f632:	b29a      	uxth	r2, r3
 800f634:	887b      	ldrh	r3, [r7, #2]
 800f636:	4413      	add	r3, r2
 800f638:	b299      	uxth	r1, r3
 800f63a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f63c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f63e:	2301      	movs	r3, #1
 800f640:	9301      	str	r3, [sp, #4]
 800f642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	4623      	mov	r3, r4
 800f648:	f000 fc16 	bl	800fe78 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f64c:	7dbb      	ldrb	r3, [r7, #22]
 800f64e:	3301      	adds	r3, #1
 800f650:	75bb      	strb	r3, [r7, #22]
 800f652:	7dbb      	ldrb	r3, [r7, #22]
 800f654:	2b07      	cmp	r3, #7
 800f656:	d990      	bls.n	800f57a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f658:	7d7b      	ldrb	r3, [r7, #21]
 800f65a:	3301      	adds	r3, #1
 800f65c:	757b      	strb	r3, [r7, #21]
 800f65e:	7d7b      	ldrb	r3, [r7, #21]
 800f660:	2b05      	cmp	r3, #5
 800f662:	d987      	bls.n	800f574 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f664:	bf00      	nop
 800f666:	371c      	adds	r7, #28
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd90      	pop	{r4, r7, pc}
 800f66c:	08015404 	.word	0x08015404

0800f670 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b087      	sub	sp, #28
 800f674:	af02      	add	r7, sp, #8
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	4608      	mov	r0, r1
 800f67a:	4611      	mov	r1, r2
 800f67c:	461a      	mov	r2, r3
 800f67e:	4603      	mov	r3, r0
 800f680:	817b      	strh	r3, [r7, #10]
 800f682:	460b      	mov	r3, r1
 800f684:	813b      	strh	r3, [r7, #8]
 800f686:	4613      	mov	r3, r2
 800f688:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f68a:	897b      	ldrh	r3, [r7, #10]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	b298      	uxth	r0, r3
 800f690:	8c3b      	ldrh	r3, [r7, #32]
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	b29a      	uxth	r2, r3
 800f696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f698:	8939      	ldrh	r1, [r7, #8]
 800f69a:	f000 f9b9 	bl	800fa10 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f69e:	897b      	ldrh	r3, [r7, #10]
 800f6a0:	3b02      	subs	r3, #2
 800f6a2:	b298      	uxth	r0, r3
 800f6a4:	8c3b      	ldrh	r3, [r7, #32]
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ac:	8939      	ldrh	r1, [r7, #8]
 800f6ae:	f000 f9af 	bl	800fa10 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f6b2:	e016      	b.n	800f6e2 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	60fa      	str	r2, [r7, #12]
 800f6ba:	7818      	ldrb	r0, [r3, #0]
 800f6bc:	88fc      	ldrh	r4, [r7, #6]
 800f6be:	893a      	ldrh	r2, [r7, #8]
 800f6c0:	8979      	ldrh	r1, [r7, #10]
 800f6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	8c3b      	ldrh	r3, [r7, #32]
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	4623      	mov	r3, r4
 800f6cc:	f7ff ff1c 	bl	800f508 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f6d0:	8c3b      	ldrh	r3, [r7, #32]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	0052      	lsls	r2, r2, #1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	897b      	ldrh	r3, [r7, #10]
 800f6de:	4413      	add	r3, r2
 800f6e0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1e4      	bne.n	800f6b4 <ILI9341_Draw_Text+0x44>
    }


}
 800f6ea:	bf00      	nop
 800f6ec:	3714      	adds	r7, #20
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd90      	pop	{r4, r7, pc}

0800f6f2 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f6f6:	f000 fca3 	bl	8010040 <_LCD_Enable>
	ILI9341_SPI_Init();
 800f6fa:	f000 f907 	bl	800f90c <ILI9341_SPI_Init>
	_LCD_Reset();
 800f6fe:	f000 fcaf 	bl	8010060 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f702:	2001      	movs	r0, #1
 800f704:	f000 fd7a 	bl	80101fc <_LCD_SendCommand>
	HAL_Delay(2000);
 800f708:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f70c:	f7f9 f9cc 	bl	8008aa8 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f710:	20cb      	movs	r0, #203	; 0xcb
 800f712:	f000 fd73 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f716:	2039      	movs	r0, #57	; 0x39
 800f718:	f000 fda2 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f71c:	202c      	movs	r0, #44	; 0x2c
 800f71e:	f000 fd9f 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f722:	2000      	movs	r0, #0
 800f724:	f000 fd9c 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x34);
 800f728:	2034      	movs	r0, #52	; 0x34
 800f72a:	f000 fd99 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x02);
 800f72e:	2002      	movs	r0, #2
 800f730:	f000 fd96 	bl	8010260 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f734:	20cf      	movs	r0, #207	; 0xcf
 800f736:	f000 fd61 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f73a:	2000      	movs	r0, #0
 800f73c:	f000 fd90 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f740:	20c1      	movs	r0, #193	; 0xc1
 800f742:	f000 fd8d 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x30);
 800f746:	2030      	movs	r0, #48	; 0x30
 800f748:	f000 fd8a 	bl	8010260 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f74c:	20e8      	movs	r0, #232	; 0xe8
 800f74e:	f000 fd55 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f752:	2085      	movs	r0, #133	; 0x85
 800f754:	f000 fd84 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f758:	2000      	movs	r0, #0
 800f75a:	f000 fd81 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x78);
 800f75e:	2078      	movs	r0, #120	; 0x78
 800f760:	f000 fd7e 	bl	8010260 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f764:	20ea      	movs	r0, #234	; 0xea
 800f766:	f000 fd49 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f76a:	2000      	movs	r0, #0
 800f76c:	f000 fd78 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f770:	2000      	movs	r0, #0
 800f772:	f000 fd75 	bl	8010260 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f776:	20ed      	movs	r0, #237	; 0xed
 800f778:	f000 fd40 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f77c:	2064      	movs	r0, #100	; 0x64
 800f77e:	f000 fd6f 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f782:	2003      	movs	r0, #3
 800f784:	f000 fd6c 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x12);
 800f788:	2012      	movs	r0, #18
 800f78a:	f000 fd69 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x81);
 800f78e:	2081      	movs	r0, #129	; 0x81
 800f790:	f000 fd66 	bl	8010260 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f794:	20f7      	movs	r0, #247	; 0xf7
 800f796:	f000 fd31 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f79a:	2020      	movs	r0, #32
 800f79c:	f000 fd60 	bl	8010260 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f7a0:	20c0      	movs	r0, #192	; 0xc0
 800f7a2:	f000 fd2b 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f7a6:	2023      	movs	r0, #35	; 0x23
 800f7a8:	f000 fd5a 	bl	8010260 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f7ac:	20c1      	movs	r0, #193	; 0xc1
 800f7ae:	f000 fd25 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f7b2:	2010      	movs	r0, #16
 800f7b4:	f000 fd54 	bl	8010260 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f7b8:	20c5      	movs	r0, #197	; 0xc5
 800f7ba:	f000 fd1f 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f7be:	203e      	movs	r0, #62	; 0x3e
 800f7c0:	f000 fd4e 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x28);
 800f7c4:	2028      	movs	r0, #40	; 0x28
 800f7c6:	f000 fd4b 	bl	8010260 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f7ca:	20c7      	movs	r0, #199	; 0xc7
 800f7cc:	f000 fd16 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f7d0:	2086      	movs	r0, #134	; 0x86
 800f7d2:	f000 fd45 	bl	8010260 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f7d6:	2036      	movs	r0, #54	; 0x36
 800f7d8:	f000 fd10 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f7dc:	2048      	movs	r0, #72	; 0x48
 800f7de:	f000 fd3f 	bl	8010260 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f7e2:	203a      	movs	r0, #58	; 0x3a
 800f7e4:	f000 fd0a 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f7e8:	2055      	movs	r0, #85	; 0x55
 800f7ea:	f000 fd39 	bl	8010260 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f7ee:	20b1      	movs	r0, #177	; 0xb1
 800f7f0:	f000 fd04 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	f000 fd33 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x18);
 800f7fa:	2018      	movs	r0, #24
 800f7fc:	f000 fd30 	bl	8010260 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f800:	20b6      	movs	r0, #182	; 0xb6
 800f802:	f000 fcfb 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f806:	2008      	movs	r0, #8
 800f808:	f000 fd2a 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x82);
 800f80c:	2082      	movs	r0, #130	; 0x82
 800f80e:	f000 fd27 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x27);
 800f812:	2027      	movs	r0, #39	; 0x27
 800f814:	f000 fd24 	bl	8010260 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f818:	20f2      	movs	r0, #242	; 0xf2
 800f81a:	f000 fcef 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f81e:	2000      	movs	r0, #0
 800f820:	f000 fd1e 	bl	8010260 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f824:	2026      	movs	r0, #38	; 0x26
 800f826:	f000 fce9 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f82a:	2001      	movs	r0, #1
 800f82c:	f000 fd18 	bl	8010260 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f830:	20e0      	movs	r0, #224	; 0xe0
 800f832:	f000 fce3 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f836:	200f      	movs	r0, #15
 800f838:	f000 fd12 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f83c:	2031      	movs	r0, #49	; 0x31
 800f83e:	f000 fd0f 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f842:	202b      	movs	r0, #43	; 0x2b
 800f844:	f000 fd0c 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f848:	200c      	movs	r0, #12
 800f84a:	f000 fd09 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f84e:	200e      	movs	r0, #14
 800f850:	f000 fd06 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f854:	2008      	movs	r0, #8
 800f856:	f000 fd03 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f85a:	204e      	movs	r0, #78	; 0x4e
 800f85c:	f000 fd00 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f860:	20f1      	movs	r0, #241	; 0xf1
 800f862:	f000 fcfd 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x37);
 800f866:	2037      	movs	r0, #55	; 0x37
 800f868:	f000 fcfa 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f86c:	2007      	movs	r0, #7
 800f86e:	f000 fcf7 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x10);
 800f872:	2010      	movs	r0, #16
 800f874:	f000 fcf4 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f878:	2003      	movs	r0, #3
 800f87a:	f000 fcf1 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f87e:	200e      	movs	r0, #14
 800f880:	f000 fcee 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x09);
 800f884:	2009      	movs	r0, #9
 800f886:	f000 fceb 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f88a:	2000      	movs	r0, #0
 800f88c:	f000 fce8 	bl	8010260 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800f890:	20e1      	movs	r0, #225	; 0xe1
 800f892:	f000 fcb3 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f896:	2000      	movs	r0, #0
 800f898:	f000 fce2 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f89c:	200e      	movs	r0, #14
 800f89e:	f000 fcdf 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x14);
 800f8a2:	2014      	movs	r0, #20
 800f8a4:	f000 fcdc 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f8a8:	2003      	movs	r0, #3
 800f8aa:	f000 fcd9 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x11);
 800f8ae:	2011      	movs	r0, #17
 800f8b0:	f000 fcd6 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f8b4:	2007      	movs	r0, #7
 800f8b6:	f000 fcd3 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f8ba:	2031      	movs	r0, #49	; 0x31
 800f8bc:	f000 fcd0 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f8c0:	20c1      	movs	r0, #193	; 0xc1
 800f8c2:	f000 fccd 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x48);
 800f8c6:	2048      	movs	r0, #72	; 0x48
 800f8c8:	f000 fcca 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f8cc:	2008      	movs	r0, #8
 800f8ce:	f000 fcc7 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f8d2:	200f      	movs	r0, #15
 800f8d4:	f000 fcc4 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f8d8:	200c      	movs	r0, #12
 800f8da:	f000 fcc1 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f8de:	2031      	movs	r0, #49	; 0x31
 800f8e0:	f000 fcbe 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x36);
 800f8e4:	2036      	movs	r0, #54	; 0x36
 800f8e6:	f000 fcbb 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f8ea:	200f      	movs	r0, #15
 800f8ec:	f000 fcb8 	bl	8010260 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800f8f0:	2011      	movs	r0, #17
 800f8f2:	f000 fc83 	bl	80101fc <_LCD_SendCommand>
	HAL_Delay(240);
 800f8f6:	20f0      	movs	r0, #240	; 0xf0
 800f8f8:	f7f9 f8d6 	bl	8008aa8 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800f8fc:	2029      	movs	r0, #41	; 0x29
 800f8fe:	f000 fc7d 	bl	80101fc <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800f902:	2000      	movs	r0, #0
 800f904:	f000 fb4e 	bl	800ffa4 <ILI9341_Set_Rotation>
}
 800f908:	bf00      	nop
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f910:	4b0b      	ldr	r3, [pc, #44]	; (800f940 <ILI9341_SPI_Init+0x34>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f918:	2b40      	cmp	r3, #64	; 0x40
 800f91a:	d005      	beq.n	800f928 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800f91c:	4b08      	ldr	r3, [pc, #32]	; (800f940 <ILI9341_SPI_Init+0x34>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a07      	ldr	r2, [pc, #28]	; (800f940 <ILI9341_SPI_Init+0x34>)
 800f922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f926:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f928:	4b06      	ldr	r3, [pc, #24]	; (800f944 <ILI9341_SPI_Init+0x38>)
 800f92a:	695b      	ldr	r3, [r3, #20]
 800f92c:	4a05      	ldr	r2, [pc, #20]	; (800f944 <ILI9341_SPI_Init+0x38>)
 800f92e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f932:	6153      	str	r3, [r2, #20]
}
 800f934:	bf00      	nop
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	40003c00 	.word	0x40003c00
 800f944:	48000400 	.word	0x48000400

0800f948 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af02      	add	r7, sp, #8
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	4611      	mov	r1, r2
 800f954:	461a      	mov	r2, r3
 800f956:	4623      	mov	r3, r4
 800f958:	80fb      	strh	r3, [r7, #6]
 800f95a:	4603      	mov	r3, r0
 800f95c:	80bb      	strh	r3, [r7, #4]
 800f95e:	460b      	mov	r3, r1
 800f960:	807b      	strh	r3, [r7, #2]
 800f962:	4613      	mov	r3, r2
 800f964:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800f966:	4b28      	ldr	r3, [pc, #160]	; (800fa08 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	88fa      	ldrh	r2, [r7, #6]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d246      	bcs.n	800fa00 <ILI9341_Draw_Horizontal_Line+0xb8>
 800f972:	4b26      	ldr	r3, [pc, #152]	; (800fa0c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800f974:	881b      	ldrh	r3, [r3, #0]
 800f976:	b29b      	uxth	r3, r3
 800f978:	88ba      	ldrh	r2, [r7, #4]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d240      	bcs.n	800fa00 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800f97e:	88fa      	ldrh	r2, [r7, #6]
 800f980:	887b      	ldrh	r3, [r7, #2]
 800f982:	4413      	add	r3, r2
 800f984:	3b01      	subs	r3, #1
 800f986:	4a20      	ldr	r2, [pc, #128]	; (800fa08 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f988:	8812      	ldrh	r2, [r2, #0]
 800f98a:	b292      	uxth	r2, r2
 800f98c:	4293      	cmp	r3, r2
 800f98e:	db05      	blt.n	800f99c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800f990:	4b1d      	ldr	r3, [pc, #116]	; (800fa08 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29a      	uxth	r2, r3
 800f996:	88fb      	ldrh	r3, [r7, #6]
 800f998:	1ad3      	subs	r3, r2, r3
 800f99a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800f99c:	88fa      	ldrh	r2, [r7, #6]
 800f99e:	887b      	ldrh	r3, [r7, #2]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	88bb      	ldrh	r3, [r7, #4]
 800f9aa:	88b9      	ldrh	r1, [r7, #4]
 800f9ac:	88f8      	ldrh	r0, [r7, #6]
 800f9ae:	f000 f893 	bl	800fad8 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800f9b6:	887b      	ldrh	r3, [r7, #2]
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d009      	beq.n	800f9d4 <ILI9341_Draw_Horizontal_Line+0x8c>
 800f9c0:	887b      	ldrh	r3, [r7, #2]
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d906      	bls.n	800f9d4 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800f9ca:	887b      	ldrh	r3, [r7, #2]
 800f9cc:	085b      	lsrs	r3, r3, #1
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800f9d4:	887c      	ldrh	r4, [r7, #2]
 800f9d6:	883a      	ldrh	r2, [r7, #0]
 800f9d8:	88b9      	ldrh	r1, [r7, #4]
 800f9da:	88f8      	ldrh	r0, [r7, #6]
 800f9dc:	2303      	movs	r3, #3
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	4623      	mov	r3, r4
 800f9e2:	f000 fb5b 	bl	801009c <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800f9e6:	7bfb      	ldrb	r3, [r7, #15]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00a      	beq.n	800fa02 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	887b      	ldrh	r3, [r7, #2]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	883a      	ldrh	r2, [r7, #0]
 800f9f6:	88b9      	ldrh	r1, [r7, #4]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f000 f8e3 	bl	800fbc4 <ILI9341_Draw_Pixel>
 800f9fe:	e000      	b.n	800fa02 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fa00:	bf00      	nop
							(ypos),
							colour);
	}


}
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd90      	pop	{r4, r7, pc}
 800fa08:	20000c42 	.word	0x20000c42
 800fa0c:	20000c40 	.word	0x20000c40

0800fa10 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800fa10:	b590      	push	{r4, r7, lr}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af02      	add	r7, sp, #8
 800fa16:	4604      	mov	r4, r0
 800fa18:	4608      	mov	r0, r1
 800fa1a:	4611      	mov	r1, r2
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	4623      	mov	r3, r4
 800fa20:	80fb      	strh	r3, [r7, #6]
 800fa22:	4603      	mov	r3, r0
 800fa24:	80bb      	strh	r3, [r7, #4]
 800fa26:	460b      	mov	r3, r1
 800fa28:	807b      	strh	r3, [r7, #2]
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fa2e:	4b28      	ldr	r3, [pc, #160]	; (800fad0 <ILI9341_Draw_Vertical_Line+0xc0>)
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	88fa      	ldrh	r2, [r7, #6]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d246      	bcs.n	800fac8 <ILI9341_Draw_Vertical_Line+0xb8>
 800fa3a:	4b26      	ldr	r3, [pc, #152]	; (800fad4 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fa3c:	881b      	ldrh	r3, [r3, #0]
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	88ba      	ldrh	r2, [r7, #4]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d240      	bcs.n	800fac8 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800fa46:	88ba      	ldrh	r2, [r7, #4]
 800fa48:	887b      	ldrh	r3, [r7, #2]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	4a21      	ldr	r2, [pc, #132]	; (800fad4 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fa50:	8812      	ldrh	r2, [r2, #0]
 800fa52:	b292      	uxth	r2, r2
 800fa54:	4293      	cmp	r3, r2
 800fa56:	db05      	blt.n	800fa64 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	88bb      	ldrh	r3, [r7, #4]
 800fa60:	1ad3      	subs	r3, r2, r3
 800fa62:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800fa64:	88ba      	ldrh	r2, [r7, #4]
 800fa66:	887b      	ldrh	r3, [r7, #2]
 800fa68:	4413      	add	r3, r2
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	88fa      	ldrh	r2, [r7, #6]
 800fa72:	88b9      	ldrh	r1, [r7, #4]
 800fa74:	88f8      	ldrh	r0, [r7, #6]
 800fa76:	f000 f82f 	bl	800fad8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800fa7e:	887b      	ldrh	r3, [r7, #2]
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d009      	beq.n	800fa9c <ILI9341_Draw_Vertical_Line+0x8c>
 800fa88:	887b      	ldrh	r3, [r7, #2]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d906      	bls.n	800fa9c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800fa92:	887b      	ldrh	r3, [r7, #2]
 800fa94:	085b      	lsrs	r3, r3, #1
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d008      	beq.n	800fab4 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800faa2:	88ba      	ldrh	r2, [r7, #4]
 800faa4:	887b      	ldrh	r3, [r7, #2]
 800faa6:	4413      	add	r3, r2
 800faa8:	b299      	uxth	r1, r3
 800faaa:	883a      	ldrh	r2, [r7, #0]
 800faac:	88fb      	ldrh	r3, [r7, #6]
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f888 	bl	800fbc4 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800fab4:	887c      	ldrh	r4, [r7, #2]
 800fab6:	883a      	ldrh	r2, [r7, #0]
 800fab8:	88b9      	ldrh	r1, [r7, #4]
 800faba:	88f8      	ldrh	r0, [r7, #6]
 800fabc:	2303      	movs	r3, #3
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	4623      	mov	r3, r4
 800fac2:	f000 faeb 	bl	801009c <_LCD_Write_Frame>
 800fac6:	e000      	b.n	800faca <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fac8:	bf00      	nop
}
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	bd90      	pop	{r4, r7, pc}
 800fad0:	20000c42 	.word	0x20000c42
 800fad4:	20000c40 	.word	0x20000c40

0800fad8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800fad8:	b590      	push	{r4, r7, lr}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	4604      	mov	r4, r0
 800fae0:	4608      	mov	r0, r1
 800fae2:	4611      	mov	r1, r2
 800fae4:	461a      	mov	r2, r3
 800fae6:	4623      	mov	r3, r4
 800fae8:	80fb      	strh	r3, [r7, #6]
 800faea:	4603      	mov	r3, r0
 800faec:	80bb      	strh	r3, [r7, #4]
 800faee:	460b      	mov	r3, r1
 800faf0:	807b      	strh	r3, [r7, #2]
 800faf2:	4613      	mov	r3, r2
 800faf4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800faf6:	202a      	movs	r0, #42	; 0x2a
 800faf8:	f000 fb80 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800fafc:	88fb      	ldrh	r3, [r7, #6]
 800fafe:	0a1b      	lsrs	r3, r3, #8
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 fbab 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(sc);
 800fb0a:	88fb      	ldrh	r3, [r7, #6]
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 fba6 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800fb14:	887b      	ldrh	r3, [r7, #2]
 800fb16:	0a1b      	lsrs	r3, r3, #8
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 fb9f 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(ec);
 800fb22:	887b      	ldrh	r3, [r7, #2]
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fb9a 	bl	8010260 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800fb2c:	202b      	movs	r0, #43	; 0x2b
 800fb2e:	f000 fb65 	bl	80101fc <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800fb32:	88bb      	ldrh	r3, [r7, #4]
 800fb34:	0a1b      	lsrs	r3, r3, #8
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 fb90 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(sp);
 800fb40:	88bb      	ldrh	r3, [r7, #4]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 fb8b 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800fb4a:	883b      	ldrh	r3, [r7, #0]
 800fb4c:	0a1b      	lsrs	r3, r3, #8
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	4618      	mov	r0, r3
 800fb54:	f000 fb84 	bl	8010260 <_LCD_SendData>
	_LCD_SendData(ep);
 800fb58:	883b      	ldrh	r3, [r7, #0]
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 fb7f 	bl	8010260 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800fb62:	202c      	movs	r0, #44	; 0x2c
 800fb64:	f000 fb4a 	bl	80101fc <_LCD_SendCommand>
}
 800fb68:	bf00      	nop
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd90      	pop	{r4, r7, pc}

0800fb70 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af02      	add	r7, sp, #8
 800fb76:	4603      	mov	r3, r0
 800fb78:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800fb7a:	4b10      	ldr	r3, [pc, #64]	; (800fbbc <ILI9341_Fill_Screen+0x4c>)
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	4b0f      	ldr	r3, [pc, #60]	; (800fbc0 <ILI9341_Fill_Screen+0x50>)
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	2100      	movs	r1, #0
 800fb88:	2000      	movs	r0, #0
 800fb8a:	f7ff ffa5 	bl	800fad8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800fb8e:	4b0b      	ldr	r3, [pc, #44]	; (800fbbc <ILI9341_Fill_Screen+0x4c>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	461a      	mov	r2, r3
 800fb96:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <ILI9341_Fill_Screen+0x50>)
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	fb03 f302 	mul.w	r3, r3, r2
 800fba0:	4619      	mov	r1, r3
 800fba2:	88fa      	ldrh	r2, [r7, #6]
 800fba4:	2304      	movs	r3, #4
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	460b      	mov	r3, r1
 800fbaa:	2100      	movs	r1, #0
 800fbac:	2000      	movs	r0, #0
 800fbae:	f000 fa75 	bl	801009c <_LCD_Write_Frame>
}
 800fbb2:	bf00      	nop
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	20000c42 	.word	0x20000c42
 800fbc0:	20000c40 	.word	0x20000c40

0800fbc4 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08e      	sub	sp, #56	; 0x38
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	4603      	mov	r3, r0
 800fbcc:	80fb      	strh	r3, [r7, #6]
 800fbce:	460b      	mov	r3, r1
 800fbd0:	80bb      	strh	r3, [r7, #4]
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fbd6:	4b98      	ldr	r3, [pc, #608]	; (800fe38 <ILI9341_Draw_Pixel+0x274>)
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	88fa      	ldrh	r2, [r7, #6]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	f080 8143 	bcs.w	800fe6a <ILI9341_Draw_Pixel+0x2a6>
 800fbe4:	4b95      	ldr	r3, [pc, #596]	; (800fe3c <ILI9341_Draw_Pixel+0x278>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	88ba      	ldrh	r2, [r7, #4]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	f080 813c 	bcs.w	800fe6a <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fbf2:	4b93      	ldr	r3, [pc, #588]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fbf4:	695b      	ldr	r3, [r3, #20]
 800fbf6:	4a92      	ldr	r2, [pc, #584]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fbf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbfc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fbfe:	4b90      	ldr	r3, [pc, #576]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc00:	695b      	ldr	r3, [r3, #20]
 800fc02:	4a8f      	ldr	r2, [pc, #572]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc08:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800fc0a:	220a      	movs	r2, #10
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	202a      	movs	r0, #42	; 0x2a
 800fc10:	f000 fb58 	bl	80102c4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fc14:	2300      	movs	r3, #0
 800fc16:	637b      	str	r3, [r7, #52]	; 0x34
 800fc18:	e008      	b.n	800fc2c <ILI9341_Draw_Pixel+0x68>
 800fc1a:	4b89      	ldr	r3, [pc, #548]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	4a88      	ldr	r2, [pc, #544]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc24:	6153      	str	r3, [r2, #20]
 800fc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc28:	3301      	adds	r3, #1
 800fc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	ddf3      	ble.n	800fc1a <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fc32:	4b83      	ldr	r3, [pc, #524]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	4a82      	ldr	r2, [pc, #520]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc3c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fc3e:	4b80      	ldr	r3, [pc, #512]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc40:	695b      	ldr	r3, [r3, #20]
 800fc42:	4a7f      	ldr	r2, [pc, #508]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc48:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fc4a:	4b7d      	ldr	r3, [pc, #500]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	4a7c      	ldr	r2, [pc, #496]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc54:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800fc56:	88fb      	ldrh	r3, [r7, #6]
 800fc58:	0a1b      	lsrs	r3, r3, #8
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	753b      	strb	r3, [r7, #20]
 800fc60:	88fb      	ldrh	r3, [r7, #6]
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	757b      	strb	r3, [r7, #21]
 800fc66:	88fb      	ldrh	r3, [r7, #6]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	121b      	asrs	r3, r3, #8
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	75bb      	strb	r3, [r7, #22]
 800fc70:	88fb      	ldrh	r3, [r7, #6]
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	3301      	adds	r3, #1
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800fc7a:	f107 0014 	add.w	r0, r7, #20
 800fc7e:	230a      	movs	r3, #10
 800fc80:	2200      	movs	r2, #0
 800fc82:	2104      	movs	r1, #4
 800fc84:	f000 fb50 	bl	8010328 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fc88:	2300      	movs	r3, #0
 800fc8a:	633b      	str	r3, [r7, #48]	; 0x30
 800fc8c:	e008      	b.n	800fca0 <ILI9341_Draw_Pixel+0xdc>
 800fc8e:	4b6c      	ldr	r3, [pc, #432]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc90:	695b      	ldr	r3, [r3, #20]
 800fc92:	4a6b      	ldr	r2, [pc, #428]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fc94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc98:	6153      	str	r3, [r2, #20]
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	633b      	str	r3, [r7, #48]	; 0x30
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	ddf3      	ble.n	800fc8e <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fca6:	4b66      	ldr	r3, [pc, #408]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	4a65      	ldr	r2, [pc, #404]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcb0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fcb2:	4b63      	ldr	r3, [pc, #396]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcb4:	695b      	ldr	r3, [r3, #20]
 800fcb6:	4a62      	ldr	r2, [pc, #392]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcbc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fcbe:	4b60      	ldr	r3, [pc, #384]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	4a5f      	ldr	r2, [pc, #380]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcc8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800fcca:	220a      	movs	r2, #10
 800fccc:	2100      	movs	r1, #0
 800fcce:	202b      	movs	r0, #43	; 0x2b
 800fcd0:	f000 faf8 	bl	80102c4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcd8:	e008      	b.n	800fcec <ILI9341_Draw_Pixel+0x128>
 800fcda:	4b59      	ldr	r3, [pc, #356]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcdc:	695b      	ldr	r3, [r3, #20]
 800fcde:	4a58      	ldr	r2, [pc, #352]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fce4:	6153      	str	r3, [r2, #20]
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	3301      	adds	r3, #1
 800fcea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	ddf3      	ble.n	800fcda <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fcf2:	4b53      	ldr	r3, [pc, #332]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcf4:	695b      	ldr	r3, [r3, #20]
 800fcf6:	4a52      	ldr	r2, [pc, #328]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fcfe:	4b50      	ldr	r3, [pc, #320]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd00:	695b      	ldr	r3, [r3, #20]
 800fd02:	4a4f      	ldr	r2, [pc, #316]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd08:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd0a:	4b4d      	ldr	r3, [pc, #308]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	4a4c      	ldr	r2, [pc, #304]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd14:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800fd16:	88bb      	ldrh	r3, [r7, #4]
 800fd18:	0a1b      	lsrs	r3, r3, #8
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	743b      	strb	r3, [r7, #16]
 800fd20:	88bb      	ldrh	r3, [r7, #4]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	747b      	strb	r3, [r7, #17]
 800fd26:	88bb      	ldrh	r3, [r7, #4]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	121b      	asrs	r3, r3, #8
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	74bb      	strb	r3, [r7, #18]
 800fd30:	88bb      	ldrh	r3, [r7, #4]
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	3301      	adds	r3, #1
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800fd3a:	f107 0010 	add.w	r0, r7, #16
 800fd3e:	230a      	movs	r3, #10
 800fd40:	2200      	movs	r2, #0
 800fd42:	2104      	movs	r1, #4
 800fd44:	f000 faf0 	bl	8010328 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd48:	2300      	movs	r3, #0
 800fd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd4c:	e008      	b.n	800fd60 <ILI9341_Draw_Pixel+0x19c>
 800fd4e:	4b3c      	ldr	r3, [pc, #240]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	4a3b      	ldr	r2, [pc, #236]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd58:	6153      	str	r3, [r2, #20]
 800fd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	ddf3      	ble.n	800fd4e <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fd66:	4b36      	ldr	r3, [pc, #216]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	4a35      	ldr	r2, [pc, #212]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd70:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fd72:	4b33      	ldr	r3, [pc, #204]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd74:	695b      	ldr	r3, [r3, #20]
 800fd76:	4a32      	ldr	r2, [pc, #200]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd7c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd7e:	4b30      	ldr	r3, [pc, #192]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd80:	695b      	ldr	r3, [r3, #20]
 800fd82:	4a2f      	ldr	r2, [pc, #188]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd88:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800fd8a:	220a      	movs	r2, #10
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	202c      	movs	r0, #44	; 0x2c
 800fd90:	f000 fa98 	bl	80102c4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd94:	2300      	movs	r3, #0
 800fd96:	627b      	str	r3, [r7, #36]	; 0x24
 800fd98:	e008      	b.n	800fdac <ILI9341_Draw_Pixel+0x1e8>
 800fd9a:	4b29      	ldr	r3, [pc, #164]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	4a28      	ldr	r2, [pc, #160]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda4:	6153      	str	r3, [r2, #20]
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	3301      	adds	r3, #1
 800fdaa:	627b      	str	r3, [r7, #36]	; 0x24
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	ddf3      	ble.n	800fd9a <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fdb2:	4b23      	ldr	r3, [pc, #140]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	4a22      	ldr	r2, [pc, #136]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdbc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fdbe:	4b20      	ldr	r3, [pc, #128]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	4a1f      	ldr	r2, [pc, #124]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc8:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdca:	4b1d      	ldr	r3, [pc, #116]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdcc:	695b      	ldr	r3, [r3, #20]
 800fdce:	4a1c      	ldr	r2, [pc, #112]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdd4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800fdd6:	887b      	ldrh	r3, [r7, #2]
 800fdd8:	0a1b      	lsrs	r3, r3, #8
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	733b      	strb	r3, [r7, #12]
 800fde0:	887b      	ldrh	r3, [r7, #2]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800fde6:	f107 000c 	add.w	r0, r7, #12
 800fdea:	2301      	movs	r3, #1
 800fdec:	2200      	movs	r2, #0
 800fdee:	2102      	movs	r1, #2
 800fdf0:	f000 fa9a 	bl	8010328 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	623b      	str	r3, [r7, #32]
 800fdf8:	e008      	b.n	800fe0c <ILI9341_Draw_Pixel+0x248>
 800fdfa:	4b11      	ldr	r3, [pc, #68]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fdfc:	695b      	ldr	r3, [r3, #20]
 800fdfe:	4a10      	ldr	r2, [pc, #64]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fe00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe04:	6153      	str	r3, [r2, #20]
 800fe06:	6a3b      	ldr	r3, [r7, #32]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	623b      	str	r3, [r7, #32]
 800fe0c:	6a3b      	ldr	r3, [r7, #32]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	ddf3      	ble.n	800fdfa <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe12:	2300      	movs	r3, #0
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	e008      	b.n	800fe2a <ILI9341_Draw_Pixel+0x266>
 800fe18:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fe1a:	695b      	ldr	r3, [r3, #20]
 800fe1c:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <ILI9341_Draw_Pixel+0x27c>)
 800fe1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe22:	6153      	str	r3, [r2, #20]
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	3301      	adds	r3, #1
 800fe28:	61fb      	str	r3, [r7, #28]
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	ddf3      	ble.n	800fe18 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe30:	2300      	movs	r3, #0
 800fe32:	61bb      	str	r3, [r7, #24]
 800fe34:	e00f      	b.n	800fe56 <ILI9341_Draw_Pixel+0x292>
 800fe36:	bf00      	nop
 800fe38:	20000c42 	.word	0x20000c42
 800fe3c:	20000c40 	.word	0x20000c40
 800fe40:	48000400 	.word	0x48000400
 800fe44:	4b0b      	ldr	r3, [pc, #44]	; (800fe74 <ILI9341_Draw_Pixel+0x2b0>)
 800fe46:	695b      	ldr	r3, [r3, #20]
 800fe48:	4a0a      	ldr	r2, [pc, #40]	; (800fe74 <ILI9341_Draw_Pixel+0x2b0>)
 800fe4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe4e:	6153      	str	r3, [r2, #20]
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	3301      	adds	r3, #1
 800fe54:	61bb      	str	r3, [r7, #24]
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	2b02      	cmp	r3, #2
 800fe5a:	ddf3      	ble.n	800fe44 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe5c:	4b05      	ldr	r3, [pc, #20]	; (800fe74 <ILI9341_Draw_Pixel+0x2b0>)
 800fe5e:	695b      	ldr	r3, [r3, #20]
 800fe60:	4a04      	ldr	r2, [pc, #16]	; (800fe74 <ILI9341_Draw_Pixel+0x2b0>)
 800fe62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe66:	6153      	str	r3, [r2, #20]
 800fe68:	e000      	b.n	800fe6c <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fe6a:	bf00      	nop


}
 800fe6c:	3738      	adds	r7, #56	; 0x38
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	48000400 	.word	0x48000400

0800fe78 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	af02      	add	r7, sp, #8
 800fe7e:	4604      	mov	r4, r0
 800fe80:	4608      	mov	r0, r1
 800fe82:	4611      	mov	r1, r2
 800fe84:	461a      	mov	r2, r3
 800fe86:	4623      	mov	r3, r4
 800fe88:	80fb      	strh	r3, [r7, #6]
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	80bb      	strh	r3, [r7, #4]
 800fe8e:	460b      	mov	r3, r1
 800fe90:	807b      	strh	r3, [r7, #2]
 800fe92:	4613      	mov	r3, r2
 800fe94:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fe96:	4b41      	ldr	r3, [pc, #260]	; (800ff9c <ILI9341_Draw_Rectangle+0x124>)
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	88fa      	ldrh	r2, [r7, #6]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d278      	bcs.n	800ff94 <ILI9341_Draw_Rectangle+0x11c>
 800fea2:	4b3f      	ldr	r3, [pc, #252]	; (800ffa0 <ILI9341_Draw_Rectangle+0x128>)
 800fea4:	881b      	ldrh	r3, [r3, #0]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	88ba      	ldrh	r2, [r7, #4]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d272      	bcs.n	800ff94 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800feae:	88fa      	ldrh	r2, [r7, #6]
 800feb0:	887b      	ldrh	r3, [r7, #2]
 800feb2:	4413      	add	r3, r2
 800feb4:	3b01      	subs	r3, #1
 800feb6:	4a39      	ldr	r2, [pc, #228]	; (800ff9c <ILI9341_Draw_Rectangle+0x124>)
 800feb8:	8812      	ldrh	r2, [r2, #0]
 800feba:	b292      	uxth	r2, r2
 800febc:	4293      	cmp	r3, r2
 800febe:	db05      	blt.n	800fecc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800fec0:	4b36      	ldr	r3, [pc, #216]	; (800ff9c <ILI9341_Draw_Rectangle+0x124>)
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	88fb      	ldrh	r3, [r7, #6]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800fecc:	88ba      	ldrh	r2, [r7, #4]
 800fece:	883b      	ldrh	r3, [r7, #0]
 800fed0:	4413      	add	r3, r2
 800fed2:	3b01      	subs	r3, #1
 800fed4:	4a32      	ldr	r2, [pc, #200]	; (800ffa0 <ILI9341_Draw_Rectangle+0x128>)
 800fed6:	8812      	ldrh	r2, [r2, #0]
 800fed8:	b292      	uxth	r2, r2
 800feda:	4293      	cmp	r3, r2
 800fedc:	db05      	blt.n	800feea <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800fede:	4b30      	ldr	r3, [pc, #192]	; (800ffa0 <ILI9341_Draw_Rectangle+0x128>)
 800fee0:	881b      	ldrh	r3, [r3, #0]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	88bb      	ldrh	r3, [r7, #4]
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800feea:	88fa      	ldrh	r2, [r7, #6]
 800feec:	887b      	ldrh	r3, [r7, #2]
 800feee:	4413      	add	r3, r2
 800fef0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fef2:	3b01      	subs	r3, #1
 800fef4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800fef6:	88ba      	ldrh	r2, [r7, #4]
 800fef8:	883b      	ldrh	r3, [r7, #0]
 800fefa:	4413      	add	r3, r2
 800fefc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	88b9      	ldrh	r1, [r7, #4]
 800ff04:	88f8      	ldrh	r0, [r7, #6]
 800ff06:	4622      	mov	r2, r4
 800ff08:	f7ff fde6 	bl	800fad8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ff0c:	883a      	ldrh	r2, [r7, #0]
 800ff0e:	887b      	ldrh	r3, [r7, #2]
 800ff10:	fb12 f303 	smulbb	r3, r2, r3
 800ff14:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ff1a:	89fb      	ldrh	r3, [r7, #14]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d009      	beq.n	800ff38 <ILI9341_Draw_Rectangle+0xc0>
 800ff24:	89fb      	ldrh	r3, [r7, #14]
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d906      	bls.n	800ff38 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ff2e:	89fb      	ldrh	r3, [r7, #14]
 800ff30:	085b      	lsrs	r3, r3, #1
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ff38:	89fc      	ldrh	r4, [r7, #14]
 800ff3a:	8c3a      	ldrh	r2, [r7, #32]
 800ff3c:	88b9      	ldrh	r1, [r7, #4]
 800ff3e:	88f8      	ldrh	r0, [r7, #6]
 800ff40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	4623      	mov	r3, r4
 800ff48:	f000 f8a8 	bl	801009c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ff4c:	7b7b      	ldrb	r3, [r7, #13]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d021      	beq.n	800ff96 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ff52:	88fa      	ldrh	r2, [r7, #6]
 800ff54:	887b      	ldrh	r3, [r7, #2]
 800ff56:	4413      	add	r3, r2
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	3b02      	subs	r3, #2
 800ff5c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ff5e:	88ba      	ldrh	r2, [r7, #4]
 800ff60:	883b      	ldrh	r3, [r7, #0]
 800ff62:	4413      	add	r3, r2
 800ff64:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ff66:	3b01      	subs	r3, #1
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	8c3a      	ldrh	r2, [r7, #32]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	f7ff fe29 	bl	800fbc4 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ff72:	88fa      	ldrh	r2, [r7, #6]
 800ff74:	887b      	ldrh	r3, [r7, #2]
 800ff76:	4413      	add	r3, r2
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ff7e:	88ba      	ldrh	r2, [r7, #4]
 800ff80:	883b      	ldrh	r3, [r7, #0]
 800ff82:	4413      	add	r3, r2
 800ff84:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ff86:	3b01      	subs	r3, #1
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	8c3a      	ldrh	r2, [r7, #32]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	f7ff fe19 	bl	800fbc4 <ILI9341_Draw_Pixel>
 800ff92:	e000      	b.n	800ff96 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ff94:	bf00      	nop
							colour);
	}
}
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd90      	pop	{r4, r7, pc}
 800ff9c:	20000c42 	.word	0x20000c42
 800ffa0:	20000c40 	.word	0x20000c40

0800ffa4 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800ffb2:	2036      	movs	r0, #54	; 0x36
 800ffb4:	f000 f922 	bl	80101fc <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	d836      	bhi.n	801002c <ILI9341_Set_Rotation+0x88>
 800ffbe:	a201      	add	r2, pc, #4	; (adr r2, 800ffc4 <ILI9341_Set_Rotation+0x20>)
 800ffc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc4:	0800ffd5 	.word	0x0800ffd5
 800ffc8:	0800ffeb 	.word	0x0800ffeb
 800ffcc:	08010001 	.word	0x08010001
 800ffd0:	08010017 	.word	0x08010017
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800ffd4:	2048      	movs	r0, #72	; 0x48
 800ffd6:	f000 f943 	bl	8010260 <_LCD_SendData>
			LCD_WIDTH = 240;
 800ffda:	4b17      	ldr	r3, [pc, #92]	; (8010038 <ILI9341_Set_Rotation+0x94>)
 800ffdc:	22f0      	movs	r2, #240	; 0xf0
 800ffde:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ffe0:	4b16      	ldr	r3, [pc, #88]	; (801003c <ILI9341_Set_Rotation+0x98>)
 800ffe2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ffe6:	801a      	strh	r2, [r3, #0]
			break;
 800ffe8:	e021      	b.n	801002e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800ffea:	2028      	movs	r0, #40	; 0x28
 800ffec:	f000 f938 	bl	8010260 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800fff0:	4b11      	ldr	r3, [pc, #68]	; (8010038 <ILI9341_Set_Rotation+0x94>)
 800fff2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fff6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800fff8:	4b10      	ldr	r3, [pc, #64]	; (801003c <ILI9341_Set_Rotation+0x98>)
 800fffa:	22f0      	movs	r2, #240	; 0xf0
 800fffc:	801a      	strh	r2, [r3, #0]
			break;
 800fffe:	e016      	b.n	801002e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 8010000:	2088      	movs	r0, #136	; 0x88
 8010002:	f000 f92d 	bl	8010260 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8010006:	4b0c      	ldr	r3, [pc, #48]	; (8010038 <ILI9341_Set_Rotation+0x94>)
 8010008:	22f0      	movs	r2, #240	; 0xf0
 801000a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 801000c:	4b0b      	ldr	r3, [pc, #44]	; (801003c <ILI9341_Set_Rotation+0x98>)
 801000e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010012:	801a      	strh	r2, [r3, #0]
			break;
 8010014:	e00b      	b.n	801002e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8010016:	20e8      	movs	r0, #232	; 0xe8
 8010018:	f000 f922 	bl	8010260 <_LCD_SendData>
			LCD_WIDTH  = 320;
 801001c:	4b06      	ldr	r3, [pc, #24]	; (8010038 <ILI9341_Set_Rotation+0x94>)
 801001e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010022:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8010024:	4b05      	ldr	r3, [pc, #20]	; (801003c <ILI9341_Set_Rotation+0x98>)
 8010026:	22f0      	movs	r2, #240	; 0xf0
 8010028:	801a      	strh	r2, [r3, #0]
			break;
 801002a:	e000      	b.n	801002e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 801002c:	bf00      	nop
	}
}
 801002e:	bf00      	nop
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	20000c42 	.word	0x20000c42
 801003c:	20000c40 	.word	0x20000c40

08010040 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8010040:	b480      	push	{r7}
 8010042:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8010044:	4b05      	ldr	r3, [pc, #20]	; (801005c <_LCD_Enable+0x1c>)
 8010046:	695b      	ldr	r3, [r3, #20]
 8010048:	4a04      	ldr	r2, [pc, #16]	; (801005c <_LCD_Enable+0x1c>)
 801004a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801004e:	6153      	str	r3, [r2, #20]
}
 8010050:	bf00      	nop
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	48000400 	.word	0x48000400

08010060 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8010060:	b580      	push	{r7, lr}
 8010062:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8010064:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <_LCD_Reset+0x38>)
 8010066:	695b      	ldr	r3, [r3, #20]
 8010068:	4a0b      	ldr	r2, [pc, #44]	; (8010098 <_LCD_Reset+0x38>)
 801006a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801006e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8010070:	20c8      	movs	r0, #200	; 0xc8
 8010072:	f7f8 fd19 	bl	8008aa8 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010076:	4b08      	ldr	r3, [pc, #32]	; (8010098 <_LCD_Reset+0x38>)
 8010078:	695b      	ldr	r3, [r3, #20]
 801007a:	4a07      	ldr	r2, [pc, #28]	; (8010098 <_LCD_Reset+0x38>)
 801007c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010080:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8010082:	20c8      	movs	r0, #200	; 0xc8
 8010084:	f7f8 fd10 	bl	8008aa8 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8010088:	4b03      	ldr	r3, [pc, #12]	; (8010098 <_LCD_Reset+0x38>)
 801008a:	695b      	ldr	r3, [r3, #20]
 801008c:	4a02      	ldr	r2, [pc, #8]	; (8010098 <_LCD_Reset+0x38>)
 801008e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010092:	6153      	str	r3, [r2, #20]
}
 8010094:	bf00      	nop
 8010096:	bd80      	pop	{r7, pc}
 8010098:	48000400 	.word	0x48000400

0801009c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 801009c:	b5b0      	push	{r4, r5, r7, lr}
 801009e:	b08e      	sub	sp, #56	; 0x38
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	607b      	str	r3, [r7, #4]
 80100a4:	4603      	mov	r3, r0
 80100a6:	81fb      	strh	r3, [r7, #14]
 80100a8:	460b      	mov	r3, r1
 80100aa:	81bb      	strh	r3, [r7, #12]
 80100ac:	4613      	mov	r3, r2
 80100ae:	817b      	strh	r3, [r7, #10]
 80100b0:	466b      	mov	r3, sp
 80100b2:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	005b      	lsls	r3, r3, #1
 80100bc:	4a4d      	ldr	r2, [pc, #308]	; (80101f4 <_LCD_Write_Frame+0x158>)
 80100be:	8812      	ldrh	r2, [r2, #0]
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d202      	bcs.n	80100ca <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100c8:	e002      	b.n	80100d0 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80100ca:	4b4a      	ldr	r3, [pc, #296]	; (80101f4 <_LCD_Write_Frame+0x158>)
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80100d0:	897b      	ldrh	r3, [r7, #10]
 80100d2:	0a1b      	lsrs	r3, r3, #8
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80100d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100da:	4603      	mov	r3, r0
 80100dc:	3b01      	subs	r3, #1
 80100de:	61bb      	str	r3, [r7, #24]
 80100e0:	4601      	mov	r1, r0
 80100e2:	f04f 0200 	mov.w	r2, #0
 80100e6:	f04f 0300 	mov.w	r3, #0
 80100ea:	f04f 0400 	mov.w	r4, #0
 80100ee:	00d4      	lsls	r4, r2, #3
 80100f0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80100f4:	00cb      	lsls	r3, r1, #3
 80100f6:	4601      	mov	r1, r0
 80100f8:	f04f 0200 	mov.w	r2, #0
 80100fc:	f04f 0300 	mov.w	r3, #0
 8010100:	f04f 0400 	mov.w	r4, #0
 8010104:	00d4      	lsls	r4, r2, #3
 8010106:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801010a:	00cb      	lsls	r3, r1, #3
 801010c:	1dc3      	adds	r3, r0, #7
 801010e:	08db      	lsrs	r3, r3, #3
 8010110:	00db      	lsls	r3, r3, #3
 8010112:	ebad 0d03 	sub.w	sp, sp, r3
 8010116:	466b      	mov	r3, sp
 8010118:	3300      	adds	r3, #0
 801011a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 801011c:	2300      	movs	r3, #0
 801011e:	633b      	str	r3, [r7, #48]	; 0x30
 8010120:	e00d      	b.n	801013e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 8010122:	697a      	ldr	r2, [r7, #20]
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	4413      	add	r3, r2
 8010128:	7ffa      	ldrb	r2, [r7, #31]
 801012a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 801012c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012e:	3301      	adds	r3, #1
 8010130:	897a      	ldrh	r2, [r7, #10]
 8010132:	b2d1      	uxtb	r1, r2
 8010134:	697a      	ldr	r2, [r7, #20]
 8010136:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	3302      	adds	r3, #2
 801013c:	633b      	str	r3, [r7, #48]	; 0x30
 801013e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	429a      	cmp	r2, r3
 8010144:	d3ed      	bcc.n	8010122 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	005b      	lsls	r3, r3, #1
 801014a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 801014c:	2301      	movs	r3, #1
 801014e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00d      	beq.n	8010176 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010162:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010168:	fbb3 f2f2 	udiv	r2, r3, r2
 801016c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801016e:	fb01 f202 	mul.w	r2, r1, r2
 8010172:	1a9b      	subs	r3, r3, r2
 8010174:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010176:	4b20      	ldr	r3, [pc, #128]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 8010178:	695b      	ldr	r3, [r3, #20]
 801017a:	4a1f      	ldr	r2, [pc, #124]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 801017c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010180:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010182:	4b1d      	ldr	r3, [pc, #116]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	4a1c      	ldr	r2, [pc, #112]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 8010188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801018c:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801018e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00f      	beq.n	80101b4 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8010194:	2300      	movs	r3, #0
 8010196:	627b      	str	r3, [r7, #36]	; 0x24
 8010198:	e008      	b.n	80101ac <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801019a:	6978      	ldr	r0, [r7, #20]
 801019c:	230a      	movs	r3, #10
 801019e:	2200      	movs	r2, #0
 80101a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101a2:	f000 f8c1 	bl	8010328 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80101a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a8:	3301      	adds	r3, #1
 80101aa:	627b      	str	r3, [r7, #36]	; 0x24
 80101ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d3f2      	bcc.n	801019a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80101b4:	6978      	ldr	r0, [r7, #20]
 80101b6:	230a      	movs	r3, #10
 80101b8:	2200      	movs	r2, #0
 80101ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101bc:	f000 f8b4 	bl	8010328 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80101c0:	2300      	movs	r3, #0
 80101c2:	623b      	str	r3, [r7, #32]
 80101c4:	e008      	b.n	80101d8 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80101c6:	4b0c      	ldr	r3, [pc, #48]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 80101c8:	695b      	ldr	r3, [r3, #20]
 80101ca:	4a0b      	ldr	r2, [pc, #44]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 80101cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101d0:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	3301      	adds	r3, #1
 80101d6:	623b      	str	r3, [r7, #32]
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	2b02      	cmp	r3, #2
 80101dc:	ddf3      	ble.n	80101c6 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80101de:	4b06      	ldr	r3, [pc, #24]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	4a05      	ldr	r2, [pc, #20]	; (80101f8 <_LCD_Write_Frame+0x15c>)
 80101e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e8:	6153      	str	r3, [r2, #20]
 80101ea:	46ad      	mov	sp, r5

}
 80101ec:	bf00      	nop
 80101ee:	3738      	adds	r7, #56	; 0x38
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bdb0      	pop	{r4, r5, r7, pc}
 80101f4:	20000c44 	.word	0x20000c44
 80101f8:	48000400 	.word	0x48000400

080101fc <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010206:	4b15      	ldr	r3, [pc, #84]	; (801025c <_LCD_SendCommand+0x60>)
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	4a14      	ldr	r2, [pc, #80]	; (801025c <_LCD_SendCommand+0x60>)
 801020c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010210:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010212:	4b12      	ldr	r3, [pc, #72]	; (801025c <_LCD_SendCommand+0x60>)
 8010214:	695b      	ldr	r3, [r3, #20]
 8010216:	4a11      	ldr	r2, [pc, #68]	; (801025c <_LCD_SendCommand+0x60>)
 8010218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801021c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 801021e:	79fb      	ldrb	r3, [r7, #7]
 8010220:	2200      	movs	r2, #0
 8010222:	2100      	movs	r1, #0
 8010224:	4618      	mov	r0, r3
 8010226:	f000 f84d 	bl	80102c4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801022a:	2300      	movs	r3, #0
 801022c:	60fb      	str	r3, [r7, #12]
 801022e:	e008      	b.n	8010242 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010230:	4b0a      	ldr	r3, [pc, #40]	; (801025c <_LCD_SendCommand+0x60>)
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	4a09      	ldr	r2, [pc, #36]	; (801025c <_LCD_SendCommand+0x60>)
 8010236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801023a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2b02      	cmp	r3, #2
 8010246:	ddf3      	ble.n	8010230 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010248:	4b04      	ldr	r3, [pc, #16]	; (801025c <_LCD_SendCommand+0x60>)
 801024a:	695b      	ldr	r3, [r3, #20]
 801024c:	4a03      	ldr	r2, [pc, #12]	; (801025c <_LCD_SendCommand+0x60>)
 801024e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010252:	6153      	str	r3, [r2, #20]
}
 8010254:	bf00      	nop
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	48000400 	.word	0x48000400

08010260 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801026a:	4b15      	ldr	r3, [pc, #84]	; (80102c0 <_LCD_SendData+0x60>)
 801026c:	695b      	ldr	r3, [r3, #20]
 801026e:	4a14      	ldr	r2, [pc, #80]	; (80102c0 <_LCD_SendData+0x60>)
 8010270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010274:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010276:	4b12      	ldr	r3, [pc, #72]	; (80102c0 <_LCD_SendData+0x60>)
 8010278:	695b      	ldr	r3, [r3, #20]
 801027a:	4a11      	ldr	r2, [pc, #68]	; (80102c0 <_LCD_SendData+0x60>)
 801027c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010280:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	2200      	movs	r2, #0
 8010286:	2100      	movs	r1, #0
 8010288:	4618      	mov	r0, r3
 801028a:	f000 f81b 	bl	80102c4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801028e:	2300      	movs	r3, #0
 8010290:	60fb      	str	r3, [r7, #12]
 8010292:	e008      	b.n	80102a6 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010294:	4b0a      	ldr	r3, [pc, #40]	; (80102c0 <_LCD_SendData+0x60>)
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	4a09      	ldr	r2, [pc, #36]	; (80102c0 <_LCD_SendData+0x60>)
 801029a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801029e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3301      	adds	r3, #1
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2b02      	cmp	r3, #2
 80102aa:	ddf3      	ble.n	8010294 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80102ac:	4b04      	ldr	r3, [pc, #16]	; (80102c0 <_LCD_SendData+0x60>)
 80102ae:	695b      	ldr	r3, [r3, #20]
 80102b0:	4a03      	ldr	r2, [pc, #12]	; (80102c0 <_LCD_SendData+0x60>)
 80102b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102b6:	6153      	str	r3, [r2, #20]
}
 80102b8:	bf00      	nop
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	48000400 	.word	0x48000400

080102c4 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	4603      	mov	r3, r0
 80102cc:	71fb      	strb	r3, [r7, #7]
 80102ce:	460b      	mov	r3, r1
 80102d0:	71bb      	strb	r3, [r7, #6]
 80102d2:	4613      	mov	r3, r2
 80102d4:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80102d6:	2300      	movs	r3, #0
 80102d8:	60fb      	str	r3, [r7, #12]
 80102da:	e003      	b.n	80102e4 <_SPI_SendByte+0x20>
   		asm("nop");
 80102dc:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	3301      	adds	r3, #1
 80102e2:	60fb      	str	r3, [r7, #12]
 80102e4:	79bb      	ldrb	r3, [r7, #6]
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	dbf7      	blt.n	80102dc <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80102ec:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <_SPI_SendByte+0x5c>)
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	f003 0302 	and.w	r3, r3, #2
 80102f4:	2b02      	cmp	r3, #2
 80102f6:	d102      	bne.n	80102fe <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80102f8:	4a0a      	ldr	r2, [pc, #40]	; (8010324 <_SPI_SendByte+0x60>)
 80102fa:	79fb      	ldrb	r3, [r7, #7]
 80102fc:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80102fe:	2300      	movs	r3, #0
 8010300:	60bb      	str	r3, [r7, #8]
 8010302:	e003      	b.n	801030c <_SPI_SendByte+0x48>
   		asm("nop");
 8010304:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	3301      	adds	r3, #1
 801030a:	60bb      	str	r3, [r7, #8]
 801030c:	797b      	ldrb	r3, [r7, #5]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	429a      	cmp	r2, r3
 8010312:	dbf7      	blt.n	8010304 <_SPI_SendByte+0x40>

#endif

}
 8010314:	bf00      	nop
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr
 8010320:	40003c00 	.word	0x40003c00
 8010324:	40003c0c 	.word	0x40003c0c

08010328 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8010328:	b480      	push	{r7}
 801032a:	b089      	sub	sp, #36	; 0x24
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	4611      	mov	r1, r2
 8010334:	461a      	mov	r2, r3
 8010336:	460b      	mov	r3, r1
 8010338:	71fb      	strb	r3, [r7, #7]
 801033a:	4613      	mov	r3, r2
 801033c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 801033e:	2300      	movs	r3, #0
 8010340:	61fb      	str	r3, [r7, #28]
 8010342:	e003      	b.n	801034c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8010344:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	3301      	adds	r3, #1
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	69fa      	ldr	r2, [r7, #28]
 8010350:	429a      	cmp	r2, r3
 8010352:	dbf7      	blt.n	8010344 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8010358:	e01d      	b.n	8010396 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801035a:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <_SPI_SendByteMultiByte+0xa4>)
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	f003 0302 	and.w	r3, r3, #2
 8010362:	2b02      	cmp	r3, #2
 8010364:	d117      	bne.n	8010396 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b01      	cmp	r3, #1
 801036a:	d90a      	bls.n	8010382 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	881a      	ldrh	r2, [r3, #0]
 8010370:	4b16      	ldr	r3, [pc, #88]	; (80103cc <_SPI_SendByteMultiByte+0xa4>)
 8010372:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	3302      	adds	r3, #2
 8010378:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	3b02      	subs	r3, #2
 801037e:	60bb      	str	r3, [r7, #8]
 8010380:	e009      	b.n	8010396 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8010382:	4a13      	ldr	r2, [pc, #76]	; (80103d0 <_SPI_SendByteMultiByte+0xa8>)
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	3301      	adds	r3, #1
 801038e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	3b01      	subs	r3, #1
 8010394:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1de      	bne.n	801035a <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 801039c:	4b0b      	ldr	r3, [pc, #44]	; (80103cc <_SPI_SendByteMultiByte+0xa4>)
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	4a0a      	ldr	r2, [pc, #40]	; (80103cc <_SPI_SendByteMultiByte+0xa4>)
 80103a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103a6:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80103a8:	2300      	movs	r3, #0
 80103aa:	617b      	str	r3, [r7, #20]
 80103ac:	e003      	b.n	80103b6 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 80103ae:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	3301      	adds	r3, #1
 80103b4:	617b      	str	r3, [r7, #20]
 80103b6:	79bb      	ldrb	r3, [r7, #6]
 80103b8:	697a      	ldr	r2, [r7, #20]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	dbf7      	blt.n	80103ae <_SPI_SendByteMultiByte+0x86>

#endif

}
 80103be:	bf00      	nop
 80103c0:	3724      	adds	r7, #36	; 0x24
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	40003c00 	.word	0x40003c00
 80103d0:	40003c0c 	.word	0x40003c0c

080103d4 <__errno>:
 80103d4:	4b01      	ldr	r3, [pc, #4]	; (80103dc <__errno+0x8>)
 80103d6:	6818      	ldr	r0, [r3, #0]
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	20001c38 	.word	0x20001c38

080103e0 <__libc_init_array>:
 80103e0:	b570      	push	{r4, r5, r6, lr}
 80103e2:	4e0d      	ldr	r6, [pc, #52]	; (8010418 <__libc_init_array+0x38>)
 80103e4:	4c0d      	ldr	r4, [pc, #52]	; (801041c <__libc_init_array+0x3c>)
 80103e6:	1ba4      	subs	r4, r4, r6
 80103e8:	10a4      	asrs	r4, r4, #2
 80103ea:	2500      	movs	r5, #0
 80103ec:	42a5      	cmp	r5, r4
 80103ee:	d109      	bne.n	8010404 <__libc_init_array+0x24>
 80103f0:	4e0b      	ldr	r6, [pc, #44]	; (8010420 <__libc_init_array+0x40>)
 80103f2:	4c0c      	ldr	r4, [pc, #48]	; (8010424 <__libc_init_array+0x44>)
 80103f4:	f004 f89e 	bl	8014534 <_init>
 80103f8:	1ba4      	subs	r4, r4, r6
 80103fa:	10a4      	asrs	r4, r4, #2
 80103fc:	2500      	movs	r5, #0
 80103fe:	42a5      	cmp	r5, r4
 8010400:	d105      	bne.n	801040e <__libc_init_array+0x2e>
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010408:	4798      	blx	r3
 801040a:	3501      	adds	r5, #1
 801040c:	e7ee      	b.n	80103ec <__libc_init_array+0xc>
 801040e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010412:	4798      	blx	r3
 8010414:	3501      	adds	r5, #1
 8010416:	e7f2      	b.n	80103fe <__libc_init_array+0x1e>
 8010418:	08015950 	.word	0x08015950
 801041c:	08015950 	.word	0x08015950
 8010420:	08015950 	.word	0x08015950
 8010424:	08015954 	.word	0x08015954

08010428 <memset>:
 8010428:	4402      	add	r2, r0
 801042a:	4603      	mov	r3, r0
 801042c:	4293      	cmp	r3, r2
 801042e:	d100      	bne.n	8010432 <memset+0xa>
 8010430:	4770      	bx	lr
 8010432:	f803 1b01 	strb.w	r1, [r3], #1
 8010436:	e7f9      	b.n	801042c <memset+0x4>

08010438 <__cvt>:
 8010438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801043c:	ec55 4b10 	vmov	r4, r5, d0
 8010440:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010442:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010446:	2d00      	cmp	r5, #0
 8010448:	460e      	mov	r6, r1
 801044a:	4691      	mov	r9, r2
 801044c:	4619      	mov	r1, r3
 801044e:	bfb8      	it	lt
 8010450:	4622      	movlt	r2, r4
 8010452:	462b      	mov	r3, r5
 8010454:	f027 0720 	bic.w	r7, r7, #32
 8010458:	bfbb      	ittet	lt
 801045a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801045e:	461d      	movlt	r5, r3
 8010460:	2300      	movge	r3, #0
 8010462:	232d      	movlt	r3, #45	; 0x2d
 8010464:	bfb8      	it	lt
 8010466:	4614      	movlt	r4, r2
 8010468:	2f46      	cmp	r7, #70	; 0x46
 801046a:	700b      	strb	r3, [r1, #0]
 801046c:	d004      	beq.n	8010478 <__cvt+0x40>
 801046e:	2f45      	cmp	r7, #69	; 0x45
 8010470:	d100      	bne.n	8010474 <__cvt+0x3c>
 8010472:	3601      	adds	r6, #1
 8010474:	2102      	movs	r1, #2
 8010476:	e000      	b.n	801047a <__cvt+0x42>
 8010478:	2103      	movs	r1, #3
 801047a:	ab03      	add	r3, sp, #12
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	ab02      	add	r3, sp, #8
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	4632      	mov	r2, r6
 8010484:	4653      	mov	r3, sl
 8010486:	ec45 4b10 	vmov	d0, r4, r5
 801048a:	f000 fe3d 	bl	8011108 <_dtoa_r>
 801048e:	2f47      	cmp	r7, #71	; 0x47
 8010490:	4680      	mov	r8, r0
 8010492:	d102      	bne.n	801049a <__cvt+0x62>
 8010494:	f019 0f01 	tst.w	r9, #1
 8010498:	d026      	beq.n	80104e8 <__cvt+0xb0>
 801049a:	2f46      	cmp	r7, #70	; 0x46
 801049c:	eb08 0906 	add.w	r9, r8, r6
 80104a0:	d111      	bne.n	80104c6 <__cvt+0x8e>
 80104a2:	f898 3000 	ldrb.w	r3, [r8]
 80104a6:	2b30      	cmp	r3, #48	; 0x30
 80104a8:	d10a      	bne.n	80104c0 <__cvt+0x88>
 80104aa:	2200      	movs	r2, #0
 80104ac:	2300      	movs	r3, #0
 80104ae:	4620      	mov	r0, r4
 80104b0:	4629      	mov	r1, r5
 80104b2:	f7f0 fb31 	bl	8000b18 <__aeabi_dcmpeq>
 80104b6:	b918      	cbnz	r0, 80104c0 <__cvt+0x88>
 80104b8:	f1c6 0601 	rsb	r6, r6, #1
 80104bc:	f8ca 6000 	str.w	r6, [sl]
 80104c0:	f8da 3000 	ldr.w	r3, [sl]
 80104c4:	4499      	add	r9, r3
 80104c6:	2200      	movs	r2, #0
 80104c8:	2300      	movs	r3, #0
 80104ca:	4620      	mov	r0, r4
 80104cc:	4629      	mov	r1, r5
 80104ce:	f7f0 fb23 	bl	8000b18 <__aeabi_dcmpeq>
 80104d2:	b938      	cbnz	r0, 80104e4 <__cvt+0xac>
 80104d4:	2230      	movs	r2, #48	; 0x30
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	454b      	cmp	r3, r9
 80104da:	d205      	bcs.n	80104e8 <__cvt+0xb0>
 80104dc:	1c59      	adds	r1, r3, #1
 80104de:	9103      	str	r1, [sp, #12]
 80104e0:	701a      	strb	r2, [r3, #0]
 80104e2:	e7f8      	b.n	80104d6 <__cvt+0x9e>
 80104e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80104e8:	9b03      	ldr	r3, [sp, #12]
 80104ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104ec:	eba3 0308 	sub.w	r3, r3, r8
 80104f0:	4640      	mov	r0, r8
 80104f2:	6013      	str	r3, [r2, #0]
 80104f4:	b004      	add	sp, #16
 80104f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080104fa <__exponent>:
 80104fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104fc:	2900      	cmp	r1, #0
 80104fe:	4604      	mov	r4, r0
 8010500:	bfba      	itte	lt
 8010502:	4249      	neglt	r1, r1
 8010504:	232d      	movlt	r3, #45	; 0x2d
 8010506:	232b      	movge	r3, #43	; 0x2b
 8010508:	2909      	cmp	r1, #9
 801050a:	f804 2b02 	strb.w	r2, [r4], #2
 801050e:	7043      	strb	r3, [r0, #1]
 8010510:	dd20      	ble.n	8010554 <__exponent+0x5a>
 8010512:	f10d 0307 	add.w	r3, sp, #7
 8010516:	461f      	mov	r7, r3
 8010518:	260a      	movs	r6, #10
 801051a:	fb91 f5f6 	sdiv	r5, r1, r6
 801051e:	fb06 1115 	mls	r1, r6, r5, r1
 8010522:	3130      	adds	r1, #48	; 0x30
 8010524:	2d09      	cmp	r5, #9
 8010526:	f803 1c01 	strb.w	r1, [r3, #-1]
 801052a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801052e:	4629      	mov	r1, r5
 8010530:	dc09      	bgt.n	8010546 <__exponent+0x4c>
 8010532:	3130      	adds	r1, #48	; 0x30
 8010534:	3b02      	subs	r3, #2
 8010536:	f802 1c01 	strb.w	r1, [r2, #-1]
 801053a:	42bb      	cmp	r3, r7
 801053c:	4622      	mov	r2, r4
 801053e:	d304      	bcc.n	801054a <__exponent+0x50>
 8010540:	1a10      	subs	r0, r2, r0
 8010542:	b003      	add	sp, #12
 8010544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010546:	4613      	mov	r3, r2
 8010548:	e7e7      	b.n	801051a <__exponent+0x20>
 801054a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801054e:	f804 2b01 	strb.w	r2, [r4], #1
 8010552:	e7f2      	b.n	801053a <__exponent+0x40>
 8010554:	2330      	movs	r3, #48	; 0x30
 8010556:	4419      	add	r1, r3
 8010558:	7083      	strb	r3, [r0, #2]
 801055a:	1d02      	adds	r2, r0, #4
 801055c:	70c1      	strb	r1, [r0, #3]
 801055e:	e7ef      	b.n	8010540 <__exponent+0x46>

08010560 <_printf_float>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	b08d      	sub	sp, #52	; 0x34
 8010566:	460c      	mov	r4, r1
 8010568:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801056c:	4616      	mov	r6, r2
 801056e:	461f      	mov	r7, r3
 8010570:	4605      	mov	r5, r0
 8010572:	f001 fcfb 	bl	8011f6c <_localeconv_r>
 8010576:	6803      	ldr	r3, [r0, #0]
 8010578:	9304      	str	r3, [sp, #16]
 801057a:	4618      	mov	r0, r3
 801057c:	f7ef fe50 	bl	8000220 <strlen>
 8010580:	2300      	movs	r3, #0
 8010582:	930a      	str	r3, [sp, #40]	; 0x28
 8010584:	f8d8 3000 	ldr.w	r3, [r8]
 8010588:	9005      	str	r0, [sp, #20]
 801058a:	3307      	adds	r3, #7
 801058c:	f023 0307 	bic.w	r3, r3, #7
 8010590:	f103 0208 	add.w	r2, r3, #8
 8010594:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010598:	f8d4 b000 	ldr.w	fp, [r4]
 801059c:	f8c8 2000 	str.w	r2, [r8]
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80105a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80105ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80105b0:	9307      	str	r3, [sp, #28]
 80105b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80105b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ba:	4ba7      	ldr	r3, [pc, #668]	; (8010858 <_printf_float+0x2f8>)
 80105bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105c0:	f7f0 fadc 	bl	8000b7c <__aeabi_dcmpun>
 80105c4:	bb70      	cbnz	r0, 8010624 <_printf_float+0xc4>
 80105c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ca:	4ba3      	ldr	r3, [pc, #652]	; (8010858 <_printf_float+0x2f8>)
 80105cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105d0:	f7f0 fab6 	bl	8000b40 <__aeabi_dcmple>
 80105d4:	bb30      	cbnz	r0, 8010624 <_printf_float+0xc4>
 80105d6:	2200      	movs	r2, #0
 80105d8:	2300      	movs	r3, #0
 80105da:	4640      	mov	r0, r8
 80105dc:	4649      	mov	r1, r9
 80105de:	f7f0 faa5 	bl	8000b2c <__aeabi_dcmplt>
 80105e2:	b110      	cbz	r0, 80105ea <_printf_float+0x8a>
 80105e4:	232d      	movs	r3, #45	; 0x2d
 80105e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ea:	4a9c      	ldr	r2, [pc, #624]	; (801085c <_printf_float+0x2fc>)
 80105ec:	4b9c      	ldr	r3, [pc, #624]	; (8010860 <_printf_float+0x300>)
 80105ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80105f2:	bf8c      	ite	hi
 80105f4:	4690      	movhi	r8, r2
 80105f6:	4698      	movls	r8, r3
 80105f8:	2303      	movs	r3, #3
 80105fa:	f02b 0204 	bic.w	r2, fp, #4
 80105fe:	6123      	str	r3, [r4, #16]
 8010600:	6022      	str	r2, [r4, #0]
 8010602:	f04f 0900 	mov.w	r9, #0
 8010606:	9700      	str	r7, [sp, #0]
 8010608:	4633      	mov	r3, r6
 801060a:	aa0b      	add	r2, sp, #44	; 0x2c
 801060c:	4621      	mov	r1, r4
 801060e:	4628      	mov	r0, r5
 8010610:	f000 f9e6 	bl	80109e0 <_printf_common>
 8010614:	3001      	adds	r0, #1
 8010616:	f040 808d 	bne.w	8010734 <_printf_float+0x1d4>
 801061a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801061e:	b00d      	add	sp, #52	; 0x34
 8010620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010624:	4642      	mov	r2, r8
 8010626:	464b      	mov	r3, r9
 8010628:	4640      	mov	r0, r8
 801062a:	4649      	mov	r1, r9
 801062c:	f7f0 faa6 	bl	8000b7c <__aeabi_dcmpun>
 8010630:	b110      	cbz	r0, 8010638 <_printf_float+0xd8>
 8010632:	4a8c      	ldr	r2, [pc, #560]	; (8010864 <_printf_float+0x304>)
 8010634:	4b8c      	ldr	r3, [pc, #560]	; (8010868 <_printf_float+0x308>)
 8010636:	e7da      	b.n	80105ee <_printf_float+0x8e>
 8010638:	6861      	ldr	r1, [r4, #4]
 801063a:	1c4b      	adds	r3, r1, #1
 801063c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010640:	a80a      	add	r0, sp, #40	; 0x28
 8010642:	d13e      	bne.n	80106c2 <_printf_float+0x162>
 8010644:	2306      	movs	r3, #6
 8010646:	6063      	str	r3, [r4, #4]
 8010648:	2300      	movs	r3, #0
 801064a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801064e:	ab09      	add	r3, sp, #36	; 0x24
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	ec49 8b10 	vmov	d0, r8, r9
 8010656:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801065a:	6022      	str	r2, [r4, #0]
 801065c:	f8cd a004 	str.w	sl, [sp, #4]
 8010660:	6861      	ldr	r1, [r4, #4]
 8010662:	4628      	mov	r0, r5
 8010664:	f7ff fee8 	bl	8010438 <__cvt>
 8010668:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801066c:	2b47      	cmp	r3, #71	; 0x47
 801066e:	4680      	mov	r8, r0
 8010670:	d109      	bne.n	8010686 <_printf_float+0x126>
 8010672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010674:	1cd8      	adds	r0, r3, #3
 8010676:	db02      	blt.n	801067e <_printf_float+0x11e>
 8010678:	6862      	ldr	r2, [r4, #4]
 801067a:	4293      	cmp	r3, r2
 801067c:	dd47      	ble.n	801070e <_printf_float+0x1ae>
 801067e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010682:	fa5f fa8a 	uxtb.w	sl, sl
 8010686:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801068a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801068c:	d824      	bhi.n	80106d8 <_printf_float+0x178>
 801068e:	3901      	subs	r1, #1
 8010690:	4652      	mov	r2, sl
 8010692:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010696:	9109      	str	r1, [sp, #36]	; 0x24
 8010698:	f7ff ff2f 	bl	80104fa <__exponent>
 801069c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801069e:	1813      	adds	r3, r2, r0
 80106a0:	2a01      	cmp	r2, #1
 80106a2:	4681      	mov	r9, r0
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	dc02      	bgt.n	80106ae <_printf_float+0x14e>
 80106a8:	6822      	ldr	r2, [r4, #0]
 80106aa:	07d1      	lsls	r1, r2, #31
 80106ac:	d501      	bpl.n	80106b2 <_printf_float+0x152>
 80106ae:	3301      	adds	r3, #1
 80106b0:	6123      	str	r3, [r4, #16]
 80106b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d0a5      	beq.n	8010606 <_printf_float+0xa6>
 80106ba:	232d      	movs	r3, #45	; 0x2d
 80106bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106c0:	e7a1      	b.n	8010606 <_printf_float+0xa6>
 80106c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80106c6:	f000 8177 	beq.w	80109b8 <_printf_float+0x458>
 80106ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80106ce:	d1bb      	bne.n	8010648 <_printf_float+0xe8>
 80106d0:	2900      	cmp	r1, #0
 80106d2:	d1b9      	bne.n	8010648 <_printf_float+0xe8>
 80106d4:	2301      	movs	r3, #1
 80106d6:	e7b6      	b.n	8010646 <_printf_float+0xe6>
 80106d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80106dc:	d119      	bne.n	8010712 <_printf_float+0x1b2>
 80106de:	2900      	cmp	r1, #0
 80106e0:	6863      	ldr	r3, [r4, #4]
 80106e2:	dd0c      	ble.n	80106fe <_printf_float+0x19e>
 80106e4:	6121      	str	r1, [r4, #16]
 80106e6:	b913      	cbnz	r3, 80106ee <_printf_float+0x18e>
 80106e8:	6822      	ldr	r2, [r4, #0]
 80106ea:	07d2      	lsls	r2, r2, #31
 80106ec:	d502      	bpl.n	80106f4 <_printf_float+0x194>
 80106ee:	3301      	adds	r3, #1
 80106f0:	440b      	add	r3, r1
 80106f2:	6123      	str	r3, [r4, #16]
 80106f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80106f8:	f04f 0900 	mov.w	r9, #0
 80106fc:	e7d9      	b.n	80106b2 <_printf_float+0x152>
 80106fe:	b913      	cbnz	r3, 8010706 <_printf_float+0x1a6>
 8010700:	6822      	ldr	r2, [r4, #0]
 8010702:	07d0      	lsls	r0, r2, #31
 8010704:	d501      	bpl.n	801070a <_printf_float+0x1aa>
 8010706:	3302      	adds	r3, #2
 8010708:	e7f3      	b.n	80106f2 <_printf_float+0x192>
 801070a:	2301      	movs	r3, #1
 801070c:	e7f1      	b.n	80106f2 <_printf_float+0x192>
 801070e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010712:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010716:	4293      	cmp	r3, r2
 8010718:	db05      	blt.n	8010726 <_printf_float+0x1c6>
 801071a:	6822      	ldr	r2, [r4, #0]
 801071c:	6123      	str	r3, [r4, #16]
 801071e:	07d1      	lsls	r1, r2, #31
 8010720:	d5e8      	bpl.n	80106f4 <_printf_float+0x194>
 8010722:	3301      	adds	r3, #1
 8010724:	e7e5      	b.n	80106f2 <_printf_float+0x192>
 8010726:	2b00      	cmp	r3, #0
 8010728:	bfd4      	ite	le
 801072a:	f1c3 0302 	rsble	r3, r3, #2
 801072e:	2301      	movgt	r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	e7de      	b.n	80106f2 <_printf_float+0x192>
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	055a      	lsls	r2, r3, #21
 8010738:	d407      	bmi.n	801074a <_printf_float+0x1ea>
 801073a:	6923      	ldr	r3, [r4, #16]
 801073c:	4642      	mov	r2, r8
 801073e:	4631      	mov	r1, r6
 8010740:	4628      	mov	r0, r5
 8010742:	47b8      	blx	r7
 8010744:	3001      	adds	r0, #1
 8010746:	d12b      	bne.n	80107a0 <_printf_float+0x240>
 8010748:	e767      	b.n	801061a <_printf_float+0xba>
 801074a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801074e:	f240 80dc 	bls.w	801090a <_printf_float+0x3aa>
 8010752:	2200      	movs	r2, #0
 8010754:	2300      	movs	r3, #0
 8010756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801075a:	f7f0 f9dd 	bl	8000b18 <__aeabi_dcmpeq>
 801075e:	2800      	cmp	r0, #0
 8010760:	d033      	beq.n	80107ca <_printf_float+0x26a>
 8010762:	2301      	movs	r3, #1
 8010764:	4a41      	ldr	r2, [pc, #260]	; (801086c <_printf_float+0x30c>)
 8010766:	4631      	mov	r1, r6
 8010768:	4628      	mov	r0, r5
 801076a:	47b8      	blx	r7
 801076c:	3001      	adds	r0, #1
 801076e:	f43f af54 	beq.w	801061a <_printf_float+0xba>
 8010772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010776:	429a      	cmp	r2, r3
 8010778:	db02      	blt.n	8010780 <_printf_float+0x220>
 801077a:	6823      	ldr	r3, [r4, #0]
 801077c:	07d8      	lsls	r0, r3, #31
 801077e:	d50f      	bpl.n	80107a0 <_printf_float+0x240>
 8010780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010784:	4631      	mov	r1, r6
 8010786:	4628      	mov	r0, r5
 8010788:	47b8      	blx	r7
 801078a:	3001      	adds	r0, #1
 801078c:	f43f af45 	beq.w	801061a <_printf_float+0xba>
 8010790:	f04f 0800 	mov.w	r8, #0
 8010794:	f104 091a 	add.w	r9, r4, #26
 8010798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801079a:	3b01      	subs	r3, #1
 801079c:	4543      	cmp	r3, r8
 801079e:	dc09      	bgt.n	80107b4 <_printf_float+0x254>
 80107a0:	6823      	ldr	r3, [r4, #0]
 80107a2:	079b      	lsls	r3, r3, #30
 80107a4:	f100 8103 	bmi.w	80109ae <_printf_float+0x44e>
 80107a8:	68e0      	ldr	r0, [r4, #12]
 80107aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ac:	4298      	cmp	r0, r3
 80107ae:	bfb8      	it	lt
 80107b0:	4618      	movlt	r0, r3
 80107b2:	e734      	b.n	801061e <_printf_float+0xbe>
 80107b4:	2301      	movs	r3, #1
 80107b6:	464a      	mov	r2, r9
 80107b8:	4631      	mov	r1, r6
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b8      	blx	r7
 80107be:	3001      	adds	r0, #1
 80107c0:	f43f af2b 	beq.w	801061a <_printf_float+0xba>
 80107c4:	f108 0801 	add.w	r8, r8, #1
 80107c8:	e7e6      	b.n	8010798 <_printf_float+0x238>
 80107ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	dc2b      	bgt.n	8010828 <_printf_float+0x2c8>
 80107d0:	2301      	movs	r3, #1
 80107d2:	4a26      	ldr	r2, [pc, #152]	; (801086c <_printf_float+0x30c>)
 80107d4:	4631      	mov	r1, r6
 80107d6:	4628      	mov	r0, r5
 80107d8:	47b8      	blx	r7
 80107da:	3001      	adds	r0, #1
 80107dc:	f43f af1d 	beq.w	801061a <_printf_float+0xba>
 80107e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e2:	b923      	cbnz	r3, 80107ee <_printf_float+0x28e>
 80107e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107e6:	b913      	cbnz	r3, 80107ee <_printf_float+0x28e>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	07d9      	lsls	r1, r3, #31
 80107ec:	d5d8      	bpl.n	80107a0 <_printf_float+0x240>
 80107ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107f2:	4631      	mov	r1, r6
 80107f4:	4628      	mov	r0, r5
 80107f6:	47b8      	blx	r7
 80107f8:	3001      	adds	r0, #1
 80107fa:	f43f af0e 	beq.w	801061a <_printf_float+0xba>
 80107fe:	f04f 0900 	mov.w	r9, #0
 8010802:	f104 0a1a 	add.w	sl, r4, #26
 8010806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010808:	425b      	negs	r3, r3
 801080a:	454b      	cmp	r3, r9
 801080c:	dc01      	bgt.n	8010812 <_printf_float+0x2b2>
 801080e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010810:	e794      	b.n	801073c <_printf_float+0x1dc>
 8010812:	2301      	movs	r3, #1
 8010814:	4652      	mov	r2, sl
 8010816:	4631      	mov	r1, r6
 8010818:	4628      	mov	r0, r5
 801081a:	47b8      	blx	r7
 801081c:	3001      	adds	r0, #1
 801081e:	f43f aefc 	beq.w	801061a <_printf_float+0xba>
 8010822:	f109 0901 	add.w	r9, r9, #1
 8010826:	e7ee      	b.n	8010806 <_printf_float+0x2a6>
 8010828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801082a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801082c:	429a      	cmp	r2, r3
 801082e:	bfa8      	it	ge
 8010830:	461a      	movge	r2, r3
 8010832:	2a00      	cmp	r2, #0
 8010834:	4691      	mov	r9, r2
 8010836:	dd07      	ble.n	8010848 <_printf_float+0x2e8>
 8010838:	4613      	mov	r3, r2
 801083a:	4631      	mov	r1, r6
 801083c:	4642      	mov	r2, r8
 801083e:	4628      	mov	r0, r5
 8010840:	47b8      	blx	r7
 8010842:	3001      	adds	r0, #1
 8010844:	f43f aee9 	beq.w	801061a <_printf_float+0xba>
 8010848:	f104 031a 	add.w	r3, r4, #26
 801084c:	f04f 0b00 	mov.w	fp, #0
 8010850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010854:	9306      	str	r3, [sp, #24]
 8010856:	e015      	b.n	8010884 <_printf_float+0x324>
 8010858:	7fefffff 	.word	0x7fefffff
 801085c:	0801564c 	.word	0x0801564c
 8010860:	08015648 	.word	0x08015648
 8010864:	08015654 	.word	0x08015654
 8010868:	08015650 	.word	0x08015650
 801086c:	08015904 	.word	0x08015904
 8010870:	2301      	movs	r3, #1
 8010872:	9a06      	ldr	r2, [sp, #24]
 8010874:	4631      	mov	r1, r6
 8010876:	4628      	mov	r0, r5
 8010878:	47b8      	blx	r7
 801087a:	3001      	adds	r0, #1
 801087c:	f43f aecd 	beq.w	801061a <_printf_float+0xba>
 8010880:	f10b 0b01 	add.w	fp, fp, #1
 8010884:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010888:	ebaa 0309 	sub.w	r3, sl, r9
 801088c:	455b      	cmp	r3, fp
 801088e:	dcef      	bgt.n	8010870 <_printf_float+0x310>
 8010890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010894:	429a      	cmp	r2, r3
 8010896:	44d0      	add	r8, sl
 8010898:	db15      	blt.n	80108c6 <_printf_float+0x366>
 801089a:	6823      	ldr	r3, [r4, #0]
 801089c:	07da      	lsls	r2, r3, #31
 801089e:	d412      	bmi.n	80108c6 <_printf_float+0x366>
 80108a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108a4:	eba3 020a 	sub.w	r2, r3, sl
 80108a8:	eba3 0a01 	sub.w	sl, r3, r1
 80108ac:	4592      	cmp	sl, r2
 80108ae:	bfa8      	it	ge
 80108b0:	4692      	movge	sl, r2
 80108b2:	f1ba 0f00 	cmp.w	sl, #0
 80108b6:	dc0e      	bgt.n	80108d6 <_printf_float+0x376>
 80108b8:	f04f 0800 	mov.w	r8, #0
 80108bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108c0:	f104 091a 	add.w	r9, r4, #26
 80108c4:	e019      	b.n	80108fa <_printf_float+0x39a>
 80108c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108ca:	4631      	mov	r1, r6
 80108cc:	4628      	mov	r0, r5
 80108ce:	47b8      	blx	r7
 80108d0:	3001      	adds	r0, #1
 80108d2:	d1e5      	bne.n	80108a0 <_printf_float+0x340>
 80108d4:	e6a1      	b.n	801061a <_printf_float+0xba>
 80108d6:	4653      	mov	r3, sl
 80108d8:	4642      	mov	r2, r8
 80108da:	4631      	mov	r1, r6
 80108dc:	4628      	mov	r0, r5
 80108de:	47b8      	blx	r7
 80108e0:	3001      	adds	r0, #1
 80108e2:	d1e9      	bne.n	80108b8 <_printf_float+0x358>
 80108e4:	e699      	b.n	801061a <_printf_float+0xba>
 80108e6:	2301      	movs	r3, #1
 80108e8:	464a      	mov	r2, r9
 80108ea:	4631      	mov	r1, r6
 80108ec:	4628      	mov	r0, r5
 80108ee:	47b8      	blx	r7
 80108f0:	3001      	adds	r0, #1
 80108f2:	f43f ae92 	beq.w	801061a <_printf_float+0xba>
 80108f6:	f108 0801 	add.w	r8, r8, #1
 80108fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108fe:	1a9b      	subs	r3, r3, r2
 8010900:	eba3 030a 	sub.w	r3, r3, sl
 8010904:	4543      	cmp	r3, r8
 8010906:	dcee      	bgt.n	80108e6 <_printf_float+0x386>
 8010908:	e74a      	b.n	80107a0 <_printf_float+0x240>
 801090a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801090c:	2a01      	cmp	r2, #1
 801090e:	dc01      	bgt.n	8010914 <_printf_float+0x3b4>
 8010910:	07db      	lsls	r3, r3, #31
 8010912:	d53a      	bpl.n	801098a <_printf_float+0x42a>
 8010914:	2301      	movs	r3, #1
 8010916:	4642      	mov	r2, r8
 8010918:	4631      	mov	r1, r6
 801091a:	4628      	mov	r0, r5
 801091c:	47b8      	blx	r7
 801091e:	3001      	adds	r0, #1
 8010920:	f43f ae7b 	beq.w	801061a <_printf_float+0xba>
 8010924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010928:	4631      	mov	r1, r6
 801092a:	4628      	mov	r0, r5
 801092c:	47b8      	blx	r7
 801092e:	3001      	adds	r0, #1
 8010930:	f108 0801 	add.w	r8, r8, #1
 8010934:	f43f ae71 	beq.w	801061a <_printf_float+0xba>
 8010938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801093a:	2200      	movs	r2, #0
 801093c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010944:	2300      	movs	r3, #0
 8010946:	f7f0 f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 801094a:	b9c8      	cbnz	r0, 8010980 <_printf_float+0x420>
 801094c:	4653      	mov	r3, sl
 801094e:	4642      	mov	r2, r8
 8010950:	4631      	mov	r1, r6
 8010952:	4628      	mov	r0, r5
 8010954:	47b8      	blx	r7
 8010956:	3001      	adds	r0, #1
 8010958:	d10e      	bne.n	8010978 <_printf_float+0x418>
 801095a:	e65e      	b.n	801061a <_printf_float+0xba>
 801095c:	2301      	movs	r3, #1
 801095e:	4652      	mov	r2, sl
 8010960:	4631      	mov	r1, r6
 8010962:	4628      	mov	r0, r5
 8010964:	47b8      	blx	r7
 8010966:	3001      	adds	r0, #1
 8010968:	f43f ae57 	beq.w	801061a <_printf_float+0xba>
 801096c:	f108 0801 	add.w	r8, r8, #1
 8010970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010972:	3b01      	subs	r3, #1
 8010974:	4543      	cmp	r3, r8
 8010976:	dcf1      	bgt.n	801095c <_printf_float+0x3fc>
 8010978:	464b      	mov	r3, r9
 801097a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801097e:	e6de      	b.n	801073e <_printf_float+0x1de>
 8010980:	f04f 0800 	mov.w	r8, #0
 8010984:	f104 0a1a 	add.w	sl, r4, #26
 8010988:	e7f2      	b.n	8010970 <_printf_float+0x410>
 801098a:	2301      	movs	r3, #1
 801098c:	e7df      	b.n	801094e <_printf_float+0x3ee>
 801098e:	2301      	movs	r3, #1
 8010990:	464a      	mov	r2, r9
 8010992:	4631      	mov	r1, r6
 8010994:	4628      	mov	r0, r5
 8010996:	47b8      	blx	r7
 8010998:	3001      	adds	r0, #1
 801099a:	f43f ae3e 	beq.w	801061a <_printf_float+0xba>
 801099e:	f108 0801 	add.w	r8, r8, #1
 80109a2:	68e3      	ldr	r3, [r4, #12]
 80109a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109a6:	1a9b      	subs	r3, r3, r2
 80109a8:	4543      	cmp	r3, r8
 80109aa:	dcf0      	bgt.n	801098e <_printf_float+0x42e>
 80109ac:	e6fc      	b.n	80107a8 <_printf_float+0x248>
 80109ae:	f04f 0800 	mov.w	r8, #0
 80109b2:	f104 0919 	add.w	r9, r4, #25
 80109b6:	e7f4      	b.n	80109a2 <_printf_float+0x442>
 80109b8:	2900      	cmp	r1, #0
 80109ba:	f43f ae8b 	beq.w	80106d4 <_printf_float+0x174>
 80109be:	2300      	movs	r3, #0
 80109c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80109c4:	ab09      	add	r3, sp, #36	; 0x24
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	ec49 8b10 	vmov	d0, r8, r9
 80109cc:	6022      	str	r2, [r4, #0]
 80109ce:	f8cd a004 	str.w	sl, [sp, #4]
 80109d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7ff fd2e 	bl	8010438 <__cvt>
 80109dc:	4680      	mov	r8, r0
 80109de:	e648      	b.n	8010672 <_printf_float+0x112>

080109e0 <_printf_common>:
 80109e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e4:	4691      	mov	r9, r2
 80109e6:	461f      	mov	r7, r3
 80109e8:	688a      	ldr	r2, [r1, #8]
 80109ea:	690b      	ldr	r3, [r1, #16]
 80109ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109f0:	4293      	cmp	r3, r2
 80109f2:	bfb8      	it	lt
 80109f4:	4613      	movlt	r3, r2
 80109f6:	f8c9 3000 	str.w	r3, [r9]
 80109fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109fe:	4606      	mov	r6, r0
 8010a00:	460c      	mov	r4, r1
 8010a02:	b112      	cbz	r2, 8010a0a <_printf_common+0x2a>
 8010a04:	3301      	adds	r3, #1
 8010a06:	f8c9 3000 	str.w	r3, [r9]
 8010a0a:	6823      	ldr	r3, [r4, #0]
 8010a0c:	0699      	lsls	r1, r3, #26
 8010a0e:	bf42      	ittt	mi
 8010a10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a14:	3302      	addmi	r3, #2
 8010a16:	f8c9 3000 	strmi.w	r3, [r9]
 8010a1a:	6825      	ldr	r5, [r4, #0]
 8010a1c:	f015 0506 	ands.w	r5, r5, #6
 8010a20:	d107      	bne.n	8010a32 <_printf_common+0x52>
 8010a22:	f104 0a19 	add.w	sl, r4, #25
 8010a26:	68e3      	ldr	r3, [r4, #12]
 8010a28:	f8d9 2000 	ldr.w	r2, [r9]
 8010a2c:	1a9b      	subs	r3, r3, r2
 8010a2e:	42ab      	cmp	r3, r5
 8010a30:	dc28      	bgt.n	8010a84 <_printf_common+0xa4>
 8010a32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a36:	6822      	ldr	r2, [r4, #0]
 8010a38:	3300      	adds	r3, #0
 8010a3a:	bf18      	it	ne
 8010a3c:	2301      	movne	r3, #1
 8010a3e:	0692      	lsls	r2, r2, #26
 8010a40:	d42d      	bmi.n	8010a9e <_printf_common+0xbe>
 8010a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a46:	4639      	mov	r1, r7
 8010a48:	4630      	mov	r0, r6
 8010a4a:	47c0      	blx	r8
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	d020      	beq.n	8010a92 <_printf_common+0xb2>
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	68e5      	ldr	r5, [r4, #12]
 8010a54:	f8d9 2000 	ldr.w	r2, [r9]
 8010a58:	f003 0306 	and.w	r3, r3, #6
 8010a5c:	2b04      	cmp	r3, #4
 8010a5e:	bf08      	it	eq
 8010a60:	1aad      	subeq	r5, r5, r2
 8010a62:	68a3      	ldr	r3, [r4, #8]
 8010a64:	6922      	ldr	r2, [r4, #16]
 8010a66:	bf0c      	ite	eq
 8010a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a6c:	2500      	movne	r5, #0
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	bfc4      	itt	gt
 8010a72:	1a9b      	subgt	r3, r3, r2
 8010a74:	18ed      	addgt	r5, r5, r3
 8010a76:	f04f 0900 	mov.w	r9, #0
 8010a7a:	341a      	adds	r4, #26
 8010a7c:	454d      	cmp	r5, r9
 8010a7e:	d11a      	bne.n	8010ab6 <_printf_common+0xd6>
 8010a80:	2000      	movs	r0, #0
 8010a82:	e008      	b.n	8010a96 <_printf_common+0xb6>
 8010a84:	2301      	movs	r3, #1
 8010a86:	4652      	mov	r2, sl
 8010a88:	4639      	mov	r1, r7
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	47c0      	blx	r8
 8010a8e:	3001      	adds	r0, #1
 8010a90:	d103      	bne.n	8010a9a <_printf_common+0xba>
 8010a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9a:	3501      	adds	r5, #1
 8010a9c:	e7c3      	b.n	8010a26 <_printf_common+0x46>
 8010a9e:	18e1      	adds	r1, r4, r3
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	2030      	movs	r0, #48	; 0x30
 8010aa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010aa8:	4422      	add	r2, r4
 8010aaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010aae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ab2:	3302      	adds	r3, #2
 8010ab4:	e7c5      	b.n	8010a42 <_printf_common+0x62>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	4622      	mov	r2, r4
 8010aba:	4639      	mov	r1, r7
 8010abc:	4630      	mov	r0, r6
 8010abe:	47c0      	blx	r8
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	d0e6      	beq.n	8010a92 <_printf_common+0xb2>
 8010ac4:	f109 0901 	add.w	r9, r9, #1
 8010ac8:	e7d8      	b.n	8010a7c <_printf_common+0x9c>
	...

08010acc <_printf_i>:
 8010acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ad0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010ad4:	460c      	mov	r4, r1
 8010ad6:	7e09      	ldrb	r1, [r1, #24]
 8010ad8:	b085      	sub	sp, #20
 8010ada:	296e      	cmp	r1, #110	; 0x6e
 8010adc:	4617      	mov	r7, r2
 8010ade:	4606      	mov	r6, r0
 8010ae0:	4698      	mov	r8, r3
 8010ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ae4:	f000 80b3 	beq.w	8010c4e <_printf_i+0x182>
 8010ae8:	d822      	bhi.n	8010b30 <_printf_i+0x64>
 8010aea:	2963      	cmp	r1, #99	; 0x63
 8010aec:	d036      	beq.n	8010b5c <_printf_i+0x90>
 8010aee:	d80a      	bhi.n	8010b06 <_printf_i+0x3a>
 8010af0:	2900      	cmp	r1, #0
 8010af2:	f000 80b9 	beq.w	8010c68 <_printf_i+0x19c>
 8010af6:	2958      	cmp	r1, #88	; 0x58
 8010af8:	f000 8083 	beq.w	8010c02 <_printf_i+0x136>
 8010afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b04:	e032      	b.n	8010b6c <_printf_i+0xa0>
 8010b06:	2964      	cmp	r1, #100	; 0x64
 8010b08:	d001      	beq.n	8010b0e <_printf_i+0x42>
 8010b0a:	2969      	cmp	r1, #105	; 0x69
 8010b0c:	d1f6      	bne.n	8010afc <_printf_i+0x30>
 8010b0e:	6820      	ldr	r0, [r4, #0]
 8010b10:	6813      	ldr	r3, [r2, #0]
 8010b12:	0605      	lsls	r5, r0, #24
 8010b14:	f103 0104 	add.w	r1, r3, #4
 8010b18:	d52a      	bpl.n	8010b70 <_printf_i+0xa4>
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6011      	str	r1, [r2, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	da03      	bge.n	8010b2a <_printf_i+0x5e>
 8010b22:	222d      	movs	r2, #45	; 0x2d
 8010b24:	425b      	negs	r3, r3
 8010b26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b2a:	486f      	ldr	r0, [pc, #444]	; (8010ce8 <_printf_i+0x21c>)
 8010b2c:	220a      	movs	r2, #10
 8010b2e:	e039      	b.n	8010ba4 <_printf_i+0xd8>
 8010b30:	2973      	cmp	r1, #115	; 0x73
 8010b32:	f000 809d 	beq.w	8010c70 <_printf_i+0x1a4>
 8010b36:	d808      	bhi.n	8010b4a <_printf_i+0x7e>
 8010b38:	296f      	cmp	r1, #111	; 0x6f
 8010b3a:	d020      	beq.n	8010b7e <_printf_i+0xb2>
 8010b3c:	2970      	cmp	r1, #112	; 0x70
 8010b3e:	d1dd      	bne.n	8010afc <_printf_i+0x30>
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	f043 0320 	orr.w	r3, r3, #32
 8010b46:	6023      	str	r3, [r4, #0]
 8010b48:	e003      	b.n	8010b52 <_printf_i+0x86>
 8010b4a:	2975      	cmp	r1, #117	; 0x75
 8010b4c:	d017      	beq.n	8010b7e <_printf_i+0xb2>
 8010b4e:	2978      	cmp	r1, #120	; 0x78
 8010b50:	d1d4      	bne.n	8010afc <_printf_i+0x30>
 8010b52:	2378      	movs	r3, #120	; 0x78
 8010b54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b58:	4864      	ldr	r0, [pc, #400]	; (8010cec <_printf_i+0x220>)
 8010b5a:	e055      	b.n	8010c08 <_printf_i+0x13c>
 8010b5c:	6813      	ldr	r3, [r2, #0]
 8010b5e:	1d19      	adds	r1, r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6011      	str	r1, [r2, #0]
 8010b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e08c      	b.n	8010c8a <_printf_i+0x1be>
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	6011      	str	r1, [r2, #0]
 8010b74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b78:	bf18      	it	ne
 8010b7a:	b21b      	sxthne	r3, r3
 8010b7c:	e7cf      	b.n	8010b1e <_printf_i+0x52>
 8010b7e:	6813      	ldr	r3, [r2, #0]
 8010b80:	6825      	ldr	r5, [r4, #0]
 8010b82:	1d18      	adds	r0, r3, #4
 8010b84:	6010      	str	r0, [r2, #0]
 8010b86:	0628      	lsls	r0, r5, #24
 8010b88:	d501      	bpl.n	8010b8e <_printf_i+0xc2>
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	e002      	b.n	8010b94 <_printf_i+0xc8>
 8010b8e:	0668      	lsls	r0, r5, #25
 8010b90:	d5fb      	bpl.n	8010b8a <_printf_i+0xbe>
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	4854      	ldr	r0, [pc, #336]	; (8010ce8 <_printf_i+0x21c>)
 8010b96:	296f      	cmp	r1, #111	; 0x6f
 8010b98:	bf14      	ite	ne
 8010b9a:	220a      	movne	r2, #10
 8010b9c:	2208      	moveq	r2, #8
 8010b9e:	2100      	movs	r1, #0
 8010ba0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ba4:	6865      	ldr	r5, [r4, #4]
 8010ba6:	60a5      	str	r5, [r4, #8]
 8010ba8:	2d00      	cmp	r5, #0
 8010baa:	f2c0 8095 	blt.w	8010cd8 <_printf_i+0x20c>
 8010bae:	6821      	ldr	r1, [r4, #0]
 8010bb0:	f021 0104 	bic.w	r1, r1, #4
 8010bb4:	6021      	str	r1, [r4, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d13d      	bne.n	8010c36 <_printf_i+0x16a>
 8010bba:	2d00      	cmp	r5, #0
 8010bbc:	f040 808e 	bne.w	8010cdc <_printf_i+0x210>
 8010bc0:	4665      	mov	r5, ip
 8010bc2:	2a08      	cmp	r2, #8
 8010bc4:	d10b      	bne.n	8010bde <_printf_i+0x112>
 8010bc6:	6823      	ldr	r3, [r4, #0]
 8010bc8:	07db      	lsls	r3, r3, #31
 8010bca:	d508      	bpl.n	8010bde <_printf_i+0x112>
 8010bcc:	6923      	ldr	r3, [r4, #16]
 8010bce:	6862      	ldr	r2, [r4, #4]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	bfde      	ittt	le
 8010bd4:	2330      	movle	r3, #48	; 0x30
 8010bd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010bda:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010bde:	ebac 0305 	sub.w	r3, ip, r5
 8010be2:	6123      	str	r3, [r4, #16]
 8010be4:	f8cd 8000 	str.w	r8, [sp]
 8010be8:	463b      	mov	r3, r7
 8010bea:	aa03      	add	r2, sp, #12
 8010bec:	4621      	mov	r1, r4
 8010bee:	4630      	mov	r0, r6
 8010bf0:	f7ff fef6 	bl	80109e0 <_printf_common>
 8010bf4:	3001      	adds	r0, #1
 8010bf6:	d14d      	bne.n	8010c94 <_printf_i+0x1c8>
 8010bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bfc:	b005      	add	sp, #20
 8010bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c02:	4839      	ldr	r0, [pc, #228]	; (8010ce8 <_printf_i+0x21c>)
 8010c04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c08:	6813      	ldr	r3, [r2, #0]
 8010c0a:	6821      	ldr	r1, [r4, #0]
 8010c0c:	1d1d      	adds	r5, r3, #4
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6015      	str	r5, [r2, #0]
 8010c12:	060a      	lsls	r2, r1, #24
 8010c14:	d50b      	bpl.n	8010c2e <_printf_i+0x162>
 8010c16:	07ca      	lsls	r2, r1, #31
 8010c18:	bf44      	itt	mi
 8010c1a:	f041 0120 	orrmi.w	r1, r1, #32
 8010c1e:	6021      	strmi	r1, [r4, #0]
 8010c20:	b91b      	cbnz	r3, 8010c2a <_printf_i+0x15e>
 8010c22:	6822      	ldr	r2, [r4, #0]
 8010c24:	f022 0220 	bic.w	r2, r2, #32
 8010c28:	6022      	str	r2, [r4, #0]
 8010c2a:	2210      	movs	r2, #16
 8010c2c:	e7b7      	b.n	8010b9e <_printf_i+0xd2>
 8010c2e:	064d      	lsls	r5, r1, #25
 8010c30:	bf48      	it	mi
 8010c32:	b29b      	uxthmi	r3, r3
 8010c34:	e7ef      	b.n	8010c16 <_printf_i+0x14a>
 8010c36:	4665      	mov	r5, ip
 8010c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c3c:	fb02 3311 	mls	r3, r2, r1, r3
 8010c40:	5cc3      	ldrb	r3, [r0, r3]
 8010c42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c46:	460b      	mov	r3, r1
 8010c48:	2900      	cmp	r1, #0
 8010c4a:	d1f5      	bne.n	8010c38 <_printf_i+0x16c>
 8010c4c:	e7b9      	b.n	8010bc2 <_printf_i+0xf6>
 8010c4e:	6813      	ldr	r3, [r2, #0]
 8010c50:	6825      	ldr	r5, [r4, #0]
 8010c52:	6961      	ldr	r1, [r4, #20]
 8010c54:	1d18      	adds	r0, r3, #4
 8010c56:	6010      	str	r0, [r2, #0]
 8010c58:	0628      	lsls	r0, r5, #24
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	d501      	bpl.n	8010c62 <_printf_i+0x196>
 8010c5e:	6019      	str	r1, [r3, #0]
 8010c60:	e002      	b.n	8010c68 <_printf_i+0x19c>
 8010c62:	066a      	lsls	r2, r5, #25
 8010c64:	d5fb      	bpl.n	8010c5e <_printf_i+0x192>
 8010c66:	8019      	strh	r1, [r3, #0]
 8010c68:	2300      	movs	r3, #0
 8010c6a:	6123      	str	r3, [r4, #16]
 8010c6c:	4665      	mov	r5, ip
 8010c6e:	e7b9      	b.n	8010be4 <_printf_i+0x118>
 8010c70:	6813      	ldr	r3, [r2, #0]
 8010c72:	1d19      	adds	r1, r3, #4
 8010c74:	6011      	str	r1, [r2, #0]
 8010c76:	681d      	ldr	r5, [r3, #0]
 8010c78:	6862      	ldr	r2, [r4, #4]
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f7ef fad7 	bl	8000230 <memchr>
 8010c82:	b108      	cbz	r0, 8010c88 <_printf_i+0x1bc>
 8010c84:	1b40      	subs	r0, r0, r5
 8010c86:	6060      	str	r0, [r4, #4]
 8010c88:	6863      	ldr	r3, [r4, #4]
 8010c8a:	6123      	str	r3, [r4, #16]
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c92:	e7a7      	b.n	8010be4 <_printf_i+0x118>
 8010c94:	6923      	ldr	r3, [r4, #16]
 8010c96:	462a      	mov	r2, r5
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	47c0      	blx	r8
 8010c9e:	3001      	adds	r0, #1
 8010ca0:	d0aa      	beq.n	8010bf8 <_printf_i+0x12c>
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	079b      	lsls	r3, r3, #30
 8010ca6:	d413      	bmi.n	8010cd0 <_printf_i+0x204>
 8010ca8:	68e0      	ldr	r0, [r4, #12]
 8010caa:	9b03      	ldr	r3, [sp, #12]
 8010cac:	4298      	cmp	r0, r3
 8010cae:	bfb8      	it	lt
 8010cb0:	4618      	movlt	r0, r3
 8010cb2:	e7a3      	b.n	8010bfc <_printf_i+0x130>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	464a      	mov	r2, r9
 8010cb8:	4639      	mov	r1, r7
 8010cba:	4630      	mov	r0, r6
 8010cbc:	47c0      	blx	r8
 8010cbe:	3001      	adds	r0, #1
 8010cc0:	d09a      	beq.n	8010bf8 <_printf_i+0x12c>
 8010cc2:	3501      	adds	r5, #1
 8010cc4:	68e3      	ldr	r3, [r4, #12]
 8010cc6:	9a03      	ldr	r2, [sp, #12]
 8010cc8:	1a9b      	subs	r3, r3, r2
 8010cca:	42ab      	cmp	r3, r5
 8010ccc:	dcf2      	bgt.n	8010cb4 <_printf_i+0x1e8>
 8010cce:	e7eb      	b.n	8010ca8 <_printf_i+0x1dc>
 8010cd0:	2500      	movs	r5, #0
 8010cd2:	f104 0919 	add.w	r9, r4, #25
 8010cd6:	e7f5      	b.n	8010cc4 <_printf_i+0x1f8>
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d1ac      	bne.n	8010c36 <_printf_i+0x16a>
 8010cdc:	7803      	ldrb	r3, [r0, #0]
 8010cde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ce2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ce6:	e76c      	b.n	8010bc2 <_printf_i+0xf6>
 8010ce8:	08015658 	.word	0x08015658
 8010cec:	08015669 	.word	0x08015669

08010cf0 <iprintf>:
 8010cf0:	b40f      	push	{r0, r1, r2, r3}
 8010cf2:	4b0a      	ldr	r3, [pc, #40]	; (8010d1c <iprintf+0x2c>)
 8010cf4:	b513      	push	{r0, r1, r4, lr}
 8010cf6:	681c      	ldr	r4, [r3, #0]
 8010cf8:	b124      	cbz	r4, 8010d04 <iprintf+0x14>
 8010cfa:	69a3      	ldr	r3, [r4, #24]
 8010cfc:	b913      	cbnz	r3, 8010d04 <iprintf+0x14>
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f001 f8aa 	bl	8011e58 <__sinit>
 8010d04:	ab05      	add	r3, sp, #20
 8010d06:	9a04      	ldr	r2, [sp, #16]
 8010d08:	68a1      	ldr	r1, [r4, #8]
 8010d0a:	9301      	str	r3, [sp, #4]
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f001 febf 	bl	8012a90 <_vfiprintf_r>
 8010d12:	b002      	add	sp, #8
 8010d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d18:	b004      	add	sp, #16
 8010d1a:	4770      	bx	lr
 8010d1c:	20001c38 	.word	0x20001c38

08010d20 <_puts_r>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	460e      	mov	r6, r1
 8010d24:	4605      	mov	r5, r0
 8010d26:	b118      	cbz	r0, 8010d30 <_puts_r+0x10>
 8010d28:	6983      	ldr	r3, [r0, #24]
 8010d2a:	b90b      	cbnz	r3, 8010d30 <_puts_r+0x10>
 8010d2c:	f001 f894 	bl	8011e58 <__sinit>
 8010d30:	69ab      	ldr	r3, [r5, #24]
 8010d32:	68ac      	ldr	r4, [r5, #8]
 8010d34:	b913      	cbnz	r3, 8010d3c <_puts_r+0x1c>
 8010d36:	4628      	mov	r0, r5
 8010d38:	f001 f88e 	bl	8011e58 <__sinit>
 8010d3c:	4b23      	ldr	r3, [pc, #140]	; (8010dcc <_puts_r+0xac>)
 8010d3e:	429c      	cmp	r4, r3
 8010d40:	d117      	bne.n	8010d72 <_puts_r+0x52>
 8010d42:	686c      	ldr	r4, [r5, #4]
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	071b      	lsls	r3, r3, #28
 8010d48:	d51d      	bpl.n	8010d86 <_puts_r+0x66>
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	b1db      	cbz	r3, 8010d86 <_puts_r+0x66>
 8010d4e:	3e01      	subs	r6, #1
 8010d50:	68a3      	ldr	r3, [r4, #8]
 8010d52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d56:	3b01      	subs	r3, #1
 8010d58:	60a3      	str	r3, [r4, #8]
 8010d5a:	b9e9      	cbnz	r1, 8010d98 <_puts_r+0x78>
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	da2e      	bge.n	8010dbe <_puts_r+0x9e>
 8010d60:	4622      	mov	r2, r4
 8010d62:	210a      	movs	r1, #10
 8010d64:	4628      	mov	r0, r5
 8010d66:	f000 f883 	bl	8010e70 <__swbuf_r>
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	d011      	beq.n	8010d92 <_puts_r+0x72>
 8010d6e:	200a      	movs	r0, #10
 8010d70:	e011      	b.n	8010d96 <_puts_r+0x76>
 8010d72:	4b17      	ldr	r3, [pc, #92]	; (8010dd0 <_puts_r+0xb0>)
 8010d74:	429c      	cmp	r4, r3
 8010d76:	d101      	bne.n	8010d7c <_puts_r+0x5c>
 8010d78:	68ac      	ldr	r4, [r5, #8]
 8010d7a:	e7e3      	b.n	8010d44 <_puts_r+0x24>
 8010d7c:	4b15      	ldr	r3, [pc, #84]	; (8010dd4 <_puts_r+0xb4>)
 8010d7e:	429c      	cmp	r4, r3
 8010d80:	bf08      	it	eq
 8010d82:	68ec      	ldreq	r4, [r5, #12]
 8010d84:	e7de      	b.n	8010d44 <_puts_r+0x24>
 8010d86:	4621      	mov	r1, r4
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f000 f8c3 	bl	8010f14 <__swsetup_r>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d0dd      	beq.n	8010d4e <_puts_r+0x2e>
 8010d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d96:	bd70      	pop	{r4, r5, r6, pc}
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	da04      	bge.n	8010da6 <_puts_r+0x86>
 8010d9c:	69a2      	ldr	r2, [r4, #24]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	dc06      	bgt.n	8010db0 <_puts_r+0x90>
 8010da2:	290a      	cmp	r1, #10
 8010da4:	d004      	beq.n	8010db0 <_puts_r+0x90>
 8010da6:	6823      	ldr	r3, [r4, #0]
 8010da8:	1c5a      	adds	r2, r3, #1
 8010daa:	6022      	str	r2, [r4, #0]
 8010dac:	7019      	strb	r1, [r3, #0]
 8010dae:	e7cf      	b.n	8010d50 <_puts_r+0x30>
 8010db0:	4622      	mov	r2, r4
 8010db2:	4628      	mov	r0, r5
 8010db4:	f000 f85c 	bl	8010e70 <__swbuf_r>
 8010db8:	3001      	adds	r0, #1
 8010dba:	d1c9      	bne.n	8010d50 <_puts_r+0x30>
 8010dbc:	e7e9      	b.n	8010d92 <_puts_r+0x72>
 8010dbe:	6823      	ldr	r3, [r4, #0]
 8010dc0:	200a      	movs	r0, #10
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	6022      	str	r2, [r4, #0]
 8010dc6:	7018      	strb	r0, [r3, #0]
 8010dc8:	e7e5      	b.n	8010d96 <_puts_r+0x76>
 8010dca:	bf00      	nop
 8010dcc:	080156a8 	.word	0x080156a8
 8010dd0:	080156c8 	.word	0x080156c8
 8010dd4:	08015688 	.word	0x08015688

08010dd8 <puts>:
 8010dd8:	4b02      	ldr	r3, [pc, #8]	; (8010de4 <puts+0xc>)
 8010dda:	4601      	mov	r1, r0
 8010ddc:	6818      	ldr	r0, [r3, #0]
 8010dde:	f7ff bf9f 	b.w	8010d20 <_puts_r>
 8010de2:	bf00      	nop
 8010de4:	20001c38 	.word	0x20001c38

08010de8 <sniprintf>:
 8010de8:	b40c      	push	{r2, r3}
 8010dea:	b530      	push	{r4, r5, lr}
 8010dec:	4b17      	ldr	r3, [pc, #92]	; (8010e4c <sniprintf+0x64>)
 8010dee:	1e0c      	subs	r4, r1, #0
 8010df0:	b09d      	sub	sp, #116	; 0x74
 8010df2:	681d      	ldr	r5, [r3, #0]
 8010df4:	da08      	bge.n	8010e08 <sniprintf+0x20>
 8010df6:	238b      	movs	r3, #139	; 0x8b
 8010df8:	602b      	str	r3, [r5, #0]
 8010dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dfe:	b01d      	add	sp, #116	; 0x74
 8010e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e04:	b002      	add	sp, #8
 8010e06:	4770      	bx	lr
 8010e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010e10:	bf14      	ite	ne
 8010e12:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010e16:	4623      	moveq	r3, r4
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	9307      	str	r3, [sp, #28]
 8010e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e20:	9002      	str	r0, [sp, #8]
 8010e22:	9006      	str	r0, [sp, #24]
 8010e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010e2a:	ab21      	add	r3, sp, #132	; 0x84
 8010e2c:	a902      	add	r1, sp, #8
 8010e2e:	4628      	mov	r0, r5
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	f001 fd0b 	bl	801284c <_svfiprintf_r>
 8010e36:	1c43      	adds	r3, r0, #1
 8010e38:	bfbc      	itt	lt
 8010e3a:	238b      	movlt	r3, #139	; 0x8b
 8010e3c:	602b      	strlt	r3, [r5, #0]
 8010e3e:	2c00      	cmp	r4, #0
 8010e40:	d0dd      	beq.n	8010dfe <sniprintf+0x16>
 8010e42:	9b02      	ldr	r3, [sp, #8]
 8010e44:	2200      	movs	r2, #0
 8010e46:	701a      	strb	r2, [r3, #0]
 8010e48:	e7d9      	b.n	8010dfe <sniprintf+0x16>
 8010e4a:	bf00      	nop
 8010e4c:	20001c38 	.word	0x20001c38

08010e50 <strcat>:
 8010e50:	b510      	push	{r4, lr}
 8010e52:	4603      	mov	r3, r0
 8010e54:	781a      	ldrb	r2, [r3, #0]
 8010e56:	1c5c      	adds	r4, r3, #1
 8010e58:	b93a      	cbnz	r2, 8010e6a <strcat+0x1a>
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	d1f9      	bne.n	8010e5c <strcat+0xc>
 8010e68:	bd10      	pop	{r4, pc}
 8010e6a:	4623      	mov	r3, r4
 8010e6c:	e7f2      	b.n	8010e54 <strcat+0x4>
	...

08010e70 <__swbuf_r>:
 8010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e72:	460e      	mov	r6, r1
 8010e74:	4614      	mov	r4, r2
 8010e76:	4605      	mov	r5, r0
 8010e78:	b118      	cbz	r0, 8010e82 <__swbuf_r+0x12>
 8010e7a:	6983      	ldr	r3, [r0, #24]
 8010e7c:	b90b      	cbnz	r3, 8010e82 <__swbuf_r+0x12>
 8010e7e:	f000 ffeb 	bl	8011e58 <__sinit>
 8010e82:	4b21      	ldr	r3, [pc, #132]	; (8010f08 <__swbuf_r+0x98>)
 8010e84:	429c      	cmp	r4, r3
 8010e86:	d12a      	bne.n	8010ede <__swbuf_r+0x6e>
 8010e88:	686c      	ldr	r4, [r5, #4]
 8010e8a:	69a3      	ldr	r3, [r4, #24]
 8010e8c:	60a3      	str	r3, [r4, #8]
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	071a      	lsls	r2, r3, #28
 8010e92:	d52e      	bpl.n	8010ef2 <__swbuf_r+0x82>
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	b363      	cbz	r3, 8010ef2 <__swbuf_r+0x82>
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	6820      	ldr	r0, [r4, #0]
 8010e9c:	1ac0      	subs	r0, r0, r3
 8010e9e:	6963      	ldr	r3, [r4, #20]
 8010ea0:	b2f6      	uxtb	r6, r6
 8010ea2:	4283      	cmp	r3, r0
 8010ea4:	4637      	mov	r7, r6
 8010ea6:	dc04      	bgt.n	8010eb2 <__swbuf_r+0x42>
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 ff6a 	bl	8011d84 <_fflush_r>
 8010eb0:	bb28      	cbnz	r0, 8010efe <__swbuf_r+0x8e>
 8010eb2:	68a3      	ldr	r3, [r4, #8]
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	60a3      	str	r3, [r4, #8]
 8010eb8:	6823      	ldr	r3, [r4, #0]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	6022      	str	r2, [r4, #0]
 8010ebe:	701e      	strb	r6, [r3, #0]
 8010ec0:	6963      	ldr	r3, [r4, #20]
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	4283      	cmp	r3, r0
 8010ec6:	d004      	beq.n	8010ed2 <__swbuf_r+0x62>
 8010ec8:	89a3      	ldrh	r3, [r4, #12]
 8010eca:	07db      	lsls	r3, r3, #31
 8010ecc:	d519      	bpl.n	8010f02 <__swbuf_r+0x92>
 8010ece:	2e0a      	cmp	r6, #10
 8010ed0:	d117      	bne.n	8010f02 <__swbuf_r+0x92>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f000 ff55 	bl	8011d84 <_fflush_r>
 8010eda:	b190      	cbz	r0, 8010f02 <__swbuf_r+0x92>
 8010edc:	e00f      	b.n	8010efe <__swbuf_r+0x8e>
 8010ede:	4b0b      	ldr	r3, [pc, #44]	; (8010f0c <__swbuf_r+0x9c>)
 8010ee0:	429c      	cmp	r4, r3
 8010ee2:	d101      	bne.n	8010ee8 <__swbuf_r+0x78>
 8010ee4:	68ac      	ldr	r4, [r5, #8]
 8010ee6:	e7d0      	b.n	8010e8a <__swbuf_r+0x1a>
 8010ee8:	4b09      	ldr	r3, [pc, #36]	; (8010f10 <__swbuf_r+0xa0>)
 8010eea:	429c      	cmp	r4, r3
 8010eec:	bf08      	it	eq
 8010eee:	68ec      	ldreq	r4, [r5, #12]
 8010ef0:	e7cb      	b.n	8010e8a <__swbuf_r+0x1a>
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f000 f80d 	bl	8010f14 <__swsetup_r>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d0cc      	beq.n	8010e98 <__swbuf_r+0x28>
 8010efe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f02:	4638      	mov	r0, r7
 8010f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f06:	bf00      	nop
 8010f08:	080156a8 	.word	0x080156a8
 8010f0c:	080156c8 	.word	0x080156c8
 8010f10:	08015688 	.word	0x08015688

08010f14 <__swsetup_r>:
 8010f14:	4b32      	ldr	r3, [pc, #200]	; (8010fe0 <__swsetup_r+0xcc>)
 8010f16:	b570      	push	{r4, r5, r6, lr}
 8010f18:	681d      	ldr	r5, [r3, #0]
 8010f1a:	4606      	mov	r6, r0
 8010f1c:	460c      	mov	r4, r1
 8010f1e:	b125      	cbz	r5, 8010f2a <__swsetup_r+0x16>
 8010f20:	69ab      	ldr	r3, [r5, #24]
 8010f22:	b913      	cbnz	r3, 8010f2a <__swsetup_r+0x16>
 8010f24:	4628      	mov	r0, r5
 8010f26:	f000 ff97 	bl	8011e58 <__sinit>
 8010f2a:	4b2e      	ldr	r3, [pc, #184]	; (8010fe4 <__swsetup_r+0xd0>)
 8010f2c:	429c      	cmp	r4, r3
 8010f2e:	d10f      	bne.n	8010f50 <__swsetup_r+0x3c>
 8010f30:	686c      	ldr	r4, [r5, #4]
 8010f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	0715      	lsls	r5, r2, #28
 8010f3a:	d42c      	bmi.n	8010f96 <__swsetup_r+0x82>
 8010f3c:	06d0      	lsls	r0, r2, #27
 8010f3e:	d411      	bmi.n	8010f64 <__swsetup_r+0x50>
 8010f40:	2209      	movs	r2, #9
 8010f42:	6032      	str	r2, [r6, #0]
 8010f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f48:	81a3      	strh	r3, [r4, #12]
 8010f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f4e:	e03e      	b.n	8010fce <__swsetup_r+0xba>
 8010f50:	4b25      	ldr	r3, [pc, #148]	; (8010fe8 <__swsetup_r+0xd4>)
 8010f52:	429c      	cmp	r4, r3
 8010f54:	d101      	bne.n	8010f5a <__swsetup_r+0x46>
 8010f56:	68ac      	ldr	r4, [r5, #8]
 8010f58:	e7eb      	b.n	8010f32 <__swsetup_r+0x1e>
 8010f5a:	4b24      	ldr	r3, [pc, #144]	; (8010fec <__swsetup_r+0xd8>)
 8010f5c:	429c      	cmp	r4, r3
 8010f5e:	bf08      	it	eq
 8010f60:	68ec      	ldreq	r4, [r5, #12]
 8010f62:	e7e6      	b.n	8010f32 <__swsetup_r+0x1e>
 8010f64:	0751      	lsls	r1, r2, #29
 8010f66:	d512      	bpl.n	8010f8e <__swsetup_r+0x7a>
 8010f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f6a:	b141      	cbz	r1, 8010f7e <__swsetup_r+0x6a>
 8010f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f70:	4299      	cmp	r1, r3
 8010f72:	d002      	beq.n	8010f7a <__swsetup_r+0x66>
 8010f74:	4630      	mov	r0, r6
 8010f76:	f001 fb67 	bl	8012648 <_free_r>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f84:	81a3      	strh	r3, [r4, #12]
 8010f86:	2300      	movs	r3, #0
 8010f88:	6063      	str	r3, [r4, #4]
 8010f8a:	6923      	ldr	r3, [r4, #16]
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	89a3      	ldrh	r3, [r4, #12]
 8010f90:	f043 0308 	orr.w	r3, r3, #8
 8010f94:	81a3      	strh	r3, [r4, #12]
 8010f96:	6923      	ldr	r3, [r4, #16]
 8010f98:	b94b      	cbnz	r3, 8010fae <__swsetup_r+0x9a>
 8010f9a:	89a3      	ldrh	r3, [r4, #12]
 8010f9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fa4:	d003      	beq.n	8010fae <__swsetup_r+0x9a>
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f001 f811 	bl	8011fd0 <__smakebuf_r>
 8010fae:	89a2      	ldrh	r2, [r4, #12]
 8010fb0:	f012 0301 	ands.w	r3, r2, #1
 8010fb4:	d00c      	beq.n	8010fd0 <__swsetup_r+0xbc>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60a3      	str	r3, [r4, #8]
 8010fba:	6963      	ldr	r3, [r4, #20]
 8010fbc:	425b      	negs	r3, r3
 8010fbe:	61a3      	str	r3, [r4, #24]
 8010fc0:	6923      	ldr	r3, [r4, #16]
 8010fc2:	b953      	cbnz	r3, 8010fda <__swsetup_r+0xc6>
 8010fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010fcc:	d1ba      	bne.n	8010f44 <__swsetup_r+0x30>
 8010fce:	bd70      	pop	{r4, r5, r6, pc}
 8010fd0:	0792      	lsls	r2, r2, #30
 8010fd2:	bf58      	it	pl
 8010fd4:	6963      	ldrpl	r3, [r4, #20]
 8010fd6:	60a3      	str	r3, [r4, #8]
 8010fd8:	e7f2      	b.n	8010fc0 <__swsetup_r+0xac>
 8010fda:	2000      	movs	r0, #0
 8010fdc:	e7f7      	b.n	8010fce <__swsetup_r+0xba>
 8010fde:	bf00      	nop
 8010fe0:	20001c38 	.word	0x20001c38
 8010fe4:	080156a8 	.word	0x080156a8
 8010fe8:	080156c8 	.word	0x080156c8
 8010fec:	08015688 	.word	0x08015688

08010ff0 <quorem>:
 8010ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	6903      	ldr	r3, [r0, #16]
 8010ff6:	690c      	ldr	r4, [r1, #16]
 8010ff8:	42a3      	cmp	r3, r4
 8010ffa:	4680      	mov	r8, r0
 8010ffc:	f2c0 8082 	blt.w	8011104 <quorem+0x114>
 8011000:	3c01      	subs	r4, #1
 8011002:	f101 0714 	add.w	r7, r1, #20
 8011006:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801100a:	f100 0614 	add.w	r6, r0, #20
 801100e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011012:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011016:	eb06 030c 	add.w	r3, r6, ip
 801101a:	3501      	adds	r5, #1
 801101c:	eb07 090c 	add.w	r9, r7, ip
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	fbb0 f5f5 	udiv	r5, r0, r5
 8011026:	b395      	cbz	r5, 801108e <quorem+0x9e>
 8011028:	f04f 0a00 	mov.w	sl, #0
 801102c:	4638      	mov	r0, r7
 801102e:	46b6      	mov	lr, r6
 8011030:	46d3      	mov	fp, sl
 8011032:	f850 2b04 	ldr.w	r2, [r0], #4
 8011036:	b293      	uxth	r3, r2
 8011038:	fb05 a303 	mla	r3, r5, r3, sl
 801103c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011040:	b29b      	uxth	r3, r3
 8011042:	ebab 0303 	sub.w	r3, fp, r3
 8011046:	0c12      	lsrs	r2, r2, #16
 8011048:	f8de b000 	ldr.w	fp, [lr]
 801104c:	fb05 a202 	mla	r2, r5, r2, sl
 8011050:	fa13 f38b 	uxtah	r3, r3, fp
 8011054:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011058:	fa1f fb82 	uxth.w	fp, r2
 801105c:	f8de 2000 	ldr.w	r2, [lr]
 8011060:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011068:	b29b      	uxth	r3, r3
 801106a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801106e:	4581      	cmp	r9, r0
 8011070:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011074:	f84e 3b04 	str.w	r3, [lr], #4
 8011078:	d2db      	bcs.n	8011032 <quorem+0x42>
 801107a:	f856 300c 	ldr.w	r3, [r6, ip]
 801107e:	b933      	cbnz	r3, 801108e <quorem+0x9e>
 8011080:	9b01      	ldr	r3, [sp, #4]
 8011082:	3b04      	subs	r3, #4
 8011084:	429e      	cmp	r6, r3
 8011086:	461a      	mov	r2, r3
 8011088:	d330      	bcc.n	80110ec <quorem+0xfc>
 801108a:	f8c8 4010 	str.w	r4, [r8, #16]
 801108e:	4640      	mov	r0, r8
 8011090:	f001 fa06 	bl	80124a0 <__mcmp>
 8011094:	2800      	cmp	r0, #0
 8011096:	db25      	blt.n	80110e4 <quorem+0xf4>
 8011098:	3501      	adds	r5, #1
 801109a:	4630      	mov	r0, r6
 801109c:	f04f 0c00 	mov.w	ip, #0
 80110a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80110a4:	f8d0 e000 	ldr.w	lr, [r0]
 80110a8:	b293      	uxth	r3, r2
 80110aa:	ebac 0303 	sub.w	r3, ip, r3
 80110ae:	0c12      	lsrs	r2, r2, #16
 80110b0:	fa13 f38e 	uxtah	r3, r3, lr
 80110b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80110b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110bc:	b29b      	uxth	r3, r3
 80110be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110c2:	45b9      	cmp	r9, r7
 80110c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80110c8:	f840 3b04 	str.w	r3, [r0], #4
 80110cc:	d2e8      	bcs.n	80110a0 <quorem+0xb0>
 80110ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80110d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80110d6:	b92a      	cbnz	r2, 80110e4 <quorem+0xf4>
 80110d8:	3b04      	subs	r3, #4
 80110da:	429e      	cmp	r6, r3
 80110dc:	461a      	mov	r2, r3
 80110de:	d30b      	bcc.n	80110f8 <quorem+0x108>
 80110e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80110e4:	4628      	mov	r0, r5
 80110e6:	b003      	add	sp, #12
 80110e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ec:	6812      	ldr	r2, [r2, #0]
 80110ee:	3b04      	subs	r3, #4
 80110f0:	2a00      	cmp	r2, #0
 80110f2:	d1ca      	bne.n	801108a <quorem+0x9a>
 80110f4:	3c01      	subs	r4, #1
 80110f6:	e7c5      	b.n	8011084 <quorem+0x94>
 80110f8:	6812      	ldr	r2, [r2, #0]
 80110fa:	3b04      	subs	r3, #4
 80110fc:	2a00      	cmp	r2, #0
 80110fe:	d1ef      	bne.n	80110e0 <quorem+0xf0>
 8011100:	3c01      	subs	r4, #1
 8011102:	e7ea      	b.n	80110da <quorem+0xea>
 8011104:	2000      	movs	r0, #0
 8011106:	e7ee      	b.n	80110e6 <quorem+0xf6>

08011108 <_dtoa_r>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	ec57 6b10 	vmov	r6, r7, d0
 8011110:	b097      	sub	sp, #92	; 0x5c
 8011112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011114:	9106      	str	r1, [sp, #24]
 8011116:	4604      	mov	r4, r0
 8011118:	920b      	str	r2, [sp, #44]	; 0x2c
 801111a:	9312      	str	r3, [sp, #72]	; 0x48
 801111c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011120:	e9cd 6700 	strd	r6, r7, [sp]
 8011124:	b93d      	cbnz	r5, 8011136 <_dtoa_r+0x2e>
 8011126:	2010      	movs	r0, #16
 8011128:	f000 ff92 	bl	8012050 <malloc>
 801112c:	6260      	str	r0, [r4, #36]	; 0x24
 801112e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011132:	6005      	str	r5, [r0, #0]
 8011134:	60c5      	str	r5, [r0, #12]
 8011136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011138:	6819      	ldr	r1, [r3, #0]
 801113a:	b151      	cbz	r1, 8011152 <_dtoa_r+0x4a>
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	604a      	str	r2, [r1, #4]
 8011140:	2301      	movs	r3, #1
 8011142:	4093      	lsls	r3, r2
 8011144:	608b      	str	r3, [r1, #8]
 8011146:	4620      	mov	r0, r4
 8011148:	f000 ffc9 	bl	80120de <_Bfree>
 801114c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801114e:	2200      	movs	r2, #0
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	1e3b      	subs	r3, r7, #0
 8011154:	bfbb      	ittet	lt
 8011156:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801115a:	9301      	strlt	r3, [sp, #4]
 801115c:	2300      	movge	r3, #0
 801115e:	2201      	movlt	r2, #1
 8011160:	bfac      	ite	ge
 8011162:	f8c8 3000 	strge.w	r3, [r8]
 8011166:	f8c8 2000 	strlt.w	r2, [r8]
 801116a:	4baf      	ldr	r3, [pc, #700]	; (8011428 <_dtoa_r+0x320>)
 801116c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011170:	ea33 0308 	bics.w	r3, r3, r8
 8011174:	d114      	bne.n	80111a0 <_dtoa_r+0x98>
 8011176:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011178:	f242 730f 	movw	r3, #9999	; 0x270f
 801117c:	6013      	str	r3, [r2, #0]
 801117e:	9b00      	ldr	r3, [sp, #0]
 8011180:	b923      	cbnz	r3, 801118c <_dtoa_r+0x84>
 8011182:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011186:	2800      	cmp	r0, #0
 8011188:	f000 8542 	beq.w	8011c10 <_dtoa_r+0xb08>
 801118c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801118e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801143c <_dtoa_r+0x334>
 8011192:	2b00      	cmp	r3, #0
 8011194:	f000 8544 	beq.w	8011c20 <_dtoa_r+0xb18>
 8011198:	f10b 0303 	add.w	r3, fp, #3
 801119c:	f000 bd3e 	b.w	8011c1c <_dtoa_r+0xb14>
 80111a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80111a4:	2200      	movs	r2, #0
 80111a6:	2300      	movs	r3, #0
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef fcb4 	bl	8000b18 <__aeabi_dcmpeq>
 80111b0:	4681      	mov	r9, r0
 80111b2:	b168      	cbz	r0, 80111d0 <_dtoa_r+0xc8>
 80111b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111b6:	2301      	movs	r3, #1
 80111b8:	6013      	str	r3, [r2, #0]
 80111ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f000 8524 	beq.w	8011c0a <_dtoa_r+0xb02>
 80111c2:	4b9a      	ldr	r3, [pc, #616]	; (801142c <_dtoa_r+0x324>)
 80111c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111c6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	f000 bd28 	b.w	8011c20 <_dtoa_r+0xb18>
 80111d0:	aa14      	add	r2, sp, #80	; 0x50
 80111d2:	a915      	add	r1, sp, #84	; 0x54
 80111d4:	ec47 6b10 	vmov	d0, r6, r7
 80111d8:	4620      	mov	r0, r4
 80111da:	f001 f9d8 	bl	801258e <__d2b>
 80111de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80111e2:	9004      	str	r0, [sp, #16]
 80111e4:	2d00      	cmp	r5, #0
 80111e6:	d07c      	beq.n	80112e2 <_dtoa_r+0x1da>
 80111e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80111ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80111f0:	46b2      	mov	sl, r6
 80111f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80111f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80111fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80111fe:	2200      	movs	r2, #0
 8011200:	4b8b      	ldr	r3, [pc, #556]	; (8011430 <_dtoa_r+0x328>)
 8011202:	4650      	mov	r0, sl
 8011204:	4659      	mov	r1, fp
 8011206:	f7ef f867 	bl	80002d8 <__aeabi_dsub>
 801120a:	a381      	add	r3, pc, #516	; (adr r3, 8011410 <_dtoa_r+0x308>)
 801120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011210:	f7ef fa1a 	bl	8000648 <__aeabi_dmul>
 8011214:	a380      	add	r3, pc, #512	; (adr r3, 8011418 <_dtoa_r+0x310>)
 8011216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121a:	f7ef f85f 	bl	80002dc <__adddf3>
 801121e:	4606      	mov	r6, r0
 8011220:	4628      	mov	r0, r5
 8011222:	460f      	mov	r7, r1
 8011224:	f7ef f9a6 	bl	8000574 <__aeabi_i2d>
 8011228:	a37d      	add	r3, pc, #500	; (adr r3, 8011420 <_dtoa_r+0x318>)
 801122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122e:	f7ef fa0b 	bl	8000648 <__aeabi_dmul>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	4630      	mov	r0, r6
 8011238:	4639      	mov	r1, r7
 801123a:	f7ef f84f 	bl	80002dc <__adddf3>
 801123e:	4606      	mov	r6, r0
 8011240:	460f      	mov	r7, r1
 8011242:	f7ef fcb1 	bl	8000ba8 <__aeabi_d2iz>
 8011246:	2200      	movs	r2, #0
 8011248:	4682      	mov	sl, r0
 801124a:	2300      	movs	r3, #0
 801124c:	4630      	mov	r0, r6
 801124e:	4639      	mov	r1, r7
 8011250:	f7ef fc6c 	bl	8000b2c <__aeabi_dcmplt>
 8011254:	b148      	cbz	r0, 801126a <_dtoa_r+0x162>
 8011256:	4650      	mov	r0, sl
 8011258:	f7ef f98c 	bl	8000574 <__aeabi_i2d>
 801125c:	4632      	mov	r2, r6
 801125e:	463b      	mov	r3, r7
 8011260:	f7ef fc5a 	bl	8000b18 <__aeabi_dcmpeq>
 8011264:	b908      	cbnz	r0, 801126a <_dtoa_r+0x162>
 8011266:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801126a:	f1ba 0f16 	cmp.w	sl, #22
 801126e:	d859      	bhi.n	8011324 <_dtoa_r+0x21c>
 8011270:	4970      	ldr	r1, [pc, #448]	; (8011434 <_dtoa_r+0x32c>)
 8011272:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011276:	e9dd 2300 	ldrd	r2, r3, [sp]
 801127a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801127e:	f7ef fc73 	bl	8000b68 <__aeabi_dcmpgt>
 8011282:	2800      	cmp	r0, #0
 8011284:	d050      	beq.n	8011328 <_dtoa_r+0x220>
 8011286:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801128a:	2300      	movs	r3, #0
 801128c:	930f      	str	r3, [sp, #60]	; 0x3c
 801128e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011290:	1b5d      	subs	r5, r3, r5
 8011292:	f1b5 0801 	subs.w	r8, r5, #1
 8011296:	bf49      	itett	mi
 8011298:	f1c5 0301 	rsbmi	r3, r5, #1
 801129c:	2300      	movpl	r3, #0
 801129e:	9305      	strmi	r3, [sp, #20]
 80112a0:	f04f 0800 	movmi.w	r8, #0
 80112a4:	bf58      	it	pl
 80112a6:	9305      	strpl	r3, [sp, #20]
 80112a8:	f1ba 0f00 	cmp.w	sl, #0
 80112ac:	db3e      	blt.n	801132c <_dtoa_r+0x224>
 80112ae:	2300      	movs	r3, #0
 80112b0:	44d0      	add	r8, sl
 80112b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80112b6:	9307      	str	r3, [sp, #28]
 80112b8:	9b06      	ldr	r3, [sp, #24]
 80112ba:	2b09      	cmp	r3, #9
 80112bc:	f200 8090 	bhi.w	80113e0 <_dtoa_r+0x2d8>
 80112c0:	2b05      	cmp	r3, #5
 80112c2:	bfc4      	itt	gt
 80112c4:	3b04      	subgt	r3, #4
 80112c6:	9306      	strgt	r3, [sp, #24]
 80112c8:	9b06      	ldr	r3, [sp, #24]
 80112ca:	f1a3 0302 	sub.w	r3, r3, #2
 80112ce:	bfcc      	ite	gt
 80112d0:	2500      	movgt	r5, #0
 80112d2:	2501      	movle	r5, #1
 80112d4:	2b03      	cmp	r3, #3
 80112d6:	f200 808f 	bhi.w	80113f8 <_dtoa_r+0x2f0>
 80112da:	e8df f003 	tbb	[pc, r3]
 80112de:	7f7d      	.short	0x7f7d
 80112e0:	7131      	.short	0x7131
 80112e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80112e6:	441d      	add	r5, r3
 80112e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80112ec:	2820      	cmp	r0, #32
 80112ee:	dd13      	ble.n	8011318 <_dtoa_r+0x210>
 80112f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80112f4:	9b00      	ldr	r3, [sp, #0]
 80112f6:	fa08 f800 	lsl.w	r8, r8, r0
 80112fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80112fe:	fa23 f000 	lsr.w	r0, r3, r0
 8011302:	ea48 0000 	orr.w	r0, r8, r0
 8011306:	f7ef f925 	bl	8000554 <__aeabi_ui2d>
 801130a:	2301      	movs	r3, #1
 801130c:	4682      	mov	sl, r0
 801130e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011312:	3d01      	subs	r5, #1
 8011314:	9313      	str	r3, [sp, #76]	; 0x4c
 8011316:	e772      	b.n	80111fe <_dtoa_r+0xf6>
 8011318:	9b00      	ldr	r3, [sp, #0]
 801131a:	f1c0 0020 	rsb	r0, r0, #32
 801131e:	fa03 f000 	lsl.w	r0, r3, r0
 8011322:	e7f0      	b.n	8011306 <_dtoa_r+0x1fe>
 8011324:	2301      	movs	r3, #1
 8011326:	e7b1      	b.n	801128c <_dtoa_r+0x184>
 8011328:	900f      	str	r0, [sp, #60]	; 0x3c
 801132a:	e7b0      	b.n	801128e <_dtoa_r+0x186>
 801132c:	9b05      	ldr	r3, [sp, #20]
 801132e:	eba3 030a 	sub.w	r3, r3, sl
 8011332:	9305      	str	r3, [sp, #20]
 8011334:	f1ca 0300 	rsb	r3, sl, #0
 8011338:	9307      	str	r3, [sp, #28]
 801133a:	2300      	movs	r3, #0
 801133c:	930e      	str	r3, [sp, #56]	; 0x38
 801133e:	e7bb      	b.n	80112b8 <_dtoa_r+0x1b0>
 8011340:	2301      	movs	r3, #1
 8011342:	930a      	str	r3, [sp, #40]	; 0x28
 8011344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011346:	2b00      	cmp	r3, #0
 8011348:	dd59      	ble.n	80113fe <_dtoa_r+0x2f6>
 801134a:	9302      	str	r3, [sp, #8]
 801134c:	4699      	mov	r9, r3
 801134e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011350:	2200      	movs	r2, #0
 8011352:	6072      	str	r2, [r6, #4]
 8011354:	2204      	movs	r2, #4
 8011356:	f102 0014 	add.w	r0, r2, #20
 801135a:	4298      	cmp	r0, r3
 801135c:	6871      	ldr	r1, [r6, #4]
 801135e:	d953      	bls.n	8011408 <_dtoa_r+0x300>
 8011360:	4620      	mov	r0, r4
 8011362:	f000 fe88 	bl	8012076 <_Balloc>
 8011366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011368:	6030      	str	r0, [r6, #0]
 801136a:	f1b9 0f0e 	cmp.w	r9, #14
 801136e:	f8d3 b000 	ldr.w	fp, [r3]
 8011372:	f200 80e6 	bhi.w	8011542 <_dtoa_r+0x43a>
 8011376:	2d00      	cmp	r5, #0
 8011378:	f000 80e3 	beq.w	8011542 <_dtoa_r+0x43a>
 801137c:	ed9d 7b00 	vldr	d7, [sp]
 8011380:	f1ba 0f00 	cmp.w	sl, #0
 8011384:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011388:	dd74      	ble.n	8011474 <_dtoa_r+0x36c>
 801138a:	4a2a      	ldr	r2, [pc, #168]	; (8011434 <_dtoa_r+0x32c>)
 801138c:	f00a 030f 	and.w	r3, sl, #15
 8011390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011394:	ed93 7b00 	vldr	d7, [r3]
 8011398:	ea4f 162a 	mov.w	r6, sl, asr #4
 801139c:	06f0      	lsls	r0, r6, #27
 801139e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80113a2:	d565      	bpl.n	8011470 <_dtoa_r+0x368>
 80113a4:	4b24      	ldr	r3, [pc, #144]	; (8011438 <_dtoa_r+0x330>)
 80113a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80113aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80113ae:	f7ef fa75 	bl	800089c <__aeabi_ddiv>
 80113b2:	e9cd 0100 	strd	r0, r1, [sp]
 80113b6:	f006 060f 	and.w	r6, r6, #15
 80113ba:	2503      	movs	r5, #3
 80113bc:	4f1e      	ldr	r7, [pc, #120]	; (8011438 <_dtoa_r+0x330>)
 80113be:	e04c      	b.n	801145a <_dtoa_r+0x352>
 80113c0:	2301      	movs	r3, #1
 80113c2:	930a      	str	r3, [sp, #40]	; 0x28
 80113c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113c6:	4453      	add	r3, sl
 80113c8:	f103 0901 	add.w	r9, r3, #1
 80113cc:	9302      	str	r3, [sp, #8]
 80113ce:	464b      	mov	r3, r9
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	bfb8      	it	lt
 80113d4:	2301      	movlt	r3, #1
 80113d6:	e7ba      	b.n	801134e <_dtoa_r+0x246>
 80113d8:	2300      	movs	r3, #0
 80113da:	e7b2      	b.n	8011342 <_dtoa_r+0x23a>
 80113dc:	2300      	movs	r3, #0
 80113de:	e7f0      	b.n	80113c2 <_dtoa_r+0x2ba>
 80113e0:	2501      	movs	r5, #1
 80113e2:	2300      	movs	r3, #0
 80113e4:	9306      	str	r3, [sp, #24]
 80113e6:	950a      	str	r5, [sp, #40]	; 0x28
 80113e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ec:	9302      	str	r3, [sp, #8]
 80113ee:	4699      	mov	r9, r3
 80113f0:	2200      	movs	r2, #0
 80113f2:	2312      	movs	r3, #18
 80113f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80113f6:	e7aa      	b.n	801134e <_dtoa_r+0x246>
 80113f8:	2301      	movs	r3, #1
 80113fa:	930a      	str	r3, [sp, #40]	; 0x28
 80113fc:	e7f4      	b.n	80113e8 <_dtoa_r+0x2e0>
 80113fe:	2301      	movs	r3, #1
 8011400:	9302      	str	r3, [sp, #8]
 8011402:	4699      	mov	r9, r3
 8011404:	461a      	mov	r2, r3
 8011406:	e7f5      	b.n	80113f4 <_dtoa_r+0x2ec>
 8011408:	3101      	adds	r1, #1
 801140a:	6071      	str	r1, [r6, #4]
 801140c:	0052      	lsls	r2, r2, #1
 801140e:	e7a2      	b.n	8011356 <_dtoa_r+0x24e>
 8011410:	636f4361 	.word	0x636f4361
 8011414:	3fd287a7 	.word	0x3fd287a7
 8011418:	8b60c8b3 	.word	0x8b60c8b3
 801141c:	3fc68a28 	.word	0x3fc68a28
 8011420:	509f79fb 	.word	0x509f79fb
 8011424:	3fd34413 	.word	0x3fd34413
 8011428:	7ff00000 	.word	0x7ff00000
 801142c:	08015905 	.word	0x08015905
 8011430:	3ff80000 	.word	0x3ff80000
 8011434:	08015710 	.word	0x08015710
 8011438:	080156e8 	.word	0x080156e8
 801143c:	08015683 	.word	0x08015683
 8011440:	07f1      	lsls	r1, r6, #31
 8011442:	d508      	bpl.n	8011456 <_dtoa_r+0x34e>
 8011444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011448:	e9d7 2300 	ldrd	r2, r3, [r7]
 801144c:	f7ef f8fc 	bl	8000648 <__aeabi_dmul>
 8011450:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011454:	3501      	adds	r5, #1
 8011456:	1076      	asrs	r6, r6, #1
 8011458:	3708      	adds	r7, #8
 801145a:	2e00      	cmp	r6, #0
 801145c:	d1f0      	bne.n	8011440 <_dtoa_r+0x338>
 801145e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011466:	f7ef fa19 	bl	800089c <__aeabi_ddiv>
 801146a:	e9cd 0100 	strd	r0, r1, [sp]
 801146e:	e01a      	b.n	80114a6 <_dtoa_r+0x39e>
 8011470:	2502      	movs	r5, #2
 8011472:	e7a3      	b.n	80113bc <_dtoa_r+0x2b4>
 8011474:	f000 80a0 	beq.w	80115b8 <_dtoa_r+0x4b0>
 8011478:	f1ca 0600 	rsb	r6, sl, #0
 801147c:	4b9f      	ldr	r3, [pc, #636]	; (80116fc <_dtoa_r+0x5f4>)
 801147e:	4fa0      	ldr	r7, [pc, #640]	; (8011700 <_dtoa_r+0x5f8>)
 8011480:	f006 020f 	and.w	r2, r6, #15
 8011484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011490:	f7ef f8da 	bl	8000648 <__aeabi_dmul>
 8011494:	e9cd 0100 	strd	r0, r1, [sp]
 8011498:	1136      	asrs	r6, r6, #4
 801149a:	2300      	movs	r3, #0
 801149c:	2502      	movs	r5, #2
 801149e:	2e00      	cmp	r6, #0
 80114a0:	d17f      	bne.n	80115a2 <_dtoa_r+0x49a>
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1e1      	bne.n	801146a <_dtoa_r+0x362>
 80114a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f000 8087 	beq.w	80115bc <_dtoa_r+0x4b4>
 80114ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80114b2:	2200      	movs	r2, #0
 80114b4:	4b93      	ldr	r3, [pc, #588]	; (8011704 <_dtoa_r+0x5fc>)
 80114b6:	4630      	mov	r0, r6
 80114b8:	4639      	mov	r1, r7
 80114ba:	f7ef fb37 	bl	8000b2c <__aeabi_dcmplt>
 80114be:	2800      	cmp	r0, #0
 80114c0:	d07c      	beq.n	80115bc <_dtoa_r+0x4b4>
 80114c2:	f1b9 0f00 	cmp.w	r9, #0
 80114c6:	d079      	beq.n	80115bc <_dtoa_r+0x4b4>
 80114c8:	9b02      	ldr	r3, [sp, #8]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	dd35      	ble.n	801153a <_dtoa_r+0x432>
 80114ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80114d2:	9308      	str	r3, [sp, #32]
 80114d4:	4639      	mov	r1, r7
 80114d6:	2200      	movs	r2, #0
 80114d8:	4b8b      	ldr	r3, [pc, #556]	; (8011708 <_dtoa_r+0x600>)
 80114da:	4630      	mov	r0, r6
 80114dc:	f7ef f8b4 	bl	8000648 <__aeabi_dmul>
 80114e0:	e9cd 0100 	strd	r0, r1, [sp]
 80114e4:	9f02      	ldr	r7, [sp, #8]
 80114e6:	3501      	adds	r5, #1
 80114e8:	4628      	mov	r0, r5
 80114ea:	f7ef f843 	bl	8000574 <__aeabi_i2d>
 80114ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114f2:	f7ef f8a9 	bl	8000648 <__aeabi_dmul>
 80114f6:	2200      	movs	r2, #0
 80114f8:	4b84      	ldr	r3, [pc, #528]	; (801170c <_dtoa_r+0x604>)
 80114fa:	f7ee feef 	bl	80002dc <__adddf3>
 80114fe:	4605      	mov	r5, r0
 8011500:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011504:	2f00      	cmp	r7, #0
 8011506:	d15d      	bne.n	80115c4 <_dtoa_r+0x4bc>
 8011508:	2200      	movs	r2, #0
 801150a:	4b81      	ldr	r3, [pc, #516]	; (8011710 <_dtoa_r+0x608>)
 801150c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011510:	f7ee fee2 	bl	80002d8 <__aeabi_dsub>
 8011514:	462a      	mov	r2, r5
 8011516:	4633      	mov	r3, r6
 8011518:	e9cd 0100 	strd	r0, r1, [sp]
 801151c:	f7ef fb24 	bl	8000b68 <__aeabi_dcmpgt>
 8011520:	2800      	cmp	r0, #0
 8011522:	f040 8288 	bne.w	8011a36 <_dtoa_r+0x92e>
 8011526:	462a      	mov	r2, r5
 8011528:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801152c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011530:	f7ef fafc 	bl	8000b2c <__aeabi_dcmplt>
 8011534:	2800      	cmp	r0, #0
 8011536:	f040 827c 	bne.w	8011a32 <_dtoa_r+0x92a>
 801153a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801153e:	e9cd 2300 	strd	r2, r3, [sp]
 8011542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011544:	2b00      	cmp	r3, #0
 8011546:	f2c0 8150 	blt.w	80117ea <_dtoa_r+0x6e2>
 801154a:	f1ba 0f0e 	cmp.w	sl, #14
 801154e:	f300 814c 	bgt.w	80117ea <_dtoa_r+0x6e2>
 8011552:	4b6a      	ldr	r3, [pc, #424]	; (80116fc <_dtoa_r+0x5f4>)
 8011554:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011558:	ed93 7b00 	vldr	d7, [r3]
 801155c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801155e:	2b00      	cmp	r3, #0
 8011560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011564:	f280 80d8 	bge.w	8011718 <_dtoa_r+0x610>
 8011568:	f1b9 0f00 	cmp.w	r9, #0
 801156c:	f300 80d4 	bgt.w	8011718 <_dtoa_r+0x610>
 8011570:	f040 825e 	bne.w	8011a30 <_dtoa_r+0x928>
 8011574:	2200      	movs	r2, #0
 8011576:	4b66      	ldr	r3, [pc, #408]	; (8011710 <_dtoa_r+0x608>)
 8011578:	ec51 0b17 	vmov	r0, r1, d7
 801157c:	f7ef f864 	bl	8000648 <__aeabi_dmul>
 8011580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011584:	f7ef fae6 	bl	8000b54 <__aeabi_dcmpge>
 8011588:	464f      	mov	r7, r9
 801158a:	464e      	mov	r6, r9
 801158c:	2800      	cmp	r0, #0
 801158e:	f040 8234 	bne.w	80119fa <_dtoa_r+0x8f2>
 8011592:	2331      	movs	r3, #49	; 0x31
 8011594:	f10b 0501 	add.w	r5, fp, #1
 8011598:	f88b 3000 	strb.w	r3, [fp]
 801159c:	f10a 0a01 	add.w	sl, sl, #1
 80115a0:	e22f      	b.n	8011a02 <_dtoa_r+0x8fa>
 80115a2:	07f2      	lsls	r2, r6, #31
 80115a4:	d505      	bpl.n	80115b2 <_dtoa_r+0x4aa>
 80115a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115aa:	f7ef f84d 	bl	8000648 <__aeabi_dmul>
 80115ae:	3501      	adds	r5, #1
 80115b0:	2301      	movs	r3, #1
 80115b2:	1076      	asrs	r6, r6, #1
 80115b4:	3708      	adds	r7, #8
 80115b6:	e772      	b.n	801149e <_dtoa_r+0x396>
 80115b8:	2502      	movs	r5, #2
 80115ba:	e774      	b.n	80114a6 <_dtoa_r+0x39e>
 80115bc:	f8cd a020 	str.w	sl, [sp, #32]
 80115c0:	464f      	mov	r7, r9
 80115c2:	e791      	b.n	80114e8 <_dtoa_r+0x3e0>
 80115c4:	4b4d      	ldr	r3, [pc, #308]	; (80116fc <_dtoa_r+0x5f4>)
 80115c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80115ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80115ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d047      	beq.n	8011664 <_dtoa_r+0x55c>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	2000      	movs	r0, #0
 80115da:	494e      	ldr	r1, [pc, #312]	; (8011714 <_dtoa_r+0x60c>)
 80115dc:	f7ef f95e 	bl	800089c <__aeabi_ddiv>
 80115e0:	462a      	mov	r2, r5
 80115e2:	4633      	mov	r3, r6
 80115e4:	f7ee fe78 	bl	80002d8 <__aeabi_dsub>
 80115e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80115ec:	465d      	mov	r5, fp
 80115ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115f2:	f7ef fad9 	bl	8000ba8 <__aeabi_d2iz>
 80115f6:	4606      	mov	r6, r0
 80115f8:	f7ee ffbc 	bl	8000574 <__aeabi_i2d>
 80115fc:	4602      	mov	r2, r0
 80115fe:	460b      	mov	r3, r1
 8011600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011604:	f7ee fe68 	bl	80002d8 <__aeabi_dsub>
 8011608:	3630      	adds	r6, #48	; 0x30
 801160a:	f805 6b01 	strb.w	r6, [r5], #1
 801160e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011612:	e9cd 0100 	strd	r0, r1, [sp]
 8011616:	f7ef fa89 	bl	8000b2c <__aeabi_dcmplt>
 801161a:	2800      	cmp	r0, #0
 801161c:	d163      	bne.n	80116e6 <_dtoa_r+0x5de>
 801161e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011622:	2000      	movs	r0, #0
 8011624:	4937      	ldr	r1, [pc, #220]	; (8011704 <_dtoa_r+0x5fc>)
 8011626:	f7ee fe57 	bl	80002d8 <__aeabi_dsub>
 801162a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801162e:	f7ef fa7d 	bl	8000b2c <__aeabi_dcmplt>
 8011632:	2800      	cmp	r0, #0
 8011634:	f040 80b7 	bne.w	80117a6 <_dtoa_r+0x69e>
 8011638:	eba5 030b 	sub.w	r3, r5, fp
 801163c:	429f      	cmp	r7, r3
 801163e:	f77f af7c 	ble.w	801153a <_dtoa_r+0x432>
 8011642:	2200      	movs	r2, #0
 8011644:	4b30      	ldr	r3, [pc, #192]	; (8011708 <_dtoa_r+0x600>)
 8011646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801164a:	f7ee fffd 	bl	8000648 <__aeabi_dmul>
 801164e:	2200      	movs	r2, #0
 8011650:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011654:	4b2c      	ldr	r3, [pc, #176]	; (8011708 <_dtoa_r+0x600>)
 8011656:	e9dd 0100 	ldrd	r0, r1, [sp]
 801165a:	f7ee fff5 	bl	8000648 <__aeabi_dmul>
 801165e:	e9cd 0100 	strd	r0, r1, [sp]
 8011662:	e7c4      	b.n	80115ee <_dtoa_r+0x4e6>
 8011664:	462a      	mov	r2, r5
 8011666:	4633      	mov	r3, r6
 8011668:	f7ee ffee 	bl	8000648 <__aeabi_dmul>
 801166c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011670:	eb0b 0507 	add.w	r5, fp, r7
 8011674:	465e      	mov	r6, fp
 8011676:	e9dd 0100 	ldrd	r0, r1, [sp]
 801167a:	f7ef fa95 	bl	8000ba8 <__aeabi_d2iz>
 801167e:	4607      	mov	r7, r0
 8011680:	f7ee ff78 	bl	8000574 <__aeabi_i2d>
 8011684:	3730      	adds	r7, #48	; 0x30
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801168e:	f7ee fe23 	bl	80002d8 <__aeabi_dsub>
 8011692:	f806 7b01 	strb.w	r7, [r6], #1
 8011696:	42ae      	cmp	r6, r5
 8011698:	e9cd 0100 	strd	r0, r1, [sp]
 801169c:	f04f 0200 	mov.w	r2, #0
 80116a0:	d126      	bne.n	80116f0 <_dtoa_r+0x5e8>
 80116a2:	4b1c      	ldr	r3, [pc, #112]	; (8011714 <_dtoa_r+0x60c>)
 80116a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80116a8:	f7ee fe18 	bl	80002dc <__adddf3>
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116b4:	f7ef fa58 	bl	8000b68 <__aeabi_dcmpgt>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d174      	bne.n	80117a6 <_dtoa_r+0x69e>
 80116bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80116c0:	2000      	movs	r0, #0
 80116c2:	4914      	ldr	r1, [pc, #80]	; (8011714 <_dtoa_r+0x60c>)
 80116c4:	f7ee fe08 	bl	80002d8 <__aeabi_dsub>
 80116c8:	4602      	mov	r2, r0
 80116ca:	460b      	mov	r3, r1
 80116cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116d0:	f7ef fa2c 	bl	8000b2c <__aeabi_dcmplt>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f43f af30 	beq.w	801153a <_dtoa_r+0x432>
 80116da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80116de:	2b30      	cmp	r3, #48	; 0x30
 80116e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80116e4:	d002      	beq.n	80116ec <_dtoa_r+0x5e4>
 80116e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80116ea:	e04a      	b.n	8011782 <_dtoa_r+0x67a>
 80116ec:	4615      	mov	r5, r2
 80116ee:	e7f4      	b.n	80116da <_dtoa_r+0x5d2>
 80116f0:	4b05      	ldr	r3, [pc, #20]	; (8011708 <_dtoa_r+0x600>)
 80116f2:	f7ee ffa9 	bl	8000648 <__aeabi_dmul>
 80116f6:	e9cd 0100 	strd	r0, r1, [sp]
 80116fa:	e7bc      	b.n	8011676 <_dtoa_r+0x56e>
 80116fc:	08015710 	.word	0x08015710
 8011700:	080156e8 	.word	0x080156e8
 8011704:	3ff00000 	.word	0x3ff00000
 8011708:	40240000 	.word	0x40240000
 801170c:	401c0000 	.word	0x401c0000
 8011710:	40140000 	.word	0x40140000
 8011714:	3fe00000 	.word	0x3fe00000
 8011718:	e9dd 6700 	ldrd	r6, r7, [sp]
 801171c:	465d      	mov	r5, fp
 801171e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011722:	4630      	mov	r0, r6
 8011724:	4639      	mov	r1, r7
 8011726:	f7ef f8b9 	bl	800089c <__aeabi_ddiv>
 801172a:	f7ef fa3d 	bl	8000ba8 <__aeabi_d2iz>
 801172e:	4680      	mov	r8, r0
 8011730:	f7ee ff20 	bl	8000574 <__aeabi_i2d>
 8011734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011738:	f7ee ff86 	bl	8000648 <__aeabi_dmul>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4630      	mov	r0, r6
 8011742:	4639      	mov	r1, r7
 8011744:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011748:	f7ee fdc6 	bl	80002d8 <__aeabi_dsub>
 801174c:	f805 6b01 	strb.w	r6, [r5], #1
 8011750:	eba5 060b 	sub.w	r6, r5, fp
 8011754:	45b1      	cmp	r9, r6
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	d139      	bne.n	80117d0 <_dtoa_r+0x6c8>
 801175c:	f7ee fdbe 	bl	80002dc <__adddf3>
 8011760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011764:	4606      	mov	r6, r0
 8011766:	460f      	mov	r7, r1
 8011768:	f7ef f9fe 	bl	8000b68 <__aeabi_dcmpgt>
 801176c:	b9c8      	cbnz	r0, 80117a2 <_dtoa_r+0x69a>
 801176e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011772:	4630      	mov	r0, r6
 8011774:	4639      	mov	r1, r7
 8011776:	f7ef f9cf 	bl	8000b18 <__aeabi_dcmpeq>
 801177a:	b110      	cbz	r0, 8011782 <_dtoa_r+0x67a>
 801177c:	f018 0f01 	tst.w	r8, #1
 8011780:	d10f      	bne.n	80117a2 <_dtoa_r+0x69a>
 8011782:	9904      	ldr	r1, [sp, #16]
 8011784:	4620      	mov	r0, r4
 8011786:	f000 fcaa 	bl	80120de <_Bfree>
 801178a:	2300      	movs	r3, #0
 801178c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801178e:	702b      	strb	r3, [r5, #0]
 8011790:	f10a 0301 	add.w	r3, sl, #1
 8011794:	6013      	str	r3, [r2, #0]
 8011796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011798:	2b00      	cmp	r3, #0
 801179a:	f000 8241 	beq.w	8011c20 <_dtoa_r+0xb18>
 801179e:	601d      	str	r5, [r3, #0]
 80117a0:	e23e      	b.n	8011c20 <_dtoa_r+0xb18>
 80117a2:	f8cd a020 	str.w	sl, [sp, #32]
 80117a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80117aa:	2a39      	cmp	r2, #57	; 0x39
 80117ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80117b0:	d108      	bne.n	80117c4 <_dtoa_r+0x6bc>
 80117b2:	459b      	cmp	fp, r3
 80117b4:	d10a      	bne.n	80117cc <_dtoa_r+0x6c4>
 80117b6:	9b08      	ldr	r3, [sp, #32]
 80117b8:	3301      	adds	r3, #1
 80117ba:	9308      	str	r3, [sp, #32]
 80117bc:	2330      	movs	r3, #48	; 0x30
 80117be:	f88b 3000 	strb.w	r3, [fp]
 80117c2:	465b      	mov	r3, fp
 80117c4:	781a      	ldrb	r2, [r3, #0]
 80117c6:	3201      	adds	r2, #1
 80117c8:	701a      	strb	r2, [r3, #0]
 80117ca:	e78c      	b.n	80116e6 <_dtoa_r+0x5de>
 80117cc:	461d      	mov	r5, r3
 80117ce:	e7ea      	b.n	80117a6 <_dtoa_r+0x69e>
 80117d0:	2200      	movs	r2, #0
 80117d2:	4b9b      	ldr	r3, [pc, #620]	; (8011a40 <_dtoa_r+0x938>)
 80117d4:	f7ee ff38 	bl	8000648 <__aeabi_dmul>
 80117d8:	2200      	movs	r2, #0
 80117da:	2300      	movs	r3, #0
 80117dc:	4606      	mov	r6, r0
 80117de:	460f      	mov	r7, r1
 80117e0:	f7ef f99a 	bl	8000b18 <__aeabi_dcmpeq>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d09a      	beq.n	801171e <_dtoa_r+0x616>
 80117e8:	e7cb      	b.n	8011782 <_dtoa_r+0x67a>
 80117ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ec:	2a00      	cmp	r2, #0
 80117ee:	f000 808b 	beq.w	8011908 <_dtoa_r+0x800>
 80117f2:	9a06      	ldr	r2, [sp, #24]
 80117f4:	2a01      	cmp	r2, #1
 80117f6:	dc6e      	bgt.n	80118d6 <_dtoa_r+0x7ce>
 80117f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	d067      	beq.n	80118ce <_dtoa_r+0x7c6>
 80117fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011802:	9f07      	ldr	r7, [sp, #28]
 8011804:	9d05      	ldr	r5, [sp, #20]
 8011806:	9a05      	ldr	r2, [sp, #20]
 8011808:	2101      	movs	r1, #1
 801180a:	441a      	add	r2, r3
 801180c:	4620      	mov	r0, r4
 801180e:	9205      	str	r2, [sp, #20]
 8011810:	4498      	add	r8, r3
 8011812:	f000 fd04 	bl	801221e <__i2b>
 8011816:	4606      	mov	r6, r0
 8011818:	2d00      	cmp	r5, #0
 801181a:	dd0c      	ble.n	8011836 <_dtoa_r+0x72e>
 801181c:	f1b8 0f00 	cmp.w	r8, #0
 8011820:	dd09      	ble.n	8011836 <_dtoa_r+0x72e>
 8011822:	4545      	cmp	r5, r8
 8011824:	9a05      	ldr	r2, [sp, #20]
 8011826:	462b      	mov	r3, r5
 8011828:	bfa8      	it	ge
 801182a:	4643      	movge	r3, r8
 801182c:	1ad2      	subs	r2, r2, r3
 801182e:	9205      	str	r2, [sp, #20]
 8011830:	1aed      	subs	r5, r5, r3
 8011832:	eba8 0803 	sub.w	r8, r8, r3
 8011836:	9b07      	ldr	r3, [sp, #28]
 8011838:	b1eb      	cbz	r3, 8011876 <_dtoa_r+0x76e>
 801183a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801183c:	2b00      	cmp	r3, #0
 801183e:	d067      	beq.n	8011910 <_dtoa_r+0x808>
 8011840:	b18f      	cbz	r7, 8011866 <_dtoa_r+0x75e>
 8011842:	4631      	mov	r1, r6
 8011844:	463a      	mov	r2, r7
 8011846:	4620      	mov	r0, r4
 8011848:	f000 fd88 	bl	801235c <__pow5mult>
 801184c:	9a04      	ldr	r2, [sp, #16]
 801184e:	4601      	mov	r1, r0
 8011850:	4606      	mov	r6, r0
 8011852:	4620      	mov	r0, r4
 8011854:	f000 fcec 	bl	8012230 <__multiply>
 8011858:	9904      	ldr	r1, [sp, #16]
 801185a:	9008      	str	r0, [sp, #32]
 801185c:	4620      	mov	r0, r4
 801185e:	f000 fc3e 	bl	80120de <_Bfree>
 8011862:	9b08      	ldr	r3, [sp, #32]
 8011864:	9304      	str	r3, [sp, #16]
 8011866:	9b07      	ldr	r3, [sp, #28]
 8011868:	1bda      	subs	r2, r3, r7
 801186a:	d004      	beq.n	8011876 <_dtoa_r+0x76e>
 801186c:	9904      	ldr	r1, [sp, #16]
 801186e:	4620      	mov	r0, r4
 8011870:	f000 fd74 	bl	801235c <__pow5mult>
 8011874:	9004      	str	r0, [sp, #16]
 8011876:	2101      	movs	r1, #1
 8011878:	4620      	mov	r0, r4
 801187a:	f000 fcd0 	bl	801221e <__i2b>
 801187e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011880:	4607      	mov	r7, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	f000 81d0 	beq.w	8011c28 <_dtoa_r+0xb20>
 8011888:	461a      	mov	r2, r3
 801188a:	4601      	mov	r1, r0
 801188c:	4620      	mov	r0, r4
 801188e:	f000 fd65 	bl	801235c <__pow5mult>
 8011892:	9b06      	ldr	r3, [sp, #24]
 8011894:	2b01      	cmp	r3, #1
 8011896:	4607      	mov	r7, r0
 8011898:	dc40      	bgt.n	801191c <_dtoa_r+0x814>
 801189a:	9b00      	ldr	r3, [sp, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d139      	bne.n	8011914 <_dtoa_r+0x80c>
 80118a0:	9b01      	ldr	r3, [sp, #4]
 80118a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d136      	bne.n	8011918 <_dtoa_r+0x810>
 80118aa:	9b01      	ldr	r3, [sp, #4]
 80118ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118b0:	0d1b      	lsrs	r3, r3, #20
 80118b2:	051b      	lsls	r3, r3, #20
 80118b4:	b12b      	cbz	r3, 80118c2 <_dtoa_r+0x7ba>
 80118b6:	9b05      	ldr	r3, [sp, #20]
 80118b8:	3301      	adds	r3, #1
 80118ba:	9305      	str	r3, [sp, #20]
 80118bc:	f108 0801 	add.w	r8, r8, #1
 80118c0:	2301      	movs	r3, #1
 80118c2:	9307      	str	r3, [sp, #28]
 80118c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d12a      	bne.n	8011920 <_dtoa_r+0x818>
 80118ca:	2001      	movs	r0, #1
 80118cc:	e030      	b.n	8011930 <_dtoa_r+0x828>
 80118ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80118d4:	e795      	b.n	8011802 <_dtoa_r+0x6fa>
 80118d6:	9b07      	ldr	r3, [sp, #28]
 80118d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80118dc:	42bb      	cmp	r3, r7
 80118de:	bfbf      	itttt	lt
 80118e0:	9b07      	ldrlt	r3, [sp, #28]
 80118e2:	9707      	strlt	r7, [sp, #28]
 80118e4:	1afa      	sublt	r2, r7, r3
 80118e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80118e8:	bfbb      	ittet	lt
 80118ea:	189b      	addlt	r3, r3, r2
 80118ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80118ee:	1bdf      	subge	r7, r3, r7
 80118f0:	2700      	movlt	r7, #0
 80118f2:	f1b9 0f00 	cmp.w	r9, #0
 80118f6:	bfb5      	itete	lt
 80118f8:	9b05      	ldrlt	r3, [sp, #20]
 80118fa:	9d05      	ldrge	r5, [sp, #20]
 80118fc:	eba3 0509 	sublt.w	r5, r3, r9
 8011900:	464b      	movge	r3, r9
 8011902:	bfb8      	it	lt
 8011904:	2300      	movlt	r3, #0
 8011906:	e77e      	b.n	8011806 <_dtoa_r+0x6fe>
 8011908:	9f07      	ldr	r7, [sp, #28]
 801190a:	9d05      	ldr	r5, [sp, #20]
 801190c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801190e:	e783      	b.n	8011818 <_dtoa_r+0x710>
 8011910:	9a07      	ldr	r2, [sp, #28]
 8011912:	e7ab      	b.n	801186c <_dtoa_r+0x764>
 8011914:	2300      	movs	r3, #0
 8011916:	e7d4      	b.n	80118c2 <_dtoa_r+0x7ba>
 8011918:	9b00      	ldr	r3, [sp, #0]
 801191a:	e7d2      	b.n	80118c2 <_dtoa_r+0x7ba>
 801191c:	2300      	movs	r3, #0
 801191e:	9307      	str	r3, [sp, #28]
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011926:	6918      	ldr	r0, [r3, #16]
 8011928:	f000 fc2b 	bl	8012182 <__hi0bits>
 801192c:	f1c0 0020 	rsb	r0, r0, #32
 8011930:	4440      	add	r0, r8
 8011932:	f010 001f 	ands.w	r0, r0, #31
 8011936:	d047      	beq.n	80119c8 <_dtoa_r+0x8c0>
 8011938:	f1c0 0320 	rsb	r3, r0, #32
 801193c:	2b04      	cmp	r3, #4
 801193e:	dd3b      	ble.n	80119b8 <_dtoa_r+0x8b0>
 8011940:	9b05      	ldr	r3, [sp, #20]
 8011942:	f1c0 001c 	rsb	r0, r0, #28
 8011946:	4403      	add	r3, r0
 8011948:	9305      	str	r3, [sp, #20]
 801194a:	4405      	add	r5, r0
 801194c:	4480      	add	r8, r0
 801194e:	9b05      	ldr	r3, [sp, #20]
 8011950:	2b00      	cmp	r3, #0
 8011952:	dd05      	ble.n	8011960 <_dtoa_r+0x858>
 8011954:	461a      	mov	r2, r3
 8011956:	9904      	ldr	r1, [sp, #16]
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fd4d 	bl	80123f8 <__lshift>
 801195e:	9004      	str	r0, [sp, #16]
 8011960:	f1b8 0f00 	cmp.w	r8, #0
 8011964:	dd05      	ble.n	8011972 <_dtoa_r+0x86a>
 8011966:	4639      	mov	r1, r7
 8011968:	4642      	mov	r2, r8
 801196a:	4620      	mov	r0, r4
 801196c:	f000 fd44 	bl	80123f8 <__lshift>
 8011970:	4607      	mov	r7, r0
 8011972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011974:	b353      	cbz	r3, 80119cc <_dtoa_r+0x8c4>
 8011976:	4639      	mov	r1, r7
 8011978:	9804      	ldr	r0, [sp, #16]
 801197a:	f000 fd91 	bl	80124a0 <__mcmp>
 801197e:	2800      	cmp	r0, #0
 8011980:	da24      	bge.n	80119cc <_dtoa_r+0x8c4>
 8011982:	2300      	movs	r3, #0
 8011984:	220a      	movs	r2, #10
 8011986:	9904      	ldr	r1, [sp, #16]
 8011988:	4620      	mov	r0, r4
 801198a:	f000 fbbf 	bl	801210c <__multadd>
 801198e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011990:	9004      	str	r0, [sp, #16]
 8011992:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011996:	2b00      	cmp	r3, #0
 8011998:	f000 814d 	beq.w	8011c36 <_dtoa_r+0xb2e>
 801199c:	2300      	movs	r3, #0
 801199e:	4631      	mov	r1, r6
 80119a0:	220a      	movs	r2, #10
 80119a2:	4620      	mov	r0, r4
 80119a4:	f000 fbb2 	bl	801210c <__multadd>
 80119a8:	9b02      	ldr	r3, [sp, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	4606      	mov	r6, r0
 80119ae:	dc4f      	bgt.n	8011a50 <_dtoa_r+0x948>
 80119b0:	9b06      	ldr	r3, [sp, #24]
 80119b2:	2b02      	cmp	r3, #2
 80119b4:	dd4c      	ble.n	8011a50 <_dtoa_r+0x948>
 80119b6:	e011      	b.n	80119dc <_dtoa_r+0x8d4>
 80119b8:	d0c9      	beq.n	801194e <_dtoa_r+0x846>
 80119ba:	9a05      	ldr	r2, [sp, #20]
 80119bc:	331c      	adds	r3, #28
 80119be:	441a      	add	r2, r3
 80119c0:	9205      	str	r2, [sp, #20]
 80119c2:	441d      	add	r5, r3
 80119c4:	4498      	add	r8, r3
 80119c6:	e7c2      	b.n	801194e <_dtoa_r+0x846>
 80119c8:	4603      	mov	r3, r0
 80119ca:	e7f6      	b.n	80119ba <_dtoa_r+0x8b2>
 80119cc:	f1b9 0f00 	cmp.w	r9, #0
 80119d0:	dc38      	bgt.n	8011a44 <_dtoa_r+0x93c>
 80119d2:	9b06      	ldr	r3, [sp, #24]
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	dd35      	ble.n	8011a44 <_dtoa_r+0x93c>
 80119d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80119dc:	9b02      	ldr	r3, [sp, #8]
 80119de:	b963      	cbnz	r3, 80119fa <_dtoa_r+0x8f2>
 80119e0:	4639      	mov	r1, r7
 80119e2:	2205      	movs	r2, #5
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 fb91 	bl	801210c <__multadd>
 80119ea:	4601      	mov	r1, r0
 80119ec:	4607      	mov	r7, r0
 80119ee:	9804      	ldr	r0, [sp, #16]
 80119f0:	f000 fd56 	bl	80124a0 <__mcmp>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	f73f adcc 	bgt.w	8011592 <_dtoa_r+0x48a>
 80119fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119fc:	465d      	mov	r5, fp
 80119fe:	ea6f 0a03 	mvn.w	sl, r3
 8011a02:	f04f 0900 	mov.w	r9, #0
 8011a06:	4639      	mov	r1, r7
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f000 fb68 	bl	80120de <_Bfree>
 8011a0e:	2e00      	cmp	r6, #0
 8011a10:	f43f aeb7 	beq.w	8011782 <_dtoa_r+0x67a>
 8011a14:	f1b9 0f00 	cmp.w	r9, #0
 8011a18:	d005      	beq.n	8011a26 <_dtoa_r+0x91e>
 8011a1a:	45b1      	cmp	r9, r6
 8011a1c:	d003      	beq.n	8011a26 <_dtoa_r+0x91e>
 8011a1e:	4649      	mov	r1, r9
 8011a20:	4620      	mov	r0, r4
 8011a22:	f000 fb5c 	bl	80120de <_Bfree>
 8011a26:	4631      	mov	r1, r6
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f000 fb58 	bl	80120de <_Bfree>
 8011a2e:	e6a8      	b.n	8011782 <_dtoa_r+0x67a>
 8011a30:	2700      	movs	r7, #0
 8011a32:	463e      	mov	r6, r7
 8011a34:	e7e1      	b.n	80119fa <_dtoa_r+0x8f2>
 8011a36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011a3a:	463e      	mov	r6, r7
 8011a3c:	e5a9      	b.n	8011592 <_dtoa_r+0x48a>
 8011a3e:	bf00      	nop
 8011a40:	40240000 	.word	0x40240000
 8011a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a46:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f000 80fa 	beq.w	8011c44 <_dtoa_r+0xb3c>
 8011a50:	2d00      	cmp	r5, #0
 8011a52:	dd05      	ble.n	8011a60 <_dtoa_r+0x958>
 8011a54:	4631      	mov	r1, r6
 8011a56:	462a      	mov	r2, r5
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f000 fccd 	bl	80123f8 <__lshift>
 8011a5e:	4606      	mov	r6, r0
 8011a60:	9b07      	ldr	r3, [sp, #28]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d04c      	beq.n	8011b00 <_dtoa_r+0x9f8>
 8011a66:	6871      	ldr	r1, [r6, #4]
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f000 fb04 	bl	8012076 <_Balloc>
 8011a6e:	6932      	ldr	r2, [r6, #16]
 8011a70:	3202      	adds	r2, #2
 8011a72:	4605      	mov	r5, r0
 8011a74:	0092      	lsls	r2, r2, #2
 8011a76:	f106 010c 	add.w	r1, r6, #12
 8011a7a:	300c      	adds	r0, #12
 8011a7c:	f000 faf0 	bl	8012060 <memcpy>
 8011a80:	2201      	movs	r2, #1
 8011a82:	4629      	mov	r1, r5
 8011a84:	4620      	mov	r0, r4
 8011a86:	f000 fcb7 	bl	80123f8 <__lshift>
 8011a8a:	9b00      	ldr	r3, [sp, #0]
 8011a8c:	f8cd b014 	str.w	fp, [sp, #20]
 8011a90:	f003 0301 	and.w	r3, r3, #1
 8011a94:	46b1      	mov	r9, r6
 8011a96:	9307      	str	r3, [sp, #28]
 8011a98:	4606      	mov	r6, r0
 8011a9a:	4639      	mov	r1, r7
 8011a9c:	9804      	ldr	r0, [sp, #16]
 8011a9e:	f7ff faa7 	bl	8010ff0 <quorem>
 8011aa2:	4649      	mov	r1, r9
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011aaa:	9804      	ldr	r0, [sp, #16]
 8011aac:	f000 fcf8 	bl	80124a0 <__mcmp>
 8011ab0:	4632      	mov	r2, r6
 8011ab2:	9000      	str	r0, [sp, #0]
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f000 fd0c 	bl	80124d4 <__mdiff>
 8011abc:	68c3      	ldr	r3, [r0, #12]
 8011abe:	4602      	mov	r2, r0
 8011ac0:	bb03      	cbnz	r3, 8011b04 <_dtoa_r+0x9fc>
 8011ac2:	4601      	mov	r1, r0
 8011ac4:	9008      	str	r0, [sp, #32]
 8011ac6:	9804      	ldr	r0, [sp, #16]
 8011ac8:	f000 fcea 	bl	80124a0 <__mcmp>
 8011acc:	9a08      	ldr	r2, [sp, #32]
 8011ace:	4603      	mov	r3, r0
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	9308      	str	r3, [sp, #32]
 8011ad6:	f000 fb02 	bl	80120de <_Bfree>
 8011ada:	9b08      	ldr	r3, [sp, #32]
 8011adc:	b9a3      	cbnz	r3, 8011b08 <_dtoa_r+0xa00>
 8011ade:	9a06      	ldr	r2, [sp, #24]
 8011ae0:	b992      	cbnz	r2, 8011b08 <_dtoa_r+0xa00>
 8011ae2:	9a07      	ldr	r2, [sp, #28]
 8011ae4:	b982      	cbnz	r2, 8011b08 <_dtoa_r+0xa00>
 8011ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011aea:	d029      	beq.n	8011b40 <_dtoa_r+0xa38>
 8011aec:	9b00      	ldr	r3, [sp, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	dd01      	ble.n	8011af6 <_dtoa_r+0x9ee>
 8011af2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011af6:	9b05      	ldr	r3, [sp, #20]
 8011af8:	1c5d      	adds	r5, r3, #1
 8011afa:	f883 8000 	strb.w	r8, [r3]
 8011afe:	e782      	b.n	8011a06 <_dtoa_r+0x8fe>
 8011b00:	4630      	mov	r0, r6
 8011b02:	e7c2      	b.n	8011a8a <_dtoa_r+0x982>
 8011b04:	2301      	movs	r3, #1
 8011b06:	e7e3      	b.n	8011ad0 <_dtoa_r+0x9c8>
 8011b08:	9a00      	ldr	r2, [sp, #0]
 8011b0a:	2a00      	cmp	r2, #0
 8011b0c:	db04      	blt.n	8011b18 <_dtoa_r+0xa10>
 8011b0e:	d125      	bne.n	8011b5c <_dtoa_r+0xa54>
 8011b10:	9a06      	ldr	r2, [sp, #24]
 8011b12:	bb1a      	cbnz	r2, 8011b5c <_dtoa_r+0xa54>
 8011b14:	9a07      	ldr	r2, [sp, #28]
 8011b16:	bb0a      	cbnz	r2, 8011b5c <_dtoa_r+0xa54>
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	ddec      	ble.n	8011af6 <_dtoa_r+0x9ee>
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	9904      	ldr	r1, [sp, #16]
 8011b20:	4620      	mov	r0, r4
 8011b22:	f000 fc69 	bl	80123f8 <__lshift>
 8011b26:	4639      	mov	r1, r7
 8011b28:	9004      	str	r0, [sp, #16]
 8011b2a:	f000 fcb9 	bl	80124a0 <__mcmp>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	dc03      	bgt.n	8011b3a <_dtoa_r+0xa32>
 8011b32:	d1e0      	bne.n	8011af6 <_dtoa_r+0x9ee>
 8011b34:	f018 0f01 	tst.w	r8, #1
 8011b38:	d0dd      	beq.n	8011af6 <_dtoa_r+0x9ee>
 8011b3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011b3e:	d1d8      	bne.n	8011af2 <_dtoa_r+0x9ea>
 8011b40:	9b05      	ldr	r3, [sp, #20]
 8011b42:	9a05      	ldr	r2, [sp, #20]
 8011b44:	1c5d      	adds	r5, r3, #1
 8011b46:	2339      	movs	r3, #57	; 0x39
 8011b48:	7013      	strb	r3, [r2, #0]
 8011b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b4e:	2b39      	cmp	r3, #57	; 0x39
 8011b50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011b54:	d04f      	beq.n	8011bf6 <_dtoa_r+0xaee>
 8011b56:	3301      	adds	r3, #1
 8011b58:	7013      	strb	r3, [r2, #0]
 8011b5a:	e754      	b.n	8011a06 <_dtoa_r+0x8fe>
 8011b5c:	9a05      	ldr	r2, [sp, #20]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f102 0501 	add.w	r5, r2, #1
 8011b64:	dd06      	ble.n	8011b74 <_dtoa_r+0xa6c>
 8011b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011b6a:	d0e9      	beq.n	8011b40 <_dtoa_r+0xa38>
 8011b6c:	f108 0801 	add.w	r8, r8, #1
 8011b70:	9b05      	ldr	r3, [sp, #20]
 8011b72:	e7c2      	b.n	8011afa <_dtoa_r+0x9f2>
 8011b74:	9a02      	ldr	r2, [sp, #8]
 8011b76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011b7a:	eba5 030b 	sub.w	r3, r5, fp
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d021      	beq.n	8011bc6 <_dtoa_r+0xabe>
 8011b82:	2300      	movs	r3, #0
 8011b84:	220a      	movs	r2, #10
 8011b86:	9904      	ldr	r1, [sp, #16]
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f000 fabf 	bl	801210c <__multadd>
 8011b8e:	45b1      	cmp	r9, r6
 8011b90:	9004      	str	r0, [sp, #16]
 8011b92:	f04f 0300 	mov.w	r3, #0
 8011b96:	f04f 020a 	mov.w	r2, #10
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	d105      	bne.n	8011bac <_dtoa_r+0xaa4>
 8011ba0:	f000 fab4 	bl	801210c <__multadd>
 8011ba4:	4681      	mov	r9, r0
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	9505      	str	r5, [sp, #20]
 8011baa:	e776      	b.n	8011a9a <_dtoa_r+0x992>
 8011bac:	f000 faae 	bl	801210c <__multadd>
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4681      	mov	r9, r0
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	220a      	movs	r2, #10
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f000 faa7 	bl	801210c <__multadd>
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	e7f2      	b.n	8011ba8 <_dtoa_r+0xaa0>
 8011bc2:	f04f 0900 	mov.w	r9, #0
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	9904      	ldr	r1, [sp, #16]
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f000 fc14 	bl	80123f8 <__lshift>
 8011bd0:	4639      	mov	r1, r7
 8011bd2:	9004      	str	r0, [sp, #16]
 8011bd4:	f000 fc64 	bl	80124a0 <__mcmp>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	dcb6      	bgt.n	8011b4a <_dtoa_r+0xa42>
 8011bdc:	d102      	bne.n	8011be4 <_dtoa_r+0xadc>
 8011bde:	f018 0f01 	tst.w	r8, #1
 8011be2:	d1b2      	bne.n	8011b4a <_dtoa_r+0xa42>
 8011be4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011be8:	2b30      	cmp	r3, #48	; 0x30
 8011bea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011bee:	f47f af0a 	bne.w	8011a06 <_dtoa_r+0x8fe>
 8011bf2:	4615      	mov	r5, r2
 8011bf4:	e7f6      	b.n	8011be4 <_dtoa_r+0xadc>
 8011bf6:	4593      	cmp	fp, r2
 8011bf8:	d105      	bne.n	8011c06 <_dtoa_r+0xafe>
 8011bfa:	2331      	movs	r3, #49	; 0x31
 8011bfc:	f10a 0a01 	add.w	sl, sl, #1
 8011c00:	f88b 3000 	strb.w	r3, [fp]
 8011c04:	e6ff      	b.n	8011a06 <_dtoa_r+0x8fe>
 8011c06:	4615      	mov	r5, r2
 8011c08:	e79f      	b.n	8011b4a <_dtoa_r+0xa42>
 8011c0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011c70 <_dtoa_r+0xb68>
 8011c0e:	e007      	b.n	8011c20 <_dtoa_r+0xb18>
 8011c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011c74 <_dtoa_r+0xb6c>
 8011c16:	b11b      	cbz	r3, 8011c20 <_dtoa_r+0xb18>
 8011c18:	f10b 0308 	add.w	r3, fp, #8
 8011c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c1e:	6013      	str	r3, [r2, #0]
 8011c20:	4658      	mov	r0, fp
 8011c22:	b017      	add	sp, #92	; 0x5c
 8011c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c28:	9b06      	ldr	r3, [sp, #24]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	f77f ae35 	ble.w	801189a <_dtoa_r+0x792>
 8011c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c32:	9307      	str	r3, [sp, #28]
 8011c34:	e649      	b.n	80118ca <_dtoa_r+0x7c2>
 8011c36:	9b02      	ldr	r3, [sp, #8]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	dc03      	bgt.n	8011c44 <_dtoa_r+0xb3c>
 8011c3c:	9b06      	ldr	r3, [sp, #24]
 8011c3e:	2b02      	cmp	r3, #2
 8011c40:	f73f aecc 	bgt.w	80119dc <_dtoa_r+0x8d4>
 8011c44:	465d      	mov	r5, fp
 8011c46:	4639      	mov	r1, r7
 8011c48:	9804      	ldr	r0, [sp, #16]
 8011c4a:	f7ff f9d1 	bl	8010ff0 <quorem>
 8011c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011c52:	f805 8b01 	strb.w	r8, [r5], #1
 8011c56:	9a02      	ldr	r2, [sp, #8]
 8011c58:	eba5 030b 	sub.w	r3, r5, fp
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	ddb0      	ble.n	8011bc2 <_dtoa_r+0xaba>
 8011c60:	2300      	movs	r3, #0
 8011c62:	220a      	movs	r2, #10
 8011c64:	9904      	ldr	r1, [sp, #16]
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 fa50 	bl	801210c <__multadd>
 8011c6c:	9004      	str	r0, [sp, #16]
 8011c6e:	e7ea      	b.n	8011c46 <_dtoa_r+0xb3e>
 8011c70:	08015904 	.word	0x08015904
 8011c74:	0801567a 	.word	0x0801567a

08011c78 <__sflush_r>:
 8011c78:	898a      	ldrh	r2, [r1, #12]
 8011c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7e:	4605      	mov	r5, r0
 8011c80:	0710      	lsls	r0, r2, #28
 8011c82:	460c      	mov	r4, r1
 8011c84:	d458      	bmi.n	8011d38 <__sflush_r+0xc0>
 8011c86:	684b      	ldr	r3, [r1, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	dc05      	bgt.n	8011c98 <__sflush_r+0x20>
 8011c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dc02      	bgt.n	8011c98 <__sflush_r+0x20>
 8011c92:	2000      	movs	r0, #0
 8011c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c9a:	2e00      	cmp	r6, #0
 8011c9c:	d0f9      	beq.n	8011c92 <__sflush_r+0x1a>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ca4:	682f      	ldr	r7, [r5, #0]
 8011ca6:	6a21      	ldr	r1, [r4, #32]
 8011ca8:	602b      	str	r3, [r5, #0]
 8011caa:	d032      	beq.n	8011d12 <__sflush_r+0x9a>
 8011cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cae:	89a3      	ldrh	r3, [r4, #12]
 8011cb0:	075a      	lsls	r2, r3, #29
 8011cb2:	d505      	bpl.n	8011cc0 <__sflush_r+0x48>
 8011cb4:	6863      	ldr	r3, [r4, #4]
 8011cb6:	1ac0      	subs	r0, r0, r3
 8011cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cba:	b10b      	cbz	r3, 8011cc0 <__sflush_r+0x48>
 8011cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cbe:	1ac0      	subs	r0, r0, r3
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cc6:	6a21      	ldr	r1, [r4, #32]
 8011cc8:	4628      	mov	r0, r5
 8011cca:	47b0      	blx	r6
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	89a3      	ldrh	r3, [r4, #12]
 8011cd0:	d106      	bne.n	8011ce0 <__sflush_r+0x68>
 8011cd2:	6829      	ldr	r1, [r5, #0]
 8011cd4:	291d      	cmp	r1, #29
 8011cd6:	d848      	bhi.n	8011d6a <__sflush_r+0xf2>
 8011cd8:	4a29      	ldr	r2, [pc, #164]	; (8011d80 <__sflush_r+0x108>)
 8011cda:	40ca      	lsrs	r2, r1
 8011cdc:	07d6      	lsls	r6, r2, #31
 8011cde:	d544      	bpl.n	8011d6a <__sflush_r+0xf2>
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	6062      	str	r2, [r4, #4]
 8011ce4:	04d9      	lsls	r1, r3, #19
 8011ce6:	6922      	ldr	r2, [r4, #16]
 8011ce8:	6022      	str	r2, [r4, #0]
 8011cea:	d504      	bpl.n	8011cf6 <__sflush_r+0x7e>
 8011cec:	1c42      	adds	r2, r0, #1
 8011cee:	d101      	bne.n	8011cf4 <__sflush_r+0x7c>
 8011cf0:	682b      	ldr	r3, [r5, #0]
 8011cf2:	b903      	cbnz	r3, 8011cf6 <__sflush_r+0x7e>
 8011cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8011cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cf8:	602f      	str	r7, [r5, #0]
 8011cfa:	2900      	cmp	r1, #0
 8011cfc:	d0c9      	beq.n	8011c92 <__sflush_r+0x1a>
 8011cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d02:	4299      	cmp	r1, r3
 8011d04:	d002      	beq.n	8011d0c <__sflush_r+0x94>
 8011d06:	4628      	mov	r0, r5
 8011d08:	f000 fc9e 	bl	8012648 <_free_r>
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8011d10:	e7c0      	b.n	8011c94 <__sflush_r+0x1c>
 8011d12:	2301      	movs	r3, #1
 8011d14:	4628      	mov	r0, r5
 8011d16:	47b0      	blx	r6
 8011d18:	1c41      	adds	r1, r0, #1
 8011d1a:	d1c8      	bne.n	8011cae <__sflush_r+0x36>
 8011d1c:	682b      	ldr	r3, [r5, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d0c5      	beq.n	8011cae <__sflush_r+0x36>
 8011d22:	2b1d      	cmp	r3, #29
 8011d24:	d001      	beq.n	8011d2a <__sflush_r+0xb2>
 8011d26:	2b16      	cmp	r3, #22
 8011d28:	d101      	bne.n	8011d2e <__sflush_r+0xb6>
 8011d2a:	602f      	str	r7, [r5, #0]
 8011d2c:	e7b1      	b.n	8011c92 <__sflush_r+0x1a>
 8011d2e:	89a3      	ldrh	r3, [r4, #12]
 8011d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d34:	81a3      	strh	r3, [r4, #12]
 8011d36:	e7ad      	b.n	8011c94 <__sflush_r+0x1c>
 8011d38:	690f      	ldr	r7, [r1, #16]
 8011d3a:	2f00      	cmp	r7, #0
 8011d3c:	d0a9      	beq.n	8011c92 <__sflush_r+0x1a>
 8011d3e:	0793      	lsls	r3, r2, #30
 8011d40:	680e      	ldr	r6, [r1, #0]
 8011d42:	bf08      	it	eq
 8011d44:	694b      	ldreq	r3, [r1, #20]
 8011d46:	600f      	str	r7, [r1, #0]
 8011d48:	bf18      	it	ne
 8011d4a:	2300      	movne	r3, #0
 8011d4c:	eba6 0807 	sub.w	r8, r6, r7
 8011d50:	608b      	str	r3, [r1, #8]
 8011d52:	f1b8 0f00 	cmp.w	r8, #0
 8011d56:	dd9c      	ble.n	8011c92 <__sflush_r+0x1a>
 8011d58:	4643      	mov	r3, r8
 8011d5a:	463a      	mov	r2, r7
 8011d5c:	6a21      	ldr	r1, [r4, #32]
 8011d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d60:	4628      	mov	r0, r5
 8011d62:	47b0      	blx	r6
 8011d64:	2800      	cmp	r0, #0
 8011d66:	dc06      	bgt.n	8011d76 <__sflush_r+0xfe>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d6e:	81a3      	strh	r3, [r4, #12]
 8011d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d74:	e78e      	b.n	8011c94 <__sflush_r+0x1c>
 8011d76:	4407      	add	r7, r0
 8011d78:	eba8 0800 	sub.w	r8, r8, r0
 8011d7c:	e7e9      	b.n	8011d52 <__sflush_r+0xda>
 8011d7e:	bf00      	nop
 8011d80:	20400001 	.word	0x20400001

08011d84 <_fflush_r>:
 8011d84:	b538      	push	{r3, r4, r5, lr}
 8011d86:	690b      	ldr	r3, [r1, #16]
 8011d88:	4605      	mov	r5, r0
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	b1db      	cbz	r3, 8011dc6 <_fflush_r+0x42>
 8011d8e:	b118      	cbz	r0, 8011d98 <_fflush_r+0x14>
 8011d90:	6983      	ldr	r3, [r0, #24]
 8011d92:	b90b      	cbnz	r3, 8011d98 <_fflush_r+0x14>
 8011d94:	f000 f860 	bl	8011e58 <__sinit>
 8011d98:	4b0c      	ldr	r3, [pc, #48]	; (8011dcc <_fflush_r+0x48>)
 8011d9a:	429c      	cmp	r4, r3
 8011d9c:	d109      	bne.n	8011db2 <_fflush_r+0x2e>
 8011d9e:	686c      	ldr	r4, [r5, #4]
 8011da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da4:	b17b      	cbz	r3, 8011dc6 <_fflush_r+0x42>
 8011da6:	4621      	mov	r1, r4
 8011da8:	4628      	mov	r0, r5
 8011daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dae:	f7ff bf63 	b.w	8011c78 <__sflush_r>
 8011db2:	4b07      	ldr	r3, [pc, #28]	; (8011dd0 <_fflush_r+0x4c>)
 8011db4:	429c      	cmp	r4, r3
 8011db6:	d101      	bne.n	8011dbc <_fflush_r+0x38>
 8011db8:	68ac      	ldr	r4, [r5, #8]
 8011dba:	e7f1      	b.n	8011da0 <_fflush_r+0x1c>
 8011dbc:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <_fflush_r+0x50>)
 8011dbe:	429c      	cmp	r4, r3
 8011dc0:	bf08      	it	eq
 8011dc2:	68ec      	ldreq	r4, [r5, #12]
 8011dc4:	e7ec      	b.n	8011da0 <_fflush_r+0x1c>
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	bf00      	nop
 8011dcc:	080156a8 	.word	0x080156a8
 8011dd0:	080156c8 	.word	0x080156c8
 8011dd4:	08015688 	.word	0x08015688

08011dd8 <std>:
 8011dd8:	2300      	movs	r3, #0
 8011dda:	b510      	push	{r4, lr}
 8011ddc:	4604      	mov	r4, r0
 8011dde:	e9c0 3300 	strd	r3, r3, [r0]
 8011de2:	6083      	str	r3, [r0, #8]
 8011de4:	8181      	strh	r1, [r0, #12]
 8011de6:	6643      	str	r3, [r0, #100]	; 0x64
 8011de8:	81c2      	strh	r2, [r0, #14]
 8011dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011dee:	6183      	str	r3, [r0, #24]
 8011df0:	4619      	mov	r1, r3
 8011df2:	2208      	movs	r2, #8
 8011df4:	305c      	adds	r0, #92	; 0x5c
 8011df6:	f7fe fb17 	bl	8010428 <memset>
 8011dfa:	4b05      	ldr	r3, [pc, #20]	; (8011e10 <std+0x38>)
 8011dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8011dfe:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <std+0x3c>)
 8011e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e02:	4b05      	ldr	r3, [pc, #20]	; (8011e18 <std+0x40>)
 8011e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e06:	4b05      	ldr	r3, [pc, #20]	; (8011e1c <std+0x44>)
 8011e08:	6224      	str	r4, [r4, #32]
 8011e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8011e0c:	bd10      	pop	{r4, pc}
 8011e0e:	bf00      	nop
 8011e10:	08012cdd 	.word	0x08012cdd
 8011e14:	08012cff 	.word	0x08012cff
 8011e18:	08012d37 	.word	0x08012d37
 8011e1c:	08012d5b 	.word	0x08012d5b

08011e20 <_cleanup_r>:
 8011e20:	4901      	ldr	r1, [pc, #4]	; (8011e28 <_cleanup_r+0x8>)
 8011e22:	f000 b885 	b.w	8011f30 <_fwalk_reent>
 8011e26:	bf00      	nop
 8011e28:	08011d85 	.word	0x08011d85

08011e2c <__sfmoreglue>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	1e4a      	subs	r2, r1, #1
 8011e30:	2568      	movs	r5, #104	; 0x68
 8011e32:	4355      	muls	r5, r2
 8011e34:	460e      	mov	r6, r1
 8011e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011e3a:	f000 fc53 	bl	80126e4 <_malloc_r>
 8011e3e:	4604      	mov	r4, r0
 8011e40:	b140      	cbz	r0, 8011e54 <__sfmoreglue+0x28>
 8011e42:	2100      	movs	r1, #0
 8011e44:	e9c0 1600 	strd	r1, r6, [r0]
 8011e48:	300c      	adds	r0, #12
 8011e4a:	60a0      	str	r0, [r4, #8]
 8011e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011e50:	f7fe faea 	bl	8010428 <memset>
 8011e54:	4620      	mov	r0, r4
 8011e56:	bd70      	pop	{r4, r5, r6, pc}

08011e58 <__sinit>:
 8011e58:	6983      	ldr	r3, [r0, #24]
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	bb33      	cbnz	r3, 8011eae <__sinit+0x56>
 8011e60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011e64:	6503      	str	r3, [r0, #80]	; 0x50
 8011e66:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <__sinit+0x58>)
 8011e68:	4a12      	ldr	r2, [pc, #72]	; (8011eb4 <__sinit+0x5c>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	6282      	str	r2, [r0, #40]	; 0x28
 8011e6e:	4298      	cmp	r0, r3
 8011e70:	bf04      	itt	eq
 8011e72:	2301      	moveq	r3, #1
 8011e74:	6183      	streq	r3, [r0, #24]
 8011e76:	f000 f81f 	bl	8011eb8 <__sfp>
 8011e7a:	6060      	str	r0, [r4, #4]
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f000 f81b 	bl	8011eb8 <__sfp>
 8011e82:	60a0      	str	r0, [r4, #8]
 8011e84:	4620      	mov	r0, r4
 8011e86:	f000 f817 	bl	8011eb8 <__sfp>
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	60e0      	str	r0, [r4, #12]
 8011e8e:	2104      	movs	r1, #4
 8011e90:	6860      	ldr	r0, [r4, #4]
 8011e92:	f7ff ffa1 	bl	8011dd8 <std>
 8011e96:	2201      	movs	r2, #1
 8011e98:	2109      	movs	r1, #9
 8011e9a:	68a0      	ldr	r0, [r4, #8]
 8011e9c:	f7ff ff9c 	bl	8011dd8 <std>
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	2112      	movs	r1, #18
 8011ea4:	68e0      	ldr	r0, [r4, #12]
 8011ea6:	f7ff ff97 	bl	8011dd8 <std>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	61a3      	str	r3, [r4, #24]
 8011eae:	bd10      	pop	{r4, pc}
 8011eb0:	08015644 	.word	0x08015644
 8011eb4:	08011e21 	.word	0x08011e21

08011eb8 <__sfp>:
 8011eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eba:	4b1b      	ldr	r3, [pc, #108]	; (8011f28 <__sfp+0x70>)
 8011ebc:	681e      	ldr	r6, [r3, #0]
 8011ebe:	69b3      	ldr	r3, [r6, #24]
 8011ec0:	4607      	mov	r7, r0
 8011ec2:	b913      	cbnz	r3, 8011eca <__sfp+0x12>
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7ff ffc7 	bl	8011e58 <__sinit>
 8011eca:	3648      	adds	r6, #72	; 0x48
 8011ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ed0:	3b01      	subs	r3, #1
 8011ed2:	d503      	bpl.n	8011edc <__sfp+0x24>
 8011ed4:	6833      	ldr	r3, [r6, #0]
 8011ed6:	b133      	cbz	r3, 8011ee6 <__sfp+0x2e>
 8011ed8:	6836      	ldr	r6, [r6, #0]
 8011eda:	e7f7      	b.n	8011ecc <__sfp+0x14>
 8011edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ee0:	b16d      	cbz	r5, 8011efe <__sfp+0x46>
 8011ee2:	3468      	adds	r4, #104	; 0x68
 8011ee4:	e7f4      	b.n	8011ed0 <__sfp+0x18>
 8011ee6:	2104      	movs	r1, #4
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f7ff ff9f 	bl	8011e2c <__sfmoreglue>
 8011eee:	6030      	str	r0, [r6, #0]
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d1f1      	bne.n	8011ed8 <__sfp+0x20>
 8011ef4:	230c      	movs	r3, #12
 8011ef6:	603b      	str	r3, [r7, #0]
 8011ef8:	4604      	mov	r4, r0
 8011efa:	4620      	mov	r0, r4
 8011efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011efe:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <__sfp+0x74>)
 8011f00:	6665      	str	r5, [r4, #100]	; 0x64
 8011f02:	e9c4 5500 	strd	r5, r5, [r4]
 8011f06:	60a5      	str	r5, [r4, #8]
 8011f08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011f0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011f10:	2208      	movs	r2, #8
 8011f12:	4629      	mov	r1, r5
 8011f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011f18:	f7fe fa86 	bl	8010428 <memset>
 8011f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011f24:	e7e9      	b.n	8011efa <__sfp+0x42>
 8011f26:	bf00      	nop
 8011f28:	08015644 	.word	0x08015644
 8011f2c:	ffff0001 	.word	0xffff0001

08011f30 <_fwalk_reent>:
 8011f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f34:	4680      	mov	r8, r0
 8011f36:	4689      	mov	r9, r1
 8011f38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011f3c:	2600      	movs	r6, #0
 8011f3e:	b914      	cbnz	r4, 8011f46 <_fwalk_reent+0x16>
 8011f40:	4630      	mov	r0, r6
 8011f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011f4a:	3f01      	subs	r7, #1
 8011f4c:	d501      	bpl.n	8011f52 <_fwalk_reent+0x22>
 8011f4e:	6824      	ldr	r4, [r4, #0]
 8011f50:	e7f5      	b.n	8011f3e <_fwalk_reent+0xe>
 8011f52:	89ab      	ldrh	r3, [r5, #12]
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	d907      	bls.n	8011f68 <_fwalk_reent+0x38>
 8011f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	d003      	beq.n	8011f68 <_fwalk_reent+0x38>
 8011f60:	4629      	mov	r1, r5
 8011f62:	4640      	mov	r0, r8
 8011f64:	47c8      	blx	r9
 8011f66:	4306      	orrs	r6, r0
 8011f68:	3568      	adds	r5, #104	; 0x68
 8011f6a:	e7ee      	b.n	8011f4a <_fwalk_reent+0x1a>

08011f6c <_localeconv_r>:
 8011f6c:	4b04      	ldr	r3, [pc, #16]	; (8011f80 <_localeconv_r+0x14>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	6a18      	ldr	r0, [r3, #32]
 8011f72:	4b04      	ldr	r3, [pc, #16]	; (8011f84 <_localeconv_r+0x18>)
 8011f74:	2800      	cmp	r0, #0
 8011f76:	bf08      	it	eq
 8011f78:	4618      	moveq	r0, r3
 8011f7a:	30f0      	adds	r0, #240	; 0xf0
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	20001c38 	.word	0x20001c38
 8011f84:	20001c9c 	.word	0x20001c9c

08011f88 <__swhatbuf_r>:
 8011f88:	b570      	push	{r4, r5, r6, lr}
 8011f8a:	460e      	mov	r6, r1
 8011f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f90:	2900      	cmp	r1, #0
 8011f92:	b096      	sub	sp, #88	; 0x58
 8011f94:	4614      	mov	r4, r2
 8011f96:	461d      	mov	r5, r3
 8011f98:	da07      	bge.n	8011faa <__swhatbuf_r+0x22>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	602b      	str	r3, [r5, #0]
 8011f9e:	89b3      	ldrh	r3, [r6, #12]
 8011fa0:	061a      	lsls	r2, r3, #24
 8011fa2:	d410      	bmi.n	8011fc6 <__swhatbuf_r+0x3e>
 8011fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fa8:	e00e      	b.n	8011fc8 <__swhatbuf_r+0x40>
 8011faa:	466a      	mov	r2, sp
 8011fac:	f000 fefc 	bl	8012da8 <_fstat_r>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	dbf2      	blt.n	8011f9a <__swhatbuf_r+0x12>
 8011fb4:	9a01      	ldr	r2, [sp, #4]
 8011fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fbe:	425a      	negs	r2, r3
 8011fc0:	415a      	adcs	r2, r3
 8011fc2:	602a      	str	r2, [r5, #0]
 8011fc4:	e7ee      	b.n	8011fa4 <__swhatbuf_r+0x1c>
 8011fc6:	2340      	movs	r3, #64	; 0x40
 8011fc8:	2000      	movs	r0, #0
 8011fca:	6023      	str	r3, [r4, #0]
 8011fcc:	b016      	add	sp, #88	; 0x58
 8011fce:	bd70      	pop	{r4, r5, r6, pc}

08011fd0 <__smakebuf_r>:
 8011fd0:	898b      	ldrh	r3, [r1, #12]
 8011fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fd4:	079d      	lsls	r5, r3, #30
 8011fd6:	4606      	mov	r6, r0
 8011fd8:	460c      	mov	r4, r1
 8011fda:	d507      	bpl.n	8011fec <__smakebuf_r+0x1c>
 8011fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	6123      	str	r3, [r4, #16]
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	6163      	str	r3, [r4, #20]
 8011fe8:	b002      	add	sp, #8
 8011fea:	bd70      	pop	{r4, r5, r6, pc}
 8011fec:	ab01      	add	r3, sp, #4
 8011fee:	466a      	mov	r2, sp
 8011ff0:	f7ff ffca 	bl	8011f88 <__swhatbuf_r>
 8011ff4:	9900      	ldr	r1, [sp, #0]
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	f000 fb73 	bl	80126e4 <_malloc_r>
 8011ffe:	b948      	cbnz	r0, 8012014 <__smakebuf_r+0x44>
 8012000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012004:	059a      	lsls	r2, r3, #22
 8012006:	d4ef      	bmi.n	8011fe8 <__smakebuf_r+0x18>
 8012008:	f023 0303 	bic.w	r3, r3, #3
 801200c:	f043 0302 	orr.w	r3, r3, #2
 8012010:	81a3      	strh	r3, [r4, #12]
 8012012:	e7e3      	b.n	8011fdc <__smakebuf_r+0xc>
 8012014:	4b0d      	ldr	r3, [pc, #52]	; (801204c <__smakebuf_r+0x7c>)
 8012016:	62b3      	str	r3, [r6, #40]	; 0x28
 8012018:	89a3      	ldrh	r3, [r4, #12]
 801201a:	6020      	str	r0, [r4, #0]
 801201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012020:	81a3      	strh	r3, [r4, #12]
 8012022:	9b00      	ldr	r3, [sp, #0]
 8012024:	6163      	str	r3, [r4, #20]
 8012026:	9b01      	ldr	r3, [sp, #4]
 8012028:	6120      	str	r0, [r4, #16]
 801202a:	b15b      	cbz	r3, 8012044 <__smakebuf_r+0x74>
 801202c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012030:	4630      	mov	r0, r6
 8012032:	f000 fecb 	bl	8012dcc <_isatty_r>
 8012036:	b128      	cbz	r0, 8012044 <__smakebuf_r+0x74>
 8012038:	89a3      	ldrh	r3, [r4, #12]
 801203a:	f023 0303 	bic.w	r3, r3, #3
 801203e:	f043 0301 	orr.w	r3, r3, #1
 8012042:	81a3      	strh	r3, [r4, #12]
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	431d      	orrs	r5, r3
 8012048:	81a5      	strh	r5, [r4, #12]
 801204a:	e7cd      	b.n	8011fe8 <__smakebuf_r+0x18>
 801204c:	08011e21 	.word	0x08011e21

08012050 <malloc>:
 8012050:	4b02      	ldr	r3, [pc, #8]	; (801205c <malloc+0xc>)
 8012052:	4601      	mov	r1, r0
 8012054:	6818      	ldr	r0, [r3, #0]
 8012056:	f000 bb45 	b.w	80126e4 <_malloc_r>
 801205a:	bf00      	nop
 801205c:	20001c38 	.word	0x20001c38

08012060 <memcpy>:
 8012060:	b510      	push	{r4, lr}
 8012062:	1e43      	subs	r3, r0, #1
 8012064:	440a      	add	r2, r1
 8012066:	4291      	cmp	r1, r2
 8012068:	d100      	bne.n	801206c <memcpy+0xc>
 801206a:	bd10      	pop	{r4, pc}
 801206c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012074:	e7f7      	b.n	8012066 <memcpy+0x6>

08012076 <_Balloc>:
 8012076:	b570      	push	{r4, r5, r6, lr}
 8012078:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801207a:	4604      	mov	r4, r0
 801207c:	460e      	mov	r6, r1
 801207e:	b93d      	cbnz	r5, 8012090 <_Balloc+0x1a>
 8012080:	2010      	movs	r0, #16
 8012082:	f7ff ffe5 	bl	8012050 <malloc>
 8012086:	6260      	str	r0, [r4, #36]	; 0x24
 8012088:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801208c:	6005      	str	r5, [r0, #0]
 801208e:	60c5      	str	r5, [r0, #12]
 8012090:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012092:	68eb      	ldr	r3, [r5, #12]
 8012094:	b183      	cbz	r3, 80120b8 <_Balloc+0x42>
 8012096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801209e:	b9b8      	cbnz	r0, 80120d0 <_Balloc+0x5a>
 80120a0:	2101      	movs	r1, #1
 80120a2:	fa01 f506 	lsl.w	r5, r1, r6
 80120a6:	1d6a      	adds	r2, r5, #5
 80120a8:	0092      	lsls	r2, r2, #2
 80120aa:	4620      	mov	r0, r4
 80120ac:	f000 fabe 	bl	801262c <_calloc_r>
 80120b0:	b160      	cbz	r0, 80120cc <_Balloc+0x56>
 80120b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80120b6:	e00e      	b.n	80120d6 <_Balloc+0x60>
 80120b8:	2221      	movs	r2, #33	; 0x21
 80120ba:	2104      	movs	r1, #4
 80120bc:	4620      	mov	r0, r4
 80120be:	f000 fab5 	bl	801262c <_calloc_r>
 80120c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120c4:	60e8      	str	r0, [r5, #12]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1e4      	bne.n	8012096 <_Balloc+0x20>
 80120cc:	2000      	movs	r0, #0
 80120ce:	bd70      	pop	{r4, r5, r6, pc}
 80120d0:	6802      	ldr	r2, [r0, #0]
 80120d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80120d6:	2300      	movs	r3, #0
 80120d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120dc:	e7f7      	b.n	80120ce <_Balloc+0x58>

080120de <_Bfree>:
 80120de:	b570      	push	{r4, r5, r6, lr}
 80120e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80120e2:	4606      	mov	r6, r0
 80120e4:	460d      	mov	r5, r1
 80120e6:	b93c      	cbnz	r4, 80120f8 <_Bfree+0x1a>
 80120e8:	2010      	movs	r0, #16
 80120ea:	f7ff ffb1 	bl	8012050 <malloc>
 80120ee:	6270      	str	r0, [r6, #36]	; 0x24
 80120f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120f4:	6004      	str	r4, [r0, #0]
 80120f6:	60c4      	str	r4, [r0, #12]
 80120f8:	b13d      	cbz	r5, 801210a <_Bfree+0x2c>
 80120fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80120fc:	686a      	ldr	r2, [r5, #4]
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012104:	6029      	str	r1, [r5, #0]
 8012106:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801210a:	bd70      	pop	{r4, r5, r6, pc}

0801210c <__multadd>:
 801210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012110:	690d      	ldr	r5, [r1, #16]
 8012112:	461f      	mov	r7, r3
 8012114:	4606      	mov	r6, r0
 8012116:	460c      	mov	r4, r1
 8012118:	f101 0c14 	add.w	ip, r1, #20
 801211c:	2300      	movs	r3, #0
 801211e:	f8dc 0000 	ldr.w	r0, [ip]
 8012122:	b281      	uxth	r1, r0
 8012124:	fb02 7101 	mla	r1, r2, r1, r7
 8012128:	0c0f      	lsrs	r7, r1, #16
 801212a:	0c00      	lsrs	r0, r0, #16
 801212c:	fb02 7000 	mla	r0, r2, r0, r7
 8012130:	b289      	uxth	r1, r1
 8012132:	3301      	adds	r3, #1
 8012134:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012138:	429d      	cmp	r5, r3
 801213a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801213e:	f84c 1b04 	str.w	r1, [ip], #4
 8012142:	dcec      	bgt.n	801211e <__multadd+0x12>
 8012144:	b1d7      	cbz	r7, 801217c <__multadd+0x70>
 8012146:	68a3      	ldr	r3, [r4, #8]
 8012148:	42ab      	cmp	r3, r5
 801214a:	dc12      	bgt.n	8012172 <__multadd+0x66>
 801214c:	6861      	ldr	r1, [r4, #4]
 801214e:	4630      	mov	r0, r6
 8012150:	3101      	adds	r1, #1
 8012152:	f7ff ff90 	bl	8012076 <_Balloc>
 8012156:	6922      	ldr	r2, [r4, #16]
 8012158:	3202      	adds	r2, #2
 801215a:	f104 010c 	add.w	r1, r4, #12
 801215e:	4680      	mov	r8, r0
 8012160:	0092      	lsls	r2, r2, #2
 8012162:	300c      	adds	r0, #12
 8012164:	f7ff ff7c 	bl	8012060 <memcpy>
 8012168:	4621      	mov	r1, r4
 801216a:	4630      	mov	r0, r6
 801216c:	f7ff ffb7 	bl	80120de <_Bfree>
 8012170:	4644      	mov	r4, r8
 8012172:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012176:	3501      	adds	r5, #1
 8012178:	615f      	str	r7, [r3, #20]
 801217a:	6125      	str	r5, [r4, #16]
 801217c:	4620      	mov	r0, r4
 801217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012182 <__hi0bits>:
 8012182:	0c02      	lsrs	r2, r0, #16
 8012184:	0412      	lsls	r2, r2, #16
 8012186:	4603      	mov	r3, r0
 8012188:	b9b2      	cbnz	r2, 80121b8 <__hi0bits+0x36>
 801218a:	0403      	lsls	r3, r0, #16
 801218c:	2010      	movs	r0, #16
 801218e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012192:	bf04      	itt	eq
 8012194:	021b      	lsleq	r3, r3, #8
 8012196:	3008      	addeq	r0, #8
 8012198:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801219c:	bf04      	itt	eq
 801219e:	011b      	lsleq	r3, r3, #4
 80121a0:	3004      	addeq	r0, #4
 80121a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80121a6:	bf04      	itt	eq
 80121a8:	009b      	lsleq	r3, r3, #2
 80121aa:	3002      	addeq	r0, #2
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	db06      	blt.n	80121be <__hi0bits+0x3c>
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	d503      	bpl.n	80121bc <__hi0bits+0x3a>
 80121b4:	3001      	adds	r0, #1
 80121b6:	4770      	bx	lr
 80121b8:	2000      	movs	r0, #0
 80121ba:	e7e8      	b.n	801218e <__hi0bits+0xc>
 80121bc:	2020      	movs	r0, #32
 80121be:	4770      	bx	lr

080121c0 <__lo0bits>:
 80121c0:	6803      	ldr	r3, [r0, #0]
 80121c2:	f013 0207 	ands.w	r2, r3, #7
 80121c6:	4601      	mov	r1, r0
 80121c8:	d00b      	beq.n	80121e2 <__lo0bits+0x22>
 80121ca:	07da      	lsls	r2, r3, #31
 80121cc:	d423      	bmi.n	8012216 <__lo0bits+0x56>
 80121ce:	0798      	lsls	r0, r3, #30
 80121d0:	bf49      	itett	mi
 80121d2:	085b      	lsrmi	r3, r3, #1
 80121d4:	089b      	lsrpl	r3, r3, #2
 80121d6:	2001      	movmi	r0, #1
 80121d8:	600b      	strmi	r3, [r1, #0]
 80121da:	bf5c      	itt	pl
 80121dc:	600b      	strpl	r3, [r1, #0]
 80121de:	2002      	movpl	r0, #2
 80121e0:	4770      	bx	lr
 80121e2:	b298      	uxth	r0, r3
 80121e4:	b9a8      	cbnz	r0, 8012212 <__lo0bits+0x52>
 80121e6:	0c1b      	lsrs	r3, r3, #16
 80121e8:	2010      	movs	r0, #16
 80121ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80121ee:	bf04      	itt	eq
 80121f0:	0a1b      	lsreq	r3, r3, #8
 80121f2:	3008      	addeq	r0, #8
 80121f4:	071a      	lsls	r2, r3, #28
 80121f6:	bf04      	itt	eq
 80121f8:	091b      	lsreq	r3, r3, #4
 80121fa:	3004      	addeq	r0, #4
 80121fc:	079a      	lsls	r2, r3, #30
 80121fe:	bf04      	itt	eq
 8012200:	089b      	lsreq	r3, r3, #2
 8012202:	3002      	addeq	r0, #2
 8012204:	07da      	lsls	r2, r3, #31
 8012206:	d402      	bmi.n	801220e <__lo0bits+0x4e>
 8012208:	085b      	lsrs	r3, r3, #1
 801220a:	d006      	beq.n	801221a <__lo0bits+0x5a>
 801220c:	3001      	adds	r0, #1
 801220e:	600b      	str	r3, [r1, #0]
 8012210:	4770      	bx	lr
 8012212:	4610      	mov	r0, r2
 8012214:	e7e9      	b.n	80121ea <__lo0bits+0x2a>
 8012216:	2000      	movs	r0, #0
 8012218:	4770      	bx	lr
 801221a:	2020      	movs	r0, #32
 801221c:	4770      	bx	lr

0801221e <__i2b>:
 801221e:	b510      	push	{r4, lr}
 8012220:	460c      	mov	r4, r1
 8012222:	2101      	movs	r1, #1
 8012224:	f7ff ff27 	bl	8012076 <_Balloc>
 8012228:	2201      	movs	r2, #1
 801222a:	6144      	str	r4, [r0, #20]
 801222c:	6102      	str	r2, [r0, #16]
 801222e:	bd10      	pop	{r4, pc}

08012230 <__multiply>:
 8012230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	4614      	mov	r4, r2
 8012236:	690a      	ldr	r2, [r1, #16]
 8012238:	6923      	ldr	r3, [r4, #16]
 801223a:	429a      	cmp	r2, r3
 801223c:	bfb8      	it	lt
 801223e:	460b      	movlt	r3, r1
 8012240:	4688      	mov	r8, r1
 8012242:	bfbc      	itt	lt
 8012244:	46a0      	movlt	r8, r4
 8012246:	461c      	movlt	r4, r3
 8012248:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801224c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012250:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012258:	eb07 0609 	add.w	r6, r7, r9
 801225c:	42b3      	cmp	r3, r6
 801225e:	bfb8      	it	lt
 8012260:	3101      	addlt	r1, #1
 8012262:	f7ff ff08 	bl	8012076 <_Balloc>
 8012266:	f100 0514 	add.w	r5, r0, #20
 801226a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801226e:	462b      	mov	r3, r5
 8012270:	2200      	movs	r2, #0
 8012272:	4573      	cmp	r3, lr
 8012274:	d316      	bcc.n	80122a4 <__multiply+0x74>
 8012276:	f104 0214 	add.w	r2, r4, #20
 801227a:	f108 0114 	add.w	r1, r8, #20
 801227e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012282:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	9b00      	ldr	r3, [sp, #0]
 801228a:	9201      	str	r2, [sp, #4]
 801228c:	4293      	cmp	r3, r2
 801228e:	d80c      	bhi.n	80122aa <__multiply+0x7a>
 8012290:	2e00      	cmp	r6, #0
 8012292:	dd03      	ble.n	801229c <__multiply+0x6c>
 8012294:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012298:	2b00      	cmp	r3, #0
 801229a:	d05d      	beq.n	8012358 <__multiply+0x128>
 801229c:	6106      	str	r6, [r0, #16]
 801229e:	b003      	add	sp, #12
 80122a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a4:	f843 2b04 	str.w	r2, [r3], #4
 80122a8:	e7e3      	b.n	8012272 <__multiply+0x42>
 80122aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80122ae:	f1bb 0f00 	cmp.w	fp, #0
 80122b2:	d023      	beq.n	80122fc <__multiply+0xcc>
 80122b4:	4689      	mov	r9, r1
 80122b6:	46ac      	mov	ip, r5
 80122b8:	f04f 0800 	mov.w	r8, #0
 80122bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80122c0:	f8dc a000 	ldr.w	sl, [ip]
 80122c4:	b2a3      	uxth	r3, r4
 80122c6:	fa1f fa8a 	uxth.w	sl, sl
 80122ca:	fb0b a303 	mla	r3, fp, r3, sl
 80122ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80122d2:	f8dc 4000 	ldr.w	r4, [ip]
 80122d6:	4443      	add	r3, r8
 80122d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80122dc:	fb0b 840a 	mla	r4, fp, sl, r8
 80122e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80122e4:	46e2      	mov	sl, ip
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80122ec:	454f      	cmp	r7, r9
 80122ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80122f2:	f84a 3b04 	str.w	r3, [sl], #4
 80122f6:	d82b      	bhi.n	8012350 <__multiply+0x120>
 80122f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80122fc:	9b01      	ldr	r3, [sp, #4]
 80122fe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012302:	3204      	adds	r2, #4
 8012304:	f1ba 0f00 	cmp.w	sl, #0
 8012308:	d020      	beq.n	801234c <__multiply+0x11c>
 801230a:	682b      	ldr	r3, [r5, #0]
 801230c:	4689      	mov	r9, r1
 801230e:	46a8      	mov	r8, r5
 8012310:	f04f 0b00 	mov.w	fp, #0
 8012314:	f8b9 c000 	ldrh.w	ip, [r9]
 8012318:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801231c:	fb0a 440c 	mla	r4, sl, ip, r4
 8012320:	445c      	add	r4, fp
 8012322:	46c4      	mov	ip, r8
 8012324:	b29b      	uxth	r3, r3
 8012326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801232a:	f84c 3b04 	str.w	r3, [ip], #4
 801232e:	f859 3b04 	ldr.w	r3, [r9], #4
 8012332:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012336:	0c1b      	lsrs	r3, r3, #16
 8012338:	fb0a b303 	mla	r3, sl, r3, fp
 801233c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012340:	454f      	cmp	r7, r9
 8012342:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012346:	d805      	bhi.n	8012354 <__multiply+0x124>
 8012348:	f8c8 3004 	str.w	r3, [r8, #4]
 801234c:	3504      	adds	r5, #4
 801234e:	e79b      	b.n	8012288 <__multiply+0x58>
 8012350:	46d4      	mov	ip, sl
 8012352:	e7b3      	b.n	80122bc <__multiply+0x8c>
 8012354:	46e0      	mov	r8, ip
 8012356:	e7dd      	b.n	8012314 <__multiply+0xe4>
 8012358:	3e01      	subs	r6, #1
 801235a:	e799      	b.n	8012290 <__multiply+0x60>

0801235c <__pow5mult>:
 801235c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012360:	4615      	mov	r5, r2
 8012362:	f012 0203 	ands.w	r2, r2, #3
 8012366:	4606      	mov	r6, r0
 8012368:	460f      	mov	r7, r1
 801236a:	d007      	beq.n	801237c <__pow5mult+0x20>
 801236c:	3a01      	subs	r2, #1
 801236e:	4c21      	ldr	r4, [pc, #132]	; (80123f4 <__pow5mult+0x98>)
 8012370:	2300      	movs	r3, #0
 8012372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012376:	f7ff fec9 	bl	801210c <__multadd>
 801237a:	4607      	mov	r7, r0
 801237c:	10ad      	asrs	r5, r5, #2
 801237e:	d035      	beq.n	80123ec <__pow5mult+0x90>
 8012380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012382:	b93c      	cbnz	r4, 8012394 <__pow5mult+0x38>
 8012384:	2010      	movs	r0, #16
 8012386:	f7ff fe63 	bl	8012050 <malloc>
 801238a:	6270      	str	r0, [r6, #36]	; 0x24
 801238c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012390:	6004      	str	r4, [r0, #0]
 8012392:	60c4      	str	r4, [r0, #12]
 8012394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801239c:	b94c      	cbnz	r4, 80123b2 <__pow5mult+0x56>
 801239e:	f240 2171 	movw	r1, #625	; 0x271
 80123a2:	4630      	mov	r0, r6
 80123a4:	f7ff ff3b 	bl	801221e <__i2b>
 80123a8:	2300      	movs	r3, #0
 80123aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80123ae:	4604      	mov	r4, r0
 80123b0:	6003      	str	r3, [r0, #0]
 80123b2:	f04f 0800 	mov.w	r8, #0
 80123b6:	07eb      	lsls	r3, r5, #31
 80123b8:	d50a      	bpl.n	80123d0 <__pow5mult+0x74>
 80123ba:	4639      	mov	r1, r7
 80123bc:	4622      	mov	r2, r4
 80123be:	4630      	mov	r0, r6
 80123c0:	f7ff ff36 	bl	8012230 <__multiply>
 80123c4:	4639      	mov	r1, r7
 80123c6:	4681      	mov	r9, r0
 80123c8:	4630      	mov	r0, r6
 80123ca:	f7ff fe88 	bl	80120de <_Bfree>
 80123ce:	464f      	mov	r7, r9
 80123d0:	106d      	asrs	r5, r5, #1
 80123d2:	d00b      	beq.n	80123ec <__pow5mult+0x90>
 80123d4:	6820      	ldr	r0, [r4, #0]
 80123d6:	b938      	cbnz	r0, 80123e8 <__pow5mult+0x8c>
 80123d8:	4622      	mov	r2, r4
 80123da:	4621      	mov	r1, r4
 80123dc:	4630      	mov	r0, r6
 80123de:	f7ff ff27 	bl	8012230 <__multiply>
 80123e2:	6020      	str	r0, [r4, #0]
 80123e4:	f8c0 8000 	str.w	r8, [r0]
 80123e8:	4604      	mov	r4, r0
 80123ea:	e7e4      	b.n	80123b6 <__pow5mult+0x5a>
 80123ec:	4638      	mov	r0, r7
 80123ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123f2:	bf00      	nop
 80123f4:	080157d8 	.word	0x080157d8

080123f8 <__lshift>:
 80123f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123fc:	460c      	mov	r4, r1
 80123fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012402:	6923      	ldr	r3, [r4, #16]
 8012404:	6849      	ldr	r1, [r1, #4]
 8012406:	eb0a 0903 	add.w	r9, sl, r3
 801240a:	68a3      	ldr	r3, [r4, #8]
 801240c:	4607      	mov	r7, r0
 801240e:	4616      	mov	r6, r2
 8012410:	f109 0501 	add.w	r5, r9, #1
 8012414:	42ab      	cmp	r3, r5
 8012416:	db32      	blt.n	801247e <__lshift+0x86>
 8012418:	4638      	mov	r0, r7
 801241a:	f7ff fe2c 	bl	8012076 <_Balloc>
 801241e:	2300      	movs	r3, #0
 8012420:	4680      	mov	r8, r0
 8012422:	f100 0114 	add.w	r1, r0, #20
 8012426:	461a      	mov	r2, r3
 8012428:	4553      	cmp	r3, sl
 801242a:	db2b      	blt.n	8012484 <__lshift+0x8c>
 801242c:	6920      	ldr	r0, [r4, #16]
 801242e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012432:	f104 0314 	add.w	r3, r4, #20
 8012436:	f016 021f 	ands.w	r2, r6, #31
 801243a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801243e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012442:	d025      	beq.n	8012490 <__lshift+0x98>
 8012444:	f1c2 0e20 	rsb	lr, r2, #32
 8012448:	2000      	movs	r0, #0
 801244a:	681e      	ldr	r6, [r3, #0]
 801244c:	468a      	mov	sl, r1
 801244e:	4096      	lsls	r6, r2
 8012450:	4330      	orrs	r0, r6
 8012452:	f84a 0b04 	str.w	r0, [sl], #4
 8012456:	f853 0b04 	ldr.w	r0, [r3], #4
 801245a:	459c      	cmp	ip, r3
 801245c:	fa20 f00e 	lsr.w	r0, r0, lr
 8012460:	d814      	bhi.n	801248c <__lshift+0x94>
 8012462:	6048      	str	r0, [r1, #4]
 8012464:	b108      	cbz	r0, 801246a <__lshift+0x72>
 8012466:	f109 0502 	add.w	r5, r9, #2
 801246a:	3d01      	subs	r5, #1
 801246c:	4638      	mov	r0, r7
 801246e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012472:	4621      	mov	r1, r4
 8012474:	f7ff fe33 	bl	80120de <_Bfree>
 8012478:	4640      	mov	r0, r8
 801247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247e:	3101      	adds	r1, #1
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	e7c7      	b.n	8012414 <__lshift+0x1c>
 8012484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012488:	3301      	adds	r3, #1
 801248a:	e7cd      	b.n	8012428 <__lshift+0x30>
 801248c:	4651      	mov	r1, sl
 801248e:	e7dc      	b.n	801244a <__lshift+0x52>
 8012490:	3904      	subs	r1, #4
 8012492:	f853 2b04 	ldr.w	r2, [r3], #4
 8012496:	f841 2f04 	str.w	r2, [r1, #4]!
 801249a:	459c      	cmp	ip, r3
 801249c:	d8f9      	bhi.n	8012492 <__lshift+0x9a>
 801249e:	e7e4      	b.n	801246a <__lshift+0x72>

080124a0 <__mcmp>:
 80124a0:	6903      	ldr	r3, [r0, #16]
 80124a2:	690a      	ldr	r2, [r1, #16]
 80124a4:	1a9b      	subs	r3, r3, r2
 80124a6:	b530      	push	{r4, r5, lr}
 80124a8:	d10c      	bne.n	80124c4 <__mcmp+0x24>
 80124aa:	0092      	lsls	r2, r2, #2
 80124ac:	3014      	adds	r0, #20
 80124ae:	3114      	adds	r1, #20
 80124b0:	1884      	adds	r4, r0, r2
 80124b2:	4411      	add	r1, r2
 80124b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80124b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80124bc:	4295      	cmp	r5, r2
 80124be:	d003      	beq.n	80124c8 <__mcmp+0x28>
 80124c0:	d305      	bcc.n	80124ce <__mcmp+0x2e>
 80124c2:	2301      	movs	r3, #1
 80124c4:	4618      	mov	r0, r3
 80124c6:	bd30      	pop	{r4, r5, pc}
 80124c8:	42a0      	cmp	r0, r4
 80124ca:	d3f3      	bcc.n	80124b4 <__mcmp+0x14>
 80124cc:	e7fa      	b.n	80124c4 <__mcmp+0x24>
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124d2:	e7f7      	b.n	80124c4 <__mcmp+0x24>

080124d4 <__mdiff>:
 80124d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d8:	460d      	mov	r5, r1
 80124da:	4607      	mov	r7, r0
 80124dc:	4611      	mov	r1, r2
 80124de:	4628      	mov	r0, r5
 80124e0:	4614      	mov	r4, r2
 80124e2:	f7ff ffdd 	bl	80124a0 <__mcmp>
 80124e6:	1e06      	subs	r6, r0, #0
 80124e8:	d108      	bne.n	80124fc <__mdiff+0x28>
 80124ea:	4631      	mov	r1, r6
 80124ec:	4638      	mov	r0, r7
 80124ee:	f7ff fdc2 	bl	8012076 <_Balloc>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80124f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124fc:	bfa4      	itt	ge
 80124fe:	4623      	movge	r3, r4
 8012500:	462c      	movge	r4, r5
 8012502:	4638      	mov	r0, r7
 8012504:	6861      	ldr	r1, [r4, #4]
 8012506:	bfa6      	itte	ge
 8012508:	461d      	movge	r5, r3
 801250a:	2600      	movge	r6, #0
 801250c:	2601      	movlt	r6, #1
 801250e:	f7ff fdb2 	bl	8012076 <_Balloc>
 8012512:	692b      	ldr	r3, [r5, #16]
 8012514:	60c6      	str	r6, [r0, #12]
 8012516:	6926      	ldr	r6, [r4, #16]
 8012518:	f105 0914 	add.w	r9, r5, #20
 801251c:	f104 0214 	add.w	r2, r4, #20
 8012520:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012524:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012528:	f100 0514 	add.w	r5, r0, #20
 801252c:	f04f 0e00 	mov.w	lr, #0
 8012530:	f852 ab04 	ldr.w	sl, [r2], #4
 8012534:	f859 4b04 	ldr.w	r4, [r9], #4
 8012538:	fa1e f18a 	uxtah	r1, lr, sl
 801253c:	b2a3      	uxth	r3, r4
 801253e:	1ac9      	subs	r1, r1, r3
 8012540:	0c23      	lsrs	r3, r4, #16
 8012542:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012546:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801254a:	b289      	uxth	r1, r1
 801254c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012550:	45c8      	cmp	r8, r9
 8012552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012556:	4694      	mov	ip, r2
 8012558:	f845 3b04 	str.w	r3, [r5], #4
 801255c:	d8e8      	bhi.n	8012530 <__mdiff+0x5c>
 801255e:	45bc      	cmp	ip, r7
 8012560:	d304      	bcc.n	801256c <__mdiff+0x98>
 8012562:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012566:	b183      	cbz	r3, 801258a <__mdiff+0xb6>
 8012568:	6106      	str	r6, [r0, #16]
 801256a:	e7c5      	b.n	80124f8 <__mdiff+0x24>
 801256c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012570:	fa1e f381 	uxtah	r3, lr, r1
 8012574:	141a      	asrs	r2, r3, #16
 8012576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801257a:	b29b      	uxth	r3, r3
 801257c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012580:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012584:	f845 3b04 	str.w	r3, [r5], #4
 8012588:	e7e9      	b.n	801255e <__mdiff+0x8a>
 801258a:	3e01      	subs	r6, #1
 801258c:	e7e9      	b.n	8012562 <__mdiff+0x8e>

0801258e <__d2b>:
 801258e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012592:	460e      	mov	r6, r1
 8012594:	2101      	movs	r1, #1
 8012596:	ec59 8b10 	vmov	r8, r9, d0
 801259a:	4615      	mov	r5, r2
 801259c:	f7ff fd6b 	bl	8012076 <_Balloc>
 80125a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80125a4:	4607      	mov	r7, r0
 80125a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125aa:	bb34      	cbnz	r4, 80125fa <__d2b+0x6c>
 80125ac:	9301      	str	r3, [sp, #4]
 80125ae:	f1b8 0300 	subs.w	r3, r8, #0
 80125b2:	d027      	beq.n	8012604 <__d2b+0x76>
 80125b4:	a802      	add	r0, sp, #8
 80125b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80125ba:	f7ff fe01 	bl	80121c0 <__lo0bits>
 80125be:	9900      	ldr	r1, [sp, #0]
 80125c0:	b1f0      	cbz	r0, 8012600 <__d2b+0x72>
 80125c2:	9a01      	ldr	r2, [sp, #4]
 80125c4:	f1c0 0320 	rsb	r3, r0, #32
 80125c8:	fa02 f303 	lsl.w	r3, r2, r3
 80125cc:	430b      	orrs	r3, r1
 80125ce:	40c2      	lsrs	r2, r0
 80125d0:	617b      	str	r3, [r7, #20]
 80125d2:	9201      	str	r2, [sp, #4]
 80125d4:	9b01      	ldr	r3, [sp, #4]
 80125d6:	61bb      	str	r3, [r7, #24]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	bf14      	ite	ne
 80125dc:	2102      	movne	r1, #2
 80125de:	2101      	moveq	r1, #1
 80125e0:	6139      	str	r1, [r7, #16]
 80125e2:	b1c4      	cbz	r4, 8012616 <__d2b+0x88>
 80125e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80125e8:	4404      	add	r4, r0
 80125ea:	6034      	str	r4, [r6, #0]
 80125ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125f0:	6028      	str	r0, [r5, #0]
 80125f2:	4638      	mov	r0, r7
 80125f4:	b003      	add	sp, #12
 80125f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125fe:	e7d5      	b.n	80125ac <__d2b+0x1e>
 8012600:	6179      	str	r1, [r7, #20]
 8012602:	e7e7      	b.n	80125d4 <__d2b+0x46>
 8012604:	a801      	add	r0, sp, #4
 8012606:	f7ff fddb 	bl	80121c0 <__lo0bits>
 801260a:	9b01      	ldr	r3, [sp, #4]
 801260c:	617b      	str	r3, [r7, #20]
 801260e:	2101      	movs	r1, #1
 8012610:	6139      	str	r1, [r7, #16]
 8012612:	3020      	adds	r0, #32
 8012614:	e7e5      	b.n	80125e2 <__d2b+0x54>
 8012616:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801261a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801261e:	6030      	str	r0, [r6, #0]
 8012620:	6918      	ldr	r0, [r3, #16]
 8012622:	f7ff fdae 	bl	8012182 <__hi0bits>
 8012626:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801262a:	e7e1      	b.n	80125f0 <__d2b+0x62>

0801262c <_calloc_r>:
 801262c:	b538      	push	{r3, r4, r5, lr}
 801262e:	fb02 f401 	mul.w	r4, r2, r1
 8012632:	4621      	mov	r1, r4
 8012634:	f000 f856 	bl	80126e4 <_malloc_r>
 8012638:	4605      	mov	r5, r0
 801263a:	b118      	cbz	r0, 8012644 <_calloc_r+0x18>
 801263c:	4622      	mov	r2, r4
 801263e:	2100      	movs	r1, #0
 8012640:	f7fd fef2 	bl	8010428 <memset>
 8012644:	4628      	mov	r0, r5
 8012646:	bd38      	pop	{r3, r4, r5, pc}

08012648 <_free_r>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	4605      	mov	r5, r0
 801264c:	2900      	cmp	r1, #0
 801264e:	d045      	beq.n	80126dc <_free_r+0x94>
 8012650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012654:	1f0c      	subs	r4, r1, #4
 8012656:	2b00      	cmp	r3, #0
 8012658:	bfb8      	it	lt
 801265a:	18e4      	addlt	r4, r4, r3
 801265c:	f000 fc03 	bl	8012e66 <__malloc_lock>
 8012660:	4a1f      	ldr	r2, [pc, #124]	; (80126e0 <_free_r+0x98>)
 8012662:	6813      	ldr	r3, [r2, #0]
 8012664:	4610      	mov	r0, r2
 8012666:	b933      	cbnz	r3, 8012676 <_free_r+0x2e>
 8012668:	6063      	str	r3, [r4, #4]
 801266a:	6014      	str	r4, [r2, #0]
 801266c:	4628      	mov	r0, r5
 801266e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012672:	f000 bbf9 	b.w	8012e68 <__malloc_unlock>
 8012676:	42a3      	cmp	r3, r4
 8012678:	d90c      	bls.n	8012694 <_free_r+0x4c>
 801267a:	6821      	ldr	r1, [r4, #0]
 801267c:	1862      	adds	r2, r4, r1
 801267e:	4293      	cmp	r3, r2
 8012680:	bf04      	itt	eq
 8012682:	681a      	ldreq	r2, [r3, #0]
 8012684:	685b      	ldreq	r3, [r3, #4]
 8012686:	6063      	str	r3, [r4, #4]
 8012688:	bf04      	itt	eq
 801268a:	1852      	addeq	r2, r2, r1
 801268c:	6022      	streq	r2, [r4, #0]
 801268e:	6004      	str	r4, [r0, #0]
 8012690:	e7ec      	b.n	801266c <_free_r+0x24>
 8012692:	4613      	mov	r3, r2
 8012694:	685a      	ldr	r2, [r3, #4]
 8012696:	b10a      	cbz	r2, 801269c <_free_r+0x54>
 8012698:	42a2      	cmp	r2, r4
 801269a:	d9fa      	bls.n	8012692 <_free_r+0x4a>
 801269c:	6819      	ldr	r1, [r3, #0]
 801269e:	1858      	adds	r0, r3, r1
 80126a0:	42a0      	cmp	r0, r4
 80126a2:	d10b      	bne.n	80126bc <_free_r+0x74>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	4401      	add	r1, r0
 80126a8:	1858      	adds	r0, r3, r1
 80126aa:	4282      	cmp	r2, r0
 80126ac:	6019      	str	r1, [r3, #0]
 80126ae:	d1dd      	bne.n	801266c <_free_r+0x24>
 80126b0:	6810      	ldr	r0, [r2, #0]
 80126b2:	6852      	ldr	r2, [r2, #4]
 80126b4:	605a      	str	r2, [r3, #4]
 80126b6:	4401      	add	r1, r0
 80126b8:	6019      	str	r1, [r3, #0]
 80126ba:	e7d7      	b.n	801266c <_free_r+0x24>
 80126bc:	d902      	bls.n	80126c4 <_free_r+0x7c>
 80126be:	230c      	movs	r3, #12
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	e7d3      	b.n	801266c <_free_r+0x24>
 80126c4:	6820      	ldr	r0, [r4, #0]
 80126c6:	1821      	adds	r1, r4, r0
 80126c8:	428a      	cmp	r2, r1
 80126ca:	bf04      	itt	eq
 80126cc:	6811      	ldreq	r1, [r2, #0]
 80126ce:	6852      	ldreq	r2, [r2, #4]
 80126d0:	6062      	str	r2, [r4, #4]
 80126d2:	bf04      	itt	eq
 80126d4:	1809      	addeq	r1, r1, r0
 80126d6:	6021      	streq	r1, [r4, #0]
 80126d8:	605c      	str	r4, [r3, #4]
 80126da:	e7c7      	b.n	801266c <_free_r+0x24>
 80126dc:	bd38      	pop	{r3, r4, r5, pc}
 80126de:	bf00      	nop
 80126e0:	20002264 	.word	0x20002264

080126e4 <_malloc_r>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	1ccd      	adds	r5, r1, #3
 80126e8:	f025 0503 	bic.w	r5, r5, #3
 80126ec:	3508      	adds	r5, #8
 80126ee:	2d0c      	cmp	r5, #12
 80126f0:	bf38      	it	cc
 80126f2:	250c      	movcc	r5, #12
 80126f4:	2d00      	cmp	r5, #0
 80126f6:	4606      	mov	r6, r0
 80126f8:	db01      	blt.n	80126fe <_malloc_r+0x1a>
 80126fa:	42a9      	cmp	r1, r5
 80126fc:	d903      	bls.n	8012706 <_malloc_r+0x22>
 80126fe:	230c      	movs	r3, #12
 8012700:	6033      	str	r3, [r6, #0]
 8012702:	2000      	movs	r0, #0
 8012704:	bd70      	pop	{r4, r5, r6, pc}
 8012706:	f000 fbae 	bl	8012e66 <__malloc_lock>
 801270a:	4a21      	ldr	r2, [pc, #132]	; (8012790 <_malloc_r+0xac>)
 801270c:	6814      	ldr	r4, [r2, #0]
 801270e:	4621      	mov	r1, r4
 8012710:	b991      	cbnz	r1, 8012738 <_malloc_r+0x54>
 8012712:	4c20      	ldr	r4, [pc, #128]	; (8012794 <_malloc_r+0xb0>)
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	b91b      	cbnz	r3, 8012720 <_malloc_r+0x3c>
 8012718:	4630      	mov	r0, r6
 801271a:	f000 facf 	bl	8012cbc <_sbrk_r>
 801271e:	6020      	str	r0, [r4, #0]
 8012720:	4629      	mov	r1, r5
 8012722:	4630      	mov	r0, r6
 8012724:	f000 faca 	bl	8012cbc <_sbrk_r>
 8012728:	1c43      	adds	r3, r0, #1
 801272a:	d124      	bne.n	8012776 <_malloc_r+0x92>
 801272c:	230c      	movs	r3, #12
 801272e:	6033      	str	r3, [r6, #0]
 8012730:	4630      	mov	r0, r6
 8012732:	f000 fb99 	bl	8012e68 <__malloc_unlock>
 8012736:	e7e4      	b.n	8012702 <_malloc_r+0x1e>
 8012738:	680b      	ldr	r3, [r1, #0]
 801273a:	1b5b      	subs	r3, r3, r5
 801273c:	d418      	bmi.n	8012770 <_malloc_r+0x8c>
 801273e:	2b0b      	cmp	r3, #11
 8012740:	d90f      	bls.n	8012762 <_malloc_r+0x7e>
 8012742:	600b      	str	r3, [r1, #0]
 8012744:	50cd      	str	r5, [r1, r3]
 8012746:	18cc      	adds	r4, r1, r3
 8012748:	4630      	mov	r0, r6
 801274a:	f000 fb8d 	bl	8012e68 <__malloc_unlock>
 801274e:	f104 000b 	add.w	r0, r4, #11
 8012752:	1d23      	adds	r3, r4, #4
 8012754:	f020 0007 	bic.w	r0, r0, #7
 8012758:	1ac3      	subs	r3, r0, r3
 801275a:	d0d3      	beq.n	8012704 <_malloc_r+0x20>
 801275c:	425a      	negs	r2, r3
 801275e:	50e2      	str	r2, [r4, r3]
 8012760:	e7d0      	b.n	8012704 <_malloc_r+0x20>
 8012762:	428c      	cmp	r4, r1
 8012764:	684b      	ldr	r3, [r1, #4]
 8012766:	bf16      	itet	ne
 8012768:	6063      	strne	r3, [r4, #4]
 801276a:	6013      	streq	r3, [r2, #0]
 801276c:	460c      	movne	r4, r1
 801276e:	e7eb      	b.n	8012748 <_malloc_r+0x64>
 8012770:	460c      	mov	r4, r1
 8012772:	6849      	ldr	r1, [r1, #4]
 8012774:	e7cc      	b.n	8012710 <_malloc_r+0x2c>
 8012776:	1cc4      	adds	r4, r0, #3
 8012778:	f024 0403 	bic.w	r4, r4, #3
 801277c:	42a0      	cmp	r0, r4
 801277e:	d005      	beq.n	801278c <_malloc_r+0xa8>
 8012780:	1a21      	subs	r1, r4, r0
 8012782:	4630      	mov	r0, r6
 8012784:	f000 fa9a 	bl	8012cbc <_sbrk_r>
 8012788:	3001      	adds	r0, #1
 801278a:	d0cf      	beq.n	801272c <_malloc_r+0x48>
 801278c:	6025      	str	r5, [r4, #0]
 801278e:	e7db      	b.n	8012748 <_malloc_r+0x64>
 8012790:	20002264 	.word	0x20002264
 8012794:	20002268 	.word	0x20002268

08012798 <__ssputs_r>:
 8012798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801279c:	688e      	ldr	r6, [r1, #8]
 801279e:	429e      	cmp	r6, r3
 80127a0:	4682      	mov	sl, r0
 80127a2:	460c      	mov	r4, r1
 80127a4:	4690      	mov	r8, r2
 80127a6:	4699      	mov	r9, r3
 80127a8:	d837      	bhi.n	801281a <__ssputs_r+0x82>
 80127aa:	898a      	ldrh	r2, [r1, #12]
 80127ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80127b0:	d031      	beq.n	8012816 <__ssputs_r+0x7e>
 80127b2:	6825      	ldr	r5, [r4, #0]
 80127b4:	6909      	ldr	r1, [r1, #16]
 80127b6:	1a6f      	subs	r7, r5, r1
 80127b8:	6965      	ldr	r5, [r4, #20]
 80127ba:	2302      	movs	r3, #2
 80127bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80127c4:	f109 0301 	add.w	r3, r9, #1
 80127c8:	443b      	add	r3, r7
 80127ca:	429d      	cmp	r5, r3
 80127cc:	bf38      	it	cc
 80127ce:	461d      	movcc	r5, r3
 80127d0:	0553      	lsls	r3, r2, #21
 80127d2:	d530      	bpl.n	8012836 <__ssputs_r+0x9e>
 80127d4:	4629      	mov	r1, r5
 80127d6:	f7ff ff85 	bl	80126e4 <_malloc_r>
 80127da:	4606      	mov	r6, r0
 80127dc:	b950      	cbnz	r0, 80127f4 <__ssputs_r+0x5c>
 80127de:	230c      	movs	r3, #12
 80127e0:	f8ca 3000 	str.w	r3, [sl]
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127ea:	81a3      	strh	r3, [r4, #12]
 80127ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f4:	463a      	mov	r2, r7
 80127f6:	6921      	ldr	r1, [r4, #16]
 80127f8:	f7ff fc32 	bl	8012060 <memcpy>
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012806:	81a3      	strh	r3, [r4, #12]
 8012808:	6126      	str	r6, [r4, #16]
 801280a:	6165      	str	r5, [r4, #20]
 801280c:	443e      	add	r6, r7
 801280e:	1bed      	subs	r5, r5, r7
 8012810:	6026      	str	r6, [r4, #0]
 8012812:	60a5      	str	r5, [r4, #8]
 8012814:	464e      	mov	r6, r9
 8012816:	454e      	cmp	r6, r9
 8012818:	d900      	bls.n	801281c <__ssputs_r+0x84>
 801281a:	464e      	mov	r6, r9
 801281c:	4632      	mov	r2, r6
 801281e:	4641      	mov	r1, r8
 8012820:	6820      	ldr	r0, [r4, #0]
 8012822:	f000 fb07 	bl	8012e34 <memmove>
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	1b9b      	subs	r3, r3, r6
 801282a:	60a3      	str	r3, [r4, #8]
 801282c:	6823      	ldr	r3, [r4, #0]
 801282e:	441e      	add	r6, r3
 8012830:	6026      	str	r6, [r4, #0]
 8012832:	2000      	movs	r0, #0
 8012834:	e7dc      	b.n	80127f0 <__ssputs_r+0x58>
 8012836:	462a      	mov	r2, r5
 8012838:	f000 fb17 	bl	8012e6a <_realloc_r>
 801283c:	4606      	mov	r6, r0
 801283e:	2800      	cmp	r0, #0
 8012840:	d1e2      	bne.n	8012808 <__ssputs_r+0x70>
 8012842:	6921      	ldr	r1, [r4, #16]
 8012844:	4650      	mov	r0, sl
 8012846:	f7ff feff 	bl	8012648 <_free_r>
 801284a:	e7c8      	b.n	80127de <__ssputs_r+0x46>

0801284c <_svfiprintf_r>:
 801284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012850:	461d      	mov	r5, r3
 8012852:	898b      	ldrh	r3, [r1, #12]
 8012854:	061f      	lsls	r7, r3, #24
 8012856:	b09d      	sub	sp, #116	; 0x74
 8012858:	4680      	mov	r8, r0
 801285a:	460c      	mov	r4, r1
 801285c:	4616      	mov	r6, r2
 801285e:	d50f      	bpl.n	8012880 <_svfiprintf_r+0x34>
 8012860:	690b      	ldr	r3, [r1, #16]
 8012862:	b96b      	cbnz	r3, 8012880 <_svfiprintf_r+0x34>
 8012864:	2140      	movs	r1, #64	; 0x40
 8012866:	f7ff ff3d 	bl	80126e4 <_malloc_r>
 801286a:	6020      	str	r0, [r4, #0]
 801286c:	6120      	str	r0, [r4, #16]
 801286e:	b928      	cbnz	r0, 801287c <_svfiprintf_r+0x30>
 8012870:	230c      	movs	r3, #12
 8012872:	f8c8 3000 	str.w	r3, [r8]
 8012876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801287a:	e0c8      	b.n	8012a0e <_svfiprintf_r+0x1c2>
 801287c:	2340      	movs	r3, #64	; 0x40
 801287e:	6163      	str	r3, [r4, #20]
 8012880:	2300      	movs	r3, #0
 8012882:	9309      	str	r3, [sp, #36]	; 0x24
 8012884:	2320      	movs	r3, #32
 8012886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801288a:	2330      	movs	r3, #48	; 0x30
 801288c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012890:	9503      	str	r5, [sp, #12]
 8012892:	f04f 0b01 	mov.w	fp, #1
 8012896:	4637      	mov	r7, r6
 8012898:	463d      	mov	r5, r7
 801289a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801289e:	b10b      	cbz	r3, 80128a4 <_svfiprintf_r+0x58>
 80128a0:	2b25      	cmp	r3, #37	; 0x25
 80128a2:	d13e      	bne.n	8012922 <_svfiprintf_r+0xd6>
 80128a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80128a8:	d00b      	beq.n	80128c2 <_svfiprintf_r+0x76>
 80128aa:	4653      	mov	r3, sl
 80128ac:	4632      	mov	r2, r6
 80128ae:	4621      	mov	r1, r4
 80128b0:	4640      	mov	r0, r8
 80128b2:	f7ff ff71 	bl	8012798 <__ssputs_r>
 80128b6:	3001      	adds	r0, #1
 80128b8:	f000 80a4 	beq.w	8012a04 <_svfiprintf_r+0x1b8>
 80128bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128be:	4453      	add	r3, sl
 80128c0:	9309      	str	r3, [sp, #36]	; 0x24
 80128c2:	783b      	ldrb	r3, [r7, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 809d 	beq.w	8012a04 <_svfiprintf_r+0x1b8>
 80128ca:	2300      	movs	r3, #0
 80128cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128d4:	9304      	str	r3, [sp, #16]
 80128d6:	9307      	str	r3, [sp, #28]
 80128d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128dc:	931a      	str	r3, [sp, #104]	; 0x68
 80128de:	462f      	mov	r7, r5
 80128e0:	2205      	movs	r2, #5
 80128e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80128e6:	4850      	ldr	r0, [pc, #320]	; (8012a28 <_svfiprintf_r+0x1dc>)
 80128e8:	f7ed fca2 	bl	8000230 <memchr>
 80128ec:	9b04      	ldr	r3, [sp, #16]
 80128ee:	b9d0      	cbnz	r0, 8012926 <_svfiprintf_r+0xda>
 80128f0:	06d9      	lsls	r1, r3, #27
 80128f2:	bf44      	itt	mi
 80128f4:	2220      	movmi	r2, #32
 80128f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128fa:	071a      	lsls	r2, r3, #28
 80128fc:	bf44      	itt	mi
 80128fe:	222b      	movmi	r2, #43	; 0x2b
 8012900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012904:	782a      	ldrb	r2, [r5, #0]
 8012906:	2a2a      	cmp	r2, #42	; 0x2a
 8012908:	d015      	beq.n	8012936 <_svfiprintf_r+0xea>
 801290a:	9a07      	ldr	r2, [sp, #28]
 801290c:	462f      	mov	r7, r5
 801290e:	2000      	movs	r0, #0
 8012910:	250a      	movs	r5, #10
 8012912:	4639      	mov	r1, r7
 8012914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012918:	3b30      	subs	r3, #48	; 0x30
 801291a:	2b09      	cmp	r3, #9
 801291c:	d94d      	bls.n	80129ba <_svfiprintf_r+0x16e>
 801291e:	b1b8      	cbz	r0, 8012950 <_svfiprintf_r+0x104>
 8012920:	e00f      	b.n	8012942 <_svfiprintf_r+0xf6>
 8012922:	462f      	mov	r7, r5
 8012924:	e7b8      	b.n	8012898 <_svfiprintf_r+0x4c>
 8012926:	4a40      	ldr	r2, [pc, #256]	; (8012a28 <_svfiprintf_r+0x1dc>)
 8012928:	1a80      	subs	r0, r0, r2
 801292a:	fa0b f000 	lsl.w	r0, fp, r0
 801292e:	4318      	orrs	r0, r3
 8012930:	9004      	str	r0, [sp, #16]
 8012932:	463d      	mov	r5, r7
 8012934:	e7d3      	b.n	80128de <_svfiprintf_r+0x92>
 8012936:	9a03      	ldr	r2, [sp, #12]
 8012938:	1d11      	adds	r1, r2, #4
 801293a:	6812      	ldr	r2, [r2, #0]
 801293c:	9103      	str	r1, [sp, #12]
 801293e:	2a00      	cmp	r2, #0
 8012940:	db01      	blt.n	8012946 <_svfiprintf_r+0xfa>
 8012942:	9207      	str	r2, [sp, #28]
 8012944:	e004      	b.n	8012950 <_svfiprintf_r+0x104>
 8012946:	4252      	negs	r2, r2
 8012948:	f043 0302 	orr.w	r3, r3, #2
 801294c:	9207      	str	r2, [sp, #28]
 801294e:	9304      	str	r3, [sp, #16]
 8012950:	783b      	ldrb	r3, [r7, #0]
 8012952:	2b2e      	cmp	r3, #46	; 0x2e
 8012954:	d10c      	bne.n	8012970 <_svfiprintf_r+0x124>
 8012956:	787b      	ldrb	r3, [r7, #1]
 8012958:	2b2a      	cmp	r3, #42	; 0x2a
 801295a:	d133      	bne.n	80129c4 <_svfiprintf_r+0x178>
 801295c:	9b03      	ldr	r3, [sp, #12]
 801295e:	1d1a      	adds	r2, r3, #4
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	9203      	str	r2, [sp, #12]
 8012964:	2b00      	cmp	r3, #0
 8012966:	bfb8      	it	lt
 8012968:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801296c:	3702      	adds	r7, #2
 801296e:	9305      	str	r3, [sp, #20]
 8012970:	4d2e      	ldr	r5, [pc, #184]	; (8012a2c <_svfiprintf_r+0x1e0>)
 8012972:	7839      	ldrb	r1, [r7, #0]
 8012974:	2203      	movs	r2, #3
 8012976:	4628      	mov	r0, r5
 8012978:	f7ed fc5a 	bl	8000230 <memchr>
 801297c:	b138      	cbz	r0, 801298e <_svfiprintf_r+0x142>
 801297e:	2340      	movs	r3, #64	; 0x40
 8012980:	1b40      	subs	r0, r0, r5
 8012982:	fa03 f000 	lsl.w	r0, r3, r0
 8012986:	9b04      	ldr	r3, [sp, #16]
 8012988:	4303      	orrs	r3, r0
 801298a:	3701      	adds	r7, #1
 801298c:	9304      	str	r3, [sp, #16]
 801298e:	7839      	ldrb	r1, [r7, #0]
 8012990:	4827      	ldr	r0, [pc, #156]	; (8012a30 <_svfiprintf_r+0x1e4>)
 8012992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012996:	2206      	movs	r2, #6
 8012998:	1c7e      	adds	r6, r7, #1
 801299a:	f7ed fc49 	bl	8000230 <memchr>
 801299e:	2800      	cmp	r0, #0
 80129a0:	d038      	beq.n	8012a14 <_svfiprintf_r+0x1c8>
 80129a2:	4b24      	ldr	r3, [pc, #144]	; (8012a34 <_svfiprintf_r+0x1e8>)
 80129a4:	bb13      	cbnz	r3, 80129ec <_svfiprintf_r+0x1a0>
 80129a6:	9b03      	ldr	r3, [sp, #12]
 80129a8:	3307      	adds	r3, #7
 80129aa:	f023 0307 	bic.w	r3, r3, #7
 80129ae:	3308      	adds	r3, #8
 80129b0:	9303      	str	r3, [sp, #12]
 80129b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b4:	444b      	add	r3, r9
 80129b6:	9309      	str	r3, [sp, #36]	; 0x24
 80129b8:	e76d      	b.n	8012896 <_svfiprintf_r+0x4a>
 80129ba:	fb05 3202 	mla	r2, r5, r2, r3
 80129be:	2001      	movs	r0, #1
 80129c0:	460f      	mov	r7, r1
 80129c2:	e7a6      	b.n	8012912 <_svfiprintf_r+0xc6>
 80129c4:	2300      	movs	r3, #0
 80129c6:	3701      	adds	r7, #1
 80129c8:	9305      	str	r3, [sp, #20]
 80129ca:	4619      	mov	r1, r3
 80129cc:	250a      	movs	r5, #10
 80129ce:	4638      	mov	r0, r7
 80129d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129d4:	3a30      	subs	r2, #48	; 0x30
 80129d6:	2a09      	cmp	r2, #9
 80129d8:	d903      	bls.n	80129e2 <_svfiprintf_r+0x196>
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d0c8      	beq.n	8012970 <_svfiprintf_r+0x124>
 80129de:	9105      	str	r1, [sp, #20]
 80129e0:	e7c6      	b.n	8012970 <_svfiprintf_r+0x124>
 80129e2:	fb05 2101 	mla	r1, r5, r1, r2
 80129e6:	2301      	movs	r3, #1
 80129e8:	4607      	mov	r7, r0
 80129ea:	e7f0      	b.n	80129ce <_svfiprintf_r+0x182>
 80129ec:	ab03      	add	r3, sp, #12
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	4622      	mov	r2, r4
 80129f2:	4b11      	ldr	r3, [pc, #68]	; (8012a38 <_svfiprintf_r+0x1ec>)
 80129f4:	a904      	add	r1, sp, #16
 80129f6:	4640      	mov	r0, r8
 80129f8:	f7fd fdb2 	bl	8010560 <_printf_float>
 80129fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012a00:	4681      	mov	r9, r0
 8012a02:	d1d6      	bne.n	80129b2 <_svfiprintf_r+0x166>
 8012a04:	89a3      	ldrh	r3, [r4, #12]
 8012a06:	065b      	lsls	r3, r3, #25
 8012a08:	f53f af35 	bmi.w	8012876 <_svfiprintf_r+0x2a>
 8012a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a0e:	b01d      	add	sp, #116	; 0x74
 8012a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a14:	ab03      	add	r3, sp, #12
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	4622      	mov	r2, r4
 8012a1a:	4b07      	ldr	r3, [pc, #28]	; (8012a38 <_svfiprintf_r+0x1ec>)
 8012a1c:	a904      	add	r1, sp, #16
 8012a1e:	4640      	mov	r0, r8
 8012a20:	f7fe f854 	bl	8010acc <_printf_i>
 8012a24:	e7ea      	b.n	80129fc <_svfiprintf_r+0x1b0>
 8012a26:	bf00      	nop
 8012a28:	080157e4 	.word	0x080157e4
 8012a2c:	080157ea 	.word	0x080157ea
 8012a30:	080157ee 	.word	0x080157ee
 8012a34:	08010561 	.word	0x08010561
 8012a38:	08012799 	.word	0x08012799

08012a3c <__sfputc_r>:
 8012a3c:	6893      	ldr	r3, [r2, #8]
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	b410      	push	{r4}
 8012a44:	6093      	str	r3, [r2, #8]
 8012a46:	da08      	bge.n	8012a5a <__sfputc_r+0x1e>
 8012a48:	6994      	ldr	r4, [r2, #24]
 8012a4a:	42a3      	cmp	r3, r4
 8012a4c:	db01      	blt.n	8012a52 <__sfputc_r+0x16>
 8012a4e:	290a      	cmp	r1, #10
 8012a50:	d103      	bne.n	8012a5a <__sfputc_r+0x1e>
 8012a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a56:	f7fe ba0b 	b.w	8010e70 <__swbuf_r>
 8012a5a:	6813      	ldr	r3, [r2, #0]
 8012a5c:	1c58      	adds	r0, r3, #1
 8012a5e:	6010      	str	r0, [r2, #0]
 8012a60:	7019      	strb	r1, [r3, #0]
 8012a62:	4608      	mov	r0, r1
 8012a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <__sfputs_r>:
 8012a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	4614      	mov	r4, r2
 8012a72:	18d5      	adds	r5, r2, r3
 8012a74:	42ac      	cmp	r4, r5
 8012a76:	d101      	bne.n	8012a7c <__sfputs_r+0x12>
 8012a78:	2000      	movs	r0, #0
 8012a7a:	e007      	b.n	8012a8c <__sfputs_r+0x22>
 8012a7c:	463a      	mov	r2, r7
 8012a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a82:	4630      	mov	r0, r6
 8012a84:	f7ff ffda 	bl	8012a3c <__sfputc_r>
 8012a88:	1c43      	adds	r3, r0, #1
 8012a8a:	d1f3      	bne.n	8012a74 <__sfputs_r+0xa>
 8012a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a90 <_vfiprintf_r>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	460c      	mov	r4, r1
 8012a96:	b09d      	sub	sp, #116	; 0x74
 8012a98:	4617      	mov	r7, r2
 8012a9a:	461d      	mov	r5, r3
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	b118      	cbz	r0, 8012aa8 <_vfiprintf_r+0x18>
 8012aa0:	6983      	ldr	r3, [r0, #24]
 8012aa2:	b90b      	cbnz	r3, 8012aa8 <_vfiprintf_r+0x18>
 8012aa4:	f7ff f9d8 	bl	8011e58 <__sinit>
 8012aa8:	4b7c      	ldr	r3, [pc, #496]	; (8012c9c <_vfiprintf_r+0x20c>)
 8012aaa:	429c      	cmp	r4, r3
 8012aac:	d158      	bne.n	8012b60 <_vfiprintf_r+0xd0>
 8012aae:	6874      	ldr	r4, [r6, #4]
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	0718      	lsls	r0, r3, #28
 8012ab4:	d55e      	bpl.n	8012b74 <_vfiprintf_r+0xe4>
 8012ab6:	6923      	ldr	r3, [r4, #16]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d05b      	beq.n	8012b74 <_vfiprintf_r+0xe4>
 8012abc:	2300      	movs	r3, #0
 8012abe:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac0:	2320      	movs	r3, #32
 8012ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ac6:	2330      	movs	r3, #48	; 0x30
 8012ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012acc:	9503      	str	r5, [sp, #12]
 8012ace:	f04f 0b01 	mov.w	fp, #1
 8012ad2:	46b8      	mov	r8, r7
 8012ad4:	4645      	mov	r5, r8
 8012ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012ada:	b10b      	cbz	r3, 8012ae0 <_vfiprintf_r+0x50>
 8012adc:	2b25      	cmp	r3, #37	; 0x25
 8012ade:	d154      	bne.n	8012b8a <_vfiprintf_r+0xfa>
 8012ae0:	ebb8 0a07 	subs.w	sl, r8, r7
 8012ae4:	d00b      	beq.n	8012afe <_vfiprintf_r+0x6e>
 8012ae6:	4653      	mov	r3, sl
 8012ae8:	463a      	mov	r2, r7
 8012aea:	4621      	mov	r1, r4
 8012aec:	4630      	mov	r0, r6
 8012aee:	f7ff ffbc 	bl	8012a6a <__sfputs_r>
 8012af2:	3001      	adds	r0, #1
 8012af4:	f000 80c2 	beq.w	8012c7c <_vfiprintf_r+0x1ec>
 8012af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012afa:	4453      	add	r3, sl
 8012afc:	9309      	str	r3, [sp, #36]	; 0x24
 8012afe:	f898 3000 	ldrb.w	r3, [r8]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f000 80ba 	beq.w	8012c7c <_vfiprintf_r+0x1ec>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b12:	9304      	str	r3, [sp, #16]
 8012b14:	9307      	str	r3, [sp, #28]
 8012b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8012b1c:	46a8      	mov	r8, r5
 8012b1e:	2205      	movs	r2, #5
 8012b20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012b24:	485e      	ldr	r0, [pc, #376]	; (8012ca0 <_vfiprintf_r+0x210>)
 8012b26:	f7ed fb83 	bl	8000230 <memchr>
 8012b2a:	9b04      	ldr	r3, [sp, #16]
 8012b2c:	bb78      	cbnz	r0, 8012b8e <_vfiprintf_r+0xfe>
 8012b2e:	06d9      	lsls	r1, r3, #27
 8012b30:	bf44      	itt	mi
 8012b32:	2220      	movmi	r2, #32
 8012b34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b38:	071a      	lsls	r2, r3, #28
 8012b3a:	bf44      	itt	mi
 8012b3c:	222b      	movmi	r2, #43	; 0x2b
 8012b3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b42:	782a      	ldrb	r2, [r5, #0]
 8012b44:	2a2a      	cmp	r2, #42	; 0x2a
 8012b46:	d02a      	beq.n	8012b9e <_vfiprintf_r+0x10e>
 8012b48:	9a07      	ldr	r2, [sp, #28]
 8012b4a:	46a8      	mov	r8, r5
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	250a      	movs	r5, #10
 8012b50:	4641      	mov	r1, r8
 8012b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b56:	3b30      	subs	r3, #48	; 0x30
 8012b58:	2b09      	cmp	r3, #9
 8012b5a:	d969      	bls.n	8012c30 <_vfiprintf_r+0x1a0>
 8012b5c:	b360      	cbz	r0, 8012bb8 <_vfiprintf_r+0x128>
 8012b5e:	e024      	b.n	8012baa <_vfiprintf_r+0x11a>
 8012b60:	4b50      	ldr	r3, [pc, #320]	; (8012ca4 <_vfiprintf_r+0x214>)
 8012b62:	429c      	cmp	r4, r3
 8012b64:	d101      	bne.n	8012b6a <_vfiprintf_r+0xda>
 8012b66:	68b4      	ldr	r4, [r6, #8]
 8012b68:	e7a2      	b.n	8012ab0 <_vfiprintf_r+0x20>
 8012b6a:	4b4f      	ldr	r3, [pc, #316]	; (8012ca8 <_vfiprintf_r+0x218>)
 8012b6c:	429c      	cmp	r4, r3
 8012b6e:	bf08      	it	eq
 8012b70:	68f4      	ldreq	r4, [r6, #12]
 8012b72:	e79d      	b.n	8012ab0 <_vfiprintf_r+0x20>
 8012b74:	4621      	mov	r1, r4
 8012b76:	4630      	mov	r0, r6
 8012b78:	f7fe f9cc 	bl	8010f14 <__swsetup_r>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d09d      	beq.n	8012abc <_vfiprintf_r+0x2c>
 8012b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b84:	b01d      	add	sp, #116	; 0x74
 8012b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8a:	46a8      	mov	r8, r5
 8012b8c:	e7a2      	b.n	8012ad4 <_vfiprintf_r+0x44>
 8012b8e:	4a44      	ldr	r2, [pc, #272]	; (8012ca0 <_vfiprintf_r+0x210>)
 8012b90:	1a80      	subs	r0, r0, r2
 8012b92:	fa0b f000 	lsl.w	r0, fp, r0
 8012b96:	4318      	orrs	r0, r3
 8012b98:	9004      	str	r0, [sp, #16]
 8012b9a:	4645      	mov	r5, r8
 8012b9c:	e7be      	b.n	8012b1c <_vfiprintf_r+0x8c>
 8012b9e:	9a03      	ldr	r2, [sp, #12]
 8012ba0:	1d11      	adds	r1, r2, #4
 8012ba2:	6812      	ldr	r2, [r2, #0]
 8012ba4:	9103      	str	r1, [sp, #12]
 8012ba6:	2a00      	cmp	r2, #0
 8012ba8:	db01      	blt.n	8012bae <_vfiprintf_r+0x11e>
 8012baa:	9207      	str	r2, [sp, #28]
 8012bac:	e004      	b.n	8012bb8 <_vfiprintf_r+0x128>
 8012bae:	4252      	negs	r2, r2
 8012bb0:	f043 0302 	orr.w	r3, r3, #2
 8012bb4:	9207      	str	r2, [sp, #28]
 8012bb6:	9304      	str	r3, [sp, #16]
 8012bb8:	f898 3000 	ldrb.w	r3, [r8]
 8012bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8012bbe:	d10e      	bne.n	8012bde <_vfiprintf_r+0x14e>
 8012bc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8012bc6:	d138      	bne.n	8012c3a <_vfiprintf_r+0x1aa>
 8012bc8:	9b03      	ldr	r3, [sp, #12]
 8012bca:	1d1a      	adds	r2, r3, #4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	9203      	str	r2, [sp, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	bfb8      	it	lt
 8012bd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012bd8:	f108 0802 	add.w	r8, r8, #2
 8012bdc:	9305      	str	r3, [sp, #20]
 8012bde:	4d33      	ldr	r5, [pc, #204]	; (8012cac <_vfiprintf_r+0x21c>)
 8012be0:	f898 1000 	ldrb.w	r1, [r8]
 8012be4:	2203      	movs	r2, #3
 8012be6:	4628      	mov	r0, r5
 8012be8:	f7ed fb22 	bl	8000230 <memchr>
 8012bec:	b140      	cbz	r0, 8012c00 <_vfiprintf_r+0x170>
 8012bee:	2340      	movs	r3, #64	; 0x40
 8012bf0:	1b40      	subs	r0, r0, r5
 8012bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8012bf6:	9b04      	ldr	r3, [sp, #16]
 8012bf8:	4303      	orrs	r3, r0
 8012bfa:	f108 0801 	add.w	r8, r8, #1
 8012bfe:	9304      	str	r3, [sp, #16]
 8012c00:	f898 1000 	ldrb.w	r1, [r8]
 8012c04:	482a      	ldr	r0, [pc, #168]	; (8012cb0 <_vfiprintf_r+0x220>)
 8012c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c0a:	2206      	movs	r2, #6
 8012c0c:	f108 0701 	add.w	r7, r8, #1
 8012c10:	f7ed fb0e 	bl	8000230 <memchr>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	d037      	beq.n	8012c88 <_vfiprintf_r+0x1f8>
 8012c18:	4b26      	ldr	r3, [pc, #152]	; (8012cb4 <_vfiprintf_r+0x224>)
 8012c1a:	bb1b      	cbnz	r3, 8012c64 <_vfiprintf_r+0x1d4>
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	3307      	adds	r3, #7
 8012c20:	f023 0307 	bic.w	r3, r3, #7
 8012c24:	3308      	adds	r3, #8
 8012c26:	9303      	str	r3, [sp, #12]
 8012c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2a:	444b      	add	r3, r9
 8012c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c2e:	e750      	b.n	8012ad2 <_vfiprintf_r+0x42>
 8012c30:	fb05 3202 	mla	r2, r5, r2, r3
 8012c34:	2001      	movs	r0, #1
 8012c36:	4688      	mov	r8, r1
 8012c38:	e78a      	b.n	8012b50 <_vfiprintf_r+0xc0>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	f108 0801 	add.w	r8, r8, #1
 8012c40:	9305      	str	r3, [sp, #20]
 8012c42:	4619      	mov	r1, r3
 8012c44:	250a      	movs	r5, #10
 8012c46:	4640      	mov	r0, r8
 8012c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c4c:	3a30      	subs	r2, #48	; 0x30
 8012c4e:	2a09      	cmp	r2, #9
 8012c50:	d903      	bls.n	8012c5a <_vfiprintf_r+0x1ca>
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d0c3      	beq.n	8012bde <_vfiprintf_r+0x14e>
 8012c56:	9105      	str	r1, [sp, #20]
 8012c58:	e7c1      	b.n	8012bde <_vfiprintf_r+0x14e>
 8012c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8012c5e:	2301      	movs	r3, #1
 8012c60:	4680      	mov	r8, r0
 8012c62:	e7f0      	b.n	8012c46 <_vfiprintf_r+0x1b6>
 8012c64:	ab03      	add	r3, sp, #12
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	4622      	mov	r2, r4
 8012c6a:	4b13      	ldr	r3, [pc, #76]	; (8012cb8 <_vfiprintf_r+0x228>)
 8012c6c:	a904      	add	r1, sp, #16
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7fd fc76 	bl	8010560 <_printf_float>
 8012c74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012c78:	4681      	mov	r9, r0
 8012c7a:	d1d5      	bne.n	8012c28 <_vfiprintf_r+0x198>
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	065b      	lsls	r3, r3, #25
 8012c80:	f53f af7e 	bmi.w	8012b80 <_vfiprintf_r+0xf0>
 8012c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c86:	e77d      	b.n	8012b84 <_vfiprintf_r+0xf4>
 8012c88:	ab03      	add	r3, sp, #12
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	4b0a      	ldr	r3, [pc, #40]	; (8012cb8 <_vfiprintf_r+0x228>)
 8012c90:	a904      	add	r1, sp, #16
 8012c92:	4630      	mov	r0, r6
 8012c94:	f7fd ff1a 	bl	8010acc <_printf_i>
 8012c98:	e7ec      	b.n	8012c74 <_vfiprintf_r+0x1e4>
 8012c9a:	bf00      	nop
 8012c9c:	080156a8 	.word	0x080156a8
 8012ca0:	080157e4 	.word	0x080157e4
 8012ca4:	080156c8 	.word	0x080156c8
 8012ca8:	08015688 	.word	0x08015688
 8012cac:	080157ea 	.word	0x080157ea
 8012cb0:	080157ee 	.word	0x080157ee
 8012cb4:	08010561 	.word	0x08010561
 8012cb8:	08012a6b 	.word	0x08012a6b

08012cbc <_sbrk_r>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4c06      	ldr	r4, [pc, #24]	; (8012cd8 <_sbrk_r+0x1c>)
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	4608      	mov	r0, r1
 8012cc6:	6023      	str	r3, [r4, #0]
 8012cc8:	f7f5 faa8 	bl	800821c <_sbrk>
 8012ccc:	1c43      	adds	r3, r0, #1
 8012cce:	d102      	bne.n	8012cd6 <_sbrk_r+0x1a>
 8012cd0:	6823      	ldr	r3, [r4, #0]
 8012cd2:	b103      	cbz	r3, 8012cd6 <_sbrk_r+0x1a>
 8012cd4:	602b      	str	r3, [r5, #0]
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	20002cf0 	.word	0x20002cf0

08012cdc <__sread>:
 8012cdc:	b510      	push	{r4, lr}
 8012cde:	460c      	mov	r4, r1
 8012ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ce4:	f000 f8e8 	bl	8012eb8 <_read_r>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	bfab      	itete	ge
 8012cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012cee:	89a3      	ldrhlt	r3, [r4, #12]
 8012cf0:	181b      	addge	r3, r3, r0
 8012cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012cf6:	bfac      	ite	ge
 8012cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8012cfa:	81a3      	strhlt	r3, [r4, #12]
 8012cfc:	bd10      	pop	{r4, pc}

08012cfe <__swrite>:
 8012cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d02:	461f      	mov	r7, r3
 8012d04:	898b      	ldrh	r3, [r1, #12]
 8012d06:	05db      	lsls	r3, r3, #23
 8012d08:	4605      	mov	r5, r0
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	4616      	mov	r6, r2
 8012d0e:	d505      	bpl.n	8012d1c <__swrite+0x1e>
 8012d10:	2302      	movs	r3, #2
 8012d12:	2200      	movs	r2, #0
 8012d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d18:	f000 f868 	bl	8012dec <_lseek_r>
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d26:	81a3      	strh	r3, [r4, #12]
 8012d28:	4632      	mov	r2, r6
 8012d2a:	463b      	mov	r3, r7
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d32:	f000 b817 	b.w	8012d64 <_write_r>

08012d36 <__sseek>:
 8012d36:	b510      	push	{r4, lr}
 8012d38:	460c      	mov	r4, r1
 8012d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d3e:	f000 f855 	bl	8012dec <_lseek_r>
 8012d42:	1c43      	adds	r3, r0, #1
 8012d44:	89a3      	ldrh	r3, [r4, #12]
 8012d46:	bf15      	itete	ne
 8012d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d52:	81a3      	strheq	r3, [r4, #12]
 8012d54:	bf18      	it	ne
 8012d56:	81a3      	strhne	r3, [r4, #12]
 8012d58:	bd10      	pop	{r4, pc}

08012d5a <__sclose>:
 8012d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d5e:	f000 b813 	b.w	8012d88 <_close_r>
	...

08012d64 <_write_r>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	4c07      	ldr	r4, [pc, #28]	; (8012d84 <_write_r+0x20>)
 8012d68:	4605      	mov	r5, r0
 8012d6a:	4608      	mov	r0, r1
 8012d6c:	4611      	mov	r1, r2
 8012d6e:	2200      	movs	r2, #0
 8012d70:	6022      	str	r2, [r4, #0]
 8012d72:	461a      	mov	r2, r3
 8012d74:	f7f4 ff19 	bl	8007baa <_write>
 8012d78:	1c43      	adds	r3, r0, #1
 8012d7a:	d102      	bne.n	8012d82 <_write_r+0x1e>
 8012d7c:	6823      	ldr	r3, [r4, #0]
 8012d7e:	b103      	cbz	r3, 8012d82 <_write_r+0x1e>
 8012d80:	602b      	str	r3, [r5, #0]
 8012d82:	bd38      	pop	{r3, r4, r5, pc}
 8012d84:	20002cf0 	.word	0x20002cf0

08012d88 <_close_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	4c06      	ldr	r4, [pc, #24]	; (8012da4 <_close_r+0x1c>)
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	4605      	mov	r5, r0
 8012d90:	4608      	mov	r0, r1
 8012d92:	6023      	str	r3, [r4, #0]
 8012d94:	f7f5 fa0d 	bl	80081b2 <_close>
 8012d98:	1c43      	adds	r3, r0, #1
 8012d9a:	d102      	bne.n	8012da2 <_close_r+0x1a>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	b103      	cbz	r3, 8012da2 <_close_r+0x1a>
 8012da0:	602b      	str	r3, [r5, #0]
 8012da2:	bd38      	pop	{r3, r4, r5, pc}
 8012da4:	20002cf0 	.word	0x20002cf0

08012da8 <_fstat_r>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	4c07      	ldr	r4, [pc, #28]	; (8012dc8 <_fstat_r+0x20>)
 8012dac:	2300      	movs	r3, #0
 8012dae:	4605      	mov	r5, r0
 8012db0:	4608      	mov	r0, r1
 8012db2:	4611      	mov	r1, r2
 8012db4:	6023      	str	r3, [r4, #0]
 8012db6:	f7f5 fa08 	bl	80081ca <_fstat>
 8012dba:	1c43      	adds	r3, r0, #1
 8012dbc:	d102      	bne.n	8012dc4 <_fstat_r+0x1c>
 8012dbe:	6823      	ldr	r3, [r4, #0]
 8012dc0:	b103      	cbz	r3, 8012dc4 <_fstat_r+0x1c>
 8012dc2:	602b      	str	r3, [r5, #0]
 8012dc4:	bd38      	pop	{r3, r4, r5, pc}
 8012dc6:	bf00      	nop
 8012dc8:	20002cf0 	.word	0x20002cf0

08012dcc <_isatty_r>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4c06      	ldr	r4, [pc, #24]	; (8012de8 <_isatty_r+0x1c>)
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	4608      	mov	r0, r1
 8012dd6:	6023      	str	r3, [r4, #0]
 8012dd8:	f7f5 fa07 	bl	80081ea <_isatty>
 8012ddc:	1c43      	adds	r3, r0, #1
 8012dde:	d102      	bne.n	8012de6 <_isatty_r+0x1a>
 8012de0:	6823      	ldr	r3, [r4, #0]
 8012de2:	b103      	cbz	r3, 8012de6 <_isatty_r+0x1a>
 8012de4:	602b      	str	r3, [r5, #0]
 8012de6:	bd38      	pop	{r3, r4, r5, pc}
 8012de8:	20002cf0 	.word	0x20002cf0

08012dec <_lseek_r>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	4c07      	ldr	r4, [pc, #28]	; (8012e0c <_lseek_r+0x20>)
 8012df0:	4605      	mov	r5, r0
 8012df2:	4608      	mov	r0, r1
 8012df4:	4611      	mov	r1, r2
 8012df6:	2200      	movs	r2, #0
 8012df8:	6022      	str	r2, [r4, #0]
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	f7f5 fa00 	bl	8008200 <_lseek>
 8012e00:	1c43      	adds	r3, r0, #1
 8012e02:	d102      	bne.n	8012e0a <_lseek_r+0x1e>
 8012e04:	6823      	ldr	r3, [r4, #0]
 8012e06:	b103      	cbz	r3, 8012e0a <_lseek_r+0x1e>
 8012e08:	602b      	str	r3, [r5, #0]
 8012e0a:	bd38      	pop	{r3, r4, r5, pc}
 8012e0c:	20002cf0 	.word	0x20002cf0

08012e10 <__ascii_mbtowc>:
 8012e10:	b082      	sub	sp, #8
 8012e12:	b901      	cbnz	r1, 8012e16 <__ascii_mbtowc+0x6>
 8012e14:	a901      	add	r1, sp, #4
 8012e16:	b142      	cbz	r2, 8012e2a <__ascii_mbtowc+0x1a>
 8012e18:	b14b      	cbz	r3, 8012e2e <__ascii_mbtowc+0x1e>
 8012e1a:	7813      	ldrb	r3, [r2, #0]
 8012e1c:	600b      	str	r3, [r1, #0]
 8012e1e:	7812      	ldrb	r2, [r2, #0]
 8012e20:	1c10      	adds	r0, r2, #0
 8012e22:	bf18      	it	ne
 8012e24:	2001      	movne	r0, #1
 8012e26:	b002      	add	sp, #8
 8012e28:	4770      	bx	lr
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	e7fb      	b.n	8012e26 <__ascii_mbtowc+0x16>
 8012e2e:	f06f 0001 	mvn.w	r0, #1
 8012e32:	e7f8      	b.n	8012e26 <__ascii_mbtowc+0x16>

08012e34 <memmove>:
 8012e34:	4288      	cmp	r0, r1
 8012e36:	b510      	push	{r4, lr}
 8012e38:	eb01 0302 	add.w	r3, r1, r2
 8012e3c:	d807      	bhi.n	8012e4e <memmove+0x1a>
 8012e3e:	1e42      	subs	r2, r0, #1
 8012e40:	4299      	cmp	r1, r3
 8012e42:	d00a      	beq.n	8012e5a <memmove+0x26>
 8012e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012e4c:	e7f8      	b.n	8012e40 <memmove+0xc>
 8012e4e:	4283      	cmp	r3, r0
 8012e50:	d9f5      	bls.n	8012e3e <memmove+0xa>
 8012e52:	1881      	adds	r1, r0, r2
 8012e54:	1ad2      	subs	r2, r2, r3
 8012e56:	42d3      	cmn	r3, r2
 8012e58:	d100      	bne.n	8012e5c <memmove+0x28>
 8012e5a:	bd10      	pop	{r4, pc}
 8012e5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012e64:	e7f7      	b.n	8012e56 <memmove+0x22>

08012e66 <__malloc_lock>:
 8012e66:	4770      	bx	lr

08012e68 <__malloc_unlock>:
 8012e68:	4770      	bx	lr

08012e6a <_realloc_r>:
 8012e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6c:	4607      	mov	r7, r0
 8012e6e:	4614      	mov	r4, r2
 8012e70:	460e      	mov	r6, r1
 8012e72:	b921      	cbnz	r1, 8012e7e <_realloc_r+0x14>
 8012e74:	4611      	mov	r1, r2
 8012e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e7a:	f7ff bc33 	b.w	80126e4 <_malloc_r>
 8012e7e:	b922      	cbnz	r2, 8012e8a <_realloc_r+0x20>
 8012e80:	f7ff fbe2 	bl	8012648 <_free_r>
 8012e84:	4625      	mov	r5, r4
 8012e86:	4628      	mov	r0, r5
 8012e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e8a:	f000 f834 	bl	8012ef6 <_malloc_usable_size_r>
 8012e8e:	42a0      	cmp	r0, r4
 8012e90:	d20f      	bcs.n	8012eb2 <_realloc_r+0x48>
 8012e92:	4621      	mov	r1, r4
 8012e94:	4638      	mov	r0, r7
 8012e96:	f7ff fc25 	bl	80126e4 <_malloc_r>
 8012e9a:	4605      	mov	r5, r0
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d0f2      	beq.n	8012e86 <_realloc_r+0x1c>
 8012ea0:	4631      	mov	r1, r6
 8012ea2:	4622      	mov	r2, r4
 8012ea4:	f7ff f8dc 	bl	8012060 <memcpy>
 8012ea8:	4631      	mov	r1, r6
 8012eaa:	4638      	mov	r0, r7
 8012eac:	f7ff fbcc 	bl	8012648 <_free_r>
 8012eb0:	e7e9      	b.n	8012e86 <_realloc_r+0x1c>
 8012eb2:	4635      	mov	r5, r6
 8012eb4:	e7e7      	b.n	8012e86 <_realloc_r+0x1c>
	...

08012eb8 <_read_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	4c07      	ldr	r4, [pc, #28]	; (8012ed8 <_read_r+0x20>)
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	4608      	mov	r0, r1
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	6022      	str	r2, [r4, #0]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f7f5 f956 	bl	8008178 <_read>
 8012ecc:	1c43      	adds	r3, r0, #1
 8012ece:	d102      	bne.n	8012ed6 <_read_r+0x1e>
 8012ed0:	6823      	ldr	r3, [r4, #0]
 8012ed2:	b103      	cbz	r3, 8012ed6 <_read_r+0x1e>
 8012ed4:	602b      	str	r3, [r5, #0]
 8012ed6:	bd38      	pop	{r3, r4, r5, pc}
 8012ed8:	20002cf0 	.word	0x20002cf0

08012edc <__ascii_wctomb>:
 8012edc:	b149      	cbz	r1, 8012ef2 <__ascii_wctomb+0x16>
 8012ede:	2aff      	cmp	r2, #255	; 0xff
 8012ee0:	bf85      	ittet	hi
 8012ee2:	238a      	movhi	r3, #138	; 0x8a
 8012ee4:	6003      	strhi	r3, [r0, #0]
 8012ee6:	700a      	strbls	r2, [r1, #0]
 8012ee8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012eec:	bf98      	it	ls
 8012eee:	2001      	movls	r0, #1
 8012ef0:	4770      	bx	lr
 8012ef2:	4608      	mov	r0, r1
 8012ef4:	4770      	bx	lr

08012ef6 <_malloc_usable_size_r>:
 8012ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012efa:	1f18      	subs	r0, r3, #4
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	bfbc      	itt	lt
 8012f00:	580b      	ldrlt	r3, [r1, r0]
 8012f02:	18c0      	addlt	r0, r0, r3
 8012f04:	4770      	bx	lr
	...

08012f08 <log10>:
 8012f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f0a:	ed2d 8b02 	vpush	{d8}
 8012f0e:	b08b      	sub	sp, #44	; 0x2c
 8012f10:	ec55 4b10 	vmov	r4, r5, d0
 8012f14:	f000 f9e8 	bl	80132e8 <__ieee754_log10>
 8012f18:	4b36      	ldr	r3, [pc, #216]	; (8012ff4 <log10+0xec>)
 8012f1a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f1e:	eef0 8a60 	vmov.f32	s17, s1
 8012f22:	f993 6000 	ldrsb.w	r6, [r3]
 8012f26:	1c73      	adds	r3, r6, #1
 8012f28:	d05c      	beq.n	8012fe4 <log10+0xdc>
 8012f2a:	4622      	mov	r2, r4
 8012f2c:	462b      	mov	r3, r5
 8012f2e:	4620      	mov	r0, r4
 8012f30:	4629      	mov	r1, r5
 8012f32:	f7ed fe23 	bl	8000b7c <__aeabi_dcmpun>
 8012f36:	4607      	mov	r7, r0
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	d153      	bne.n	8012fe4 <log10+0xdc>
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	2300      	movs	r3, #0
 8012f40:	4620      	mov	r0, r4
 8012f42:	4629      	mov	r1, r5
 8012f44:	f7ed fdfc 	bl	8000b40 <__aeabi_dcmple>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d04b      	beq.n	8012fe4 <log10+0xdc>
 8012f4c:	4b2a      	ldr	r3, [pc, #168]	; (8012ff8 <log10+0xf0>)
 8012f4e:	9301      	str	r3, [sp, #4]
 8012f50:	9708      	str	r7, [sp, #32]
 8012f52:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012f56:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012f5a:	b9a6      	cbnz	r6, 8012f86 <log10+0x7e>
 8012f5c:	4b27      	ldr	r3, [pc, #156]	; (8012ffc <log10+0xf4>)
 8012f5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012f62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012f66:	4620      	mov	r0, r4
 8012f68:	2200      	movs	r2, #0
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	f7ed fdd3 	bl	8000b18 <__aeabi_dcmpeq>
 8012f72:	bb40      	cbnz	r0, 8012fc6 <log10+0xbe>
 8012f74:	2301      	movs	r3, #1
 8012f76:	2e02      	cmp	r6, #2
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	d119      	bne.n	8012fb0 <log10+0xa8>
 8012f7c:	f7fd fa2a 	bl	80103d4 <__errno>
 8012f80:	2321      	movs	r3, #33	; 0x21
 8012f82:	6003      	str	r3, [r0, #0]
 8012f84:	e019      	b.n	8012fba <log10+0xb2>
 8012f86:	4b1e      	ldr	r3, [pc, #120]	; (8013000 <log10+0xf8>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012f8e:	4620      	mov	r0, r4
 8012f90:	2200      	movs	r2, #0
 8012f92:	2300      	movs	r3, #0
 8012f94:	4629      	mov	r1, r5
 8012f96:	f7ed fdbf 	bl	8000b18 <__aeabi_dcmpeq>
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	d0ea      	beq.n	8012f74 <log10+0x6c>
 8012f9e:	2302      	movs	r3, #2
 8012fa0:	429e      	cmp	r6, r3
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	d111      	bne.n	8012fca <log10+0xc2>
 8012fa6:	f7fd fa15 	bl	80103d4 <__errno>
 8012faa:	2322      	movs	r3, #34	; 0x22
 8012fac:	6003      	str	r3, [r0, #0]
 8012fae:	e011      	b.n	8012fd4 <log10+0xcc>
 8012fb0:	4668      	mov	r0, sp
 8012fb2:	f000 fff4 	bl	8013f9e <matherr>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d0e0      	beq.n	8012f7c <log10+0x74>
 8012fba:	4812      	ldr	r0, [pc, #72]	; (8013004 <log10+0xfc>)
 8012fbc:	f000 fff4 	bl	8013fa8 <nan>
 8012fc0:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012fc4:	e006      	b.n	8012fd4 <log10+0xcc>
 8012fc6:	2302      	movs	r3, #2
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	4668      	mov	r0, sp
 8012fcc:	f000 ffe7 	bl	8013f9e <matherr>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d0e8      	beq.n	8012fa6 <log10+0x9e>
 8012fd4:	9b08      	ldr	r3, [sp, #32]
 8012fd6:	b11b      	cbz	r3, 8012fe0 <log10+0xd8>
 8012fd8:	f7fd f9fc 	bl	80103d4 <__errno>
 8012fdc:	9b08      	ldr	r3, [sp, #32]
 8012fde:	6003      	str	r3, [r0, #0]
 8012fe0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8012fe8:	eef0 0a68 	vmov.f32	s1, s17
 8012fec:	b00b      	add	sp, #44	; 0x2c
 8012fee:	ecbd 8b02 	vpop	{d8}
 8012ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ff4:	20001e08 	.word	0x20001e08
 8012ff8:	08015900 	.word	0x08015900
 8012ffc:	c7efffff 	.word	0xc7efffff
 8013000:	fff00000 	.word	0xfff00000
 8013004:	080157e9 	.word	0x080157e9

08013008 <pow>:
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	ed2d 8b04 	vpush	{d8-d9}
 8013010:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80132e4 <pow+0x2dc>
 8013014:	b08d      	sub	sp, #52	; 0x34
 8013016:	ec57 6b10 	vmov	r6, r7, d0
 801301a:	ec55 4b11 	vmov	r4, r5, d1
 801301e:	f000 f9ef 	bl	8013400 <__ieee754_pow>
 8013022:	f999 3000 	ldrsb.w	r3, [r9]
 8013026:	9300      	str	r3, [sp, #0]
 8013028:	3301      	adds	r3, #1
 801302a:	eeb0 8a40 	vmov.f32	s16, s0
 801302e:	eef0 8a60 	vmov.f32	s17, s1
 8013032:	46c8      	mov	r8, r9
 8013034:	d05f      	beq.n	80130f6 <pow+0xee>
 8013036:	4622      	mov	r2, r4
 8013038:	462b      	mov	r3, r5
 801303a:	4620      	mov	r0, r4
 801303c:	4629      	mov	r1, r5
 801303e:	f7ed fd9d 	bl	8000b7c <__aeabi_dcmpun>
 8013042:	4683      	mov	fp, r0
 8013044:	2800      	cmp	r0, #0
 8013046:	d156      	bne.n	80130f6 <pow+0xee>
 8013048:	4632      	mov	r2, r6
 801304a:	463b      	mov	r3, r7
 801304c:	4630      	mov	r0, r6
 801304e:	4639      	mov	r1, r7
 8013050:	f7ed fd94 	bl	8000b7c <__aeabi_dcmpun>
 8013054:	9001      	str	r0, [sp, #4]
 8013056:	b1e8      	cbz	r0, 8013094 <pow+0x8c>
 8013058:	2200      	movs	r2, #0
 801305a:	2300      	movs	r3, #0
 801305c:	4620      	mov	r0, r4
 801305e:	4629      	mov	r1, r5
 8013060:	f7ed fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 8013064:	2800      	cmp	r0, #0
 8013066:	d046      	beq.n	80130f6 <pow+0xee>
 8013068:	2301      	movs	r3, #1
 801306a:	9302      	str	r3, [sp, #8]
 801306c:	4b96      	ldr	r3, [pc, #600]	; (80132c8 <pow+0x2c0>)
 801306e:	9303      	str	r3, [sp, #12]
 8013070:	4b96      	ldr	r3, [pc, #600]	; (80132cc <pow+0x2c4>)
 8013072:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013076:	2200      	movs	r2, #0
 8013078:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801307c:	9b00      	ldr	r3, [sp, #0]
 801307e:	2b02      	cmp	r3, #2
 8013080:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013084:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013088:	d033      	beq.n	80130f2 <pow+0xea>
 801308a:	a802      	add	r0, sp, #8
 801308c:	f000 ff87 	bl	8013f9e <matherr>
 8013090:	bb48      	cbnz	r0, 80130e6 <pow+0xde>
 8013092:	e05d      	b.n	8013150 <pow+0x148>
 8013094:	f04f 0a00 	mov.w	sl, #0
 8013098:	f04f 0b00 	mov.w	fp, #0
 801309c:	4652      	mov	r2, sl
 801309e:	465b      	mov	r3, fp
 80130a0:	4630      	mov	r0, r6
 80130a2:	4639      	mov	r1, r7
 80130a4:	f7ed fd38 	bl	8000b18 <__aeabi_dcmpeq>
 80130a8:	ec4b ab19 	vmov	d9, sl, fp
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d054      	beq.n	801315a <pow+0x152>
 80130b0:	4652      	mov	r2, sl
 80130b2:	465b      	mov	r3, fp
 80130b4:	4620      	mov	r0, r4
 80130b6:	4629      	mov	r1, r5
 80130b8:	f7ed fd2e 	bl	8000b18 <__aeabi_dcmpeq>
 80130bc:	4680      	mov	r8, r0
 80130be:	b318      	cbz	r0, 8013108 <pow+0x100>
 80130c0:	2301      	movs	r3, #1
 80130c2:	9302      	str	r3, [sp, #8]
 80130c4:	4b80      	ldr	r3, [pc, #512]	; (80132c8 <pow+0x2c0>)
 80130c6:	9303      	str	r3, [sp, #12]
 80130c8:	9b01      	ldr	r3, [sp, #4]
 80130ca:	930a      	str	r3, [sp, #40]	; 0x28
 80130cc:	9b00      	ldr	r3, [sp, #0]
 80130ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80130d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80130d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d0d5      	beq.n	801308a <pow+0x82>
 80130de:	4b7b      	ldr	r3, [pc, #492]	; (80132cc <pow+0x2c4>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130e8:	b11b      	cbz	r3, 80130f2 <pow+0xea>
 80130ea:	f7fd f973 	bl	80103d4 <__errno>
 80130ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f0:	6003      	str	r3, [r0, #0]
 80130f2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80130f6:	eeb0 0a48 	vmov.f32	s0, s16
 80130fa:	eef0 0a68 	vmov.f32	s1, s17
 80130fe:	b00d      	add	sp, #52	; 0x34
 8013100:	ecbd 8b04 	vpop	{d8-d9}
 8013104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013108:	ec45 4b10 	vmov	d0, r4, r5
 801310c:	f000 ff3f 	bl	8013f8e <finite>
 8013110:	2800      	cmp	r0, #0
 8013112:	d0f0      	beq.n	80130f6 <pow+0xee>
 8013114:	4652      	mov	r2, sl
 8013116:	465b      	mov	r3, fp
 8013118:	4620      	mov	r0, r4
 801311a:	4629      	mov	r1, r5
 801311c:	f7ed fd06 	bl	8000b2c <__aeabi_dcmplt>
 8013120:	2800      	cmp	r0, #0
 8013122:	d0e8      	beq.n	80130f6 <pow+0xee>
 8013124:	2301      	movs	r3, #1
 8013126:	9302      	str	r3, [sp, #8]
 8013128:	4b67      	ldr	r3, [pc, #412]	; (80132c8 <pow+0x2c0>)
 801312a:	9303      	str	r3, [sp, #12]
 801312c:	f999 3000 	ldrsb.w	r3, [r9]
 8013130:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013134:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013138:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801313c:	b913      	cbnz	r3, 8013144 <pow+0x13c>
 801313e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013142:	e7a2      	b.n	801308a <pow+0x82>
 8013144:	4962      	ldr	r1, [pc, #392]	; (80132d0 <pow+0x2c8>)
 8013146:	2000      	movs	r0, #0
 8013148:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801314c:	2b02      	cmp	r3, #2
 801314e:	d19c      	bne.n	801308a <pow+0x82>
 8013150:	f7fd f940 	bl	80103d4 <__errno>
 8013154:	2321      	movs	r3, #33	; 0x21
 8013156:	6003      	str	r3, [r0, #0]
 8013158:	e7c5      	b.n	80130e6 <pow+0xde>
 801315a:	eeb0 0a48 	vmov.f32	s0, s16
 801315e:	eef0 0a68 	vmov.f32	s1, s17
 8013162:	f000 ff14 	bl	8013f8e <finite>
 8013166:	9000      	str	r0, [sp, #0]
 8013168:	2800      	cmp	r0, #0
 801316a:	f040 8081 	bne.w	8013270 <pow+0x268>
 801316e:	ec47 6b10 	vmov	d0, r6, r7
 8013172:	f000 ff0c 	bl	8013f8e <finite>
 8013176:	2800      	cmp	r0, #0
 8013178:	d07a      	beq.n	8013270 <pow+0x268>
 801317a:	ec45 4b10 	vmov	d0, r4, r5
 801317e:	f000 ff06 	bl	8013f8e <finite>
 8013182:	2800      	cmp	r0, #0
 8013184:	d074      	beq.n	8013270 <pow+0x268>
 8013186:	ec53 2b18 	vmov	r2, r3, d8
 801318a:	ee18 0a10 	vmov	r0, s16
 801318e:	4619      	mov	r1, r3
 8013190:	f7ed fcf4 	bl	8000b7c <__aeabi_dcmpun>
 8013194:	f999 9000 	ldrsb.w	r9, [r9]
 8013198:	4b4b      	ldr	r3, [pc, #300]	; (80132c8 <pow+0x2c0>)
 801319a:	b1b0      	cbz	r0, 80131ca <pow+0x1c2>
 801319c:	2201      	movs	r2, #1
 801319e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131a2:	9b00      	ldr	r3, [sp, #0]
 80131a4:	930a      	str	r3, [sp, #40]	; 0x28
 80131a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80131ae:	f1b9 0f00 	cmp.w	r9, #0
 80131b2:	d0c4      	beq.n	801313e <pow+0x136>
 80131b4:	4652      	mov	r2, sl
 80131b6:	465b      	mov	r3, fp
 80131b8:	4650      	mov	r0, sl
 80131ba:	4659      	mov	r1, fp
 80131bc:	f7ed fb6e 	bl	800089c <__aeabi_ddiv>
 80131c0:	f1b9 0f02 	cmp.w	r9, #2
 80131c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80131c8:	e7c1      	b.n	801314e <pow+0x146>
 80131ca:	2203      	movs	r2, #3
 80131cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131d0:	900a      	str	r0, [sp, #40]	; 0x28
 80131d2:	4629      	mov	r1, r5
 80131d4:	4620      	mov	r0, r4
 80131d6:	2200      	movs	r2, #0
 80131d8:	4b3e      	ldr	r3, [pc, #248]	; (80132d4 <pow+0x2cc>)
 80131da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80131de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131e2:	f7ed fa31 	bl	8000648 <__aeabi_dmul>
 80131e6:	4604      	mov	r4, r0
 80131e8:	460d      	mov	r5, r1
 80131ea:	f1b9 0f00 	cmp.w	r9, #0
 80131ee:	d124      	bne.n	801323a <pow+0x232>
 80131f0:	4b39      	ldr	r3, [pc, #228]	; (80132d8 <pow+0x2d0>)
 80131f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80131f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131fa:	4630      	mov	r0, r6
 80131fc:	4652      	mov	r2, sl
 80131fe:	465b      	mov	r3, fp
 8013200:	4639      	mov	r1, r7
 8013202:	f7ed fc93 	bl	8000b2c <__aeabi_dcmplt>
 8013206:	2800      	cmp	r0, #0
 8013208:	d056      	beq.n	80132b8 <pow+0x2b0>
 801320a:	ec45 4b10 	vmov	d0, r4, r5
 801320e:	f000 fed3 	bl	8013fb8 <rint>
 8013212:	4622      	mov	r2, r4
 8013214:	462b      	mov	r3, r5
 8013216:	ec51 0b10 	vmov	r0, r1, d0
 801321a:	f7ed fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 801321e:	b920      	cbnz	r0, 801322a <pow+0x222>
 8013220:	4b2e      	ldr	r3, [pc, #184]	; (80132dc <pow+0x2d4>)
 8013222:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801322a:	f998 3000 	ldrsb.w	r3, [r8]
 801322e:	2b02      	cmp	r3, #2
 8013230:	d142      	bne.n	80132b8 <pow+0x2b0>
 8013232:	f7fd f8cf 	bl	80103d4 <__errno>
 8013236:	2322      	movs	r3, #34	; 0x22
 8013238:	e78d      	b.n	8013156 <pow+0x14e>
 801323a:	4b29      	ldr	r3, [pc, #164]	; (80132e0 <pow+0x2d8>)
 801323c:	2200      	movs	r2, #0
 801323e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013242:	4630      	mov	r0, r6
 8013244:	4652      	mov	r2, sl
 8013246:	465b      	mov	r3, fp
 8013248:	4639      	mov	r1, r7
 801324a:	f7ed fc6f 	bl	8000b2c <__aeabi_dcmplt>
 801324e:	2800      	cmp	r0, #0
 8013250:	d0eb      	beq.n	801322a <pow+0x222>
 8013252:	ec45 4b10 	vmov	d0, r4, r5
 8013256:	f000 feaf 	bl	8013fb8 <rint>
 801325a:	4622      	mov	r2, r4
 801325c:	462b      	mov	r3, r5
 801325e:	ec51 0b10 	vmov	r0, r1, d0
 8013262:	f7ed fc59 	bl	8000b18 <__aeabi_dcmpeq>
 8013266:	2800      	cmp	r0, #0
 8013268:	d1df      	bne.n	801322a <pow+0x222>
 801326a:	2200      	movs	r2, #0
 801326c:	4b18      	ldr	r3, [pc, #96]	; (80132d0 <pow+0x2c8>)
 801326e:	e7da      	b.n	8013226 <pow+0x21e>
 8013270:	2200      	movs	r2, #0
 8013272:	2300      	movs	r3, #0
 8013274:	ec51 0b18 	vmov	r0, r1, d8
 8013278:	f7ed fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 801327c:	2800      	cmp	r0, #0
 801327e:	f43f af3a 	beq.w	80130f6 <pow+0xee>
 8013282:	ec47 6b10 	vmov	d0, r6, r7
 8013286:	f000 fe82 	bl	8013f8e <finite>
 801328a:	2800      	cmp	r0, #0
 801328c:	f43f af33 	beq.w	80130f6 <pow+0xee>
 8013290:	ec45 4b10 	vmov	d0, r4, r5
 8013294:	f000 fe7b 	bl	8013f8e <finite>
 8013298:	2800      	cmp	r0, #0
 801329a:	f43f af2c 	beq.w	80130f6 <pow+0xee>
 801329e:	2304      	movs	r3, #4
 80132a0:	9302      	str	r3, [sp, #8]
 80132a2:	4b09      	ldr	r3, [pc, #36]	; (80132c8 <pow+0x2c0>)
 80132a4:	9303      	str	r3, [sp, #12]
 80132a6:	2300      	movs	r3, #0
 80132a8:	930a      	str	r3, [sp, #40]	; 0x28
 80132aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80132b6:	e7b8      	b.n	801322a <pow+0x222>
 80132b8:	a802      	add	r0, sp, #8
 80132ba:	f000 fe70 	bl	8013f9e <matherr>
 80132be:	2800      	cmp	r0, #0
 80132c0:	f47f af11 	bne.w	80130e6 <pow+0xde>
 80132c4:	e7b5      	b.n	8013232 <pow+0x22a>
 80132c6:	bf00      	nop
 80132c8:	08015906 	.word	0x08015906
 80132cc:	3ff00000 	.word	0x3ff00000
 80132d0:	fff00000 	.word	0xfff00000
 80132d4:	3fe00000 	.word	0x3fe00000
 80132d8:	47efffff 	.word	0x47efffff
 80132dc:	c7efffff 	.word	0xc7efffff
 80132e0:	7ff00000 	.word	0x7ff00000
 80132e4:	20001e08 	.word	0x20001e08

080132e8 <__ieee754_log10>:
 80132e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132ec:	ec55 4b10 	vmov	r4, r5, d0
 80132f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80132f4:	462b      	mov	r3, r5
 80132f6:	da2f      	bge.n	8013358 <__ieee754_log10+0x70>
 80132f8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80132fc:	4322      	orrs	r2, r4
 80132fe:	d10a      	bne.n	8013316 <__ieee754_log10+0x2e>
 8013300:	493b      	ldr	r1, [pc, #236]	; (80133f0 <__ieee754_log10+0x108>)
 8013302:	2200      	movs	r2, #0
 8013304:	2300      	movs	r3, #0
 8013306:	2000      	movs	r0, #0
 8013308:	f7ed fac8 	bl	800089c <__aeabi_ddiv>
 801330c:	ec41 0b10 	vmov	d0, r0, r1
 8013310:	b003      	add	sp, #12
 8013312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013316:	2d00      	cmp	r5, #0
 8013318:	da08      	bge.n	801332c <__ieee754_log10+0x44>
 801331a:	ee10 2a10 	vmov	r2, s0
 801331e:	4620      	mov	r0, r4
 8013320:	4629      	mov	r1, r5
 8013322:	f7ec ffd9 	bl	80002d8 <__aeabi_dsub>
 8013326:	2200      	movs	r2, #0
 8013328:	2300      	movs	r3, #0
 801332a:	e7ed      	b.n	8013308 <__ieee754_log10+0x20>
 801332c:	2200      	movs	r2, #0
 801332e:	4b31      	ldr	r3, [pc, #196]	; (80133f4 <__ieee754_log10+0x10c>)
 8013330:	4629      	mov	r1, r5
 8013332:	ee10 0a10 	vmov	r0, s0
 8013336:	f7ed f987 	bl	8000648 <__aeabi_dmul>
 801333a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801333e:	4604      	mov	r4, r0
 8013340:	460d      	mov	r5, r1
 8013342:	460b      	mov	r3, r1
 8013344:	492c      	ldr	r1, [pc, #176]	; (80133f8 <__ieee754_log10+0x110>)
 8013346:	428b      	cmp	r3, r1
 8013348:	dd08      	ble.n	801335c <__ieee754_log10+0x74>
 801334a:	4622      	mov	r2, r4
 801334c:	462b      	mov	r3, r5
 801334e:	4620      	mov	r0, r4
 8013350:	4629      	mov	r1, r5
 8013352:	f7ec ffc3 	bl	80002dc <__adddf3>
 8013356:	e7d9      	b.n	801330c <__ieee754_log10+0x24>
 8013358:	2200      	movs	r2, #0
 801335a:	e7f3      	b.n	8013344 <__ieee754_log10+0x5c>
 801335c:	1518      	asrs	r0, r3, #20
 801335e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013362:	4410      	add	r0, r2
 8013364:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8013368:	4448      	add	r0, r9
 801336a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801336e:	f7ed f901 	bl	8000574 <__aeabi_i2d>
 8013372:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8013376:	3303      	adds	r3, #3
 8013378:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801337c:	ec45 4b10 	vmov	d0, r4, r5
 8013380:	4606      	mov	r6, r0
 8013382:	460f      	mov	r7, r1
 8013384:	f000 ff14 	bl	80141b0 <__ieee754_log>
 8013388:	a313      	add	r3, pc, #76	; (adr r3, 80133d8 <__ieee754_log10+0xf0>)
 801338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338e:	4630      	mov	r0, r6
 8013390:	4639      	mov	r1, r7
 8013392:	ed8d 0b00 	vstr	d0, [sp]
 8013396:	f7ed f957 	bl	8000648 <__aeabi_dmul>
 801339a:	ed9d 0b00 	vldr	d0, [sp]
 801339e:	4604      	mov	r4, r0
 80133a0:	460d      	mov	r5, r1
 80133a2:	a30f      	add	r3, pc, #60	; (adr r3, 80133e0 <__ieee754_log10+0xf8>)
 80133a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a8:	ec51 0b10 	vmov	r0, r1, d0
 80133ac:	f7ed f94c 	bl	8000648 <__aeabi_dmul>
 80133b0:	4602      	mov	r2, r0
 80133b2:	460b      	mov	r3, r1
 80133b4:	4620      	mov	r0, r4
 80133b6:	4629      	mov	r1, r5
 80133b8:	f7ec ff90 	bl	80002dc <__adddf3>
 80133bc:	a30a      	add	r3, pc, #40	; (adr r3, 80133e8 <__ieee754_log10+0x100>)
 80133be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c2:	4604      	mov	r4, r0
 80133c4:	460d      	mov	r5, r1
 80133c6:	4630      	mov	r0, r6
 80133c8:	4639      	mov	r1, r7
 80133ca:	f7ed f93d 	bl	8000648 <__aeabi_dmul>
 80133ce:	4602      	mov	r2, r0
 80133d0:	460b      	mov	r3, r1
 80133d2:	4620      	mov	r0, r4
 80133d4:	4629      	mov	r1, r5
 80133d6:	e7bc      	b.n	8013352 <__ieee754_log10+0x6a>
 80133d8:	11f12b36 	.word	0x11f12b36
 80133dc:	3d59fef3 	.word	0x3d59fef3
 80133e0:	1526e50e 	.word	0x1526e50e
 80133e4:	3fdbcb7b 	.word	0x3fdbcb7b
 80133e8:	509f6000 	.word	0x509f6000
 80133ec:	3fd34413 	.word	0x3fd34413
 80133f0:	c3500000 	.word	0xc3500000
 80133f4:	43500000 	.word	0x43500000
 80133f8:	7fefffff 	.word	0x7fefffff
 80133fc:	00000000 	.word	0x00000000

08013400 <__ieee754_pow>:
 8013400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	b091      	sub	sp, #68	; 0x44
 8013406:	ed8d 1b00 	vstr	d1, [sp]
 801340a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801340e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013412:	ea58 0302 	orrs.w	r3, r8, r2
 8013416:	ec57 6b10 	vmov	r6, r7, d0
 801341a:	f000 84be 	beq.w	8013d9a <__ieee754_pow+0x99a>
 801341e:	4b7a      	ldr	r3, [pc, #488]	; (8013608 <__ieee754_pow+0x208>)
 8013420:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013424:	429c      	cmp	r4, r3
 8013426:	463d      	mov	r5, r7
 8013428:	ee10 aa10 	vmov	sl, s0
 801342c:	dc09      	bgt.n	8013442 <__ieee754_pow+0x42>
 801342e:	d103      	bne.n	8013438 <__ieee754_pow+0x38>
 8013430:	b93e      	cbnz	r6, 8013442 <__ieee754_pow+0x42>
 8013432:	45a0      	cmp	r8, r4
 8013434:	dc0d      	bgt.n	8013452 <__ieee754_pow+0x52>
 8013436:	e001      	b.n	801343c <__ieee754_pow+0x3c>
 8013438:	4598      	cmp	r8, r3
 801343a:	dc02      	bgt.n	8013442 <__ieee754_pow+0x42>
 801343c:	4598      	cmp	r8, r3
 801343e:	d10e      	bne.n	801345e <__ieee754_pow+0x5e>
 8013440:	b16a      	cbz	r2, 801345e <__ieee754_pow+0x5e>
 8013442:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013446:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801344a:	ea54 030a 	orrs.w	r3, r4, sl
 801344e:	f000 84a4 	beq.w	8013d9a <__ieee754_pow+0x99a>
 8013452:	486e      	ldr	r0, [pc, #440]	; (801360c <__ieee754_pow+0x20c>)
 8013454:	b011      	add	sp, #68	; 0x44
 8013456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345a:	f000 bda5 	b.w	8013fa8 <nan>
 801345e:	2d00      	cmp	r5, #0
 8013460:	da53      	bge.n	801350a <__ieee754_pow+0x10a>
 8013462:	4b6b      	ldr	r3, [pc, #428]	; (8013610 <__ieee754_pow+0x210>)
 8013464:	4598      	cmp	r8, r3
 8013466:	dc4d      	bgt.n	8013504 <__ieee754_pow+0x104>
 8013468:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801346c:	4598      	cmp	r8, r3
 801346e:	dd4c      	ble.n	801350a <__ieee754_pow+0x10a>
 8013470:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013474:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013478:	2b14      	cmp	r3, #20
 801347a:	dd26      	ble.n	80134ca <__ieee754_pow+0xca>
 801347c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013480:	fa22 f103 	lsr.w	r1, r2, r3
 8013484:	fa01 f303 	lsl.w	r3, r1, r3
 8013488:	4293      	cmp	r3, r2
 801348a:	d13e      	bne.n	801350a <__ieee754_pow+0x10a>
 801348c:	f001 0101 	and.w	r1, r1, #1
 8013490:	f1c1 0b02 	rsb	fp, r1, #2
 8013494:	2a00      	cmp	r2, #0
 8013496:	d15b      	bne.n	8013550 <__ieee754_pow+0x150>
 8013498:	4b5b      	ldr	r3, [pc, #364]	; (8013608 <__ieee754_pow+0x208>)
 801349a:	4598      	cmp	r8, r3
 801349c:	d124      	bne.n	80134e8 <__ieee754_pow+0xe8>
 801349e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80134a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80134a6:	ea53 030a 	orrs.w	r3, r3, sl
 80134aa:	f000 8476 	beq.w	8013d9a <__ieee754_pow+0x99a>
 80134ae:	4b59      	ldr	r3, [pc, #356]	; (8013614 <__ieee754_pow+0x214>)
 80134b0:	429c      	cmp	r4, r3
 80134b2:	dd2d      	ble.n	8013510 <__ieee754_pow+0x110>
 80134b4:	f1b9 0f00 	cmp.w	r9, #0
 80134b8:	f280 8473 	bge.w	8013da2 <__ieee754_pow+0x9a2>
 80134bc:	2000      	movs	r0, #0
 80134be:	2100      	movs	r1, #0
 80134c0:	ec41 0b10 	vmov	d0, r0, r1
 80134c4:	b011      	add	sp, #68	; 0x44
 80134c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ca:	2a00      	cmp	r2, #0
 80134cc:	d13e      	bne.n	801354c <__ieee754_pow+0x14c>
 80134ce:	f1c3 0314 	rsb	r3, r3, #20
 80134d2:	fa48 f103 	asr.w	r1, r8, r3
 80134d6:	fa01 f303 	lsl.w	r3, r1, r3
 80134da:	4543      	cmp	r3, r8
 80134dc:	f040 8469 	bne.w	8013db2 <__ieee754_pow+0x9b2>
 80134e0:	f001 0101 	and.w	r1, r1, #1
 80134e4:	f1c1 0b02 	rsb	fp, r1, #2
 80134e8:	4b4b      	ldr	r3, [pc, #300]	; (8013618 <__ieee754_pow+0x218>)
 80134ea:	4598      	cmp	r8, r3
 80134ec:	d118      	bne.n	8013520 <__ieee754_pow+0x120>
 80134ee:	f1b9 0f00 	cmp.w	r9, #0
 80134f2:	f280 845a 	bge.w	8013daa <__ieee754_pow+0x9aa>
 80134f6:	4948      	ldr	r1, [pc, #288]	; (8013618 <__ieee754_pow+0x218>)
 80134f8:	4632      	mov	r2, r6
 80134fa:	463b      	mov	r3, r7
 80134fc:	2000      	movs	r0, #0
 80134fe:	f7ed f9cd 	bl	800089c <__aeabi_ddiv>
 8013502:	e7dd      	b.n	80134c0 <__ieee754_pow+0xc0>
 8013504:	f04f 0b02 	mov.w	fp, #2
 8013508:	e7c4      	b.n	8013494 <__ieee754_pow+0x94>
 801350a:	f04f 0b00 	mov.w	fp, #0
 801350e:	e7c1      	b.n	8013494 <__ieee754_pow+0x94>
 8013510:	f1b9 0f00 	cmp.w	r9, #0
 8013514:	dad2      	bge.n	80134bc <__ieee754_pow+0xbc>
 8013516:	e9dd 0300 	ldrd	r0, r3, [sp]
 801351a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801351e:	e7cf      	b.n	80134c0 <__ieee754_pow+0xc0>
 8013520:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013524:	d106      	bne.n	8013534 <__ieee754_pow+0x134>
 8013526:	4632      	mov	r2, r6
 8013528:	463b      	mov	r3, r7
 801352a:	4610      	mov	r0, r2
 801352c:	4619      	mov	r1, r3
 801352e:	f7ed f88b 	bl	8000648 <__aeabi_dmul>
 8013532:	e7c5      	b.n	80134c0 <__ieee754_pow+0xc0>
 8013534:	4b39      	ldr	r3, [pc, #228]	; (801361c <__ieee754_pow+0x21c>)
 8013536:	4599      	cmp	r9, r3
 8013538:	d10a      	bne.n	8013550 <__ieee754_pow+0x150>
 801353a:	2d00      	cmp	r5, #0
 801353c:	db08      	blt.n	8013550 <__ieee754_pow+0x150>
 801353e:	ec47 6b10 	vmov	d0, r6, r7
 8013542:	b011      	add	sp, #68	; 0x44
 8013544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013548:	f000 bc68 	b.w	8013e1c <__ieee754_sqrt>
 801354c:	f04f 0b00 	mov.w	fp, #0
 8013550:	ec47 6b10 	vmov	d0, r6, r7
 8013554:	f000 fd12 	bl	8013f7c <fabs>
 8013558:	ec51 0b10 	vmov	r0, r1, d0
 801355c:	f1ba 0f00 	cmp.w	sl, #0
 8013560:	d127      	bne.n	80135b2 <__ieee754_pow+0x1b2>
 8013562:	b124      	cbz	r4, 801356e <__ieee754_pow+0x16e>
 8013564:	4b2c      	ldr	r3, [pc, #176]	; (8013618 <__ieee754_pow+0x218>)
 8013566:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801356a:	429a      	cmp	r2, r3
 801356c:	d121      	bne.n	80135b2 <__ieee754_pow+0x1b2>
 801356e:	f1b9 0f00 	cmp.w	r9, #0
 8013572:	da05      	bge.n	8013580 <__ieee754_pow+0x180>
 8013574:	4602      	mov	r2, r0
 8013576:	460b      	mov	r3, r1
 8013578:	2000      	movs	r0, #0
 801357a:	4927      	ldr	r1, [pc, #156]	; (8013618 <__ieee754_pow+0x218>)
 801357c:	f7ed f98e 	bl	800089c <__aeabi_ddiv>
 8013580:	2d00      	cmp	r5, #0
 8013582:	da9d      	bge.n	80134c0 <__ieee754_pow+0xc0>
 8013584:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013588:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801358c:	ea54 030b 	orrs.w	r3, r4, fp
 8013590:	d108      	bne.n	80135a4 <__ieee754_pow+0x1a4>
 8013592:	4602      	mov	r2, r0
 8013594:	460b      	mov	r3, r1
 8013596:	4610      	mov	r0, r2
 8013598:	4619      	mov	r1, r3
 801359a:	f7ec fe9d 	bl	80002d8 <__aeabi_dsub>
 801359e:	4602      	mov	r2, r0
 80135a0:	460b      	mov	r3, r1
 80135a2:	e7ac      	b.n	80134fe <__ieee754_pow+0xfe>
 80135a4:	f1bb 0f01 	cmp.w	fp, #1
 80135a8:	d18a      	bne.n	80134c0 <__ieee754_pow+0xc0>
 80135aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135ae:	4619      	mov	r1, r3
 80135b0:	e786      	b.n	80134c0 <__ieee754_pow+0xc0>
 80135b2:	0fed      	lsrs	r5, r5, #31
 80135b4:	1e6b      	subs	r3, r5, #1
 80135b6:	930d      	str	r3, [sp, #52]	; 0x34
 80135b8:	ea5b 0303 	orrs.w	r3, fp, r3
 80135bc:	d102      	bne.n	80135c4 <__ieee754_pow+0x1c4>
 80135be:	4632      	mov	r2, r6
 80135c0:	463b      	mov	r3, r7
 80135c2:	e7e8      	b.n	8013596 <__ieee754_pow+0x196>
 80135c4:	4b16      	ldr	r3, [pc, #88]	; (8013620 <__ieee754_pow+0x220>)
 80135c6:	4598      	cmp	r8, r3
 80135c8:	f340 80fe 	ble.w	80137c8 <__ieee754_pow+0x3c8>
 80135cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80135d0:	4598      	cmp	r8, r3
 80135d2:	dd0a      	ble.n	80135ea <__ieee754_pow+0x1ea>
 80135d4:	4b0f      	ldr	r3, [pc, #60]	; (8013614 <__ieee754_pow+0x214>)
 80135d6:	429c      	cmp	r4, r3
 80135d8:	dc0d      	bgt.n	80135f6 <__ieee754_pow+0x1f6>
 80135da:	f1b9 0f00 	cmp.w	r9, #0
 80135de:	f6bf af6d 	bge.w	80134bc <__ieee754_pow+0xbc>
 80135e2:	a307      	add	r3, pc, #28	; (adr r3, 8013600 <__ieee754_pow+0x200>)
 80135e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e8:	e79f      	b.n	801352a <__ieee754_pow+0x12a>
 80135ea:	4b0e      	ldr	r3, [pc, #56]	; (8013624 <__ieee754_pow+0x224>)
 80135ec:	429c      	cmp	r4, r3
 80135ee:	ddf4      	ble.n	80135da <__ieee754_pow+0x1da>
 80135f0:	4b09      	ldr	r3, [pc, #36]	; (8013618 <__ieee754_pow+0x218>)
 80135f2:	429c      	cmp	r4, r3
 80135f4:	dd18      	ble.n	8013628 <__ieee754_pow+0x228>
 80135f6:	f1b9 0f00 	cmp.w	r9, #0
 80135fa:	dcf2      	bgt.n	80135e2 <__ieee754_pow+0x1e2>
 80135fc:	e75e      	b.n	80134bc <__ieee754_pow+0xbc>
 80135fe:	bf00      	nop
 8013600:	8800759c 	.word	0x8800759c
 8013604:	7e37e43c 	.word	0x7e37e43c
 8013608:	7ff00000 	.word	0x7ff00000
 801360c:	080157e9 	.word	0x080157e9
 8013610:	433fffff 	.word	0x433fffff
 8013614:	3fefffff 	.word	0x3fefffff
 8013618:	3ff00000 	.word	0x3ff00000
 801361c:	3fe00000 	.word	0x3fe00000
 8013620:	41e00000 	.word	0x41e00000
 8013624:	3feffffe 	.word	0x3feffffe
 8013628:	2200      	movs	r2, #0
 801362a:	4b63      	ldr	r3, [pc, #396]	; (80137b8 <__ieee754_pow+0x3b8>)
 801362c:	f7ec fe54 	bl	80002d8 <__aeabi_dsub>
 8013630:	a355      	add	r3, pc, #340	; (adr r3, 8013788 <__ieee754_pow+0x388>)
 8013632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013636:	4604      	mov	r4, r0
 8013638:	460d      	mov	r5, r1
 801363a:	f7ed f805 	bl	8000648 <__aeabi_dmul>
 801363e:	a354      	add	r3, pc, #336	; (adr r3, 8013790 <__ieee754_pow+0x390>)
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	4606      	mov	r6, r0
 8013646:	460f      	mov	r7, r1
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ec fffc 	bl	8000648 <__aeabi_dmul>
 8013650:	2200      	movs	r2, #0
 8013652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013656:	4b59      	ldr	r3, [pc, #356]	; (80137bc <__ieee754_pow+0x3bc>)
 8013658:	4620      	mov	r0, r4
 801365a:	4629      	mov	r1, r5
 801365c:	f7ec fff4 	bl	8000648 <__aeabi_dmul>
 8013660:	4602      	mov	r2, r0
 8013662:	460b      	mov	r3, r1
 8013664:	a14c      	add	r1, pc, #304	; (adr r1, 8013798 <__ieee754_pow+0x398>)
 8013666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801366a:	f7ec fe35 	bl	80002d8 <__aeabi_dsub>
 801366e:	4622      	mov	r2, r4
 8013670:	462b      	mov	r3, r5
 8013672:	f7ec ffe9 	bl	8000648 <__aeabi_dmul>
 8013676:	4602      	mov	r2, r0
 8013678:	460b      	mov	r3, r1
 801367a:	2000      	movs	r0, #0
 801367c:	4950      	ldr	r1, [pc, #320]	; (80137c0 <__ieee754_pow+0x3c0>)
 801367e:	f7ec fe2b 	bl	80002d8 <__aeabi_dsub>
 8013682:	4622      	mov	r2, r4
 8013684:	462b      	mov	r3, r5
 8013686:	4680      	mov	r8, r0
 8013688:	4689      	mov	r9, r1
 801368a:	4620      	mov	r0, r4
 801368c:	4629      	mov	r1, r5
 801368e:	f7ec ffdb 	bl	8000648 <__aeabi_dmul>
 8013692:	4602      	mov	r2, r0
 8013694:	460b      	mov	r3, r1
 8013696:	4640      	mov	r0, r8
 8013698:	4649      	mov	r1, r9
 801369a:	f7ec ffd5 	bl	8000648 <__aeabi_dmul>
 801369e:	a340      	add	r3, pc, #256	; (adr r3, 80137a0 <__ieee754_pow+0x3a0>)
 80136a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a4:	f7ec ffd0 	bl	8000648 <__aeabi_dmul>
 80136a8:	4602      	mov	r2, r0
 80136aa:	460b      	mov	r3, r1
 80136ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136b0:	f7ec fe12 	bl	80002d8 <__aeabi_dsub>
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	4604      	mov	r4, r0
 80136ba:	460d      	mov	r5, r1
 80136bc:	4630      	mov	r0, r6
 80136be:	4639      	mov	r1, r7
 80136c0:	f7ec fe0c 	bl	80002dc <__adddf3>
 80136c4:	2000      	movs	r0, #0
 80136c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136ca:	4632      	mov	r2, r6
 80136cc:	463b      	mov	r3, r7
 80136ce:	f7ec fe03 	bl	80002d8 <__aeabi_dsub>
 80136d2:	4602      	mov	r2, r0
 80136d4:	460b      	mov	r3, r1
 80136d6:	4620      	mov	r0, r4
 80136d8:	4629      	mov	r1, r5
 80136da:	f7ec fdfd 	bl	80002d8 <__aeabi_dsub>
 80136de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80136e4:	4313      	orrs	r3, r2
 80136e6:	4606      	mov	r6, r0
 80136e8:	460f      	mov	r7, r1
 80136ea:	f040 81eb 	bne.w	8013ac4 <__ieee754_pow+0x6c4>
 80136ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80137a8 <__ieee754_pow+0x3a8>
 80136f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80136f6:	2400      	movs	r4, #0
 80136f8:	4622      	mov	r2, r4
 80136fa:	462b      	mov	r3, r5
 80136fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013704:	f7ec fde8 	bl	80002d8 <__aeabi_dsub>
 8013708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801370c:	f7ec ff9c 	bl	8000648 <__aeabi_dmul>
 8013710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013714:	4680      	mov	r8, r0
 8013716:	4689      	mov	r9, r1
 8013718:	4630      	mov	r0, r6
 801371a:	4639      	mov	r1, r7
 801371c:	f7ec ff94 	bl	8000648 <__aeabi_dmul>
 8013720:	4602      	mov	r2, r0
 8013722:	460b      	mov	r3, r1
 8013724:	4640      	mov	r0, r8
 8013726:	4649      	mov	r1, r9
 8013728:	f7ec fdd8 	bl	80002dc <__adddf3>
 801372c:	4622      	mov	r2, r4
 801372e:	462b      	mov	r3, r5
 8013730:	4680      	mov	r8, r0
 8013732:	4689      	mov	r9, r1
 8013734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013738:	f7ec ff86 	bl	8000648 <__aeabi_dmul>
 801373c:	460b      	mov	r3, r1
 801373e:	4604      	mov	r4, r0
 8013740:	460d      	mov	r5, r1
 8013742:	4602      	mov	r2, r0
 8013744:	4649      	mov	r1, r9
 8013746:	4640      	mov	r0, r8
 8013748:	e9cd 4500 	strd	r4, r5, [sp]
 801374c:	f7ec fdc6 	bl	80002dc <__adddf3>
 8013750:	4b1c      	ldr	r3, [pc, #112]	; (80137c4 <__ieee754_pow+0x3c4>)
 8013752:	4299      	cmp	r1, r3
 8013754:	4606      	mov	r6, r0
 8013756:	460f      	mov	r7, r1
 8013758:	468b      	mov	fp, r1
 801375a:	f340 82f7 	ble.w	8013d4c <__ieee754_pow+0x94c>
 801375e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013762:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013766:	4303      	orrs	r3, r0
 8013768:	f000 81ea 	beq.w	8013b40 <__ieee754_pow+0x740>
 801376c:	a310      	add	r3, pc, #64	; (adr r3, 80137b0 <__ieee754_pow+0x3b0>)
 801376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013776:	f7ec ff67 	bl	8000648 <__aeabi_dmul>
 801377a:	a30d      	add	r3, pc, #52	; (adr r3, 80137b0 <__ieee754_pow+0x3b0>)
 801377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013780:	e6d5      	b.n	801352e <__ieee754_pow+0x12e>
 8013782:	bf00      	nop
 8013784:	f3af 8000 	nop.w
 8013788:	60000000 	.word	0x60000000
 801378c:	3ff71547 	.word	0x3ff71547
 8013790:	f85ddf44 	.word	0xf85ddf44
 8013794:	3e54ae0b 	.word	0x3e54ae0b
 8013798:	55555555 	.word	0x55555555
 801379c:	3fd55555 	.word	0x3fd55555
 80137a0:	652b82fe 	.word	0x652b82fe
 80137a4:	3ff71547 	.word	0x3ff71547
 80137a8:	00000000 	.word	0x00000000
 80137ac:	bff00000 	.word	0xbff00000
 80137b0:	8800759c 	.word	0x8800759c
 80137b4:	7e37e43c 	.word	0x7e37e43c
 80137b8:	3ff00000 	.word	0x3ff00000
 80137bc:	3fd00000 	.word	0x3fd00000
 80137c0:	3fe00000 	.word	0x3fe00000
 80137c4:	408fffff 	.word	0x408fffff
 80137c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80137cc:	f04f 0200 	mov.w	r2, #0
 80137d0:	da05      	bge.n	80137de <__ieee754_pow+0x3de>
 80137d2:	4bd3      	ldr	r3, [pc, #844]	; (8013b20 <__ieee754_pow+0x720>)
 80137d4:	f7ec ff38 	bl	8000648 <__aeabi_dmul>
 80137d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80137dc:	460c      	mov	r4, r1
 80137de:	1523      	asrs	r3, r4, #20
 80137e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80137e4:	4413      	add	r3, r2
 80137e6:	9309      	str	r3, [sp, #36]	; 0x24
 80137e8:	4bce      	ldr	r3, [pc, #824]	; (8013b24 <__ieee754_pow+0x724>)
 80137ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80137ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80137f2:	429c      	cmp	r4, r3
 80137f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80137f8:	dd08      	ble.n	801380c <__ieee754_pow+0x40c>
 80137fa:	4bcb      	ldr	r3, [pc, #812]	; (8013b28 <__ieee754_pow+0x728>)
 80137fc:	429c      	cmp	r4, r3
 80137fe:	f340 815e 	ble.w	8013abe <__ieee754_pow+0x6be>
 8013802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013804:	3301      	adds	r3, #1
 8013806:	9309      	str	r3, [sp, #36]	; 0x24
 8013808:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801380c:	f04f 0a00 	mov.w	sl, #0
 8013810:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013814:	930c      	str	r3, [sp, #48]	; 0x30
 8013816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013818:	4bc4      	ldr	r3, [pc, #784]	; (8013b2c <__ieee754_pow+0x72c>)
 801381a:	4413      	add	r3, r2
 801381c:	ed93 7b00 	vldr	d7, [r3]
 8013820:	4629      	mov	r1, r5
 8013822:	ec53 2b17 	vmov	r2, r3, d7
 8013826:	ed8d 7b06 	vstr	d7, [sp, #24]
 801382a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801382e:	f7ec fd53 	bl	80002d8 <__aeabi_dsub>
 8013832:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013836:	4606      	mov	r6, r0
 8013838:	460f      	mov	r7, r1
 801383a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801383e:	f7ec fd4d 	bl	80002dc <__adddf3>
 8013842:	4602      	mov	r2, r0
 8013844:	460b      	mov	r3, r1
 8013846:	2000      	movs	r0, #0
 8013848:	49b9      	ldr	r1, [pc, #740]	; (8013b30 <__ieee754_pow+0x730>)
 801384a:	f7ed f827 	bl	800089c <__aeabi_ddiv>
 801384e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013852:	4602      	mov	r2, r0
 8013854:	460b      	mov	r3, r1
 8013856:	4630      	mov	r0, r6
 8013858:	4639      	mov	r1, r7
 801385a:	f7ec fef5 	bl	8000648 <__aeabi_dmul>
 801385e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013862:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013866:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801386a:	2300      	movs	r3, #0
 801386c:	9302      	str	r3, [sp, #8]
 801386e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013872:	106d      	asrs	r5, r5, #1
 8013874:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013878:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801387c:	2200      	movs	r2, #0
 801387e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013882:	4640      	mov	r0, r8
 8013884:	4649      	mov	r1, r9
 8013886:	4614      	mov	r4, r2
 8013888:	461d      	mov	r5, r3
 801388a:	f7ec fedd 	bl	8000648 <__aeabi_dmul>
 801388e:	4602      	mov	r2, r0
 8013890:	460b      	mov	r3, r1
 8013892:	4630      	mov	r0, r6
 8013894:	4639      	mov	r1, r7
 8013896:	f7ec fd1f 	bl	80002d8 <__aeabi_dsub>
 801389a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801389e:	4606      	mov	r6, r0
 80138a0:	460f      	mov	r7, r1
 80138a2:	4620      	mov	r0, r4
 80138a4:	4629      	mov	r1, r5
 80138a6:	f7ec fd17 	bl	80002d8 <__aeabi_dsub>
 80138aa:	4602      	mov	r2, r0
 80138ac:	460b      	mov	r3, r1
 80138ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80138b2:	f7ec fd11 	bl	80002d8 <__aeabi_dsub>
 80138b6:	4642      	mov	r2, r8
 80138b8:	464b      	mov	r3, r9
 80138ba:	f7ec fec5 	bl	8000648 <__aeabi_dmul>
 80138be:	4602      	mov	r2, r0
 80138c0:	460b      	mov	r3, r1
 80138c2:	4630      	mov	r0, r6
 80138c4:	4639      	mov	r1, r7
 80138c6:	f7ec fd07 	bl	80002d8 <__aeabi_dsub>
 80138ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80138ce:	f7ec febb 	bl	8000648 <__aeabi_dmul>
 80138d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80138da:	4610      	mov	r0, r2
 80138dc:	4619      	mov	r1, r3
 80138de:	f7ec feb3 	bl	8000648 <__aeabi_dmul>
 80138e2:	a37b      	add	r3, pc, #492	; (adr r3, 8013ad0 <__ieee754_pow+0x6d0>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	4604      	mov	r4, r0
 80138ea:	460d      	mov	r5, r1
 80138ec:	f7ec feac 	bl	8000648 <__aeabi_dmul>
 80138f0:	a379      	add	r3, pc, #484	; (adr r3, 8013ad8 <__ieee754_pow+0x6d8>)
 80138f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f6:	f7ec fcf1 	bl	80002dc <__adddf3>
 80138fa:	4622      	mov	r2, r4
 80138fc:	462b      	mov	r3, r5
 80138fe:	f7ec fea3 	bl	8000648 <__aeabi_dmul>
 8013902:	a377      	add	r3, pc, #476	; (adr r3, 8013ae0 <__ieee754_pow+0x6e0>)
 8013904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013908:	f7ec fce8 	bl	80002dc <__adddf3>
 801390c:	4622      	mov	r2, r4
 801390e:	462b      	mov	r3, r5
 8013910:	f7ec fe9a 	bl	8000648 <__aeabi_dmul>
 8013914:	a374      	add	r3, pc, #464	; (adr r3, 8013ae8 <__ieee754_pow+0x6e8>)
 8013916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391a:	f7ec fcdf 	bl	80002dc <__adddf3>
 801391e:	4622      	mov	r2, r4
 8013920:	462b      	mov	r3, r5
 8013922:	f7ec fe91 	bl	8000648 <__aeabi_dmul>
 8013926:	a372      	add	r3, pc, #456	; (adr r3, 8013af0 <__ieee754_pow+0x6f0>)
 8013928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392c:	f7ec fcd6 	bl	80002dc <__adddf3>
 8013930:	4622      	mov	r2, r4
 8013932:	462b      	mov	r3, r5
 8013934:	f7ec fe88 	bl	8000648 <__aeabi_dmul>
 8013938:	a36f      	add	r3, pc, #444	; (adr r3, 8013af8 <__ieee754_pow+0x6f8>)
 801393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393e:	f7ec fccd 	bl	80002dc <__adddf3>
 8013942:	4622      	mov	r2, r4
 8013944:	4606      	mov	r6, r0
 8013946:	460f      	mov	r7, r1
 8013948:	462b      	mov	r3, r5
 801394a:	4620      	mov	r0, r4
 801394c:	4629      	mov	r1, r5
 801394e:	f7ec fe7b 	bl	8000648 <__aeabi_dmul>
 8013952:	4602      	mov	r2, r0
 8013954:	460b      	mov	r3, r1
 8013956:	4630      	mov	r0, r6
 8013958:	4639      	mov	r1, r7
 801395a:	f7ec fe75 	bl	8000648 <__aeabi_dmul>
 801395e:	4642      	mov	r2, r8
 8013960:	4604      	mov	r4, r0
 8013962:	460d      	mov	r5, r1
 8013964:	464b      	mov	r3, r9
 8013966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801396a:	f7ec fcb7 	bl	80002dc <__adddf3>
 801396e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013972:	f7ec fe69 	bl	8000648 <__aeabi_dmul>
 8013976:	4622      	mov	r2, r4
 8013978:	462b      	mov	r3, r5
 801397a:	f7ec fcaf 	bl	80002dc <__adddf3>
 801397e:	4642      	mov	r2, r8
 8013980:	4606      	mov	r6, r0
 8013982:	460f      	mov	r7, r1
 8013984:	464b      	mov	r3, r9
 8013986:	4640      	mov	r0, r8
 8013988:	4649      	mov	r1, r9
 801398a:	f7ec fe5d 	bl	8000648 <__aeabi_dmul>
 801398e:	2200      	movs	r2, #0
 8013990:	4b68      	ldr	r3, [pc, #416]	; (8013b34 <__ieee754_pow+0x734>)
 8013992:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013996:	f7ec fca1 	bl	80002dc <__adddf3>
 801399a:	4632      	mov	r2, r6
 801399c:	463b      	mov	r3, r7
 801399e:	f7ec fc9d 	bl	80002dc <__adddf3>
 80139a2:	9802      	ldr	r0, [sp, #8]
 80139a4:	460d      	mov	r5, r1
 80139a6:	4604      	mov	r4, r0
 80139a8:	4602      	mov	r2, r0
 80139aa:	460b      	mov	r3, r1
 80139ac:	4640      	mov	r0, r8
 80139ae:	4649      	mov	r1, r9
 80139b0:	f7ec fe4a 	bl	8000648 <__aeabi_dmul>
 80139b4:	2200      	movs	r2, #0
 80139b6:	4680      	mov	r8, r0
 80139b8:	4689      	mov	r9, r1
 80139ba:	4b5e      	ldr	r3, [pc, #376]	; (8013b34 <__ieee754_pow+0x734>)
 80139bc:	4620      	mov	r0, r4
 80139be:	4629      	mov	r1, r5
 80139c0:	f7ec fc8a 	bl	80002d8 <__aeabi_dsub>
 80139c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139c8:	f7ec fc86 	bl	80002d8 <__aeabi_dsub>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	4630      	mov	r0, r6
 80139d2:	4639      	mov	r1, r7
 80139d4:	f7ec fc80 	bl	80002d8 <__aeabi_dsub>
 80139d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139dc:	f7ec fe34 	bl	8000648 <__aeabi_dmul>
 80139e0:	4622      	mov	r2, r4
 80139e2:	4606      	mov	r6, r0
 80139e4:	460f      	mov	r7, r1
 80139e6:	462b      	mov	r3, r5
 80139e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139ec:	f7ec fe2c 	bl	8000648 <__aeabi_dmul>
 80139f0:	4602      	mov	r2, r0
 80139f2:	460b      	mov	r3, r1
 80139f4:	4630      	mov	r0, r6
 80139f6:	4639      	mov	r1, r7
 80139f8:	f7ec fc70 	bl	80002dc <__adddf3>
 80139fc:	4606      	mov	r6, r0
 80139fe:	460f      	mov	r7, r1
 8013a00:	4602      	mov	r2, r0
 8013a02:	460b      	mov	r3, r1
 8013a04:	4640      	mov	r0, r8
 8013a06:	4649      	mov	r1, r9
 8013a08:	f7ec fc68 	bl	80002dc <__adddf3>
 8013a0c:	9802      	ldr	r0, [sp, #8]
 8013a0e:	a33c      	add	r3, pc, #240	; (adr r3, 8013b00 <__ieee754_pow+0x700>)
 8013a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a14:	4604      	mov	r4, r0
 8013a16:	460d      	mov	r5, r1
 8013a18:	f7ec fe16 	bl	8000648 <__aeabi_dmul>
 8013a1c:	4642      	mov	r2, r8
 8013a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013a22:	464b      	mov	r3, r9
 8013a24:	4620      	mov	r0, r4
 8013a26:	4629      	mov	r1, r5
 8013a28:	f7ec fc56 	bl	80002d8 <__aeabi_dsub>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4630      	mov	r0, r6
 8013a32:	4639      	mov	r1, r7
 8013a34:	f7ec fc50 	bl	80002d8 <__aeabi_dsub>
 8013a38:	a333      	add	r3, pc, #204	; (adr r3, 8013b08 <__ieee754_pow+0x708>)
 8013a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3e:	f7ec fe03 	bl	8000648 <__aeabi_dmul>
 8013a42:	a333      	add	r3, pc, #204	; (adr r3, 8013b10 <__ieee754_pow+0x710>)
 8013a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a48:	4606      	mov	r6, r0
 8013a4a:	460f      	mov	r7, r1
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7ec fdfa 	bl	8000648 <__aeabi_dmul>
 8013a54:	4602      	mov	r2, r0
 8013a56:	460b      	mov	r3, r1
 8013a58:	4630      	mov	r0, r6
 8013a5a:	4639      	mov	r1, r7
 8013a5c:	f7ec fc3e 	bl	80002dc <__adddf3>
 8013a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a62:	4b35      	ldr	r3, [pc, #212]	; (8013b38 <__ieee754_pow+0x738>)
 8013a64:	4413      	add	r3, r2
 8013a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6a:	f7ec fc37 	bl	80002dc <__adddf3>
 8013a6e:	4604      	mov	r4, r0
 8013a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a72:	460d      	mov	r5, r1
 8013a74:	f7ec fd7e 	bl	8000574 <__aeabi_i2d>
 8013a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a7a:	4b30      	ldr	r3, [pc, #192]	; (8013b3c <__ieee754_pow+0x73c>)
 8013a7c:	4413      	add	r3, r2
 8013a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a82:	4606      	mov	r6, r0
 8013a84:	460f      	mov	r7, r1
 8013a86:	4622      	mov	r2, r4
 8013a88:	462b      	mov	r3, r5
 8013a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a8e:	f7ec fc25 	bl	80002dc <__adddf3>
 8013a92:	4642      	mov	r2, r8
 8013a94:	464b      	mov	r3, r9
 8013a96:	f7ec fc21 	bl	80002dc <__adddf3>
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	463b      	mov	r3, r7
 8013a9e:	f7ec fc1d 	bl	80002dc <__adddf3>
 8013aa2:	9802      	ldr	r0, [sp, #8]
 8013aa4:	4632      	mov	r2, r6
 8013aa6:	463b      	mov	r3, r7
 8013aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013aac:	f7ec fc14 	bl	80002d8 <__aeabi_dsub>
 8013ab0:	4642      	mov	r2, r8
 8013ab2:	464b      	mov	r3, r9
 8013ab4:	f7ec fc10 	bl	80002d8 <__aeabi_dsub>
 8013ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013abc:	e607      	b.n	80136ce <__ieee754_pow+0x2ce>
 8013abe:	f04f 0a01 	mov.w	sl, #1
 8013ac2:	e6a5      	b.n	8013810 <__ieee754_pow+0x410>
 8013ac4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013b18 <__ieee754_pow+0x718>
 8013ac8:	e613      	b.n	80136f2 <__ieee754_pow+0x2f2>
 8013aca:	bf00      	nop
 8013acc:	f3af 8000 	nop.w
 8013ad0:	4a454eef 	.word	0x4a454eef
 8013ad4:	3fca7e28 	.word	0x3fca7e28
 8013ad8:	93c9db65 	.word	0x93c9db65
 8013adc:	3fcd864a 	.word	0x3fcd864a
 8013ae0:	a91d4101 	.word	0xa91d4101
 8013ae4:	3fd17460 	.word	0x3fd17460
 8013ae8:	518f264d 	.word	0x518f264d
 8013aec:	3fd55555 	.word	0x3fd55555
 8013af0:	db6fabff 	.word	0xdb6fabff
 8013af4:	3fdb6db6 	.word	0x3fdb6db6
 8013af8:	33333303 	.word	0x33333303
 8013afc:	3fe33333 	.word	0x3fe33333
 8013b00:	e0000000 	.word	0xe0000000
 8013b04:	3feec709 	.word	0x3feec709
 8013b08:	dc3a03fd 	.word	0xdc3a03fd
 8013b0c:	3feec709 	.word	0x3feec709
 8013b10:	145b01f5 	.word	0x145b01f5
 8013b14:	be3e2fe0 	.word	0xbe3e2fe0
 8013b18:	00000000 	.word	0x00000000
 8013b1c:	3ff00000 	.word	0x3ff00000
 8013b20:	43400000 	.word	0x43400000
 8013b24:	0003988e 	.word	0x0003988e
 8013b28:	000bb679 	.word	0x000bb679
 8013b2c:	08015910 	.word	0x08015910
 8013b30:	3ff00000 	.word	0x3ff00000
 8013b34:	40080000 	.word	0x40080000
 8013b38:	08015930 	.word	0x08015930
 8013b3c:	08015920 	.word	0x08015920
 8013b40:	a3b4      	add	r3, pc, #720	; (adr r3, 8013e14 <__ieee754_pow+0xa14>)
 8013b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b46:	4640      	mov	r0, r8
 8013b48:	4649      	mov	r1, r9
 8013b4a:	f7ec fbc7 	bl	80002dc <__adddf3>
 8013b4e:	4622      	mov	r2, r4
 8013b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b54:	462b      	mov	r3, r5
 8013b56:	4630      	mov	r0, r6
 8013b58:	4639      	mov	r1, r7
 8013b5a:	f7ec fbbd 	bl	80002d8 <__aeabi_dsub>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	460b      	mov	r3, r1
 8013b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b66:	f7ec ffff 	bl	8000b68 <__aeabi_dcmpgt>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	f47f adfe 	bne.w	801376c <__ieee754_pow+0x36c>
 8013b70:	4aa3      	ldr	r2, [pc, #652]	; (8013e00 <__ieee754_pow+0xa00>)
 8013b72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b76:	4293      	cmp	r3, r2
 8013b78:	f340 810a 	ble.w	8013d90 <__ieee754_pow+0x990>
 8013b7c:	151b      	asrs	r3, r3, #20
 8013b7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013b82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013b86:	fa4a f303 	asr.w	r3, sl, r3
 8013b8a:	445b      	add	r3, fp
 8013b8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013b90:	4e9c      	ldr	r6, [pc, #624]	; (8013e04 <__ieee754_pow+0xa04>)
 8013b92:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013b96:	4116      	asrs	r6, r2
 8013b98:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	ea23 0106 	bic.w	r1, r3, r6
 8013ba2:	f1c2 0214 	rsb	r2, r2, #20
 8013ba6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013baa:	fa4a fa02 	asr.w	sl, sl, r2
 8013bae:	f1bb 0f00 	cmp.w	fp, #0
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	4629      	mov	r1, r5
 8013bba:	bfb8      	it	lt
 8013bbc:	f1ca 0a00 	rsblt	sl, sl, #0
 8013bc0:	f7ec fb8a 	bl	80002d8 <__aeabi_dsub>
 8013bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8013bc8:	4642      	mov	r2, r8
 8013bca:	464b      	mov	r3, r9
 8013bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bd0:	f7ec fb84 	bl	80002dc <__adddf3>
 8013bd4:	2000      	movs	r0, #0
 8013bd6:	a378      	add	r3, pc, #480	; (adr r3, 8013db8 <__ieee754_pow+0x9b8>)
 8013bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bdc:	4604      	mov	r4, r0
 8013bde:	460d      	mov	r5, r1
 8013be0:	f7ec fd32 	bl	8000648 <__aeabi_dmul>
 8013be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	4620      	mov	r0, r4
 8013bee:	4629      	mov	r1, r5
 8013bf0:	f7ec fb72 	bl	80002d8 <__aeabi_dsub>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	460b      	mov	r3, r1
 8013bf8:	4640      	mov	r0, r8
 8013bfa:	4649      	mov	r1, r9
 8013bfc:	f7ec fb6c 	bl	80002d8 <__aeabi_dsub>
 8013c00:	a36f      	add	r3, pc, #444	; (adr r3, 8013dc0 <__ieee754_pow+0x9c0>)
 8013c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c06:	f7ec fd1f 	bl	8000648 <__aeabi_dmul>
 8013c0a:	a36f      	add	r3, pc, #444	; (adr r3, 8013dc8 <__ieee754_pow+0x9c8>)
 8013c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c10:	4680      	mov	r8, r0
 8013c12:	4689      	mov	r9, r1
 8013c14:	4620      	mov	r0, r4
 8013c16:	4629      	mov	r1, r5
 8013c18:	f7ec fd16 	bl	8000648 <__aeabi_dmul>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	460b      	mov	r3, r1
 8013c20:	4640      	mov	r0, r8
 8013c22:	4649      	mov	r1, r9
 8013c24:	f7ec fb5a 	bl	80002dc <__adddf3>
 8013c28:	4604      	mov	r4, r0
 8013c2a:	460d      	mov	r5, r1
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	460b      	mov	r3, r1
 8013c30:	4630      	mov	r0, r6
 8013c32:	4639      	mov	r1, r7
 8013c34:	f7ec fb52 	bl	80002dc <__adddf3>
 8013c38:	4632      	mov	r2, r6
 8013c3a:	463b      	mov	r3, r7
 8013c3c:	4680      	mov	r8, r0
 8013c3e:	4689      	mov	r9, r1
 8013c40:	f7ec fb4a 	bl	80002d8 <__aeabi_dsub>
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	4620      	mov	r0, r4
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	f7ec fb44 	bl	80002d8 <__aeabi_dsub>
 8013c50:	4642      	mov	r2, r8
 8013c52:	4606      	mov	r6, r0
 8013c54:	460f      	mov	r7, r1
 8013c56:	464b      	mov	r3, r9
 8013c58:	4640      	mov	r0, r8
 8013c5a:	4649      	mov	r1, r9
 8013c5c:	f7ec fcf4 	bl	8000648 <__aeabi_dmul>
 8013c60:	a35b      	add	r3, pc, #364	; (adr r3, 8013dd0 <__ieee754_pow+0x9d0>)
 8013c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c66:	4604      	mov	r4, r0
 8013c68:	460d      	mov	r5, r1
 8013c6a:	f7ec fced 	bl	8000648 <__aeabi_dmul>
 8013c6e:	a35a      	add	r3, pc, #360	; (adr r3, 8013dd8 <__ieee754_pow+0x9d8>)
 8013c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c74:	f7ec fb30 	bl	80002d8 <__aeabi_dsub>
 8013c78:	4622      	mov	r2, r4
 8013c7a:	462b      	mov	r3, r5
 8013c7c:	f7ec fce4 	bl	8000648 <__aeabi_dmul>
 8013c80:	a357      	add	r3, pc, #348	; (adr r3, 8013de0 <__ieee754_pow+0x9e0>)
 8013c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c86:	f7ec fb29 	bl	80002dc <__adddf3>
 8013c8a:	4622      	mov	r2, r4
 8013c8c:	462b      	mov	r3, r5
 8013c8e:	f7ec fcdb 	bl	8000648 <__aeabi_dmul>
 8013c92:	a355      	add	r3, pc, #340	; (adr r3, 8013de8 <__ieee754_pow+0x9e8>)
 8013c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c98:	f7ec fb1e 	bl	80002d8 <__aeabi_dsub>
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	f7ec fcd2 	bl	8000648 <__aeabi_dmul>
 8013ca4:	a352      	add	r3, pc, #328	; (adr r3, 8013df0 <__ieee754_pow+0x9f0>)
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	f7ec fb17 	bl	80002dc <__adddf3>
 8013cae:	4622      	mov	r2, r4
 8013cb0:	462b      	mov	r3, r5
 8013cb2:	f7ec fcc9 	bl	8000648 <__aeabi_dmul>
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	460b      	mov	r3, r1
 8013cba:	4640      	mov	r0, r8
 8013cbc:	4649      	mov	r1, r9
 8013cbe:	f7ec fb0b 	bl	80002d8 <__aeabi_dsub>
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	460d      	mov	r5, r1
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	4640      	mov	r0, r8
 8013ccc:	4649      	mov	r1, r9
 8013cce:	f7ec fcbb 	bl	8000648 <__aeabi_dmul>
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8013cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cdc:	4620      	mov	r0, r4
 8013cde:	4629      	mov	r1, r5
 8013ce0:	f7ec fafa 	bl	80002d8 <__aeabi_dsub>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	460b      	mov	r3, r1
 8013ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cec:	f7ec fdd6 	bl	800089c <__aeabi_ddiv>
 8013cf0:	4632      	mov	r2, r6
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	460d      	mov	r5, r1
 8013cf6:	463b      	mov	r3, r7
 8013cf8:	4640      	mov	r0, r8
 8013cfa:	4649      	mov	r1, r9
 8013cfc:	f7ec fca4 	bl	8000648 <__aeabi_dmul>
 8013d00:	4632      	mov	r2, r6
 8013d02:	463b      	mov	r3, r7
 8013d04:	f7ec faea 	bl	80002dc <__adddf3>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	4629      	mov	r1, r5
 8013d10:	f7ec fae2 	bl	80002d8 <__aeabi_dsub>
 8013d14:	4642      	mov	r2, r8
 8013d16:	464b      	mov	r3, r9
 8013d18:	f7ec fade 	bl	80002d8 <__aeabi_dsub>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	460b      	mov	r3, r1
 8013d20:	2000      	movs	r0, #0
 8013d22:	4939      	ldr	r1, [pc, #228]	; (8013e08 <__ieee754_pow+0xa08>)
 8013d24:	f7ec fad8 	bl	80002d8 <__aeabi_dsub>
 8013d28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013d2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013d30:	4602      	mov	r2, r0
 8013d32:	460b      	mov	r3, r1
 8013d34:	da2f      	bge.n	8013d96 <__ieee754_pow+0x996>
 8013d36:	4650      	mov	r0, sl
 8013d38:	ec43 2b10 	vmov	d0, r2, r3
 8013d3c:	f000 f9c0 	bl	80140c0 <scalbn>
 8013d40:	ec51 0b10 	vmov	r0, r1, d0
 8013d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d48:	f7ff bbf1 	b.w	801352e <__ieee754_pow+0x12e>
 8013d4c:	4b2f      	ldr	r3, [pc, #188]	; (8013e0c <__ieee754_pow+0xa0c>)
 8013d4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013d52:	429e      	cmp	r6, r3
 8013d54:	f77f af0c 	ble.w	8013b70 <__ieee754_pow+0x770>
 8013d58:	4b2d      	ldr	r3, [pc, #180]	; (8013e10 <__ieee754_pow+0xa10>)
 8013d5a:	440b      	add	r3, r1
 8013d5c:	4303      	orrs	r3, r0
 8013d5e:	d00b      	beq.n	8013d78 <__ieee754_pow+0x978>
 8013d60:	a325      	add	r3, pc, #148	; (adr r3, 8013df8 <__ieee754_pow+0x9f8>)
 8013d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d6a:	f7ec fc6d 	bl	8000648 <__aeabi_dmul>
 8013d6e:	a322      	add	r3, pc, #136	; (adr r3, 8013df8 <__ieee754_pow+0x9f8>)
 8013d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d74:	f7ff bbdb 	b.w	801352e <__ieee754_pow+0x12e>
 8013d78:	4622      	mov	r2, r4
 8013d7a:	462b      	mov	r3, r5
 8013d7c:	f7ec faac 	bl	80002d8 <__aeabi_dsub>
 8013d80:	4642      	mov	r2, r8
 8013d82:	464b      	mov	r3, r9
 8013d84:	f7ec fee6 	bl	8000b54 <__aeabi_dcmpge>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	f43f aef1 	beq.w	8013b70 <__ieee754_pow+0x770>
 8013d8e:	e7e7      	b.n	8013d60 <__ieee754_pow+0x960>
 8013d90:	f04f 0a00 	mov.w	sl, #0
 8013d94:	e718      	b.n	8013bc8 <__ieee754_pow+0x7c8>
 8013d96:	4621      	mov	r1, r4
 8013d98:	e7d4      	b.n	8013d44 <__ieee754_pow+0x944>
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	491a      	ldr	r1, [pc, #104]	; (8013e08 <__ieee754_pow+0xa08>)
 8013d9e:	f7ff bb8f 	b.w	80134c0 <__ieee754_pow+0xc0>
 8013da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013da6:	f7ff bb8b 	b.w	80134c0 <__ieee754_pow+0xc0>
 8013daa:	4630      	mov	r0, r6
 8013dac:	4639      	mov	r1, r7
 8013dae:	f7ff bb87 	b.w	80134c0 <__ieee754_pow+0xc0>
 8013db2:	4693      	mov	fp, r2
 8013db4:	f7ff bb98 	b.w	80134e8 <__ieee754_pow+0xe8>
 8013db8:	00000000 	.word	0x00000000
 8013dbc:	3fe62e43 	.word	0x3fe62e43
 8013dc0:	fefa39ef 	.word	0xfefa39ef
 8013dc4:	3fe62e42 	.word	0x3fe62e42
 8013dc8:	0ca86c39 	.word	0x0ca86c39
 8013dcc:	be205c61 	.word	0xbe205c61
 8013dd0:	72bea4d0 	.word	0x72bea4d0
 8013dd4:	3e663769 	.word	0x3e663769
 8013dd8:	c5d26bf1 	.word	0xc5d26bf1
 8013ddc:	3ebbbd41 	.word	0x3ebbbd41
 8013de0:	af25de2c 	.word	0xaf25de2c
 8013de4:	3f11566a 	.word	0x3f11566a
 8013de8:	16bebd93 	.word	0x16bebd93
 8013dec:	3f66c16c 	.word	0x3f66c16c
 8013df0:	5555553e 	.word	0x5555553e
 8013df4:	3fc55555 	.word	0x3fc55555
 8013df8:	c2f8f359 	.word	0xc2f8f359
 8013dfc:	01a56e1f 	.word	0x01a56e1f
 8013e00:	3fe00000 	.word	0x3fe00000
 8013e04:	000fffff 	.word	0x000fffff
 8013e08:	3ff00000 	.word	0x3ff00000
 8013e0c:	4090cbff 	.word	0x4090cbff
 8013e10:	3f6f3400 	.word	0x3f6f3400
 8013e14:	652b82fe 	.word	0x652b82fe
 8013e18:	3c971547 	.word	0x3c971547

08013e1c <__ieee754_sqrt>:
 8013e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e20:	4955      	ldr	r1, [pc, #340]	; (8013f78 <__ieee754_sqrt+0x15c>)
 8013e22:	ec55 4b10 	vmov	r4, r5, d0
 8013e26:	43a9      	bics	r1, r5
 8013e28:	462b      	mov	r3, r5
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	d112      	bne.n	8013e54 <__ieee754_sqrt+0x38>
 8013e2e:	ee10 2a10 	vmov	r2, s0
 8013e32:	ee10 0a10 	vmov	r0, s0
 8013e36:	4629      	mov	r1, r5
 8013e38:	f7ec fc06 	bl	8000648 <__aeabi_dmul>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	4620      	mov	r0, r4
 8013e42:	4629      	mov	r1, r5
 8013e44:	f7ec fa4a 	bl	80002dc <__adddf3>
 8013e48:	4604      	mov	r4, r0
 8013e4a:	460d      	mov	r5, r1
 8013e4c:	ec45 4b10 	vmov	d0, r4, r5
 8013e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e54:	2d00      	cmp	r5, #0
 8013e56:	ee10 0a10 	vmov	r0, s0
 8013e5a:	4621      	mov	r1, r4
 8013e5c:	dc0f      	bgt.n	8013e7e <__ieee754_sqrt+0x62>
 8013e5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013e62:	4330      	orrs	r0, r6
 8013e64:	d0f2      	beq.n	8013e4c <__ieee754_sqrt+0x30>
 8013e66:	b155      	cbz	r5, 8013e7e <__ieee754_sqrt+0x62>
 8013e68:	ee10 2a10 	vmov	r2, s0
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f7ec fa32 	bl	80002d8 <__aeabi_dsub>
 8013e74:	4602      	mov	r2, r0
 8013e76:	460b      	mov	r3, r1
 8013e78:	f7ec fd10 	bl	800089c <__aeabi_ddiv>
 8013e7c:	e7e4      	b.n	8013e48 <__ieee754_sqrt+0x2c>
 8013e7e:	151b      	asrs	r3, r3, #20
 8013e80:	d073      	beq.n	8013f6a <__ieee754_sqrt+0x14e>
 8013e82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013e86:	07dd      	lsls	r5, r3, #31
 8013e88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013e8c:	bf48      	it	mi
 8013e8e:	0fc8      	lsrmi	r0, r1, #31
 8013e90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013e94:	bf44      	itt	mi
 8013e96:	0049      	lslmi	r1, r1, #1
 8013e98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013e9c:	2500      	movs	r5, #0
 8013e9e:	1058      	asrs	r0, r3, #1
 8013ea0:	0fcb      	lsrs	r3, r1, #31
 8013ea2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013ea6:	0049      	lsls	r1, r1, #1
 8013ea8:	2316      	movs	r3, #22
 8013eaa:	462c      	mov	r4, r5
 8013eac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013eb0:	19a7      	adds	r7, r4, r6
 8013eb2:	4297      	cmp	r7, r2
 8013eb4:	bfde      	ittt	le
 8013eb6:	19bc      	addle	r4, r7, r6
 8013eb8:	1bd2      	suble	r2, r2, r7
 8013eba:	19ad      	addle	r5, r5, r6
 8013ebc:	0fcf      	lsrs	r7, r1, #31
 8013ebe:	3b01      	subs	r3, #1
 8013ec0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013ec4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013ec8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013ecc:	d1f0      	bne.n	8013eb0 <__ieee754_sqrt+0x94>
 8013ece:	f04f 0c20 	mov.w	ip, #32
 8013ed2:	469e      	mov	lr, r3
 8013ed4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013ed8:	42a2      	cmp	r2, r4
 8013eda:	eb06 070e 	add.w	r7, r6, lr
 8013ede:	dc02      	bgt.n	8013ee6 <__ieee754_sqrt+0xca>
 8013ee0:	d112      	bne.n	8013f08 <__ieee754_sqrt+0xec>
 8013ee2:	428f      	cmp	r7, r1
 8013ee4:	d810      	bhi.n	8013f08 <__ieee754_sqrt+0xec>
 8013ee6:	2f00      	cmp	r7, #0
 8013ee8:	eb07 0e06 	add.w	lr, r7, r6
 8013eec:	da42      	bge.n	8013f74 <__ieee754_sqrt+0x158>
 8013eee:	f1be 0f00 	cmp.w	lr, #0
 8013ef2:	db3f      	blt.n	8013f74 <__ieee754_sqrt+0x158>
 8013ef4:	f104 0801 	add.w	r8, r4, #1
 8013ef8:	1b12      	subs	r2, r2, r4
 8013efa:	428f      	cmp	r7, r1
 8013efc:	bf88      	it	hi
 8013efe:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013f02:	1bc9      	subs	r1, r1, r7
 8013f04:	4433      	add	r3, r6
 8013f06:	4644      	mov	r4, r8
 8013f08:	0052      	lsls	r2, r2, #1
 8013f0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8013f0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013f12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013f16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013f1a:	d1dd      	bne.n	8013ed8 <__ieee754_sqrt+0xbc>
 8013f1c:	430a      	orrs	r2, r1
 8013f1e:	d006      	beq.n	8013f2e <__ieee754_sqrt+0x112>
 8013f20:	1c5c      	adds	r4, r3, #1
 8013f22:	bf13      	iteet	ne
 8013f24:	3301      	addne	r3, #1
 8013f26:	3501      	addeq	r5, #1
 8013f28:	4663      	moveq	r3, ip
 8013f2a:	f023 0301 	bicne.w	r3, r3, #1
 8013f2e:	106a      	asrs	r2, r5, #1
 8013f30:	085b      	lsrs	r3, r3, #1
 8013f32:	07e9      	lsls	r1, r5, #31
 8013f34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013f38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013f3c:	bf48      	it	mi
 8013f3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013f42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013f46:	461c      	mov	r4, r3
 8013f48:	e780      	b.n	8013e4c <__ieee754_sqrt+0x30>
 8013f4a:	0aca      	lsrs	r2, r1, #11
 8013f4c:	3815      	subs	r0, #21
 8013f4e:	0549      	lsls	r1, r1, #21
 8013f50:	2a00      	cmp	r2, #0
 8013f52:	d0fa      	beq.n	8013f4a <__ieee754_sqrt+0x12e>
 8013f54:	02d6      	lsls	r6, r2, #11
 8013f56:	d50a      	bpl.n	8013f6e <__ieee754_sqrt+0x152>
 8013f58:	f1c3 0420 	rsb	r4, r3, #32
 8013f5c:	fa21 f404 	lsr.w	r4, r1, r4
 8013f60:	1e5d      	subs	r5, r3, #1
 8013f62:	4099      	lsls	r1, r3
 8013f64:	4322      	orrs	r2, r4
 8013f66:	1b43      	subs	r3, r0, r5
 8013f68:	e78b      	b.n	8013e82 <__ieee754_sqrt+0x66>
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	e7f0      	b.n	8013f50 <__ieee754_sqrt+0x134>
 8013f6e:	0052      	lsls	r2, r2, #1
 8013f70:	3301      	adds	r3, #1
 8013f72:	e7ef      	b.n	8013f54 <__ieee754_sqrt+0x138>
 8013f74:	46a0      	mov	r8, r4
 8013f76:	e7bf      	b.n	8013ef8 <__ieee754_sqrt+0xdc>
 8013f78:	7ff00000 	.word	0x7ff00000

08013f7c <fabs>:
 8013f7c:	ec51 0b10 	vmov	r0, r1, d0
 8013f80:	ee10 2a10 	vmov	r2, s0
 8013f84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f88:	ec43 2b10 	vmov	d0, r2, r3
 8013f8c:	4770      	bx	lr

08013f8e <finite>:
 8013f8e:	ee10 3a90 	vmov	r3, s1
 8013f92:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013f96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013f9a:	0fc0      	lsrs	r0, r0, #31
 8013f9c:	4770      	bx	lr

08013f9e <matherr>:
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	4770      	bx	lr
 8013fa2:	0000      	movs	r0, r0
 8013fa4:	0000      	movs	r0, r0
	...

08013fa8 <nan>:
 8013fa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013fb0 <nan+0x8>
 8013fac:	4770      	bx	lr
 8013fae:	bf00      	nop
 8013fb0:	00000000 	.word	0x00000000
 8013fb4:	7ff80000 	.word	0x7ff80000

08013fb8 <rint>:
 8013fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fba:	ec51 0b10 	vmov	r0, r1, d0
 8013fbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013fc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013fc6:	2e13      	cmp	r6, #19
 8013fc8:	460b      	mov	r3, r1
 8013fca:	ee10 4a10 	vmov	r4, s0
 8013fce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013fd2:	dc56      	bgt.n	8014082 <rint+0xca>
 8013fd4:	2e00      	cmp	r6, #0
 8013fd6:	da2b      	bge.n	8014030 <rint+0x78>
 8013fd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013fdc:	4302      	orrs	r2, r0
 8013fde:	d023      	beq.n	8014028 <rint+0x70>
 8013fe0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013fe4:	4302      	orrs	r2, r0
 8013fe6:	4254      	negs	r4, r2
 8013fe8:	4314      	orrs	r4, r2
 8013fea:	0c4b      	lsrs	r3, r1, #17
 8013fec:	0b24      	lsrs	r4, r4, #12
 8013fee:	045b      	lsls	r3, r3, #17
 8013ff0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013ff4:	ea44 0103 	orr.w	r1, r4, r3
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	492f      	ldr	r1, [pc, #188]	; (80140b8 <rint+0x100>)
 8013ffc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014000:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014004:	4602      	mov	r2, r0
 8014006:	4639      	mov	r1, r7
 8014008:	4630      	mov	r0, r6
 801400a:	f7ec f967 	bl	80002dc <__adddf3>
 801400e:	e9cd 0100 	strd	r0, r1, [sp]
 8014012:	463b      	mov	r3, r7
 8014014:	4632      	mov	r2, r6
 8014016:	e9dd 0100 	ldrd	r0, r1, [sp]
 801401a:	f7ec f95d 	bl	80002d8 <__aeabi_dsub>
 801401e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014022:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014026:	4639      	mov	r1, r7
 8014028:	ec41 0b10 	vmov	d0, r0, r1
 801402c:	b003      	add	sp, #12
 801402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014030:	4a22      	ldr	r2, [pc, #136]	; (80140bc <rint+0x104>)
 8014032:	4132      	asrs	r2, r6
 8014034:	ea01 0702 	and.w	r7, r1, r2
 8014038:	4307      	orrs	r7, r0
 801403a:	d0f5      	beq.n	8014028 <rint+0x70>
 801403c:	0852      	lsrs	r2, r2, #1
 801403e:	4011      	ands	r1, r2
 8014040:	430c      	orrs	r4, r1
 8014042:	d00b      	beq.n	801405c <rint+0xa4>
 8014044:	ea23 0202 	bic.w	r2, r3, r2
 8014048:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801404c:	2e13      	cmp	r6, #19
 801404e:	fa43 f306 	asr.w	r3, r3, r6
 8014052:	bf0c      	ite	eq
 8014054:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014058:	2400      	movne	r4, #0
 801405a:	4313      	orrs	r3, r2
 801405c:	4916      	ldr	r1, [pc, #88]	; (80140b8 <rint+0x100>)
 801405e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014062:	4622      	mov	r2, r4
 8014064:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014068:	4620      	mov	r0, r4
 801406a:	4629      	mov	r1, r5
 801406c:	f7ec f936 	bl	80002dc <__adddf3>
 8014070:	e9cd 0100 	strd	r0, r1, [sp]
 8014074:	4622      	mov	r2, r4
 8014076:	462b      	mov	r3, r5
 8014078:	e9dd 0100 	ldrd	r0, r1, [sp]
 801407c:	f7ec f92c 	bl	80002d8 <__aeabi_dsub>
 8014080:	e7d2      	b.n	8014028 <rint+0x70>
 8014082:	2e33      	cmp	r6, #51	; 0x33
 8014084:	dd07      	ble.n	8014096 <rint+0xde>
 8014086:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801408a:	d1cd      	bne.n	8014028 <rint+0x70>
 801408c:	ee10 2a10 	vmov	r2, s0
 8014090:	f7ec f924 	bl	80002dc <__adddf3>
 8014094:	e7c8      	b.n	8014028 <rint+0x70>
 8014096:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801409a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801409e:	40f2      	lsrs	r2, r6
 80140a0:	4210      	tst	r0, r2
 80140a2:	d0c1      	beq.n	8014028 <rint+0x70>
 80140a4:	0852      	lsrs	r2, r2, #1
 80140a6:	4210      	tst	r0, r2
 80140a8:	bf1f      	itttt	ne
 80140aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80140ae:	ea20 0202 	bicne.w	r2, r0, r2
 80140b2:	4134      	asrne	r4, r6
 80140b4:	4314      	orrne	r4, r2
 80140b6:	e7d1      	b.n	801405c <rint+0xa4>
 80140b8:	08015940 	.word	0x08015940
 80140bc:	000fffff 	.word	0x000fffff

080140c0 <scalbn>:
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	ec55 4b10 	vmov	r4, r5, d0
 80140c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80140ca:	4606      	mov	r6, r0
 80140cc:	462b      	mov	r3, r5
 80140ce:	b9aa      	cbnz	r2, 80140fc <scalbn+0x3c>
 80140d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80140d4:	4323      	orrs	r3, r4
 80140d6:	d03b      	beq.n	8014150 <scalbn+0x90>
 80140d8:	4b31      	ldr	r3, [pc, #196]	; (80141a0 <scalbn+0xe0>)
 80140da:	4629      	mov	r1, r5
 80140dc:	2200      	movs	r2, #0
 80140de:	ee10 0a10 	vmov	r0, s0
 80140e2:	f7ec fab1 	bl	8000648 <__aeabi_dmul>
 80140e6:	4b2f      	ldr	r3, [pc, #188]	; (80141a4 <scalbn+0xe4>)
 80140e8:	429e      	cmp	r6, r3
 80140ea:	4604      	mov	r4, r0
 80140ec:	460d      	mov	r5, r1
 80140ee:	da12      	bge.n	8014116 <scalbn+0x56>
 80140f0:	a327      	add	r3, pc, #156	; (adr r3, 8014190 <scalbn+0xd0>)
 80140f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f6:	f7ec faa7 	bl	8000648 <__aeabi_dmul>
 80140fa:	e009      	b.n	8014110 <scalbn+0x50>
 80140fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014100:	428a      	cmp	r2, r1
 8014102:	d10c      	bne.n	801411e <scalbn+0x5e>
 8014104:	ee10 2a10 	vmov	r2, s0
 8014108:	4620      	mov	r0, r4
 801410a:	4629      	mov	r1, r5
 801410c:	f7ec f8e6 	bl	80002dc <__adddf3>
 8014110:	4604      	mov	r4, r0
 8014112:	460d      	mov	r5, r1
 8014114:	e01c      	b.n	8014150 <scalbn+0x90>
 8014116:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801411a:	460b      	mov	r3, r1
 801411c:	3a36      	subs	r2, #54	; 0x36
 801411e:	4432      	add	r2, r6
 8014120:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014124:	428a      	cmp	r2, r1
 8014126:	dd0b      	ble.n	8014140 <scalbn+0x80>
 8014128:	ec45 4b11 	vmov	d1, r4, r5
 801412c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014198 <scalbn+0xd8>
 8014130:	f000 f9f0 	bl	8014514 <copysign>
 8014134:	a318      	add	r3, pc, #96	; (adr r3, 8014198 <scalbn+0xd8>)
 8014136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413a:	ec51 0b10 	vmov	r0, r1, d0
 801413e:	e7da      	b.n	80140f6 <scalbn+0x36>
 8014140:	2a00      	cmp	r2, #0
 8014142:	dd08      	ble.n	8014156 <scalbn+0x96>
 8014144:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801414c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014150:	ec45 4b10 	vmov	d0, r4, r5
 8014154:	bd70      	pop	{r4, r5, r6, pc}
 8014156:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801415a:	da0d      	bge.n	8014178 <scalbn+0xb8>
 801415c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014160:	429e      	cmp	r6, r3
 8014162:	ec45 4b11 	vmov	d1, r4, r5
 8014166:	dce1      	bgt.n	801412c <scalbn+0x6c>
 8014168:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014190 <scalbn+0xd0>
 801416c:	f000 f9d2 	bl	8014514 <copysign>
 8014170:	a307      	add	r3, pc, #28	; (adr r3, 8014190 <scalbn+0xd0>)
 8014172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014176:	e7e0      	b.n	801413a <scalbn+0x7a>
 8014178:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801417c:	3236      	adds	r2, #54	; 0x36
 801417e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014182:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014186:	4620      	mov	r0, r4
 8014188:	4629      	mov	r1, r5
 801418a:	2200      	movs	r2, #0
 801418c:	4b06      	ldr	r3, [pc, #24]	; (80141a8 <scalbn+0xe8>)
 801418e:	e7b2      	b.n	80140f6 <scalbn+0x36>
 8014190:	c2f8f359 	.word	0xc2f8f359
 8014194:	01a56e1f 	.word	0x01a56e1f
 8014198:	8800759c 	.word	0x8800759c
 801419c:	7e37e43c 	.word	0x7e37e43c
 80141a0:	43500000 	.word	0x43500000
 80141a4:	ffff3cb0 	.word	0xffff3cb0
 80141a8:	3c900000 	.word	0x3c900000
 80141ac:	00000000 	.word	0x00000000

080141b0 <__ieee754_log>:
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	ec51 0b10 	vmov	r0, r1, d0
 80141b8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80141bc:	b087      	sub	sp, #28
 80141be:	460d      	mov	r5, r1
 80141c0:	da27      	bge.n	8014212 <__ieee754_log+0x62>
 80141c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141c6:	4303      	orrs	r3, r0
 80141c8:	ee10 2a10 	vmov	r2, s0
 80141cc:	d10a      	bne.n	80141e4 <__ieee754_log+0x34>
 80141ce:	49cc      	ldr	r1, [pc, #816]	; (8014500 <__ieee754_log+0x350>)
 80141d0:	2200      	movs	r2, #0
 80141d2:	2300      	movs	r3, #0
 80141d4:	2000      	movs	r0, #0
 80141d6:	f7ec fb61 	bl	800089c <__aeabi_ddiv>
 80141da:	ec41 0b10 	vmov	d0, r0, r1
 80141de:	b007      	add	sp, #28
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	2900      	cmp	r1, #0
 80141e6:	da05      	bge.n	80141f4 <__ieee754_log+0x44>
 80141e8:	460b      	mov	r3, r1
 80141ea:	f7ec f875 	bl	80002d8 <__aeabi_dsub>
 80141ee:	2200      	movs	r2, #0
 80141f0:	2300      	movs	r3, #0
 80141f2:	e7f0      	b.n	80141d6 <__ieee754_log+0x26>
 80141f4:	4bc3      	ldr	r3, [pc, #780]	; (8014504 <__ieee754_log+0x354>)
 80141f6:	2200      	movs	r2, #0
 80141f8:	f7ec fa26 	bl	8000648 <__aeabi_dmul>
 80141fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014200:	460d      	mov	r5, r1
 8014202:	4ac1      	ldr	r2, [pc, #772]	; (8014508 <__ieee754_log+0x358>)
 8014204:	4295      	cmp	r5, r2
 8014206:	dd06      	ble.n	8014216 <__ieee754_log+0x66>
 8014208:	4602      	mov	r2, r0
 801420a:	460b      	mov	r3, r1
 801420c:	f7ec f866 	bl	80002dc <__adddf3>
 8014210:	e7e3      	b.n	80141da <__ieee754_log+0x2a>
 8014212:	2300      	movs	r3, #0
 8014214:	e7f5      	b.n	8014202 <__ieee754_log+0x52>
 8014216:	152c      	asrs	r4, r5, #20
 8014218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801421c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014220:	441c      	add	r4, r3
 8014222:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014226:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801422e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8014232:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8014236:	ea42 0105 	orr.w	r1, r2, r5
 801423a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801423e:	2200      	movs	r2, #0
 8014240:	4bb2      	ldr	r3, [pc, #712]	; (801450c <__ieee754_log+0x35c>)
 8014242:	f7ec f849 	bl	80002d8 <__aeabi_dsub>
 8014246:	1cab      	adds	r3, r5, #2
 8014248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801424c:	2b02      	cmp	r3, #2
 801424e:	4682      	mov	sl, r0
 8014250:	468b      	mov	fp, r1
 8014252:	f04f 0200 	mov.w	r2, #0
 8014256:	dc53      	bgt.n	8014300 <__ieee754_log+0x150>
 8014258:	2300      	movs	r3, #0
 801425a:	f7ec fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 801425e:	b1d0      	cbz	r0, 8014296 <__ieee754_log+0xe6>
 8014260:	2c00      	cmp	r4, #0
 8014262:	f000 8120 	beq.w	80144a6 <__ieee754_log+0x2f6>
 8014266:	4620      	mov	r0, r4
 8014268:	f7ec f984 	bl	8000574 <__aeabi_i2d>
 801426c:	a390      	add	r3, pc, #576	; (adr r3, 80144b0 <__ieee754_log+0x300>)
 801426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014272:	4606      	mov	r6, r0
 8014274:	460f      	mov	r7, r1
 8014276:	f7ec f9e7 	bl	8000648 <__aeabi_dmul>
 801427a:	a38f      	add	r3, pc, #572	; (adr r3, 80144b8 <__ieee754_log+0x308>)
 801427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014280:	4604      	mov	r4, r0
 8014282:	460d      	mov	r5, r1
 8014284:	4630      	mov	r0, r6
 8014286:	4639      	mov	r1, r7
 8014288:	f7ec f9de 	bl	8000648 <__aeabi_dmul>
 801428c:	4602      	mov	r2, r0
 801428e:	460b      	mov	r3, r1
 8014290:	4620      	mov	r0, r4
 8014292:	4629      	mov	r1, r5
 8014294:	e7ba      	b.n	801420c <__ieee754_log+0x5c>
 8014296:	a38a      	add	r3, pc, #552	; (adr r3, 80144c0 <__ieee754_log+0x310>)
 8014298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429c:	4650      	mov	r0, sl
 801429e:	4659      	mov	r1, fp
 80142a0:	f7ec f9d2 	bl	8000648 <__aeabi_dmul>
 80142a4:	4602      	mov	r2, r0
 80142a6:	460b      	mov	r3, r1
 80142a8:	2000      	movs	r0, #0
 80142aa:	4999      	ldr	r1, [pc, #612]	; (8014510 <__ieee754_log+0x360>)
 80142ac:	f7ec f814 	bl	80002d8 <__aeabi_dsub>
 80142b0:	4652      	mov	r2, sl
 80142b2:	4606      	mov	r6, r0
 80142b4:	460f      	mov	r7, r1
 80142b6:	465b      	mov	r3, fp
 80142b8:	4650      	mov	r0, sl
 80142ba:	4659      	mov	r1, fp
 80142bc:	f7ec f9c4 	bl	8000648 <__aeabi_dmul>
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	4630      	mov	r0, r6
 80142c6:	4639      	mov	r1, r7
 80142c8:	f7ec f9be 	bl	8000648 <__aeabi_dmul>
 80142cc:	4606      	mov	r6, r0
 80142ce:	460f      	mov	r7, r1
 80142d0:	b914      	cbnz	r4, 80142d8 <__ieee754_log+0x128>
 80142d2:	4632      	mov	r2, r6
 80142d4:	463b      	mov	r3, r7
 80142d6:	e0a0      	b.n	801441a <__ieee754_log+0x26a>
 80142d8:	4620      	mov	r0, r4
 80142da:	f7ec f94b 	bl	8000574 <__aeabi_i2d>
 80142de:	a374      	add	r3, pc, #464	; (adr r3, 80144b0 <__ieee754_log+0x300>)
 80142e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e4:	4680      	mov	r8, r0
 80142e6:	4689      	mov	r9, r1
 80142e8:	f7ec f9ae 	bl	8000648 <__aeabi_dmul>
 80142ec:	a372      	add	r3, pc, #456	; (adr r3, 80144b8 <__ieee754_log+0x308>)
 80142ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f2:	4604      	mov	r4, r0
 80142f4:	460d      	mov	r5, r1
 80142f6:	4640      	mov	r0, r8
 80142f8:	4649      	mov	r1, r9
 80142fa:	f7ec f9a5 	bl	8000648 <__aeabi_dmul>
 80142fe:	e0a5      	b.n	801444c <__ieee754_log+0x29c>
 8014300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014304:	f7eb ffea 	bl	80002dc <__adddf3>
 8014308:	4602      	mov	r2, r0
 801430a:	460b      	mov	r3, r1
 801430c:	4650      	mov	r0, sl
 801430e:	4659      	mov	r1, fp
 8014310:	f7ec fac4 	bl	800089c <__aeabi_ddiv>
 8014314:	e9cd 0100 	strd	r0, r1, [sp]
 8014318:	4620      	mov	r0, r4
 801431a:	f7ec f92b 	bl	8000574 <__aeabi_i2d>
 801431e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014326:	4610      	mov	r0, r2
 8014328:	4619      	mov	r1, r3
 801432a:	f7ec f98d 	bl	8000648 <__aeabi_dmul>
 801432e:	4602      	mov	r2, r0
 8014330:	460b      	mov	r3, r1
 8014332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014336:	f7ec f987 	bl	8000648 <__aeabi_dmul>
 801433a:	a363      	add	r3, pc, #396	; (adr r3, 80144c8 <__ieee754_log+0x318>)
 801433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014340:	4680      	mov	r8, r0
 8014342:	4689      	mov	r9, r1
 8014344:	f7ec f980 	bl	8000648 <__aeabi_dmul>
 8014348:	a361      	add	r3, pc, #388	; (adr r3, 80144d0 <__ieee754_log+0x320>)
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	f7eb ffc5 	bl	80002dc <__adddf3>
 8014352:	4642      	mov	r2, r8
 8014354:	464b      	mov	r3, r9
 8014356:	f7ec f977 	bl	8000648 <__aeabi_dmul>
 801435a:	a35f      	add	r3, pc, #380	; (adr r3, 80144d8 <__ieee754_log+0x328>)
 801435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014360:	f7eb ffbc 	bl	80002dc <__adddf3>
 8014364:	4642      	mov	r2, r8
 8014366:	464b      	mov	r3, r9
 8014368:	f7ec f96e 	bl	8000648 <__aeabi_dmul>
 801436c:	a35c      	add	r3, pc, #368	; (adr r3, 80144e0 <__ieee754_log+0x330>)
 801436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014372:	f7eb ffb3 	bl	80002dc <__adddf3>
 8014376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801437a:	f7ec f965 	bl	8000648 <__aeabi_dmul>
 801437e:	a35a      	add	r3, pc, #360	; (adr r3, 80144e8 <__ieee754_log+0x338>)
 8014380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014388:	4640      	mov	r0, r8
 801438a:	4649      	mov	r1, r9
 801438c:	f7ec f95c 	bl	8000648 <__aeabi_dmul>
 8014390:	a357      	add	r3, pc, #348	; (adr r3, 80144f0 <__ieee754_log+0x340>)
 8014392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014396:	f7eb ffa1 	bl	80002dc <__adddf3>
 801439a:	4642      	mov	r2, r8
 801439c:	464b      	mov	r3, r9
 801439e:	f7ec f953 	bl	8000648 <__aeabi_dmul>
 80143a2:	a355      	add	r3, pc, #340	; (adr r3, 80144f8 <__ieee754_log+0x348>)
 80143a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a8:	f7eb ff98 	bl	80002dc <__adddf3>
 80143ac:	4642      	mov	r2, r8
 80143ae:	464b      	mov	r3, r9
 80143b0:	f7ec f94a 	bl	8000648 <__aeabi_dmul>
 80143b4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80143b8:	4602      	mov	r2, r0
 80143ba:	460b      	mov	r3, r1
 80143bc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80143c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80143c4:	f7eb ff8a 	bl	80002dc <__adddf3>
 80143c8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80143cc:	3551      	adds	r5, #81	; 0x51
 80143ce:	4335      	orrs	r5, r6
 80143d0:	2d00      	cmp	r5, #0
 80143d2:	4680      	mov	r8, r0
 80143d4:	4689      	mov	r9, r1
 80143d6:	dd48      	ble.n	801446a <__ieee754_log+0x2ba>
 80143d8:	2200      	movs	r2, #0
 80143da:	4b4d      	ldr	r3, [pc, #308]	; (8014510 <__ieee754_log+0x360>)
 80143dc:	4650      	mov	r0, sl
 80143de:	4659      	mov	r1, fp
 80143e0:	f7ec f932 	bl	8000648 <__aeabi_dmul>
 80143e4:	4652      	mov	r2, sl
 80143e6:	465b      	mov	r3, fp
 80143e8:	f7ec f92e 	bl	8000648 <__aeabi_dmul>
 80143ec:	4602      	mov	r2, r0
 80143ee:	460b      	mov	r3, r1
 80143f0:	4606      	mov	r6, r0
 80143f2:	460f      	mov	r7, r1
 80143f4:	4640      	mov	r0, r8
 80143f6:	4649      	mov	r1, r9
 80143f8:	f7eb ff70 	bl	80002dc <__adddf3>
 80143fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014400:	f7ec f922 	bl	8000648 <__aeabi_dmul>
 8014404:	4680      	mov	r8, r0
 8014406:	4689      	mov	r9, r1
 8014408:	b964      	cbnz	r4, 8014424 <__ieee754_log+0x274>
 801440a:	4602      	mov	r2, r0
 801440c:	460b      	mov	r3, r1
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb ff61 	bl	80002d8 <__aeabi_dsub>
 8014416:	4602      	mov	r2, r0
 8014418:	460b      	mov	r3, r1
 801441a:	4650      	mov	r0, sl
 801441c:	4659      	mov	r1, fp
 801441e:	f7eb ff5b 	bl	80002d8 <__aeabi_dsub>
 8014422:	e6da      	b.n	80141da <__ieee754_log+0x2a>
 8014424:	a322      	add	r3, pc, #136	; (adr r3, 80144b0 <__ieee754_log+0x300>)
 8014426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801442e:	f7ec f90b 	bl	8000648 <__aeabi_dmul>
 8014432:	a321      	add	r3, pc, #132	; (adr r3, 80144b8 <__ieee754_log+0x308>)
 8014434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014438:	4604      	mov	r4, r0
 801443a:	460d      	mov	r5, r1
 801443c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014440:	f7ec f902 	bl	8000648 <__aeabi_dmul>
 8014444:	4642      	mov	r2, r8
 8014446:	464b      	mov	r3, r9
 8014448:	f7eb ff48 	bl	80002dc <__adddf3>
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	4630      	mov	r0, r6
 8014452:	4639      	mov	r1, r7
 8014454:	f7eb ff40 	bl	80002d8 <__aeabi_dsub>
 8014458:	4652      	mov	r2, sl
 801445a:	465b      	mov	r3, fp
 801445c:	f7eb ff3c 	bl	80002d8 <__aeabi_dsub>
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	4620      	mov	r0, r4
 8014466:	4629      	mov	r1, r5
 8014468:	e7d9      	b.n	801441e <__ieee754_log+0x26e>
 801446a:	4602      	mov	r2, r0
 801446c:	460b      	mov	r3, r1
 801446e:	4650      	mov	r0, sl
 8014470:	4659      	mov	r1, fp
 8014472:	f7eb ff31 	bl	80002d8 <__aeabi_dsub>
 8014476:	e9dd 2300 	ldrd	r2, r3, [sp]
 801447a:	f7ec f8e5 	bl	8000648 <__aeabi_dmul>
 801447e:	4606      	mov	r6, r0
 8014480:	460f      	mov	r7, r1
 8014482:	2c00      	cmp	r4, #0
 8014484:	f43f af25 	beq.w	80142d2 <__ieee754_log+0x122>
 8014488:	a309      	add	r3, pc, #36	; (adr r3, 80144b0 <__ieee754_log+0x300>)
 801448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014492:	f7ec f8d9 	bl	8000648 <__aeabi_dmul>
 8014496:	a308      	add	r3, pc, #32	; (adr r3, 80144b8 <__ieee754_log+0x308>)
 8014498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449c:	4604      	mov	r4, r0
 801449e:	460d      	mov	r5, r1
 80144a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144a4:	e729      	b.n	80142fa <__ieee754_log+0x14a>
 80144a6:	2000      	movs	r0, #0
 80144a8:	2100      	movs	r1, #0
 80144aa:	e696      	b.n	80141da <__ieee754_log+0x2a>
 80144ac:	f3af 8000 	nop.w
 80144b0:	fee00000 	.word	0xfee00000
 80144b4:	3fe62e42 	.word	0x3fe62e42
 80144b8:	35793c76 	.word	0x35793c76
 80144bc:	3dea39ef 	.word	0x3dea39ef
 80144c0:	55555555 	.word	0x55555555
 80144c4:	3fd55555 	.word	0x3fd55555
 80144c8:	df3e5244 	.word	0xdf3e5244
 80144cc:	3fc2f112 	.word	0x3fc2f112
 80144d0:	96cb03de 	.word	0x96cb03de
 80144d4:	3fc74664 	.word	0x3fc74664
 80144d8:	94229359 	.word	0x94229359
 80144dc:	3fd24924 	.word	0x3fd24924
 80144e0:	55555593 	.word	0x55555593
 80144e4:	3fe55555 	.word	0x3fe55555
 80144e8:	d078c69f 	.word	0xd078c69f
 80144ec:	3fc39a09 	.word	0x3fc39a09
 80144f0:	1d8e78af 	.word	0x1d8e78af
 80144f4:	3fcc71c5 	.word	0x3fcc71c5
 80144f8:	9997fa04 	.word	0x9997fa04
 80144fc:	3fd99999 	.word	0x3fd99999
 8014500:	c3500000 	.word	0xc3500000
 8014504:	43500000 	.word	0x43500000
 8014508:	7fefffff 	.word	0x7fefffff
 801450c:	3ff00000 	.word	0x3ff00000
 8014510:	3fe00000 	.word	0x3fe00000

08014514 <copysign>:
 8014514:	ec51 0b10 	vmov	r0, r1, d0
 8014518:	ee11 0a90 	vmov	r0, s3
 801451c:	ee10 2a10 	vmov	r2, s0
 8014520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014524:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014528:	ea41 0300 	orr.w	r3, r1, r0
 801452c:	ec43 2b10 	vmov	d0, r2, r3
 8014530:	4770      	bx	lr
	...

08014534 <_init>:
 8014534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014536:	bf00      	nop
 8014538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801453a:	bc08      	pop	{r3}
 801453c:	469e      	mov	lr, r3
 801453e:	4770      	bx	lr

08014540 <_fini>:
 8014540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014542:	bf00      	nop
 8014544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014546:	bc08      	pop	{r3}
 8014548:	469e      	mov	lr, r3
 801454a:	4770      	bx	lr
