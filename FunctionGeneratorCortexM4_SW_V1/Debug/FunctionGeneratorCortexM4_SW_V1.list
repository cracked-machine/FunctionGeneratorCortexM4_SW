
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015434  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001480  08015618  08015618  00025618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a98  08016a98  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08016a98  08016a98  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016a98  08016a98  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a98  08016a98  00026a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a9c  08016a9c  00026a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08016aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  20001e0c  080188ac  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  080188ac  00032a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049dde  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e8c  00000000  00000000  0007bc1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023d0  00000000  00000000  00083aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f60  00000000  00000000  00085e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c08  00000000  00000000  00087dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000304d0  00000000  00000000  000bd9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126e73  00000000  00000000  000edeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00214d23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009db8  00000000  00000000  00214da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080155fc 	.word	0x080155fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	080155fc 	.word	0x080155fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fd10 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fd03 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fcf8 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fced 	bl	8010734 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015618 	.word	0x08015618
 8000d64:	08015624 	.word	0x08015624
 8000d68:	08015628 	.word	0x08015628
 8000d6c:	0801562c 	.word	0x0801562c

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fd1f 	bl	80107b6 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 f975 	bl	8011068 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00f ff57 	bl	8010c34 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fcc6 	bl	8010734 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 fa2e 	bl	800920c <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd56 	bl	8001860 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015630 	.word	0x08015630

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 fb4f 	bl	8005468 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 fb4a 	bl	8005468 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f003 f8cf 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f003 f8cb 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f003 f8c7 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f004 f924 	bl	8005048 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f004 f91f 	bl	8005048 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 fb06 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 fb02 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 fafe 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f004 f9ff 	bl	8005234 <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f004 f9fa 	bl	8005234 <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 ffbf 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 ffbb 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 ffb7 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f004 f8e2 	bl	8005030 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f004 f8dd 	bl	8005030 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fd45 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fd41 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fd3d 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fd39 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fd35 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 fadc 	bl	800447c <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00f fc26 	bl	8010734 <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08015640 	.word	0x08015640

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000efc:	212d      	movs	r1, #45	; 0x2d
 8000efe:	208c      	movs	r0, #140	; 0x8c
 8000f00:	f000 f99e 	bl	8001240 <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000f04:	2146      	movs	r1, #70	; 0x46
 8000f06:	20af      	movs	r0, #175	; 0xaf
 8000f08:	f000 f9ea 	bl	80012e0 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000f0c:	215f      	movs	r1, #95	; 0x5f
 8000f0e:	208a      	movs	r0, #138	; 0x8a
 8000f10:	f000 fa44 	bl	800139c <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000f14:	2178      	movs	r1, #120	; 0x78
 8000f16:	20a1      	movs	r0, #161	; 0xa1
 8000f18:	f000 fab4 	bl	8001484 <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	22f5      	movs	r2, #245	; 0xf5
 8000f20:	21a0      	movs	r1, #160	; 0xa0
 8000f22:	2050      	movs	r0, #80	; 0x50
 8000f24:	f000 fb4e 	bl	80015c4 <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000f28:	f000 f806 	bl	8000f38 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerTimerHertz(200, 17);
 8000f2c:	2111      	movs	r1, #17
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f000 f888 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000f3e:	23f0      	movs	r3, #240	; 0xf0
 8000f40:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000f46:	f005 fbed 	bl	8006724 <IT_GetActiveTriggerMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d027      	beq.n	8000fa0 <DM_DisplayInputTriggerStatus+0x68>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d048      	beq.n	8000fe6 <DM_DisplayInputTriggerStatus+0xae>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d000      	beq.n	8000f5a <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000f58:	e068      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f5a:	f005 fbff 	bl	800675c <IT_GetTriggerStatus>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	88b8      	ldrh	r0, [r7, #4]
 8000f6c:	88f9      	ldrh	r1, [r7, #6]
 8000f6e:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	4602      	mov	r2, r0
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f7c:	f00f fbda 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8000f80:	e054      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	88b8      	ldrh	r0, [r7, #4]
 8000f8a:	88f9      	ldrh	r1, [r7, #6]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f96:	4602      	mov	r2, r0
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f9a:	f00f fbcb 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8000f9e:	e045      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fa0:	f005 fbdc 	bl	800675c <IT_GetTriggerStatus>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00e      	beq.n	8000fc8 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	88b8      	ldrh	r0, [r7, #4]
 8000fb2:	88f9      	ldrh	r1, [r7, #6]
 8000fb4:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fc2:	f00f fbb7 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8000fc6:	e031      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88b8      	ldrh	r0, [r7, #4]
 8000fd0:	88f9      	ldrh	r1, [r7, #6]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fe0:	f00f fba8 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8000fe4:	e022      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fe6:	f005 fbb9 	bl	800675c <IT_GetTriggerStatus>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	88b8      	ldrh	r0, [r7, #4]
 8000ff8:	88f9      	ldrh	r1, [r7, #6]
 8000ffa:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	4602      	mov	r2, r0
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001008:	f00f fb94 	bl	8010734 <ILI9341_Draw_Text>
			break;
 800100c:	e00d      	b.n	800102a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	88b8      	ldrh	r0, [r7, #4]
 8001016:	88f9      	ldrh	r1, [r7, #6]
 8001018:	2200      	movs	r2, #0
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001022:	4602      	mov	r2, r0
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001026:	f00f fb85 	bl	8010734 <ILI9341_Draw_Text>
			break;
 800102a:	bf00      	nop
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	08015664 	.word	0x08015664
 800103c:	0801566c 	.word	0x0801566c
 8001040:	08015674 	.word	0x08015674

08001044 <DM_DisplayInputTriggerTimerHertz>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerTimerHertz(uint16_t xpos, uint16_t ypos)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b095      	sub	sp, #84	; 0x54
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
	if(IT_GetTriggerStatus())
 8001054:	f005 fb82 	bl	800675c <IT_GetTriggerStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80d0 	beq.w	8001200 <DM_DisplayInputTriggerTimerHertz+0x1bc>
	{
		if(IT_GetAverageFreqCountHertz() < 1000)
 8001060:	f005 fc18 	bl	8006894 <IT_GetAverageFreqCountHertz>
 8001064:	eeb0 7a40 	vmov.f32	s14, s0
 8001068:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 800106c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d527      	bpl.n	80010c6 <DM_DisplayInputTriggerTimerHertz+0x82>
		{
			char avg_freq_count_hertz[13] = {};
 8001076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8001084:	f005 fc06 	bl	8006894 <IT_GetAverageFreqCountHertz>
 8001088:	ee10 3a10 	vmov	r3, s0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa83 	bl	8000598 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800109a:	e9cd 3400 	strd	r3, r4, [sp]
 800109e:	4a62      	ldr	r2, [pc, #392]	; (8001228 <DM_DisplayInputTriggerTimerHertz+0x1e4>)
 80010a0:	210d      	movs	r1, #13
 80010a2:	f010 ff03 	bl	8011eac <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88bc      	ldrh	r4, [r7, #4]
 80010ae:	88f9      	ldrh	r1, [r7, #6]
 80010b0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80010b4:	2200      	movs	r2, #0
 80010b6:	9201      	str	r2, [sp, #4]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010be:	4622      	mov	r2, r4
 80010c0:	f00f fb38 	bl	8010734 <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
	}
}
 80010c4:	e0aa      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 10000)
 80010c6:	f005 fbe5 	bl	8006894 <IT_GetAverageFreqCountHertz>
 80010ca:	eeb0 7a40 	vmov.f32	s14, s0
 80010ce:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001230 <DM_DisplayInputTriggerTimerHertz+0x1ec>
 80010d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d52c      	bpl.n	8001136 <DM_DisplayInputTriggerTimerHertz+0xf2>
			char avg_freq_count_hertz[13] = {};
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 80010ea:	f005 fbd3 	bl	8006894 <IT_GetAverageFreqCountHertz>
 80010ee:	eeb0 7a40 	vmov.f32	s14, s0
 80010f2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80010f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fa4b 	bl	8000598 <__aeabi_f2d>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800110a:	e9cd 3400 	strd	r3, r4, [sp]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001110:	210d      	movs	r1, #13
 8001112:	f010 fecb 	bl	8011eac <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	88bc      	ldrh	r4, [r7, #4]
 800111e:	88f9      	ldrh	r1, [r7, #6]
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	2200      	movs	r2, #0
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800112e:	4622      	mov	r2, r4
 8001130:	f00f fb00 	bl	8010734 <ILI9341_Draw_Text>
}
 8001134:	e072      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 100000)
 8001136:	f005 fbad 	bl	8006894 <IT_GetAverageFreqCountHertz>
 800113a:	eeb0 7a40 	vmov.f32	s14, s0
 800113e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001238 <DM_DisplayInputTriggerTimerHertz+0x1f4>
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d52c      	bpl.n	80011a6 <DM_DisplayInputTriggerTimerHertz+0x162>
			char avg_freq_count_hertz[13] = {};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 800115a:	f005 fb9b 	bl	8006894 <IT_GetAverageFreqCountHertz>
 800115e:	eeb0 7a40 	vmov.f32	s14, s0
 8001162:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8001166:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116a:	ee16 0a90 	vmov	r0, s13
 800116e:	f7ff fa13 	bl	8000598 <__aeabi_f2d>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	f107 0018 	add.w	r0, r7, #24
 800117a:	e9cd 3400 	strd	r3, r4, [sp]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001180:	210d      	movs	r1, #13
 8001182:	f010 fe93 	bl	8011eac <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	88bc      	ldrh	r4, [r7, #4]
 800118e:	88f9      	ldrh	r1, [r7, #6]
 8001190:	f107 0018 	add.w	r0, r7, #24
 8001194:	2200      	movs	r2, #0
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800119e:	4622      	mov	r2, r4
 80011a0:	f00f fac8 	bl	8010734 <ILI9341_Draw_Text>
}
 80011a4:	e03a      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
			char avg_freq_count_hertz[13] = {};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 80011b4:	f005 fb6e 	bl	8006894 <IT_GetAverageFreqCountHertz>
 80011b8:	eeb0 7a40 	vmov.f32	s14, s0
 80011bc:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80011c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011c4:	ee16 0a90 	vmov	r0, s13
 80011c8:	f7ff f9e6 	bl	8000598 <__aeabi_f2d>
 80011cc:	4603      	mov	r3, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	f107 0008 	add.w	r0, r7, #8
 80011d4:	e9cd 3400 	strd	r3, r4, [sp]
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 80011da:	210d      	movs	r1, #13
 80011dc:	f010 fe66 	bl	8011eac <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	88bc      	ldrh	r4, [r7, #4]
 80011e8:	88f9      	ldrh	r1, [r7, #6]
 80011ea:	f107 0008 	add.w	r0, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f8:	4622      	mov	r2, r4
 80011fa:	f00f fa9b 	bl	8010734 <ILI9341_Draw_Text>
}
 80011fe:	e00d      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	88b8      	ldrh	r0, [r7, #4]
 8001208:	88f9      	ldrh	r1, [r7, #6]
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	4602      	mov	r2, r0
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <DM_DisplayInputTriggerTimerHertz+0x1f8>)
 8001218:	f00f fa8c 	bl	8010734 <ILI9341_Draw_Text>
}
 800121c:	bf00      	nop
 800121e:	374c      	adds	r7, #76	; 0x4c
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	447a0000 	.word	0x447a0000
 8001228:	0801567c 	.word	0x0801567c
 800122c:	20000000 	.word	0x20000000
 8001230:	461c4000 	.word	0x461c4000
 8001234:	08015688 	.word	0x08015688
 8001238:	47c35000 	.word	0x47c35000
 800123c:	08015694 	.word	0x08015694

08001240 <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]
	char out_hertz[15] = "";
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = xpos;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	77fb      	strb	r3, [r7, #31]
	uint8_t out_hertz_y = ypos;
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	77bb      	strb	r3, [r7, #30]

	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	b299      	uxth	r1, r3
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800127e:	460a      	mov	r2, r1
 8001280:	2102      	movs	r1, #2
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <_DisplayOutputSignalHertz+0x98>)
 8001284:	f00f fa56 	bl	8010734 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001288:	f005 febe 	bl	8007008 <SM_GetOutputInHertz>
 800128c:	ee10 3a10 	vmov	r3, s0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f981 	bl	8000598 <__aeabi_f2d>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	f107 000c 	add.w	r0, r7, #12
 800129e:	e9cd 3400 	strd	r3, r4, [sp]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <_DisplayOutputSignalHertz+0x9c>)
 80012a4:	210f      	movs	r1, #15
 80012a6:	f010 fe01 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	b299      	uxth	r1, r3
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	b29c      	uxth	r4, r3
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f107 000c 	add.w	r0, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	9201      	str	r2, [sp, #4]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012c6:	4622      	mov	r2, r4
 80012c8:	f00f fa34 	bl	8010734 <ILI9341_Draw_Text>
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	080156a8 	.word	0x080156a8
 80012dc:	080156b4 	.word	0x080156b4

080012e0 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	; 0x34
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800130e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001312:	b299      	uxth	r1, r3
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2200      	movs	r2, #0
 800131c:	9201      	str	r2, [sp, #4]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001324:	460a      	mov	r2, r1
 8001326:	2102      	movs	r1, #2
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <_DisplayOutputSignalVpp+0xb4>)
 800132a:	f00f fa03 	bl	8010734 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800132e:	2000      	movs	r0, #0
 8001330:	f005 fbd2 	bl	8006ad8 <SM_GetOutputChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800133a:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00e      	beq.n	8001360 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f926 	bl	8000598 <__aeabi_f2d>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	f107 000c 	add.w	r0, r7, #12
 8001354:	e9cd 3400 	strd	r3, r4, [sp]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <_DisplayOutputSignalVpp+0xb8>)
 800135a:	2112      	movs	r1, #18
 800135c:	f010 fda6 	bl	8011eac <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001364:	b299      	uxth	r1, r3
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800136a:	b29c      	uxth	r4, r3
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f107 000c 	add.w	r0, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001380:	4622      	mov	r2, r4
 8001382:	f00f f9d7 	bl	8010734 <ILI9341_Draw_Text>
}
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	080156c4 	.word	0x080156c4
 8001398:	080156d0 	.word	0x080156d0

0800139c <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	b299      	uxth	r1, r3
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2200      	movs	r2, #0
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013e0:	460a      	mov	r2, r1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <_DisplayOutputSignalDecibels+0xdc>)
 80013e6:	f00f f9a5 	bl	8010734 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80013ea:	2000      	movs	r0, #0
 80013ec:	f005 fb74 	bl	8006ad8 <SM_GetOutputChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80013f6:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	f107 000c 	add.w	r0, r7, #12
 8001410:	e9cd 3400 	strd	r3, r4, [sp]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <_DisplayOutputSignalDecibels+0xe0>)
 8001416:	2114      	movs	r1, #20
 8001418:	f010 fd48 	bl	8011eac <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001420:	b299      	uxth	r1, r3
 8001422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001426:	b29c      	uxth	r4, r3
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	f107 000c 	add.w	r0, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800143c:	4622      	mov	r2, r4
 800143e:	f00f f979 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001446:	b29b      	uxth	r3, r3
 8001448:	3380      	adds	r3, #128	; 0x80
 800144a:	b299      	uxth	r1, r3
 800144c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001450:	b298      	uxth	r0, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001462:	4602      	mov	r2, r0
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <_DisplayOutputSignalDecibels+0xe4>)
 8001466:	f00f f965 	bl	8010734 <ILI9341_Draw_Text>

}
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	080156dc 	.word	0x080156dc
 800147c:	080156e8 	.word	0x080156e8
 8001480:	080156f4 	.word	0x080156f4

08001484 <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08d      	sub	sp, #52	; 0x34
 8001488:	af02      	add	r7, sp, #8
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	80fb      	strh	r3, [r7, #6]
 8001490:	4613      	mov	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <_DisplayOutputSignalOffset+0x128>)
 8001496:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014c2:	460a      	mov	r2, r1
 80014c4:	2102      	movs	r1, #2
 80014c6:	483b      	ldr	r0, [pc, #236]	; (80015b4 <_DisplayOutputSignalOffset+0x130>)
 80014c8:	f00f f934 	bl	8010734 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80014cc:	f004 fa20 	bl	8005910 <BO_GetOutputBias>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <_DisplayOutputSignalOffset+0x5a>
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e00b      	b.n	80014f6 <_DisplayOutputSignalOffset+0x72>
 80014de:	f004 fa17 	bl	8005910 <BO_GetOutputBias>
 80014e2:	ee07 0a90 	vmov	s15, r0
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80014f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f8:	f7ff f84e 	bl	8000598 <__aeabi_f2d>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	f107 0010 	add.w	r0, r7, #16
 8001504:	e9cd 3400 	strd	r3, r4, [sp]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <_DisplayOutputSignalOffset+0x134>)
 800150a:	210c      	movs	r1, #12
 800150c:	f010 fcce 	bl	8011eac <sniprintf>
	if(BO_GetBiasPolarity())
 8001510:	f004 f99e 	bl	8005850 <BO_GetBiasPolarity>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d022      	beq.n	8001560 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <_DisplayOutputSignalOffset+0x138>)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	8019      	strh	r1, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f010 fcec 	bl	8011f14 <strcat>
 800153c:	4604      	mov	r4, r0
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	b299      	uxth	r1, r3
 8001542:	7fbb      	ldrb	r3, [r7, #30]
 8001544:	b298      	uxth	r0, r3
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2200      	movs	r2, #0
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001556:	4602      	mov	r2, r0
 8001558:	4620      	mov	r0, r4
 800155a:	f00f f8eb 	bl	8010734 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 800155e:	e021      	b.n	80015a4 <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <_DisplayOutputSignalOffset+0x13c>)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	4611      	mov	r1, r2
 800156a:	8019      	strh	r1, [r3, #0]
 800156c:	3302      	adds	r3, #2
 800156e:	0c12      	lsrs	r2, r2, #16
 8001570:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f010 fcc9 	bl	8011f14 <strcat>
 8001582:	4604      	mov	r4, r0
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	b299      	uxth	r1, r3
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	b298      	uxth	r0, r3
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800159c:	4602      	mov	r2, r0
 800159e:	4620      	mov	r0, r4
 80015a0:	f00f f8c8 	bl	8010734 <ILI9341_Draw_Text>
}
 80015a4:	bf00      	nop
 80015a6:	372c      	adds	r7, #44	; 0x2c
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	3a449ba6 	.word	0x3a449ba6
 80015b0:	20000000 	.word	0x20000000
 80015b4:	080156fc 	.word	0x080156fc
 80015b8:	08015708 	.word	0x08015708
 80015bc:	08015714 	.word	0x08015714
 80015c0:	08015718 	.word	0x08015718

080015c4 <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	330a      	adds	r3, #10
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4b94      	ldr	r3, [pc, #592]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015f8:	460a      	mov	r2, r1
 80015fa:	2101      	movs	r1, #1
 80015fc:	4890      	ldr	r0, [pc, #576]	; (8001840 <_DisplayOutputWaveformIcons+0x27c>)
 80015fe:	f00f f899 	bl	8010734 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001602:	2000      	movs	r0, #0
 8001604:	f005 fa68 	bl	8006ad8 <SM_GetOutputChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d878      	bhi.n	800170a <_DisplayOutputWaveformIcons+0x146>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <_DisplayOutputWaveformIcons+0x5c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	0800163d 	.word	0x0800163d
 8001624:	0800165d 	.word	0x0800165d
 8001628:	08001679 	.word	0x08001679
 800162c:	08001695 	.word	0x08001695
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016cd 	.word	0x080016cd
 8001638:	080016e9 	.word	0x080016e9
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	3b14      	subs	r3, #20
 8001640:	b299      	uxth	r1, r3
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	233c      	movs	r3, #60	; 0x3c
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001654:	2203      	movs	r2, #3
 8001656:	f00e fec9 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 800165a:	e056      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 800165c:	88b9      	ldrh	r1, [r7, #4]
 800165e:	88f8      	ldrh	r0, [r7, #6]
 8001660:	233c      	movs	r3, #60	; 0x3c
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001670:	2203      	movs	r2, #3
 8001672:	f00e febb 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 8001676:	e048      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	4b72      	ldr	r3, [pc, #456]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	23c8      	movs	r3, #200	; 0xc8
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f240 23fd 	movw	r3, #765	; 0x2fd
 800168c:	2203      	movs	r2, #3
 800168e:	f00e fead 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 8001692:	e03a      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001694:	88b9      	ldrh	r1, [r7, #4]
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	233c      	movs	r3, #60	; 0x3c
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23c8      	movs	r3, #200	; 0xc8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016a8:	2203      	movs	r2, #3
 80016aa:	f00e fe9f 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80016ae:	e02c      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016b0:	88b9      	ldrh	r1, [r7, #4]
 80016b2:	88f8      	ldrh	r0, [r7, #6]
 80016b4:	233c      	movs	r3, #60	; 0x3c
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	23c8      	movs	r3, #200	; 0xc8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016c4:	2203      	movs	r2, #3
 80016c6:	f00e fe91 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80016ca:	e01e      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016cc:	88b9      	ldrh	r1, [r7, #4]
 80016ce:	88f8      	ldrh	r0, [r7, #6]
 80016d0:	233c      	movs	r3, #60	; 0x3c
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23c8      	movs	r3, #200	; 0xc8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016e0:	2203      	movs	r2, #3
 80016e2:	f00e fe83 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80016e6:	e010      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	330a      	adds	r3, #10
 80016ec:	b298      	uxth	r0, r3
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	88f9      	ldrh	r1, [r7, #6]
 80016f6:	2200      	movs	r2, #0
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001700:	4602      	mov	r2, r0
 8001702:	4855      	ldr	r0, [pc, #340]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 8001704:	f00f f816 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8001708:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	330a      	adds	r3, #10
 800170e:	b299      	uxth	r1, r3
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	2200      	movs	r2, #0
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	460a      	mov	r2, r1
 8001722:	21aa      	movs	r1, #170	; 0xaa
 8001724:	484d      	ldr	r0, [pc, #308]	; (800185c <_DisplayOutputWaveformIcons+0x298>)
 8001726:	f00f f805 	bl	8010734 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800172a:	2001      	movs	r0, #1
 800172c:	f005 f9d4 	bl	8006ad8 <SM_GetOutputChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d878      	bhi.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <_DisplayOutputWaveformIcons+0x184>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001765 	.word	0x08001765
 800174c:	08001785 	.word	0x08001785
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017bd 	.word	0x080017bd
 8001758:	080017d9 	.word	0x080017d9
 800175c:	080017f5 	.word	0x080017f5
 8001760:	08001811 	.word	0x08001811
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001764:	883b      	ldrh	r3, [r7, #0]
 8001766:	3b14      	subs	r3, #20
 8001768:	b299      	uxth	r1, r3
 800176a:	8878      	ldrh	r0, [r7, #2]
 800176c:	233c      	movs	r3, #60	; 0x3c
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800177c:	2203      	movs	r2, #3
 800177e:	f00e fe35 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 8001782:	e056      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001784:	8839      	ldrh	r1, [r7, #0]
 8001786:	8878      	ldrh	r0, [r7, #2]
 8001788:	233c      	movs	r3, #60	; 0x3c
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	23c8      	movs	r3, #200	; 0xc8
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001798:	2203      	movs	r2, #3
 800179a:	f00e fe27 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 800179e:	e048      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80017a0:	8839      	ldrh	r1, [r7, #0]
 80017a2:	8878      	ldrh	r0, [r7, #2]
 80017a4:	233c      	movs	r3, #60	; 0x3c
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	23c8      	movs	r3, #200	; 0xc8
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017b4:	2203      	movs	r2, #3
 80017b6:	f00e fe19 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80017ba:	e03a      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80017bc:	8839      	ldrh	r1, [r7, #0]
 80017be:	8878      	ldrh	r0, [r7, #2]
 80017c0:	233c      	movs	r3, #60	; 0x3c
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017d0:	2203      	movs	r2, #3
 80017d2:	f00e fe0b 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80017d6:	e02c      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017d8:	8839      	ldrh	r1, [r7, #0]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	233c      	movs	r3, #60	; 0x3c
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	23c8      	movs	r3, #200	; 0xc8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017ec:	2203      	movs	r2, #3
 80017ee:	f00e fdfd 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 80017f2:	e01e      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017f4:	8839      	ldrh	r1, [r7, #0]
 80017f6:	8878      	ldrh	r0, [r7, #2]
 80017f8:	233c      	movs	r3, #60	; 0x3c
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	23c8      	movs	r3, #200	; 0xc8
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001808:	2203      	movs	r2, #3
 800180a:	f00e fdef 	bl	80103ec <ILI9341_Draw_Wave>
			break;
 800180e:	e010      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	330a      	adds	r3, #10
 8001814:	b298      	uxth	r0, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	8879      	ldrh	r1, [r7, #2]
 800181e:	2200      	movs	r2, #0
 8001820:	9201      	str	r2, [sp, #4]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001828:	4602      	mov	r2, r0
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 800182c:	f00e ff82 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8001830:	bf00      	nop
	}
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	0801571c 	.word	0x0801571c
 8001844:	20000e28 	.word	0x20000e28
 8001848:	20000f18 	.word	0x20000f18
 800184c:	20000c48 	.word	0x20000c48
 8001850:	20000d38 	.word	0x20000d38
 8001854:	20001008 	.word	0x20001008
 8001858:	08015724 	.word	0x08015724
 800185c:	08015728 	.word	0x08015728

08001860 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001866:	4820      	ldr	r0, [pc, #128]	; (80018e8 <DM_RefreshScreen+0x88>)
 8001868:	f00b ff4a 	bl	800d700 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 800186c:	2000      	movs	r0, #0
 800186e:	f00f f9e1 	bl	8010c34 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001872:	2300      	movs	r3, #0
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	2302      	movs	r3, #2
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2328      	movs	r3, #40	; 0x28
 8001882:	2250      	movs	r2, #80	; 0x50
 8001884:	21c8      	movs	r1, #200	; 0xc8
 8001886:	2000      	movs	r0, #0
 8001888:	f00e fdf1 	bl	801046e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 800188c:	2300      	movs	r3, #0
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2302      	movs	r3, #2
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2328      	movs	r3, #40	; 0x28
 800189c:	2250      	movs	r2, #80	; 0x50
 800189e:	21c8      	movs	r1, #200	; 0xc8
 80018a0:	2050      	movs	r0, #80	; 0x50
 80018a2:	f00e fde4 	bl	801046e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80018a6:	2300      	movs	r3, #0
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	21c8      	movs	r1, #200	; 0xc8
 80018ba:	20a0      	movs	r0, #160	; 0xa0
 80018bc:	f00e fdd7 	bl	801046e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80018c0:	2300      	movs	r3, #0
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2328      	movs	r3, #40	; 0x28
 80018d0:	2250      	movs	r2, #80	; 0x50
 80018d2:	21c8      	movs	r1, #200	; 0xc8
 80018d4:	20f0      	movs	r0, #240	; 0xf0
 80018d6:	f00e fdca 	bl	801046e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <DM_RefreshScreen+0x88>)
 80018dc:	f00b feda 	bl	800d694 <HAL_TIM_Base_Start_IT>


}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000283c 	.word	0x2000283c

080018ec <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <DM_SetErrorDebugMsg+0x34>)
 80018f8:	212d      	movs	r1, #45	; 0x2d
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 80018fc:	f010 fad6 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001900:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2301      	movs	r3, #1
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22be      	movs	r2, #190	; 0xbe
 800190e:	210a      	movs	r1, #10
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 8001912:	f00e ff0f 	bl	8010734 <ILI9341_Draw_Text>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	080157ac 	.word	0x080157ac
 8001924:	20001e28 	.word	0x20001e28

08001928 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	3b01      	subs	r3, #1
 8001936:	2b04      	cmp	r3, #4
 8001938:	d81b      	bhi.n	8001972 <FreqMenu_DrawMenu+0x4a>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <FreqMenu_DrawMenu+0x18>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001955 	.word	0x08001955
 8001944:	0800195b 	.word	0x0800195b
 8001948:	08001961 	.word	0x08001961
 800194c:	08001967 	.word	0x08001967
 8001950:	0800196d 	.word	0x0800196d
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001954:	f000 f812 	bl	800197c <FreqMenu_DrawMainMenu>
			break;
 8001958:	e00c      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800195a:	f000 f859 	bl	8001a10 <FreqMenu_DrawPresetMenu>
			break;
 800195e:	e009      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001960:	f001 fb06 	bl	8002f70 <FreqMenu_DrawAdjustMenu>
			break;
 8001964:	e006      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001966:	f001 fb19 	bl	8002f9c <FreqMenu_DrawSweepMenu>
			break;
 800196a:	e003      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 800196c:	f001 fd48 	bl	8003400 <FreqMenu_DrawPrescalerMenu>
			break;
 8001970:	e000      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 8001972:	bf00      	nop

	}
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	220a      	movs	r2, #10
 8001990:	2105      	movs	r1, #5
 8001992:	481a      	ldr	r0, [pc, #104]	; (80019fc <FreqMenu_DrawMainMenu+0x80>)
 8001994:	f00e fece 	bl	8010734 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001998:	f7ff faae 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800199c:	f240 23fd 	movw	r3, #765	; 0x2fd
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2302      	movs	r3, #2
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	22d2      	movs	r2, #210	; 0xd2
 80019aa:	2105      	movs	r1, #5
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <FreqMenu_DrawMainMenu+0x84>)
 80019ae:	f00e fec1 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80019b2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	22d2      	movs	r2, #210	; 0xd2
 80019c0:	2161      	movs	r1, #97	; 0x61
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <FreqMenu_DrawMainMenu+0x88>)
 80019c4:	f00e feb6 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80019c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	22d2      	movs	r2, #210	; 0xd2
 80019d6:	21ac      	movs	r1, #172	; 0xac
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <FreqMenu_DrawMainMenu+0x8c>)
 80019da:	f00e feab 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80019de:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	22d2      	movs	r2, #210	; 0xd2
 80019ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <FreqMenu_DrawMainMenu+0x90>)
 80019f2:	f00e fe9f 	bl	8010734 <ILI9341_Draw_Text>
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	080157b0 	.word	0x080157b0
 8001a00:	080157bc 	.word	0x080157bc
 8001a04:	080157c4 	.word	0x080157c4
 8001a08:	080157cc 	.word	0x080157cc
 8001a0c:	080157d4 	.word	0x080157d4

08001a10 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	220a      	movs	r2, #10
 8001a24:	2105      	movs	r1, #5
 8001a26:	4887      	ldr	r0, [pc, #540]	; (8001c44 <FreqMenu_DrawPresetMenu+0x234>)
 8001a28:	f00e fe84 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001a2c:	f7ff fa84 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 8001a30:	2328      	movs	r3, #40	; 0x28
 8001a32:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001a34:	233c      	movs	r3, #60	; 0x3c
 8001a36:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001a38:	2350      	movs	r3, #80	; 0x50
 8001a3a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001a40:	2378      	movs	r3, #120	; 0x78
 8001a42:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001a44:	238c      	movs	r3, #140	; 0x8c
 8001a46:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001a4c:	f004 f910 	bl	8005c70 <FreqO_GetFPresetObject>
 8001a50:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f001 825d 	beq.w	8002f14 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f000 849a 	beq.w	800239c <FreqMenu_DrawPresetMenu+0x98c>
 8001a68:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d817      	bhi.n	8001aa0 <FreqMenu_DrawPresetMenu+0x90>
 8001a70:	2b32      	cmp	r3, #50	; 0x32
 8001a72:	f000 81b3 	beq.w	8001ddc <FreqMenu_DrawPresetMenu+0x3cc>
 8001a76:	2b32      	cmp	r3, #50	; 0x32
 8001a78:	d806      	bhi.n	8001a88 <FreqMenu_DrawPresetMenu+0x78>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d038      	beq.n	8001af0 <FreqMenu_DrawPresetMenu+0xe0>
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	f000 8102 	beq.w	8001c88 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001a84:	f001 ba52 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a88:	2bfa      	cmp	r3, #250	; 0xfa
 8001a8a:	f000 8317 	beq.w	80020bc <FreqMenu_DrawPresetMenu+0x6ac>
 8001a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a92:	f000 83d9 	beq.w	8002248 <FreqMenu_DrawPresetMenu+0x838>
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	f000 8266 	beq.w	8001f68 <FreqMenu_DrawPresetMenu+0x558>
}
 8001a9c:	f001 ba46 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001aa0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f000 8758 	beq.w	800295a <FreqMenu_DrawPresetMenu+0xf4a>
 8001aaa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d80f      	bhi.n	8001ad2 <FreqMenu_DrawPresetMenu+0xc2>
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f000 85e0 	beq.w	800267c <FreqMenu_DrawPresetMenu+0xc6c>
 8001abc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f000 86a1 	beq.w	8002808 <FreqMenu_DrawPresetMenu+0xdf8>
 8001ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aca:	f000 852d 	beq.w	8002528 <FreqMenu_DrawPresetMenu+0xb18>
}
 8001ace:	f001 ba2d 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	; (8001c48 <FreqMenu_DrawPresetMenu+0x238>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f001 80ae 	beq.w	8002c36 <FreqMenu_DrawPresetMenu+0x1226>
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <FreqMenu_DrawPresetMenu+0x23c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f001 816f 	beq.w	8002dc0 <FreqMenu_DrawPresetMenu+0x13b0>
 8001ae2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f000 87fc 	beq.w	8002ae4 <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001aec:	f001 ba1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	4853      	ldr	r0, [pc, #332]	; (8001c50 <FreqMenu_DrawPresetMenu+0x240>)
 8001b04:	f00e fe16 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	484e      	ldr	r0, [pc, #312]	; (8001c54 <FreqMenu_DrawPresetMenu+0x244>)
 8001b1c:	f00e fe0a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2105      	movs	r1, #5
 8001b32:	4849      	ldr	r0, [pc, #292]	; (8001c58 <FreqMenu_DrawPresetMenu+0x248>)
 8001b34:	f00e fdfe 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	4844      	ldr	r0, [pc, #272]	; (8001c5c <FreqMenu_DrawPresetMenu+0x24c>)
 8001b4c:	f00e fdf2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2105      	movs	r1, #5
 8001b62:	483f      	ldr	r0, [pc, #252]	; (8001c60 <FreqMenu_DrawPresetMenu+0x250>)
 8001b64:	f00e fde6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7abb      	ldrb	r3, [r7, #10]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <FreqMenu_DrawPresetMenu+0x254>)
 8001b7c:	f00e fdda 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b90:	2105      	movs	r1, #5
 8001b92:	4835      	ldr	r0, [pc, #212]	; (8001c68 <FreqMenu_DrawPresetMenu+0x258>)
 8001b94:	f00e fdce 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	4830      	ldr	r0, [pc, #192]	; (8001c6c <FreqMenu_DrawPresetMenu+0x25c>)
 8001bac:	f00e fdc2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc0:	2178      	movs	r1, #120	; 0x78
 8001bc2:	482b      	ldr	r0, [pc, #172]	; (8001c70 <FreqMenu_DrawPresetMenu+0x260>)
 8001bc4:	f00e fdb6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <FreqMenu_DrawPresetMenu+0x264>)
 8001bdc:	f00e fdaa 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2302      	movs	r3, #2
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <FreqMenu_DrawPresetMenu+0x268>)
 8001bf4:	f00e fd9e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c08:	2178      	movs	r1, #120	; 0x78
 8001c0a:	481c      	ldr	r0, [pc, #112]	; (8001c7c <FreqMenu_DrawPresetMenu+0x26c>)
 8001c0c:	f00e fd92 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c10:	7abb      	ldrb	r3, [r7, #10]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c20:	2178      	movs	r1, #120	; 0x78
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <FreqMenu_DrawPresetMenu+0x270>)
 8001c24:	f00e fd86 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c28:	7a7b      	ldrb	r3, [r7, #9]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c38:	2178      	movs	r1, #120	; 0x78
 8001c3a:	4812      	ldr	r0, [pc, #72]	; (8001c84 <FreqMenu_DrawPresetMenu+0x274>)
 8001c3c:	f00e fd7a 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8001c40:	f001 b974 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001c44:	080157d8 	.word	0x080157d8
 8001c48:	000124f8 	.word	0x000124f8
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	080157ec 	.word	0x080157ec
 8001c54:	080157f4 	.word	0x080157f4
 8001c58:	080157fc 	.word	0x080157fc
 8001c5c:	08015804 	.word	0x08015804
 8001c60:	0801580c 	.word	0x0801580c
 8001c64:	08015814 	.word	0x08015814
 8001c68:	0801581c 	.word	0x0801581c
 8001c6c:	08015824 	.word	0x08015824
 8001c70:	0801582c 	.word	0x0801582c
 8001c74:	08015834 	.word	0x08015834
 8001c78:	0801583c 	.word	0x0801583c
 8001c7c:	08015844 	.word	0x08015844
 8001c80:	0801584c 	.word	0x0801584c
 8001c84:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2302      	movs	r3, #2
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	48a5      	ldr	r0, [pc, #660]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001c9c:	f00e fd4a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	48a0      	ldr	r0, [pc, #640]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001cb4:	f00e fd3e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	489b      	ldr	r0, [pc, #620]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001ccc:	f00e fd32 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4896      	ldr	r0, [pc, #600]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001ce4:	f00e fd26 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4891      	ldr	r0, [pc, #580]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001cfc:	f00e fd1a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	488c      	ldr	r0, [pc, #560]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001d14:	f00e fd0e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4887      	ldr	r0, [pc, #540]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001d2c:	f00e fd02 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d40:	2178      	movs	r1, #120	; 0x78
 8001d42:	4882      	ldr	r0, [pc, #520]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001d44:	f00e fcf6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2178      	movs	r1, #120	; 0x78
 8001d5a:	487d      	ldr	r0, [pc, #500]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001d5c:	f00e fcea 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2178      	movs	r1, #120	; 0x78
 8001d72:	4878      	ldr	r0, [pc, #480]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001d74:	f00e fcde 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7b3b      	ldrb	r3, [r7, #12]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	4873      	ldr	r0, [pc, #460]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001d8c:	f00e fcd2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	486e      	ldr	r0, [pc, #440]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001da4:	f00e fcc6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7abb      	ldrb	r3, [r7, #10]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4869      	ldr	r0, [pc, #420]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001dbc:	f00e fcba 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7a7b      	ldrb	r3, [r7, #9]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	4864      	ldr	r0, [pc, #400]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001dd4:	f00e fcae 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8001dd8:	f001 b8a8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dec:	2105      	movs	r1, #5
 8001dee:	4850      	ldr	r0, [pc, #320]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001df0:	f00e fca0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e04:	2105      	movs	r1, #5
 8001e06:	484b      	ldr	r0, [pc, #300]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001e08:	f00e fc94 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2302      	movs	r3, #2
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	4846      	ldr	r0, [pc, #280]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001e20:	f00e fc88 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e34:	2105      	movs	r1, #5
 8001e36:	4841      	ldr	r0, [pc, #260]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001e38:	f00e fc7c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	483c      	ldr	r0, [pc, #240]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001e50:	f00e fc70 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e54:	7abb      	ldrb	r3, [r7, #10]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e64:	2105      	movs	r1, #5
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001e68:	f00e fc64 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e6c:	7a7b      	ldrb	r3, [r7, #9]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4832      	ldr	r0, [pc, #200]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001e80:	f00e fc58 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	482d      	ldr	r0, [pc, #180]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001e98:	f00e fc4c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2178      	movs	r1, #120	; 0x78
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001eb0:	f00e fc40 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2178      	movs	r1, #120	; 0x78
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001ec8:	f00e fc34 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2178      	movs	r1, #120	; 0x78
 8001ede:	481e      	ldr	r0, [pc, #120]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001ee0:	f00e fc28 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2178      	movs	r1, #120	; 0x78
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001ef8:	f00e fc1c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2178      	movs	r1, #120	; 0x78
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001f10:	f00e fc10 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	480f      	ldr	r0, [pc, #60]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001f28:	f00e fc04 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8001f2c:	f000 bffe 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001f30:	080157ec 	.word	0x080157ec
 8001f34:	080157f4 	.word	0x080157f4
 8001f38:	080157fc 	.word	0x080157fc
 8001f3c:	08015804 	.word	0x08015804
 8001f40:	0801580c 	.word	0x0801580c
 8001f44:	08015814 	.word	0x08015814
 8001f48:	0801581c 	.word	0x0801581c
 8001f4c:	08015824 	.word	0x08015824
 8001f50:	0801582c 	.word	0x0801582c
 8001f54:	08015834 	.word	0x08015834
 8001f58:	0801583c 	.word	0x0801583c
 8001f5c:	08015844 	.word	0x08015844
 8001f60:	0801584c 	.word	0x0801584c
 8001f64:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2302      	movs	r3, #2
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	48a5      	ldr	r0, [pc, #660]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 8001f7c:	f00e fbda 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f90:	2105      	movs	r1, #5
 8001f92:	48a0      	ldr	r0, [pc, #640]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 8001f94:	f00e fbce 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f98:	7b7b      	ldrb	r3, [r7, #13]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	489b      	ldr	r0, [pc, #620]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8001fac:	f00e fbc2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2302      	movs	r3, #2
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4896      	ldr	r0, [pc, #600]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8001fc4:	f00e fbb6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	4891      	ldr	r0, [pc, #580]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8001fdc:	f00e fbaa 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	488c      	ldr	r0, [pc, #560]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8001ff4:	f00e fb9e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7a7b      	ldrb	r3, [r7, #9]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4887      	ldr	r0, [pc, #540]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 800200c:	f00e fb92 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2178      	movs	r1, #120	; 0x78
 8002022:	4882      	ldr	r0, [pc, #520]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002024:	f00e fb86 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2178      	movs	r1, #120	; 0x78
 800203a:	487d      	ldr	r0, [pc, #500]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 800203c:	f00e fb7a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2302      	movs	r3, #2
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002050:	2178      	movs	r1, #120	; 0x78
 8002052:	4878      	ldr	r0, [pc, #480]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 8002054:	f00e fb6e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	4873      	ldr	r0, [pc, #460]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 800206c:	f00e fb62 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	486e      	ldr	r0, [pc, #440]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 8002084:	f00e fb56 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7abb      	ldrb	r3, [r7, #10]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4869      	ldr	r0, [pc, #420]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 800209c:	f00e fb4a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	4864      	ldr	r0, [pc, #400]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 80020b4:	f00e fb3e 	bl	8010734 <ILI9341_Draw_Text>
				break;
 80020b8:	f000 bf38 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2302      	movs	r3, #2
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020cc:	2105      	movs	r1, #5
 80020ce:	4850      	ldr	r0, [pc, #320]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 80020d0:	f00e fb30 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2302      	movs	r3, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e4:	2105      	movs	r1, #5
 80020e6:	484b      	ldr	r0, [pc, #300]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 80020e8:	f00e fb24 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020fc:	2105      	movs	r1, #5
 80020fe:	4846      	ldr	r0, [pc, #280]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8002100:	f00e fb18 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2302      	movs	r3, #2
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002114:	2105      	movs	r1, #5
 8002116:	4841      	ldr	r0, [pc, #260]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8002118:	f00e fb0c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	b29a      	uxth	r2, r3
 8002120:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	2105      	movs	r1, #5
 800212e:	483c      	ldr	r0, [pc, #240]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8002130:	f00e fb00 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	b29a      	uxth	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2302      	movs	r3, #2
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002144:	2105      	movs	r1, #5
 8002146:	4837      	ldr	r0, [pc, #220]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8002148:	f00e faf4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800214c:	7a7b      	ldrb	r3, [r7, #9]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2302      	movs	r3, #2
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800215c:	2105      	movs	r1, #5
 800215e:	4832      	ldr	r0, [pc, #200]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 8002160:	f00e fae8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29a      	uxth	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2302      	movs	r3, #2
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002178:	f00e fadc 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2178      	movs	r1, #120	; 0x78
 800218e:	4828      	ldr	r0, [pc, #160]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 8002190:	f00e fad0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7b7b      	ldrb	r3, [r7, #13]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2178      	movs	r1, #120	; 0x78
 80021a6:	4823      	ldr	r0, [pc, #140]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 80021a8:	f00e fac4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2178      	movs	r1, #120	; 0x78
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 80021c0:	f00e fab8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2178      	movs	r1, #120	; 0x78
 80021d6:	4819      	ldr	r0, [pc, #100]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 80021d8:	f00e faac 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2178      	movs	r1, #120	; 0x78
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 80021f0:	f00e faa0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7a7b      	ldrb	r3, [r7, #9]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2178      	movs	r1, #120	; 0x78
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 8002208:	f00e fa94 	bl	8010734 <ILI9341_Draw_Text>
				break;
 800220c:	f000 be8e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002210:	080157ec 	.word	0x080157ec
 8002214:	080157f4 	.word	0x080157f4
 8002218:	080157fc 	.word	0x080157fc
 800221c:	08015804 	.word	0x08015804
 8002220:	0801580c 	.word	0x0801580c
 8002224:	08015814 	.word	0x08015814
 8002228:	0801581c 	.word	0x0801581c
 800222c:	08015824 	.word	0x08015824
 8002230:	0801582c 	.word	0x0801582c
 8002234:	08015834 	.word	0x08015834
 8002238:	0801583c 	.word	0x0801583c
 800223c:	08015844 	.word	0x08015844
 8002240:	0801584c 	.word	0x0801584c
 8002244:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2302      	movs	r3, #2
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002258:	2105      	movs	r1, #5
 800225a:	48a5      	ldr	r0, [pc, #660]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 800225c:	f00e fa6a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	b29a      	uxth	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2302      	movs	r3, #2
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002270:	2105      	movs	r1, #5
 8002272:	48a0      	ldr	r0, [pc, #640]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 8002274:	f00e fa5e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	b29a      	uxth	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2302      	movs	r3, #2
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002288:	2105      	movs	r1, #5
 800228a:	489b      	ldr	r0, [pc, #620]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 800228c:	f00e fa52 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4896      	ldr	r0, [pc, #600]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80022a4:	f00e fa46 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	4891      	ldr	r0, [pc, #580]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 80022bc:	f00e fa3a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022c0:	7abb      	ldrb	r3, [r7, #10]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	488c      	ldr	r0, [pc, #560]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 80022d4:	f00e fa2e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4887      	ldr	r0, [pc, #540]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 80022ec:	f00e fa22 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	4882      	ldr	r0, [pc, #520]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002304:	f00e fa16 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2178      	movs	r1, #120	; 0x78
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 800231c:	f00e fa0a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2178      	movs	r1, #120	; 0x78
 8002332:	4878      	ldr	r0, [pc, #480]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002334:	f00e f9fe 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7b3b      	ldrb	r3, [r7, #12]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	4873      	ldr	r0, [pc, #460]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 800234c:	f00e f9f2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2302      	movs	r3, #2
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	486e      	ldr	r0, [pc, #440]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 8002364:	f00e f9e6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7abb      	ldrb	r3, [r7, #10]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4869      	ldr	r0, [pc, #420]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 800237c:	f00e f9da 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7a7b      	ldrb	r3, [r7, #9]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	4864      	ldr	r0, [pc, #400]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 8002394:	f00e f9ce 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8002398:	f000 bdc8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ac:	2105      	movs	r1, #5
 80023ae:	4850      	ldr	r0, [pc, #320]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 80023b0:	f00e f9c0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2302      	movs	r3, #2
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c4:	2105      	movs	r1, #5
 80023c6:	484b      	ldr	r0, [pc, #300]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 80023c8:	f00e f9b4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023cc:	7b7b      	ldrb	r3, [r7, #13]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2302      	movs	r3, #2
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023dc:	2105      	movs	r1, #5
 80023de:	4846      	ldr	r0, [pc, #280]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 80023e0:	f00e f9a8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e4:	7b3b      	ldrb	r3, [r7, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2302      	movs	r3, #2
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f4:	2105      	movs	r1, #5
 80023f6:	4841      	ldr	r0, [pc, #260]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80023f8:	f00e f99c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240c:	2105      	movs	r1, #5
 800240e:	483c      	ldr	r0, [pc, #240]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002410:	f00e f990 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002414:	7abb      	ldrb	r3, [r7, #10]
 8002416:	b29a      	uxth	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002424:	2105      	movs	r1, #5
 8002426:	4837      	ldr	r0, [pc, #220]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002428:	f00e f984 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	2105      	movs	r1, #5
 800243e:	4832      	ldr	r0, [pc, #200]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002440:	f00e f978 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	b29a      	uxth	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2302      	movs	r3, #2
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002454:	2178      	movs	r1, #120	; 0x78
 8002456:	482d      	ldr	r0, [pc, #180]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002458:	f00e f96c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2178      	movs	r1, #120	; 0x78
 800246e:	4828      	ldr	r0, [pc, #160]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 8002470:	f00e f960 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	4823      	ldr	r0, [pc, #140]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002488:	f00e f954 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2178      	movs	r1, #120	; 0x78
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 80024a0:	f00e f948 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	4819      	ldr	r0, [pc, #100]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 80024b8:	f00e f93c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7abb      	ldrb	r3, [r7, #10]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2178      	movs	r1, #120	; 0x78
 80024ce:	4814      	ldr	r0, [pc, #80]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 80024d0:	f00e f930 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7a7b      	ldrb	r3, [r7, #9]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2178      	movs	r1, #120	; 0x78
 80024e6:	480f      	ldr	r0, [pc, #60]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 80024e8:	f00e f924 	bl	8010734 <ILI9341_Draw_Text>
				break;
 80024ec:	f000 bd1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80024f0:	080157ec 	.word	0x080157ec
 80024f4:	080157f4 	.word	0x080157f4
 80024f8:	080157fc 	.word	0x080157fc
 80024fc:	08015804 	.word	0x08015804
 8002500:	0801580c 	.word	0x0801580c
 8002504:	08015814 	.word	0x08015814
 8002508:	0801581c 	.word	0x0801581c
 800250c:	08015824 	.word	0x08015824
 8002510:	0801582c 	.word	0x0801582c
 8002514:	08015834 	.word	0x08015834
 8002518:	0801583c 	.word	0x0801583c
 800251c:	08015844 	.word	0x08015844
 8002520:	0801584c 	.word	0x0801584c
 8002524:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2105      	movs	r1, #5
 800253a:	48a5      	ldr	r0, [pc, #660]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 800253c:	f00e f8fa 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	b29a      	uxth	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002550:	2105      	movs	r1, #5
 8002552:	48a0      	ldr	r0, [pc, #640]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002554:	f00e f8ee 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2105      	movs	r1, #5
 800256a:	489b      	ldr	r0, [pc, #620]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 800256c:	f00e f8e2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7b3b      	ldrb	r3, [r7, #12]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2105      	movs	r1, #5
 8002582:	4896      	ldr	r0, [pc, #600]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 8002584:	f00e f8d6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	b29a      	uxth	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002598:	2105      	movs	r1, #5
 800259a:	4891      	ldr	r0, [pc, #580]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 800259c:	f00e f8ca 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a0:	7abb      	ldrb	r3, [r7, #10]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b0:	2105      	movs	r1, #5
 80025b2:	488c      	ldr	r0, [pc, #560]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 80025b4:	f00e f8be 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b8:	7a7b      	ldrb	r3, [r7, #9]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c8:	2105      	movs	r1, #5
 80025ca:	4887      	ldr	r0, [pc, #540]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 80025cc:	f00e f8b2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	2178      	movs	r1, #120	; 0x78
 80025e2:	4882      	ldr	r0, [pc, #520]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 80025e4:	f00e f8a6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2302      	movs	r3, #2
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f8:	2178      	movs	r1, #120	; 0x78
 80025fa:	487d      	ldr	r0, [pc, #500]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 80025fc:	f00e f89a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002600:	7b7b      	ldrb	r3, [r7, #13]
 8002602:	b29a      	uxth	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2302      	movs	r3, #2
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002610:	2178      	movs	r1, #120	; 0x78
 8002612:	4878      	ldr	r0, [pc, #480]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002614:	f00e f88e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002618:	7b3b      	ldrb	r3, [r7, #12]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4873      	ldr	r0, [pc, #460]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 800262c:	f00e f882 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	b29a      	uxth	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2302      	movs	r3, #2
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	486e      	ldr	r0, [pc, #440]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002644:	f00e f876 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002648:	7abb      	ldrb	r3, [r7, #10]
 800264a:	b29a      	uxth	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2302      	movs	r3, #2
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002658:	2178      	movs	r1, #120	; 0x78
 800265a:	4869      	ldr	r0, [pc, #420]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 800265c:	f00e f86a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002660:	7a7b      	ldrb	r3, [r7, #9]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002670:	2178      	movs	r1, #120	; 0x78
 8002672:	4864      	ldr	r0, [pc, #400]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002674:	f00e f85e 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8002678:	f000 bc58 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2302      	movs	r3, #2
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268c:	2105      	movs	r1, #5
 800268e:	4850      	ldr	r0, [pc, #320]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002690:	f00e f850 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	2302      	movs	r3, #2
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a4:	2105      	movs	r1, #5
 80026a6:	484b      	ldr	r0, [pc, #300]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 80026a8:	f00e f844 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026bc:	2105      	movs	r1, #5
 80026be:	4846      	ldr	r0, [pc, #280]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 80026c0:	f00e f838 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c4:	7b3b      	ldrb	r3, [r7, #12]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d4:	2105      	movs	r1, #5
 80026d6:	4841      	ldr	r0, [pc, #260]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 80026d8:	f00e f82c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ec:	2105      	movs	r1, #5
 80026ee:	483c      	ldr	r0, [pc, #240]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 80026f0:	f00e f820 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f4:	7abb      	ldrb	r3, [r7, #10]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2302      	movs	r3, #2
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002704:	2105      	movs	r1, #5
 8002706:	4837      	ldr	r0, [pc, #220]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002708:	f00e f814 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270c:	7a7b      	ldrb	r3, [r7, #9]
 800270e:	b29a      	uxth	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2302      	movs	r3, #2
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271c:	2105      	movs	r1, #5
 800271e:	4832      	ldr	r0, [pc, #200]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002720:	f00e f808 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b29a      	uxth	r2, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002734:	2178      	movs	r1, #120	; 0x78
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 8002738:	f00d fffc 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800273c:	7bbb      	ldrb	r3, [r7, #14]
 800273e:	b29a      	uxth	r2, r3
 8002740:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	2178      	movs	r1, #120	; 0x78
 800274e:	4828      	ldr	r0, [pc, #160]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 8002750:	f00d fff0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	b29a      	uxth	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002764:	2178      	movs	r1, #120	; 0x78
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002768:	f00d ffe4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276c:	7b3b      	ldrb	r3, [r7, #12]
 800276e:	b29a      	uxth	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277c:	2178      	movs	r1, #120	; 0x78
 800277e:	481e      	ldr	r0, [pc, #120]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 8002780:	f00d ffd8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	b29a      	uxth	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2302      	movs	r3, #2
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002794:	2178      	movs	r1, #120	; 0x78
 8002796:	4819      	ldr	r0, [pc, #100]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002798:	f00d ffcc 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279c:	7abb      	ldrb	r3, [r7, #10]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ac:	2178      	movs	r1, #120	; 0x78
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 80027b0:	f00d ffc0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b4:	7a7b      	ldrb	r3, [r7, #9]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	2300      	movs	r3, #0
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c4:	2178      	movs	r1, #120	; 0x78
 80027c6:	480f      	ldr	r0, [pc, #60]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 80027c8:	f00d ffb4 	bl	8010734 <ILI9341_Draw_Text>
				break;
 80027cc:	e3ae      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80027ce:	bf00      	nop
 80027d0:	080157ec 	.word	0x080157ec
 80027d4:	080157f4 	.word	0x080157f4
 80027d8:	080157fc 	.word	0x080157fc
 80027dc:	08015804 	.word	0x08015804
 80027e0:	0801580c 	.word	0x0801580c
 80027e4:	08015814 	.word	0x08015814
 80027e8:	0801581c 	.word	0x0801581c
 80027ec:	08015824 	.word	0x08015824
 80027f0:	0801582c 	.word	0x0801582c
 80027f4:	08015834 	.word	0x08015834
 80027f8:	0801583c 	.word	0x0801583c
 80027fc:	08015844 	.word	0x08015844
 8002800:	0801584c 	.word	0x0801584c
 8002804:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	48a4      	ldr	r0, [pc, #656]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800281c:	f00d ff8a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489f      	ldr	r0, [pc, #636]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002834:	f00d ff7e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	489a      	ldr	r0, [pc, #616]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800284c:	f00d ff72 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4895      	ldr	r0, [pc, #596]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002864:	f00d ff66 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	4890      	ldr	r0, [pc, #576]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 800287c:	f00d ff5a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7abb      	ldrb	r3, [r7, #10]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	488b      	ldr	r0, [pc, #556]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002894:	f00d ff4e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7a7b      	ldrb	r3, [r7, #9]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2105      	movs	r1, #5
 80028aa:	4886      	ldr	r0, [pc, #536]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80028ac:	f00d ff42 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	4881      	ldr	r0, [pc, #516]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 80028c4:	f00d ff36 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	487c      	ldr	r0, [pc, #496]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 80028dc:	f00d ff2a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4877      	ldr	r0, [pc, #476]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 80028f4:	f00d ff1e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f8:	7b3b      	ldrb	r3, [r7, #12]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2302      	movs	r3, #2
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	4872      	ldr	r0, [pc, #456]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 800290c:	f00d ff12 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	486d      	ldr	r0, [pc, #436]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002924:	f00d ff06 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4868      	ldr	r0, [pc, #416]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 800293c:	f00d fefa 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002940:	7a7b      	ldrb	r3, [r7, #9]
 8002942:	b29a      	uxth	r2, r3
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2302      	movs	r3, #2
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002950:	2178      	movs	r1, #120	; 0x78
 8002952:	4863      	ldr	r0, [pc, #396]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002954:	f00d feee 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8002958:	e2e8      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484f      	ldr	r0, [pc, #316]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800296e:	f00d fee1 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002986:	f00d fed5 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800299e:	f00d fec9 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7b3b      	ldrb	r3, [r7, #12]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	4840      	ldr	r0, [pc, #256]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 80029b6:	f00d febd 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	483b      	ldr	r0, [pc, #236]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 80029ce:	f00d feb1 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7abb      	ldrb	r3, [r7, #10]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4836      	ldr	r0, [pc, #216]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 80029e6:	f00d fea5 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2105      	movs	r1, #5
 80029fc:	4831      	ldr	r0, [pc, #196]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80029fe:	f00d fe99 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	482c      	ldr	r0, [pc, #176]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002a16:	f00d fe8d 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4827      	ldr	r0, [pc, #156]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 8002a2e:	f00d fe81 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002a46:	f00d fe75 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a4a:	7b3b      	ldrb	r3, [r7, #12]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002a5e:	f00d fe69 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002a76:	f00d fe5d 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7abb      	ldrb	r3, [r7, #10]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	4813      	ldr	r0, [pc, #76]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 8002a8e:	f00d fe51 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a92:	7a7b      	ldrb	r3, [r7, #9]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa2:	2178      	movs	r1, #120	; 0x78
 8002aa4:	480e      	ldr	r0, [pc, #56]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002aa6:	f00d fe45 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8002aaa:	e23f      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002aac:	080157ec 	.word	0x080157ec
 8002ab0:	080157f4 	.word	0x080157f4
 8002ab4:	080157fc 	.word	0x080157fc
 8002ab8:	08015804 	.word	0x08015804
 8002abc:	0801580c 	.word	0x0801580c
 8002ac0:	08015814 	.word	0x08015814
 8002ac4:	0801581c 	.word	0x0801581c
 8002ac8:	08015824 	.word	0x08015824
 8002acc:	0801582c 	.word	0x0801582c
 8002ad0:	08015834 	.word	0x08015834
 8002ad4:	0801583c 	.word	0x0801583c
 8002ad8:	08015844 	.word	0x08015844
 8002adc:	0801584c 	.word	0x0801584c
 8002ae0:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	48a4      	ldr	r0, [pc, #656]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002af8:	f00d fe1c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	489f      	ldr	r0, [pc, #636]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002b10:	f00d fe10 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b7b      	ldrb	r3, [r7, #13]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	489a      	ldr	r0, [pc, #616]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002b28:	f00d fe04 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4895      	ldr	r0, [pc, #596]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002b40:	f00d fdf8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	4890      	ldr	r0, [pc, #576]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002b58:	f00d fdec 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	488b      	ldr	r0, [pc, #556]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002b70:	f00d fde0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7a7b      	ldrb	r3, [r7, #9]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2105      	movs	r1, #5
 8002b86:	4886      	ldr	r0, [pc, #536]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002b88:	f00d fdd4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4881      	ldr	r0, [pc, #516]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002ba0:	f00d fdc8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	487c      	ldr	r0, [pc, #496]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002bb8:	f00d fdbc 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b7b      	ldrb	r3, [r7, #13]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4877      	ldr	r0, [pc, #476]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002bd0:	f00d fdb0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7b3b      	ldrb	r3, [r7, #12]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4872      	ldr	r0, [pc, #456]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002be8:	f00d fda4 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	486d      	ldr	r0, [pc, #436]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002c00:	f00d fd98 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c04:	7abb      	ldrb	r3, [r7, #10]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4868      	ldr	r0, [pc, #416]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002c18:	f00d fd8c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c1c:	7a7b      	ldrb	r3, [r7, #9]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2302      	movs	r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c2c:	2178      	movs	r1, #120	; 0x78
 8002c2e:	4863      	ldr	r0, [pc, #396]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002c30:	f00d fd80 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8002c34:	e17a      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c46:	2105      	movs	r1, #5
 8002c48:	484f      	ldr	r0, [pc, #316]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002c4a:	f00d fd73 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	2302      	movs	r3, #2
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c5e:	2105      	movs	r1, #5
 8002c60:	484a      	ldr	r0, [pc, #296]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002c62:	f00d fd67 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c76:	2105      	movs	r1, #5
 8002c78:	4845      	ldr	r0, [pc, #276]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002c7a:	f00d fd5b 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c7e:	7b3b      	ldrb	r3, [r7, #12]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c8e:	2105      	movs	r1, #5
 8002c90:	4840      	ldr	r0, [pc, #256]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002c92:	f00d fd4f 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	483b      	ldr	r0, [pc, #236]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002caa:	f00d fd43 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cae:	7abb      	ldrb	r3, [r7, #10]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	4836      	ldr	r0, [pc, #216]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002cc2:	f00d fd37 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cc6:	7a7b      	ldrb	r3, [r7, #9]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2105      	movs	r1, #5
 8002cd8:	4831      	ldr	r0, [pc, #196]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002cda:	f00d fd2b 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cee:	2178      	movs	r1, #120	; 0x78
 8002cf0:	482c      	ldr	r0, [pc, #176]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002cf2:	f00d fd1f 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d06:	2178      	movs	r1, #120	; 0x78
 8002d08:	4827      	ldr	r0, [pc, #156]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002d0a:	f00d fd13 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0e:	7b7b      	ldrb	r3, [r7, #13]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2302      	movs	r3, #2
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1e:	2178      	movs	r1, #120	; 0x78
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002d22:	f00d fd07 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	7b3b      	ldrb	r3, [r7, #12]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2178      	movs	r1, #120	; 0x78
 8002d38:	481d      	ldr	r0, [pc, #116]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002d3a:	f00d fcfb 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d4e:	2178      	movs	r1, #120	; 0x78
 8002d50:	4818      	ldr	r0, [pc, #96]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002d52:	f00d fcef 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d56:	7abb      	ldrb	r3, [r7, #10]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2302      	movs	r3, #2
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	2178      	movs	r1, #120	; 0x78
 8002d68:	4813      	ldr	r0, [pc, #76]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002d6a:	f00d fce3 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d6e:	7a7b      	ldrb	r3, [r7, #9]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2302      	movs	r3, #2
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d7e:	2178      	movs	r1, #120	; 0x78
 8002d80:	480e      	ldr	r0, [pc, #56]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002d82:	f00d fcd7 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8002d86:	e0d1      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002d88:	080157ec 	.word	0x080157ec
 8002d8c:	080157f4 	.word	0x080157f4
 8002d90:	080157fc 	.word	0x080157fc
 8002d94:	08015804 	.word	0x08015804
 8002d98:	0801580c 	.word	0x0801580c
 8002d9c:	08015814 	.word	0x08015814
 8002da0:	0801581c 	.word	0x0801581c
 8002da4:	08015824 	.word	0x08015824
 8002da8:	0801582c 	.word	0x0801582c
 8002dac:	08015834 	.word	0x08015834
 8002db0:	0801583c 	.word	0x0801583c
 8002db4:	08015844 	.word	0x08015844
 8002db8:	0801584c 	.word	0x0801584c
 8002dbc:	08015854 	.word	0x08015854
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <FreqMenu_DrawPresetMenu+0x1524>)
 8002dd4:	f00d fcae 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	2302      	movs	r3, #2
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de8:	2105      	movs	r1, #5
 8002dea:	4853      	ldr	r0, [pc, #332]	; (8002f38 <FreqMenu_DrawPresetMenu+0x1528>)
 8002dec:	f00d fca2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002df0:	7b7b      	ldrb	r3, [r7, #13]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2302      	movs	r3, #2
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e00:	2105      	movs	r1, #5
 8002e02:	484e      	ldr	r0, [pc, #312]	; (8002f3c <FreqMenu_DrawPresetMenu+0x152c>)
 8002e04:	f00d fc96 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2302      	movs	r3, #2
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	4849      	ldr	r0, [pc, #292]	; (8002f40 <FreqMenu_DrawPresetMenu+0x1530>)
 8002e1c:	f00d fc8a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e30:	2105      	movs	r1, #5
 8002e32:	4844      	ldr	r0, [pc, #272]	; (8002f44 <FreqMenu_DrawPresetMenu+0x1534>)
 8002e34:	f00d fc7e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e38:	7abb      	ldrb	r3, [r7, #10]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e48:	2105      	movs	r1, #5
 8002e4a:	483f      	ldr	r0, [pc, #252]	; (8002f48 <FreqMenu_DrawPresetMenu+0x1538>)
 8002e4c:	f00d fc72 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e60:	2105      	movs	r1, #5
 8002e62:	483a      	ldr	r0, [pc, #232]	; (8002f4c <FreqMenu_DrawPresetMenu+0x153c>)
 8002e64:	f00d fc66 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	2302      	movs	r3, #2
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e78:	2178      	movs	r1, #120	; 0x78
 8002e7a:	4835      	ldr	r0, [pc, #212]	; (8002f50 <FreqMenu_DrawPresetMenu+0x1540>)
 8002e7c:	f00d fc5a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e90:	2178      	movs	r1, #120	; 0x78
 8002e92:	4830      	ldr	r0, [pc, #192]	; (8002f54 <FreqMenu_DrawPresetMenu+0x1544>)
 8002e94:	f00d fc4e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea8:	2178      	movs	r1, #120	; 0x78
 8002eaa:	482b      	ldr	r0, [pc, #172]	; (8002f58 <FreqMenu_DrawPresetMenu+0x1548>)
 8002eac:	f00d fc42 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec0:	2178      	movs	r1, #120	; 0x78
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <FreqMenu_DrawPresetMenu+0x154c>)
 8002ec4:	f00d fc36 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed8:	2178      	movs	r1, #120	; 0x78
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <FreqMenu_DrawPresetMenu+0x1550>)
 8002edc:	f00d fc2a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee0:	7abb      	ldrb	r3, [r7, #10]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ef0:	2178      	movs	r1, #120	; 0x78
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ef4:	f00d fc1e 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ef8:	7a7b      	ldrb	r3, [r7, #9]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2302      	movs	r3, #2
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2178      	movs	r1, #120	; 0x78
 8002f0a:	4817      	ldr	r0, [pc, #92]	; (8002f68 <FreqMenu_DrawPresetMenu+0x1558>)
 8002f0c:	f00d fc12 	bl	8010734 <ILI9341_Draw_Text>
			break;
 8002f10:	bf00      	nop
 8002f12:	e00b      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002f14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22b4      	movs	r2, #180	; 0xb4
 8002f22:	2105      	movs	r1, #5
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <FreqMenu_DrawPresetMenu+0x155c>)
 8002f26:	f00d fc05 	bl	8010734 <ILI9341_Draw_Text>
}
 8002f2a:	e7ff      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	080157ec 	.word	0x080157ec
 8002f38:	080157f4 	.word	0x080157f4
 8002f3c:	080157fc 	.word	0x080157fc
 8002f40:	08015804 	.word	0x08015804
 8002f44:	0801580c 	.word	0x0801580c
 8002f48:	08015814 	.word	0x08015814
 8002f4c:	0801581c 	.word	0x0801581c
 8002f50:	08015824 	.word	0x08015824
 8002f54:	0801582c 	.word	0x0801582c
 8002f58:	08015834 	.word	0x08015834
 8002f5c:	0801583c 	.word	0x0801583c
 8002f60:	08015844 	.word	0x08015844
 8002f64:	0801584c 	.word	0x0801584c
 8002f68:	08015854 	.word	0x08015854
 8002f6c:	08015860 	.word	0x08015860

08002f70 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	220a      	movs	r2, #10
 8002f84:	2105      	movs	r1, #5
 8002f86:	4804      	ldr	r0, [pc, #16]	; (8002f98 <FreqMenu_DrawAdjustMenu+0x28>)
 8002f88:	f00d fbd4 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002f8c:	f7fd ffb4 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08015890 	.word	0x08015890

08002f9c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b0a0      	sub	sp, #128	; 0x80
 8002fa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	2302      	movs	r3, #2
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	220a      	movs	r2, #10
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	48a2      	ldr	r0, [pc, #648]	; (800323c <FreqMenu_DrawSweepMenu+0x2a0>)
 8002fb4:	f00d fbbe 	bl	8010734 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002fb8:	f7fd ffbe 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002fce:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d109      	bne.n	8002fee <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002fda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fde:	4a99      	ldr	r2, [pc, #612]	; (8003244 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	4615      	mov	r5, r2
 8002fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	7023      	strb	r3, [r4, #0]
 8002fec:	e008      	b.n	8003000 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ff2:	4a95      	ldr	r2, [pc, #596]	; (8003248 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	4615      	mov	r5, r2
 8002ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003000:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003004:	2300      	movs	r3, #0
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2302      	movs	r3, #2
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003010:	2228      	movs	r2, #40	; 0x28
 8003012:	2105      	movs	r1, #5
 8003014:	f00d fb8e 	bl	8010734 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8003018:	2300      	movs	r3, #0
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800302e:	f003 ffeb 	bl	8007008 <SM_GetOutputInHertz>
 8003032:	ee10 3a10 	vmov	r3, s0
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd faae 	bl	8000598 <__aeabi_f2d>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003044:	e9cd 3400 	strd	r3, r4, [sp]
 8003048:	4a80      	ldr	r2, [pc, #512]	; (800324c <FreqMenu_DrawSweepMenu+0x2b0>)
 800304a:	2119      	movs	r1, #25
 800304c:	f00e ff2e 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003050:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2302      	movs	r3, #2
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003060:	223c      	movs	r2, #60	; 0x3c
 8003062:	2105      	movs	r1, #5
 8003064:	f00d fb66 	bl	8010734 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003068:	2300      	movs	r3, #0
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2302      	movs	r3, #2
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003074:	2264      	movs	r2, #100	; 0x64
 8003076:	2105      	movs	r1, #5
 8003078:	4875      	ldr	r0, [pc, #468]	; (8003250 <FreqMenu_DrawSweepMenu+0x2b4>)
 800307a:	f00d fb5b 	bl	8010734 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d117      	bne.n	80030ba <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2302      	movs	r3, #2
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003096:	2264      	movs	r2, #100	; 0x64
 8003098:	21eb      	movs	r1, #235	; 0xeb
 800309a:	486e      	ldr	r0, [pc, #440]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 800309c:	f00d fb4a 	bl	8010734 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030a0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2302      	movs	r3, #2
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	f240 1109 	movw	r1, #265	; 0x109
 80030b2:	4869      	ldr	r0, [pc, #420]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030b4:	f00d fb3e 	bl	8010734 <ILI9341_Draw_Text>
 80030b8:	e016      	b.n	80030e8 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2302      	movs	r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c6:	2264      	movs	r2, #100	; 0x64
 80030c8:	f240 1109 	movw	r1, #265	; 0x109
 80030cc:	4862      	ldr	r0, [pc, #392]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030ce:	f00d fb31 	bl	8010734 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030d2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	21eb      	movs	r1, #235	; 0xeb
 80030e2:	485c      	ldr	r0, [pc, #368]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 80030e4:	f00d fb26 	bl	8010734 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 80030e8:	4b5c      	ldr	r3, [pc, #368]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	2302      	movs	r3, #2
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	2278      	movs	r2, #120	; 0x78
 80030fe:	2105      	movs	r1, #5
 8003100:	4857      	ldr	r0, [pc, #348]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003102:	f00d fb17 	bl	8010734 <ILI9341_Draw_Text>
 8003106:	e00a      	b.n	800311e <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	2302      	movs	r3, #2
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003114:	2278      	movs	r2, #120	; 0x78
 8003116:	2105      	movs	r1, #5
 8003118:	4851      	ldr	r0, [pc, #324]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 800311a:	f00d fb0b 	bl	8010734 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <FreqMenu_DrawSweepMenu+0x2c8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fa2d 	bl	8000598 <__aeabi_f2d>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003146:	e9cd 3400 	strd	r3, r4, [sp]
 800314a:	4a47      	ldr	r2, [pc, #284]	; (8003268 <FreqMenu_DrawSweepMenu+0x2cc>)
 800314c:	2119      	movs	r1, #25
 800314e:	f00e fead 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003152:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003156:	2300      	movs	r3, #0
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2302      	movs	r3, #2
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003162:	2278      	movs	r2, #120	; 0x78
 8003164:	21b6      	movs	r1, #182	; 0xb6
 8003166:	f00d fae5 	bl	8010734 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 800316a:	4b3c      	ldr	r3, [pc, #240]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10f      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 800317a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	228c      	movs	r2, #140	; 0x8c
 8003188:	2105      	movs	r1, #5
 800318a:	4839      	ldr	r0, [pc, #228]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 800318c:	f00d fad2 	bl	8010734 <ILI9341_Draw_Text>
 8003190:	e00a      	b.n	80031a8 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003192:	2300      	movs	r3, #0
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800319e:	228c      	movs	r2, #140	; 0x8c
 80031a0:	2105      	movs	r1, #5
 80031a2:	4833      	ldr	r0, [pc, #204]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 80031a4:	f00d fac6 	bl	8010734 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <FreqMenu_DrawSweepMenu+0x2d8>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <FreqMenu_DrawSweepMenu+0x2dc>)
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	ee17 0a90 	vmov	r0, s15
 80031d0:	f003 ff5e 	bl	8007090 <SM_ConvertPeriodToHertz>
 80031d4:	eeb0 7a40 	vmov.f32	s14, s0
 80031d8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800327c <FreqMenu_DrawSweepMenu+0x2e0>
 80031dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031e0:	ee16 0a90 	vmov	r0, s13
 80031e4:	f7fd f9d8 	bl	8000598 <__aeabi_f2d>
 80031e8:	4603      	mov	r3, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	f107 0018 	add.w	r0, r7, #24
 80031f0:	e9cd 3400 	strd	r3, r4, [sp]
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <FreqMenu_DrawSweepMenu+0x2e4>)
 80031f6:	2114      	movs	r1, #20
 80031f8:	f00e fe58 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031fc:	f107 0018 	add.w	r0, r7, #24
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800320c:	228c      	movs	r2, #140	; 0x8c
 800320e:	219e      	movs	r1, #158	; 0x9e
 8003210:	f00d fa90 	bl	8010734 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d135      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d131      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8003224:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22a0      	movs	r2, #160	; 0xa0
 8003232:	2105      	movs	r1, #5
 8003234:	4813      	ldr	r0, [pc, #76]	; (8003284 <FreqMenu_DrawSweepMenu+0x2e8>)
 8003236:	f00d fa7d 	bl	8010734 <ILI9341_Draw_Text>
 800323a:	e030      	b.n	800329e <FreqMenu_DrawSweepMenu+0x302>
 800323c:	080158a4 	.word	0x080158a4
 8003240:	40000c00 	.word	0x40000c00
 8003244:	080158b8 	.word	0x080158b8
 8003248:	080158cc 	.word	0x080158cc
 800324c:	080158e0 	.word	0x080158e0
 8003250:	080158f4 	.word	0x080158f4
 8003254:	08015900 	.word	0x08015900
 8003258:	08015904 	.word	0x08015904
 800325c:	20001e59 	.word	0x20001e59
 8003260:	0801590c 	.word	0x0801590c
 8003264:	20001eb0 	.word	0x20001eb0
 8003268:	0801591c 	.word	0x0801591c
 800326c:	20001e58 	.word	0x20001e58
 8003270:	08015928 	.word	0x08015928
 8003274:	20000124 	.word	0x20000124
 8003278:	40013400 	.word	0x40013400
 800327c:	42f00000 	.word	0x42f00000
 8003280:	08015938 	.word	0x08015938
 8003284:	08015944 	.word	0x08015944
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003294:	22a0      	movs	r2, #160	; 0xa0
 8003296:	2105      	movs	r1, #5
 8003298:	484d      	ldr	r0, [pc, #308]	; (80033d0 <FreqMenu_DrawSweepMenu+0x434>)
 800329a:	f00d fa4b 	bl	8010734 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 80032b0:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <FreqMenu_DrawSweepMenu+0x438>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <FreqMenu_DrawSweepMenu+0x43c>)
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	ee17 0a90 	vmov	r0, s15
 80032c6:	f003 fee3 	bl	8007090 <SM_ConvertPeriodToHertz>
 80032ca:	eeb0 7a40 	vmov.f32	s14, s0
 80032ce:	eddf 7a43 	vldr	s15, [pc, #268]	; 80033dc <FreqMenu_DrawSweepMenu+0x440>
 80032d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d6:	ee16 0a90 	vmov	r0, s13
 80032da:	f7fd f95d 	bl	8000598 <__aeabi_f2d>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	1d38      	adds	r0, r7, #4
 80032e4:	e9cd 3400 	strd	r3, r4, [sp]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <FreqMenu_DrawSweepMenu+0x444>)
 80032ea:	2114      	movs	r1, #20
 80032ec:	f00e fdde 	bl	8011eac <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f0:	1d38      	adds	r0, r7, #4
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	22a0      	movs	r2, #160	; 0xa0
 8003300:	21aa      	movs	r1, #170	; 0xaa
 8003302:	f00d fa17 	bl	8010734 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <FreqMenu_DrawSweepMenu+0x448>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10b      	bne.n	800332a <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003312:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	22d5      	movs	r2, #213	; 0xd5
 8003320:	2106      	movs	r1, #6
 8003322:	4831      	ldr	r0, [pc, #196]	; (80033e8 <FreqMenu_DrawSweepMenu+0x44c>)
 8003324:	f00d fa06 	bl	8010734 <ILI9341_Draw_Text>
 8003328:	e00a      	b.n	8003340 <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2302      	movs	r3, #2
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	22d5      	movs	r2, #213	; 0xd5
 8003338:	2105      	movs	r1, #5
 800333a:	482c      	ldr	r0, [pc, #176]	; (80033ec <FreqMenu_DrawSweepMenu+0x450>)
 800333c:	f00d f9fa 	bl	8010734 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003340:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	22cc      	movs	r2, #204	; 0xcc
 800334e:	2168      	movs	r1, #104	; 0x68
 8003350:	4827      	ldr	r0, [pc, #156]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 8003352:	f00d f9ef 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003356:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2302      	movs	r3, #2
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	22de      	movs	r2, #222	; 0xde
 8003364:	2161      	movs	r1, #97	; 0x61
 8003366:	4823      	ldr	r0, [pc, #140]	; (80033f4 <FreqMenu_DrawSweepMenu+0x458>)
 8003368:	f00d f9e4 	bl	8010734 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800336c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	22cc      	movs	r2, #204	; 0xcc
 800337a:	21b7      	movs	r1, #183	; 0xb7
 800337c:	481c      	ldr	r0, [pc, #112]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 800337e:	f00d f9d9 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2302      	movs	r3, #2
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	22de      	movs	r2, #222	; 0xde
 8003390:	21ad      	movs	r1, #173	; 0xad
 8003392:	4819      	ldr	r0, [pc, #100]	; (80033f8 <FreqMenu_DrawSweepMenu+0x45c>)
 8003394:	f00d f9ce 	bl	8010734 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003398:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2302      	movs	r3, #2
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	22cc      	movs	r2, #204	; 0xcc
 80033a6:	f240 1107 	movw	r1, #263	; 0x107
 80033aa:	4811      	ldr	r0, [pc, #68]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 80033ac:	f00d f9c2 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2302      	movs	r3, #2
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	22de      	movs	r2, #222	; 0xde
 80033be:	21fc      	movs	r1, #252	; 0xfc
 80033c0:	480e      	ldr	r0, [pc, #56]	; (80033fc <FreqMenu_DrawSweepMenu+0x460>)
 80033c2:	f00d f9b7 	bl	8010734 <ILI9341_Draw_Text>
}
 80033c6:	bf00      	nop
 80033c8:	3778      	adds	r7, #120	; 0x78
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdb0      	pop	{r4, r5, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08015944 	.word	0x08015944
 80033d4:	20000128 	.word	0x20000128
 80033d8:	40013400 	.word	0x40013400
 80033dc:	42f00000 	.word	0x42f00000
 80033e0:	08015954 	.word	0x08015954
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	08015960 	.word	0x08015960
 80033ec:	08015968 	.word	0x08015968
 80033f0:	08015970 	.word	0x08015970
 80033f4:	08015974 	.word	0x08015974
 80033f8:	0801597c 	.word	0x0801597c
 80033fc:	08015984 	.word	0x08015984

08003400 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	220a      	movs	r2, #10
 8003414:	2105      	movs	r1, #5
 8003416:	4804      	ldr	r0, [pc, #16]	; (8003428 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003418:	f00d f98c 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800341c:	f7fd fd6c 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	0801598c 	.word	0x0801598c

0800342c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d007      	beq.n	800344c <FuncMenu_DrawMenu+0x20>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d009      	beq.n	8003454 <FuncMenu_DrawMenu+0x28>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d000      	beq.n	8003446 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003444:	e00a      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003446:	f000 f80d 	bl	8003464 <FuncMenu_DrawMainMenu>
			break;
 800344a:	e007      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f851 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 8003452:	e003      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003454:	2001      	movs	r0, #1
 8003456:	f000 f84d 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 800345a:	bf00      	nop

	}
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800346a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2302      	movs	r3, #2
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	220a      	movs	r2, #10
 8003478:	210a      	movs	r1, #10
 800347a:	481a      	ldr	r0, [pc, #104]	; (80034e4 <FuncMenu_DrawMainMenu+0x80>)
 800347c:	f00d f95a 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003480:	f7fd fd3a 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003484:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	2302      	movs	r3, #2
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	22d2      	movs	r2, #210	; 0xd2
 8003492:	2105      	movs	r1, #5
 8003494:	4814      	ldr	r0, [pc, #80]	; (80034e8 <FuncMenu_DrawMainMenu+0x84>)
 8003496:	f00d f94d 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800349a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2302      	movs	r3, #2
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	22d2      	movs	r2, #210	; 0xd2
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	4810      	ldr	r0, [pc, #64]	; (80034ec <FuncMenu_DrawMainMenu+0x88>)
 80034ac:	f00d f942 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2302      	movs	r3, #2
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	22d2      	movs	r2, #210	; 0xd2
 80034be:	21af      	movs	r1, #175	; 0xaf
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034c2:	f00d f937 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	22d2      	movs	r2, #210	; 0xd2
 80034d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034da:	f00d f92b 	bl	8010734 <ILI9341_Draw_Text>
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	0801599c 	.word	0x0801599c
 80034e8:	080159a8 	.word	0x080159a8
 80034ec:	080159b0 	.word	0x080159b0
 80034f0:	080159b4 	.word	0x080159b4

080034f4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2302      	movs	r3, #2
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	220a      	movs	r2, #10
 8003512:	210a      	movs	r1, #10
 8003514:	4896      	ldr	r0, [pc, #600]	; (8003770 <FuncMenu_DrawOutputMenu+0x27c>)
 8003516:	f00d f90d 	bl	8010734 <ILI9341_Draw_Text>
 800351a:	e00a      	b.n	8003532 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2302      	movs	r3, #2
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	220a      	movs	r2, #10
 800352a:	210a      	movs	r1, #10
 800352c:	4891      	ldr	r0, [pc, #580]	; (8003774 <FuncMenu_DrawOutputMenu+0x280>)
 800352e:	f00d f901 	bl	8010734 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 facf 	bl	8006ad8 <SM_GetOutputChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003540:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8424 	beq.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b06      	cmp	r3, #6
 8003550:	f200 841f 	bhi.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <FuncMenu_DrawOutputMenu+0x68>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003579 	.word	0x08003579
 8003560:	08003675 	.word	0x08003675
 8003564:	08003799 	.word	0x08003799
 8003568:	08003895 	.word	0x08003895
 800356c:	08003991 	.word	0x08003991
 8003570:	08003ac9 	.word	0x08003ac9
 8003574:	08003bdb 	.word	0x08003bdb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003578:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2232      	movs	r2, #50	; 0x32
 8003586:	210a      	movs	r1, #10
 8003588:	487b      	ldr	r0, [pc, #492]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 800358a:	f00d f8d3 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2302      	movs	r3, #2
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800359a:	2246      	movs	r2, #70	; 0x46
 800359c:	210a      	movs	r1, #10
 800359e:	4877      	ldr	r0, [pc, #476]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 80035a0:	f00d f8c8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a4:	2300      	movs	r3, #0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	2302      	movs	r3, #2
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035b0:	225a      	movs	r2, #90	; 0x5a
 80035b2:	210a      	movs	r1, #10
 80035b4:	4872      	ldr	r0, [pc, #456]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80035b6:	f00d f8bd 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2302      	movs	r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c6:	226e      	movs	r2, #110	; 0x6e
 80035c8:	210a      	movs	r1, #10
 80035ca:	486e      	ldr	r0, [pc, #440]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80035cc:	f00d f8b2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	2302      	movs	r3, #2
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035dc:	2282      	movs	r2, #130	; 0x82
 80035de:	210a      	movs	r1, #10
 80035e0:	4869      	ldr	r0, [pc, #420]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80035e2:	f00d f8a7 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2302      	movs	r3, #2
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035f2:	2296      	movs	r2, #150	; 0x96
 80035f4:	210a      	movs	r1, #10
 80035f6:	4865      	ldr	r0, [pc, #404]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80035f8:	f00d f89c 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2302      	movs	r3, #2
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800360e:	22aa      	movs	r2, #170	; 0xaa
 8003610:	210a      	movs	r1, #10
 8003612:	485f      	ldr	r0, [pc, #380]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003614:	f00d f88e 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003618:	f240 23fd 	movw	r3, #765	; 0x2fd
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2302      	movs	r3, #2
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	22d2      	movs	r2, #210	; 0xd2
 8003626:	2105      	movs	r1, #5
 8003628:	485a      	ldr	r0, [pc, #360]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800362a:	f00d f883 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800362e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2302      	movs	r3, #2
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	22d2      	movs	r2, #210	; 0xd2
 800363c:	2161      	movs	r1, #97	; 0x61
 800363e:	4855      	ldr	r0, [pc, #340]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003640:	f00d f878 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2302      	movs	r3, #2
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	22d2      	movs	r2, #210	; 0xd2
 8003652:	21af      	movs	r1, #175	; 0xaf
 8003654:	484f      	ldr	r0, [pc, #316]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003656:	f00d f86d 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800365a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2302      	movs	r3, #2
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	22d2      	movs	r2, #210	; 0xd2
 8003668:	f44f 7182 	mov.w	r1, #260	; 0x104
 800366c:	4849      	ldr	r0, [pc, #292]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800366e:	f00d f861 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8003672:	e38e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003674:	2300      	movs	r3, #0
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2302      	movs	r3, #2
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	210a      	movs	r1, #10
 8003684:	483c      	ldr	r0, [pc, #240]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 8003686:	f00d f855 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800368a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2246      	movs	r2, #70	; 0x46
 8003698:	210a      	movs	r1, #10
 800369a:	4838      	ldr	r0, [pc, #224]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 800369c:	f00d f84a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a0:	2300      	movs	r3, #0
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2302      	movs	r3, #2
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ac:	225a      	movs	r2, #90	; 0x5a
 80036ae:	210a      	movs	r1, #10
 80036b0:	4833      	ldr	r0, [pc, #204]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80036b2:	f00d f83f 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036b6:	2300      	movs	r3, #0
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2302      	movs	r3, #2
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036c2:	226e      	movs	r2, #110	; 0x6e
 80036c4:	210a      	movs	r1, #10
 80036c6:	482f      	ldr	r0, [pc, #188]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80036c8:	f00d f834 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2282      	movs	r2, #130	; 0x82
 80036da:	210a      	movs	r1, #10
 80036dc:	482a      	ldr	r0, [pc, #168]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80036de:	f00d f829 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2296      	movs	r2, #150	; 0x96
 80036f0:	210a      	movs	r1, #10
 80036f2:	4826      	ldr	r0, [pc, #152]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80036f4:	f00d f81e 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036fe:	2300      	movs	r3, #0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2302      	movs	r3, #2
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370a:	22aa      	movs	r2, #170	; 0xaa
 800370c:	210a      	movs	r1, #10
 800370e:	4820      	ldr	r0, [pc, #128]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003710:	f00d f810 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003714:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2302      	movs	r3, #2
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22d2      	movs	r2, #210	; 0xd2
 8003722:	2105      	movs	r1, #5
 8003724:	481b      	ldr	r0, [pc, #108]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003726:	f00d f805 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800372a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2302      	movs	r3, #2
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	22d2      	movs	r2, #210	; 0xd2
 8003738:	2161      	movs	r1, #97	; 0x61
 800373a:	4816      	ldr	r0, [pc, #88]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800373c:	f00c fffa 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003740:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2302      	movs	r3, #2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	22d2      	movs	r2, #210	; 0xd2
 800374e:	21af      	movs	r1, #175	; 0xaf
 8003750:	4810      	ldr	r0, [pc, #64]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003752:	f00c ffef 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003756:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	22d2      	movs	r2, #210	; 0xd2
 8003764:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003768:	480a      	ldr	r0, [pc, #40]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800376a:	f00c ffe3 	bl	8010734 <ILI9341_Draw_Text>
				break;
 800376e:	e310      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003770:	080159bc 	.word	0x080159bc
 8003774:	080159cc 	.word	0x080159cc
 8003778:	080159dc 	.word	0x080159dc
 800377c:	080159e4 	.word	0x080159e4
 8003780:	080159f0 	.word	0x080159f0
 8003784:	080159f8 	.word	0x080159f8
 8003788:	08015a04 	.word	0x08015a04
 800378c:	08015a10 	.word	0x08015a10
 8003790:	08015a18 	.word	0x08015a18
 8003794:	080159b4 	.word	0x080159b4
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003798:	2300      	movs	r3, #0
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2302      	movs	r3, #2
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037a4:	2232      	movs	r2, #50	; 0x32
 80037a6:	210a      	movs	r1, #10
 80037a8:	48be      	ldr	r0, [pc, #760]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80037aa:	f00c ffc3 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ae:	2300      	movs	r3, #0
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2302      	movs	r3, #2
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ba:	2246      	movs	r2, #70	; 0x46
 80037bc:	210a      	movs	r1, #10
 80037be:	48ba      	ldr	r0, [pc, #744]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80037c0:	f00c ffb8 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2302      	movs	r3, #2
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	225a      	movs	r2, #90	; 0x5a
 80037d2:	210a      	movs	r1, #10
 80037d4:	48b5      	ldr	r0, [pc, #724]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80037d6:	f00c ffad 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2302      	movs	r3, #2
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e6:	226e      	movs	r2, #110	; 0x6e
 80037e8:	210a      	movs	r1, #10
 80037ea:	48b1      	ldr	r0, [pc, #708]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80037ec:	f00c ffa2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2302      	movs	r3, #2
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fc:	2282      	movs	r2, #130	; 0x82
 80037fe:	210a      	movs	r1, #10
 8003800:	48ac      	ldr	r0, [pc, #688]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003802:	f00c ff97 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2302      	movs	r3, #2
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003812:	2296      	movs	r2, #150	; 0x96
 8003814:	210a      	movs	r1, #10
 8003816:	48a8      	ldr	r0, [pc, #672]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003818:	f00c ff8c 	bl	8010734 <ILI9341_Draw_Text>
				if(pOutChan)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003822:	2300      	movs	r3, #0
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	2302      	movs	r3, #2
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800382e:	22aa      	movs	r2, #170	; 0xaa
 8003830:	210a      	movs	r1, #10
 8003832:	48a2      	ldr	r0, [pc, #648]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003834:	f00c ff7e 	bl	8010734 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003838:	f240 23fd 	movw	r3, #765	; 0x2fd
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2302      	movs	r3, #2
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	22d2      	movs	r2, #210	; 0xd2
 8003846:	2105      	movs	r1, #5
 8003848:	489d      	ldr	r0, [pc, #628]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800384a:	f00c ff73 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800384e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2302      	movs	r3, #2
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	22d2      	movs	r2, #210	; 0xd2
 800385c:	2161      	movs	r1, #97	; 0x61
 800385e:	4898      	ldr	r0, [pc, #608]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003860:	f00c ff68 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003864:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2302      	movs	r3, #2
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	22d2      	movs	r2, #210	; 0xd2
 8003872:	21af      	movs	r1, #175	; 0xaf
 8003874:	4892      	ldr	r0, [pc, #584]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003876:	f00c ff5d 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800387a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2302      	movs	r3, #2
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	22d2      	movs	r2, #210	; 0xd2
 8003888:	f44f 7182 	mov.w	r1, #260	; 0x104
 800388c:	488c      	ldr	r0, [pc, #560]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800388e:	f00c ff51 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8003892:	e27e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003894:	2300      	movs	r3, #0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2302      	movs	r3, #2
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038a0:	2232      	movs	r2, #50	; 0x32
 80038a2:	210a      	movs	r1, #10
 80038a4:	487f      	ldr	r0, [pc, #508]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80038a6:	f00c ff45 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038aa:	2300      	movs	r3, #0
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	2302      	movs	r3, #2
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038b6:	2246      	movs	r2, #70	; 0x46
 80038b8:	210a      	movs	r1, #10
 80038ba:	487b      	ldr	r0, [pc, #492]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80038bc:	f00c ff3a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038c0:	2300      	movs	r3, #0
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2302      	movs	r3, #2
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038cc:	225a      	movs	r2, #90	; 0x5a
 80038ce:	210a      	movs	r1, #10
 80038d0:	4876      	ldr	r0, [pc, #472]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80038d2:	f00c ff2f 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	226e      	movs	r2, #110	; 0x6e
 80038e4:	210a      	movs	r1, #10
 80038e6:	4872      	ldr	r0, [pc, #456]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80038e8:	f00c ff24 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ec:	2300      	movs	r3, #0
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	2302      	movs	r3, #2
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038f8:	2282      	movs	r2, #130	; 0x82
 80038fa:	210a      	movs	r1, #10
 80038fc:	486d      	ldr	r0, [pc, #436]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80038fe:	f00c ff19 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003902:	2300      	movs	r3, #0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2302      	movs	r3, #2
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800390e:	2296      	movs	r2, #150	; 0x96
 8003910:	210a      	movs	r1, #10
 8003912:	4869      	ldr	r0, [pc, #420]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003914:	f00c ff0e 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2302      	movs	r3, #2
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800392a:	22aa      	movs	r2, #170	; 0xaa
 800392c:	210a      	movs	r1, #10
 800392e:	4863      	ldr	r0, [pc, #396]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003930:	f00c ff00 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003934:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	2302      	movs	r3, #2
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	22d2      	movs	r2, #210	; 0xd2
 8003942:	2105      	movs	r1, #5
 8003944:	485e      	ldr	r0, [pc, #376]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003946:	f00c fef5 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800394a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2302      	movs	r3, #2
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	22d2      	movs	r2, #210	; 0xd2
 8003958:	2161      	movs	r1, #97	; 0x61
 800395a:	4859      	ldr	r0, [pc, #356]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800395c:	f00c feea 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003960:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2302      	movs	r3, #2
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	22d2      	movs	r2, #210	; 0xd2
 800396e:	21af      	movs	r1, #175	; 0xaf
 8003970:	4853      	ldr	r0, [pc, #332]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003972:	f00c fedf 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003976:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2302      	movs	r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	22d2      	movs	r2, #210	; 0xd2
 8003984:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003988:	484d      	ldr	r0, [pc, #308]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800398a:	f00c fed3 	bl	8010734 <ILI9341_Draw_Text>
				break;
 800398e:	e200      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003990:	2300      	movs	r3, #0
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	2302      	movs	r3, #2
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800399c:	2232      	movs	r2, #50	; 0x32
 800399e:	210a      	movs	r1, #10
 80039a0:	4840      	ldr	r0, [pc, #256]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80039a2:	f00c fec7 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039a6:	2300      	movs	r3, #0
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2302      	movs	r3, #2
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039b2:	2246      	movs	r2, #70	; 0x46
 80039b4:	210a      	movs	r1, #10
 80039b6:	483c      	ldr	r0, [pc, #240]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80039b8:	f00c febc 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039c8:	225a      	movs	r2, #90	; 0x5a
 80039ca:	210a      	movs	r1, #10
 80039cc:	4837      	ldr	r0, [pc, #220]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80039ce:	f00c feb1 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2302      	movs	r3, #2
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039de:	226e      	movs	r2, #110	; 0x6e
 80039e0:	210a      	movs	r1, #10
 80039e2:	4833      	ldr	r0, [pc, #204]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80039e4:	f00c fea6 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80039e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2302      	movs	r3, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2282      	movs	r2, #130	; 0x82
 80039f6:	210a      	movs	r1, #10
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80039fa:	f00c fe9b 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039fe:	2300      	movs	r3, #0
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2302      	movs	r3, #2
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a0a:	2296      	movs	r2, #150	; 0x96
 8003a0c:	210a      	movs	r1, #10
 8003a0e:	482a      	ldr	r0, [pc, #168]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003a10:	f00c fe90 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2302      	movs	r3, #2
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a26:	22aa      	movs	r2, #170	; 0xaa
 8003a28:	210a      	movs	r1, #10
 8003a2a:	4824      	ldr	r0, [pc, #144]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003a2c:	f00c fe82 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a30:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2302      	movs	r3, #2
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	22d2      	movs	r2, #210	; 0xd2
 8003a3e:	2105      	movs	r1, #5
 8003a40:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a42:	f00c fe77 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a46:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	22d2      	movs	r2, #210	; 0xd2
 8003a54:	2161      	movs	r1, #97	; 0x61
 8003a56:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a58:	f00c fe6c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2302      	movs	r3, #2
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	22d2      	movs	r2, #210	; 0xd2
 8003a6a:	21af      	movs	r1, #175	; 0xaf
 8003a6c:	4814      	ldr	r0, [pc, #80]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a6e:	f00c fe61 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a72:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2302      	movs	r3, #2
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	22d2      	movs	r2, #210	; 0xd2
 8003a80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a86:	f00c fe55 	bl	8010734 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2302      	movs	r3, #2
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	2196      	movs	r1, #150	; 0x96
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x5d0>)
 8003a9c:	f00c fe4a 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8003aa0:	e177      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003aa2:	bf00      	nop
 8003aa4:	080159dc 	.word	0x080159dc
 8003aa8:	080159e4 	.word	0x080159e4
 8003aac:	080159f0 	.word	0x080159f0
 8003ab0:	080159f8 	.word	0x080159f8
 8003ab4:	08015a04 	.word	0x08015a04
 8003ab8:	08015a10 	.word	0x08015a10
 8003abc:	08015a18 	.word	0x08015a18
 8003ac0:	080159b4 	.word	0x080159b4
 8003ac4:	08015a20 	.word	0x08015a20
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2302      	movs	r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ad4:	2232      	movs	r2, #50	; 0x32
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	48b0      	ldr	r0, [pc, #704]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003ada:	f00c fe2b 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003aea:	2246      	movs	r2, #70	; 0x46
 8003aec:	210a      	movs	r1, #10
 8003aee:	48ac      	ldr	r0, [pc, #688]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003af0:	f00c fe20 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2302      	movs	r3, #2
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b00:	225a      	movs	r2, #90	; 0x5a
 8003b02:	210a      	movs	r1, #10
 8003b04:	48a7      	ldr	r0, [pc, #668]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b06:	f00c fe15 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b16:	226e      	movs	r2, #110	; 0x6e
 8003b18:	210a      	movs	r1, #10
 8003b1a:	48a3      	ldr	r0, [pc, #652]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b1c:	f00c fe0a 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b20:	2300      	movs	r3, #0
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2302      	movs	r3, #2
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b2c:	2282      	movs	r2, #130	; 0x82
 8003b2e:	210a      	movs	r1, #10
 8003b30:	489e      	ldr	r0, [pc, #632]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003b32:	f00c fdff 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003b36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2296      	movs	r2, #150	; 0x96
 8003b44:	210a      	movs	r1, #10
 8003b46:	489a      	ldr	r0, [pc, #616]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003b48:	f00c fdf4 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b52:	2300      	movs	r3, #0
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2302      	movs	r3, #2
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b5e:	22aa      	movs	r2, #170	; 0xaa
 8003b60:	210a      	movs	r1, #10
 8003b62:	4894      	ldr	r0, [pc, #592]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003b64:	f00c fde6 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b68:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2302      	movs	r3, #2
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	22d2      	movs	r2, #210	; 0xd2
 8003b76:	2105      	movs	r1, #5
 8003b78:	488f      	ldr	r0, [pc, #572]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b7a:	f00c fddb 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b7e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	2302      	movs	r3, #2
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	22d2      	movs	r2, #210	; 0xd2
 8003b8c:	2161      	movs	r1, #97	; 0x61
 8003b8e:	488a      	ldr	r0, [pc, #552]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b90:	f00c fdd0 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	22d2      	movs	r2, #210	; 0xd2
 8003ba2:	21af      	movs	r1, #175	; 0xaf
 8003ba4:	4884      	ldr	r0, [pc, #528]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ba6:	f00c fdc5 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003baa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	22d2      	movs	r2, #210	; 0xd2
 8003bb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bbc:	487e      	ldr	r0, [pc, #504]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003bbe:	f00c fdb9 	bl	8010734 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	2196      	movs	r1, #150	; 0x96
 8003bd2:	487a      	ldr	r0, [pc, #488]	; (8003dbc <FuncMenu_DrawOutputMenu+0x8c8>)
 8003bd4:	f00c fdae 	bl	8010734 <ILI9341_Draw_Text>
				break;
 8003bd8:	e0db      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2302      	movs	r3, #2
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	210a      	movs	r1, #10
 8003bea:	486c      	ldr	r0, [pc, #432]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003bec:	f00c fda2 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bfc:	2246      	movs	r2, #70	; 0x46
 8003bfe:	210a      	movs	r1, #10
 8003c00:	4867      	ldr	r0, [pc, #412]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003c02:	f00c fd97 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c06:	2300      	movs	r3, #0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c12:	225a      	movs	r2, #90	; 0x5a
 8003c14:	210a      	movs	r1, #10
 8003c16:	4863      	ldr	r0, [pc, #396]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003c18:	f00c fd8c 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	2302      	movs	r3, #2
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c28:	226e      	movs	r2, #110	; 0x6e
 8003c2a:	210a      	movs	r1, #10
 8003c2c:	485e      	ldr	r0, [pc, #376]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003c2e:	f00c fd81 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c32:	2300      	movs	r3, #0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2302      	movs	r3, #2
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c3e:	2282      	movs	r2, #130	; 0x82
 8003c40:	210a      	movs	r1, #10
 8003c42:	485a      	ldr	r0, [pc, #360]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003c44:	f00c fd76 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c54:	2296      	movs	r2, #150	; 0x96
 8003c56:	210a      	movs	r1, #10
 8003c58:	4855      	ldr	r0, [pc, #340]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003c5a:	f00c fd6b 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22aa      	movs	r2, #170	; 0xaa
 8003c72:	210a      	movs	r1, #10
 8003c74:	484f      	ldr	r0, [pc, #316]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003c76:	f00c fd5d 	bl	8010734 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	22d2      	movs	r2, #210	; 0xd2
 8003c88:	2105      	movs	r1, #5
 8003c8a:	484b      	ldr	r0, [pc, #300]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c8c:	f00c fd52 	bl	8010734 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	22d2      	movs	r2, #210	; 0xd2
 8003c9e:	2161      	movs	r1, #97	; 0x61
 8003ca0:	4845      	ldr	r0, [pc, #276]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ca2:	f00c fd47 	bl	8010734 <ILI9341_Draw_Text>

				if(pOutChan)
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05a      	beq.n	8003d62 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	22d2      	movs	r2, #210	; 0xd2
 8003cba:	21af      	movs	r1, #175	; 0xaf
 8003cbc:	4840      	ldr	r0, [pc, #256]	; (8003dc0 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003cbe:	f00c fd39 	bl	8010734 <ILI9341_Draw_Text>
					char duty[10] = "";
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003dc8 <FuncMenu_DrawOutputMenu+0x8d4>
 8003cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf4:	ee17 0a90 	vmov	r0, s15
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f107 0008 	add.w	r0, r7, #8
 8003d04:	e9cd 3400 	strd	r3, r4, [sp]
 8003d08:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <FuncMenu_DrawOutputMenu+0x8d8>)
 8003d0a:	210a      	movs	r1, #10
 8003d0c:	f00e f8ce 	bl	8011eac <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d10:	f107 0008 	add.w	r0, r7, #8
 8003d14:	2300      	movs	r3, #0
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d20:	2232      	movs	r2, #50	; 0x32
 8003d22:	21dc      	movs	r1, #220	; 0xdc
 8003d24:	f00c fd06 	bl	8010734 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003d28:	f003 f9d8 	bl	80070dc <SM_IsFuncPwmDutyMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d32:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2302      	movs	r3, #2
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	2196      	movs	r1, #150	; 0x96
 8003d42:	4823      	ldr	r0, [pc, #140]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d44:	f00c fcf6 	bl	8010734 <ILI9341_Draw_Text>
 8003d48:	e016      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2302      	movs	r3, #2
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	2196      	movs	r1, #150	; 0x96
 8003d5a:	481d      	ldr	r0, [pc, #116]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d5c:	f00c fcea 	bl	8010734 <ILI9341_Draw_Text>
 8003d60:	e00a      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	22d2      	movs	r2, #210	; 0xd2
 8003d70:	21af      	movs	r1, #175	; 0xaf
 8003d72:	4811      	ldr	r0, [pc, #68]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d74:	f00c fcde 	bl	8010734 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	22d2      	movs	r2, #210	; 0xd2
 8003d86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d8a:	480b      	ldr	r0, [pc, #44]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d8c:	f00c fcd2 	bl	8010734 <ILI9341_Draw_Text>

				break;
 8003d90:	bf00      	nop
				//
		}
	}
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	080159dc 	.word	0x080159dc
 8003da0:	080159e4 	.word	0x080159e4
 8003da4:	080159f0 	.word	0x080159f0
 8003da8:	080159f8 	.word	0x080159f8
 8003dac:	08015a04 	.word	0x08015a04
 8003db0:	08015a10 	.word	0x08015a10
 8003db4:	08015a18 	.word	0x08015a18
 8003db8:	080159b4 	.word	0x080159b4
 8003dbc:	08015a20 	.word	0x08015a20
 8003dc0:	08015a30 	.word	0x08015a30
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	42c80000 	.word	0x42c80000
 8003dcc:	08015a38 	.word	0x08015a38
 8003dd0:	08015a40 	.word	0x08015a40

08003dd4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d007      	beq.n	8003df4 <GainMenu_DrawMenu+0x20>
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d008      	beq.n	8003dfa <GainMenu_DrawMenu+0x26>
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d000      	beq.n	8003dee <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003dec:	e008      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003dee:	f000 f80b 	bl	8003e08 <GainMenu_DrawMainMenu>
			break;
 8003df2:	e005      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003df4:	f000 f868 	bl	8003ec8 <GainMenu_DrawSignalMenu>
			break;
 8003df8:	e002      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003dfa:	f000 f8af 	bl	8003f5c <GainMenu_DrawAuxMenu>
			break;
 8003dfe:	bf00      	nop

	}
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2302      	movs	r3, #2
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	220a      	movs	r2, #10
 8003e1c:	210a      	movs	r1, #10
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <GainMenu_DrawMainMenu+0xb0>)
 8003e20:	f00c fc88 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e24:	f7fd f868 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e28:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	22d2      	movs	r2, #210	; 0xd2
 8003e36:	2105      	movs	r1, #5
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <GainMenu_DrawMainMenu+0xb4>)
 8003e3a:	f00c fc7b 	bl	8010734 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f002 fe4a 	bl	8006ad8 <SM_GetOutputChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d10b      	bne.n	8003e6c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	22d2      	movs	r2, #210	; 0xd2
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	4816      	ldr	r0, [pc, #88]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e66:	f00c fc65 	bl	8010734 <ILI9341_Draw_Text>
 8003e6a:	e00a      	b.n	8003e82 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e6c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	22d2      	movs	r2, #210	; 0xd2
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <GainMenu_DrawMainMenu+0xbc>)
 8003e7e:	f00c fc59 	bl	8010734 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	22d2      	movs	r2, #210	; 0xd2
 8003e90:	21af      	movs	r1, #175	; 0xaf
 8003e92:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e94:	f00c fc4e 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e98:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	22d2      	movs	r2, #210	; 0xd2
 8003ea6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003eac:	f00c fc42 	bl	8010734 <ILI9341_Draw_Text>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08015a48 	.word	0x08015a48
 8003ebc:	08015a54 	.word	0x08015a54
 8003ec0:	08015a5c 	.word	0x08015a5c
 8003ec4:	08015a64 	.word	0x08015a64

08003ec8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	220a      	movs	r2, #10
 8003edc:	210a      	movs	r1, #10
 8003ede:	481a      	ldr	r0, [pc, #104]	; (8003f48 <GainMenu_DrawSignalMenu+0x80>)
 8003ee0:	f00c fc28 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ee4:	f7fd f808 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ee8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	22d2      	movs	r2, #210	; 0xd2
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <GainMenu_DrawSignalMenu+0x84>)
 8003efa:	f00c fc1b 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003efe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2302      	movs	r3, #2
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	22d2      	movs	r2, #210	; 0xd2
 8003f0c:	2161      	movs	r1, #97	; 0x61
 8003f0e:	4810      	ldr	r0, [pc, #64]	; (8003f50 <GainMenu_DrawSignalMenu+0x88>)
 8003f10:	f00c fc10 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	22d2      	movs	r2, #210	; 0xd2
 8003f22:	21be      	movs	r1, #190	; 0xbe
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <GainMenu_DrawSignalMenu+0x8c>)
 8003f26:	f00c fc05 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f2a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2302      	movs	r3, #2
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	22d2      	movs	r2, #210	; 0xd2
 8003f38:	f240 1109 	movw	r1, #265	; 0x109
 8003f3c:	4806      	ldr	r0, [pc, #24]	; (8003f58 <GainMenu_DrawSignalMenu+0x90>)
 8003f3e:	f00c fbf9 	bl	8010734 <ILI9341_Draw_Text>
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	08015a68 	.word	0x08015a68
 8003f4c:	08015a78 	.word	0x08015a78
 8003f50:	08015a80 	.word	0x08015a80
 8003f54:	08015a88 	.word	0x08015a88
 8003f58:	08015a8c 	.word	0x08015a8c

08003f5c <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2302      	movs	r3, #2
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	220a      	movs	r2, #10
 8003f70:	210a      	movs	r1, #10
 8003f72:	4804      	ldr	r0, [pc, #16]	; (8003f84 <GainMenu_DrawAuxMenu+0x28>)
 8003f74:	f00c fbde 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003f78:	f7fc ffbe 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08015a90 	.word	0x08015a90

08003f88 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d007      	beq.n	8003fa8 <ToplevelMenu_DrawMenu+0x20>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d008      	beq.n	8003fae <ToplevelMenu_DrawMenu+0x26>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d000      	beq.n	8003fa2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003fa0:	e008      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003fa2:	f000 f80b 	bl	8003fbc <ToplevelMenu_DrawMainMenu>
			break;
 8003fa6:	e005      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003fa8:	f000 f844 	bl	8004034 <ToplevelMenu_DrawOutputMenu>
			break;
 8003fac:	e002      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003fae:	f000 f88b 	bl	80040c8 <ToplevelMenu_DrawInputMenu>
			break;
 8003fb2:	bf00      	nop

	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003fc2:	f7fc ff99 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fc6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2302      	movs	r3, #2
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	22d2      	movs	r2, #210	; 0xd2
 8003fd4:	2106      	movs	r1, #6
 8003fd6:	4814      	ldr	r0, [pc, #80]	; (8004028 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003fd8:	f00c fbac 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003fdc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	22d2      	movs	r2, #210	; 0xd2
 8003fea:	215d      	movs	r1, #93	; 0x5d
 8003fec:	480f      	ldr	r0, [pc, #60]	; (800402c <ToplevelMenu_DrawMainMenu+0x70>)
 8003fee:	f00c fba1 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	22d2      	movs	r2, #210	; 0xd2
 8004000:	21af      	movs	r1, #175	; 0xaf
 8004002:	480b      	ldr	r0, [pc, #44]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 8004004:	f00c fb96 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004008:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	2302      	movs	r3, #2
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	22d2      	movs	r2, #210	; 0xd2
 8004016:	f44f 7182 	mov.w	r1, #260	; 0x104
 800401a:	4805      	ldr	r0, [pc, #20]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 800401c:	f00c fb8a 	bl	8010734 <ILI9341_Draw_Text>


}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08015aa0 	.word	0x08015aa0
 800402c:	08015aa8 	.word	0x08015aa8
 8004030:	08015ab0 	.word	0x08015ab0

08004034 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800403a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2302      	movs	r3, #2
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	220a      	movs	r2, #10
 8004048:	210a      	movs	r1, #10
 800404a:	481a      	ldr	r0, [pc, #104]	; (80040b4 <ToplevelMenu_DrawOutputMenu+0x80>)
 800404c:	f00c fb72 	bl	8010734 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8004050:	f7fc ff52 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004054:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2302      	movs	r3, #2
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	22d2      	movs	r2, #210	; 0xd2
 8004062:	210f      	movs	r1, #15
 8004064:	4814      	ldr	r0, [pc, #80]	; (80040b8 <ToplevelMenu_DrawOutputMenu+0x84>)
 8004066:	f00c fb65 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800406a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	2302      	movs	r3, #2
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	22d2      	movs	r2, #210	; 0xd2
 8004078:	2162      	movs	r1, #98	; 0x62
 800407a:	4810      	ldr	r0, [pc, #64]	; (80040bc <ToplevelMenu_DrawOutputMenu+0x88>)
 800407c:	f00c fb5a 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004080:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2302      	movs	r3, #2
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	22d2      	movs	r2, #210	; 0xd2
 800408e:	21b0      	movs	r1, #176	; 0xb0
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8004092:	f00c fb4f 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004096:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	2302      	movs	r3, #2
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	22d2      	movs	r2, #210	; 0xd2
 80040a4:	21f5      	movs	r1, #245	; 0xf5
 80040a6:	4807      	ldr	r0, [pc, #28]	; (80040c4 <ToplevelMenu_DrawOutputMenu+0x90>)
 80040a8:	f00c fb44 	bl	8010734 <ILI9341_Draw_Text>
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	08015ab8 	.word	0x08015ab8
 80040b8:	08015ac0 	.word	0x08015ac0
 80040bc:	08015ac8 	.word	0x08015ac8
 80040c0:	08015ad0 	.word	0x08015ad0
 80040c4:	08015ad8 	.word	0x08015ad8

080040c8 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 80040ce:	f7fc ff33 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80040d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2302      	movs	r3, #2
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	220a      	movs	r2, #10
 80040e0:	210a      	movs	r1, #10
 80040e2:	48c5      	ldr	r0, [pc, #788]	; (80043f8 <ToplevelMenu_DrawInputMenu+0x330>)
 80040e4:	f00c fb26 	bl	8010734 <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040e8:	2300      	movs	r3, #0
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2302      	movs	r3, #2
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	210a      	movs	r1, #10
 80040f8:	48c0      	ldr	r0, [pc, #768]	; (80043fc <ToplevelMenu_DrawInputMenu+0x334>)
 80040fa:	f00c fb1b 	bl	8010734 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 80040fe:	f002 fb2d 	bl	800675c <IT_GetTriggerStatus>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004108:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2302      	movs	r3, #2
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	2232      	movs	r2, #50	; 0x32
 8004116:	2196      	movs	r1, #150	; 0x96
 8004118:	48b9      	ldr	r0, [pc, #740]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 800411a:	f00c fb0b 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800411e:	2300      	movs	r3, #0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2302      	movs	r3, #2
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800412a:	2232      	movs	r2, #50	; 0x32
 800412c:	21c8      	movs	r1, #200	; 0xc8
 800412e:	48b5      	ldr	r0, [pc, #724]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004130:	f00c fb00 	bl	8010734 <ILI9341_Draw_Text>
 8004134:	e015      	b.n	8004162 <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004136:	2300      	movs	r3, #0
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	2302      	movs	r3, #2
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004142:	2232      	movs	r2, #50	; 0x32
 8004144:	2196      	movs	r1, #150	; 0x96
 8004146:	48ae      	ldr	r0, [pc, #696]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 8004148:	f00c faf4 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800414c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2302      	movs	r3, #2
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2232      	movs	r2, #50	; 0x32
 800415a:	21c8      	movs	r1, #200	; 0xc8
 800415c:	48a9      	ldr	r0, [pc, #676]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 800415e:	f00c fae9 	bl	8010734 <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004162:	2300      	movs	r3, #0
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	2302      	movs	r3, #2
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800416e:	2246      	movs	r2, #70	; 0x46
 8004170:	210a      	movs	r1, #10
 8004172:	48a5      	ldr	r0, [pc, #660]	; (8004408 <ToplevelMenu_DrawInputMenu+0x340>)
 8004174:	f00c fade 	bl	8010734 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004178:	f002 fad4 	bl	8006724 <IT_GetActiveTriggerMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d122      	bne.n	80041c8 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004182:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	2302      	movs	r3, #2
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	2246      	movs	r2, #70	; 0x46
 8004190:	2196      	movs	r1, #150	; 0x96
 8004192:	489e      	ldr	r0, [pc, #632]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004194:	f00c face 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004198:	2300      	movs	r3, #0
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	2302      	movs	r3, #2
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	21c8      	movs	r1, #200	; 0xc8
 80041a8:	4899      	ldr	r0, [pc, #612]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041aa:	f00c fac3 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041ae:	2300      	movs	r3, #0
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2302      	movs	r3, #2
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041ba:	2246      	movs	r2, #70	; 0x46
 80041bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80041c0:	4894      	ldr	r0, [pc, #592]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 80041c2:	f00c fab7 	bl	8010734 <ILI9341_Draw_Text>
 80041c6:	e04e      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80041c8:	f002 faac 	bl	8006724 <IT_GetActiveTriggerMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d122      	bne.n	8004218 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041d2:	2300      	movs	r3, #0
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2302      	movs	r3, #2
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041de:	2246      	movs	r2, #70	; 0x46
 80041e0:	2196      	movs	r1, #150	; 0x96
 80041e2:	488a      	ldr	r0, [pc, #552]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 80041e4:	f00c faa6 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2302      	movs	r3, #2
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2246      	movs	r2, #70	; 0x46
 80041f6:	21c8      	movs	r1, #200	; 0xc8
 80041f8:	4885      	ldr	r0, [pc, #532]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041fa:	f00c fa9b 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2302      	movs	r3, #2
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800420a:	2246      	movs	r2, #70	; 0x46
 800420c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004210:	4880      	ldr	r0, [pc, #512]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004212:	f00c fa8f 	bl	8010734 <ILI9341_Draw_Text>
 8004216:	e026      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004218:	f002 fa84 	bl	8006724 <IT_GetActiveTriggerMode>
 800421c:	4603      	mov	r3, r0
 800421e:	2b02      	cmp	r3, #2
 8004220:	d121      	bne.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2302      	movs	r3, #2
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800422e:	2246      	movs	r2, #70	; 0x46
 8004230:	2196      	movs	r1, #150	; 0x96
 8004232:	4876      	ldr	r0, [pc, #472]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004234:	f00c fa7e 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004238:	2300      	movs	r3, #0
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	2302      	movs	r3, #2
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004244:	2246      	movs	r2, #70	; 0x46
 8004246:	21c8      	movs	r1, #200	; 0xc8
 8004248:	4871      	ldr	r0, [pc, #452]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 800424a:	f00c fa73 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800424e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	2302      	movs	r3, #2
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	2246      	movs	r2, #70	; 0x46
 800425c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004260:	486c      	ldr	r0, [pc, #432]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004262:	f00c fa67 	bl	8010734 <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004266:	f002 fa5d 	bl	8006724 <IT_GetActiveTriggerMode>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d141      	bne.n	80042f4 <ToplevelMenu_DrawInputMenu+0x22c>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004270:	2300      	movs	r3, #0
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	2302      	movs	r3, #2
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800427c:	225a      	movs	r2, #90	; 0x5a
 800427e:	210a      	movs	r1, #10
 8004280:	4865      	ldr	r0, [pc, #404]	; (8004418 <ToplevelMenu_DrawInputMenu+0x350>)
 8004282:	f00c fa57 	bl	8010734 <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d916      	bls.n	80042be <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004290:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2302      	movs	r3, #2
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	225a      	movs	r2, #90	; 0x5a
 800429e:	2196      	movs	r1, #150	; 0x96
 80042a0:	4857      	ldr	r0, [pc, #348]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042a2:	f00c fa47 	bl	8010734 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042a6:	2300      	movs	r3, #0
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2302      	movs	r3, #2
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042b2:	225a      	movs	r2, #90	; 0x5a
 80042b4:	21c8      	movs	r1, #200	; 0xc8
 80042b6:	4853      	ldr	r0, [pc, #332]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042b8:	f00c fa3c 	bl	8010734 <ILI9341_Draw_Text>
 80042bc:	e015      	b.n	80042ea <ToplevelMenu_DrawInputMenu+0x222>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042be:	2300      	movs	r3, #0
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2302      	movs	r3, #2
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042ca:	225a      	movs	r2, #90	; 0x5a
 80042cc:	2196      	movs	r1, #150	; 0x96
 80042ce:	484c      	ldr	r0, [pc, #304]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042d0:	f00c fa30 	bl	8010734 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80042d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2302      	movs	r3, #2
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	225a      	movs	r2, #90	; 0x5a
 80042e2:	21c8      	movs	r1, #200	; 0xc8
 80042e4:	4847      	ldr	r0, [pc, #284]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042e6:	f00c fa25 	bl	8010734 <ILI9341_Draw_Text>
		}

		DM_DisplayInputTriggerTimerHertz(200, 17);
 80042ea:	2111      	movs	r1, #17
 80042ec:	20c8      	movs	r0, #200	; 0xc8
 80042ee:	f7fc fea9 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>
 80042f2:	e038      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80042f4:	f002 fa16 	bl	8006724 <IT_GetActiveTriggerMode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d128      	bne.n	8004350 <ToplevelMenu_DrawInputMenu+0x288>
	{
		char comp_text[20] = "";
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004310:	4842      	ldr	r0, [pc, #264]	; (800441c <ToplevelMenu_DrawInputMenu+0x354>)
 8004312:	f006 fd6b 	bl	800adec <HAL_COMP_GetOutputLevel>
 8004316:	4603      	mov	r3, r0
 8004318:	1d38      	adds	r0, r7, #4
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <ToplevelMenu_DrawInputMenu+0x358>)
 800431c:	2114      	movs	r1, #20
 800431e:	f00d fdc5 	bl	8011eac <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004322:	1d38      	adds	r0, r7, #4
 8004324:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2302      	movs	r3, #2
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	225a      	movs	r2, #90	; 0x5a
 8004332:	2196      	movs	r1, #150	; 0x96
 8004334:	f00c f9fe 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004338:	2300      	movs	r3, #0
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2302      	movs	r3, #2
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004344:	225a      	movs	r2, #90	; 0x5a
 8004346:	21c8      	movs	r1, #200	; 0xc8
 8004348:	4836      	ldr	r0, [pc, #216]	; (8004424 <ToplevelMenu_DrawInputMenu+0x35c>)
 800434a:	f00c f9f3 	bl	8010734 <ILI9341_Draw_Text>
 800434e:	e00a      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2302      	movs	r3, #2
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800435c:	225a      	movs	r2, #90	; 0x5a
 800435e:	210a      	movs	r1, #10
 8004360:	4831      	ldr	r0, [pc, #196]	; (8004428 <ToplevelMenu_DrawInputMenu+0x360>)
 8004362:	f00c f9e7 	bl	8010734 <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004366:	f240 23fd 	movw	r3, #765	; 0x2fd
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2302      	movs	r3, #2
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	22cc      	movs	r2, #204	; 0xcc
 8004374:	2114      	movs	r1, #20
 8004376:	482d      	ldr	r0, [pc, #180]	; (800442c <ToplevelMenu_DrawInputMenu+0x364>)
 8004378:	f00c f9dc 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800437c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2302      	movs	r3, #2
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	22de      	movs	r2, #222	; 0xde
 800438a:	2114      	movs	r1, #20
 800438c:	4828      	ldr	r0, [pc, #160]	; (8004430 <ToplevelMenu_DrawInputMenu+0x368>)
 800438e:	f00c f9d1 	bl	8010734 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004392:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2302      	movs	r3, #2
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	22cc      	movs	r2, #204	; 0xcc
 80043a0:	2168      	movs	r1, #104	; 0x68
 80043a2:	4824      	ldr	r0, [pc, #144]	; (8004434 <ToplevelMenu_DrawInputMenu+0x36c>)
 80043a4:	f00c f9c6 	bl	8010734 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80043a8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2302      	movs	r3, #2
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	22de      	movs	r2, #222	; 0xde
 80043b6:	2161      	movs	r1, #97	; 0x61
 80043b8:	481f      	ldr	r0, [pc, #124]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043ba:	f00c f9bb 	bl	8010734 <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80043be:	f002 f9b1 	bl	8006724 <IT_GetActiveTriggerMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13b      	bne.n	8004440 <ToplevelMenu_DrawInputMenu+0x378>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	2302      	movs	r3, #2
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	22cc      	movs	r2, #204	; 0xcc
 80043d6:	21be      	movs	r1, #190	; 0xbe
 80043d8:	4818      	ldr	r0, [pc, #96]	; (800443c <ToplevelMenu_DrawInputMenu+0x374>)
 80043da:	f00c f9ab 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2302      	movs	r3, #2
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	22de      	movs	r2, #222	; 0xde
 80043ec:	21af      	movs	r1, #175	; 0xaf
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043f0:	f00c f9a0 	bl	8010734 <ILI9341_Draw_Text>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 80043f4:	e03a      	b.n	800446c <ToplevelMenu_DrawInputMenu+0x3a4>
 80043f6:	bf00      	nop
 80043f8:	08015ae0 	.word	0x08015ae0
 80043fc:	08015ae8 	.word	0x08015ae8
 8004400:	08015af4 	.word	0x08015af4
 8004404:	08015af8 	.word	0x08015af8
 8004408:	08015afc 	.word	0x08015afc
 800440c:	08015b04 	.word	0x08015b04
 8004410:	08015b08 	.word	0x08015b08
 8004414:	08015b10 	.word	0x08015b10
 8004418:	08015b14 	.word	0x08015b14
 800441c:	20002634 	.word	0x20002634
 8004420:	08015b20 	.word	0x08015b20
 8004424:	08015b28 	.word	0x08015b28
 8004428:	08015b3c 	.word	0x08015b3c
 800442c:	08015b64 	.word	0x08015b64
 8004430:	08015b68 	.word	0x08015b68
 8004434:	08015b70 	.word	0x08015b70
 8004438:	08015b74 	.word	0x08015b74
 800443c:	08015b7c 	.word	0x08015b7c
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004440:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	2302      	movs	r3, #2
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	22cc      	movs	r2, #204	; 0xcc
 800444e:	21b7      	movs	r1, #183	; 0xb7
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <ToplevelMenu_DrawInputMenu+0x3ac>)
 8004452:	f00c f96f 	bl	8010734 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004456:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	2302      	movs	r3, #2
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	22de      	movs	r2, #222	; 0xde
 8004464:	21ad      	movs	r1, #173	; 0xad
 8004466:	4804      	ldr	r0, [pc, #16]	; (8004478 <ToplevelMenu_DrawInputMenu+0x3b0>)
 8004468:	f00c f964 	bl	8010734 <ILI9341_Draw_Text>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08015b80 	.word	0x08015b80
 8004478:	08015ab0 	.word	0x08015ab0

0800447c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <BiasMenu_getStatus+0x14>)
 8004482:	781b      	ldrb	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20001e55 	.word	0x20001e55

08004494 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004498:	f7fd f9e2 	bl	8001860 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <BiasMenuEntryHandler+0x30>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <BiasMenuEntryHandler+0x34>)
 80044a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80044aa:	f001 f9dd 	bl	8005868 <BO_GetDcBiasEncoderValue>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <BiasMenuEntryHandler+0x34>)
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <BiasMenuEntryHandler+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80044bc:	230f      	movs	r3, #15
}
 80044be:	4618      	mov	r0, r3
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20001e55 	.word	0x20001e55
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	20001e57 	.word	0x20001e57

080044d0 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d82d      	bhi.n	800453e <BiasMenuInputHandler+0x6e>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <BiasMenuInputHandler+0x18>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800452d 	.word	0x0800452d
 80044f4:	0800453f 	.word	0x0800453f
 80044f8:	080044fd 	.word	0x080044fd
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80044fc:	2000      	movs	r0, #0
 80044fe:	f002 fd67 	bl	8006fd0 <SM_GetEncoderValue>
 8004502:	4603      	mov	r3, r0
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f9bb 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			break;
 800450a:	e019      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 800450c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004510:	f001 f9b6 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004516:	f44f 7248 	mov.w	r2, #800	; 0x320
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800451c:	e010      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f001 f9ae 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004526:	220a      	movs	r2, #10
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800452a:	e009      	b.n	8004540 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 800452c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004530:	f001 f9a6 	bl	8005880 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <BiasMenuInputHandler+0x80>)
 8004536:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800453c:	e000      	b.n	8004540 <BiasMenuInputHandler+0x70>

		default:
			break;
 800453e:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <BiasMenuInputHandler+0x84>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8004546:	230f      	movs	r3, #15
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40012c00 	.word	0x40012c00
 8004554:	20001e57 	.word	0x20001e57

08004558 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <BiasMenuExitHandler+0x1c>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004562:	f7fd f97d 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <BiasMenuExitHandler+0x20>)
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800456c:	2301      	movs	r3, #1
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20001e55 	.word	0x20001e55
 8004578:	20001e57 	.word	0x20001e57

0800457c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <EM_ProcessEvent+0xb4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b0f      	cmp	r3, #15
 8004586:	d850      	bhi.n	800462a <EM_ProcessEvent+0xae>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <EM_ProcessEvent+0x14>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045d1 	.word	0x080045d1
 8004594:	080045d7 	.word	0x080045d7
 8004598:	080045dd 	.word	0x080045dd
 800459c:	080045e3 	.word	0x080045e3
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045ef 	.word	0x080045ef
 80045a8:	080045f5 	.word	0x080045f5
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	08004601 	.word	0x08004601
 80045b4:	0800462b 	.word	0x0800462b
 80045b8:	08004607 	.word	0x08004607
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	08004613 	.word	0x08004613
 80045c4:	0800461f 	.word	0x0800461f
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004625 	.word	0x08004625
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80045d0:	f000 f830 	bl	8004634 <_ProcessIdleStateEvents>
			break;
 80045d4:	e02a      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80045d6:	f000 f849 	bl	800466c <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80045da:	e027      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80045dc:	f000 f88c 	bl	80046f8 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80045e0:	e024      	b.n	800462c <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80045e2:	f000 f8b5 	bl	8004750 <_ProcessFuncMainMenuStateEvents>
			break;
 80045e6:	e021      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80045e8:	f000 f8d8 	bl	800479c <_ProcessFuncSignalMenuStateEvents>
			break;
 80045ec:	e01e      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80045ee:	f000 f8f1 	bl	80047d4 <_ProcessFuncAuxMenuStateEvents>
			break;
 80045f2:	e01b      	b.n	800462c <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80045f4:	f000 f914 	bl	8004820 <_ProcessGainMainMenuStateEvents>
			break;
 80045f8:	e018      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80045fa:	f000 f949 	bl	8004890 <_ProcessGainSignalMenuStateEvents>
			break;
 80045fe:	e015      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 8004600:	f000 f990 	bl	8004924 <_ProcessGainAuxMenuStateEvents>
			break;
 8004604:	e012      	b.n	800462c <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 8004606:	f000 f9a9 	bl	800495c <_ProcessFreqMainMenuStateEvents>
			break;
 800460a:	e00f      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 800460c:	f000 f9e4 	bl	80049d8 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004610:	e00c      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 8004612:	f000 f9fd 	bl	8004a10 <_ProcessFreqAdjustMenuState>
			break;
 8004616:	e009      	b.n	800462c <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004618:	f000 fa16 	bl	8004a48 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 800461c:	e006      	b.n	800462c <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 800461e:	f000 fa2f 	bl	8004a80 <_ProcessFreqSweepMenuStateEvents>
			break;
 8004622:	e003      	b.n	800462c <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004624:	f000 fa76 	bl	8004b14 <_ProcessBiasMainMenuEvents>
			break;
 8004628:	e000      	b.n	800462c <EM_ProcessEvent+0xb0>

		default:
			break;
 800462a:	bf00      	nop
	}

}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20001e56 	.word	0x20001e56

08004634 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <_ProcessIdleStateEvents+0x30>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004640:	f000 ff2e 	bl	80054a0 <ToplevelOutputMenuEntryHandler>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <_ProcessIdleStateEvents+0x34>)
 800464a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <_ProcessIdleStateEvents+0x30>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d105      	bne.n	8004660 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004654:	f000 ff48 	bl	80054e8 <ToplevelInputMenuEntryHandler>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <_ProcessIdleStateEvents+0x34>)
 800465e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20001e57 	.word	0x20001e57
 8004668:	20001e56 	.word	0x20001e56

0800466c <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d105      	bne.n	8004684 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004678:	f000 ff24 	bl	80054c4 <ToplevelOutputMenuExitHandler>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004682:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d108      	bne.n	800469e <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800468c:	2000      	movs	r0, #0
 800468e:	f000 fef7 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 8004692:	f000 fce5 	bl	8005060 <FuncMainMenuEntryHandler>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800469c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d108      	bne.n	80046b8 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f000 feea 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80046ac:	f000 fbd0 	bl	8004e50 <FreqMainMenuEntryHandler>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046b6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d108      	bne.n	80046d2 <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f000 fedd 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80046c6:	f000 fdc1 	bl	800524c <GainMainMenuEntryHandler>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046d0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d108      	bne.n	80046ec <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046da:	2000      	movs	r0, #0
 80046dc:	f000 fed0 	bl	8005480 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80046e0:	f7ff fed8 	bl	8004494 <BiasMenuEntryHandler>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046ea:	701a      	strb	r2, [r3, #0]
	}
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20001e57 	.word	0x20001e57
 80046f4:	20001e56 	.word	0x20001e56

080046f8 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d105      	bne.n	8004710 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 8004704:	f000 ff24 	bl	8005550 <ToplevelInputMenuExitHandler>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800470e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fef5 	bl	800550c <ToplevelInputMenuInputHandler>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004728:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d108      	bne.n	8004744 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fee8 	bl	800550c <ToplevelInputMenuInputHandler>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004742:	701a      	strb	r2, [r3, #0]
	}
}
 8004744:	bf00      	nop
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20001e57 	.word	0x20001e57
 800474c:	20001e56 	.word	0x20001e56

08004750 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b06      	cmp	r3, #6
 800475a:	d105      	bne.n	8004768 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 800475c:	f000 fc92 	bl	8005084 <FuncMainMenuExitHandler>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004766:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004770:	f000 fc9c 	bl	80050ac <FuncSignalMenuEntryHandler>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 800477a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_ProcessFuncMainMenuStateEvents+0x44>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d105      	bne.n	8004790 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 8004784:	f000 fcd6 	bl	8005134 <FuncAuxMenuEntryHandler>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <_ProcessFuncMainMenuStateEvents+0x48>)
 800478e:	701a      	strb	r2, [r3, #0]
	}
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20001e57 	.word	0x20001e57
 8004798:	20001e56 	.word	0x20001e56

0800479c <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d105      	bne.n	80047b4 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80047a8:	f000 fc9e 	bl	80050e8 <FuncSignalMenuInputHandler>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047b2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d105      	bne.n	80047c8 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80047bc:	f000 fca6 	bl	800510c <FuncSignalMenuExitHandler>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047c6:	701a      	strb	r2, [r3, #0]
	}
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20001e57 	.word	0x20001e57
 80047d0:	20001e56 	.word	0x20001e56

080047d4 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d105      	bne.n	80047ec <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80047e0:	f000 fcc6 	bl	8005170 <FuncAuxMenuInputHandler>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 80047ea:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d105      	bne.n	8004800 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80047f4:	f000 fd0a 	bl	800520c <FuncAuxMenuExitHandler>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 80047fe:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d105      	bne.n	8004814 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004808:	f000 fcee 	bl	80051e8 <FuncAuxToggleDutyMode>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004812:	701a      	strb	r2, [r3, #0]
	}

}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20001e57 	.word	0x20001e57
 800481c:	20001e56 	.word	0x20001e56

08004820 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d108      	bne.n	8004840 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 800482e:	f000 fd1f 	bl	8005270 <GainMainMenuExitHandler>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 8004838:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800483a:	2002      	movs	r0, #2
 800483c:	f000 fe20 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004848:	f000 fd24 	bl	8005294 <GainSignalMenuEntryHandler>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	4b0e      	ldr	r3, [pc, #56]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 8004852:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <_ProcessGainMainMenuStateEvents+0x68>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d110      	bne.n	800487e <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800485c:	2001      	movs	r0, #1
 800485e:	f002 f93b 	bl	8006ad8 <SM_GetOutputChannel>
 8004862:	4603      	mov	r3, r0
 8004864:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d005      	beq.n	800487e <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 8004872:	f000 fda5 	bl	80053c0 <GainAuxMenuEntryHandler>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <_ProcessGainMainMenuStateEvents+0x6c>)
 800487c:	701a      	strb	r2, [r3, #0]
	}
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001e57 	.word	0x20001e57
 800488c:	20001e56 	.word	0x20001e56

08004890 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d106      	bne.n	80048aa <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 800489c:	2005      	movs	r0, #5
 800489e:	f000 fd2b 	bl	80052f8 <GainSignalMenuInputHandler>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048a8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b06      	cmp	r3, #6
 80048b0:	d105      	bne.n	80048be <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80048b2:	f000 fd73 	bl	800539c <GainSignalMenuExitHandler>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048bc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d106      	bne.n	80048d4 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f000 fd16 	bl	80052f8 <GainSignalMenuInputHandler>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048d2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d106      	bne.n	80048ea <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80048dc:	2002      	movs	r0, #2
 80048de:	f000 fd0b 	bl	80052f8 <GainSignalMenuInputHandler>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d106      	bne.n	8004900 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80048f2:	2003      	movs	r0, #3
 80048f4:	f000 fd00 	bl	80052f8 <GainSignalMenuInputHandler>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048fe:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d106      	bne.n	8004916 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004908:	2004      	movs	r0, #4
 800490a:	f000 fcf5 	bl	80052f8 <GainSignalMenuInputHandler>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004914:	701a      	strb	r2, [r3, #0]
	}

}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20001e57 	.word	0x20001e57
 8004920:	20001e56 	.word	0x20001e56

08004924 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <_ProcessGainAuxMenuStateEvents+0x30>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d105      	bne.n	800493c <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004930:	f000 fd76 	bl	8005420 <GainAuxMenuInputHandler>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_ProcessGainAuxMenuStateEvents+0x34>)
 800493a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_ProcessGainAuxMenuStateEvents+0x30>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b06      	cmp	r3, #6
 8004942:	d105      	bne.n	8004950 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004944:	f000 fd7e 	bl	8005444 <GainAuxMenuExitHandler>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <_ProcessGainAuxMenuStateEvents+0x34>)
 800494e:	701a      	strb	r2, [r3, #0]
	}
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20001e57 	.word	0x20001e57
 8004958:	20001e56 	.word	0x20001e56

0800495c <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b06      	cmp	r3, #6
 8004966:	d108      	bne.n	800497a <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004968:	f000 fa84 	bl	8004e74 <FreqMainMenuExitHandler>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004972:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004974:	2002      	movs	r0, #2
 8004976:	f000 fd83 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d105      	bne.n	800498e <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004982:	f000 fa8f 	bl	8004ea4 <FreqPresetMenuEntryHandler>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 800498c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d105      	bne.n	80049a2 <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 8004996:	f000 fad5 	bl	8004f44 <FreqAdjustMenuEntryHandler>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049a0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d105      	bne.n	80049b6 <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80049aa:	f000 f905 	bl	8004bb8 <FreqSweepMenuEntryHandler>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049b4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d105      	bne.n	80049ca <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80049be:	f000 fafd 	bl	8004fbc <FreqPrescalerMenuEntryHandler>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <_ProcessFreqMainMenuStateEvents+0x78>)
 80049c8:	701a      	strb	r2, [r3, #0]
	}
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20001e57 	.word	0x20001e57
 80049d4:	20001e56 	.word	0x20001e56

080049d8 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d105      	bne.n	80049f0 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80049e4:	f000 fa8a 	bl	8004efc <FreqPresetMenuInputHandler>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <_ProcessFreqPresetMenuStateEvents+0x34>)
 80049ee:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d105      	bne.n	8004a04 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80049f8:	f000 fa92 	bl	8004f20 <FreqPresetMenuExitHandler>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004a02:	701a      	strb	r2, [r3, #0]
	}
}
 8004a04:	bf00      	nop
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20001e57 	.word	0x20001e57
 8004a0c:	20001e56 	.word	0x20001e56

08004a10 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <_ProcessFreqAdjustMenuState+0x30>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d105      	bne.n	8004a28 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004a1c:	f000 fab0 	bl	8004f80 <FreqAdjustMenuInputHandler>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <_ProcessFreqAdjustMenuState+0x34>)
 8004a26:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <_ProcessFreqAdjustMenuState+0x30>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b06      	cmp	r3, #6
 8004a2e:	d105      	bne.n	8004a3c <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004a30:	f000 fab2 	bl	8004f98 <FreqAdjustMenuExitHandler>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <_ProcessFreqAdjustMenuState+0x34>)
 8004a3a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20001e57 	.word	0x20001e57
 8004a44:	20001e56 	.word	0x20001e56

08004a48 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d105      	bne.n	8004a60 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004a54:	f000 face 	bl	8004ff4 <FreqPrescalerMenuInputHandler>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a5e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d105      	bne.n	8004a74 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004a68:	f000 fad0 	bl	800500c <FreqPrescalerMenuExitHandler>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a72:	701a      	strb	r2, [r3, #0]
	}
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20001e57 	.word	0x20001e57
 8004a7c:	20001e56 	.word	0x20001e56

08004a80 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004a8c:	2007      	movs	r0, #7
 8004a8e:	f000 f8e9 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004a98:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d106      	bne.n	8004ab0 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004aa2:	2008      	movs	r0, #8
 8004aa4:	f000 f8de 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004aae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d106      	bne.n	8004ac6 <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004ab8:	2009      	movs	r0, #9
 8004aba:	f000 f8d3 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ac4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d106      	bne.n	8004adc <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8004ace:	200a      	movs	r0, #10
 8004ad0:	f000 f8c8 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ada:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d106      	bne.n	8004af2 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004ae4:	200b      	movs	r0, #11
 8004ae6:	f000 f8bd 	bl	8004c64 <FreqSweepMenuInputHandler>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004af0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d105      	bne.n	8004b06 <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 8004afa:	f000 f989 	bl	8004e10 <FreqSweepMenuExitHandler>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004b04:	701a      	strb	r2, [r3, #0]
	}

}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20001e57 	.word	0x20001e57
 8004b10:	20001e56 	.word	0x20001e56

08004b14 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d106      	bne.n	8004b2e <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004b20:	2005      	movs	r0, #5
 8004b22:	f7ff fcd5 	bl	80044d0 <BiasMenuInputHandler>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b2c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d108      	bne.n	8004b48 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 8004b36:	f7ff fd0f 	bl	8004558 <BiasMenuExitHandler>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b40:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004b42:	2002      	movs	r0, #2
 8004b44:	f000 fc9c 	bl	8005480 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7ff fcbd 	bl	80044d0 <BiasMenuInputHandler>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b5c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d106      	bne.n	8004b74 <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004b66:	2002      	movs	r0, #2
 8004b68:	f7ff fcb2 	bl	80044d0 <BiasMenuInputHandler>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b72:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d106      	bne.n	8004b8a <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f7ff fca7 	bl	80044d0 <BiasMenuInputHandler>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <_ProcessBiasMainMenuEvents+0x80>)
 8004b88:	701a      	strb	r2, [r3, #0]
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20001e57 	.word	0x20001e57
 8004b94:	20001e56 	.word	0x20001e56

08004b98 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <EM_SetNewEvent+0x1c>)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	7013      	strb	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20001e57 	.word	0x20001e57

08004bb8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004bbc:	f7fc fe50 	bl	8001860 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <FreqSweepMenuEntryHandler+0x94>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bcc:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bce:	edd3 7a00 	vldr	s15, [r3]
 8004bd2:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d008      	beq.n	8004bee <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <FreqSweepMenuEntryHandler+0x94>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bea:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <FreqSweepMenuEntryHandler+0x98>)
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004bf8:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d101      	bne.n	8004c06 <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004c02:	f001 f88f 	bl	8005d24 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f001 f8e6 	bl	8005dd8 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f001 f943 	bl	8005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004c12:	f001 f97d 	bl	8005f10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004c16:	eef0 7a40 	vmov.f32	s15, s0
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <FreqSweepMenuEntryHandler+0x9c>)
 8004c1c:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004c26:	2009      	movs	r0, #9
 8004c28:	f000 f81c 	bl	8004c64 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c2e:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <FreqSweepMenuEntryHandler+0xa0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <FreqSweepMenuEntryHandler+0xa4>)
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <FreqSweepMenuEntryHandler+0xa8>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004c46:	230d      	movs	r3, #13
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	20000128 	.word	0x20000128
 8004c54:	20001eb0 	.word	0x20001eb0
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	20001e5a 	.word	0x20001e5a
 8004c60:	20001e57 	.word	0x20001e57

08004c64 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	3b07      	subs	r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	f200 80b2 	bhi.w	8004ddc <FreqSweepMenuInputHandler+0x178>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <FreqSweepMenuInputHandler+0x1c>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c95 	.word	0x08004c95
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004dcd 	.word	0x08004dcd
 8004c8c:	08004dd5 	.word	0x08004dd5
 8004c90:	08004ce9 	.word	0x08004ce9
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004c94:	4b56      	ldr	r3, [pc, #344]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a55      	ldr	r2, [pc, #340]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004c9a:	f083 0301 	eor.w	r3, r3, #1
 8004c9e:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <FreqSweepMenuInputHandler+0x18c>)
 8004ca6:	f083 0301 	eor.w	r3, r3, #1
 8004caa:	6013      	str	r3, [r2, #0]
			break;
 8004cac:	e097      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004cae:	4b51      	ldr	r3, [pc, #324]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f083 0301 	eor.w	r3, r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	4b4e      	ldr	r3, [pc, #312]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cba:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d004      	beq.n	8004cce <FreqSweepMenuInputHandler+0x6a>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d008      	beq.n	8004cda <FreqSweepMenuInputHandler+0x76>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <FreqSweepMenuInputHandler+0x70>
 8004ccc:	e006      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004cce:	f001 f829 	bl	8005d24 <FS_SetSweepModeDown>
					break;
 8004cd2:	e003      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004cd4:	f001 f856 	bl	8005d84 <FS_SetSweepModeUp>
					break;
 8004cd8:	e000      	b.n	8004cdc <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004cda:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004cdc:	4b46      	ldr	r3, [pc, #280]	; (8004df8 <FreqSweepMenuInputHandler+0x194>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f879 	bl	8005dd8 <FS_SetEncoderControlMode>

			break;
 8004ce6:	e07a      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <FreqSweepMenuInputHandler+0x194>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <FreqSweepMenuInputHandler+0x92>
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00b      	beq.n	8004d0c <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004cf4:	e073      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f001 f8ce 	bl	8005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004cfc:	f001 f908 	bl	8005f10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004d00:	eef0 7a40 	vmov.f32	s15, s0
 8004d04:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <FreqSweepMenuInputHandler+0x198>)
 8004d06:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004d0a:	e05e      	b.n	8004dca <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004d0c:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <FreqSweepMenuInputHandler+0x190>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <FreqSweepMenuInputHandler+0xb6>
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d02a      	beq.n	8004d6e <FreqSweepMenuInputHandler+0x10a>
							break;
 8004d18:	e056      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004d1a:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d803      	bhi.n	8004d2a <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004d22:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d24:	220d      	movs	r2, #13
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d28:	e04e      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004d2a:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d36:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	dd09      	ble.n	8004d5a <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004d46:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d58:	e036      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d66:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004d68:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004d6c:	e02c      	b.n	8004dc8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d904      	bls.n	8004d84 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004d7a:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d82:	e020      	b.n	8004dc6 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004d92:	edd3 7a00 	vldr	s15, [r3]
 8004d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	d509      	bpl.n	8004db4 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <FreqSweepMenuInputHandler+0x1a4>)
 8004da2:	edd3 7a00 	vldr	s15, [r3]
 8004da6:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dac:	ee17 2a90 	vmov	r2, s15
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004db2:	e008      	b.n	8004dc6 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <FreqSweepMenuInputHandler+0x19c>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <FreqSweepMenuInputHandler+0x1a0>)
 8004dc2:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004dc6:	bf00      	nop
					break;
 8004dc8:	bf00      	nop
			break;
 8004dca:	e008      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f001 f803 	bl	8005dd8 <FS_SetEncoderControlMode>

			break;
 8004dd2:	e004      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f000 ffff 	bl	8005dd8 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004dda:	e000      	b.n	8004dde <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004ddc:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <FreqSweepMenuInputHandler+0x1a8>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004de4:	230d      	movs	r3, #13
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	20001e58 	.word	0x20001e58
 8004df8:	20001e59 	.word	0x20001e59
 8004dfc:	20001eb0 	.word	0x20001eb0
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	20000128 	.word	0x20000128
 8004e08:	20000124 	.word	0x20000124
 8004e0c:	20001e57 	.word	0x20001e57

08004e10 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e14:	f7fc fd24 	bl	8001860 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <FreqSweepMenuExitHandler+0x34>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <FreqSweepMenuExitHandler+0x38>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <FreqSweepMenuExitHandler+0x3c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e3c:	230a      	movs	r3, #10
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	20001e5a 	.word	0x20001e5a
 8004e4c:	20001e57 	.word	0x20001e57

08004e50 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e54:	f7fc fd04 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <FreqMainMenuEntryHandler+0x1c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <FreqMainMenuEntryHandler+0x20>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e64:	230a      	movs	r3, #10
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20001e5a 	.word	0x20001e5a
 8004e70:	20001e57 	.word	0x20001e57

08004e74 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004e78:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <FreqMainMenuExitHandler+0x24>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <FreqMainMenuExitHandler+0x28>)
 8004e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004e86:	f7fc fceb 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <FreqMainMenuExitHandler+0x2c>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20001e5a 	.word	0x20001e5a
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	20001e57 	.word	0x20001e57

08004ea4 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004eaa:	f7fc fcd9 	bl	8001860 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004eae:	f000 ff2d 	bl	8005d0c <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <FreqPresetMenuEntryHandler+0x48>)
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004eb8:	f000 feda 	bl	8005c70 <FreqO_GetFPresetObject>
 8004ebc:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <FreqPresetMenuEntryHandler+0x4c>)
 8004ec6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ecc:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <FreqPresetMenuEntryHandler+0x4c>)
 8004ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed4:	e002      	b.n	8004edc <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004ed6:	4807      	ldr	r0, [pc, #28]	; (8004ef4 <FreqPresetMenuEntryHandler+0x50>)
 8004ed8:	f7fc fd08 	bl	80018ec <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <FreqPresetMenuEntryHandler+0x54>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004ee2:	230b      	movs	r3, #11
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20001e5a 	.word	0x20001e5a
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	08015b84 	.word	0x08015b84
 8004ef8:	20001e57 	.word	0x20001e57

08004efc <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f00:	2000      	movs	r0, #0
 8004f02:	f002 f865 	bl	8006fd0 <SM_GetEncoderValue>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fd8d 	bl	8005a28 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <FreqPresetMenuInputHandler+0x20>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004f14:	230b      	movs	r3, #11
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001e57 	.word	0x20001e57

08004f20 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f24:	f7fc fc9c 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <FreqPresetMenuExitHandler+0x1c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <FreqPresetMenuExitHandler+0x20>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004f34:	230a      	movs	r3, #10
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20001e5a 	.word	0x20001e5a
 8004f40:	20001e57 	.word	0x20001e57

08004f44 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f48:	f7fc fc8a 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <FreqAdjustMenuEntryHandler+0x2c>)
 8004f4e:	2203      	movs	r2, #3
 8004f50:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <FreqAdjustMenuEntryHandler+0x30>)
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <FreqAdjustMenuEntryHandler+0x34>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <FreqAdjustMenuEntryHandler+0x34>)
 8004f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <FreqAdjustMenuEntryHandler+0x38>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f68:	230c      	movs	r3, #12
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20001e5a 	.word	0x20001e5a
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	20001e57 	.word	0x20001e57

08004f80 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004f84:	f000 fe20 	bl	8005bc8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <FreqAdjustMenuInputHandler+0x14>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f8e:	230c      	movs	r3, #12
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20001e57 	.word	0x20001e57

08004f98 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f9c:	f7fc fc60 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <FreqAdjustMenuExitHandler+0x1c>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <FreqAdjustMenuExitHandler+0x20>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004fac:	230a      	movs	r3, #10
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20001e5a 	.word	0x20001e5a
 8004fb8:	20001e57 	.word	0x20001e57

08004fbc <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fc0:	f7fc fc4e 	bl	8001860 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <FreqPrescalerMenuEntryHandler+0x30>)
 8004fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <FreqPrescalerMenuEntryHandler+0x30>)
 8004fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <FreqPrescalerMenuEntryHandler+0x34>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004fe0:	230e      	movs	r3, #14
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20001e5a 	.word	0x20001e5a
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	20001e57 	.word	0x20001e57

08004ff4 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004ff8:	f000 fe12 	bl	8005c20 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004ffc:	4b02      	ldr	r3, [pc, #8]	; (8005008 <FreqPrescalerMenuInputHandler+0x14>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8005002:	230e      	movs	r3, #14
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001e57 	.word	0x20001e57

0800500c <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005010:	f7fc fc26 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <FreqPrescalerMenuExitHandler+0x1c>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800501a:	4b04      	ldr	r3, [pc, #16]	; (800502c <FreqPrescalerMenuExitHandler+0x20>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8005020:	230a      	movs	r3, #10
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20001e5a 	.word	0x20001e5a
 800502c:	20001e57 	.word	0x20001e57

08005030 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <FreqMenu_getStatus+0x14>)
 8005036:	781b      	ldrb	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20001e5a 	.word	0x20001e5a

08005048 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <FuncMenu_getStatus+0x14>)
 800504e:	781b      	ldrb	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20001e5b 	.word	0x20001e5b

08005060 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005064:	f7fc fbfc 	bl	8001860 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <FuncMainMenuEntryHandler+0x1c>)
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800506e:	4b04      	ldr	r3, [pc, #16]	; (8005080 <FuncMainMenuEntryHandler+0x20>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005074:	2303      	movs	r3, #3
}
 8005076:	4618      	mov	r0, r3
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20001e5b 	.word	0x20001e5b
 8005080:	20001e57 	.word	0x20001e57

08005084 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <FuncMainMenuExitHandler+0x20>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800508e:	2002      	movs	r0, #2
 8005090:	f000 f9f6 	bl	8005480 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8005094:	f7fc fbe4 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <FuncMainMenuExitHandler+0x24>)
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800509e:	2301      	movs	r3, #1
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20001e5b 	.word	0x20001e5b
 80050a8:	20001e57 	.word	0x20001e57

080050ac <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050b0:	f7fc fbd6 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80050b4:	f000 ff5a 	bl	8005f6c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <FuncSignalMenuEntryHandler+0x30>)
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <FuncSignalMenuEntryHandler+0x34>)
 80050c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <FuncSignalMenuEntryHandler+0x34>)
 80050c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <FuncSignalMenuEntryHandler+0x38>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80050d4:	2304      	movs	r3, #4
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001e5b 	.word	0x20001e5b
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	20001e57 	.word	0x20001e57

080050e8 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80050ec:	2000      	movs	r0, #0
 80050ee:	f001 ff6f 	bl	8006fd0 <SM_GetEncoderValue>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 ff45 	bl	8005f84 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 80050fa:	4b03      	ldr	r3, [pc, #12]	; (8005108 <FuncSignalMenuInputHandler+0x20>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8005100:	2304      	movs	r3, #4
}
 8005102:	4618      	mov	r0, r3
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20001e57 	.word	0x20001e57

0800510c <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <FuncSignalMenuExitHandler+0x20>)
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8005116:	f7fc fba3 	bl	8001860 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 800511a:	f001 fffb 	bl	8007114 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <FuncSignalMenuExitHandler+0x24>)
 8005120:	2200      	movs	r2, #0
 8005122:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005124:	2303      	movs	r3, #3
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20001e5b 	.word	0x20001e5b
 8005130:	20001e57 	.word	0x20001e57

08005134 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005138:	f7fc fb92 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800513c:	f000 ff16 	bl	8005f6c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <FuncAuxMenuEntryHandler+0x30>)
 8005142:	2203      	movs	r2, #3
 8005144:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <FuncAuxMenuEntryHandler+0x34>)
 8005148:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <FuncAuxMenuEntryHandler+0x34>)
 8005150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <FuncAuxMenuEntryHandler+0x38>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800515c:	2305      	movs	r3, #5
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20001e5b 	.word	0x20001e5b
 8005168:	40012c00 	.word	0x40012c00
 800516c:	20001e57 	.word	0x20001e57

08005170 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8005176:	f001 ffb1 	bl	80070dc <SM_IsFuncPwmDutyMode>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005180:	2000      	movs	r0, #0
 8005182:	f001 ff25 	bl	8006fd0 <SM_GetEncoderValue>
 8005186:	4603      	mov	r3, r0
 8005188:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb f9e1 	bl	8000554 <__aeabi_ui2d>
 8005192:	4603      	mov	r3, r0
 8005194:	460c      	mov	r4, r1
 8005196:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80051d8 <FuncAuxMenuInputHandler+0x68>
 800519a:	ec44 3b10 	vmov	d0, r3, r4
 800519e:	f00e ff97 	bl	80140d0 <pow>
 80051a2:	ec53 2b10 	vmov	r2, r3, d0
 80051a6:	4c0e      	ldr	r4, [pc, #56]	; (80051e0 <FuncAuxMenuInputHandler+0x70>)
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7fb fd24 	bl	8000bf8 <__aeabi_d2uiz>
 80051b0:	4603      	mov	r3, r0
 80051b2:	6363      	str	r3, [r4, #52]	; 0x34
 80051b4:	e006      	b.n	80051c4 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80051b6:	2000      	movs	r0, #0
 80051b8:	f001 ff0a 	bl	8006fd0 <SM_GetEncoderValue>
 80051bc:	4603      	mov	r3, r0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ff1a 	bl	8005ff8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <FuncAuxMenuInputHandler+0x74>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051ca:	2305      	movs	r3, #5
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}
 80051d4:	f3af 8000 	nop.w
 80051d8:	00000000 	.word	0x00000000
 80051dc:	40000000 	.word	0x40000000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	20001e57 	.word	0x20001e57

080051e8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80051ec:	f001 ff82 	bl	80070f4 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <FuncAuxToggleDutyMode+0x1c>)
 80051f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <FuncAuxToggleDutyMode+0x20>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051fe:	2305      	movs	r3, #5
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40012c00 	.word	0x40012c00
 8005208:	20001e57 	.word	0x20001e57

0800520c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <FuncAuxMenuExitHandler+0x20>)
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8005216:	f001 ff7d 	bl	8007114 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800521a:	f7fc fb21 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <FuncAuxMenuExitHandler+0x24>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005224:	2303      	movs	r3, #3
}
 8005226:	4618      	mov	r0, r3
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20001e5b 	.word	0x20001e5b
 8005230:	20001e57 	.word	0x20001e57

08005234 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <GainMenu_getStatus+0x14>)
 800523a:	781b      	ldrb	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20001e5c 	.word	0x20001e5c

0800524c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005250:	f7fc fb06 	bl	8001860 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <GainMainMenuEntryHandler+0x1c>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <GainMainMenuEntryHandler+0x20>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005260:	2306      	movs	r3, #6
}
 8005262:	4618      	mov	r0, r3
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20001e5c 	.word	0x20001e5c
 800526c:	20001e57 	.word	0x20001e57

08005270 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <GainMainMenuExitHandler+0x1c>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800527a:	f7fc faf1 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800527e:	4b04      	ldr	r3, [pc, #16]	; (8005290 <GainMainMenuExitHandler+0x20>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20001e5c 	.word	0x20001e5c
 8005290:	20001e57 	.word	0x20001e57

08005294 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800529a:	f7fc fae1 	bl	8001860 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 800529e:	f001 f8a1 	bl	80063e4 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 80052a2:	f001 ff43 	bl	800712c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <GainSignalMenuEntryHandler+0x54>)
 80052a8:	2202      	movs	r2, #2
 80052aa:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80052ac:	2000      	movs	r0, #0
 80052ae:	f001 fc13 	bl	8006ad8 <SM_GetOutputChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80052b8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <GainSignalMenuEntryHandler+0x58>)
 80052c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <GainSignalMenuEntryHandler+0x58>)
 80052ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80052d0:	e002      	b.n	80052d8 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80052d2:	4807      	ldr	r0, [pc, #28]	; (80052f0 <GainSignalMenuEntryHandler+0x5c>)
 80052d4:	f7fc fb0a 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <GainSignalMenuEntryHandler+0x60>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80052de:	2307      	movs	r3, #7
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20001e5c 	.word	0x20001e5c
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	08015bc0 	.word	0x08015bc0
 80052f4:	20001e57 	.word	0x20001e57

080052f8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8005302:	2000      	movs	r0, #0
 8005304:	f001 fbe8 	bl	8006ad8 <SM_GetOutputChannel>
 8005308:	4603      	mov	r3, r0
 800530a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800530e:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	3b01      	subs	r3, #1
 8005314:	2b04      	cmp	r3, #4
 8005316:	d834      	bhi.n	8005382 <GainSignalMenuInputHandler+0x8a>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <GainSignalMenuInputHandler+0x28>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005363 	.word	0x08005363
 8005324:	0800536b 	.word	0x0800536b
 8005328:	08005373 	.word	0x08005373
 800532c:	0800537b 	.word	0x0800537b
 8005330:	08005335 	.word	0x08005335
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d025      	beq.n	8005386 <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b06      	cmp	r3, #6
 8005340:	d107      	bne.n	8005352 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8005342:	2001      	movs	r0, #1
 8005344:	f001 fe44 	bl	8006fd0 <SM_GetEncoderValue>
 8005348:	4603      	mov	r3, r0
 800534a:	4618      	mov	r0, r3
 800534c:	f001 f856 	bl	80063fc <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8005350:	e019      	b.n	8005386 <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005352:	2000      	movs	r0, #0
 8005354:	f001 fe3c 	bl	8006fd0 <SM_GetEncoderValue>
 8005358:	4603      	mov	r3, r0
 800535a:	4618      	mov	r0, r3
 800535c:	f002 f858 	bl	8007410 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8005360:	e011      	b.n	8005386 <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8005362:	2011      	movs	r0, #17
 8005364:	f001 feee 	bl	8007144 <VPP_ApplyProfileToSignal>
			break;
 8005368:	e00e      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 800536a:	2020      	movs	r0, #32
 800536c:	f001 feea 	bl	8007144 <VPP_ApplyProfileToSignal>
			break;
 8005370:	e00a      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8005372:	2031      	movs	r0, #49	; 0x31
 8005374:	f001 fee6 	bl	8007144 <VPP_ApplyProfileToSignal>
			break;
 8005378:	e006      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 800537a:	2059      	movs	r0, #89	; 0x59
 800537c:	f001 fee2 	bl	8007144 <VPP_ApplyProfileToSignal>
			break;
 8005380:	e002      	b.n	8005388 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <GainSignalMenuInputHandler+0x90>
			break;
 8005386:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <GainSignalMenuInputHandler+0xa0>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800538e:	2307      	movs	r3, #7
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20001e57 	.word	0x20001e57

0800539c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <GainSignalMenuExitHandler+0x1c>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80053a6:	f7fc fa5b 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <GainSignalMenuExitHandler+0x20>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80053b0:	2306      	movs	r3, #6
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20001e5c 	.word	0x20001e5c
 80053bc:	20001e57 	.word	0x20001e57

080053c0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80053c6:	f7fc fa4b 	bl	8001860 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80053ca:	f001 feaf 	bl	800712c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <GainAuxMenuEntryHandler+0x50>)
 80053d0:	2203      	movs	r2, #3
 80053d2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80053d4:	2001      	movs	r0, #1
 80053d6:	f001 fb7f 	bl	8006ad8 <SM_GetOutputChannel>
 80053da:	4603      	mov	r3, r0
 80053dc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80053e0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <GainAuxMenuEntryHandler+0x54>)
 80053ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <GainAuxMenuEntryHandler+0x54>)
 80053f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80053f8:	e002      	b.n	8005400 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <GainAuxMenuEntryHandler+0x58>)
 80053fc:	f7fc fa76 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <GainAuxMenuEntryHandler+0x5c>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005406:	2308      	movs	r3, #8
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20001e5c 	.word	0x20001e5c
 8005414:	40012c00 	.word	0x40012c00
 8005418:	08015bc0 	.word	0x08015bc0
 800541c:	20001e57 	.word	0x20001e57

08005420 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005424:	2000      	movs	r0, #0
 8005426:	f001 fdd3 	bl	8006fd0 <SM_GetEncoderValue>
 800542a:	4603      	mov	r3, r0
 800542c:	4618      	mov	r0, r3
 800542e:	f002 f829 	bl	8007484 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <GainAuxMenuInputHandler+0x20>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005438:	2308      	movs	r3, #8
}
 800543a:	4618      	mov	r0, r3
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20001e57 	.word	0x20001e57

08005444 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <GainAuxMenuExitHandler+0x1c>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800544e:	f7fc fa07 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005452:	4b04      	ldr	r3, [pc, #16]	; (8005464 <GainAuxMenuExitHandler+0x20>)
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005458:	2306      	movs	r3, #6
}
 800545a:	4618      	mov	r0, r3
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20001e5c 	.word	0x20001e5c
 8005464:	20001e57 	.word	0x20001e57

08005468 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <ToplevelMenu_getStatus+0x14>)
 800546e:	781b      	ldrb	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000001 	.word	0x20000001

08005480 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <ToplevelMenu_setStatus+0x1c>)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	7013      	strb	r3, [r2, #0]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000001 	.word	0x20000001

080054a0 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054a4:	f7fc f9dc 	bl	8001860 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <ToplevelOutputMenuEntryHandler+0x1c>)
 80054aa:	2202      	movs	r2, #2
 80054ac:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <ToplevelOutputMenuEntryHandler+0x20>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80054b4:	2301      	movs	r3, #1
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000001 	.word	0x20000001
 80054c0:	20001e57 	.word	0x20001e57

080054c4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054c8:	f7fc f9ca 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <ToplevelOutputMenuExitHandler+0x1c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <ToplevelOutputMenuExitHandler+0x20>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000001 	.word	0x20000001
 80054e4:	20001e57 	.word	0x20001e57

080054e8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054ec:	f7fc f9b8 	bl	8001860 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <ToplevelInputMenuEntryHandler+0x1c>)
 80054f2:	2203      	movs	r2, #3
 80054f4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <ToplevelInputMenuEntryHandler+0x20>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80054fc:	2302      	movs	r3, #2
}
 80054fe:	4618      	mov	r0, r3
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000001 	.word	0x20000001
 8005508:	20001e57 	.word	0x20001e57

0800550c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d002      	beq.n	8005522 <ToplevelInputMenuInputHandler+0x16>
 800551c:	2b02      	cmp	r3, #2
 800551e:	d003      	beq.n	8005528 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005520:	e00b      	b.n	800553a <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005522:	f001 f857 	bl	80065d4 <IT_ArbitrateInputTrigger>
				break;
 8005526:	e008      	b.n	800553a <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005528:	f001 f8e2 	bl	80066f0 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800552c:	2001      	movs	r0, #1
 800552e:	f7ff ffed 	bl	800550c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005532:	2001      	movs	r0, #1
 8005534:	f7ff ffea 	bl	800550c <ToplevelInputMenuInputHandler>
				break;
 8005538:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <ToplevelInputMenuInputHandler+0x40>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005540:	2302      	movs	r3, #2
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20001e57 	.word	0x20001e57

08005550 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005554:	f7fc f984 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <ToplevelInputMenuExitHandler+0x1c>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <ToplevelInputMenuExitHandler+0x20>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000001 	.word	0x20000001
 8005570:	20001e57 	.word	0x20001e57

08005574 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800557c:	4b07      	ldr	r3, [pc, #28]	; (800559c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d101      	bne.n	800558e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40010400 	.word	0x40010400

080055a0 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <IM_Init+0x1c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <IM_Init+0x1c>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6013      	str	r3, [r2, #0]



}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40014400 	.word	0x40014400

080055c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d11c      	bne.n	800560a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ea:	db09      	blt.n	8005600 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80055f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f8:	ee17 2a90 	vmov	r2, s15
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80055fe:	e029      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8005600:	4b18      	ldr	r3, [pc, #96]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	3201      	adds	r2, #1
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005608:	e024      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d104      	bne.n	800561c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005618:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800561a:	e01b      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005628:	4b10      	ldr	r3, [pc, #64]	; (800566c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800562a:	edd3 7a00 	vldr	s15, [r3]
 800562e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	d809      	bhi.n	800564c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800563a:	edd3 7a00 	vldr	s15, [r3]
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 2a90 	vmov	r2, s15
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800564a:	e003      	b.n	8005654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	3a01      	subs	r2, #1
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40013400 	.word	0x40013400
 8005668:	20000128 	.word	0x20000128
 800566c:	20000124 	.word	0x20000124

08005670 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <IM_BTN1_EXTI14_Handler+0x44>)
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <IM_BTN1_EXTI14_Handler+0x48>)
 8005680:	8812      	ldrh	r2, [r2, #0]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005688:	dd0c      	ble.n	80056a4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800568a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800568e:	f7ff ff71 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005698:	2001      	movs	r0, #1
 800569a:	f7ff fa7d 	bl	8004b98 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <IM_BTN1_EXTI14_Handler+0x4c>)
 80056a0:	f00c fbfc 	bl	8011e9c <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <IM_BTN1_EXTI14_Handler+0x48>)
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	8013      	strh	r3, [r2, #0]


}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40014400 	.word	0x40014400
 80056b8:	20001e5e 	.word	0x20001e5e
 80056bc:	08015bf8 	.word	0x08015bf8

080056c0 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80056c6:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <IM_BTN2_EXTI15_Handler+0x44>)
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <IM_BTN2_EXTI15_Handler+0x48>)
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d8:	dd0c      	ble.n	80056f4 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80056da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056de:	f7ff ff49 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80056e8:	2003      	movs	r0, #3
 80056ea:	f7ff fa55 	bl	8004b98 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80056ee:	4807      	ldr	r0, [pc, #28]	; (800570c <IM_BTN2_EXTI15_Handler+0x4c>)
 80056f0:	f00c fbd4 	bl	8011e9c <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <IM_BTN2_EXTI15_Handler+0x48>)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	8013      	strh	r3, [r2, #0]


}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40014400 	.word	0x40014400
 8005708:	20001e60 	.word	0x20001e60
 800570c:	08015c10 	.word	0x08015c10

08005710 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <IM_BTN3_EXTI0_Handler+0x40>)
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <IM_BTN3_EXTI0_Handler+0x44>)
 8005720:	8812      	ldrh	r2, [r2, #0]
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005728:	dd0b      	ble.n	8005742 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800572a:	2001      	movs	r0, #1
 800572c:	f7ff ff22 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8005736:	2004      	movs	r0, #4
 8005738:	f7ff fa2e 	bl	8004b98 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800573c:	4806      	ldr	r0, [pc, #24]	; (8005758 <IM_BTN3_EXTI0_Handler+0x48>)
 800573e:	f00c fbad 	bl	8011e9c <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005742:	4a04      	ldr	r2, [pc, #16]	; (8005754 <IM_BTN3_EXTI0_Handler+0x44>)
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	8013      	strh	r3, [r2, #0]


}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40014400 	.word	0x40014400
 8005754:	20001e62 	.word	0x20001e62
 8005758:	08015c2c 	.word	0x08015c2c

0800575c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <IM_BTN4_EXTI1_Handler+0x40>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <IM_BTN4_EXTI1_Handler+0x44>)
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005774:	dd0b      	ble.n	800578e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005776:	2002      	movs	r0, #2
 8005778:	f7ff fefc 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005782:	2002      	movs	r0, #2
 8005784:	f7ff fa08 	bl	8004b98 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005788:	4806      	ldr	r0, [pc, #24]	; (80057a4 <IM_BTN4_EXTI1_Handler+0x48>)
 800578a:	f00c fb87 	bl	8011e9c <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800578e:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <IM_BTN4_EXTI1_Handler+0x44>)
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	8013      	strh	r3, [r2, #0]


}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40014400 	.word	0x40014400
 80057a0:	20001e64 	.word	0x20001e64
 80057a4:	08015c44 	.word	0x08015c44

080057a8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <IM_ENC_EXTI2_Handler+0x40>)
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <IM_ENC_EXTI2_Handler+0x44>)
 80057b8:	8812      	ldrh	r2, [r2, #0]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c0:	dd0b      	ble.n	80057da <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80057c2:	2004      	movs	r0, #4
 80057c4:	f7ff fed6 	bl	8005574 <LL_EXTI_IsActiveFlag_0_31>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80057ce:	2006      	movs	r0, #6
 80057d0:	f7ff f9e2 	bl	8004b98 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80057d4:	4806      	ldr	r0, [pc, #24]	; (80057f0 <IM_ENC_EXTI2_Handler+0x48>)
 80057d6:	f00c fb61 	bl	8011e9c <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80057da:	4a04      	ldr	r2, [pc, #16]	; (80057ec <IM_ENC_EXTI2_Handler+0x44>)
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	8013      	strh	r3, [r2, #0]


}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40014400 	.word	0x40014400
 80057ec:	20001e66 	.word	0x20001e66
 80057f0:	08015c5c 	.word	0x08015c5c

080057f4 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005806:	d117      	bne.n	8005838 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <IM_ENC_DIRF_Handler+0x50>)
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	4a0d      	ldr	r2, [pc, #52]	; (8005848 <IM_ENC_DIRF_Handler+0x54>)
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd0b      	ble.n	8005832 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 800581a:	2005      	movs	r0, #5
 800581c:	f7ff f9bc 	bl	8004b98 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005820:	480a      	ldr	r0, [pc, #40]	; (800584c <IM_ENC_DIRF_Handler+0x58>)
 8005822:	f00c fb3b 	bl	8011e9c <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	4a05      	ldr	r2, [pc, #20]	; (8005840 <IM_ENC_DIRF_Handler+0x4c>)
 800582c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005830:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <IM_ENC_DIRF_Handler+0x54>)
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	8013      	strh	r3, [r2, #0]


	}


}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40014400 	.word	0x40014400
 8005848:	20001e68 	.word	0x20001e68
 800584c:	08015c78 	.word	0x08015c78

08005850 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <BO_GetBiasPolarity+0x14>)
 8005856:	781b      	ldrb	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000002 	.word	0x20000002

08005868 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <BO_GetDcBiasEncoderValue+0x14>)
 800586e:	881b      	ldrh	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000004 	.word	0x20000004

08005880 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800588a:	2000      	movs	r0, #0
 800588c:	f001 fba0 	bl	8006fd0 <SM_GetEncoderValue>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005896:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800589e:	d214      	bcs.n	80058ca <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058b4:	2200      	movs	r2, #0
 80058b6:	2110      	movs	r1, #16
 80058b8:	4814      	ldr	r0, [pc, #80]	; (800590c <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80058ba:	f005 fd73 	bl	800b3a4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80058be:	2201      	movs	r2, #1
 80058c0:	2108      	movs	r1, #8
 80058c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058c6:	f006 fd95 	bl	800c3f4 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058d0:	d314      	bcc.n	80058fc <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058e6:	2200      	movs	r2, #0
 80058e8:	2110      	movs	r1, #16
 80058ea:	4808      	ldr	r0, [pc, #32]	; (800590c <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80058ec:	f005 fd5a 	bl	800b3a4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80058f0:	2200      	movs	r2, #0
 80058f2:	2108      	movs	r1, #8
 80058f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058f8:	f006 fd7c 	bl	800c3f4 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000004 	.word	0x20000004
 8005908:	20000002 	.word	0x20000002
 800590c:	2000266c 	.word	0x2000266c

08005910 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005914:	2110      	movs	r1, #16
 8005916:	4803      	ldr	r0, [pc, #12]	; (8005924 <BO_GetOutputBias+0x14>)
 8005918:	f005 fd8a 	bl	800b430 <HAL_DAC_GetValue>
 800591c:	4603      	mov	r3, r0
}
 800591e:	4618      	mov	r0, r3
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	2000266c 	.word	0x2000266c

08005928 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	e06b      	b.n	8005a0c <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005934:	493a      	ldr	r1, [pc, #232]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	3308      	adds	r3, #8
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d129      	bne.n	800599e <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800594a:	4935      	ldr	r1, [pc, #212]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3304      	adds	r3, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a31      	ldr	r2, [pc, #196]	; (8005a24 <FreqO_InitFreqProfiles+0xfc>)
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800596a:	492d      	ldr	r1, [pc, #180]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3310      	adds	r3, #16
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	ee17 0a90 	vmov	r0, s15
 800598a:	4925      	ldr	r1, [pc, #148]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	330c      	adds	r3, #12
 800599a:	6018      	str	r0, [r3, #0]
 800599c:	e033      	b.n	8005a06 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800599e:	4920      	ldr	r1, [pc, #128]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	3304      	adds	r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <FreqO_InitFreqProfiles+0xfc>)
 80059b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80059b6:	481a      	ldr	r0, [pc, #104]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4403      	add	r3, r0
 80059c4:	3308      	adds	r3, #8
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d4:	4912      	ldr	r1, [pc, #72]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	3310      	adds	r3, #16
 80059e4:	edd3 7a00 	vldr	s15, [r3]
 80059e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f0:	ee17 0a90 	vmov	r0, s15
 80059f4:	490a      	ldr	r1, [pc, #40]	; (8005a20 <FreqO_InitFreqProfiles+0xf8>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	330c      	adds	r3, #12
 8005a04:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b0d      	cmp	r3, #13
 8005a10:	dd90      	ble.n	8005934 <FreqO_InitFreqProfiles+0xc>
	}
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000008 	.word	0x20000008
 8005a24:	00155cc0 	.word	0x00155cc0

08005a28 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <FreqO_MapEncoderPositionCoarse+0x78>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d910      	bls.n	8005a66 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b0d      	cmp	r3, #13
 8005a4e:	d901      	bls.n	8005a54 <FreqO_MapEncoderPositionCoarse+0x2c>
 8005a50:	230d      	movs	r3, #13
 8005a52:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f945 	bl	8005ce4 <FreqO_GetProfileByIndex>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f872 	bl	8005b48 <FreqO_ApplyProfile>
 8005a64:	e014      	b.n	8005a90 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d20f      	bcs.n	8005a90 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b0d      	cmp	r3, #13
 8005a7a:	d901      	bls.n	8005a80 <FreqO_MapEncoderPositionCoarse+0x58>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f92f 	bl	8005ce4 <FreqO_GetProfileByIndex>
 8005a86:	4603      	mov	r3, r0
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f85c 	bl	8005b48 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	8013      	strh	r3, [r2, #0]

}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000120 	.word	0x20000120
 8005aa4:	20001e6a 	.word	0x20001e6a

08005aa8 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005ab2:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d904      	bls.n	8005ac6 <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <FreqO_MapEncoderPositionFine+0x48>)
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	3201      	adds	r2, #1
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ac4:	e008      	b.n	8005ad8 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d203      	bcs.n	8005ad8 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <FreqO_MapEncoderPositionFine+0x48>)
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <FreqO_MapEncoderPositionFine+0x44>)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	8013      	strh	r3, [r2, #0]

}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20001e6a 	.word	0x20001e6a
 8005af0:	40013400 	.word	0x40013400

08005af4 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d904      	bls.n	8005b12 <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b10:	e00c      	b.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d207      	bcs.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	8013      	strh	r3, [r2, #0]

}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20001e6a 	.word	0x20001e6a
 8005b44:	40013400 	.word	0x40013400

08005b48 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f899 	bl	8005c88 <FreqO_FindFPresetObject>
 8005b56:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d024      	beq.n	8005ba8 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <FreqO_ApplyProfile+0x70>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <FreqO_ApplyProfile+0x70>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f000 ffb2 	bl	8006ad8 <SM_GetOutputChannel>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d10d      	bne.n	8005ba0 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <FreqO_ApplyProfile+0x74>)
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005ba0:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <FreqO_ApplyProfile+0x78>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005ba6:	e002      	b.n	8005bae <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005ba8:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <FreqO_ApplyProfile+0x7c>)
 8005baa:	f7fb fe9f 	bl	80018ec <DM_SetErrorDebugMsg>
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	20000120 	.word	0x20000120
 8005bc4:	08015c90 	.word	0x08015c90

08005bc8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f001 f9fe 	bl	8006fd0 <SM_GetEncoderValue>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff66 	bl	8005aa8 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f000 ff7b 	bl	8006ad8 <SM_GetOutputChannel>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d110      	bne.n	8005c14 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f001 f9e8 	bl	8006fd0 <SM_GetEncoderValue>
 8005c00:	4603      	mov	r3, r0
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <FreqO_AdjustFreq+0x54>)
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40000400 	.word	0x40000400

08005c20 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 8005c26:	2000      	movs	r0, #0
 8005c28:	f001 f9d2 	bl	8006fd0 <SM_GetEncoderValue>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff60 	bl	8005af4 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005c34:	2001      	movs	r0, #1
 8005c36:	f000 ff4f 	bl	8006ad8 <SM_GetOutputChannel>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d10c      	bne.n	8005c64 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f001 f9c0 	bl	8006fd0 <SM_GetEncoderValue>
 8005c50:	4603      	mov	r3, r0
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a03      	ldr	r2, [pc, #12]	; (8005c6c <FreqO_AdjustPrescaler+0x4c>)
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40000400 	.word	0x40000400

08005c70 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
	return freq_profile;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <FreqO_GetFPresetObject+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000120 	.word	0x20000120

08005c88 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e016      	b.n	8005cc4 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005c96:	4911      	ldr	r1, [pc, #68]	; (8005cdc <FreqO_FindFPresetObject+0x54>)
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d107      	bne.n	8005cbe <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <FreqO_FindFPresetObject+0x54>)
 8005cba:	4413      	add	r3, r2
 8005cbc:	e009      	b.n	8005cd2 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b0d      	cmp	r3, #13
 8005cc8:	dde5      	ble.n	8005c96 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005cca:	4805      	ldr	r0, [pc, #20]	; (8005ce0 <FreqO_FindFPresetObject+0x58>)
 8005ccc:	f7fb fe0e 	bl	80018ec <DM_SetErrorDebugMsg>
	return 0;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000008 	.word	0x20000008
 8005ce0:	08015cb8 	.word	0x08015cb8

08005ce4 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <FreqO_GetProfileByIndex+0x24>)
 8005cf8:	4413      	add	r3, r2
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000008 	.word	0x20000008

08005d0c <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <FreqO_ResetLastEncoderValue+0x14>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20001e6a 	.word	0x20001e6a

08005d24 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d32:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <FS_SetSweepModeDown+0x48>)
 8005d3a:	f043 0310 	orr.w	r3, r3, #16
 8005d3e:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <FS_SetSweepModeDown+0x4c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <FS_SetSweepModeDown+0x50>)
 8005d4e:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <FS_SetSweepModeDown+0x54>)
 8005d54:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <FS_SetSweepModeDown+0x58>)
 8005d56:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <FS_SetSweepModeDown+0x5c>)
 8005d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	20000124 	.word	0x20000124
 8005d78:	20000128 	.word	0x20000128
 8005d7c:	477fff00 	.word	0x477fff00
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d88:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0d      	ldr	r2, [pc, #52]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d8e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d92:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <FS_SetSweepModeUp+0x40>)
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <FS_SetSweepModeUp+0x44>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dac:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <FS_SetSweepModeUp+0x48>)
 8005dae:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <FS_SetSweepModeUp+0x4c>)
 8005db4:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <FS_SetSweepModeUp+0x50>)
 8005db6:	601a      	str	r2, [r3, #0]


}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	20000128 	.word	0x20000128
 8005dd0:	20000124 	.word	0x20000124
 8005dd4:	41500000 	.word	0x41500000

08005dd8 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d038      	beq.n	8005e5a <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <FS_SetEncoderControlMode+0xa4>)
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005df0:	220d      	movs	r2, #13
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <FS_SetEncoderControlMode+0xac>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <FS_SetEncoderControlMode+0x32>
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d014      	beq.n	8005e32 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005e08:	e031      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <FS_SetEncoderControlMode+0xb0>)
 8005e18:	edd3 7a00 	vldr	s15, [r3]
 8005e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e24:	dc00      	bgt.n	8005e28 <FS_SetEncoderControlMode+0x50>
				break;
 8005e26:	e022      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e28:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <FS_SetEncoderControlMode+0xb4>)
 8005e2a:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e30:	e01d      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e3e:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <FS_SetEncoderControlMode+0xb8>)
 8005e40:	edd3 7a00 	vldr	s15, [r3]
 8005e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d400      	bmi.n	8005e50 <FS_SetEncoderControlMode+0x78>
				break;
 8005e4e:	e00e      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <FS_SetEncoderControlMode+0xb4>)
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e58:	e009      	b.n	8005e6e <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <FS_SetEncoderControlMode+0xa4>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <FS_SetEncoderControlMode+0xa8>)
 8005e68:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20001e59 	.word	0x20001e59
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	20001e58 	.word	0x20001e58
 8005e88:	20000128 	.word	0x20000128
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	20000124 	.word	0x20000124
 8005e94:	00000000 	.word	0x00000000

08005e98 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d122      	bne.n	8005eee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fb51 	bl	8000554 <__aeabi_ui2d>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005ef8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005eba:	ec44 3b10 	vmov	d0, r3, r4
 8005ebe:	f00e f907 	bl	80140d0 <pow>
 8005ec2:	ec51 0b10 	vmov	r0, r1, d0
 8005ec6:	a30e      	add	r3, pc, #56	; (adr r3, 8005f00 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fa06 	bl	80002dc <__adddf3>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	f7fa fe8e 	bl	8000bf8 <__aeabi_d2uiz>
 8005edc:	4603      	mov	r3, r0
 8005ede:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee6:	d002      	beq.n	8005eee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	40080000 	.word	0x40080000
 8005f00:	00000000 	.word	0x00000000
 8005f04:	40d06800 	.word	0x40d06800
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40000c00 	.word	0x40000c00

08005f10 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f28:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005f68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	e011      	b.n	8005f56 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f4e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005f68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005f56:	eeb0 0a67 	vmov.f32	s0, s15
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	4d2037a0 	.word	0x4d2037a0

08005f6c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <FuncO_ResetLastEncoderValue+0x14>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	801a      	strh	r2, [r3, #0]
}
 8005f76:	bf00      	nop
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20001e96 	.word	0x20001e96

08005f84 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f000 fda2 	bl	8006ad8 <SM_GetOutputChannel>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d90c      	bls.n	8005fc2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	3301      	adds	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d901      	bls.n	8005fb8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f856 	bl	800606c <FuncO_ApplyProfileToSignal>
 8005fc0:	e010      	b.n	8005fe4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d20b      	bcs.n	8005fe4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d901      	bls.n	8005fdc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f844 	bl	800606c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005fe4:	4a03      	ldr	r2, [pc, #12]	; (8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	8013      	strh	r3, [r2, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20001e96 	.word	0x20001e96

08005ff8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8006002:	2001      	movs	r0, #1
 8006004:	f000 fd68 	bl	8006ad8 <SM_GetOutputChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	429a      	cmp	r2, r3
 800601a:	d90c      	bls.n	8006036 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	3301      	adds	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d901      	bls.n	800602c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8006028:	2306      	movs	r3, #6
 800602a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f880 	bl	8006134 <FuncO_ApplyProfileToAux>
 8006034:	e010      	b.n	8006058 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	429a      	cmp	r2, r3
 800603e:	d20b      	bcs.n	8006058 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3b01      	subs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d901      	bls.n	8006050 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f86e 	bl	8006134 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8006058:	4a03      	ldr	r2, [pc, #12]	; (8006068 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	8013      	strh	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20001e96 	.word	0x20001e96

0800606c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b087      	sub	sp, #28
 8006070:	af02      	add	r7, sp, #8
 8006072:	4603      	mov	r3, r0
 8006074:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8006076:	79fc      	ldrb	r4, [r7, #7]
 8006078:	2000      	movs	r0, #0
 800607a:	f000 fd2d 	bl	8006ad8 <SM_GetOutputChannel>
 800607e:	4601      	mov	r1, r0
 8006080:	00e3      	lsls	r3, r4, #3
 8006082:	4a27      	ldr	r2, [pc, #156]	; (8006120 <FuncO_ApplyProfileToSignal+0xb4>)
 8006084:	4413      	add	r3, r2
 8006086:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 800608a:	4826      	ldr	r0, [pc, #152]	; (8006124 <FuncO_ApplyProfileToSignal+0xb8>)
 800608c:	f00b ff06 	bl	8011e9c <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8006090:	79fc      	ldrb	r4, [r7, #7]
 8006092:	2000      	movs	r0, #0
 8006094:	f000 fd20 	bl	8006ad8 <SM_GetOutputChannel>
 8006098:	4601      	mov	r1, r0
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <FuncO_ApplyProfileToSignal+0xb4>)
 800609c:	00e3      	lsls	r3, r4, #3
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80060a4:	2000      	movs	r0, #0
 80060a6:	f000 fd17 	bl	8006ad8 <SM_GetOutputChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 f844 	bl	8007144 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80060c8:	2100      	movs	r1, #0
 80060ca:	4818      	ldr	r0, [pc, #96]	; (800612c <FuncO_ApplyProfileToSignal+0xc0>)
 80060cc:	f005 f914 	bl	800b2f8 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060d0:	2000      	movs	r0, #0
 80060d2:	f000 fd01 	bl	8006ad8 <SM_GetOutputChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2378      	movs	r3, #120	; 0x78
 80060e2:	2100      	movs	r1, #0
 80060e4:	4811      	ldr	r0, [pc, #68]	; (800612c <FuncO_ApplyProfileToSignal+0xc0>)
 80060e6:	f005 f845 	bl	800b174 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80060ea:	2100      	movs	r1, #0
 80060ec:	4810      	ldr	r0, [pc, #64]	; (8006130 <FuncO_ApplyProfileToSignal+0xc4>)
 80060ee:	f005 f903 	bl	800b2f8 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060f2:	2001      	movs	r0, #1
 80060f4:	f000 fcf0 	bl	8006ad8 <SM_GetOutputChannel>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f103 0208 	add.w	r2, r3, #8
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	2378      	movs	r3, #120	; 0x78
 8006104:	2100      	movs	r1, #0
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <FuncO_ApplyProfileToSignal+0xc4>)
 8006108:	f005 f834 	bl	800b174 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a05      	ldr	r2, [pc, #20]	; (8006128 <FuncO_ApplyProfileToSignal+0xbc>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6013      	str	r3, [r2, #0]



}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	bd90      	pop	{r4, r7, pc}
 8006120:	2000012c 	.word	0x2000012c
 8006124:	08015ce8 	.word	0x08015ce8
 8006128:	40013400 	.word	0x40013400
 800612c:	2000266c 	.word	0x2000266c
 8006130:	20002658 	.word	0x20002658

08006134 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	af02      	add	r7, sp, #8
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800613e:	79fc      	ldrb	r4, [r7, #7]
 8006140:	2001      	movs	r0, #1
 8006142:	f000 fcc9 	bl	8006ad8 <SM_GetOutputChannel>
 8006146:	4601      	mov	r1, r0
 8006148:	00e3      	lsls	r3, r4, #3
 800614a:	4a96      	ldr	r2, [pc, #600]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 800614c:	4413      	add	r3, r2
 800614e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d10a      	bne.n	800616e <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8006158:	4893      	ldr	r0, [pc, #588]	; (80063a8 <FuncO_ApplyProfileToAux+0x274>)
 800615a:	f00b fe9f 	bl	8011e9c <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 800615e:	f000 ff23 	bl	8006fa8 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8006162:	f000 fccf 	bl	8006b04 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8006166:	4b91      	ldr	r3, [pc, #580]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 800616c:	e115      	b.n	800639a <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 800616e:	4b8f      	ldr	r3, [pc, #572]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 808e 	beq.w	8006294 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8006178:	488d      	ldr	r0, [pc, #564]	; (80063b0 <FuncO_ApplyProfileToAux+0x27c>)
 800617a:	f00b fe8f 	bl	8011e9c <puts>
		SM_DisablePwmToAux();
 800617e:	f000 fdfd 	bl	8006d7c <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8006182:	f000 fe37 	bl	8006df4 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006186:	488b      	ldr	r0, [pc, #556]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 8006188:	f00b fe88 	bl	8011e9c <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800618c:	79fc      	ldrb	r4, [r7, #7]
 800618e:	2001      	movs	r0, #1
 8006190:	f000 fca2 	bl	8006ad8 <SM_GetOutputChannel>
 8006194:	4601      	mov	r1, r0
 8006196:	4a83      	ldr	r2, [pc, #524]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 8006198:	00e3      	lsls	r3, r4, #3
 800619a:	4413      	add	r3, r2
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80061a0:	4884      	ldr	r0, [pc, #528]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 80061a2:	f00b fe7b 	bl	8011e9c <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80061a6:	2001      	movs	r0, #1
 80061a8:	f000 fc96 	bl	8006ad8 <SM_GetOutputChannel>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 80061b6:	4880      	ldr	r0, [pc, #512]	; (80063b8 <FuncO_ApplyProfileToAux+0x284>)
 80061b8:	f00b fdfc 	bl	8011db4 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80061bc:	7b7b      	ldrb	r3, [r7, #13]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 ffee 	bl	80071a0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80061c4:	487d      	ldr	r0, [pc, #500]	; (80063bc <FuncO_ApplyProfileToAux+0x288>)
 80061c6:	f00b fe69 	bl	8011e9c <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80061ca:	487d      	ldr	r0, [pc, #500]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 80061cc:	f007 fa3a 	bl	800d644 <HAL_TIM_Base_Stop>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	487a      	ldr	r0, [pc, #488]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80061da:	f00b fdeb 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80061de:	487a      	ldr	r0, [pc, #488]	; (80063c8 <FuncO_ApplyProfileToAux+0x294>)
 80061e0:	f00b fe5c 	bl	8011e9c <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80061e4:	2100      	movs	r1, #0
 80061e6:	4879      	ldr	r0, [pc, #484]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 80061e8:	f005 f886 	bl	800b2f8 <HAL_DAC_Stop_DMA>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4873      	ldr	r0, [pc, #460]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80061f6:	f00b fddd 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80061fa:	4875      	ldr	r0, [pc, #468]	; (80063d0 <FuncO_ApplyProfileToAux+0x29c>)
 80061fc:	f00b fe4e 	bl	8011e9c <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006200:	2001      	movs	r0, #1
 8006202:	f000 fc69 	bl	8006ad8 <SM_GetOutputChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2378      	movs	r3, #120	; 0x78
 8006212:	2100      	movs	r1, #0
 8006214:	486d      	ldr	r0, [pc, #436]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 8006216:	f004 ffad 	bl	800b174 <HAL_DAC_Start_DMA>
 800621a:	4603      	mov	r3, r0
 800621c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	4619      	mov	r1, r3
 8006222:	4868      	ldr	r0, [pc, #416]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006224:	f00b fdc6 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006228:	486a      	ldr	r0, [pc, #424]	; (80063d4 <FuncO_ApplyProfileToAux+0x2a0>)
 800622a:	f00b fe37 	bl	8011e9c <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800622e:	2100      	movs	r1, #0
 8006230:	4869      	ldr	r0, [pc, #420]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006232:	f005 f861 	bl	800b2f8 <HAL_DAC_Stop_DMA>
 8006236:	4603      	mov	r3, r0
 8006238:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	4619      	mov	r1, r3
 800623e:	4861      	ldr	r0, [pc, #388]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006240:	f00b fdb8 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006244:	4865      	ldr	r0, [pc, #404]	; (80063dc <FuncO_ApplyProfileToAux+0x2a8>)
 8006246:	f00b fe29 	bl	8011e9c <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800624a:	2000      	movs	r0, #0
 800624c:	f000 fc44 	bl	8006ad8 <SM_GetOutputChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f103 0208 	add.w	r2, r3, #8
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	2378      	movs	r3, #120	; 0x78
 800625c:	2100      	movs	r1, #0
 800625e:	485e      	ldr	r0, [pc, #376]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006260:	f004 ff88 	bl	800b174 <HAL_DAC_Start_DMA>
 8006264:	4603      	mov	r3, r0
 8006266:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	4619      	mov	r1, r3
 800626c:	4855      	ldr	r0, [pc, #340]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800626e:	f00b fda1 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006272:	485b      	ldr	r0, [pc, #364]	; (80063e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006274:	f00b fe12 	bl	8011e9c <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006278:	4851      	ldr	r0, [pc, #324]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 800627a:	f007 f9b5 	bl	800d5e8 <HAL_TIM_Base_Start>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	4619      	mov	r1, r3
 8006286:	484f      	ldr	r0, [pc, #316]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006288:	f00b fd94 	bl	8011db4 <iprintf>
		last_output_mode_was_pwm = 0;
 800628c:	4b47      	ldr	r3, [pc, #284]	; (80063ac <FuncO_ApplyProfileToAux+0x278>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
}
 8006292:	e082      	b.n	800639a <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006294:	4847      	ldr	r0, [pc, #284]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 8006296:	f00b fe01 	bl	8011e9c <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800629a:	79fc      	ldrb	r4, [r7, #7]
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fc1b 	bl	8006ad8 <SM_GetOutputChannel>
 80062a2:	4601      	mov	r1, r0
 80062a4:	4a3f      	ldr	r2, [pc, #252]	; (80063a4 <FuncO_ApplyProfileToAux+0x270>)
 80062a6:	00e3      	lsls	r3, r4, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80062ae:	4841      	ldr	r0, [pc, #260]	; (80063b4 <FuncO_ApplyProfileToAux+0x280>)
 80062b0:	f00b fdf4 	bl	8011e9c <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80062b4:	2001      	movs	r0, #1
 80062b6:	f000 fc0f 	bl	8006ad8 <SM_GetOutputChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 80062c4:	483c      	ldr	r0, [pc, #240]	; (80063b8 <FuncO_ApplyProfileToAux+0x284>)
 80062c6:	f00b fd75 	bl	8011db4 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ff67 	bl	80071a0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80062d2:	483a      	ldr	r0, [pc, #232]	; (80063bc <FuncO_ApplyProfileToAux+0x288>)
 80062d4:	f00b fde2 	bl	8011e9c <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80062d8:	4839      	ldr	r0, [pc, #228]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 80062da:	f007 f9b3 	bl	800d644 <HAL_TIM_Base_Stop>
 80062de:	4603      	mov	r3, r0
 80062e0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	4619      	mov	r1, r3
 80062e6:	4837      	ldr	r0, [pc, #220]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 80062e8:	f00b fd64 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80062ec:	4836      	ldr	r0, [pc, #216]	; (80063c8 <FuncO_ApplyProfileToAux+0x294>)
 80062ee:	f00b fdd5 	bl	8011e9c <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80062f2:	2100      	movs	r1, #0
 80062f4:	4835      	ldr	r0, [pc, #212]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 80062f6:	f004 ffff 	bl	800b2f8 <HAL_DAC_Stop_DMA>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	4619      	mov	r1, r3
 8006302:	4830      	ldr	r0, [pc, #192]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006304:	f00b fd56 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006308:	4831      	ldr	r0, [pc, #196]	; (80063d0 <FuncO_ApplyProfileToAux+0x29c>)
 800630a:	f00b fdc7 	bl	8011e9c <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800630e:	2001      	movs	r0, #1
 8006310:	f000 fbe2 	bl	8006ad8 <SM_GetOutputChannel>
 8006314:	4603      	mov	r3, r0
 8006316:	f103 0208 	add.w	r2, r3, #8
 800631a:	2300      	movs	r3, #0
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	2378      	movs	r3, #120	; 0x78
 8006320:	2100      	movs	r1, #0
 8006322:	482a      	ldr	r0, [pc, #168]	; (80063cc <FuncO_ApplyProfileToAux+0x298>)
 8006324:	f004 ff26 	bl	800b174 <HAL_DAC_Start_DMA>
 8006328:	4603      	mov	r3, r0
 800632a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	4619      	mov	r1, r3
 8006330:	4824      	ldr	r0, [pc, #144]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006332:	f00b fd3f 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006336:	4827      	ldr	r0, [pc, #156]	; (80063d4 <FuncO_ApplyProfileToAux+0x2a0>)
 8006338:	f00b fdb0 	bl	8011e9c <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800633c:	2100      	movs	r1, #0
 800633e:	4826      	ldr	r0, [pc, #152]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006340:	f004 ffda 	bl	800b2f8 <HAL_DAC_Stop_DMA>
 8006344:	4603      	mov	r3, r0
 8006346:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	4619      	mov	r1, r3
 800634c:	481d      	ldr	r0, [pc, #116]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800634e:	f00b fd31 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006352:	4822      	ldr	r0, [pc, #136]	; (80063dc <FuncO_ApplyProfileToAux+0x2a8>)
 8006354:	f00b fda2 	bl	8011e9c <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006358:	2000      	movs	r0, #0
 800635a:	f000 fbbd 	bl	8006ad8 <SM_GetOutputChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	2300      	movs	r3, #0
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2378      	movs	r3, #120	; 0x78
 800636a:	2100      	movs	r1, #0
 800636c:	481a      	ldr	r0, [pc, #104]	; (80063d8 <FuncO_ApplyProfileToAux+0x2a4>)
 800636e:	f004 ff01 	bl	800b174 <HAL_DAC_Start_DMA>
 8006372:	4603      	mov	r3, r0
 8006374:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	4619      	mov	r1, r3
 800637a:	4812      	ldr	r0, [pc, #72]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 800637c:	f00b fd1a 	bl	8011db4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006380:	4817      	ldr	r0, [pc, #92]	; (80063e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006382:	f00b fd8b 	bl	8011e9c <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006386:	480e      	ldr	r0, [pc, #56]	; (80063c0 <FuncO_ApplyProfileToAux+0x28c>)
 8006388:	f007 f92e 	bl	800d5e8 <HAL_TIM_Base_Start>
 800638c:	4603      	mov	r3, r0
 800638e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	4619      	mov	r1, r3
 8006394:	480b      	ldr	r0, [pc, #44]	; (80063c4 <FuncO_ApplyProfileToAux+0x290>)
 8006396:	f00b fd0d 	bl	8011db4 <iprintf>
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	2000012c 	.word	0x2000012c
 80063a8:	08015cfc 	.word	0x08015cfc
 80063ac:	20001e94 	.word	0x20001e94
 80063b0:	08015d24 	.word	0x08015d24
 80063b4:	08015d50 	.word	0x08015d50
 80063b8:	08015d7c 	.word	0x08015d7c
 80063bc:	08015d94 	.word	0x08015d94
 80063c0:	200027a4 	.word	0x200027a4
 80063c4:	08015dc8 	.word	0x08015dc8
 80063c8:	08015dd4 	.word	0x08015dd4
 80063cc:	20002658 	.word	0x20002658
 80063d0:	08015e18 	.word	0x08015e18
 80063d4:	08015e5c 	.word	0x08015e5c
 80063d8:	2000266c 	.word	0x2000266c
 80063dc:	08015ea0 	.word	0x08015ea0
 80063e0:	08015ee4 	.word	0x08015ee4

080063e4 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80063e8:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <GO_ResetLastEncoderValue+0x14>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	801a      	strh	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20001e98 	.word	0x20001e98

080063fc <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8006406:	2000      	movs	r0, #0
 8006408:	f000 fb66 	bl	8006ad8 <SM_GetOutputChannel>
 800640c:	4603      	mov	r3, r0
 800640e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	429a      	cmp	r2, r3
 800641e:	d90c      	bls.n	800643a <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3301      	adds	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b07      	cmp	r3, #7
 800642a:	d901      	bls.n	8006430 <GO_MapEncoderPositionToSignalOutput+0x34>
 800642c:	2307      	movs	r3, #7
 800642e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f81c 	bl	8006470 <GO_ApplyPresetToSignal>
 8006438:	e010      	b.n	800645c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	429a      	cmp	r2, r3
 8006442:	d20b      	bcs.n	800645c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	3b01      	subs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d901      	bls.n	8006454 <GO_MapEncoderPositionToSignalOutput+0x58>
 8006450:	2300      	movs	r3, #0
 8006452:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f80a 	bl	8006470 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800645c:	4a03      	ldr	r2, [pc, #12]	; (800646c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20001e98 	.word	0x20001e98

08006470 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800647a:	79fc      	ldrb	r4, [r7, #7]
 800647c:	2000      	movs	r0, #0
 800647e:	f000 fb2b 	bl	8006ad8 <SM_GetOutputChannel>
 8006482:	4601      	mov	r1, r0
 8006484:	4623      	mov	r3, r4
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4423      	add	r3, r4
 800648a:	4a4f      	ldr	r2, [pc, #316]	; (80065c8 <GO_ApplyPresetToSignal+0x158>)
 800648c:	4413      	add	r3, r2
 800648e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b07      	cmp	r3, #7
 8006496:	f200 8093 	bhi.w	80065c0 <GO_ApplyPresetToSignal+0x150>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <GO_ApplyPresetToSignal+0x30>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064c1 	.word	0x080064c1
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006521 	.word	0x08006521
 80064b0:	08006541 	.word	0x08006541
 80064b4:	08006561 	.word	0x08006561
 80064b8:	08006581 	.word	0x08006581
 80064bc:	080065a1 	.word	0x080065a1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2101      	movs	r1, #1
 80064c4:	4841      	ldr	r0, [pc, #260]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80064c6:	f005 ff95 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064ca:	2200      	movs	r2, #0
 80064cc:	2120      	movs	r1, #32
 80064ce:	4840      	ldr	r0, [pc, #256]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064d0:	f005 ff90 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80064d4:	2200      	movs	r2, #0
 80064d6:	2110      	movs	r1, #16
 80064d8:	483d      	ldr	r0, [pc, #244]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064da:	f005 ff8b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 80064de:	e06f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80064e0:	2201      	movs	r2, #1
 80064e2:	2101      	movs	r1, #1
 80064e4:	4839      	ldr	r0, [pc, #228]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80064e6:	f005 ff85 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064ea:	2200      	movs	r2, #0
 80064ec:	2120      	movs	r1, #32
 80064ee:	4838      	ldr	r0, [pc, #224]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064f0:	f005 ff80 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80064f4:	2200      	movs	r2, #0
 80064f6:	2110      	movs	r1, #16
 80064f8:	4835      	ldr	r0, [pc, #212]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80064fa:	f005 ff7b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 80064fe:	e05f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006500:	2200      	movs	r2, #0
 8006502:	2101      	movs	r1, #1
 8006504:	4831      	ldr	r0, [pc, #196]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006506:	f005 ff75 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800650a:	2201      	movs	r2, #1
 800650c:	2120      	movs	r1, #32
 800650e:	4830      	ldr	r0, [pc, #192]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006510:	f005 ff70 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006514:	2200      	movs	r2, #0
 8006516:	2110      	movs	r1, #16
 8006518:	482d      	ldr	r0, [pc, #180]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800651a:	f005 ff6b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800651e:	e04f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006520:	2201      	movs	r2, #1
 8006522:	2101      	movs	r1, #1
 8006524:	4829      	ldr	r0, [pc, #164]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006526:	f005 ff65 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800652a:	2201      	movs	r2, #1
 800652c:	2120      	movs	r1, #32
 800652e:	4828      	ldr	r0, [pc, #160]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006530:	f005 ff60 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	2110      	movs	r1, #16
 8006538:	4825      	ldr	r0, [pc, #148]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800653a:	f005 ff5b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800653e:	e03f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	2101      	movs	r1, #1
 8006544:	4821      	ldr	r0, [pc, #132]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006546:	f005 ff55 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800654a:	2200      	movs	r2, #0
 800654c:	2120      	movs	r1, #32
 800654e:	4820      	ldr	r0, [pc, #128]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006550:	f005 ff50 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006554:	2201      	movs	r2, #1
 8006556:	2110      	movs	r1, #16
 8006558:	481d      	ldr	r0, [pc, #116]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800655a:	f005 ff4b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800655e:	e02f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006560:	2201      	movs	r2, #1
 8006562:	2101      	movs	r1, #1
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006566:	f005 ff45 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800656a:	2200      	movs	r2, #0
 800656c:	2120      	movs	r1, #32
 800656e:	4818      	ldr	r0, [pc, #96]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006570:	f005 ff40 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006574:	2201      	movs	r2, #1
 8006576:	2110      	movs	r1, #16
 8006578:	4815      	ldr	r0, [pc, #84]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800657a:	f005 ff3b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800657e:	e01f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	2101      	movs	r1, #1
 8006584:	4811      	ldr	r0, [pc, #68]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 8006586:	f005 ff35 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800658a:	2201      	movs	r2, #1
 800658c:	2120      	movs	r1, #32
 800658e:	4810      	ldr	r0, [pc, #64]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 8006590:	f005 ff30 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006594:	2201      	movs	r2, #1
 8006596:	2110      	movs	r1, #16
 8006598:	480d      	ldr	r0, [pc, #52]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 800659a:	f005 ff2b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 800659e:	e00f      	b.n	80065c0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80065a0:	2201      	movs	r2, #1
 80065a2:	2101      	movs	r1, #1
 80065a4:	4809      	ldr	r0, [pc, #36]	; (80065cc <GO_ApplyPresetToSignal+0x15c>)
 80065a6:	f005 ff25 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80065aa:	2201      	movs	r2, #1
 80065ac:	2120      	movs	r1, #32
 80065ae:	4808      	ldr	r0, [pc, #32]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80065b0:	f005 ff20 	bl	800c3f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80065b4:	2201      	movs	r2, #1
 80065b6:	2110      	movs	r1, #16
 80065b8:	4805      	ldr	r0, [pc, #20]	; (80065d0 <GO_ApplyPresetToSignal+0x160>)
 80065ba:	f005 ff1b 	bl	800c3f4 <HAL_GPIO_WritePin>
			break;
 80065be:	bf00      	nop
	}

}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	20000164 	.word	0x20000164
 80065cc:	48000400 	.word	0x48000400
 80065d0:	48000800 	.word	0x48000800

080065d4 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	if(IT_GetTriggerStatus())
 80065d8:	f000 f8c0 	bl	800675c <IT_GetTriggerStatus>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <IT_ArbitrateInputTrigger+0x50>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80065e2:	2100      	movs	r1, #0
 80065e4:	483d      	ldr	r0, [pc, #244]	; (80066dc <IT_ArbitrateInputTrigger+0x108>)
 80065e6:	f007 fc81 	bl	800deec <HAL_TIM_IC_Stop_DMA>
//		INPUT_TIMER->DIER &= ~TIM_DIER_UDE;
//		INPUT_TIMER->CR1 &= ~TIM_CR1_CEN;

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 80065ea:	483d      	ldr	r0, [pc, #244]	; (80066e0 <IT_ArbitrateInputTrigger+0x10c>)
 80065ec:	f004 fb58 	bl	800aca0 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 80065f0:	483c      	ldr	r0, [pc, #240]	; (80066e4 <IT_ArbitrateInputTrigger+0x110>)
 80065f2:	f003 f9fd 	bl	80099f0 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 80065f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006610:	f023 0308 	bic.w	r3, r3, #8
 8006614:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8006616:	2000      	movs	r0, #0
 8006618:	f000 f8ac 	bl	8006774 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800661c:	2000      	movs	r0, #0
 800661e:	f7ff fd25 	bl	800606c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8006622:	e059      	b.n	80066d8 <IT_ArbitrateInputTrigger+0x104>
		switch(IT_GetActiveTriggerMode())
 8006624:	f000 f87e 	bl	8006724 <IT_GetActiveTriggerMode>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d037      	beq.n	800669e <IT_ArbitrateInputTrigger+0xca>
 800662e:	2b02      	cmp	r3, #2
 8006630:	d042      	beq.n	80066b8 <IT_ArbitrateInputTrigger+0xe4>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d000      	beq.n	8006638 <IT_ArbitrateInputTrigger+0x64>
				break;
 8006636:	e04c      	b.n	80066d2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006638:	2201      	movs	r2, #1
 800663a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800663e:	482a      	ldr	r0, [pc, #168]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 8006640:	f005 fed8 	bl	800c3f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664a:	4827      	ldr	r0, [pc, #156]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 800664c:	f005 fed2 	bl	800c3f4 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 8006650:	2308      	movs	r3, #8
 8006652:	4a26      	ldr	r2, [pc, #152]	; (80066ec <IT_ArbitrateInputTrigger+0x118>)
 8006654:	2100      	movs	r1, #0
 8006656:	4821      	ldr	r0, [pc, #132]	; (80066dc <IT_ArbitrateInputTrigger+0x108>)
 8006658:	f007 faba 	bl	800dbd0 <HAL_TIM_IC_Start_DMA>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 800665c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 800666c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006676:	f043 0302 	orr.w	r3, r3, #2
 800667a:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 800667c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006686:	f023 031e 	bic.w	r3, r3, #30
 800668a:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;		// set AF to TIM2_CH1
 800668c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6213      	str	r3, [r2, #32]
				break;
 800669c:	e019      	b.n	80066d2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066a4:	4810      	ldr	r0, [pc, #64]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 80066a6:	f005 fea5 	bl	800c3f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 80066aa:	2201      	movs	r2, #1
 80066ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066b0:	480d      	ldr	r0, [pc, #52]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 80066b2:	f005 fe9f 	bl	800c3f4 <HAL_GPIO_WritePin>
				break;
 80066b6:	e00c      	b.n	80066d2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80066b8:	2201      	movs	r2, #1
 80066ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066be:	480a      	ldr	r0, [pc, #40]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 80066c0:	f005 fe98 	bl	800c3f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80066c4:	2201      	movs	r2, #1
 80066c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ca:	4807      	ldr	r0, [pc, #28]	; (80066e8 <IT_ArbitrateInputTrigger+0x114>)
 80066cc:	f005 fe92 	bl	800c3f4 <HAL_GPIO_WritePin>
				break;
 80066d0:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 80066d2:	2001      	movs	r0, #1
 80066d4:	f000 f84e 	bl	8006774 <IT_SetTriggerStatus>
}
 80066d8:	bf00      	nop
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	2000296c 	.word	0x2000296c
 80066e0:	20002634 	.word	0x20002634
 80066e4:	20002568 	.word	0x20002568
 80066e8:	48000800 	.word	0x48000800
 80066ec:	20001f78 	.word	0x20001f78

080066f0 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 80066f4:	f000 f816 	bl	8006724 <IT_GetActiveTriggerMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d008      	beq.n	8006710 <IT_CycleInputTriggerMode+0x20>
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d00a      	beq.n	8006718 <IT_CycleInputTriggerMode+0x28>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d000      	beq.n	8006708 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 8006706:	e00b      	b.n	8006720 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 8006708:	2001      	movs	r0, #1
 800670a:	f000 f817 	bl	800673c <IT_SetActiveTriggerMode>
			break;
 800670e:	e007      	b.n	8006720 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 8006710:	2002      	movs	r0, #2
 8006712:	f000 f813 	bl	800673c <IT_SetActiveTriggerMode>
			break;
 8006716:	e003      	b.n	8006720 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 8006718:	2000      	movs	r0, #0
 800671a:	f000 f80f 	bl	800673c <IT_SetActiveTriggerMode>
			break;
 800671e:	bf00      	nop
	}
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}

08006724 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <IT_GetActiveTriggerMode+0x14>)
 800672a:	781b      	ldrb	r3, [r3, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20001e9a 	.word	0x20001e9a

0800673c <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8006746:	4a04      	ldr	r2, [pc, #16]	; (8006758 <IT_SetActiveTriggerMode+0x1c>)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	7013      	strb	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20001e9a 	.word	0x20001e9a

0800675c <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <IT_GetTriggerStatus+0x14>)
 8006762:	781b      	ldrb	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20001e9b 	.word	0x20001e9b

08006774 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 800677e:	4a04      	ldr	r2, [pc, #16]	; (8006790 <IT_SetTriggerStatus+0x1c>)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	7013      	strb	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20001e9b 	.word	0x20001e9b

08006794 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 800679c:	4808      	ldr	r0, [pc, #32]	; (80067c0 <HAL_COMP_TriggerCallback+0x2c>)
 800679e:	f004 fb25 	bl	800adec <HAL_COMP_GetOutputLevel>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <HAL_COMP_TriggerCallback+0x30>)
 80067aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80067ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80067b0:	e002      	b.n	80067b8 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <HAL_COMP_TriggerCallback+0x30>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20002634 	.word	0x20002634
 80067c4:	20001f70 	.word	0x20001f70

080067c8 <HAL_TIM_IC_CaptureCallback>:
		OUTPUT_TIMER->ARR = trigger_input[0];
	printf("%lu\n", trigger_input[0]);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

	avg_freq_count_period = 0;
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e00b      	b.n	80067f4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 80067dc:	4a28      	ldr	r2, [pc, #160]	; (8006880 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4413      	add	r3, r2
 80067ea:	4a24      	ldr	r2, [pc, #144]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80067ec:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b07      	cmp	r3, #7
 80067f8:	ddf0      	ble.n	80067dc <HAL_TIM_IC_CaptureCallback+0x14>
	}

	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006802:	6013      	str	r3, [r2, #0]
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 8006804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006822:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006884 <HAL_TIM_IC_CaptureCallback+0xbc>
 8006826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800682c:	edc3 7a00 	vstr	s15, [r3]

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006832:	edd3 7a00 	vldr	s15, [r3]
 8006836:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800688c <HAL_TIM_IC_CaptureCallback+0xc4>
 800683a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800683e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006842:	d505      	bpl.n	8006850 <HAL_TIM_IC_CaptureCallback+0x88>
		INPUT_TIMER->PSC = 8000;
 8006844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006848:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
 800684e:	e003      	b.n	8006858 <HAL_TIM_IC_CaptureCallback+0x90>
	else
		INPUT_TIMER->PSC = 128;
 8006850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	629a      	str	r2, [r3, #40]	; 0x28

	printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);
 8006858:	4b08      	ldr	r3, [pc, #32]	; (800687c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800685a:	681c      	ldr	r4, [r3, #0]
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7f9 fe99 	bl	8000598 <__aeabi_f2d>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4621      	mov	r1, r4
 800686c:	4808      	ldr	r0, [pc, #32]	; (8006890 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800686e:	f00b faa1 	bl	8011db4 <iprintf>

}
 8006872:	bf00      	nop
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}
 800687a:	bf00      	nop
 800687c:	20001f98 	.word	0x20001f98
 8006880:	20001f78 	.word	0x20001f78
 8006884:	4d2037a0 	.word	0x4d2037a0
 8006888:	20001f9c 	.word	0x20001f9c
 800688c:	42480000 	.word	0x42480000
 8006890:	08015f50 	.word	0x08015f50

08006894 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <IT_GetAverageFreqCountHertz+0x18>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	ee07 3a90 	vmov	s15, r3
}
 80068a0:	eeb0 0a67 	vmov.f32	s0, s15
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20001f9c 	.word	0x20001f9c

080068b0 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80068b4:	f7ff f838 	bl	8005928 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80068b8:	f000 f8ae 	bl	8006a18 <_InitOutputChannels>
	_InitAmpProfiles();
 80068bc:	f000 f824 	bl	8006908 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80068c0:	2110      	movs	r1, #16
 80068c2:	480f      	ldr	r0, [pc, #60]	; (8006900 <SM_Init+0x50>)
 80068c4:	f004 fc03 	bl	800b0ce <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80068c8:	2201      	movs	r2, #1
 80068ca:	2108      	movs	r1, #8
 80068cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068d0:	f005 fd90 	bl	800c3f4 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <SM_Init+0x54>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <SM_Init+0x54>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80068e0:	2000      	movs	r0, #0
 80068e2:	f7ff fbc3 	bl	800606c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80068e6:	2059      	movs	r0, #89	; 0x59
 80068e8:	f000 fc2c 	bl	8007144 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7ff fc21 	bl	8006134 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80068f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068f6:	f7ff f927 	bl	8005b48 <FreqO_ApplyProfile>

}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000266c 	.word	0x2000266c
 8006904:	40013400 	.word	0x40013400

08006908 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b08b      	sub	sp, #44	; 0x2c
 800690c:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
 8006912:	e033      	b.n	800697c <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006914:	493c      	ldr	r1, [pc, #240]	; (8006a08 <_InitAmpProfiles+0x100>)
 8006916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	1a9b      	subs	r3, r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	3304      	adds	r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006928:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <_InitAmpProfiles+0x104>)
 800692a:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 800692c:	4936      	ldr	r1, [pc, #216]	; (8006a08 <_InitAmpProfiles+0x100>)
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	4613      	mov	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	3308      	adds	r3, #8
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006946:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 800694a:	ed97 7a04 	vldr	s14, [r7, #16]
 800694e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006952:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006956:	ed97 7a02 	vldr	s14, [r7, #8]
 800695a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800695e:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8006962:	4929      	ldr	r1, [pc, #164]	; (8006a08 <_InitAmpProfiles+0x100>)
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	3310      	adds	r3, #16
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	3301      	adds	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b61      	cmp	r3, #97	; 0x61
 8006980:	ddc8      	ble.n	8006914 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006982:	2300      	movs	r3, #0
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	e037      	b.n	80069f8 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <_InitAmpProfiles+0x108>)
 800698a:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 800698c:	491e      	ldr	r1, [pc, #120]	; (8006a08 <_InitAmpProfiles+0x100>)
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	3304      	adds	r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80069a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80069a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80069a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069ac:	ee16 0a90 	vmov	r0, s13
 80069b0:	f7f9 fdf2 	bl	8000598 <__aeabi_f2d>
 80069b4:	4603      	mov	r3, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	ec44 3b10 	vmov	d0, r3, r4
 80069bc:	f00d fb08 	bl	8013fd0 <log10>
 80069c0:	ec51 0b10 	vmov	r0, r1, d0
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <_InitAmpProfiles+0x10c>)
 80069ca:	f7f9 fe3d 	bl	8000648 <__aeabi_dmul>
 80069ce:	4603      	mov	r3, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	4618      	mov	r0, r3
 80069d4:	4621      	mov	r1, r4
 80069d6:	f7fa f92f 	bl	8000c38 <__aeabi_d2f>
 80069da:	4603      	mov	r3, r0
 80069dc:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80069de:	490a      	ldr	r1, [pc, #40]	; (8006a08 <_InitAmpProfiles+0x100>)
 80069e0:	6a3a      	ldr	r2, [r7, #32]
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	330c      	adds	r3, #12
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	3301      	adds	r3, #1
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b61      	cmp	r3, #97	; 0x61
 80069fc:	ddc4      	ble.n	8006988 <_InitAmpProfiles+0x80>

	}
}
 80069fe:	bf00      	nop
 8006a00:	372c      	adds	r7, #44	; 0x2c
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}
 8006a06:	bf00      	nop
 8006a08:	2000017c 	.word	0x2000017c
 8006a0c:	402ccccd 	.word	0x402ccccd
 8006a10:	3a83126f 	.word	0x3a83126f
 8006a14:	40340000 	.word	0x40340000

08006a18 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006a1e:	4b28      	ldr	r3, [pc, #160]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <_InitOutputChannels+0xac>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a2a:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006a2c:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a2e:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <_InitOutputChannels+0xac>)
 8006a30:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	607b      	str	r3, [r7, #4]
 8006a38:	e00b      	b.n	8006a52 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006a3a:	4a23      	ldr	r2, [pc, #140]	; (8006ac8 <_InitOutputChannels+0xb0>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a42:	491f      	ldr	r1, [pc, #124]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3302      	adds	r3, #2
 8006a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b77      	cmp	r3, #119	; 0x77
 8006a56:	ddf0      	ble.n	8006a3a <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006a58:	4b19      	ldr	r3, [pc, #100]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <_InitOutputChannels+0xb4>)
 8006a5c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <_InitOutputChannels+0xa8>)
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <_InitOutputChannels+0xb8>)
 8006a64:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006a6e:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <_InitOutputChannels+0xac>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006a74:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006a78:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <_InitOutputChannels+0xac>)
 8006a7a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	e00b      	b.n	8006a9c <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006a84:	4a10      	ldr	r2, [pc, #64]	; (8006ac8 <_InitOutputChannels+0xb0>)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a8c:	4911      	ldr	r1, [pc, #68]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3302      	adds	r3, #2
 8006a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b77      	cmp	r3, #119	; 0x77
 8006aa0:	ddf0      	ble.n	8006a84 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <_InitOutputChannels+0xb4>)
 8006aa6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <_InitOutputChannels+0xbc>)
 8006aac:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <_InitOutputChannels+0xb8>)
 8006aae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20001fa0 	.word	0x20001fa0
 8006ac4:	2000012c 	.word	0x2000012c
 8006ac8:	200014b8 	.word	0x200014b8
 8006acc:	20000b38 	.word	0x20000b38
 8006ad0:	20000179 	.word	0x20000179
 8006ad4:	20002194 	.word	0x20002194

08006ad8 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <SM_GetOutputChannel+0x24>)
 8006aea:	e000      	b.n	8006aee <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <SM_GetOutputChannel+0x28>)
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20001fa0 	.word	0x20001fa0
 8006b00:	20002194 	.word	0x20002194

08006b04 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b096      	sub	sp, #88	; 0x58
 8006b08:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006b0a:	4889      	ldr	r0, [pc, #548]	; (8006d30 <SM_EnablePwmToAux+0x22c>)
 8006b0c:	f00b f9c6 	bl	8011e9c <puts>

	HAL_StatusTypeDef res = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	611a      	str	r2, [r3, #16]
 8006b40:	615a      	str	r2, [r3, #20]
 8006b42:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006b54:	4b77      	ldr	r3, [pc, #476]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b56:	4a78      	ldr	r2, [pc, #480]	; (8006d38 <SM_EnablePwmToAux+0x234>)
 8006b58:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006b5a:	4b76      	ldr	r3, [pc, #472]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006b60:	4b74      	ldr	r3, [pc, #464]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b62:	2210      	movs	r2, #16
 8006b64:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006b66:	4b73      	ldr	r3, [pc, #460]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006b6c:	4b71      	ldr	r3, [pc, #452]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b72:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006b74:	4b6f      	ldr	r3, [pc, #444]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006b7a:	486e      	ldr	r0, [pc, #440]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006b7c:	f006 fcdc 	bl	800d538 <HAL_TIM_Base_Init>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d107      	bne.n	8006b9c <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b90:	4619      	mov	r1, r3
 8006b92:	486a      	ldr	r0, [pc, #424]	; (8006d3c <SM_EnablePwmToAux+0x238>)
 8006b94:	f00b f90e 	bl	8011db4 <iprintf>
		Error_Handler();
 8006b98:	f001 fb9c 	bl	80082d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006ba2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4862      	ldr	r0, [pc, #392]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006baa:	f007 fe35 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d107      	bne.n	8006bca <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	485f      	ldr	r0, [pc, #380]	; (8006d40 <SM_EnablePwmToAux+0x23c>)
 8006bc2:	f00b f8f7 	bl	8011db4 <iprintf>
		Error_Handler();
 8006bc6:	f001 fb85 	bl	80082d4 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006bca:	485a      	ldr	r0, [pc, #360]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006bcc:	f006 fdc7 	bl	800d75e <HAL_TIM_PWM_Init>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d107      	bne.n	8006bec <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006be0:	4619      	mov	r1, r3
 8006be2:	4858      	ldr	r0, [pc, #352]	; (8006d44 <SM_EnablePwmToAux+0x240>)
 8006be4:	f00b f8e6 	bl	8011db4 <iprintf>
		Error_Handler();
 8006be8:	f001 fb74 	bl	80082d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006bec:	2320      	movs	r3, #32
 8006bee:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	484e      	ldr	r0, [pc, #312]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006bfc:	f008 fed6 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d107      	bne.n	8006c1c <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c10:	4619      	mov	r1, r3
 8006c12:	484d      	ldr	r0, [pc, #308]	; (8006d48 <SM_EnablePwmToAux+0x244>)
 8006c14:	f00b f8ce 	bl	8011db4 <iprintf>
		Error_Handler();
 8006c18:	f001 fb5c 	bl	80082d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c1c:	2360      	movs	r3, #96	; 0x60
 8006c1e:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c24:	2300      	movs	r3, #0
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006c2c:	f107 031c 	add.w	r3, r7, #28
 8006c30:	2200      	movs	r2, #0
 8006c32:	4619      	mov	r1, r3
 8006c34:	483f      	ldr	r0, [pc, #252]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006c36:	f007 fcdf 	bl	800e5f8 <HAL_TIM_PWM_ConfigChannel>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d107      	bne.n	8006c56 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	483f      	ldr	r0, [pc, #252]	; (8006d4c <SM_EnablePwmToAux+0x248>)
 8006c4e:	f00b f8b1 	bl	8011db4 <iprintf>
		Error_Handler();
 8006c52:	f001 fb3f 	bl	80082d4 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006c56:	483e      	ldr	r0, [pc, #248]	; (8006d50 <SM_EnablePwmToAux+0x24c>)
 8006c58:	f00b f920 	bl	8011e9c <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5c:	4b3d      	ldr	r3, [pc, #244]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c60:	4a3c      	ldr	r2, [pc, #240]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c68:	4b3a      	ldr	r3, [pc, #232]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	607b      	str	r3, [r7, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c84:	2302      	movs	r3, #2
 8006c86:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006c88:	4833      	ldr	r0, [pc, #204]	; (8006d58 <SM_EnablePwmToAux+0x254>)
 8006c8a:	f00b f907 	bl	8011e9c <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	4619      	mov	r1, r3
 8006c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c98:	f005 f948 	bl	800bf2c <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006c9c:	482f      	ldr	r0, [pc, #188]	; (8006d5c <SM_EnablePwmToAux+0x258>)
 8006c9e:	f00b f8fd 	bl	8011e9c <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006ca2:	4b2c      	ldr	r3, [pc, #176]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	6593      	str	r3, [r2, #88]	; 0x58
 8006cae:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <SM_EnablePwmToAux+0x250>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006cba:	4829      	ldr	r0, [pc, #164]	; (8006d60 <SM_EnablePwmToAux+0x25c>)
 8006cbc:	f00b f8ee 	bl	8011e9c <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	201d      	movs	r0, #29
 8006cc6:	f004 f99e 	bl	800b006 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006cca:	4826      	ldr	r0, [pc, #152]	; (8006d64 <SM_EnablePwmToAux+0x260>)
 8006ccc:	f00b f8e6 	bl	8011e9c <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cd0:	201d      	movs	r0, #29
 8006cd2:	f004 f9b2 	bl	800b03a <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006cd6:	4824      	ldr	r0, [pc, #144]	; (8006d68 <SM_EnablePwmToAux+0x264>)
 8006cd8:	f00b f8e0 	bl	8011e9c <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4815      	ldr	r0, [pc, #84]	; (8006d34 <SM_EnablePwmToAux+0x230>)
 8006ce0:	f006 fd9e 	bl	800d820 <HAL_TIM_PWM_Start>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d107      	bne.n	8006d00 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	481d      	ldr	r0, [pc, #116]	; (8006d6c <SM_EnablePwmToAux+0x268>)
 8006cf8:	f00b f85c 	bl	8011db4 <iprintf>
		Error_Handler();
 8006cfc:	f001 faea 	bl	80082d4 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006d00:	481b      	ldr	r0, [pc, #108]	; (8006d70 <SM_EnablePwmToAux+0x26c>)
 8006d02:	f00b f8cb 	bl	8011e9c <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006d06:	2007      	movs	r0, #7
 8006d08:	f7ff fbb2 	bl	8006470 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006d0c:	4819      	ldr	r0, [pc, #100]	; (8006d74 <SM_EnablePwmToAux+0x270>)
 8006d0e:	f00b f8c5 	bl	8011e9c <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <SM_EnablePwmToAux+0x234>)
 8006d14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006d1a:	4817      	ldr	r0, [pc, #92]	; (8006d78 <SM_EnablePwmToAux+0x274>)
 8006d1c:	f00b f8be 	bl	8011e9c <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <SM_EnablePwmToAux+0x234>)
 8006d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006d28:	bf00      	nop
 8006d2a:	3758      	adds	r7, #88	; 0x58
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	08015fac 	.word	0x08015fac
 8006d34:	20001f20 	.word	0x20001f20
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	08015fc0 	.word	0x08015fc0
 8006d40:	08015ff4 	.word	0x08015ff4
 8006d44:	08016030 	.word	0x08016030
 8006d48:	08016060 	.word	0x08016060
 8006d4c:	080160a8 	.word	0x080160a8
 8006d50:	080160e4 	.word	0x080160e4
 8006d54:	40021000 	.word	0x40021000
 8006d58:	08016114 	.word	0x08016114
 8006d5c:	08016138 	.word	0x08016138
 8006d60:	08016170 	.word	0x08016170
 8006d64:	08016198 	.word	0x08016198
 8006d68:	080161c0 	.word	0x080161c0
 8006d6c:	080161e8 	.word	0x080161e8
 8006d70:	0801621c 	.word	0x0801621c
 8006d74:	08016248 	.word	0x08016248
 8006d78:	0801627c 	.word	0x0801627c

08006d7c <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006d82:	4815      	ldr	r0, [pc, #84]	; (8006dd8 <SM_DisablePwmToAux+0x5c>)
 8006d84:	f00b f816 	bl	8011db4 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006d8c:	4813      	ldr	r0, [pc, #76]	; (8006ddc <SM_DisablePwmToAux+0x60>)
 8006d8e:	f00b f885 	bl	8011e9c <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006d92:	2100      	movs	r1, #0
 8006d94:	4812      	ldr	r0, [pc, #72]	; (8006de0 <SM_DisablePwmToAux+0x64>)
 8006d96:	f006 fe1d 	bl	800d9d4 <HAL_TIM_PWM_Stop>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d106      	bne.n	8006db2 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	4619      	mov	r1, r3
 8006da8:	480e      	ldr	r0, [pc, #56]	; (8006de4 <SM_DisablePwmToAux+0x68>)
 8006daa:	f00b f803 	bl	8011db4 <iprintf>
		Error_Handler();
 8006dae:	f001 fa91 	bl	80082d4 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <SM_DisablePwmToAux+0x6c>)
 8006db4:	f00b f872 	bl	8011e9c <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <SM_DisablePwmToAux+0x70>)
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <SM_DisablePwmToAux+0x70>)
 8006dbe:	f023 0302 	bic.w	r3, r3, #2
 8006dc2:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006dc4:	480a      	ldr	r0, [pc, #40]	; (8006df0 <SM_DisablePwmToAux+0x74>)
 8006dc6:	f00b f869 	bl	8011e9c <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006dca:	201d      	movs	r0, #29
 8006dcc:	f004 f943 	bl	800b056 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	080162ac 	.word	0x080162ac
 8006ddc:	080162c0 	.word	0x080162c0
 8006de0:	20001f20 	.word	0x20001f20
 8006de4:	080162e8 	.word	0x080162e8
 8006de8:	0801631c 	.word	0x0801631c
 8006dec:	40021000 	.word	0x40021000
 8006df0:	08016358 	.word	0x08016358

08006df4 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b0b2      	sub	sp, #200	; 0xc8
 8006df8:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006dfa:	4860      	ldr	r0, [pc, #384]	; (8006f7c <SM_EnableDacToAux+0x188>)
 8006dfc:	f00a ffda 	bl	8011db4 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006e06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e0a:	2230      	movs	r2, #48	; 0x30
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f00a fb6c 	bl	80114ec <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006e24:	4b56      	ldr	r3, [pc, #344]	; (8006f80 <SM_EnableDacToAux+0x18c>)
 8006e26:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f004 f92c 	bl	800b08a <HAL_DAC_Init>
 8006e32:	4603      	mov	r3, r0
 8006e34:	461a      	mov	r2, r3
 8006e36:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d107      	bne.n	8006e4e <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006e3e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e42:	4619      	mov	r1, r3
 8006e44:	484f      	ldr	r0, [pc, #316]	; (8006f84 <SM_EnableDacToAux+0x190>)
 8006e46:	f00a ffb5 	bl	8011db4 <iprintf>
		Error_Handler();
 8006e4a:	f001 fa43 	bl	80082d4 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006e68:	2306      	movs	r3, #6
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006e86:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006e8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e8e:	2200      	movs	r2, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f004 fae3 	bl	800b45c <HAL_DAC_ConfigChannel>
 8006e96:	4603      	mov	r3, r0
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d107      	bne.n	8006eb2 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006ea2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4837      	ldr	r0, [pc, #220]	; (8006f88 <SM_EnableDacToAux+0x194>)
 8006eaa:	f00a ff83 	bl	8011db4 <iprintf>
		Error_Handler();
 8006eae:	f001 fa11 	bl	80082d4 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006eb2:	4836      	ldr	r0, [pc, #216]	; (8006f8c <SM_EnableDacToAux+0x198>)
 8006eb4:	f00a fff2 	bl	8011e9c <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	4a34      	ldr	r2, [pc, #208]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ec4:	4b32      	ldr	r3, [pc, #200]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006ed0:	4830      	ldr	r0, [pc, #192]	; (8006f94 <SM_EnableDacToAux+0x1a0>)
 8006ed2:	f00a ffe3 	bl	8011e9c <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	4a2d      	ldr	r2, [pc, #180]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <SM_EnableDacToAux+0x19c>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	607b      	str	r3, [r7, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006f00:	4825      	ldr	r0, [pc, #148]	; (8006f98 <SM_EnableDacToAux+0x1a4>)
 8006f02:	f00a ffcb 	bl	8011e9c <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f10:	f005 f80c 	bl	800bf2c <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <SM_EnableDacToAux+0x1a8>)
 8006f16:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006f18:	2329      	movs	r3, #41	; 0x29
 8006f1a:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f24:	2380      	movs	r3, #128	; 0x80
 8006f26:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2c:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006f34:	2320      	movs	r3, #32
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006f3c:	f107 030c 	add.w	r3, r7, #12
 8006f40:	4618      	mov	r0, r3
 8006f42:	f004 fcc1 	bl	800b8c8 <HAL_DMA_Init>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d107      	bne.n	8006f62 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006f52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f56:	4619      	mov	r1, r3
 8006f58:	4811      	ldr	r0, [pc, #68]	; (8006fa0 <SM_EnableDacToAux+0x1ac>)
 8006f5a:	f00a ff2b 	bl	8011db4 <iprintf>
		Error_Handler();
 8006f5e:	f001 f9b9 	bl	80082d4 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006f62:	4810      	ldr	r0, [pc, #64]	; (8006fa4 <SM_EnableDacToAux+0x1b0>)
 8006f64:	f00a ff9a 	bl	8011e9c <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	677b      	str	r3, [r7, #116]	; 0x74
 8006f6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006f74:	bf00      	nop
 8006f76:	37c8      	adds	r7, #200	; 0xc8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	08016380 	.word	0x08016380
 8006f80:	50000c00 	.word	0x50000c00
 8006f84:	08016394 	.word	0x08016394
 8006f88:	080163c0 	.word	0x080163c0
 8006f8c:	080163f8 	.word	0x080163f8
 8006f90:	40021000 	.word	0x40021000
 8006f94:	08016428 	.word	0x08016428
 8006f98:	08016458 	.word	0x08016458
 8006f9c:	40020030 	.word	0x40020030
 8006fa0:	0801647c 	.word	0x0801647c
 8006fa4:	080164a8 	.word	0x080164a8

08006fa8 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006fac:	4806      	ldr	r0, [pc, #24]	; (8006fc8 <SM_DisableDacToAux+0x20>)
 8006fae:	f00a ff75 	bl	8011e9c <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006fb2:	4806      	ldr	r0, [pc, #24]	; (8006fcc <SM_DisableDacToAux+0x24>)
 8006fb4:	f00a ff72 	bl	8011e9c <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006fb8:	2140      	movs	r1, #64	; 0x40
 8006fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fbe:	f005 f937 	bl	800c230 <HAL_GPIO_DeInit>

}
 8006fc2:	bf00      	nop
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	080164cc 	.word	0x080164cc
 8006fcc:	080164e0 	.word	0x080164e0

08006fd0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <SM_GetEncoderValue+0x34>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <SM_GetEncoderValue+0x34>)
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	e002      	b.n	8006ff8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <SM_GetEncoderValue+0x34>)
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	b29b      	uxth	r3, r3
	}
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	40012c00 	.word	0x40012c00

08007008 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800700e:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <SM_GetOutputInHertz+0x7c>)
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <SM_GetOutputInHertz+0x16>
 8007016:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800701a:	60bb      	str	r3, [r7, #8]
 800701c:	e007      	b.n	800702e <SM_GetOutputInHertz+0x26>
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <SM_GetOutputInHertz+0x7c>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800702e:	4b15      	ldr	r3, [pc, #84]	; (8007084 <SM_GetOutputInHertz+0x7c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <SM_GetOutputInHertz+0x36>
 8007036:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800703a:	607b      	str	r3, [r7, #4]
 800703c:	e007      	b.n	800704e <SM_GetOutputInHertz+0x46>
 800703e:	4b11      	ldr	r3, [pc, #68]	; (8007084 <SM_GetOutputInHertz+0x7c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800704e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007052:	edd7 7a01 	vldr	s15, [r7, #4]
 8007056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800705a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007088 <SM_GetOutputInHertz+0x80>
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8007066:	edd7 7a03 	vldr	s15, [r7, #12]
 800706a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800708c <SM_GetOutputInHertz+0x84>
 800706e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007072:	eef0 7a66 	vmov.f32	s15, s13
}
 8007076:	eeb0 0a67 	vmov.f32	s0, s15
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	40013400 	.word	0x40013400
 8007088:	4d2037a0 	.word	0x4d2037a0
 800708c:	42f00000 	.word	0x42f00000

08007090 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 800709c:	887b      	ldrh	r3, [r7, #2]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <SM_ConvertPeriodToHertz+0x16>
 80070a2:	2301      	movs	r3, #1
 80070a4:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80070a6:	887b      	ldrh	r3, [r7, #2]
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80070d8 <SM_ConvertPeriodToHertz+0x48>
 80070c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80070c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80070ca:	eeb0 0a67 	vmov.f32	s0, s15
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	4d2037a0 	.word	0x4d2037a0

080070dc <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <SM_IsFuncPwmDutyMode+0x14>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20001e9c 	.word	0x20001e9c

080070f4 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <SM_ToggleFuncPwmDutyMode+0x1c>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f083 0301 	eor.w	r3, r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8007104:	701a      	strb	r2, [r3, #0]
}
 8007106:	bf00      	nop
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20001e9c 	.word	0x20001e9c

08007114 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <SM_ResetFuncPwmDutyMode+0x14>)
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]

}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20001e9c 	.word	0x20001e9c

0800712c <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8007130:	4b03      	ldr	r3, [pc, #12]	; (8007140 <VPP_ResetLastEncoderValue+0x14>)
 8007132:	2200      	movs	r2, #0
 8007134:	801a      	strh	r2, [r3, #0]
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20001e9e 	.word	0x20001e9e

08007144 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800714e:	79fa      	ldrb	r2, [r7, #7]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4a10      	ldr	r2, [pc, #64]	; (800719c <VPP_ApplyProfileToSignal+0x58>)
 800715a:	4413      	add	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800715e:	2000      	movs	r0, #0
 8007160:	f7ff fcba 	bl	8006ad8 <SM_GetOutputChannel>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7a1b      	ldrb	r3, [r3, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff f97d 	bl	8006470 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	edd3 7a04 	vldr	s15, [r3, #16]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8b1b      	ldrh	r3, [r3, #24]
 8007186:	4618      	mov	r0, r3
 8007188:	eef0 0a47 	vmov.f32	s1, s14
 800718c:	eeb0 0a67 	vmov.f32	s0, s15
 8007190:	f000 f830 	bl	80071f4 <_ProcessSignalDataTable>


}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	2000017c 	.word	0x2000017c

080071a0 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80071aa:	79fa      	ldrb	r2, [r7, #7]
 80071ac:	4613      	mov	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <VPP_ApplyProfileToAux+0x50>)
 80071b6:	4413      	add	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80071ba:	2001      	movs	r0, #1
 80071bc:	f7ff fc8c 	bl	8006ad8 <SM_GetOutputChannel>
 80071c0:	4602      	mov	r2, r0
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8b1b      	ldrh	r3, [r3, #24]
 80071d8:	4618      	mov	r0, r3
 80071da:	eef0 0a47 	vmov.f32	s1, s14
 80071de:	eeb0 0a67 	vmov.f32	s0, s15
 80071e2:	f000 f88d 	bl	8007300 <_ProcessAuxDataTable>



}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	2000017c 	.word	0x2000017c

080071f4 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80071fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8007202:	4603      	mov	r3, r0
 8007204:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8007206:	2000      	movs	r0, #0
 8007208:	f7ff fc66 	bl	8006ad8 <SM_GetOutputChannel>
 800720c:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b06      	cmp	r3, #6
 8007218:	d06b      	beq.n	80072f2 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800721a:	2300      	movs	r3, #0
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	e00c      	b.n	800723a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4933      	ldr	r1, [pc, #204]	; (80072fc <_ProcessSignalDataTable+0x108>)
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	3301      	adds	r3, #1
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	2b77      	cmp	r3, #119	; 0x77
 800723e:	ddef      	ble.n	8007220 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007240:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007244:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	089b      	lsrs	r3, r3, #2
 8007250:	b29b      	uxth	r3, r3
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800725a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	e02e      	b.n	80072c2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007264:	4a25      	ldr	r2, [pc, #148]	; (80072fc <_ProcessSignalDataTable+0x108>)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007274:	edd7 7a03 	vldr	s15, [r7, #12]
 8007278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007280:	ee17 1a90 	vmov	r1, s15
 8007284:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <_ProcessSignalDataTable+0x108>)
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <_ProcessSignalDataTable+0x108>)
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800729c:	edd7 7a08 	vldr	s15, [r7, #32]
 80072a0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80072a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b0:	ee17 1a90 	vmov	r1, s15
 80072b4:	4a11      	ldr	r2, [pc, #68]	; (80072fc <_ProcessSignalDataTable+0x108>)
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b77      	cmp	r3, #119	; 0x77
 80072c6:	ddcd      	ble.n	8007264 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e00e      	b.n	80072ec <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7ff fc02 	bl	8006ad8 <SM_GetOutputChannel>
 80072d4:	4601      	mov	r1, r0
 80072d6:	4a09      	ldr	r2, [pc, #36]	; (80072fc <_ProcessSignalDataTable+0x108>)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3302      	adds	r3, #2
 80072e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b77      	cmp	r3, #119	; 0x77
 80072f0:	dded      	ble.n	80072ce <_ProcessSignalDataTable+0xda>
		}
	}

}
 80072f2:	bf00      	nop
 80072f4:	3728      	adds	r7, #40	; 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20002388 	.word	0x20002388

08007300 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	ed87 0a03 	vstr	s0, [r7, #12]
 800730a:	edc7 0a02 	vstr	s1, [r7, #8]
 800730e:	4603      	mov	r3, r0
 8007310:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8007312:	2001      	movs	r0, #1
 8007314:	f7ff fbe0 	bl	8006ad8 <SM_GetOutputChannel>
 8007318:	4603      	mov	r3, r0
 800731a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d059      	beq.n	80073d8 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e00f      	b.n	800734a <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 800732a:	2001      	movs	r0, #1
 800732c:	f7ff fbd4 	bl	8006ad8 <SM_GetOutputChannel>
 8007330:	4603      	mov	r3, r0
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4933      	ldr	r1, [pc, #204]	; (800740c <_ProcessAuxDataTable+0x10c>)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b77      	cmp	r3, #119	; 0x77
 800734e:	ddec      	ble.n	800732a <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007350:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007354:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	b29b      	uxth	r3, r3
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800736a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e02e      	b.n	80073d2 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007374:	4a25      	ldr	r2, [pc, #148]	; (800740c <_ProcessAuxDataTable+0x10c>)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007384:	edd7 7a03 	vldr	s15, [r7, #12]
 8007388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007390:	ee17 1a90 	vmov	r1, s15
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <_ProcessAuxDataTable+0x10c>)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <_ProcessAuxDataTable+0x10c>)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80073b0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80073b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c0:	ee17 1a90 	vmov	r1, s15
 80073c4:	4a11      	ldr	r2, [pc, #68]	; (800740c <_ProcessAuxDataTable+0x10c>)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	3301      	adds	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b77      	cmp	r3, #119	; 0x77
 80073d6:	ddcd      	ble.n	8007374 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	e00e      	b.n	80073fc <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80073de:	2001      	movs	r0, #1
 80073e0:	f7ff fb7a 	bl	8006ad8 <SM_GetOutputChannel>
 80073e4:	4601      	mov	r1, r0
 80073e6:	4a09      	ldr	r2, [pc, #36]	; (800740c <_ProcessAuxDataTable+0x10c>)
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3302      	adds	r3, #2
 80073f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b77      	cmp	r3, #119	; 0x77
 8007400:	dded      	ble.n	80073de <_ProcessAuxDataTable+0xde>
	}
}
 8007402:	bf00      	nop
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20002388 	.word	0x20002388

08007410 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800741a:	2000      	movs	r0, #0
 800741c:	f7ff fb5c 	bl	8006ad8 <SM_GetOutputChannel>
 8007420:	4603      	mov	r3, r0
 8007422:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	429a      	cmp	r2, r3
 8007432:	d90c      	bls.n	800744e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	3301      	adds	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b61      	cmp	r3, #97	; 0x61
 800743e:	d901      	bls.n	8007444 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8007440:	2361      	movs	r3, #97	; 0x61
 8007442:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fe7c 	bl	8007144 <VPP_ApplyProfileToSignal>
 800744c:	e010      	b.n	8007470 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800744e:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	88fa      	ldrh	r2, [r7, #6]
 8007454:	429a      	cmp	r2, r3
 8007456:	d20b      	bcs.n	8007470 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	3b01      	subs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b61      	cmp	r3, #97	; 0x61
 8007462:	d901      	bls.n	8007468 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fe6a 	bl	8007144 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007470:	4a03      	ldr	r2, [pc, #12]	; (8007480 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	8013      	strh	r3, [r2, #0]

}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20001e9e 	.word	0x20001e9e

08007484 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800748e:	2001      	movs	r0, #1
 8007490:	f7ff fb22 	bl	8006ad8 <SM_GetOutputChannel>
 8007494:	4603      	mov	r3, r0
 8007496:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d90c      	bls.n	80074c2 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	3301      	adds	r3, #1
 80074ac:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b61      	cmp	r3, #97	; 0x61
 80074b2:	d901      	bls.n	80074b8 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80074b4:	2361      	movs	r3, #97	; 0x61
 80074b6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fe70 	bl	80071a0 <VPP_ApplyProfileToAux>
 80074c0:	e010      	b.n	80074e4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	88fa      	ldrh	r2, [r7, #6]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d20b      	bcs.n	80074e4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b61      	cmp	r3, #97	; 0x61
 80074d6:	d901      	bls.n	80074dc <VPP_MapEncoderPositionToAuxOutput+0x58>
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fe5e 	bl	80071a0 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80074e4:	4a03      	ldr	r2, [pc, #12]	; (80074f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	8013      	strh	r3, [r2, #0]

}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20001e9e 	.word	0x20001e9e

080074f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	; 0x30
 80074fc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80074fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	2220      	movs	r2, #32
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f009 ffeb 	bl	80114ec <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007516:	4b32      	ldr	r3, [pc, #200]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800751c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800751e:	4b30      	ldr	r3, [pc, #192]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007520:	2200      	movs	r2, #0
 8007522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007524:	4b2e      	ldr	r3, [pc, #184]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800752a:	4b2d      	ldr	r3, [pc, #180]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800752c:	2200      	movs	r2, #0
 800752e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007530:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007532:	2200      	movs	r2, #0
 8007534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007536:	4b2a      	ldr	r3, [pc, #168]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007538:	2200      	movs	r2, #0
 800753a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800753c:	4b28      	ldr	r3, [pc, #160]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800753e:	2204      	movs	r2, #4
 8007540:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007542:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800754a:	2201      	movs	r2, #1
 800754c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007550:	2201      	movs	r2, #1
 8007552:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007554:	4b22      	ldr	r3, [pc, #136]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800755c:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800755e:	2200      	movs	r2, #0
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007562:	4b1f      	ldr	r3, [pc, #124]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007570:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007576:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007578:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007580:	4817      	ldr	r0, [pc, #92]	; (80075e0 <MX_ADC1_Init+0xe8>)
 8007582:	f002 f875 	bl	8009670 <HAL_ADC_Init>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800758c:	f000 fea2 	bl	80082d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007590:	2300      	movs	r3, #0
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007598:	4619      	mov	r1, r3
 800759a:	4811      	ldr	r0, [pc, #68]	; (80075e0 <MX_ADC1_Init+0xe8>)
 800759c:	f002 ff6c 	bl	800a478 <HAL_ADCEx_MultiModeConfigChannel>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80075a6:	f000 fe95 	bl	80082d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80075aa:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <MX_ADC1_Init+0xec>)
 80075ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80075ae:	2306      	movs	r3, #6
 80075b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80075b6:	237f      	movs	r3, #127	; 0x7f
 80075b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80075ba:	2304      	movs	r3, #4
 80075bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4806      	ldr	r0, [pc, #24]	; (80075e0 <MX_ADC1_Init+0xe8>)
 80075c8:	f002 fa74 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80075d2:	f000 fe7f 	bl	80082d4 <Error_Handler>
  }

}
 80075d6:	bf00      	nop
 80075d8:	3730      	adds	r7, #48	; 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20002568 	.word	0x20002568
 80075e4:	0c900008 	.word	0x0c900008

080075e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	609a      	str	r2, [r3, #8]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007608:	d14f      	bne.n	80076aa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800760a:	4b2a      	ldr	r3, [pc, #168]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760e:	4a29      	ldr	r2, [pc, #164]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 8007610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007616:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	4a23      	ldr	r2, [pc, #140]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800762e:	4b21      	ldr	r3, [pc, #132]	; (80076b4 <HAL_ADC_MspInit+0xcc>)
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800763a:	2304      	movs	r3, #4
 800763c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800763e:	2303      	movs	r3, #3
 8007640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007646:	f107 0314 	add.w	r3, r7, #20
 800764a:	4619      	mov	r1, r3
 800764c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007650:	f004 fc6c 	bl	800bf2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007656:	4a19      	ldr	r2, [pc, #100]	; (80076bc <HAL_ADC_MspInit+0xd4>)
 8007658:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 800765c:	2205      	movs	r2, #5
 800765e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007668:	2200      	movs	r2, #0
 800766a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800766c:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007678:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 800767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007680:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007684:	2220      	movs	r2, #32
 8007686:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 800768a:	2200      	movs	r2, #0
 800768c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800768e:	480a      	ldr	r0, [pc, #40]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 8007690:	f004 f91a 	bl	800b8c8 <HAL_DMA_Init>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800769a:	f000 fe1b 	bl	80082d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a05      	ldr	r2, [pc, #20]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
 80076a4:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <HAL_ADC_MspInit+0xd0>)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80076aa:	bf00      	nop
 80076ac:	3728      	adds	r7, #40	; 0x28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40021000 	.word	0x40021000
 80076b8:	200025d4 	.word	0x200025d4
 80076bc:	40020008 	.word	0x40020008

080076c0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80076c4:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <MX_COMP1_Init+0x44>)
 80076c6:	4a10      	ldr	r2, [pc, #64]	; (8007708 <MX_COMP1_Init+0x48>)
 80076c8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <MX_COMP1_Init+0x44>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <MX_COMP1_Init+0x44>)
 80076d2:	4a0e      	ldr	r2, [pc, #56]	; (800770c <MX_COMP1_Init+0x4c>)
 80076d4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <MX_COMP1_Init+0x44>)
 80076d8:	2200      	movs	r2, #0
 80076da:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <MX_COMP1_Init+0x44>)
 80076de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80076e2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <MX_COMP1_Init+0x44>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <MX_COMP1_Init+0x44>)
 80076ec:	2231      	movs	r2, #49	; 0x31
 80076ee:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80076f0:	4804      	ldr	r0, [pc, #16]	; (8007704 <MX_COMP1_Init+0x44>)
 80076f2:	f003 f941 	bl	800a978 <HAL_COMP_Init>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80076fc:	f000 fdea 	bl	80082d4 <Error_Handler>
  }

}
 8007700:	bf00      	nop
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20002634 	.word	0x20002634
 8007708:	40010200 	.word	0x40010200
 800770c:	00800030 	.word	0x00800030

08007710 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <HAL_COMP_MspInit+0x6c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d120      	bne.n	8007774 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <HAL_COMP_MspInit+0x70>)
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	4a12      	ldr	r2, [pc, #72]	; (8007780 <HAL_COMP_MspInit+0x70>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <HAL_COMP_MspInit+0x70>)
 8007740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	60bb      	str	r3, [r7, #8]
 8007748:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800774a:	2302      	movs	r3, #2
 800774c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800774e:	2303      	movs	r3, #3
 8007750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007760:	f004 fbe4 	bl	800bf2c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	2040      	movs	r0, #64	; 0x40
 800776a:	f003 fc4c 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800776e:	2040      	movs	r0, #64	; 0x40
 8007770:	f003 fc63 	bl	800b03a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007774:	bf00      	nop
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40010200 	.word	0x40010200
 8007780:	40021000 	.word	0x40021000

08007784 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800778a:	463b      	mov	r3, r7
 800778c:	2230      	movs	r2, #48	; 0x30
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f009 feab 	bl	80114ec <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007796:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <MX_DAC1_Init+0x8c>)
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <MX_DAC1_Init+0x90>)
 800779a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800779c:	481c      	ldr	r0, [pc, #112]	; (8007810 <MX_DAC1_Init+0x8c>)
 800779e:	f003 fc74 	bl	800b08a <HAL_DAC_Init>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80077a8:	f000 fd94 	bl	80082d4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80077ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077b0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80077be:	2306      	movs	r3, #6
 80077c0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80077d2:	463b      	mov	r3, r7
 80077d4:	2200      	movs	r2, #0
 80077d6:	4619      	mov	r1, r3
 80077d8:	480d      	ldr	r0, [pc, #52]	; (8007810 <MX_DAC1_Init+0x8c>)
 80077da:	f003 fe3f 	bl	800b45c <HAL_DAC_ConfigChannel>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80077e4:	f000 fd76 	bl	80082d4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80077f0:	463b      	mov	r3, r7
 80077f2:	2210      	movs	r2, #16
 80077f4:	4619      	mov	r1, r3
 80077f6:	4806      	ldr	r0, [pc, #24]	; (8007810 <MX_DAC1_Init+0x8c>)
 80077f8:	f003 fe30 	bl	800b45c <HAL_DAC_ConfigChannel>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007802:	f000 fd67 	bl	80082d4 <Error_Handler>
  }

}
 8007806:	bf00      	nop
 8007808:	3730      	adds	r7, #48	; 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	2000266c 	.word	0x2000266c
 8007814:	50000800 	.word	0x50000800

08007818 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800781e:	463b      	mov	r3, r7
 8007820:	2230      	movs	r2, #48	; 0x30
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f009 fe61 	bl	80114ec <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800782a:	4b16      	ldr	r3, [pc, #88]	; (8007884 <MX_DAC2_Init+0x6c>)
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <MX_DAC2_Init+0x70>)
 800782e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007830:	4814      	ldr	r0, [pc, #80]	; (8007884 <MX_DAC2_Init+0x6c>)
 8007832:	f003 fc2a 	bl	800b08a <HAL_DAC_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800783c:	f000 fd4a 	bl	80082d4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007844:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007846:	2300      	movs	r3, #0
 8007848:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800784a:	2300      	movs	r3, #0
 800784c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800784e:	2300      	movs	r3, #0
 8007850:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007852:	2306      	movs	r3, #6
 8007854:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800785e:	2301      	movs	r3, #1
 8007860:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007862:	2300      	movs	r3, #0
 8007864:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007866:	463b      	mov	r3, r7
 8007868:	2200      	movs	r2, #0
 800786a:	4619      	mov	r1, r3
 800786c:	4805      	ldr	r0, [pc, #20]	; (8007884 <MX_DAC2_Init+0x6c>)
 800786e:	f003 fdf5 	bl	800b45c <HAL_DAC_ConfigChannel>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007878:	f000 fd2c 	bl	80082d4 <Error_Handler>
  }

}
 800787c:	bf00      	nop
 800787e:	3730      	adds	r7, #48	; 0x30
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20002658 	.word	0x20002658
 8007888:	50000c00 	.word	0x50000c00

0800788c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	; 0x30
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007894:	f107 031c 	add.w	r3, r7, #28
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	609a      	str	r2, [r3, #8]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a56      	ldr	r2, [pc, #344]	; (8007a04 <HAL_DAC_MspInit+0x178>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d150      	bne.n	8007950 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80078ae:	4b56      	ldr	r3, [pc, #344]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b2:	4a55      	ldr	r2, [pc, #340]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078ba:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078c6:	4b50      	ldr	r3, [pc, #320]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	4a4f      	ldr	r2, [pc, #316]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078d2:	4b4d      	ldr	r3, [pc, #308]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80078de:	2330      	movs	r3, #48	; 0x30
 80078e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078e2:	2303      	movs	r3, #3
 80078e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ea:	f107 031c 	add.w	r3, r7, #28
 80078ee:	4619      	mov	r1, r3
 80078f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078f4:	f004 fb1a 	bl	800bf2c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80078f8:	4b44      	ldr	r3, [pc, #272]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 80078fa:	4a45      	ldr	r2, [pc, #276]	; (8007a10 <HAL_DAC_MspInit+0x184>)
 80078fc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80078fe:	4b43      	ldr	r3, [pc, #268]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007900:	2206      	movs	r2, #6
 8007902:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007904:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007906:	2210      	movs	r2, #16
 8007908:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800790a:	4b40      	ldr	r3, [pc, #256]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 800790c:	2200      	movs	r2, #0
 800790e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007910:	4b3e      	ldr	r3, [pc, #248]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007912:	2280      	movs	r2, #128	; 0x80
 8007914:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007916:	4b3d      	ldr	r3, [pc, #244]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800791e:	4b3b      	ldr	r3, [pc, #236]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007924:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007928:	2220      	movs	r2, #32
 800792a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800792c:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 800792e:	2200      	movs	r2, #0
 8007930:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007932:	4836      	ldr	r0, [pc, #216]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007934:	f003 ffc8 	bl	800b8c8 <HAL_DMA_Init>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800793e:	f000 fcc9 	bl	80082d4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a31      	ldr	r2, [pc, #196]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	4a30      	ldr	r2, [pc, #192]	; (8007a0c <HAL_DAC_MspInit+0x180>)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800794e:	e054      	b.n	80079fa <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a2f      	ldr	r2, [pc, #188]	; (8007a14 <HAL_DAC_MspInit+0x188>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d14f      	bne.n	80079fa <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800795a:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	4a2a      	ldr	r2, [pc, #168]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 8007960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007966:	4b28      	ldr	r3, [pc, #160]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007972:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	4a24      	ldr	r2, [pc, #144]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <HAL_DAC_MspInit+0x17c>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800798e:	2303      	movs	r3, #3
 8007990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007992:	2300      	movs	r3, #0
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007996:	f107 031c 	add.w	r3, r7, #28
 800799a:	4619      	mov	r1, r3
 800799c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079a0:	f004 fac4 	bl	800bf2c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80079a4:	4b1c      	ldr	r3, [pc, #112]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079a6:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <HAL_DAC_MspInit+0x190>)
 80079a8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079ac:	2229      	movs	r2, #41	; 0x29
 80079ae:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80079b0:	4b19      	ldr	r3, [pc, #100]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079b2:	2210      	movs	r2, #16
 80079b4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80079b6:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80079bc:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079be:	2280      	movs	r2, #128	; 0x80
 80079c0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079ca:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079d0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80079d2:	4b11      	ldr	r3, [pc, #68]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079d4:	2220      	movs	r2, #32
 80079d6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80079d8:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079da:	2200      	movs	r2, #0
 80079dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80079de:	480e      	ldr	r0, [pc, #56]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079e0:	f003 ff72 	bl	800b8c8 <HAL_DMA_Init>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80079ea:	f000 fc73 	bl	80082d4 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	4a08      	ldr	r2, [pc, #32]	; (8007a18 <HAL_DAC_MspInit+0x18c>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80079fa:	bf00      	nop
 80079fc:	3730      	adds	r7, #48	; 0x30
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	50000800 	.word	0x50000800
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	20001eb4 	.word	0x20001eb4
 8007a10:	4002001c 	.word	0x4002001c
 8007a14:	50000c00 	.word	0x50000c00
 8007a18:	20002680 	.word	0x20002680
 8007a1c:	40020030 	.word	0x40020030

08007a20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a2c:	f043 0304 	orr.w	r3, r3, #4
 8007a30:	6493      	str	r3, [r2, #72]	; 0x48
 8007a32:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	f003 0304 	and.w	r3, r3, #4
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	4a17      	ldr	r2, [pc, #92]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6493      	str	r3, [r2, #72]	; 0x48
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <MX_DMA_Init+0x80>)
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007a56:	2200      	movs	r2, #0
 8007a58:	2101      	movs	r1, #1
 8007a5a:	200b      	movs	r0, #11
 8007a5c:	f003 fad3 	bl	800b006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007a60:	200b      	movs	r0, #11
 8007a62:	f003 faea 	bl	800b03a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	200c      	movs	r0, #12
 8007a6c:	f003 facb 	bl	800b006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007a70:	200c      	movs	r0, #12
 8007a72:	f003 fae2 	bl	800b03a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	200d      	movs	r0, #13
 8007a7c:	f003 fac3 	bl	800b006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007a80:	200d      	movs	r0, #13
 8007a82:	f003 fada 	bl	800b03a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	200e      	movs	r0, #14
 8007a8c:	f003 fabb 	bl	800b006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007a90:	200e      	movs	r0, #14
 8007a92:	f003 fad2 	bl	800b03a <HAL_NVIC_EnableIRQ>

}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40021000 	.word	0x40021000

08007aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <__NVIC_GetPriorityGrouping+0x18>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	f003 0307 	and.w	r3, r3, #7
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	db0b      	blt.n	8007aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	f003 021f 	and.w	r2, r3, #31
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <__NVIC_EnableIRQ+0x38>)
 8007ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e100 	.word	0xe000e100

08007afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db0a      	blt.n	8007b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	490c      	ldr	r1, [pc, #48]	; (8007b48 <__NVIC_SetPriority+0x4c>)
 8007b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1a:	0112      	lsls	r2, r2, #4
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	440b      	add	r3, r1
 8007b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b24:	e00a      	b.n	8007b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4908      	ldr	r1, [pc, #32]	; (8007b4c <__NVIC_SetPriority+0x50>)
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	3b04      	subs	r3, #4
 8007b34:	0112      	lsls	r2, r2, #4
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	440b      	add	r3, r1
 8007b3a:	761a      	strb	r2, [r3, #24]
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	e000e100 	.word	0xe000e100
 8007b4c:	e000ed00 	.word	0xe000ed00

08007b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b089      	sub	sp, #36	; 0x24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f1c3 0307 	rsb	r3, r3, #7
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf28      	it	cs
 8007b6e:	2304      	movcs	r3, #4
 8007b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3304      	adds	r3, #4
 8007b76:	2b06      	cmp	r3, #6
 8007b78:	d902      	bls.n	8007b80 <NVIC_EncodePriority+0x30>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3b03      	subs	r3, #3
 8007b7e:	e000      	b.n	8007b82 <NVIC_EncodePriority+0x32>
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	401a      	ands	r2, r3
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	43d9      	mvns	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba8:	4313      	orrs	r3, r2
         );
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007bc2:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	3302      	adds	r3, #2
 8007bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	ea02 0103 	and.w	r1, r2, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	fa93 f3a3 	rbit	r3, r3
 8007be6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	fab3 f383 	clz	r3, r3
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	4806      	ldr	r0, [pc, #24]	; (8007c14 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	430a      	orrs	r2, r1
 8007c02:	3302      	adds	r3, #2
 8007c04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	40010000 	.word	0x40010000

08007c18 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b089      	sub	sp, #36	; 0x24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	fa93 f3a3 	rbit	r3, r3
 8007c32:	613b      	str	r3, [r7, #16]
  return result;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	fab3 f383 	clz	r3, r3
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	2103      	movs	r1, #3
 8007c40:	fa01 f303 	lsl.w	r3, r1, r3
 8007c44:	43db      	mvns	r3, r3
 8007c46:	401a      	ands	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	fa93 f3a3 	rbit	r3, r3
 8007c52:	61bb      	str	r3, [r7, #24]
  return result;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	fab3 f383 	clz	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	3724      	adds	r7, #36	; 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b089      	sub	sp, #36	; 0x24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	fa93 f3a3 	rbit	r3, r3
 8007c90:	613b      	str	r3, [r7, #16]
  return result;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	fab3 f383 	clz	r3, r3
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	2103      	movs	r1, #3
 8007c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca2:	43db      	mvns	r3, r3
 8007ca4:	401a      	ands	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa93 f3a3 	rbit	r3, r3
 8007cb0:	61bb      	str	r3, [r7, #24]
  return result;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	fab3 f383 	clz	r3, r3
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	60da      	str	r2, [r3, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	3724      	adds	r7, #36	; 0x24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cfc:	4907      	ldr	r1, [pc, #28]	; (8007d1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	40021000 	.word	0x40021000

08007d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007d26:	f107 031c 	add.w	r3, r7, #28
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	605a      	str	r2, [r3, #4]
 8007d30:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
 8007d3e:	611a      	str	r2, [r3, #16]
 8007d40:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007d42:	2004      	movs	r0, #4
 8007d44:	f7ff ffd4 	bl	8007cf0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007d48:	2020      	movs	r0, #32
 8007d4a:	f7ff ffd1 	bl	8007cf0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f7ff ffce 	bl	8007cf0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007d54:	2002      	movs	r0, #2
 8007d56:	f7ff ffcb 	bl	8007cf0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007d5a:	2108      	movs	r1, #8
 8007d5c:	48d3      	ldr	r0, [pc, #844]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007d5e:	f7ff ffb9 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007d62:	2108      	movs	r1, #8
 8007d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d68:	f7ff ffb4 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007d6c:	2110      	movs	r1, #16
 8007d6e:	48cf      	ldr	r0, [pc, #828]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007d70:	f7ff ffb0 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007d74:	2120      	movs	r1, #32
 8007d76:	48cd      	ldr	r0, [pc, #820]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007d78:	f7ff ffac 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	48cc      	ldr	r0, [pc, #816]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007d80:	f7ff ffa8 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d88:	48c8      	ldr	r0, [pc, #800]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007d8a:	f7ff ffa3 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d92:	48c6      	ldr	r0, [pc, #792]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007d94:	f7ff ff9e 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007d98:	2140      	movs	r1, #64	; 0x40
 8007d9a:	48c5      	ldr	r0, [pc, #788]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007d9c:	f7ff ff9a 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	48c3      	ldr	r0, [pc, #780]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007da4:	f7ff ff96 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dac:	48c0      	ldr	r0, [pc, #768]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007dae:	f7ff ff91 	bl	8007cd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007db2:	49c0      	ldr	r1, [pc, #768]	; (80080b4 <MX_GPIO_Init+0x394>)
 8007db4:	2002      	movs	r0, #2
 8007db6:	f7ff feff 	bl	8007bb8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007dba:	49bf      	ldr	r1, [pc, #764]	; (80080b8 <MX_GPIO_Init+0x398>)
 8007dbc:	2002      	movs	r0, #2
 8007dbe:	f7ff fefb 	bl	8007bb8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007dc2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007dc6:	2005      	movs	r0, #5
 8007dc8:	f7ff fef6 	bl	8007bb8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007dcc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007dd0:	2005      	movs	r0, #5
 8007dd2:	f7ff fef1 	bl	8007bb8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007dd6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007dda:	2002      	movs	r0, #2
 8007ddc:	f7ff feec 	bl	8007bb8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007de4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007dec:	2300      	movs	r3, #0
 8007dee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007df2:	2302      	movs	r3, #2
 8007df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007df8:	f107 031c 	add.w	r3, r7, #28
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f008 f893 	bl	800ff28 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e06:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e14:	2302      	movs	r3, #2
 8007e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e1a:	f107 031c 	add.w	r3, r7, #28
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f008 f882 	bl	800ff28 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007e24:	2301      	movs	r3, #1
 8007e26:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e34:	2302      	movs	r3, #2
 8007e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e3a:	f107 031c 	add.w	r3, r7, #28
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f008 f872 	bl	800ff28 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007e44:	2302      	movs	r3, #2
 8007e46:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e54:	2302      	movs	r3, #2
 8007e56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e5a:	f107 031c 	add.w	r3, r7, #28
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f008 f862 	bl	800ff28 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007e64:	2304      	movs	r3, #4
 8007e66:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e74:	2302      	movs	r3, #2
 8007e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e7a:	f107 031c 	add.w	r3, r7, #28
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f008 f852 	bl	800ff28 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007e84:	2201      	movs	r2, #1
 8007e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e8a:	4888      	ldr	r0, [pc, #544]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007e8c:	f7ff fef3 	bl	8007c76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007e90:	2201      	movs	r2, #1
 8007e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e96:	4885      	ldr	r0, [pc, #532]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007e98:	f7ff feed 	bl	8007c76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	4886      	ldr	r0, [pc, #536]	; (80080bc <MX_GPIO_Init+0x39c>)
 8007ea2:	f7ff fee8 	bl	8007c76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	4884      	ldr	r0, [pc, #528]	; (80080bc <MX_GPIO_Init+0x39c>)
 8007eac:	f7ff fee3 	bl	8007c76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2104      	movs	r1, #4
 8007eb4:	487d      	ldr	r0, [pc, #500]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007eb6:	f7ff fede 	bl	8007c76 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ec0:	487a      	ldr	r0, [pc, #488]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007ec2:	f7ff fea9 	bl	8007c18 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ecc:	4877      	ldr	r0, [pc, #476]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007ece:	f7ff fea3 	bl	8007c18 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4879      	ldr	r0, [pc, #484]	; (80080bc <MX_GPIO_Init+0x39c>)
 8007ed8:	f7ff fe9e 	bl	8007c18 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2102      	movs	r1, #2
 8007ee0:	4876      	ldr	r0, [pc, #472]	; (80080bc <MX_GPIO_Init+0x39c>)
 8007ee2:	f7ff fe99 	bl	8007c18 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2104      	movs	r1, #4
 8007eea:	4870      	ldr	r0, [pc, #448]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007eec:	f7ff fe94 	bl	8007c18 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007ef0:	2308      	movs	r3, #8
 8007ef2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007f00:	2302      	movs	r3, #2
 8007f02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	4619      	mov	r1, r3
 8007f08:	4868      	ldr	r0, [pc, #416]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007f0a:	f008 fa00 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007f0e:	2308      	movs	r3, #8
 8007f10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f12:	2301      	movs	r3, #1
 8007f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f2a:	f008 f9f0 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007f2e:	2310      	movs	r3, #16
 8007f30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f32:	2301      	movs	r3, #1
 8007f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007f42:	1d3b      	adds	r3, r7, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4859      	ldr	r0, [pc, #356]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007f48:	f008 f9e1 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f50:	2301      	movs	r3, #1
 8007f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007f60:	1d3b      	adds	r3, r7, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4851      	ldr	r0, [pc, #324]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007f66:	f008 f9d2 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	484b      	ldr	r0, [pc, #300]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007f84:	f008 f9c3 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4842      	ldr	r0, [pc, #264]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007fa4:	f008 f9b3 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	483a      	ldr	r0, [pc, #232]	; (80080ac <MX_GPIO_Init+0x38c>)
 8007fc4:	f008 f9a3 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4833      	ldr	r0, [pc, #204]	; (80080b0 <MX_GPIO_Init+0x390>)
 8007fe2:	f008 f994 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fea:	2301      	movs	r3, #1
 8007fec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	482c      	ldr	r0, [pc, #176]	; (80080b0 <MX_GPIO_Init+0x390>)
 8008000:	f008 f985 	bl	801030e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8008004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800800a:	2301      	movs	r3, #1
 800800c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800800e:	2303      	movs	r3, #3
 8008010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4824      	ldr	r0, [pc, #144]	; (80080b0 <MX_GPIO_Init+0x390>)
 8008020:	f008 f975 	bl	801030e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008024:	f7ff fd3e 	bl	8007aa4 <__NVIC_GetPriorityGrouping>
 8008028:	4603      	mov	r3, r0
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fd8e 	bl	8007b50 <NVIC_EncodePriority>
 8008034:	4603      	mov	r3, r0
 8008036:	4619      	mov	r1, r3
 8008038:	2006      	movs	r0, #6
 800803a:	f7ff fd5f 	bl	8007afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800803e:	2006      	movs	r0, #6
 8008040:	f7ff fd3e 	bl	8007ac0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008044:	f7ff fd2e 	bl	8007aa4 <__NVIC_GetPriorityGrouping>
 8008048:	4603      	mov	r3, r0
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fd7e 	bl	8007b50 <NVIC_EncodePriority>
 8008054:	4603      	mov	r3, r0
 8008056:	4619      	mov	r1, r3
 8008058:	2007      	movs	r0, #7
 800805a:	f7ff fd4f 	bl	8007afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800805e:	2007      	movs	r0, #7
 8008060:	f7ff fd2e 	bl	8007ac0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008064:	f7ff fd1e 	bl	8007aa4 <__NVIC_GetPriorityGrouping>
 8008068:	4603      	mov	r3, r0
 800806a:	2200      	movs	r2, #0
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fd6e 	bl	8007b50 <NVIC_EncodePriority>
 8008074:	4603      	mov	r3, r0
 8008076:	4619      	mov	r1, r3
 8008078:	2008      	movs	r0, #8
 800807a:	f7ff fd3f 	bl	8007afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800807e:	2008      	movs	r0, #8
 8008080:	f7ff fd1e 	bl	8007ac0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008084:	f7ff fd0e 	bl	8007aa4 <__NVIC_GetPriorityGrouping>
 8008088:	4603      	mov	r3, r0
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fd5e 	bl	8007b50 <NVIC_EncodePriority>
 8008094:	4603      	mov	r3, r0
 8008096:	4619      	mov	r1, r3
 8008098:	2028      	movs	r0, #40	; 0x28
 800809a:	f7ff fd2f 	bl	8007afc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800809e:	2028      	movs	r0, #40	; 0x28
 80080a0:	f7ff fd0e 	bl	8007ac0 <__NVIC_EnableIRQ>

}
 80080a4:	bf00      	nop
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	e009      	b.n	80080c0 <MX_GPIO_Init+0x3a0>
 80080ac:	48000800 	.word	0x48000800
 80080b0:	48000400 	.word	0x48000400
 80080b4:	0f000003 	.word	0x0f000003
 80080b8:	f0000003 	.word	0xf0000003
 80080bc:	48001400 	.word	0x48001400
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop

080080c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80080cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d013      	beq.n	8008104 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80080dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80080e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80080ec:	e000      	b.n	80080f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80080ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80080f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f9      	beq.n	80080ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80080fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008104:	687b      	ldr	r3, [r7, #4]
}
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
  int i=0;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e009      	b.n	800813c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	60ba      	str	r2, [r7, #8]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff ffc7 	bl	80080c4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	3301      	adds	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	dbf1      	blt.n	8008128 <_write+0x16>
  return len;
 8008144:	687b      	ldr	r3, [r7, #4]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008154:	f000 ffe9 	bl	800912a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008158:	f000 f84e 	bl	80081f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800815c:	f7ff fde0 	bl	8007d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8008160:	f7ff fc5e 	bl	8007a20 <MX_DMA_Init>
  MX_DAC1_Init();
 8008164:	f7ff fb0e 	bl	8007784 <MX_DAC1_Init>
  MX_ADC1_Init();
 8008168:	f7ff f9c6 	bl	80074f8 <MX_ADC1_Init>
  MX_COMP1_Init();
 800816c:	f7ff faa8 	bl	80076c0 <MX_COMP1_Init>
  MX_SPI3_Init();
 8008170:	f000 f8ee 	bl	8008350 <MX_SPI3_Init>
  MX_RNG_Init();
 8008174:	f000 f8de 	bl	8008334 <MX_RNG_Init>
  MX_TIM1_Init();
 8008178:	f000 fb5c 	bl	8008834 <MX_TIM1_Init>
  MX_TIM8_Init();
 800817c:	f000 fd2a 	bl	8008bd4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8008180:	f000 fde2 	bl	8008d48 <MX_TIM16_Init>
  MX_TIM15_Init();
 8008184:	f000 fd8e 	bl	8008ca4 <MX_TIM15_Init>
  MX_TIM5_Init();
 8008188:	f000 fcd6 	bl	8008b38 <MX_TIM5_Init>
  MX_TIM3_Init();
 800818c:	f000 fc38 	bl	8008a00 <MX_TIM3_Init>
  MX_DAC2_Init();
 8008190:	f7ff fb42 	bl	8007818 <MX_DAC2_Init>
  MX_TIM17_Init();
 8008194:	f000 fe00 	bl	8008d98 <MX_TIM17_Init>
  MX_TIM2_Init();
 8008198:	f000 fbbc 	bl	8008914 <MX_TIM2_Init>
  MX_TIM4_Init();
 800819c:	f000 fc7e 	bl	8008a9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80081a0:	f7fe fb86 	bl	80068b0 <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 80081a4:	4810      	ldr	r0, [pc, #64]	; (80081e8 <main+0x98>)
 80081a6:	f005 fa75 	bl	800d694 <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80081aa:	2200      	movs	r2, #0
 80081ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081b0:	480e      	ldr	r0, [pc, #56]	; (80081ec <main+0x9c>)
 80081b2:	f004 f91f 	bl	800c3f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80081b6:	2200      	movs	r2, #0
 80081b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081bc:	480b      	ldr	r0, [pc, #44]	; (80081ec <main+0x9c>)
 80081be:	f004 f919 	bl	800c3f4 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80081c2:	480b      	ldr	r0, [pc, #44]	; (80081f0 <main+0xa0>)
 80081c4:	f005 fa10 	bl	800d5e8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <main+0xa4>)
 80081ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80081d0:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <main+0xa4>)
 80081d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 80081d8:	f7f8 fdca 	bl	8000d70 <DM_Init>
  DM_PostInit();
 80081dc:	f7f8 fdd6 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80081e0:	f7fd f9de 	bl	80055a0 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80081e4:	e7fe      	b.n	80081e4 <main+0x94>
 80081e6:	bf00      	nop
 80081e8:	20002888 	.word	0x20002888
 80081ec:	48000800 	.word	0x48000800
 80081f0:	20002920 	.word	0x20002920
 80081f4:	40001000 	.word	0x40001000

080081f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b0a8      	sub	sp, #160	; 0xa0
 80081fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008202:	2238      	movs	r2, #56	; 0x38
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f009 f970 	bl	80114ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800820c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800821c:	463b      	mov	r3, r7
 800821e:	2254      	movs	r2, #84	; 0x54
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f009 f962 	bl	80114ec <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008228:	2000      	movs	r0, #0
 800822a:	f004 f8fb 	bl	800c424 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800822e:	2322      	movs	r3, #34	; 0x22
 8008230:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008236:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800823c:	2301      	movs	r3, #1
 800823e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008242:	2302      	movs	r3, #2
 8008244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008248:	2302      	movs	r3, #2
 800824a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800824e:	2302      	movs	r3, #2
 8008250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8008254:	232a      	movs	r3, #42	; 0x2a
 8008256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800825a:	2302      	movs	r3, #2
 800825c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8008260:	2304      	movs	r3, #4
 8008262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008266:	2302      	movs	r3, #2
 8008268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800826c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008270:	4618      	mov	r0, r3
 8008272:	f004 f97b 	bl	800c56c <HAL_RCC_OscConfig>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800827c:	f000 f82a 	bl	80082d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008280:	230f      	movs	r3, #15
 8008282:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008284:	2303      	movs	r3, #3
 8008286:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008288:	2300      	movs	r3, #0
 800828a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800828c:	2300      	movs	r3, #0
 800828e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008290:	2300      	movs	r3, #0
 8008292:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008294:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008298:	2108      	movs	r1, #8
 800829a:	4618      	mov	r0, r3
 800829c:	f004 fc7e 	bl	800cb9c <HAL_RCC_ClockConfig>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80082a6:	f000 f815 	bl	80082d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80082aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80082ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80082b0:	2300      	movs	r3, #0
 80082b2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80082b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082ba:	463b      	mov	r3, r7
 80082bc:	4618      	mov	r0, r3
 80082be:	f004 fe5d 	bl	800cf7c <HAL_RCCEx_PeriphCLKConfig>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80082c8:	f000 f804 	bl	80082d4 <Error_Handler>
  }
}
 80082cc:	bf00      	nop
 80082ce:	37a0      	adds	r7, #160	; 0xa0
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082d8:	bf00      	nop
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f043 0204 	orr.w	r2, r3, #4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <LL_AHB2_GRP1_EnableClock>:
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800830c:	4b08      	ldr	r3, [pc, #32]	; (8008330 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800830e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008310:	4907      	ldr	r1, [pc, #28]	; (8008330 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4313      	orrs	r3, r2
 8008316:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008318:	4b05      	ldr	r3, [pc, #20]	; (8008330 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800831a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4013      	ands	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008322:	68fb      	ldr	r3, [r7, #12]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	40021000 	.word	0x40021000

08008334 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8008338:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800833c:	f7ff ffe2 	bl	8008304 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8008340:	4802      	ldr	r0, [pc, #8]	; (800834c <MX_RNG_Init+0x18>)
 8008342:	f7ff ffce 	bl	80082e2 <LL_RNG_Enable>

}
 8008346:	bf00      	nop
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	50060800 	.word	0x50060800

08008350 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008354:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008356:	4a1c      	ldr	r2, [pc, #112]	; (80083c8 <MX_SPI3_Init+0x78>)
 8008358:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800835a:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <MX_SPI3_Init+0x74>)
 800835c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008360:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008364:	2200      	movs	r2, #0
 8008366:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008368:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <MX_SPI3_Init+0x74>)
 800836a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800836e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008370:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008372:	2200      	movs	r2, #0
 8008374:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008378:	2200      	movs	r2, #0
 800837a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <MX_SPI3_Init+0x74>)
 800837e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008382:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008384:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008386:	2210      	movs	r2, #16
 8008388:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <MX_SPI3_Init+0x74>)
 800838c:	2200      	movs	r2, #0
 800838e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008392:	2200      	movs	r2, #0
 8008394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <MX_SPI3_Init+0x74>)
 8008398:	2200      	movs	r2, #0
 800839a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <MX_SPI3_Init+0x74>)
 800839e:	2207      	movs	r2, #7
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <MX_SPI3_Init+0x74>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <MX_SPI3_Init+0x74>)
 80083aa:	2208      	movs	r2, #8
 80083ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <MX_SPI3_Init+0x74>)
 80083b0:	f005 f830 	bl	800d414 <HAL_SPI_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80083ba:	f7ff ff8b 	bl	80082d4 <Error_Handler>
  }

}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	200026e0 	.word	0x200026e0
 80083c8:	40003c00 	.word	0x40003c00

080083cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08a      	sub	sp, #40	; 0x28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d4:	f107 0314 	add.w	r3, r7, #20
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	609a      	str	r2, [r3, #8]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a17      	ldr	r2, [pc, #92]	; (8008448 <HAL_SPI_MspInit+0x7c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d128      	bne.n	8008440 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80083ee:	4b17      	ldr	r3, [pc, #92]	; (800844c <HAL_SPI_MspInit+0x80>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	4a16      	ldr	r2, [pc, #88]	; (800844c <HAL_SPI_MspInit+0x80>)
 80083f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f8:	6593      	str	r3, [r2, #88]	; 0x58
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <HAL_SPI_MspInit+0x80>)
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <HAL_SPI_MspInit+0x80>)
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <HAL_SPI_MspInit+0x80>)
 800840c:	f043 0304 	orr.w	r3, r3, #4
 8008410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008412:	4b0e      	ldr	r3, [pc, #56]	; (800844c <HAL_SPI_MspInit+0x80>)
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800841e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008424:	2302      	movs	r3, #2
 8008426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008428:	2300      	movs	r3, #0
 800842a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800842c:	2300      	movs	r3, #0
 800842e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008430:	2306      	movs	r3, #6
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008434:	f107 0314 	add.w	r3, r7, #20
 8008438:	4619      	mov	r1, r3
 800843a:	4805      	ldr	r0, [pc, #20]	; (8008450 <HAL_SPI_MspInit+0x84>)
 800843c:	f003 fd76 	bl	800bf2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008440:	bf00      	nop
 8008442:	3728      	adds	r7, #40	; 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40003c00 	.word	0x40003c00
 800844c:	40021000 	.word	0x40021000
 8008450:	48000800 	.word	0x48000800

08008454 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4a04      	ldr	r2, [pc, #16]	; (8008470 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800845e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008462:	6093      	str	r3, [r2, #8]
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40007000 	.word	0x40007000

08008474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800847a:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_MspInit+0x44>)
 800847c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800847e:	4a0e      	ldr	r2, [pc, #56]	; (80084b8 <HAL_MspInit+0x44>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	6613      	str	r3, [r2, #96]	; 0x60
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <HAL_MspInit+0x44>)
 8008488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008492:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <HAL_MspInit+0x44>)
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <HAL_MspInit+0x44>)
 8008498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800849c:	6593      	str	r3, [r2, #88]	; 0x58
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <HAL_MspInit+0x44>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80084aa:	f7ff ffd3 	bl	8008454 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40021000 	.word	0x40021000

080084bc <LL_EXTI_IsActiveFlag_0_31>:
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80084c6:	695a      	ldr	r2, [r3, #20]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d101      	bne.n	80084d6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40010400 	.word	0x40010400

080084e8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80084f0:	4a04      	ldr	r2, [pc, #16]	; (8008504 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6153      	str	r3, [r2, #20]
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40010400 	.word	0x40010400

08008508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
	...

08008518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <HardFault_Handler+0xc>)
 800851e:	f7f9 f9e5 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008522:	e7fe      	b.n	8008522 <HardFault_Handler+0xa>
 8008524:	08016504 	.word	0x08016504

08008528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <MemManage_Handler+0xc>)
 800852e:	f7f9 f9dd 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008532:	e7fe      	b.n	8008532 <MemManage_Handler+0xa>
 8008534:	08016510 	.word	0x08016510

08008538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <BusFault_Handler+0xc>)
 800853e:	f7f9 f9d5 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008542:	e7fe      	b.n	8008542 <BusFault_Handler+0xa>
 8008544:	08016520 	.word	0x08016520

08008548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <UsageFault_Handler+0xc>)
 800854e:	f7f9 f9cd 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008552:	e7fe      	b.n	8008552 <UsageFault_Handler+0xa>
 8008554:	0801652c 	.word	0x0801652c

08008558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800855c:	bf00      	nop
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008566:	b480      	push	{r7}
 8008568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800856a:	bf00      	nop
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008586:	f000 fe23 	bl	80091d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}

0800858e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008592:	f7fd f8bd 	bl	8005710 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008596:	2001      	movs	r0, #1
 8008598:	f7ff ff90 	bl	80084bc <LL_EXTI_IsActiveFlag_0_31>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80085a2:	2001      	movs	r0, #1
 80085a4:	f7ff ffa0 	bl	80084e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}

080085ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80085b0:	f7fd f8d4 	bl	800575c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80085b4:	2002      	movs	r0, #2
 80085b6:	f7ff ff81 	bl	80084bc <LL_EXTI_IsActiveFlag_0_31>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80085c0:	2002      	movs	r0, #2
 80085c2:	f7ff ff91 	bl	80084e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80085c6:	bf00      	nop
 80085c8:	bd80      	pop	{r7, pc}

080085ca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80085ce:	f7fd f8eb 	bl	80057a8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80085d2:	2004      	movs	r0, #4
 80085d4:	f7ff ff72 	bl	80084bc <LL_EXTI_IsActiveFlag_0_31>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80085de:	2004      	movs	r0, #4
 80085e0:	f7ff ff82 	bl	80084e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80085e4:	bf00      	nop
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <DMA1_Channel1_IRQHandler+0x10>)
 80085ee:	f003 fb4e 	bl	800bc8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200025d4 	.word	0x200025d4

080085fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008600:	4802      	ldr	r0, [pc, #8]	; (800860c <DMA1_Channel2_IRQHandler+0x10>)
 8008602:	f003 fb44 	bl	800bc8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008606:	bf00      	nop
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20001eb4 	.word	0x20001eb4

08008610 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008614:	4802      	ldr	r0, [pc, #8]	; (8008620 <DMA1_Channel3_IRQHandler+0x10>)
 8008616:	f003 fb3a 	bl	800bc8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20002680 	.word	0x20002680

08008624 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8008628:	4802      	ldr	r0, [pc, #8]	; (8008634 <DMA1_Channel4_IRQHandler+0x10>)
 800862a:	f003 fb30 	bl	800bc8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20002744 	.word	0x20002744

08008638 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 800863c:	f7f8 fbc0 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 8008640:	f7fd f8d8 	bl	80057f4 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008644:	4803      	ldr	r0, [pc, #12]	; (8008654 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8008646:	f005 fdc3 	bl	800e1d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800864a:	4803      	ldr	r0, [pc, #12]	; (8008658 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 800864c:	f005 fdc0 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008650:	bf00      	nop
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20002920 	.word	0x20002920
 8008658:	2000283c 	.word	0x2000283c

0800865c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8008660:	f7fb ff8c 	bl	800457c <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008664:	4803      	ldr	r0, [pc, #12]	; (8008674 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8008666:	f005 fdb3 	bl	800e1d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800866a:	4803      	ldr	r0, [pc, #12]	; (8008678 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800866c:	f005 fdb0 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8008670:	bf00      	nop
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20002920 	.word	0x20002920
 8008678:	20002888 	.word	0x20002888

0800867c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008680:	4802      	ldr	r0, [pc, #8]	; (800868c <TIM3_IRQHandler+0x10>)
 8008682:	f005 fda5 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20001f20 	.word	0x20001f20

08008690 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	//IM_RECIP_COUNT_Handler();
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008694:	4802      	ldr	r0, [pc, #8]	; (80086a0 <TIM4_IRQHandler+0x10>)
 8008696:	f005 fd9b 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	200027f0 	.word	0x200027f0

080086a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80086a8:	f7fc ffe2 	bl	8005670 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80086ac:	f7fd f808 	bl	80056c0 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80086b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80086b4:	f7ff ff02 	bl	80084bc <LL_EXTI_IsActiveFlag_0_31>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80086be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80086c2:	f7ff ff11 	bl	80084e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80086c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80086ca:	f7ff fef7 	bl	80084bc <LL_EXTI_IsActiveFlag_0_31>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80086d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80086d8:	f7ff ff06 	bl	80084e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80086dc:	bf00      	nop
 80086de:	bd80      	pop	{r7, pc}

080086e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80086e4:	f7fc ff6c 	bl	80055c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80086e8:	4802      	ldr	r0, [pc, #8]	; (80086f4 <TIM5_IRQHandler+0x14>)
 80086ea:	f005 fd71 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200028d4 	.word	0x200028d4

080086f8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80086fc:	4802      	ldr	r0, [pc, #8]	; (8008708 <COMP1_2_3_IRQHandler+0x10>)
 80086fe:	f002 fb01 	bl	800ad04 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8008702:	bf00      	nop
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20002634 	.word	0x20002634

0800870c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e00a      	b.n	8008734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800871e:	f3af 8000 	nop.w
 8008722:	4601      	mov	r1, r0
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	60ba      	str	r2, [r7, #8]
 800872a:	b2ca      	uxtb	r2, r1
 800872c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	3301      	adds	r3, #1
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	dbf0      	blt.n	800871e <_read+0x12>
	}

return len;
 800873c:	687b      	ldr	r3, [r7, #4]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
	return -1;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800876e:	605a      	str	r2, [r3, #4]
	return 0;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <_isatty>:

int _isatty(int file)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
	return 1;
 8008786:	2301      	movs	r3, #1
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
	return 0;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80087b8:	4b11      	ldr	r3, [pc, #68]	; (8008800 <_sbrk+0x50>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <_sbrk+0x16>
		heap_end = &end;
 80087c0:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <_sbrk+0x50>)
 80087c2:	4a10      	ldr	r2, [pc, #64]	; (8008804 <_sbrk+0x54>)
 80087c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80087c6:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <_sbrk+0x50>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80087cc:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <_sbrk+0x50>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4413      	add	r3, r2
 80087d4:	466a      	mov	r2, sp
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d907      	bls.n	80087ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80087da:	f008 fe5d 	bl	8011498 <__errno>
 80087de:	4602      	mov	r2, r0
 80087e0:	230c      	movs	r3, #12
 80087e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80087e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e8:	e006      	b.n	80087f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <_sbrk+0x50>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	4a03      	ldr	r2, [pc, #12]	; (8008800 <_sbrk+0x50>)
 80087f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80087f6:	68fb      	ldr	r3, [r7, #12]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001ea0 	.word	0x20001ea0
 8008804:	20002a10 	.word	0x20002a10

08008808 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <SystemInit+0x28>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008812:	4a07      	ldr	r2, [pc, #28]	; (8008830 <SystemInit+0x28>)
 8008814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800881c:	4b04      	ldr	r3, [pc, #16]	; (8008830 <SystemInit+0x28>)
 800881e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008822:	609a      	str	r2, [r3, #8]
#endif
}
 8008824:	bf00      	nop
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000ed00 	.word	0xe000ed00

08008834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b09a      	sub	sp, #104	; 0x68
 8008838:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800883a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800883e:	2224      	movs	r2, #36	; 0x24
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f008 fe52 	bl	80114ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	605a      	str	r2, [r3, #4]
 8008852:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008854:	1d3b      	adds	r3, r7, #4
 8008856:	2234      	movs	r2, #52	; 0x34
 8008858:	2100      	movs	r1, #0
 800885a:	4618      	mov	r0, r3
 800885c:	f008 fe46 	bl	80114ec <memset>

  htim1.Instance = TIM1;
 8008860:	4b2a      	ldr	r3, [pc, #168]	; (800890c <MX_TIM1_Init+0xd8>)
 8008862:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <MX_TIM1_Init+0xdc>)
 8008864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <MX_TIM1_Init+0xd8>)
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <MX_TIM1_Init+0xd8>)
 800886e:	2260      	movs	r2, #96	; 0x60
 8008870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8008872:	4b26      	ldr	r3, [pc, #152]	; (800890c <MX_TIM1_Init+0xd8>)
 8008874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <MX_TIM1_Init+0xd8>)
 800887c:	2200      	movs	r2, #0
 800887e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008880:	4b22      	ldr	r3, [pc, #136]	; (800890c <MX_TIM1_Init+0xd8>)
 8008882:	2200      	movs	r2, #0
 8008884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008886:	4b21      	ldr	r3, [pc, #132]	; (800890c <MX_TIM1_Init+0xd8>)
 8008888:	2280      	movs	r2, #128	; 0x80
 800888a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800888c:	2302      	movs	r3, #2
 800888e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008890:	2300      	movs	r3, #0
 8008892:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008894:	2301      	movs	r3, #1
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008898:	2300      	movs	r3, #0
 800889a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80088a0:	2300      	movs	r3, #0
 80088a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80088a4:	2301      	movs	r3, #1
 80088a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80088a8:	2300      	movs	r3, #0
 80088aa:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80088b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80088b4:	4619      	mov	r1, r3
 80088b6:	4815      	ldr	r0, [pc, #84]	; (800890c <MX_TIM1_Init+0xd8>)
 80088b8:	f005 fbe4 	bl	800e084 <HAL_TIM_Encoder_Init>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80088c2:	f7ff fd07 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80088c6:	2320      	movs	r3, #32
 80088c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80088ca:	2300      	movs	r3, #0
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80088d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088d6:	4619      	mov	r1, r3
 80088d8:	480c      	ldr	r0, [pc, #48]	; (800890c <MX_TIM1_Init+0xd8>)
 80088da:	f007 f867 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80088e4:	f7ff fcf6 	bl	80082d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80088e8:	2300      	movs	r3, #0
 80088ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80088ec:	2300      	movs	r3, #0
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80088f0:	1d3b      	adds	r3, r7, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4805      	ldr	r0, [pc, #20]	; (800890c <MX_TIM1_Init+0xd8>)
 80088f6:	f007 f8ef 	bl	800fad8 <HAL_TIMEx_ConfigBreakDeadTime>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008900:	f7ff fce8 	bl	80082d4 <Error_Handler>
  }

}
 8008904:	bf00      	nop
 8008906:	3768      	adds	r7, #104	; 0x68
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20002920 	.word	0x20002920
 8008910:	40012c00 	.word	0x40012c00

08008914 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08c      	sub	sp, #48	; 0x30
 8008918:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800891a:	f107 031c 	add.w	r3, r7, #28
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	605a      	str	r2, [r3, #4]
 8008924:	609a      	str	r2, [r3, #8]
 8008926:	60da      	str	r2, [r3, #12]
 8008928:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800892a:	f107 0310 	add.w	r3, r7, #16
 800892e:	2200      	movs	r2, #0
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	605a      	str	r2, [r3, #4]
 8008934:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008936:	463b      	mov	r3, r7
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	605a      	str	r2, [r3, #4]
 800893e:	609a      	str	r2, [r3, #8]
 8008940:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8008942:	4b2e      	ldr	r3, [pc, #184]	; (80089fc <MX_TIM2_Init+0xe8>)
 8008944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008948:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 800894a:	4b2c      	ldr	r3, [pc, #176]	; (80089fc <MX_TIM2_Init+0xe8>)
 800894c:	2280      	movs	r2, #128	; 0x80
 800894e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008950:	4b2a      	ldr	r3, [pc, #168]	; (80089fc <MX_TIM2_Init+0xe8>)
 8008952:	2200      	movs	r2, #0
 8008954:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008956:	4b29      	ldr	r3, [pc, #164]	; (80089fc <MX_TIM2_Init+0xe8>)
 8008958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800895c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800895e:	4b27      	ldr	r3, [pc, #156]	; (80089fc <MX_TIM2_Init+0xe8>)
 8008960:	2200      	movs	r2, #0
 8008962:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008964:	4b25      	ldr	r3, [pc, #148]	; (80089fc <MX_TIM2_Init+0xe8>)
 8008966:	2280      	movs	r2, #128	; 0x80
 8008968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800896a:	4824      	ldr	r0, [pc, #144]	; (80089fc <MX_TIM2_Init+0xe8>)
 800896c:	f004 fde4 	bl	800d538 <HAL_TIM_Base_Init>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008976:	f7ff fcad 	bl	80082d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800897a:	4820      	ldr	r0, [pc, #128]	; (80089fc <MX_TIM2_Init+0xe8>)
 800897c:	f005 f8c6 	bl	800db0c <HAL_TIM_IC_Init>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008986:	f7ff fca5 	bl	80082d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800898a:	2304      	movs	r3, #4
 800898c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800898e:	2350      	movs	r3, #80	; 0x50
 8008990:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800899a:	f107 031c 	add.w	r3, r7, #28
 800899e:	4619      	mov	r1, r3
 80089a0:	4816      	ldr	r0, [pc, #88]	; (80089fc <MX_TIM2_Init+0xe8>)
 80089a2:	f006 f829 	bl	800e9f8 <HAL_TIM_SlaveConfigSynchro>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80089ac:	f7ff fc92 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80089b0:	2320      	movs	r3, #32
 80089b2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80089b8:	f107 0310 	add.w	r3, r7, #16
 80089bc:	4619      	mov	r1, r3
 80089be:	480f      	ldr	r0, [pc, #60]	; (80089fc <MX_TIM2_Init+0xe8>)
 80089c0:	f006 fff4 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80089ca:	f7ff fc83 	bl	80082d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80089ce:	2300      	movs	r3, #0
 80089d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80089d2:	2301      	movs	r3, #1
 80089d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80089de:	463b      	mov	r3, r7
 80089e0:	2200      	movs	r2, #0
 80089e2:	4619      	mov	r1, r3
 80089e4:	4805      	ldr	r0, [pc, #20]	; (80089fc <MX_TIM2_Init+0xe8>)
 80089e6:	f005 fd72 	bl	800e4ce <HAL_TIM_IC_ConfigChannel>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80089f0:	f7ff fc70 	bl	80082d4 <Error_Handler>
  }

}
 80089f4:	bf00      	nop
 80089f6:	3730      	adds	r7, #48	; 0x30
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	2000296c 	.word	0x2000296c

08008a00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a06:	f107 0310 	add.w	r3, r7, #16
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	605a      	str	r2, [r3, #4]
 8008a10:	609a      	str	r2, [r3, #8]
 8008a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a14:	1d3b      	adds	r3, r7, #4
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	605a      	str	r2, [r3, #4]
 8008a1c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a20:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <MX_TIM3_Init+0x98>)
 8008a22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008a24:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a2c:	2210      	movs	r2, #16
 8008a2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008a30:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008a36:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a3e:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008a44:	4813      	ldr	r0, [pc, #76]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a46:	f004 fd77 	bl	800d538 <HAL_TIM_Base_Init>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008a50:	f7ff fc40 	bl	80082d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008a5a:	f107 0310 	add.w	r3, r7, #16
 8008a5e:	4619      	mov	r1, r3
 8008a60:	480c      	ldr	r0, [pc, #48]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a62:	f005 fed9 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008a6c:	f7ff fc32 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008a70:	2320      	movs	r3, #32
 8008a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <MX_TIM3_Init+0x94>)
 8008a7e:	f006 ff95 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008a88:	f7ff fc24 	bl	80082d4 <Error_Handler>
  }

}
 8008a8c:	bf00      	nop
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20001f20 	.word	0x20001f20
 8008a98:	40000400 	.word	0x40000400

08008a9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008aa2:	f107 0310 	add.w	r3, r7, #16
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	605a      	str	r2, [r3, #4]
 8008aac:	609a      	str	r2, [r3, #8]
 8008aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ab0:	1d3b      	adds	r3, r7, #4
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	605a      	str	r2, [r3, #4]
 8008ab8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8008aba:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <MX_TIM4_Init+0x98>)
 8008abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008ac0:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8008acc:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ad8:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008ade:	4814      	ldr	r0, [pc, #80]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008ae0:	f004 fd2a 	bl	800d538 <HAL_TIM_Base_Init>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8008aea:	f7ff fbf3 	bl	80082d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008af4:	f107 0310 	add.w	r3, r7, #16
 8008af8:	4619      	mov	r1, r3
 8008afa:	480d      	ldr	r0, [pc, #52]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008afc:	f005 fe8c 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8008b06:	f7ff fbe5 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4806      	ldr	r0, [pc, #24]	; (8008b30 <MX_TIM4_Init+0x94>)
 8008b18:	f006 ff48 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8008b22:	f7ff fbd7 	bl	80082d4 <Error_Handler>
  }

}
 8008b26:	bf00      	nop
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200027f0 	.word	0x200027f0
 8008b34:	40000800 	.word	0x40000800

08008b38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b3e:	f107 0310 	add.w	r3, r7, #16
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	605a      	str	r2, [r3, #4]
 8008b48:	609a      	str	r2, [r3, #8]
 8008b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b4c:	1d3b      	adds	r3, r7, #4
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b58:	4a1d      	ldr	r2, [pc, #116]	; (8008bd0 <MX_TIM5_Init+0x98>)
 8008b5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b62:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008b68:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b70:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b76:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008b7c:	4813      	ldr	r0, [pc, #76]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b7e:	f004 fcdb 	bl	800d538 <HAL_TIM_Base_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008b88:	f7ff fba4 	bl	80082d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008b92:	f107 0310 	add.w	r3, r7, #16
 8008b96:	4619      	mov	r1, r3
 8008b98:	480c      	ldr	r0, [pc, #48]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008b9a:	f005 fe3d 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008ba4:	f7ff fb96 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4805      	ldr	r0, [pc, #20]	; (8008bcc <MX_TIM5_Init+0x94>)
 8008bb6:	f006 fef9 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008bc0:	f7ff fb88 	bl	80082d4 <Error_Handler>
  }

}
 8008bc4:	bf00      	nop
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200028d4 	.word	0x200028d4
 8008bd0:	40000c00 	.word	0x40000c00

08008bd4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b094      	sub	sp, #80	; 0x50
 8008bd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	609a      	str	r2, [r3, #8]
 8008be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	2234      	movs	r2, #52	; 0x34
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f008 fc76 	bl	80114ec <memset>

  htim8.Instance = TIM8;
 8008c00:	4b26      	ldr	r3, [pc, #152]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c02:	4a27      	ldr	r2, [pc, #156]	; (8008ca0 <MX_TIM8_Init+0xcc>)
 8008c04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008c06:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c0c:	4b23      	ldr	r3, [pc, #140]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008c12:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c18:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c26:	2280      	movs	r2, #128	; 0x80
 8008c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008c2a:	481c      	ldr	r0, [pc, #112]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c2c:	f004 fc84 	bl	800d538 <HAL_TIM_Base_Init>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008c36:	f7ff fb4d 	bl	80082d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c3e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008c40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c44:	4619      	mov	r1, r3
 8008c46:	4815      	ldr	r0, [pc, #84]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c48:	f005 fde6 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008c52:	f7ff fb3f 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008c56:	2320      	movs	r3, #32
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c66:	4619      	mov	r1, r3
 8008c68:	480c      	ldr	r0, [pc, #48]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c6a:	f006 fe9f 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008c74:	f7ff fb2e 	bl	80082d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008c80:	463b      	mov	r3, r7
 8008c82:	4619      	mov	r1, r3
 8008c84:	4805      	ldr	r0, [pc, #20]	; (8008c9c <MX_TIM8_Init+0xc8>)
 8008c86:	f006 ff27 	bl	800fad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008c90:	f7ff fb20 	bl	80082d4 <Error_Handler>
  }

}
 8008c94:	bf00      	nop
 8008c96:	3750      	adds	r7, #80	; 0x50
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	200027a4 	.word	0x200027a4
 8008ca0:	40013400 	.word	0x40013400

08008ca4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	609a      	str	r2, [r3, #8]
 8008cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008cc2:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cc4:	4a1f      	ldr	r2, [pc, #124]	; (8008d44 <MX_TIM15_Init+0xa0>)
 8008cc6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008cc8:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cdc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cde:	4b18      	ldr	r3, [pc, #96]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008ce4:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cea:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008cf0:	4813      	ldr	r0, [pc, #76]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008cf2:	f004 fc21 	bl	800d538 <HAL_TIM_Base_Init>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008cfc:	f7ff faea 	bl	80082d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008d06:	f107 0310 	add.w	r3, r7, #16
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	480c      	ldr	r0, [pc, #48]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008d0e:	f005 fd83 	bl	800e818 <HAL_TIM_ConfigClockSource>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008d18:	f7ff fadc 	bl	80082d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <MX_TIM15_Init+0x9c>)
 8008d2a:	f006 fe3f 	bl	800f9ac <HAL_TIMEx_MasterConfigSynchronization>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008d34:	f7ff face 	bl	80082d4 <Error_Handler>
  }

}
 8008d38:	bf00      	nop
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	2000283c 	.word	0x2000283c
 8008d44:	40014000 	.word	0x40014000

08008d48 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008d4c:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d4e:	4a11      	ldr	r2, [pc, #68]	; (8008d94 <MX_TIM16_Init+0x4c>)
 8008d50:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d58:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d66:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d68:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008d6e:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <MX_TIM16_Init+0x48>)
 8008d7c:	f004 fbdc 	bl	800d538 <HAL_TIM_Base_Init>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008d86:	f7ff faa5 	bl	80082d4 <Error_Handler>
  }

}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	200029b8 	.word	0x200029b8
 8008d94:	40014400 	.word	0x40014400

08008d98 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008d9c:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008d9e:	4a11      	ldr	r2, [pc, #68]	; (8008de4 <MX_TIM17_Init+0x4c>)
 8008da0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008da8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008db6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008dca:	4805      	ldr	r0, [pc, #20]	; (8008de0 <MX_TIM17_Init+0x48>)
 8008dcc:	f004 fbb4 	bl	800d538 <HAL_TIM_Base_Init>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008dd6:	f7ff fa7d 	bl	80082d4 <Error_Handler>
  }

}
 8008dda:	bf00      	nop
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20002888 	.word	0x20002888
 8008de4:	40014800 	.word	0x40014800

08008de8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08a      	sub	sp, #40	; 0x28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008df0:	f107 0314 	add.w	r3, r7, #20
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	605a      	str	r2, [r3, #4]
 8008dfa:	609a      	str	r2, [r3, #8]
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d137      	bne.n	8008e7a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e14:	6613      	str	r3, [r2, #96]	; 0x60
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e26:	4a18      	ldr	r2, [pc, #96]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e28:	f043 0304 	orr.w	r3, r3, #4
 8008e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e2e:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e46:	2300      	movs	r3, #0
 8008e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e4e:	f107 0314 	add.w	r3, r7, #20
 8008e52:	4619      	mov	r1, r3
 8008e54:	480d      	ldr	r0, [pc, #52]	; (8008e8c <HAL_TIM_Encoder_MspInit+0xa4>)
 8008e56:	f003 f869 	bl	800bf2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	2018      	movs	r0, #24
 8008e60:	f002 f8d1 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008e64:	2018      	movs	r0, #24
 8008e66:	f002 f8e8 	bl	800b03a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	201a      	movs	r0, #26
 8008e70:	f002 f8c9 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008e74:	201a      	movs	r0, #26
 8008e76:	f002 f8e0 	bl	800b03a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008e7a:	bf00      	nop
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40012c00 	.word	0x40012c00
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	48000800 	.word	0x48000800

08008e90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b090      	sub	sp, #64	; 0x40
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	609a      	str	r2, [r3, #8]
 8008ea4:	60da      	str	r2, [r3, #12]
 8008ea6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb0:	d154      	bne.n	8008f5c <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008eb2:	4b7f      	ldr	r3, [pc, #508]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	4a7e      	ldr	r2, [pc, #504]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008eb8:	f043 0301 	orr.w	r3, r3, #1
 8008ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8008ebe:	4b7c      	ldr	r3, [pc, #496]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eca:	4b79      	ldr	r3, [pc, #484]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ece:	4a78      	ldr	r2, [pc, #480]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ed6:	4b76      	ldr	r3, [pc, #472]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008efa:	4619      	mov	r1, r3
 8008efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f00:	f003 f814 	bl	800bf2c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008f04:	4b6b      	ldr	r3, [pc, #428]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f06:	4a6c      	ldr	r2, [pc, #432]	; (80090b8 <HAL_TIM_Base_MspInit+0x228>)
 8008f08:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008f0a:	4b6a      	ldr	r3, [pc, #424]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f0c:	2238      	movs	r2, #56	; 0x38
 8008f0e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f10:	4b68      	ldr	r3, [pc, #416]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f16:	4b67      	ldr	r3, [pc, #412]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008f1c:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f1e:	2280      	movs	r2, #128	; 0x80
 8008f20:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f22:	4b64      	ldr	r3, [pc, #400]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f28:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008f2a:	4b62      	ldr	r3, [pc, #392]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f30:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008f32:	4b60      	ldr	r3, [pc, #384]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f34:	2220      	movs	r2, #32
 8008f36:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008f38:	4b5e      	ldr	r3, [pc, #376]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008f3e:	485d      	ldr	r0, [pc, #372]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f40:	f002 fcc2 	bl	800b8c8 <HAL_DMA_Init>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008f4a:	f7ff f9c3 	bl	80082d4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a58      	ldr	r2, [pc, #352]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f52:	625a      	str	r2, [r3, #36]	; 0x24
 8008f54:	4a57      	ldr	r2, [pc, #348]	; (80090b4 <HAL_TIM_Base_MspInit+0x224>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008f5a:	e0a4      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM3)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a56      	ldr	r2, [pc, #344]	; (80090bc <HAL_TIM_Base_MspInit+0x22c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d114      	bne.n	8008f90 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008f66:	4b52      	ldr	r3, [pc, #328]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	4a51      	ldr	r2, [pc, #324]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008f6c:	f043 0302 	orr.w	r3, r3, #2
 8008f70:	6593      	str	r3, [r2, #88]	; 0x58
 8008f72:	4b4f      	ldr	r3, [pc, #316]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	623b      	str	r3, [r7, #32]
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2100      	movs	r1, #0
 8008f82:	201d      	movs	r0, #29
 8008f84:	f002 f83f 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008f88:	201d      	movs	r0, #29
 8008f8a:	f002 f856 	bl	800b03a <HAL_NVIC_EnableIRQ>
}
 8008f8e:	e08a      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM4)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a4a      	ldr	r2, [pc, #296]	; (80090c0 <HAL_TIM_Base_MspInit+0x230>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d114      	bne.n	8008fc4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008f9a:	4b45      	ldr	r3, [pc, #276]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9e:	4a44      	ldr	r2, [pc, #272]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008fa0:	f043 0304 	orr.w	r3, r3, #4
 8008fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fa6:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	201e      	movs	r0, #30
 8008fb8:	f002 f825 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008fbc:	201e      	movs	r0, #30
 8008fbe:	f002 f83c 	bl	800b03a <HAL_NVIC_EnableIRQ>
}
 8008fc2:	e070      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM5)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a3e      	ldr	r2, [pc, #248]	; (80090c4 <HAL_TIM_Base_MspInit+0x234>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d114      	bne.n	8008ff8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008fce:	4b38      	ldr	r3, [pc, #224]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	4a37      	ldr	r2, [pc, #220]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008fd4:	f043 0308 	orr.w	r3, r3, #8
 8008fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8008fda:	4b35      	ldr	r3, [pc, #212]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	f003 0308 	and.w	r3, r3, #8
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2102      	movs	r1, #2
 8008fea:	2032      	movs	r0, #50	; 0x32
 8008fec:	f002 f80b 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008ff0:	2032      	movs	r0, #50	; 0x32
 8008ff2:	f002 f822 	bl	800b03a <HAL_NVIC_EnableIRQ>
}
 8008ff6:	e056      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM8)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a32      	ldr	r2, [pc, #200]	; (80090c8 <HAL_TIM_Base_MspInit+0x238>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d10c      	bne.n	800901c <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009002:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009006:	4a2a      	ldr	r2, [pc, #168]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800900c:	6613      	str	r3, [r2, #96]	; 0x60
 800900e:	4b28      	ldr	r3, [pc, #160]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	697b      	ldr	r3, [r7, #20]
}
 800901a:	e044      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM15)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a2a      	ldr	r2, [pc, #168]	; (80090cc <HAL_TIM_Base_MspInit+0x23c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d114      	bne.n	8009050 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009026:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902a:	4a21      	ldr	r2, [pc, #132]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 800902c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009030:	6613      	str	r3, [r2, #96]	; 0x60
 8009032:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	2018      	movs	r0, #24
 8009044:	f001 ffdf 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8009048:	2018      	movs	r0, #24
 800904a:	f001 fff6 	bl	800b03a <HAL_NVIC_EnableIRQ>
}
 800904e:	e02a      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM16)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1e      	ldr	r2, [pc, #120]	; (80090d0 <HAL_TIM_Base_MspInit+0x240>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d10c      	bne.n	8009074 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800905a:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 800905c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905e:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009064:	6613      	str	r3, [r2, #96]	; 0x60
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	e018      	b.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM17)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a16      	ldr	r2, [pc, #88]	; (80090d4 <HAL_TIM_Base_MspInit+0x244>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d113      	bne.n	80090a6 <HAL_TIM_Base_MspInit+0x216>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800907e:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009082:	4a0b      	ldr	r2, [pc, #44]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 8009084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009088:	6613      	str	r3, [r2, #96]	; 0x60
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <HAL_TIM_Base_MspInit+0x220>)
 800908c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009092:	60bb      	str	r3, [r7, #8]
 8009094:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8009096:	2200      	movs	r2, #0
 8009098:	2101      	movs	r1, #1
 800909a:	201a      	movs	r0, #26
 800909c:	f001 ffb3 	bl	800b006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80090a0:	201a      	movs	r0, #26
 80090a2:	f001 ffca 	bl	800b03a <HAL_NVIC_EnableIRQ>
}
 80090a6:	bf00      	nop
 80090a8:	3740      	adds	r7, #64	; 0x40
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40021000 	.word	0x40021000
 80090b4:	20002744 	.word	0x20002744
 80090b8:	40020044 	.word	0x40020044
 80090bc:	40000400 	.word	0x40000400
 80090c0:	40000800 	.word	0x40000800
 80090c4:	40000c00 	.word	0x40000c00
 80090c8:	40013400 	.word	0x40013400
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40014400 	.word	0x40014400
 80090d4:	40014800 	.word	0x40014800

080090d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090d8:	480d      	ldr	r0, [pc, #52]	; (8009110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090dc:	480d      	ldr	r0, [pc, #52]	; (8009114 <LoopForever+0x6>)
  ldr r1, =_edata
 80090de:	490e      	ldr	r1, [pc, #56]	; (8009118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090e0:	4a0e      	ldr	r2, [pc, #56]	; (800911c <LoopForever+0xe>)
  movs r3, #0
 80090e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80090e4:	e002      	b.n	80090ec <LoopCopyDataInit>

080090e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090ea:	3304      	adds	r3, #4

080090ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090f0:	d3f9      	bcc.n	80090e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090f2:	4a0b      	ldr	r2, [pc, #44]	; (8009120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090f4:	4c0b      	ldr	r4, [pc, #44]	; (8009124 <LoopForever+0x16>)
  movs r3, #0
 80090f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090f8:	e001      	b.n	80090fe <LoopFillZerobss>

080090fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090fc:	3204      	adds	r2, #4

080090fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009100:	d3fb      	bcc.n	80090fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009102:	f7ff fb81 	bl	8008808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009106:	f008 f9cd 	bl	80114a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800910a:	f7ff f821 	bl	8008150 <main>

0800910e <LoopForever>:

LoopForever:
    b LoopForever
 800910e:	e7fe      	b.n	800910e <LoopForever>
  ldr   r0, =_estack
 8009110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009118:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 800911c:	08016aa0 	.word	0x08016aa0
  ldr r2, =_sbss
 8009120:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8009124:	20002a0c 	.word	0x20002a0c

08009128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009128:	e7fe      	b.n	8009128 <ADC1_2_IRQHandler>

0800912a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009134:	2003      	movs	r0, #3
 8009136:	f001 ff5b 	bl	800aff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800913a:	2000      	movs	r0, #0
 800913c:	f000 f80e 	bl	800915c <HAL_InitTick>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	71fb      	strb	r3, [r7, #7]
 800914a:	e001      	b.n	8009150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800914c:	f7ff f992 	bl	8008474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009150:	79fb      	ldrb	r3, [r7, #7]

}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009168:	4b16      	ldr	r3, [pc, #88]	; (80091c4 <HAL_InitTick+0x68>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d022      	beq.n	80091b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009170:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <HAL_InitTick+0x6c>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <HAL_InitTick+0x68>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800917c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009180:	fbb2 f3f3 	udiv	r3, r2, r3
 8009184:	4618      	mov	r0, r3
 8009186:	f001 ff74 	bl	800b072 <HAL_SYSTICK_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10f      	bne.n	80091b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d809      	bhi.n	80091aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009196:	2200      	movs	r2, #0
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919e:	f001 ff32 	bl	800b006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80091a2:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <HAL_InitTick+0x70>)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	e007      	b.n	80091ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	e004      	b.n	80091ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	e001      	b.n	80091ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000c3c 	.word	0x20000c3c
 80091c8:	20000c34 	.word	0x20000c34
 80091cc:	20000c38 	.word	0x20000c38

080091d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <HAL_IncTick+0x1c>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <HAL_IncTick+0x20>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	4a03      	ldr	r2, [pc, #12]	; (80091ec <HAL_IncTick+0x1c>)
 80091e0:	6013      	str	r3, [r2, #0]
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	20002a04 	.word	0x20002a04
 80091f0:	20000c3c 	.word	0x20000c3c

080091f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  return uwTick;
 80091f8:	4b03      	ldr	r3, [pc, #12]	; (8009208 <HAL_GetTick+0x14>)
 80091fa:	681b      	ldr	r3, [r3, #0]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20002a04 	.word	0x20002a04

0800920c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009214:	f7ff ffee 	bl	80091f4 <HAL_GetTick>
 8009218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009224:	d004      	beq.n	8009230 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009226:	4b09      	ldr	r3, [pc, #36]	; (800924c <HAL_Delay+0x40>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009230:	bf00      	nop
 8009232:	f7ff ffdf 	bl	80091f4 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d8f7      	bhi.n	8009232 <HAL_Delay+0x26>
  {
  }
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000c3c 	.word	0x20000c3c

08009250 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	431a      	orrs	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	609a      	str	r2, [r3, #8]
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	431a      	orrs	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	609a      	str	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80092b8:	b490      	push	{r4, r7}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3360      	adds	r3, #96	; 0x60
 80092ca:	461a      	mov	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	4b08      	ldr	r3, [pc, #32]	; (80092f8 <LL_ADC_SetOffset+0x40>)
 80092d8:	4013      	ands	r3, r2
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092ea:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bc90      	pop	{r4, r7}
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	03fff000 	.word	0x03fff000

080092fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80092fc:	b490      	push	{r4, r7}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3360      	adds	r3, #96	; 0x60
 800930a:	461a      	mov	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bc90      	pop	{r4, r7}
 8009322:	4770      	bx	lr

08009324 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009324:	b490      	push	{r4, r7}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3360      	adds	r3, #96	; 0x60
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4313      	orrs	r3, r2
 8009348:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bc90      	pop	{r4, r7}
 8009352:	4770      	bx	lr

08009354 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009354:	b490      	push	{r4, r7}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3360      	adds	r3, #96	; 0x60
 8009364:	461a      	mov	r2, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4313      	orrs	r3, r2
 8009378:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bc90      	pop	{r4, r7}
 8009382:	4770      	bx	lr

08009384 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009384:	b490      	push	{r4, r7}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3360      	adds	r3, #96	; 0x60
 8009394:	461a      	mov	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc90      	pop	{r4, r7}
 80093b2:	4770      	bx	lr

080093b4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	615a      	str	r2, [r3, #20]
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80093da:	b490      	push	{r4, r7}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3330      	adds	r3, #48	; 0x30
 80093ea:	461a      	mov	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	f003 030c 	and.w	r3, r3, #12
 80093f6:	4413      	add	r3, r2
 80093f8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f003 031f 	and.w	r3, r3, #31
 8009402:	211f      	movs	r1, #31
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	43db      	mvns	r3, r3
 800940a:	401a      	ands	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	0e9b      	lsrs	r3, r3, #26
 8009410:	f003 011f 	and.w	r1, r3, #31
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	fa01 f303 	lsl.w	r3, r1, r3
 800941e:	4313      	orrs	r3, r2
 8009420:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bc90      	pop	{r4, r7}
 800942a:	4770      	bx	lr

0800942c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800942c:	b490      	push	{r4, r7}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3314      	adds	r3, #20
 800943c:	461a      	mov	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	0e5b      	lsrs	r3, r3, #25
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	4413      	add	r3, r2
 800944a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	0d1b      	lsrs	r3, r3, #20
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	2107      	movs	r1, #7
 8009458:	fa01 f303 	lsl.w	r3, r1, r3
 800945c:	43db      	mvns	r3, r3
 800945e:	401a      	ands	r2, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	0d1b      	lsrs	r3, r3, #20
 8009464:	f003 031f 	and.w	r3, r3, #31
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	fa01 f303 	lsl.w	r3, r1, r3
 800946e:	4313      	orrs	r3, r2
 8009470:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bc90      	pop	{r4, r7}
 800947a:	4770      	bx	lr

0800947c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009494:	43db      	mvns	r3, r3
 8009496:	401a      	ands	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f003 0318 	and.w	r3, r3, #24
 800949e:	4908      	ldr	r1, [pc, #32]	; (80094c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80094a0:	40d9      	lsrs	r1, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	400b      	ands	r3, r1
 80094a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094aa:	431a      	orrs	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80094b2:	bf00      	nop
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	0007ffff 	.word	0x0007ffff

080094c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80094d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6093      	str	r3, [r2, #8]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fc:	d101      	bne.n	8009502 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800954c:	d101      	bne.n	8009552 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009574:	f043 0202 	orr.w	r2, r3, #2
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <LL_ADC_IsEnabled+0x18>
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <LL_ADC_IsEnabled+0x1a>
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d101      	bne.n	80095c6 <LL_ADC_IsDisableOngoing+0x18>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <LL_ADC_IsDisableOngoing+0x1a>
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095e8:	f043 0210 	orr.w	r2, r3, #16
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	2b04      	cmp	r3, #4
 800960e:	d101      	bne.n	8009614 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009636:	f043 0220 	orr.w	r2, r3, #32
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b08      	cmp	r3, #8
 800965c:	d101      	bne.n	8009662 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800967c:	2300      	movs	r3, #0
 800967e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e1ad      	b.n	80099e6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d109      	bne.n	80096ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fd ffa5 	bl	80075e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff ff19 	bl	80094e8 <LL_ADC_IsDeepPowerDownEnabled>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff feff 	bl	80094c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff ff34 	bl	8009538 <LL_ADC_IsInternalRegulatorEnabled>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d113      	bne.n	80096fe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff ff18 	bl	8009510 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80096e0:	4b9e      	ldr	r3, [pc, #632]	; (800995c <HAL_ADC_Init+0x2ec>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	099b      	lsrs	r3, r3, #6
 80096e6:	4a9e      	ldr	r2, [pc, #632]	; (8009960 <HAL_ADC_Init+0x2f0>)
 80096e8:	fba2 2303 	umull	r2, r3, r2, r3
 80096ec:	099b      	lsrs	r3, r3, #6
 80096ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80096f0:	e002      	b.n	80096f8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1f9      	bne.n	80096f2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff ff18 	bl	8009538 <LL_ADC_IsInternalRegulatorEnabled>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10d      	bne.n	800972a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009712:	f043 0210 	orr.w	r2, r3, #16
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800971e:	f043 0201 	orr.w	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ff64 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 8009734:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 8148 	bne.w	80099d4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 8144 	bne.w	80099d4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009750:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009754:	f043 0202 	orr.w	r2, r3, #2
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff ff11 	bl	8009588 <LL_ADC_IsEnabled>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d141      	bne.n	80097f0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009774:	d004      	beq.n	8009780 <HAL_ADC_Init+0x110>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a7a      	ldr	r2, [pc, #488]	; (8009964 <HAL_ADC_Init+0x2f4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10f      	bne.n	80097a0 <HAL_ADC_Init+0x130>
 8009780:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009784:	f7ff ff00 	bl	8009588 <LL_ADC_IsEnabled>
 8009788:	4604      	mov	r4, r0
 800978a:	4876      	ldr	r0, [pc, #472]	; (8009964 <HAL_ADC_Init+0x2f4>)
 800978c:	f7ff fefc 	bl	8009588 <LL_ADC_IsEnabled>
 8009790:	4603      	mov	r3, r0
 8009792:	4323      	orrs	r3, r4
 8009794:	2b00      	cmp	r3, #0
 8009796:	bf0c      	ite	eq
 8009798:	2301      	moveq	r3, #1
 800979a:	2300      	movne	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	e012      	b.n	80097c6 <HAL_ADC_Init+0x156>
 80097a0:	4871      	ldr	r0, [pc, #452]	; (8009968 <HAL_ADC_Init+0x2f8>)
 80097a2:	f7ff fef1 	bl	8009588 <LL_ADC_IsEnabled>
 80097a6:	4604      	mov	r4, r0
 80097a8:	4870      	ldr	r0, [pc, #448]	; (800996c <HAL_ADC_Init+0x2fc>)
 80097aa:	f7ff feed 	bl	8009588 <LL_ADC_IsEnabled>
 80097ae:	4603      	mov	r3, r0
 80097b0:	431c      	orrs	r4, r3
 80097b2:	486f      	ldr	r0, [pc, #444]	; (8009970 <HAL_ADC_Init+0x300>)
 80097b4:	f7ff fee8 	bl	8009588 <LL_ADC_IsEnabled>
 80097b8:	4603      	mov	r3, r0
 80097ba:	4323      	orrs	r3, r4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf0c      	ite	eq
 80097c0:	2301      	moveq	r3, #1
 80097c2:	2300      	movne	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d012      	beq.n	80097f0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d2:	d004      	beq.n	80097de <HAL_ADC_Init+0x16e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a62      	ldr	r2, [pc, #392]	; (8009964 <HAL_ADC_Init+0x2f4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d101      	bne.n	80097e2 <HAL_ADC_Init+0x172>
 80097de:	4a65      	ldr	r2, [pc, #404]	; (8009974 <HAL_ADC_Init+0x304>)
 80097e0:	e000      	b.n	80097e4 <HAL_ADC_Init+0x174>
 80097e2:	4a65      	ldr	r2, [pc, #404]	; (8009978 <HAL_ADC_Init+0x308>)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f7ff fd30 	bl	8009250 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	7f5b      	ldrb	r3, [r3, #29]
 80097f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009800:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009806:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800980e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009810:	4313      	orrs	r3, r2
 8009812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800981a:	2b01      	cmp	r3, #1
 800981c:	d106      	bne.n	800982c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009822:	3b01      	subs	r3, #1
 8009824:	045b      	lsls	r3, r3, #17
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	4313      	orrs	r3, r2
 800982a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	4313      	orrs	r3, r2
 8009846:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	4b4b      	ldr	r3, [pc, #300]	; (800997c <HAL_ADC_Init+0x30c>)
 8009850:	4013      	ands	r3, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	69b9      	ldr	r1, [r7, #24]
 8009858:	430b      	orrs	r3, r1
 800985a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fec0 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 800987c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fee1 	bl	800964a <LL_ADC_INJ_IsConversionOngoing>
 8009888:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d17f      	bne.n	8009990 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d17c      	bne.n	8009990 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800989a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80098a4:	4313      	orrs	r3, r2
 80098a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b2:	f023 0302 	bic.w	r3, r3, #2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6812      	ldr	r2, [r2, #0]
 80098ba:	69b9      	ldr	r1, [r7, #24]
 80098bc:	430b      	orrs	r3, r1
 80098be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d017      	beq.n	80098f8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	691a      	ldr	r2, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80098e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80098e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6911      	ldr	r1, [r2, #16]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	430b      	orrs	r3, r1
 80098f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80098f6:	e013      	b.n	8009920 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691a      	ldr	r2, [r3, #16]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009906:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6812      	ldr	r2, [r2, #0]
 8009914:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800991c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009926:	2b01      	cmp	r3, #1
 8009928:	d12a      	bne.n	8009980 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009934:	f023 0304 	bic.w	r3, r3, #4
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009940:	4311      	orrs	r1, r2
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009946:	4311      	orrs	r1, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800994c:	430a      	orrs	r2, r1
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0201 	orr.w	r2, r2, #1
 8009958:	611a      	str	r2, [r3, #16]
 800995a:	e019      	b.n	8009990 <HAL_ADC_Init+0x320>
 800995c:	20000c34 	.word	0x20000c34
 8009960:	053e2d63 	.word	0x053e2d63
 8009964:	50000100 	.word	0x50000100
 8009968:	50000400 	.word	0x50000400
 800996c:	50000500 	.word	0x50000500
 8009970:	50000600 	.word	0x50000600
 8009974:	50000300 	.word	0x50000300
 8009978:	50000700 	.word	0x50000700
 800997c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691a      	ldr	r2, [r3, #16]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0201 	bic.w	r2, r2, #1
 800998e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d10c      	bne.n	80099b2 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	f023 010f 	bic.w	r1, r3, #15
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	1e5a      	subs	r2, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30
 80099b0:	e007      	b.n	80099c2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 020f 	bic.w	r2, r2, #15
 80099c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	f043 0201 	orr.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80099d2:	e007      	b.n	80099e4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d8:	f043 0210 	orr.w	r2, r3, #16
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80099e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3724      	adds	r7, #36	; 0x24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd90      	pop	{r4, r7, pc}
 80099ee:	bf00      	nop

080099f0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d101      	bne.n	8009a06 <HAL_ADC_Stop_DMA+0x16>
 8009a02:	2302      	movs	r3, #2
 8009a04:	e051      	b.n	8009aaa <HAL_ADC_Stop_DMA+0xba>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009a0e:	2103      	movs	r1, #3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fbff 	bl	800a214 <ADC_ConversionStop>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d13f      	bne.n	8009aa0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0201 	bic.w	r2, r2, #1
 8009a2e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d10f      	bne.n	8009a5e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	4618      	mov	r0, r3
 8009a44:	f002 f863 	bl	800bb0e <HAL_DMA_Abort>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f022 0210 	bic.w	r2, r2, #16
 8009a6c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d105      	bne.n	8009a80 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc81 	bl	800a37c <ADC_Disable>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
 8009a7e:	e002      	b.n	8009a86 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc7b 	bl	800a37c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d109      	bne.n	8009aa0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a94:	f023 0301 	bic.w	r3, r3, #1
 8009a98:	f043 0201 	orr.w	r2, r3, #1
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b0a6      	sub	sp, #152	; 0x98
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_ADC_ConfigChannel+0x22>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e38e      	b.n	800a1f4 <HAL_ADC_ConfigChannel+0x740>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fd8a 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f040 836f 	bne.w	800a1ce <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	6859      	ldr	r1, [r3, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	f7ff fc6c 	bl	80093da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fd78 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 8009b0c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fd98 	bl	800964a <LL_ADC_INJ_IsConversionOngoing>
 8009b1a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f040 817b 	bne.w	8009e1e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 8176 	bne.w	8009e1e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b3a:	d10f      	bne.n	8009b5c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2200      	movs	r2, #0
 8009b46:	4619      	mov	r1, r3
 8009b48:	f7ff fc70 	bl	800942c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7ff fc2d 	bl	80093b4 <LL_ADC_SetSamplingTimeCommonConfig>
 8009b5a:	e00e      	b.n	8009b7a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f7ff fc5f 	bl	800942c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fc1d 	bl	80093b4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	695a      	ldr	r2, [r3, #20]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	08db      	lsrs	r3, r3, #3
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d022      	beq.n	8009be2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	6919      	ldr	r1, [r3, #16]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bac:	f7ff fb84 	bl	80092b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	6919      	ldr	r1, [r3, #16]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	f7ff fbc9 	bl	8009354 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	6919      	ldr	r1, [r3, #16]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	7f1b      	ldrb	r3, [r3, #28]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d102      	bne.n	8009bd8 <HAL_ADC_ConfigChannel+0x124>
 8009bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bd6:	e000      	b.n	8009bda <HAL_ADC_ConfigChannel+0x126>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f7ff fbd2 	bl	8009384 <LL_ADC_SetOffsetSaturation>
 8009be0:	e11d      	b.n	8009e1e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2100      	movs	r1, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff fb87 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <HAL_ADC_ConfigChannel+0x15a>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fb7c 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009c04:	4603      	mov	r3, r0
 8009c06:	0e9b      	lsrs	r3, r3, #26
 8009c08:	f003 021f 	and.w	r2, r3, #31
 8009c0c:	e012      	b.n	8009c34 <HAL_ADC_ConfigChannel+0x180>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2100      	movs	r1, #0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fb71 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c24:	fa93 f3a3 	rbit	r3, r3
 8009c28:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c2c:	fab3 f383 	clz	r3, r3
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	461a      	mov	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d105      	bne.n	8009c4c <HAL_ADC_ConfigChannel+0x198>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0e9b      	lsrs	r3, r3, #26
 8009c46:	f003 031f 	and.w	r3, r3, #31
 8009c4a:	e00a      	b.n	8009c62 <HAL_ADC_ConfigChannel+0x1ae>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c54:	fa93 f3a3 	rbit	r3, r3
 8009c58:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c5c:	fab3 f383 	clz	r3, r3
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d106      	bne.n	8009c74 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff fb58 	bl	8009324 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2101      	movs	r1, #1
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fb3e 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10a      	bne.n	8009ca0 <HAL_ADC_ConfigChannel+0x1ec>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2101      	movs	r1, #1
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fb33 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009c96:	4603      	mov	r3, r0
 8009c98:	0e9b      	lsrs	r3, r3, #26
 8009c9a:	f003 021f 	and.w	r2, r3, #31
 8009c9e:	e010      	b.n	8009cc2 <HAL_ADC_ConfigChannel+0x20e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fb28 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009cac:	4603      	mov	r3, r0
 8009cae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cb2:	fa93 f3a3 	rbit	r3, r3
 8009cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	fab3 f383 	clz	r3, r3
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d105      	bne.n	8009cda <HAL_ADC_ConfigChannel+0x226>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	0e9b      	lsrs	r3, r3, #26
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	e00a      	b.n	8009cf0 <HAL_ADC_ConfigChannel+0x23c>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ce2:	fa93 f3a3 	rbit	r3, r3
 8009ce6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cea:	fab3 f383 	clz	r3, r3
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d106      	bne.n	8009d02 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fb11 	bl	8009324 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2102      	movs	r1, #2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff faf7 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <HAL_ADC_ConfigChannel+0x27a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff faec 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009d24:	4603      	mov	r3, r0
 8009d26:	0e9b      	lsrs	r3, r3, #26
 8009d28:	f003 021f 	and.w	r2, r3, #31
 8009d2c:	e010      	b.n	8009d50 <HAL_ADC_ConfigChannel+0x29c>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2102      	movs	r1, #2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7ff fae1 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d40:	fa93 f3a3 	rbit	r3, r3
 8009d44:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d48:	fab3 f383 	clz	r3, r3
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d105      	bne.n	8009d68 <HAL_ADC_ConfigChannel+0x2b4>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	0e9b      	lsrs	r3, r3, #26
 8009d62:	f003 031f 	and.w	r3, r3, #31
 8009d66:	e00a      	b.n	8009d7e <HAL_ADC_ConfigChannel+0x2ca>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d70:	fa93 f3a3 	rbit	r3, r3
 8009d74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d78:	fab3 f383 	clz	r3, r3
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d106      	bne.n	8009d90 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	2102      	movs	r1, #2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff faca 	bl	8009324 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2103      	movs	r1, #3
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fab0 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <HAL_ADC_ConfigChannel+0x308>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2103      	movs	r1, #3
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff faa5 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009db2:	4603      	mov	r3, r0
 8009db4:	0e9b      	lsrs	r3, r3, #26
 8009db6:	f003 021f 	and.w	r2, r3, #31
 8009dba:	e010      	b.n	8009dde <HAL_ADC_ConfigChannel+0x32a>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2103      	movs	r1, #3
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fa9a 	bl	80092fc <LL_ADC_GetOffsetChannel>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dce:	fa93 f3a3 	rbit	r3, r3
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd6:	fab3 f383 	clz	r3, r3
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d105      	bne.n	8009df6 <HAL_ADC_ConfigChannel+0x342>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	0e9b      	lsrs	r3, r3, #26
 8009df0:	f003 031f 	and.w	r3, r3, #31
 8009df4:	e00a      	b.n	8009e0c <HAL_ADC_ConfigChannel+0x358>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dfe:	fa93 f3a3 	rbit	r3, r3
 8009e02:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e06:	fab3 f383 	clz	r3, r3
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d106      	bne.n	8009e1e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2200      	movs	r2, #0
 8009e16:	2103      	movs	r1, #3
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7ff fa83 	bl	8009324 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7ff fbb0 	bl	8009588 <LL_ADC_IsEnabled>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 810c 	bne.w	800a048 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	6819      	ldr	r1, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f7ff fb1d 	bl	800947c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	4aaf      	ldr	r2, [pc, #700]	; (800a104 <HAL_ADC_ConfigChannel+0x650>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f040 80fd 	bne.w	800a048 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <HAL_ADC_ConfigChannel+0x3c2>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	0e9b      	lsrs	r3, r3, #26
 8009e64:	3301      	adds	r3, #1
 8009e66:	f003 031f 	and.w	r3, r3, #31
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	bf94      	ite	ls
 8009e6e:	2301      	movls	r3, #1
 8009e70:	2300      	movhi	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	e012      	b.n	8009e9c <HAL_ADC_ConfigChannel+0x3e8>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7e:	fa93 f3a3 	rbit	r3, r3
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e86:	fab3 f383 	clz	r3, r3
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	2b09      	cmp	r3, #9
 8009e94:	bf94      	ite	ls
 8009e96:	2301      	movls	r3, #1
 8009e98:	2300      	movhi	r3, #0
 8009e9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d064      	beq.n	8009f6a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d107      	bne.n	8009ebc <HAL_ADC_ConfigChannel+0x408>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	0e9b      	lsrs	r3, r3, #26
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	069b      	lsls	r3, r3, #26
 8009eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009eba:	e00e      	b.n	8009eda <HAL_ADC_ConfigChannel+0x426>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	fa93 f3a3 	rbit	r3, r3
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ecc:	fab3 f383 	clz	r3, r3
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	069b      	lsls	r3, r3, #26
 8009ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d109      	bne.n	8009efa <HAL_ADC_ConfigChannel+0x446>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	0e9b      	lsrs	r3, r3, #26
 8009eec:	3301      	adds	r3, #1
 8009eee:	f003 031f 	and.w	r3, r3, #31
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef8:	e010      	b.n	8009f1c <HAL_ADC_ConfigChannel+0x468>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f02:	fa93 f3a3 	rbit	r3, r3
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	fab3 f383 	clz	r3, r3
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	3301      	adds	r3, #1
 8009f12:	f003 031f 	and.w	r3, r3, #31
 8009f16:	2101      	movs	r1, #1
 8009f18:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1c:	ea42 0103 	orr.w	r1, r2, r3
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <HAL_ADC_ConfigChannel+0x48e>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	0e9b      	lsrs	r3, r3, #26
 8009f32:	3301      	adds	r3, #1
 8009f34:	f003 021f 	and.w	r2, r3, #31
 8009f38:	4613      	mov	r3, r2
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	4413      	add	r3, r2
 8009f3e:	051b      	lsls	r3, r3, #20
 8009f40:	e011      	b.n	8009f66 <HAL_ADC_ConfigChannel+0x4b2>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	fa93 f3a3 	rbit	r3, r3
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	fab3 f383 	clz	r3, r3
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	3301      	adds	r3, #1
 8009f5a:	f003 021f 	and.w	r2, r3, #31
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f66:	430b      	orrs	r3, r1
 8009f68:	e069      	b.n	800a03e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d107      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x4d2>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	0e9b      	lsrs	r3, r3, #26
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	069b      	lsls	r3, r3, #26
 8009f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f84:	e00e      	b.n	8009fa4 <HAL_ADC_ConfigChannel+0x4f0>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	fa93 f3a3 	rbit	r3, r3
 8009f92:	61fb      	str	r3, [r7, #28]
  return result;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	fab3 f383 	clz	r3, r3
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	069b      	lsls	r3, r3, #26
 8009fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d109      	bne.n	8009fc4 <HAL_ADC_ConfigChannel+0x510>
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	0e9b      	lsrs	r3, r3, #26
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	f003 031f 	and.w	r3, r3, #31
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	e010      	b.n	8009fe6 <HAL_ADC_ConfigChannel+0x532>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	fa93 f3a3 	rbit	r3, r3
 8009fd0:	617b      	str	r3, [r7, #20]
  return result;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	fab3 f383 	clz	r3, r3
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	f003 031f 	and.w	r3, r3, #31
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe6:	ea42 0103 	orr.w	r1, r2, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10d      	bne.n	800a012 <HAL_ADC_ConfigChannel+0x55e>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	0e9b      	lsrs	r3, r3, #26
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f003 021f 	and.w	r2, r3, #31
 800a002:	4613      	mov	r3, r2
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4413      	add	r3, r2
 800a008:	3b1e      	subs	r3, #30
 800a00a:	051b      	lsls	r3, r3, #20
 800a00c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a010:	e014      	b.n	800a03c <HAL_ADC_ConfigChannel+0x588>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	fa93 f3a3 	rbit	r3, r3
 800a01e:	60fb      	str	r3, [r7, #12]
  return result;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	fab3 f383 	clz	r3, r3
 800a026:	b2db      	uxtb	r3, r3
 800a028:	3301      	adds	r3, #1
 800a02a:	f003 021f 	and.w	r2, r3, #31
 800a02e:	4613      	mov	r3, r2
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	4413      	add	r3, r2
 800a034:	3b1e      	subs	r3, #30
 800a036:	051b      	lsls	r3, r3, #20
 800a038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a03c:	430b      	orrs	r3, r1
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	6892      	ldr	r2, [r2, #8]
 800a042:	4619      	mov	r1, r3
 800a044:	f7ff f9f2 	bl	800942c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <HAL_ADC_ConfigChannel+0x654>)
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 80c9 	beq.w	800a1e8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a05e:	d004      	beq.n	800a06a <HAL_ADC_ConfigChannel+0x5b6>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a29      	ldr	r2, [pc, #164]	; (800a10c <HAL_ADC_ConfigChannel+0x658>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d101      	bne.n	800a06e <HAL_ADC_ConfigChannel+0x5ba>
 800a06a:	4b29      	ldr	r3, [pc, #164]	; (800a110 <HAL_ADC_ConfigChannel+0x65c>)
 800a06c:	e000      	b.n	800a070 <HAL_ADC_ConfigChannel+0x5bc>
 800a06e:	4b29      	ldr	r3, [pc, #164]	; (800a114 <HAL_ADC_ConfigChannel+0x660>)
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff f913 	bl	800929c <LL_ADC_GetCommonPathInternalCh>
 800a076:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a26      	ldr	r2, [pc, #152]	; (800a118 <HAL_ADC_ConfigChannel+0x664>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d004      	beq.n	800a08e <HAL_ADC_ConfigChannel+0x5da>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a24      	ldr	r2, [pc, #144]	; (800a11c <HAL_ADC_ConfigChannel+0x668>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d14e      	bne.n	800a12c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a08e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d148      	bne.n	800a12c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0a2:	d005      	beq.n	800a0b0 <HAL_ADC_ConfigChannel+0x5fc>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1d      	ldr	r2, [pc, #116]	; (800a120 <HAL_ADC_ConfigChannel+0x66c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	f040 8099 	bne.w	800a1e2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0b8:	d004      	beq.n	800a0c4 <HAL_ADC_ConfigChannel+0x610>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a13      	ldr	r2, [pc, #76]	; (800a10c <HAL_ADC_ConfigChannel+0x658>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d101      	bne.n	800a0c8 <HAL_ADC_ConfigChannel+0x614>
 800a0c4:	4a12      	ldr	r2, [pc, #72]	; (800a110 <HAL_ADC_ConfigChannel+0x65c>)
 800a0c6:	e000      	b.n	800a0ca <HAL_ADC_ConfigChannel+0x616>
 800a0c8:	4a12      	ldr	r2, [pc, #72]	; (800a114 <HAL_ADC_ConfigChannel+0x660>)
 800a0ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7ff f8ce 	bl	8009276 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a0da:	4b12      	ldr	r3, [pc, #72]	; (800a124 <HAL_ADC_ConfigChannel+0x670>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	099b      	lsrs	r3, r3, #6
 800a0e0:	4a11      	ldr	r2, [pc, #68]	; (800a128 <HAL_ADC_ConfigChannel+0x674>)
 800a0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e6:	099a      	lsrs	r2, r3, #6
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a0f2:	e002      	b.n	800a0fa <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f9      	bne.n	800a0f4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a100:	e06f      	b.n	800a1e2 <HAL_ADC_ConfigChannel+0x72e>
 800a102:	bf00      	nop
 800a104:	407f0000 	.word	0x407f0000
 800a108:	80080000 	.word	0x80080000
 800a10c:	50000100 	.word	0x50000100
 800a110:	50000300 	.word	0x50000300
 800a114:	50000700 	.word	0x50000700
 800a118:	c3210000 	.word	0xc3210000
 800a11c:	90c00010 	.word	0x90c00010
 800a120:	50000600 	.word	0x50000600
 800a124:	20000c34 	.word	0x20000c34
 800a128:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a32      	ldr	r2, [pc, #200]	; (800a1fc <HAL_ADC_ConfigChannel+0x748>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d125      	bne.n	800a182 <HAL_ADC_ConfigChannel+0x6ce>
 800a136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a13a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d11f      	bne.n	800a182 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a2e      	ldr	r2, [pc, #184]	; (800a200 <HAL_ADC_ConfigChannel+0x74c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d104      	bne.n	800a156 <HAL_ADC_ConfigChannel+0x6a2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a2c      	ldr	r2, [pc, #176]	; (800a204 <HAL_ADC_ConfigChannel+0x750>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d047      	beq.n	800a1e6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a15e:	d004      	beq.n	800a16a <HAL_ADC_ConfigChannel+0x6b6>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a26      	ldr	r2, [pc, #152]	; (800a200 <HAL_ADC_ConfigChannel+0x74c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d101      	bne.n	800a16e <HAL_ADC_ConfigChannel+0x6ba>
 800a16a:	4a27      	ldr	r2, [pc, #156]	; (800a208 <HAL_ADC_ConfigChannel+0x754>)
 800a16c:	e000      	b.n	800a170 <HAL_ADC_ConfigChannel+0x6bc>
 800a16e:	4a27      	ldr	r2, [pc, #156]	; (800a20c <HAL_ADC_ConfigChannel+0x758>)
 800a170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7ff f87b 	bl	8009276 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a180:	e031      	b.n	800a1e6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a22      	ldr	r2, [pc, #136]	; (800a210 <HAL_ADC_ConfigChannel+0x75c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d12d      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d127      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a18      	ldr	r2, [pc, #96]	; (800a200 <HAL_ADC_ConfigChannel+0x74c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d022      	beq.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1aa:	d004      	beq.n	800a1b6 <HAL_ADC_ConfigChannel+0x702>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a13      	ldr	r2, [pc, #76]	; (800a200 <HAL_ADC_ConfigChannel+0x74c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d101      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x706>
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <HAL_ADC_ConfigChannel+0x754>)
 800a1b8:	e000      	b.n	800a1bc <HAL_ADC_ConfigChannel+0x708>
 800a1ba:	4a14      	ldr	r2, [pc, #80]	; (800a20c <HAL_ADC_ConfigChannel+0x758>)
 800a1bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f7ff f855 	bl	8009276 <LL_ADC_SetCommonPathInternalCh>
 800a1cc:	e00c      	b.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	f043 0220 	orr.w	r2, r3, #32
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a1e0:	e002      	b.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a1e2:	bf00      	nop
 800a1e4:	e000      	b.n	800a1e8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a1f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3798      	adds	r7, #152	; 0x98
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	c7520000 	.word	0xc7520000
 800a200:	50000100 	.word	0x50000100
 800a204:	50000500 	.word	0x50000500
 800a208:	50000300 	.word	0x50000300
 800a20c:	50000700 	.word	0x50000700
 800a210:	cb840000 	.word	0xcb840000

0800a214 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff f9e6 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 800a230:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fa07 	bl	800964a <LL_ADC_INJ_IsConversionOngoing>
 800a23c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d103      	bne.n	800a24c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8090 	beq.w	800a36c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d02a      	beq.n	800a2b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7f5b      	ldrb	r3, [r3, #29]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d126      	bne.n	800a2b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7f1b      	ldrb	r3, [r3, #28]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d122      	bne.n	800a2b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a26a:	2301      	movs	r3, #1
 800a26c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a26e:	e014      	b.n	800a29a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	4a41      	ldr	r2, [pc, #260]	; (800a378 <ADC_ConversionStop+0x164>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d90d      	bls.n	800a294 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27c:	f043 0210 	orr.w	r2, r3, #16
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a288:	f043 0201 	orr.w	r2, r3, #1
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e06c      	b.n	800a36e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	3301      	adds	r3, #1
 800a298:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d1e3      	bne.n	800a270 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2240      	movs	r2, #64	; 0x40
 800a2ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d014      	beq.n	800a2e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff f99e 	bl	80095fc <LL_ADC_REG_IsConversionOngoing>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00c      	beq.n	800a2e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff f96f 	bl	80095ae <LL_ADC_IsDisableOngoing>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d104      	bne.n	800a2e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff f97a 	bl	80095d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d014      	beq.n	800a310 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff f9ad 	bl	800964a <LL_ADC_INJ_IsConversionOngoing>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00c      	beq.n	800a310 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff f957 	bl	80095ae <LL_ADC_IsDisableOngoing>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d104      	bne.n	800a310 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff f989 	bl	8009622 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d004      	beq.n	800a320 <ADC_ConversionStop+0x10c>
 800a316:	2b03      	cmp	r3, #3
 800a318:	d105      	bne.n	800a326 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a31a:	230c      	movs	r3, #12
 800a31c:	617b      	str	r3, [r7, #20]
        break;
 800a31e:	e005      	b.n	800a32c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a320:	2308      	movs	r3, #8
 800a322:	617b      	str	r3, [r7, #20]
        break;
 800a324:	e002      	b.n	800a32c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a326:	2304      	movs	r3, #4
 800a328:	617b      	str	r3, [r7, #20]
        break;
 800a32a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a32c:	f7fe ff62 	bl	80091f4 <HAL_GetTick>
 800a330:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a332:	e014      	b.n	800a35e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a334:	f7fe ff5e 	bl	80091f4 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d90d      	bls.n	800a35e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a346:	f043 0210 	orr.w	r2, r3, #16
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a352:	f043 0201 	orr.w	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e007      	b.n	800a36e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	4013      	ands	r3, r2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e3      	bne.n	800a334 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3720      	adds	r7, #32
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	a33fffff 	.word	0xa33fffff

0800a37c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff f910 	bl	80095ae <LL_ADC_IsDisableOngoing>
 800a38e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff f8f7 	bl	8009588 <LL_ADC_IsEnabled>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d040      	beq.n	800a422 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d13d      	bne.n	800a422 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 030d 	and.w	r3, r3, #13
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d10c      	bne.n	800a3ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff f8d1 	bl	8009560 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a3c6:	f7fe ff15 	bl	80091f4 <HAL_GetTick>
 800a3ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a3cc:	e022      	b.n	800a414 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d2:	f043 0210 	orr.w	r2, r3, #16
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3de:	f043 0201 	orr.w	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e01c      	b.n	800a424 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a3ea:	f7fe ff03 	bl	80091f4 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d90d      	bls.n	800a414 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fc:	f043 0210 	orr.w	r2, r3, #16
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a408:	f043 0201 	orr.w	r2, r3, #1
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e007      	b.n	800a424 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e3      	bne.n	800a3ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <LL_ADC_IsEnabled>:
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d101      	bne.n	800a444 <LL_ADC_IsEnabled+0x18>
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <LL_ADC_IsEnabled+0x1a>
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <LL_ADC_REG_IsConversionOngoing>:
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f003 0304 	and.w	r3, r3, #4
 800a462:	2b04      	cmp	r3, #4
 800a464:	d101      	bne.n	800a46a <LL_ADC_REG_IsConversionOngoing+0x18>
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b0a1      	sub	sp, #132	; 0x84
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d101      	bne.n	800a496 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a492:	2302      	movs	r3, #2
 800a494:	e0e3      	b.n	800a65e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4a6:	d102      	bne.n	800a4ae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a4a8:	4b6f      	ldr	r3, [pc, #444]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a4aa:	60bb      	str	r3, [r7, #8]
 800a4ac:	e009      	b.n	800a4c2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a6e      	ldr	r2, [pc, #440]	; (800a66c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d102      	bne.n	800a4be <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a4b8:	4b6d      	ldr	r3, [pc, #436]	; (800a670 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a4ba:	60bb      	str	r3, [r7, #8]
 800a4bc:	e001      	b.n	800a4c2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	f043 0220 	orr.w	r2, r3, #32
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e0be      	b.n	800a65e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff ffb5 	bl	800a452 <LL_ADC_REG_IsConversionOngoing>
 800a4e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff ffaf 	bl	800a452 <LL_ADC_REG_IsConversionOngoing>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f040 80a0 	bne.w	800a63c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 809c 	bne.w	800a63c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a50c:	d004      	beq.n	800a518 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a55      	ldr	r2, [pc, #340]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d101      	bne.n	800a51c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a518:	4b56      	ldr	r3, [pc, #344]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a51a:	e000      	b.n	800a51e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a51c:	4b56      	ldr	r3, [pc, #344]	; (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a51e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d04b      	beq.n	800a5c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6859      	ldr	r1, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a53a:	035b      	lsls	r3, r3, #13
 800a53c:	430b      	orrs	r3, r1
 800a53e:	431a      	orrs	r2, r3
 800a540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a542:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a54c:	d004      	beq.n	800a558 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a45      	ldr	r2, [pc, #276]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d10f      	bne.n	800a578 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a558:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a55c:	f7ff ff66 	bl	800a42c <LL_ADC_IsEnabled>
 800a560:	4604      	mov	r4, r0
 800a562:	4841      	ldr	r0, [pc, #260]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a564:	f7ff ff62 	bl	800a42c <LL_ADC_IsEnabled>
 800a568:	4603      	mov	r3, r0
 800a56a:	4323      	orrs	r3, r4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	e012      	b.n	800a59e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a578:	483c      	ldr	r0, [pc, #240]	; (800a66c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a57a:	f7ff ff57 	bl	800a42c <LL_ADC_IsEnabled>
 800a57e:	4604      	mov	r4, r0
 800a580:	483b      	ldr	r0, [pc, #236]	; (800a670 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a582:	f7ff ff53 	bl	800a42c <LL_ADC_IsEnabled>
 800a586:	4603      	mov	r3, r0
 800a588:	431c      	orrs	r4, r3
 800a58a:	483c      	ldr	r0, [pc, #240]	; (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a58c:	f7ff ff4e 	bl	800a42c <LL_ADC_IsEnabled>
 800a590:	4603      	mov	r3, r0
 800a592:	4323      	orrs	r3, r4
 800a594:	2b00      	cmp	r3, #0
 800a596:	bf0c      	ite	eq
 800a598:	2301      	moveq	r3, #1
 800a59a:	2300      	movne	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d056      	beq.n	800a650 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a5a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a5aa:	f023 030f 	bic.w	r3, r3, #15
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	6811      	ldr	r1, [r2, #0]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	6892      	ldr	r2, [r2, #8]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a5be:	e047      	b.n	800a650 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a5c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5d4:	d004      	beq.n	800a5e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a23      	ldr	r2, [pc, #140]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d10f      	bne.n	800a600 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a5e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a5e4:	f7ff ff22 	bl	800a42c <LL_ADC_IsEnabled>
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	481f      	ldr	r0, [pc, #124]	; (800a668 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5ec:	f7ff ff1e 	bl	800a42c <LL_ADC_IsEnabled>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	4323      	orrs	r3, r4
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2301      	moveq	r3, #1
 800a5fa:	2300      	movne	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e012      	b.n	800a626 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a600:	481a      	ldr	r0, [pc, #104]	; (800a66c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a602:	f7ff ff13 	bl	800a42c <LL_ADC_IsEnabled>
 800a606:	4604      	mov	r4, r0
 800a608:	4819      	ldr	r0, [pc, #100]	; (800a670 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a60a:	f7ff ff0f 	bl	800a42c <LL_ADC_IsEnabled>
 800a60e:	4603      	mov	r3, r0
 800a610:	431c      	orrs	r4, r3
 800a612:	481a      	ldr	r0, [pc, #104]	; (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a614:	f7ff ff0a 	bl	800a42c <LL_ADC_IsEnabled>
 800a618:	4603      	mov	r3, r0
 800a61a:	4323      	orrs	r3, r4
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bf0c      	ite	eq
 800a620:	2301      	moveq	r3, #1
 800a622:	2300      	movne	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d012      	beq.n	800a650 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a632:	f023 030f 	bic.w	r3, r3, #15
 800a636:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a638:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a63a:	e009      	b.n	800a650 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a640:	f043 0220 	orr.w	r2, r3, #32
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a64e:	e000      	b.n	800a652 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a650:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a65a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3784      	adds	r7, #132	; 0x84
 800a662:	46bd      	mov	sp, r7
 800a664:	bd90      	pop	{r4, r7, pc}
 800a666:	bf00      	nop
 800a668:	50000100 	.word	0x50000100
 800a66c:	50000400 	.word	0x50000400
 800a670:	50000500 	.word	0x50000500
 800a674:	50000300 	.word	0x50000300
 800a678:	50000700 	.word	0x50000700
 800a67c:	50000600 	.word	0x50000600

0800a680 <LL_EXTI_EnableIT_0_31>:
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4904      	ldr	r1, [pc, #16]	; (800a6a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4313      	orrs	r3, r2
 800a692:	600b      	str	r3, [r1, #0]
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	40010400 	.word	0x40010400

0800a6a4 <LL_EXTI_EnableIT_32_63>:
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <LL_EXTI_EnableIT_32_63+0x20>)
 800a6ae:	6a1a      	ldr	r2, [r3, #32]
 800a6b0:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <LL_EXTI_EnableIT_32_63+0x20>)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	620b      	str	r3, [r1, #32]
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	40010400 	.word	0x40010400

0800a6c8 <LL_EXTI_DisableIT_0_31>:
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <LL_EXTI_DisableIT_0_31+0x24>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	43db      	mvns	r3, r3
 800a6d8:	4904      	ldr	r1, [pc, #16]	; (800a6ec <LL_EXTI_DisableIT_0_31+0x24>)
 800a6da:	4013      	ands	r3, r2
 800a6dc:	600b      	str	r3, [r1, #0]
}
 800a6de:	bf00      	nop
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	40010400 	.word	0x40010400

0800a6f0 <LL_EXTI_DisableIT_32_63>:
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a6f8:	4b06      	ldr	r3, [pc, #24]	; (800a714 <LL_EXTI_DisableIT_32_63+0x24>)
 800a6fa:	6a1a      	ldr	r2, [r3, #32]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	43db      	mvns	r3, r3
 800a700:	4904      	ldr	r1, [pc, #16]	; (800a714 <LL_EXTI_DisableIT_32_63+0x24>)
 800a702:	4013      	ands	r3, r2
 800a704:	620b      	str	r3, [r1, #32]
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40010400 	.word	0x40010400

0800a718 <LL_EXTI_EnableEvent_0_31>:
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a720:	4b05      	ldr	r3, [pc, #20]	; (800a738 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	4904      	ldr	r1, [pc, #16]	; (800a738 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4313      	orrs	r3, r2
 800a72a:	604b      	str	r3, [r1, #4]
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	40010400 	.word	0x40010400

0800a73c <LL_EXTI_EnableEvent_32_63>:
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a748:	4904      	ldr	r1, [pc, #16]	; (800a75c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	40010400 	.word	0x40010400

0800a760 <LL_EXTI_DisableEvent_0_31>:
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a768:	4b06      	ldr	r3, [pc, #24]	; (800a784 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	43db      	mvns	r3, r3
 800a770:	4904      	ldr	r1, [pc, #16]	; (800a784 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a772:	4013      	ands	r3, r2
 800a774:	604b      	str	r3, [r1, #4]
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	40010400 	.word	0x40010400

0800a788 <LL_EXTI_DisableEvent_32_63>:
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <LL_EXTI_DisableEvent_32_63+0x24>)
 800a792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	43db      	mvns	r3, r3
 800a798:	4904      	ldr	r1, [pc, #16]	; (800a7ac <LL_EXTI_DisableEvent_32_63+0x24>)
 800a79a:	4013      	ands	r3, r2
 800a79c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	40010400 	.word	0x40010400

0800a7b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a7b8:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	4904      	ldr	r1, [pc, #16]	; (800a7d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	608b      	str	r3, [r1, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	40010400 	.word	0x40010400

0800a7d4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a7de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7e0:	4904      	ldr	r1, [pc, #16]	; (800a7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	40010400 	.word	0x40010400

0800a7f8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	43db      	mvns	r3, r3
 800a808:	4904      	ldr	r1, [pc, #16]	; (800a81c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	608b      	str	r3, [r1, #8]
}
 800a80e:	bf00      	nop
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40010400 	.word	0x40010400

0800a820 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a828:	4b06      	ldr	r3, [pc, #24]	; (800a844 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a82a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	43db      	mvns	r3, r3
 800a830:	4904      	ldr	r1, [pc, #16]	; (800a844 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a832:	4013      	ands	r3, r2
 800a834:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40010400 	.word	0x40010400

0800a848 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	4904      	ldr	r1, [pc, #16]	; (800a868 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60cb      	str	r3, [r1, #12]
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	40010400 	.word	0x40010400

0800a86c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a878:	4904      	ldr	r1, [pc, #16]	; (800a88c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	40010400 	.word	0x40010400

0800a890 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	43db      	mvns	r3, r3
 800a8a0:	4904      	ldr	r1, [pc, #16]	; (800a8b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	60cb      	str	r3, [r1, #12]
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010400 	.word	0x40010400

0800a8b8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a8c0:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	43db      	mvns	r3, r3
 800a8c8:	4904      	ldr	r1, [pc, #16]	; (800a8dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a8ce:	bf00      	nop
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	40010400 	.word	0x40010400

0800a8e0 <LL_EXTI_IsActiveFlag_0_31>:
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a8e8:	4b07      	ldr	r3, [pc, #28]	; (800a908 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a8ea:	695a      	ldr	r2, [r3, #20]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d101      	bne.n	800a8fa <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	40010400 	.word	0x40010400

0800a90c <LL_EXTI_IsActiveFlag_32_63>:
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4013      	ands	r3, r2
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d101      	bne.n	800a926 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40010400 	.word	0x40010400

0800a938 <LL_EXTI_ClearFlag_0_31>:
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a940:	4a04      	ldr	r2, [pc, #16]	; (800a954 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6153      	str	r3, [r2, #20]
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	40010400 	.word	0x40010400

0800a958 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a960:	4a04      	ldr	r2, [pc, #16]	; (800a974 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	40010400 	.word	0x40010400

0800a978 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a980:	2300      	movs	r3, #0
 800a982:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e180      	b.n	800ac96 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a99e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a2:	d102      	bne.n	800a9aa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	77fb      	strb	r3, [r7, #31]
 800a9a8:	e175      	b.n	800ac96 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	7f5b      	ldrb	r3, [r3, #29]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d108      	bne.n	800a9c6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7fc fea5 	bl	8007710 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9d0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b98      	ldr	r3, [pc, #608]	; (800ac58 <HAL_COMP_Init+0x2e0>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	6979      	ldr	r1, [r7, #20]
 800aa00:	430b      	orrs	r3, r1
 800aa02:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d015      	beq.n	800aa3e <HAL_COMP_Init+0xc6>
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d112      	bne.n	800aa3e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800aa18:	4b90      	ldr	r3, [pc, #576]	; (800ac5c <HAL_COMP_Init+0x2e4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	099b      	lsrs	r3, r3, #6
 800aa1e:	4a90      	ldr	r2, [pc, #576]	; (800ac60 <HAL_COMP_Init+0x2e8>)
 800aa20:	fba2 2303 	umull	r2, r3, r2, r3
 800aa24:	099a      	lsrs	r2, r3, #6
 800aa26:	4613      	mov	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa30:	e002      	b.n	800aa38 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f9      	bne.n	800aa32 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a88      	ldr	r2, [pc, #544]	; (800ac64 <HAL_COMP_Init+0x2ec>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d028      	beq.n	800aa9a <HAL_COMP_Init+0x122>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a86      	ldr	r2, [pc, #536]	; (800ac68 <HAL_COMP_Init+0x2f0>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d020      	beq.n	800aa94 <HAL_COMP_Init+0x11c>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a85      	ldr	r2, [pc, #532]	; (800ac6c <HAL_COMP_Init+0x2f4>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d018      	beq.n	800aa8e <HAL_COMP_Init+0x116>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a83      	ldr	r2, [pc, #524]	; (800ac70 <HAL_COMP_Init+0x2f8>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d010      	beq.n	800aa88 <HAL_COMP_Init+0x110>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a82      	ldr	r2, [pc, #520]	; (800ac74 <HAL_COMP_Init+0x2fc>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d008      	beq.n	800aa82 <HAL_COMP_Init+0x10a>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a80      	ldr	r2, [pc, #512]	; (800ac78 <HAL_COMP_Init+0x300>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d101      	bne.n	800aa7e <HAL_COMP_Init+0x106>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e00f      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e00d      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa86:	e00a      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa8c:	e007      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aa92:	e004      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa98:	e001      	b.n	800aa9e <HAL_COMP_Init+0x126>
 800aa9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa9e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	f003 0303 	and.w	r3, r3, #3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80b6 	beq.w	800ac1a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	f003 0310 	and.w	r3, r3, #16
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d011      	beq.n	800aade <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a6e      	ldr	r2, [pc, #440]	; (800ac78 <HAL_COMP_Init+0x300>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d004      	beq.n	800aace <HAL_COMP_Init+0x156>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a6c      	ldr	r2, [pc, #432]	; (800ac7c <HAL_COMP_Init+0x304>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d103      	bne.n	800aad6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800aace:	6938      	ldr	r0, [r7, #16]
 800aad0:	f7ff fe80 	bl	800a7d4 <LL_EXTI_EnableRisingTrig_32_63>
 800aad4:	e014      	b.n	800ab00 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800aad6:	6938      	ldr	r0, [r7, #16]
 800aad8:	f7ff fe6a 	bl	800a7b0 <LL_EXTI_EnableRisingTrig_0_31>
 800aadc:	e010      	b.n	800ab00 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a65      	ldr	r2, [pc, #404]	; (800ac78 <HAL_COMP_Init+0x300>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d004      	beq.n	800aaf2 <HAL_COMP_Init+0x17a>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a63      	ldr	r2, [pc, #396]	; (800ac7c <HAL_COMP_Init+0x304>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d103      	bne.n	800aafa <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800aaf2:	6938      	ldr	r0, [r7, #16]
 800aaf4:	f7ff fe94 	bl	800a820 <LL_EXTI_DisableRisingTrig_32_63>
 800aaf8:	e002      	b.n	800ab00 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800aafa:	6938      	ldr	r0, [r7, #16]
 800aafc:	f7ff fe7c 	bl	800a7f8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d011      	beq.n	800ab30 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a59      	ldr	r2, [pc, #356]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d004      	beq.n	800ab20 <HAL_COMP_Init+0x1a8>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a58      	ldr	r2, [pc, #352]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d103      	bne.n	800ab28 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800ab20:	6938      	ldr	r0, [r7, #16]
 800ab22:	f7ff fea3 	bl	800a86c <LL_EXTI_EnableFallingTrig_32_63>
 800ab26:	e014      	b.n	800ab52 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ab28:	6938      	ldr	r0, [r7, #16]
 800ab2a:	f7ff fe8d 	bl	800a848 <LL_EXTI_EnableFallingTrig_0_31>
 800ab2e:	e010      	b.n	800ab52 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a50      	ldr	r2, [pc, #320]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d004      	beq.n	800ab44 <HAL_COMP_Init+0x1cc>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a4f      	ldr	r2, [pc, #316]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d103      	bne.n	800ab4c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ab44:	6938      	ldr	r0, [r7, #16]
 800ab46:	f7ff feb7 	bl	800a8b8 <LL_EXTI_DisableFallingTrig_32_63>
 800ab4a:	e002      	b.n	800ab52 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800ab4c:	6938      	ldr	r0, [r7, #16]
 800ab4e:	f7ff fe9f 	bl	800a890 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a48      	ldr	r2, [pc, #288]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d004      	beq.n	800ab66 <HAL_COMP_Init+0x1ee>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a46      	ldr	r2, [pc, #280]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d103      	bne.n	800ab6e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ab66:	6938      	ldr	r0, [r7, #16]
 800ab68:	f7ff fef6 	bl	800a958 <LL_EXTI_ClearFlag_32_63>
 800ab6c:	e002      	b.n	800ab74 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ab6e:	6938      	ldr	r0, [r7, #16]
 800ab70:	f7ff fee2 	bl	800a938 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d011      	beq.n	800aba4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a3c      	ldr	r2, [pc, #240]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_COMP_Init+0x21c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3b      	ldr	r2, [pc, #236]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d103      	bne.n	800ab9c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800ab94:	6938      	ldr	r0, [r7, #16]
 800ab96:	f7ff fdd1 	bl	800a73c <LL_EXTI_EnableEvent_32_63>
 800ab9a:	e014      	b.n	800abc6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800ab9c:	6938      	ldr	r0, [r7, #16]
 800ab9e:	f7ff fdbb 	bl	800a718 <LL_EXTI_EnableEvent_0_31>
 800aba2:	e010      	b.n	800abc6 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a33      	ldr	r2, [pc, #204]	; (800ac78 <HAL_COMP_Init+0x300>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d004      	beq.n	800abb8 <HAL_COMP_Init+0x240>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a32      	ldr	r2, [pc, #200]	; (800ac7c <HAL_COMP_Init+0x304>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d103      	bne.n	800abc0 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800abb8:	6938      	ldr	r0, [r7, #16]
 800abba:	f7ff fde5 	bl	800a788 <LL_EXTI_DisableEvent_32_63>
 800abbe:	e002      	b.n	800abc6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800abc0:	6938      	ldr	r0, [r7, #16]
 800abc2:	f7ff fdcd 	bl	800a760 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d011      	beq.n	800abf6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a28      	ldr	r2, [pc, #160]	; (800ac78 <HAL_COMP_Init+0x300>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d004      	beq.n	800abe6 <HAL_COMP_Init+0x26e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a26      	ldr	r2, [pc, #152]	; (800ac7c <HAL_COMP_Init+0x304>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d103      	bne.n	800abee <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800abe6:	6938      	ldr	r0, [r7, #16]
 800abe8:	f7ff fd5c 	bl	800a6a4 <LL_EXTI_EnableIT_32_63>
 800abec:	e04b      	b.n	800ac86 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800abee:	6938      	ldr	r0, [r7, #16]
 800abf0:	f7ff fd46 	bl	800a680 <LL_EXTI_EnableIT_0_31>
 800abf4:	e047      	b.n	800ac86 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a1f      	ldr	r2, [pc, #124]	; (800ac78 <HAL_COMP_Init+0x300>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_COMP_Init+0x292>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a1d      	ldr	r2, [pc, #116]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d103      	bne.n	800ac12 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800ac0a:	6938      	ldr	r0, [r7, #16]
 800ac0c:	f7ff fd70 	bl	800a6f0 <LL_EXTI_DisableIT_32_63>
 800ac10:	e039      	b.n	800ac86 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800ac12:	6938      	ldr	r0, [r7, #16]
 800ac14:	f7ff fd58 	bl	800a6c8 <LL_EXTI_DisableIT_0_31>
 800ac18:	e035      	b.n	800ac86 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_COMP_Init+0x2b6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a14      	ldr	r2, [pc, #80]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d103      	bne.n	800ac36 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800ac2e:	6938      	ldr	r0, [r7, #16]
 800ac30:	f7ff fdaa 	bl	800a788 <LL_EXTI_DisableEvent_32_63>
 800ac34:	e002      	b.n	800ac3c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800ac36:	6938      	ldr	r0, [r7, #16]
 800ac38:	f7ff fd92 	bl	800a760 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a0d      	ldr	r2, [pc, #52]	; (800ac78 <HAL_COMP_Init+0x300>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d004      	beq.n	800ac50 <HAL_COMP_Init+0x2d8>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a0c      	ldr	r2, [pc, #48]	; (800ac7c <HAL_COMP_Init+0x304>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d117      	bne.n	800ac80 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800ac50:	6938      	ldr	r0, [r7, #16]
 800ac52:	f7ff fd4d 	bl	800a6f0 <LL_EXTI_DisableIT_32_63>
 800ac56:	e016      	b.n	800ac86 <HAL_COMP_Init+0x30e>
 800ac58:	ff007e0f 	.word	0xff007e0f
 800ac5c:	20000c34 	.word	0x20000c34
 800ac60:	053e2d63 	.word	0x053e2d63
 800ac64:	40010200 	.word	0x40010200
 800ac68:	40010204 	.word	0x40010204
 800ac6c:	40010208 	.word	0x40010208
 800ac70:	4001020c 	.word	0x4001020c
 800ac74:	40010210 	.word	0x40010210
 800ac78:	40010214 	.word	0x40010214
 800ac7c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800ac80:	6938      	ldr	r0, [r7, #16]
 800ac82:	f7ff fd21 	bl	800a6c8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	7f5b      	ldrb	r3, [r3, #29]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800ac96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3720      	adds	r7, #32
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	73fb      	strb	r3, [r7, #15]
 800acb6:	e01d      	b.n	800acf4 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acc6:	d102      	bne.n	800acce <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	73fb      	strb	r3, [r7, #15]
 800accc:	e012      	b.n	800acf4 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7f5b      	ldrb	r3, [r3, #29]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0201 	bic.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	775a      	strb	r2, [r3, #29]
 800acee:	e001      	b.n	800acf4 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a2f      	ldr	r2, [pc, #188]	; (800add0 <HAL_COMP_IRQHandler+0xcc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d028      	beq.n	800ad68 <HAL_COMP_IRQHandler+0x64>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a2e      	ldr	r2, [pc, #184]	; (800add4 <HAL_COMP_IRQHandler+0xd0>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d020      	beq.n	800ad62 <HAL_COMP_IRQHandler+0x5e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a2c      	ldr	r2, [pc, #176]	; (800add8 <HAL_COMP_IRQHandler+0xd4>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d018      	beq.n	800ad5c <HAL_COMP_IRQHandler+0x58>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a2b      	ldr	r2, [pc, #172]	; (800addc <HAL_COMP_IRQHandler+0xd8>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d010      	beq.n	800ad56 <HAL_COMP_IRQHandler+0x52>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a29      	ldr	r2, [pc, #164]	; (800ade0 <HAL_COMP_IRQHandler+0xdc>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d008      	beq.n	800ad50 <HAL_COMP_IRQHandler+0x4c>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <HAL_COMP_IRQHandler+0xe0>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d101      	bne.n	800ad4c <HAL_COMP_IRQHandler+0x48>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e00f      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e00d      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad54:	e00a      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad5a:	e007      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ad60:	e004      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad66:	e001      	b.n	800ad6c <HAL_COMP_IRQHandler+0x68>
 800ad68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad6c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a1b      	ldr	r2, [pc, #108]	; (800ade4 <HAL_COMP_IRQHandler+0xe0>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d004      	beq.n	800ad86 <HAL_COMP_IRQHandler+0x82>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a19      	ldr	r2, [pc, #100]	; (800ade8 <HAL_COMP_IRQHandler+0xe4>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d108      	bne.n	800ad98 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ad86:	68b8      	ldr	r0, [r7, #8]
 800ad88:	f7ff fdc0 	bl	800a90c <LL_EXTI_IsActiveFlag_32_63>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800ad92:	2302      	movs	r3, #2
 800ad94:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ad96:	e007      	b.n	800ada8 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800ad98:	68b8      	ldr	r0, [r7, #8]
 800ad9a:	f7ff fda1 	bl	800a8e0 <LL_EXTI_IsActiveFlag_0_31>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800ada4:	2301      	movs	r3, #1
 800ada6:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d103      	bne.n	800adbc <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800adb4:	68b8      	ldr	r0, [r7, #8]
 800adb6:	f7ff fdcf 	bl	800a958 <LL_EXTI_ClearFlag_32_63>
 800adba:	e002      	b.n	800adc2 <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800adbc:	68b8      	ldr	r0, [r7, #8]
 800adbe:	f7ff fdbb 	bl	800a938 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fb fce6 	bl	8006794 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	40010200 	.word	0x40010200
 800add4:	40010204 	.word	0x40010204
 800add8:	40010208 	.word	0x40010208
 800addc:	4001020c 	.word	0x4001020c
 800ade0:	40010210 	.word	0x40010210
 800ade4:	40010214 	.word	0x40010214
 800ade8:	40010218 	.word	0x40010218

0800adec <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	0f9b      	lsrs	r3, r3, #30
 800adfc:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <__NVIC_SetPriorityGrouping>:
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae28:	4013      	ands	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae3e:	4a04      	ldr	r2, [pc, #16]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	60d3      	str	r3, [r2, #12]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	e000ed00 	.word	0xe000ed00

0800ae54 <__NVIC_GetPriorityGrouping>:
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__NVIC_GetPriorityGrouping+0x18>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	0a1b      	lsrs	r3, r3, #8
 800ae5e:	f003 0307 	and.w	r3, r3, #7
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	e000ed00 	.word	0xe000ed00

0800ae70 <__NVIC_EnableIRQ>:
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	db0b      	blt.n	800ae9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	f003 021f 	and.w	r2, r3, #31
 800ae88:	4907      	ldr	r1, [pc, #28]	; (800aea8 <__NVIC_EnableIRQ+0x38>)
 800ae8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae8e:	095b      	lsrs	r3, r3, #5
 800ae90:	2001      	movs	r0, #1
 800ae92:	fa00 f202 	lsl.w	r2, r0, r2
 800ae96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ae9a:	bf00      	nop
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	e000e100 	.word	0xe000e100

0800aeac <__NVIC_DisableIRQ>:
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aeb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	db10      	blt.n	800aee0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f003 021f 	and.w	r2, r3, #31
 800aec4:	4909      	ldr	r1, [pc, #36]	; (800aeec <__NVIC_DisableIRQ+0x40>)
 800aec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	2001      	movs	r0, #1
 800aece:	fa00 f202 	lsl.w	r2, r0, r2
 800aed2:	3320      	adds	r3, #32
 800aed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aedc:	f3bf 8f6f 	isb	sy
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	e000e100 	.word	0xe000e100

0800aef0 <__NVIC_SetPriority>:
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	6039      	str	r1, [r7, #0]
 800aefa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aefc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af00:	2b00      	cmp	r3, #0
 800af02:	db0a      	blt.n	800af1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	b2da      	uxtb	r2, r3
 800af08:	490c      	ldr	r1, [pc, #48]	; (800af3c <__NVIC_SetPriority+0x4c>)
 800af0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af0e:	0112      	lsls	r2, r2, #4
 800af10:	b2d2      	uxtb	r2, r2
 800af12:	440b      	add	r3, r1
 800af14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af18:	e00a      	b.n	800af30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	4908      	ldr	r1, [pc, #32]	; (800af40 <__NVIC_SetPriority+0x50>)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	3b04      	subs	r3, #4
 800af28:	0112      	lsls	r2, r2, #4
 800af2a:	b2d2      	uxtb	r2, r2
 800af2c:	440b      	add	r3, r1
 800af2e:	761a      	strb	r2, [r3, #24]
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	e000e100 	.word	0xe000e100
 800af40:	e000ed00 	.word	0xe000ed00

0800af44 <NVIC_EncodePriority>:
{
 800af44:	b480      	push	{r7}
 800af46:	b089      	sub	sp, #36	; 0x24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	f1c3 0307 	rsb	r3, r3, #7
 800af5e:	2b04      	cmp	r3, #4
 800af60:	bf28      	it	cs
 800af62:	2304      	movcs	r3, #4
 800af64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	3304      	adds	r3, #4
 800af6a:	2b06      	cmp	r3, #6
 800af6c:	d902      	bls.n	800af74 <NVIC_EncodePriority+0x30>
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	3b03      	subs	r3, #3
 800af72:	e000      	b.n	800af76 <NVIC_EncodePriority+0x32>
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	fa02 f303 	lsl.w	r3, r2, r3
 800af82:	43da      	mvns	r2, r3
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	401a      	ands	r2, r3
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	fa01 f303 	lsl.w	r3, r1, r3
 800af96:	43d9      	mvns	r1, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af9c:	4313      	orrs	r3, r2
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3724      	adds	r7, #36	; 0x24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <SysTick_Config>:
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afbc:	d301      	bcc.n	800afc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800afbe:	2301      	movs	r3, #1
 800afc0:	e00f      	b.n	800afe2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800afc2:	4a0a      	ldr	r2, [pc, #40]	; (800afec <SysTick_Config+0x40>)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800afca:	210f      	movs	r1, #15
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afd0:	f7ff ff8e 	bl	800aef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <SysTick_Config+0x40>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800afda:	4b04      	ldr	r3, [pc, #16]	; (800afec <SysTick_Config+0x40>)
 800afdc:	2207      	movs	r2, #7
 800afde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	e000e010 	.word	0xe000e010

0800aff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff ff07 	bl	800ae0c <__NVIC_SetPriorityGrouping>
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	4603      	mov	r3, r0
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	607a      	str	r2, [r7, #4]
 800b012:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b014:	f7ff ff1e 	bl	800ae54 <__NVIC_GetPriorityGrouping>
 800b018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	6978      	ldr	r0, [r7, #20]
 800b020:	f7ff ff90 	bl	800af44 <NVIC_EncodePriority>
 800b024:	4602      	mov	r2, r0
 800b026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff ff5f 	bl	800aef0 <__NVIC_SetPriority>
}
 800b032:	bf00      	nop
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	4603      	mov	r3, r0
 800b042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff ff11 	bl	800ae70 <__NVIC_EnableIRQ>
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	4603      	mov	r3, r0
 800b05e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ff21 	bl	800aeac <__NVIC_DisableIRQ>
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff ff96 	bl	800afac <SysTick_Config>
 800b080:	4603      	mov	r3, r0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b082      	sub	sp, #8
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e014      	b.n	800b0c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	791b      	ldrb	r3, [r3, #4]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d105      	bne.n	800b0b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fc fbed 	bl	800788c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2202      	movs	r2, #2
 800b0b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	795b      	ldrb	r3, [r3, #5]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d101      	bne.n	800b0e4 <HAL_DAC_Start+0x16>
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	e043      	b.n	800b16c <HAL_DAC_Start+0x9e>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6819      	ldr	r1, [r3, #0]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f003 0310 	and.w	r3, r3, #16
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	409a      	lsls	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b108:	2001      	movs	r0, #1
 800b10a:	f7fe f87f 	bl	800920c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10f      	bne.n	800b134 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d11d      	bne.n	800b15e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f042 0201 	orr.w	r2, r2, #1
 800b130:	605a      	str	r2, [r3, #4]
 800b132:	e014      	b.n	800b15e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2102      	movs	r1, #2
 800b146:	fa01 f303 	lsl.w	r3, r1, r3
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d107      	bne.n	800b15e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f042 0202 	orr.w	r2, r2, #2
 800b15c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	795b      	ldrb	r3, [r3, #5]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d101      	bne.n	800b192 <HAL_DAC_Start_DMA+0x1e>
 800b18e:	2302      	movs	r3, #2
 800b190:	e0a1      	b.n	800b2d6 <HAL_DAC_Start_DMA+0x162>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2202      	movs	r2, #2
 800b19c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d12a      	bne.n	800b1fa <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	4a4d      	ldr	r2, [pc, #308]	; (800b2e0 <HAL_DAC_Start_DMA+0x16c>)
 800b1aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	4a4c      	ldr	r2, [pc, #304]	; (800b2e4 <HAL_DAC_Start_DMA+0x170>)
 800b1b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	4a4b      	ldr	r2, [pc, #300]	; (800b2e8 <HAL_DAC_Start_DMA+0x174>)
 800b1ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1ca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d009      	beq.n	800b1e6 <HAL_DAC_Start_DMA+0x72>
 800b1d2:	2b08      	cmp	r3, #8
 800b1d4:	d00c      	beq.n	800b1f0 <HAL_DAC_Start_DMA+0x7c>
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d000      	beq.n	800b1dc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b1da:	e039      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	613b      	str	r3, [r7, #16]
        break;
 800b1e4:	e034      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	613b      	str	r3, [r7, #16]
        break;
 800b1ee:	e02f      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3310      	adds	r3, #16
 800b1f6:	613b      	str	r3, [r7, #16]
        break;
 800b1f8:	e02a      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	4a3b      	ldr	r2, [pc, #236]	; (800b2ec <HAL_DAC_Start_DMA+0x178>)
 800b200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	4a3a      	ldr	r2, [pc, #232]	; (800b2f0 <HAL_DAC_Start_DMA+0x17c>)
 800b208:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	4a39      	ldr	r2, [pc, #228]	; (800b2f4 <HAL_DAC_Start_DMA+0x180>)
 800b210:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b220:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	2b04      	cmp	r3, #4
 800b226:	d009      	beq.n	800b23c <HAL_DAC_Start_DMA+0xc8>
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d00c      	beq.n	800b246 <HAL_DAC_Start_DMA+0xd2>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d000      	beq.n	800b232 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b230:	e00e      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3314      	adds	r3, #20
 800b238:	613b      	str	r3, [r7, #16]
        break;
 800b23a:	e009      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3318      	adds	r3, #24
 800b242:	613b      	str	r3, [r7, #16]
        break;
 800b244:	e004      	b.n	800b250 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	331c      	adds	r3, #28
 800b24c:	613b      	str	r3, [r7, #16]
        break;
 800b24e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d111      	bne.n	800b27a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b264:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6898      	ldr	r0, [r3, #8]
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	f000 fbd2 	bl	800ba18 <HAL_DMA_Start_IT>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]
 800b278:	e010      	b.n	800b29c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b288:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	68d8      	ldr	r0, [r3, #12]
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	f000 fbc0 	bl	800ba18 <HAL_DMA_Start_IT>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10f      	bne.n	800b2c8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6819      	ldr	r1, [r3, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f003 0310 	and.w	r3, r3, #16
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	409a      	lsls	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f7fd ffa3 	bl	800920c <HAL_Delay>
 800b2c6:	e005      	b.n	800b2d4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	f043 0204 	orr.w	r2, r3, #4
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800b7b5 	.word	0x0800b7b5
 800b2e4:	0800b7d7 	.word	0x0800b7d7
 800b2e8:	0800b7f3 	.word	0x0800b7f3
 800b2ec:	0800b85d 	.word	0x0800b85d
 800b2f0:	0800b87f 	.word	0x0800b87f
 800b2f4:	0800b89b 	.word	0x0800b89b

0800b2f8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6819      	ldr	r1, [r3, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f003 0310 	and.w	r3, r3, #16
 800b30e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b312:	fa02 f303 	lsl.w	r3, r2, r3
 800b316:	43da      	mvns	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	400a      	ands	r2, r1
 800b31e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6819      	ldr	r1, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2201      	movs	r2, #1
 800b32e:	fa02 f303 	lsl.w	r3, r2, r3
 800b332:	43da      	mvns	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	400a      	ands	r2, r1
 800b33a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b33c:	2001      	movs	r0, #1
 800b33e:	f7fd ff65 	bl	800920c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10f      	bne.n	800b368 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fbde 	bl	800bb0e <HAL_DMA_Abort>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	e00e      	b.n	800b386 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fbce 	bl	800bb0e <HAL_DMA_Abort>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b384:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2204      	movs	r2, #4
 800b390:	711a      	strb	r2, [r3, #4]
 800b392:	e002      	b.n	800b39a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d105      	bne.n	800b3d4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	617b      	str	r3, [r7, #20]
 800b3d2:	e004      	b.n	800b3de <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4413      	add	r3, r2
 800b3da:	3314      	adds	r3, #20
 800b3dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d103      	bne.n	800b448 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	e002      	b.n	800b44e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
	...

0800b45c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b468:	2300      	movs	r3, #0
 800b46a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	795b      	ldrb	r3, [r3, #5]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_DAC_ConfigChannel+0x1c>
 800b474:	2302      	movs	r3, #2
 800b476:	e194      	b.n	800b7a2 <HAL_DAC_ConfigChannel+0x346>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2202      	movs	r2, #2
 800b482:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d174      	bne.n	800b576 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d137      	bne.n	800b502 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b492:	f7fd feaf 	bl	80091f4 <HAL_GetTick>
 800b496:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b498:	e011      	b.n	800b4be <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b49a:	f7fd feab 	bl	80091f4 <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d90a      	bls.n	800b4be <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	f043 0208 	orr.w	r2, r3, #8
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2203      	movs	r2, #3
 800b4b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e171      	b.n	800b7a2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e6      	bne.n	800b49a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	f7fd fe9d 	bl	800920c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4da:	641a      	str	r2, [r3, #64]	; 0x40
 800b4dc:	e01e      	b.n	800b51c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b4de:	f7fd fe89 	bl	80091f4 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d90a      	bls.n	800b502 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	f043 0208 	orr.w	r2, r3, #8
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e14f      	b.n	800b7a2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dbe8      	blt.n	800b4de <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b50c:	2001      	movs	r0, #1
 800b50e:	f7fd fe7d 	bl	800920c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b51a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b52c:	fa01 f303 	lsl.w	r3, r1, r3
 800b530:	43db      	mvns	r3, r3
 800b532:	ea02 0103 	and.w	r1, r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f003 0310 	and.w	r3, r3, #16
 800b540:	409a      	lsls	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	21ff      	movs	r1, #255	; 0xff
 800b558:	fa01 f303 	lsl.w	r3, r1, r3
 800b55c:	43db      	mvns	r3, r3
 800b55e:	ea02 0103 	and.w	r1, r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	409a      	lsls	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d11d      	bne.n	800b5ba <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f003 0310 	and.w	r3, r3, #16
 800b58c:	221f      	movs	r2, #31
 800b58e:	fa02 f303 	lsl.w	r3, r2, r3
 800b592:	43db      	mvns	r3, r3
 800b594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b596:	4013      	ands	r3, r2
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2207      	movs	r2, #7
 800b5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ce:	43db      	mvns	r3, r3
 800b5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d002      	beq.n	800b5e8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	623b      	str	r3, [r7, #32]
 800b5e6:	e011      	b.n	800b60c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	623b      	str	r3, [r7, #32]
 800b5f8:	e008      	b.n	800b60c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b602:	2301      	movs	r3, #1
 800b604:	623b      	str	r3, [r7, #32]
 800b606:	e001      	b.n	800b60c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b608:	2300      	movs	r3, #0
 800b60a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	4313      	orrs	r3, r2
 800b616:	6a3a      	ldr	r2, [r7, #32]
 800b618:	4313      	orrs	r3, r2
 800b61a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f003 0310 	and.w	r3, r3, #16
 800b622:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b626:	fa02 f303 	lsl.w	r3, r2, r3
 800b62a:	43db      	mvns	r3, r3
 800b62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62e:	4013      	ands	r3, r2
 800b630:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	791b      	ldrb	r3, [r3, #4]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d102      	bne.n	800b640 <HAL_DAC_ConfigChannel+0x1e4>
 800b63a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b63e:	e000      	b.n	800b642 <HAL_DAC_ConfigChannel+0x1e6>
 800b640:	2300      	movs	r3, #0
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	4313      	orrs	r3, r2
 800b646:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b652:	fa02 f303 	lsl.w	r3, r2, r3
 800b656:	43db      	mvns	r3, r3
 800b658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65a:	4013      	ands	r3, r2
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	795b      	ldrb	r3, [r3, #5]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d102      	bne.n	800b66c <HAL_DAC_ConfigChannel+0x210>
 800b666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b66a:	e000      	b.n	800b66e <HAL_DAC_ConfigChannel+0x212>
 800b66c:	2300      	movs	r3, #0
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	4313      	orrs	r3, r2
 800b672:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b02      	cmp	r3, #2
 800b682:	d114      	bne.n	800b6ae <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b684:	f001 fc28 	bl	800ced8 <HAL_RCC_GetHCLKFreq>
 800b688:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	4a47      	ldr	r2, [pc, #284]	; (800b7ac <HAL_DAC_ConfigChannel+0x350>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d904      	bls.n	800b69c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
 800b69a:	e00d      	b.n	800b6b8 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	4a44      	ldr	r2, [pc, #272]	; (800b7b0 <HAL_DAC_ConfigChannel+0x354>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d909      	bls.n	800b6b8 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ac:	e004      	b.n	800b6b8 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6819      	ldr	r1, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f003 0310 	and.w	r3, r3, #16
 800b6de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e6:	43da      	mvns	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	400a      	ands	r2, r1
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f003 0310 	and.w	r3, r3, #16
 800b6fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b702:	fa02 f303 	lsl.w	r3, r2, r3
 800b706:	43db      	mvns	r3, r3
 800b708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b70a:	4013      	ands	r3, r2
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f003 0310 	and.w	r3, r3, #16
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	fa02 f303 	lsl.w	r3, r2, r3
 800b720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b722:	4313      	orrs	r3, r2
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f003 0310 	and.w	r3, r3, #16
 800b73a:	22c0      	movs	r2, #192	; 0xc0
 800b73c:	fa02 f303 	lsl.w	r3, r2, r3
 800b740:	43da      	mvns	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	400a      	ands	r2, r1
 800b748:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	f003 030f 	and.w	r3, r3, #15
 800b754:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	089b      	lsrs	r3, r3, #2
 800b75c:	021b      	lsls	r3, r3, #8
 800b75e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	4313      	orrs	r3, r2
 800b766:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f003 0310 	and.w	r3, r3, #16
 800b774:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b778:	fa01 f303 	lsl.w	r3, r1, r3
 800b77c:	43db      	mvns	r3, r3
 800b77e:	ea02 0103 	and.w	r1, r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	409a      	lsls	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	430a      	orrs	r2, r1
 800b792:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2201      	movs	r2, #1
 800b798:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3728      	adds	r7, #40	; 0x28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	09896800 	.word	0x09896800
 800b7b0:	04c4b400 	.word	0x04c4b400

0800b7b4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fe16 	bl	800b3f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	711a      	strb	r2, [r3, #4]
}
 800b7ce:	bf00      	nop
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff fe0f 	bl	800b408 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f043 0204 	orr.w	r2, r3, #4
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7ff fe05 	bl	800b41c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	711a      	strb	r2, [r3, #4]
}
 800b818:	bf00      	nop
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff ffd8 	bl	800b820 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	711a      	strb	r2, [r3, #4]
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f7ff ffd1 	bl	800b834 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	f043 0204 	orr.w	r2, r3, #4
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff ffc7 	bl	800b848 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	711a      	strb	r2, [r3, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e08d      	b.n	800b9f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b47      	ldr	r3, [pc, #284]	; (800ba00 <HAL_DMA_Init+0x138>)
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d80f      	bhi.n	800b906 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b45      	ldr	r3, [pc, #276]	; (800ba04 <HAL_DMA_Init+0x13c>)
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4a45      	ldr	r2, [pc, #276]	; (800ba08 <HAL_DMA_Init+0x140>)
 800b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f6:	091b      	lsrs	r3, r3, #4
 800b8f8:	009a      	lsls	r2, r3, #2
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a42      	ldr	r2, [pc, #264]	; (800ba0c <HAL_DMA_Init+0x144>)
 800b902:	641a      	str	r2, [r3, #64]	; 0x40
 800b904:	e00e      	b.n	800b924 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b40      	ldr	r3, [pc, #256]	; (800ba10 <HAL_DMA_Init+0x148>)
 800b90e:	4413      	add	r3, r2
 800b910:	4a3d      	ldr	r2, [pc, #244]	; (800ba08 <HAL_DMA_Init+0x140>)
 800b912:	fba2 2303 	umull	r2, r3, r2, r3
 800b916:	091b      	lsrs	r3, r3, #4
 800b918:	009a      	lsls	r2, r3, #2
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a3c      	ldr	r2, [pc, #240]	; (800ba14 <HAL_DMA_Init+0x14c>)
 800b922:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fa76 	bl	800be68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b984:	d102      	bne.n	800b98c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b994:	b2d2      	uxtb	r2, r2
 800b996:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d010      	beq.n	800b9cc <HAL_DMA_Init+0x104>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d80c      	bhi.n	800b9cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fa96 	bl	800bee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b9c8:	605a      	str	r2, [r3, #4]
 800b9ca:	e008      	b.n	800b9de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	40020407 	.word	0x40020407
 800ba04:	bffdfff8 	.word	0xbffdfff8
 800ba08:	cccccccd 	.word	0xcccccccd
 800ba0c:	40020000 	.word	0x40020000
 800ba10:	bffdfbf8 	.word	0xbffdfbf8
 800ba14:	40020400 	.word	0x40020400

0800ba18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <HAL_DMA_Start_IT+0x20>
 800ba34:	2302      	movs	r3, #2
 800ba36:	e066      	b.n	800bb06 <HAL_DMA_Start_IT+0xee>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d155      	bne.n	800baf8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 0201 	bic.w	r2, r2, #1
 800ba68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	68b9      	ldr	r1, [r7, #8]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f9bb 	bl	800bdec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d008      	beq.n	800ba90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 020e 	orr.w	r2, r2, #14
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e00f      	b.n	800bab0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 0204 	bic.w	r2, r2, #4
 800ba9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f042 020a 	orr.w	r2, r2, #10
 800baae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d007      	beq.n	800bace <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bacc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d007      	beq.n	800bae6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bae4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f042 0201 	orr.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	e005      	b.n	800bb04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bb00:	2302      	movs	r3, #2
 800bb02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d005      	beq.n	800bb32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73fb      	strb	r3, [r7, #15]
 800bb30:	e037      	b.n	800bba2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f022 020e 	bic.w	r2, r2, #14
 800bb40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f022 0201 	bic.w	r2, r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb66:	f003 021f 	and.w	r2, r3, #31
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	2101      	movs	r1, #1
 800bb70:	fa01 f202 	lsl.w	r2, r1, r2
 800bb74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bb7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00c      	beq.n	800bba2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bba0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d00d      	beq.n	800bbf4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2204      	movs	r2, #4
 800bbdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	73fb      	strb	r3, [r7, #15]
 800bbf2:	e047      	b.n	800bc84 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 020e 	bic.w	r2, r2, #14
 800bc02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0201 	bic.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc28:	f003 021f 	and.w	r2, r3, #31
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc30:	2101      	movs	r1, #1
 800bc32:	fa01 f202 	lsl.w	r2, r1, r2
 800bc36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bc40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00c      	beq.n	800bc64 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bc62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
    }
  }
  return status;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b084      	sub	sp, #16
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcaa:	f003 031f 	and.w	r3, r3, #31
 800bcae:	2204      	movs	r2, #4
 800bcb0:	409a      	lsls	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d026      	beq.n	800bd08 <HAL_DMA_IRQHandler+0x7a>
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d021      	beq.n	800bd08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d107      	bne.n	800bce2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 0204 	bic.w	r2, r2, #4
 800bce0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce6:	f003 021f 	and.w	r2, r3, #31
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	2104      	movs	r1, #4
 800bcf0:	fa01 f202 	lsl.w	r2, r1, r2
 800bcf4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d071      	beq.n	800bde2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bd06:	e06c      	b.n	800bde2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0c:	f003 031f 	and.w	r3, r3, #31
 800bd10:	2202      	movs	r2, #2
 800bd12:	409a      	lsls	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4013      	ands	r3, r2
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d02e      	beq.n	800bd7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d029      	beq.n	800bd7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0320 	and.w	r3, r3, #32
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 020a 	bic.w	r2, r2, #10
 800bd42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd50:	f003 021f 	and.w	r2, r3, #31
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	2102      	movs	r1, #2
 800bd5a:	fa01 f202 	lsl.w	r2, r1, r2
 800bd5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d038      	beq.n	800bde2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bd78:	e033      	b.n	800bde2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd7e:	f003 031f 	and.w	r3, r3, #31
 800bd82:	2208      	movs	r2, #8
 800bd84:	409a      	lsls	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d02a      	beq.n	800bde4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d025      	beq.n	800bde4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 020e 	bic.w	r2, r2, #14
 800bda6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdac:	f003 021f 	and.w	r2, r3, #31
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	fa01 f202 	lsl.w	r2, r1, r2
 800bdba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d004      	beq.n	800bde4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bde2:	bf00      	nop
 800bde4:	bf00      	nop
}
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d004      	beq.n	800be16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1a:	f003 021f 	and.w	r2, r3, #31
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	2101      	movs	r1, #1
 800be24:	fa01 f202 	lsl.w	r2, r1, r2
 800be28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	2b10      	cmp	r3, #16
 800be38:	d108      	bne.n	800be4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800be4a:	e007      	b.n	800be5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	60da      	str	r2, [r3, #12]
}
 800be5c:	bf00      	nop
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	4b16      	ldr	r3, [pc, #88]	; (800bed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800be78:	429a      	cmp	r2, r3
 800be7a:	d802      	bhi.n	800be82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800be7c:	4b15      	ldr	r3, [pc, #84]	; (800bed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800be7e:	617b      	str	r3, [r7, #20]
 800be80:	e001      	b.n	800be86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800be84:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	3b08      	subs	r3, #8
 800be92:	4a12      	ldr	r2, [pc, #72]	; (800bedc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800be94:	fba2 2303 	umull	r2, r3, r2, r3
 800be98:	091b      	lsrs	r3, r3, #4
 800be9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea0:	089b      	lsrs	r3, r3, #2
 800bea2:	009a      	lsls	r2, r3, #2
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	4413      	add	r3, r2
 800bea8:	461a      	mov	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a0b      	ldr	r2, [pc, #44]	; (800bee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800beb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f003 031f 	and.w	r3, r3, #31
 800beba:	2201      	movs	r2, #1
 800bebc:	409a      	lsls	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bec2:	bf00      	nop
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	40020407 	.word	0x40020407
 800bed4:	40020800 	.word	0x40020800
 800bed8:	40020820 	.word	0x40020820
 800bedc:	cccccccd 	.word	0xcccccccd
 800bee0:	40020880 	.word	0x40020880

0800bee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	461a      	mov	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a08      	ldr	r2, [pc, #32]	; (800bf28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bf06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	f003 031f 	and.w	r3, r3, #31
 800bf10:	2201      	movs	r2, #1
 800bf12:	409a      	lsls	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	1000823f 	.word	0x1000823f
 800bf28:	40020940 	.word	0x40020940

0800bf2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf3a:	e15a      	b.n	800c1f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	2101      	movs	r1, #1
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	fa01 f303 	lsl.w	r3, r1, r3
 800bf48:	4013      	ands	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 814c 	beq.w	800c1ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d00b      	beq.n	800bf74 <HAL_GPIO_Init+0x48>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d007      	beq.n	800bf74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf68:	2b11      	cmp	r3, #17
 800bf6a:	d003      	beq.n	800bf74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b12      	cmp	r3, #18
 800bf72:	d130      	bne.n	800bfd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	2203      	movs	r2, #3
 800bf80:	fa02 f303 	lsl.w	r3, r2, r3
 800bf84:	43db      	mvns	r3, r3
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	fa02 f303 	lsl.w	r3, r2, r3
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bfaa:	2201      	movs	r2, #1
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	091b      	lsrs	r3, r3, #4
 800bfc0:	f003 0201 	and.w	r2, r3, #1
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	2203      	movs	r2, #3
 800bfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	fa02 f303 	lsl.w	r3, r2, r3
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d003      	beq.n	800c016 <HAL_GPIO_Init+0xea>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b12      	cmp	r3, #18
 800c014:	d123      	bne.n	800c05e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	08da      	lsrs	r2, r3, #3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3208      	adds	r2, #8
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	220f      	movs	r2, #15
 800c02e:	fa02 f303 	lsl.w	r3, r2, r3
 800c032:	43db      	mvns	r3, r3
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	4013      	ands	r3, r2
 800c038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	691a      	ldr	r2, [r3, #16]
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	fa02 f303 	lsl.w	r3, r2, r3
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	08da      	lsrs	r2, r3, #3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3208      	adds	r2, #8
 800c058:	6939      	ldr	r1, [r7, #16]
 800c05a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	2203      	movs	r2, #3
 800c06a:	fa02 f303 	lsl.w	r3, r2, r3
 800c06e:	43db      	mvns	r3, r3
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4013      	ands	r3, r2
 800c074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f003 0203 	and.w	r2, r3, #3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	fa02 f303 	lsl.w	r3, r2, r3
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	4313      	orrs	r3, r2
 800c08a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 80a6 	beq.w	800c1ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0a0:	4b5b      	ldr	r3, [pc, #364]	; (800c210 <HAL_GPIO_Init+0x2e4>)
 800c0a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0a4:	4a5a      	ldr	r2, [pc, #360]	; (800c210 <HAL_GPIO_Init+0x2e4>)
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	6613      	str	r3, [r2, #96]	; 0x60
 800c0ac:	4b58      	ldr	r3, [pc, #352]	; (800c210 <HAL_GPIO_Init+0x2e4>)
 800c0ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	60bb      	str	r3, [r7, #8]
 800c0b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0b8:	4a56      	ldr	r2, [pc, #344]	; (800c214 <HAL_GPIO_Init+0x2e8>)
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	089b      	lsrs	r3, r3, #2
 800c0be:	3302      	adds	r3, #2
 800c0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f003 0303 	and.w	r3, r3, #3
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	220f      	movs	r2, #15
 800c0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d4:	43db      	mvns	r3, r3
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	4013      	ands	r3, r2
 800c0da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c0e2:	d01f      	beq.n	800c124 <HAL_GPIO_Init+0x1f8>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a4c      	ldr	r2, [pc, #304]	; (800c218 <HAL_GPIO_Init+0x2ec>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d019      	beq.n	800c120 <HAL_GPIO_Init+0x1f4>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a4b      	ldr	r2, [pc, #300]	; (800c21c <HAL_GPIO_Init+0x2f0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d013      	beq.n	800c11c <HAL_GPIO_Init+0x1f0>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a4a      	ldr	r2, [pc, #296]	; (800c220 <HAL_GPIO_Init+0x2f4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d00d      	beq.n	800c118 <HAL_GPIO_Init+0x1ec>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a49      	ldr	r2, [pc, #292]	; (800c224 <HAL_GPIO_Init+0x2f8>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d007      	beq.n	800c114 <HAL_GPIO_Init+0x1e8>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a48      	ldr	r2, [pc, #288]	; (800c228 <HAL_GPIO_Init+0x2fc>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d101      	bne.n	800c110 <HAL_GPIO_Init+0x1e4>
 800c10c:	2305      	movs	r3, #5
 800c10e:	e00a      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c110:	2306      	movs	r3, #6
 800c112:	e008      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c114:	2304      	movs	r3, #4
 800c116:	e006      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c118:	2303      	movs	r3, #3
 800c11a:	e004      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e002      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <HAL_GPIO_Init+0x1fa>
 800c124:	2300      	movs	r3, #0
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	f002 0203 	and.w	r2, r2, #3
 800c12c:	0092      	lsls	r2, r2, #2
 800c12e:	4093      	lsls	r3, r2
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	4313      	orrs	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c136:	4937      	ldr	r1, [pc, #220]	; (800c214 <HAL_GPIO_Init+0x2e8>)
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	089b      	lsrs	r3, r3, #2
 800c13c:	3302      	adds	r3, #2
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c144:	4b39      	ldr	r3, [pc, #228]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	43db      	mvns	r3, r3
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	4013      	ands	r3, r2
 800c152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4313      	orrs	r3, r2
 800c166:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c168:	4a30      	ldr	r2, [pc, #192]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c16e:	4b2f      	ldr	r3, [pc, #188]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	43db      	mvns	r3, r3
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	4013      	ands	r3, r2
 800c17c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c192:	4a26      	ldr	r2, [pc, #152]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c198:	4b24      	ldr	r3, [pc, #144]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c1bc:	4a1b      	ldr	r2, [pc, #108]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c1c2:	4b1a      	ldr	r3, [pc, #104]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	43db      	mvns	r3, r3
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c1e6:	4a11      	ldr	r2, [pc, #68]	; (800c22c <HAL_GPIO_Init+0x300>)
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f47f ae9d 	bne.w	800bf3c <HAL_GPIO_Init+0x10>
  }
}
 800c202:	bf00      	nop
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	40021000 	.word	0x40021000
 800c214:	40010000 	.word	0x40010000
 800c218:	48000400 	.word	0x48000400
 800c21c:	48000800 	.word	0x48000800
 800c220:	48000c00 	.word	0x48000c00
 800c224:	48001000 	.word	0x48001000
 800c228:	48001400 	.word	0x48001400
 800c22c:	40010400 	.word	0x40010400

0800c230 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c23e:	e0bd      	b.n	800c3bc <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c240:	2201      	movs	r2, #1
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	fa02 f303 	lsl.w	r3, r2, r3
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 80b0 	beq.w	800c3b6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c256:	4a60      	ldr	r2, [pc, #384]	; (800c3d8 <HAL_GPIO_DeInit+0x1a8>)
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	089b      	lsrs	r3, r3, #2
 800c25c:	3302      	adds	r3, #2
 800c25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c262:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	220f      	movs	r2, #15
 800c26e:	fa02 f303 	lsl.w	r3, r2, r3
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4013      	ands	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c27e:	d01f      	beq.n	800c2c0 <HAL_GPIO_DeInit+0x90>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a56      	ldr	r2, [pc, #344]	; (800c3dc <HAL_GPIO_DeInit+0x1ac>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d019      	beq.n	800c2bc <HAL_GPIO_DeInit+0x8c>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a55      	ldr	r2, [pc, #340]	; (800c3e0 <HAL_GPIO_DeInit+0x1b0>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d013      	beq.n	800c2b8 <HAL_GPIO_DeInit+0x88>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a54      	ldr	r2, [pc, #336]	; (800c3e4 <HAL_GPIO_DeInit+0x1b4>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d00d      	beq.n	800c2b4 <HAL_GPIO_DeInit+0x84>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a53      	ldr	r2, [pc, #332]	; (800c3e8 <HAL_GPIO_DeInit+0x1b8>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d007      	beq.n	800c2b0 <HAL_GPIO_DeInit+0x80>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a52      	ldr	r2, [pc, #328]	; (800c3ec <HAL_GPIO_DeInit+0x1bc>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d101      	bne.n	800c2ac <HAL_GPIO_DeInit+0x7c>
 800c2a8:	2305      	movs	r3, #5
 800c2aa:	e00a      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2ac:	2306      	movs	r3, #6
 800c2ae:	e008      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	e006      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e004      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	e002      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e000      	b.n	800c2c2 <HAL_GPIO_DeInit+0x92>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	f002 0203 	and.w	r2, r2, #3
 800c2c8:	0092      	lsls	r2, r2, #2
 800c2ca:	4093      	lsls	r3, r2
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d132      	bne.n	800c338 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c2d2:	4b47      	ldr	r3, [pc, #284]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	43db      	mvns	r3, r3
 800c2da:	4945      	ldr	r1, [pc, #276]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c2e0:	4b43      	ldr	r3, [pc, #268]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	43db      	mvns	r3, r3
 800c2e8:	4941      	ldr	r1, [pc, #260]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c2ee:	4b40      	ldr	r3, [pc, #256]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2f0:	689a      	ldr	r2, [r3, #8]
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	43db      	mvns	r3, r3
 800c2f6:	493e      	ldr	r1, [pc, #248]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c2fc:	4b3c      	ldr	r3, [pc, #240]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c2fe:	68da      	ldr	r2, [r3, #12]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	43db      	mvns	r3, r3
 800c304:	493a      	ldr	r1, [pc, #232]	; (800c3f0 <HAL_GPIO_DeInit+0x1c0>)
 800c306:	4013      	ands	r3, r2
 800c308:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	220f      	movs	r2, #15
 800c314:	fa02 f303 	lsl.w	r3, r2, r3
 800c318:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c31a:	4a2f      	ldr	r2, [pc, #188]	; (800c3d8 <HAL_GPIO_DeInit+0x1a8>)
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	089b      	lsrs	r3, r3, #2
 800c320:	3302      	adds	r3, #2
 800c322:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	43da      	mvns	r2, r3
 800c32a:	482b      	ldr	r0, [pc, #172]	; (800c3d8 <HAL_GPIO_DeInit+0x1a8>)
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	089b      	lsrs	r3, r3, #2
 800c330:	400a      	ands	r2, r1
 800c332:	3302      	adds	r3, #2
 800c334:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	2103      	movs	r1, #3
 800c342:	fa01 f303 	lsl.w	r3, r1, r3
 800c346:	431a      	orrs	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	08da      	lsrs	r2, r3, #3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3208      	adds	r2, #8
 800c354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f003 0307 	and.w	r3, r3, #7
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	220f      	movs	r2, #15
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	43db      	mvns	r3, r3
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	08d2      	lsrs	r2, r2, #3
 800c36c:	4019      	ands	r1, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	3208      	adds	r2, #8
 800c372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	2103      	movs	r1, #3
 800c380:	fa01 f303 	lsl.w	r3, r1, r3
 800c384:	43db      	mvns	r3, r3
 800c386:	401a      	ands	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	2101      	movs	r1, #1
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	fa01 f303 	lsl.w	r3, r1, r3
 800c398:	43db      	mvns	r3, r3
 800c39a:	401a      	ands	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	2103      	movs	r1, #3
 800c3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ae:	43db      	mvns	r3, r3
 800c3b0:	401a      	ands	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f af3b 	bne.w	800c240 <HAL_GPIO_DeInit+0x10>
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40010000 	.word	0x40010000
 800c3dc:	48000400 	.word	0x48000400
 800c3e0:	48000800 	.word	0x48000800
 800c3e4:	48000c00 	.word	0x48000c00
 800c3e8:	48001000 	.word	0x48001000
 800c3ec:	48001400 	.word	0x48001400
 800c3f0:	40010400 	.word	0x40010400

0800c3f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	807b      	strh	r3, [r7, #2]
 800c400:	4613      	mov	r3, r2
 800c402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c404:	787b      	ldrb	r3, [r7, #1]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c40a:	887a      	ldrh	r2, [r7, #2]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c410:	e002      	b.n	800c418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c412:	887a      	ldrh	r2, [r7, #2]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d141      	bne.n	800c4b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c432:	4b4b      	ldr	r3, [pc, #300]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c43e:	d131      	bne.n	800c4a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c440:	4b47      	ldr	r3, [pc, #284]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c446:	4a46      	ldr	r2, [pc, #280]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c44c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c450:	4b43      	ldr	r3, [pc, #268]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c458:	4a41      	ldr	r2, [pc, #260]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c45a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c45e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c460:	4b40      	ldr	r3, [pc, #256]	; (800c564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2232      	movs	r2, #50	; 0x32
 800c466:	fb02 f303 	mul.w	r3, r2, r3
 800c46a:	4a3f      	ldr	r2, [pc, #252]	; (800c568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c46c:	fba2 2303 	umull	r2, r3, r2, r3
 800c470:	0c9b      	lsrs	r3, r3, #18
 800c472:	3301      	adds	r3, #1
 800c474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c476:	e002      	b.n	800c47e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c47e:	4b38      	ldr	r3, [pc, #224]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c48a:	d102      	bne.n	800c492 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1f2      	bne.n	800c478 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c492:	4b33      	ldr	r3, [pc, #204]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49e:	d158      	bne.n	800c552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e057      	b.n	800c554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4a4:	4b2e      	ldr	r3, [pc, #184]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4aa:	4a2d      	ldr	r2, [pc, #180]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c4b4:	e04d      	b.n	800c552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4bc:	d141      	bne.n	800c542 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c4be:	4b28      	ldr	r3, [pc, #160]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c4c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ca:	d131      	bne.n	800c530 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4cc:	4b24      	ldr	r3, [pc, #144]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4d2:	4a23      	ldr	r2, [pc, #140]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4dc:	4b20      	ldr	r3, [pc, #128]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c4e4:	4a1e      	ldr	r2, [pc, #120]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c4ec:	4b1d      	ldr	r3, [pc, #116]	; (800c564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2232      	movs	r2, #50	; 0x32
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	4a1c      	ldr	r2, [pc, #112]	; (800c568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fc:	0c9b      	lsrs	r3, r3, #18
 800c4fe:	3301      	adds	r3, #1
 800c500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c502:	e002      	b.n	800c50a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3b01      	subs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c50a:	4b15      	ldr	r3, [pc, #84]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c516:	d102      	bne.n	800c51e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f2      	bne.n	800c504 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c51e:	4b10      	ldr	r3, [pc, #64]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c52a:	d112      	bne.n	800c552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c52c:	2303      	movs	r3, #3
 800c52e:	e011      	b.n	800c554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c530:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c536:	4a0a      	ldr	r2, [pc, #40]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c53c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c540:	e007      	b.n	800c552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c542:	4b07      	ldr	r3, [pc, #28]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c54a:	4a05      	ldr	r2, [pc, #20]	; (800c560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c54c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c550:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	40007000 	.word	0x40007000
 800c564:	20000c34 	.word	0x20000c34
 800c568:	431bde83 	.word	0x431bde83

0800c56c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e308      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	d075      	beq.n	800c676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c58a:	4ba3      	ldr	r3, [pc, #652]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f003 030c 	and.w	r3, r3, #12
 800c592:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c594:	4ba0      	ldr	r3, [pc, #640]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	f003 0303 	and.w	r3, r3, #3
 800c59c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	2b0c      	cmp	r3, #12
 800c5a2:	d102      	bne.n	800c5aa <HAL_RCC_OscConfig+0x3e>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d002      	beq.n	800c5b0 <HAL_RCC_OscConfig+0x44>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d10b      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5b0:	4b99      	ldr	r3, [pc, #612]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d05b      	beq.n	800c674 <HAL_RCC_OscConfig+0x108>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d157      	bne.n	800c674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e2e3      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5d0:	d106      	bne.n	800c5e0 <HAL_RCC_OscConfig+0x74>
 800c5d2:	4b91      	ldr	r3, [pc, #580]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a90      	ldr	r2, [pc, #576]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	e01d      	b.n	800c61c <HAL_RCC_OscConfig+0xb0>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5e8:	d10c      	bne.n	800c604 <HAL_RCC_OscConfig+0x98>
 800c5ea:	4b8b      	ldr	r3, [pc, #556]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a8a      	ldr	r2, [pc, #552]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	4b88      	ldr	r3, [pc, #544]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a87      	ldr	r2, [pc, #540]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c5fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	e00b      	b.n	800c61c <HAL_RCC_OscConfig+0xb0>
 800c604:	4b84      	ldr	r3, [pc, #528]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a83      	ldr	r2, [pc, #524]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c60a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	4b81      	ldr	r3, [pc, #516]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a80      	ldr	r2, [pc, #512]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c61a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d013      	beq.n	800c64c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c624:	f7fc fde6 	bl	80091f4 <HAL_GetTick>
 800c628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c62a:	e008      	b.n	800c63e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c62c:	f7fc fde2 	bl	80091f4 <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	2b64      	cmp	r3, #100	; 0x64
 800c638:	d901      	bls.n	800c63e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c63a:	2303      	movs	r3, #3
 800c63c:	e2a8      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c63e:	4b76      	ldr	r3, [pc, #472]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d0f0      	beq.n	800c62c <HAL_RCC_OscConfig+0xc0>
 800c64a:	e014      	b.n	800c676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c64c:	f7fc fdd2 	bl	80091f4 <HAL_GetTick>
 800c650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c652:	e008      	b.n	800c666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c654:	f7fc fdce 	bl	80091f4 <HAL_GetTick>
 800c658:	4602      	mov	r2, r0
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	2b64      	cmp	r3, #100	; 0x64
 800c660:	d901      	bls.n	800c666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c662:	2303      	movs	r3, #3
 800c664:	e294      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c666:	4b6c      	ldr	r3, [pc, #432]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1f0      	bne.n	800c654 <HAL_RCC_OscConfig+0xe8>
 800c672:	e000      	b.n	800c676 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0302 	and.w	r3, r3, #2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d075      	beq.n	800c76e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c682:	4b65      	ldr	r3, [pc, #404]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	f003 030c 	and.w	r3, r3, #12
 800c68a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c68c:	4b62      	ldr	r3, [pc, #392]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b0c      	cmp	r3, #12
 800c69a:	d102      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x136>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d002      	beq.n	800c6a8 <HAL_RCC_OscConfig+0x13c>
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d11f      	bne.n	800c6e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6a8:	4b5b      	ldr	r3, [pc, #364]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <HAL_RCC_OscConfig+0x154>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e267      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6c0:	4b55      	ldr	r3, [pc, #340]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	061b      	lsls	r3, r3, #24
 800c6ce:	4952      	ldr	r1, [pc, #328]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c6d4:	4b51      	ldr	r3, [pc, #324]	; (800c81c <HAL_RCC_OscConfig+0x2b0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fc fd3f 	bl	800915c <HAL_InitTick>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d043      	beq.n	800c76c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e253      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d023      	beq.n	800c738 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6f0:	4b49      	ldr	r3, [pc, #292]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a48      	ldr	r2, [pc, #288]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c6f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6fc:	f7fc fd7a 	bl	80091f4 <HAL_GetTick>
 800c700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c704:	f7fc fd76 	bl	80091f4 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e23c      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c716:	4b40      	ldr	r3, [pc, #256]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c722:	4b3d      	ldr	r3, [pc, #244]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	061b      	lsls	r3, r3, #24
 800c730:	4939      	ldr	r1, [pc, #228]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c732:	4313      	orrs	r3, r2
 800c734:	604b      	str	r3, [r1, #4]
 800c736:	e01a      	b.n	800c76e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c738:	4b37      	ldr	r3, [pc, #220]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a36      	ldr	r2, [pc, #216]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c73e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c744:	f7fc fd56 	bl	80091f4 <HAL_GetTick>
 800c748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c74a:	e008      	b.n	800c75e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c74c:	f7fc fd52 	bl	80091f4 <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	2b02      	cmp	r3, #2
 800c758:	d901      	bls.n	800c75e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e218      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c75e:	4b2e      	ldr	r3, [pc, #184]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f0      	bne.n	800c74c <HAL_RCC_OscConfig+0x1e0>
 800c76a:	e000      	b.n	800c76e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c76c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0308 	and.w	r3, r3, #8
 800c776:	2b00      	cmp	r3, #0
 800c778:	d03c      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d01c      	beq.n	800c7bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c782:	4b25      	ldr	r3, [pc, #148]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c788:	4a23      	ldr	r2, [pc, #140]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c78a:	f043 0301 	orr.w	r3, r3, #1
 800c78e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c792:	f7fc fd2f 	bl	80091f4 <HAL_GetTick>
 800c796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c798:	e008      	b.n	800c7ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c79a:	f7fc fd2b 	bl	80091f4 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d901      	bls.n	800c7ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e1f1      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c7ac:	4b1a      	ldr	r3, [pc, #104]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0ef      	beq.n	800c79a <HAL_RCC_OscConfig+0x22e>
 800c7ba:	e01b      	b.n	800c7f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7bc:	4b16      	ldr	r3, [pc, #88]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c7be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7c2:	4a15      	ldr	r2, [pc, #84]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c7c4:	f023 0301 	bic.w	r3, r3, #1
 800c7c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7cc:	f7fc fd12 	bl	80091f4 <HAL_GetTick>
 800c7d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7d2:	e008      	b.n	800c7e6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7d4:	f7fc fd0e 	bl	80091f4 <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d901      	bls.n	800c7e6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e1d4      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7ec:	f003 0302 	and.w	r3, r3, #2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1ef      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80ab 	beq.w	800c958 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c802:	2300      	movs	r3, #0
 800c804:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c806:	4b04      	ldr	r3, [pc, #16]	; (800c818 <HAL_RCC_OscConfig+0x2ac>)
 800c808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <HAL_RCC_OscConfig+0x2b4>
 800c812:	2301      	movs	r3, #1
 800c814:	e005      	b.n	800c822 <HAL_RCC_OscConfig+0x2b6>
 800c816:	bf00      	nop
 800c818:	40021000 	.word	0x40021000
 800c81c:	20000c38 	.word	0x20000c38
 800c820:	2300      	movs	r3, #0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00d      	beq.n	800c842 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c826:	4baf      	ldr	r3, [pc, #700]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c82a:	4aae      	ldr	r2, [pc, #696]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6593      	str	r3, [r2, #88]	; 0x58
 800c832:	4bac      	ldr	r3, [pc, #688]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c83e:	2301      	movs	r3, #1
 800c840:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c842:	4ba9      	ldr	r3, [pc, #676]	; (800cae8 <HAL_RCC_OscConfig+0x57c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d118      	bne.n	800c880 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c84e:	4ba6      	ldr	r3, [pc, #664]	; (800cae8 <HAL_RCC_OscConfig+0x57c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4aa5      	ldr	r2, [pc, #660]	; (800cae8 <HAL_RCC_OscConfig+0x57c>)
 800c854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c85a:	f7fc fccb 	bl	80091f4 <HAL_GetTick>
 800c85e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c860:	e008      	b.n	800c874 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c862:	f7fc fcc7 	bl	80091f4 <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d901      	bls.n	800c874 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e18d      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c874:	4b9c      	ldr	r3, [pc, #624]	; (800cae8 <HAL_RCC_OscConfig+0x57c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0f0      	beq.n	800c862 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d108      	bne.n	800c89a <HAL_RCC_OscConfig+0x32e>
 800c888:	4b96      	ldr	r3, [pc, #600]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88e:	4a95      	ldr	r2, [pc, #596]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c890:	f043 0301 	orr.w	r3, r3, #1
 800c894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c898:	e024      	b.n	800c8e4 <HAL_RCC_OscConfig+0x378>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b05      	cmp	r3, #5
 800c8a0:	d110      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x358>
 800c8a2:	4b90      	ldr	r3, [pc, #576]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8a8:	4a8e      	ldr	r2, [pc, #568]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8aa:	f043 0304 	orr.w	r3, r3, #4
 800c8ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8b2:	4b8c      	ldr	r3, [pc, #560]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8b8:	4a8a      	ldr	r2, [pc, #552]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8ba:	f043 0301 	orr.w	r3, r3, #1
 800c8be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8c2:	e00f      	b.n	800c8e4 <HAL_RCC_OscConfig+0x378>
 800c8c4:	4b87      	ldr	r3, [pc, #540]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ca:	4a86      	ldr	r2, [pc, #536]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8cc:	f023 0301 	bic.w	r3, r3, #1
 800c8d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8d4:	4b83      	ldr	r3, [pc, #524]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8da:	4a82      	ldr	r2, [pc, #520]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c8dc:	f023 0304 	bic.w	r3, r3, #4
 800c8e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d016      	beq.n	800c91a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8ec:	f7fc fc82 	bl	80091f4 <HAL_GetTick>
 800c8f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8f2:	e00a      	b.n	800c90a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8f4:	f7fc fc7e 	bl	80091f4 <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c902:	4293      	cmp	r3, r2
 800c904:	d901      	bls.n	800c90a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	e142      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c90a:	4b76      	ldr	r3, [pc, #472]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0ed      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x388>
 800c918:	e015      	b.n	800c946 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c91a:	f7fc fc6b 	bl	80091f4 <HAL_GetTick>
 800c91e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c920:	e00a      	b.n	800c938 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c922:	f7fc fc67 	bl	80091f4 <HAL_GetTick>
 800c926:	4602      	mov	r2, r0
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c930:	4293      	cmp	r3, r2
 800c932:	d901      	bls.n	800c938 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e12b      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c938:	4b6a      	ldr	r3, [pc, #424]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c93e:	f003 0302 	and.w	r3, r3, #2
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1ed      	bne.n	800c922 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d105      	bne.n	800c958 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c94c:	4b65      	ldr	r3, [pc, #404]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c950:	4a64      	ldr	r2, [pc, #400]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0320 	and.w	r3, r3, #32
 800c960:	2b00      	cmp	r3, #0
 800c962:	d03c      	beq.n	800c9de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01c      	beq.n	800c9a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c96c:	4b5d      	ldr	r3, [pc, #372]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c96e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c972:	4a5c      	ldr	r2, [pc, #368]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c974:	f043 0301 	orr.w	r3, r3, #1
 800c978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c97c:	f7fc fc3a 	bl	80091f4 <HAL_GetTick>
 800c980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c982:	e008      	b.n	800c996 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c984:	f7fc fc36 	bl	80091f4 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e0fc      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c996:	4b53      	ldr	r3, [pc, #332]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0ef      	beq.n	800c984 <HAL_RCC_OscConfig+0x418>
 800c9a4:	e01b      	b.n	800c9de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c9a6:	4b4f      	ldr	r3, [pc, #316]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c9a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9ac:	4a4d      	ldr	r2, [pc, #308]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c9ae:	f023 0301 	bic.w	r3, r3, #1
 800c9b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9b6:	f7fc fc1d 	bl	80091f4 <HAL_GetTick>
 800c9ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9bc:	e008      	b.n	800c9d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9be:	f7fc fc19 	bl	80091f4 <HAL_GetTick>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d901      	bls.n	800c9d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e0df      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9d0:	4b44      	ldr	r3, [pc, #272]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c9d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1ef      	bne.n	800c9be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	69db      	ldr	r3, [r3, #28]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 80d3 	beq.w	800cb8e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9e8:	4b3e      	ldr	r3, [pc, #248]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f003 030c 	and.w	r3, r3, #12
 800c9f0:	2b0c      	cmp	r3, #12
 800c9f2:	f000 808d 	beq.w	800cb10 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d15a      	bne.n	800cab4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9fe:	4b39      	ldr	r3, [pc, #228]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a38      	ldr	r2, [pc, #224]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca0a:	f7fc fbf3 	bl	80091f4 <HAL_GetTick>
 800ca0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca10:	e008      	b.n	800ca24 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca12:	f7fc fbef 	bl	80091f4 <HAL_GetTick>
 800ca16:	4602      	mov	r2, r0
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d901      	bls.n	800ca24 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e0b5      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca24:	4b2f      	ldr	r3, [pc, #188]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1f0      	bne.n	800ca12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca30:	4b2c      	ldr	r3, [pc, #176]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	4b2d      	ldr	r3, [pc, #180]	; (800caec <HAL_RCC_OscConfig+0x580>)
 800ca36:	4013      	ands	r3, r2
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	6a11      	ldr	r1, [r2, #32]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca40:	3a01      	subs	r2, #1
 800ca42:	0112      	lsls	r2, r2, #4
 800ca44:	4311      	orrs	r1, r2
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ca4a:	0212      	lsls	r2, r2, #8
 800ca4c:	4311      	orrs	r1, r2
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca52:	0852      	lsrs	r2, r2, #1
 800ca54:	3a01      	subs	r2, #1
 800ca56:	0552      	lsls	r2, r2, #21
 800ca58:	4311      	orrs	r1, r2
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ca5e:	0852      	lsrs	r2, r2, #1
 800ca60:	3a01      	subs	r2, #1
 800ca62:	0652      	lsls	r2, r2, #25
 800ca64:	4311      	orrs	r1, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ca6a:	06d2      	lsls	r2, r2, #27
 800ca6c:	430a      	orrs	r2, r1
 800ca6e:	491d      	ldr	r1, [pc, #116]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca74:	4b1b      	ldr	r3, [pc, #108]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a1a      	ldr	r2, [pc, #104]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ca80:	4b18      	ldr	r3, [pc, #96]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	4a17      	ldr	r2, [pc, #92]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800ca86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca8c:	f7fc fbb2 	bl	80091f4 <HAL_GetTick>
 800ca90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca92:	e008      	b.n	800caa6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca94:	f7fc fbae 	bl	80091f4 <HAL_GetTick>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d901      	bls.n	800caa6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e074      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800caa6:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f0      	beq.n	800ca94 <HAL_RCC_OscConfig+0x528>
 800cab2:	e06c      	b.n	800cb8e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cab4:	4b0b      	ldr	r3, [pc, #44]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a0a      	ldr	r2, [pc, #40]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800caba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cabe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cac0:	4b08      	ldr	r3, [pc, #32]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	4a07      	ldr	r2, [pc, #28]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cacc:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	4a04      	ldr	r2, [pc, #16]	; (800cae4 <HAL_RCC_OscConfig+0x578>)
 800cad2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cada:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cadc:	f7fc fb8a 	bl	80091f4 <HAL_GetTick>
 800cae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cae2:	e00e      	b.n	800cb02 <HAL_RCC_OscConfig+0x596>
 800cae4:	40021000 	.word	0x40021000
 800cae8:	40007000 	.word	0x40007000
 800caec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800caf0:	f7fc fb80 	bl	80091f4 <HAL_GetTick>
 800caf4:	4602      	mov	r2, r0
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d901      	bls.n	800cb02 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e046      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb02:	4b25      	ldr	r3, [pc, #148]	; (800cb98 <HAL_RCC_OscConfig+0x62c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1f0      	bne.n	800caf0 <HAL_RCC_OscConfig+0x584>
 800cb0e:	e03e      	b.n	800cb8e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	69db      	ldr	r3, [r3, #28]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d101      	bne.n	800cb1c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e039      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cb1c:	4b1e      	ldr	r3, [pc, #120]	; (800cb98 <HAL_RCC_OscConfig+0x62c>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f003 0203 	and.w	r2, r3, #3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a1b      	ldr	r3, [r3, #32]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d12c      	bne.n	800cb8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d123      	bne.n	800cb8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d11b      	bne.n	800cb8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d113      	bne.n	800cb8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb6c:	085b      	lsrs	r3, r3, #1
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d109      	bne.n	800cb8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb80:	085b      	lsrs	r3, r3, #1
 800cb82:	3b01      	subs	r3, #1
 800cb84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d001      	beq.n	800cb8e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e000      	b.n	800cb90 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	40021000 	.word	0x40021000

0800cb9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cba6:	2300      	movs	r3, #0
 800cba8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e11e      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbb4:	4b91      	ldr	r3, [pc, #580]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 030f 	and.w	r3, r3, #15
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d910      	bls.n	800cbe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbc2:	4b8e      	ldr	r3, [pc, #568]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f023 020f 	bic.w	r2, r3, #15
 800cbca:	498c      	ldr	r1, [pc, #560]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbd2:	4b8a      	ldr	r3, [pc, #552]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 030f 	and.w	r3, r3, #15
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d001      	beq.n	800cbe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e106      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d073      	beq.n	800ccd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d129      	bne.n	800cc4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbf8:	4b81      	ldr	r3, [pc, #516]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e0f4      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cc08:	f000 f972 	bl	800cef0 <RCC_GetSysClockFreqFromPLLSource>
 800cc0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	4a7c      	ldr	r2, [pc, #496]	; (800ce04 <HAL_RCC_ClockConfig+0x268>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d93f      	bls.n	800cc96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc16:	4b7a      	ldr	r3, [pc, #488]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d009      	beq.n	800cc36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d033      	beq.n	800cc96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d12f      	bne.n	800cc96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc36:	4b72      	ldr	r3, [pc, #456]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc3e:	4a70      	ldr	r2, [pc, #448]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cc46:	2380      	movs	r3, #128	; 0x80
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	e024      	b.n	800cc96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d107      	bne.n	800cc64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc54:	4b6a      	ldr	r3, [pc, #424]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e0c6      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cc64:	4b66      	ldr	r3, [pc, #408]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e0be      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cc74:	f000 f8ce 	bl	800ce14 <HAL_RCC_GetSysClockFreq>
 800cc78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	4a61      	ldr	r2, [pc, #388]	; (800ce04 <HAL_RCC_ClockConfig+0x268>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d909      	bls.n	800cc96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc82:	4b5f      	ldr	r3, [pc, #380]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc8a:	4a5d      	ldr	r2, [pc, #372]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cc92:	2380      	movs	r3, #128	; 0x80
 800cc94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cc96:	4b5a      	ldr	r3, [pc, #360]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f023 0203 	bic.w	r2, r3, #3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	4957      	ldr	r1, [pc, #348]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cca4:	4313      	orrs	r3, r2
 800cca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cca8:	f7fc faa4 	bl	80091f4 <HAL_GetTick>
 800ccac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccae:	e00a      	b.n	800ccc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccb0:	f7fc faa0 	bl	80091f4 <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d901      	bls.n	800ccc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e095      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccc6:	4b4e      	ldr	r3, [pc, #312]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f003 020c 	and.w	r2, r3, #12
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d1eb      	bne.n	800ccb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d023      	beq.n	800cd2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ccf0:	4b43      	ldr	r3, [pc, #268]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	4a42      	ldr	r2, [pc, #264]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800ccf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ccfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f003 0308 	and.w	r3, r3, #8
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d007      	beq.n	800cd18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cd08:	4b3d      	ldr	r3, [pc, #244]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd10:	4a3b      	ldr	r2, [pc, #236]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cd16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd18:	4b39      	ldr	r3, [pc, #228]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	4936      	ldr	r1, [pc, #216]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	608b      	str	r3, [r1, #8]
 800cd2a:	e008      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b80      	cmp	r3, #128	; 0x80
 800cd30:	d105      	bne.n	800cd3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cd32:	4b33      	ldr	r3, [pc, #204]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	4a32      	ldr	r2, [pc, #200]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd3e:	4b2f      	ldr	r3, [pc, #188]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 030f 	and.w	r3, r3, #15
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d21d      	bcs.n	800cd88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd4c:	4b2b      	ldr	r3, [pc, #172]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f023 020f 	bic.w	r2, r3, #15
 800cd54:	4929      	ldr	r1, [pc, #164]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cd5c:	f7fc fa4a 	bl	80091f4 <HAL_GetTick>
 800cd60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd62:	e00a      	b.n	800cd7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd64:	f7fc fa46 	bl	80091f4 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e03b      	b.n	800cdf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd7a:	4b20      	ldr	r3, [pc, #128]	; (800cdfc <HAL_RCC_ClockConfig+0x260>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 030f 	and.w	r3, r3, #15
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d1ed      	bne.n	800cd64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d008      	beq.n	800cda6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd94:	4b1a      	ldr	r3, [pc, #104]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	4917      	ldr	r1, [pc, #92]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cda2:	4313      	orrs	r3, r2
 800cda4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 0308 	and.w	r3, r3, #8
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d009      	beq.n	800cdc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cdb2:	4b13      	ldr	r3, [pc, #76]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	490f      	ldr	r1, [pc, #60]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cdc6:	f000 f825 	bl	800ce14 <HAL_RCC_GetSysClockFreq>
 800cdca:	4601      	mov	r1, r0
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	; (800ce00 <HAL_RCC_ClockConfig+0x264>)
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	091b      	lsrs	r3, r3, #4
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	4a0c      	ldr	r2, [pc, #48]	; (800ce08 <HAL_RCC_ClockConfig+0x26c>)
 800cdd8:	5cd3      	ldrb	r3, [r2, r3]
 800cdda:	f003 031f 	and.w	r3, r3, #31
 800cdde:	fa21 f303 	lsr.w	r3, r1, r3
 800cde2:	4a0a      	ldr	r2, [pc, #40]	; (800ce0c <HAL_RCC_ClockConfig+0x270>)
 800cde4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <HAL_RCC_ClockConfig+0x274>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fc f9b6 	bl	800915c <HAL_InitTick>
 800cdf0:	4603      	mov	r3, r0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	40022000 	.word	0x40022000
 800ce00:	40021000 	.word	0x40021000
 800ce04:	04c4b400 	.word	0x04c4b400
 800ce08:	08016538 	.word	0x08016538
 800ce0c:	20000c34 	.word	0x20000c34
 800ce10:	20000c38 	.word	0x20000c38

0800ce14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b087      	sub	sp, #28
 800ce18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ce1a:	4b2c      	ldr	r3, [pc, #176]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	f003 030c 	and.w	r3, r3, #12
 800ce22:	2b04      	cmp	r3, #4
 800ce24:	d102      	bne.n	800ce2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce26:	4b2a      	ldr	r3, [pc, #168]	; (800ced0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	e047      	b.n	800cebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ce2c:	4b27      	ldr	r3, [pc, #156]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f003 030c 	and.w	r3, r3, #12
 800ce34:	2b08      	cmp	r3, #8
 800ce36:	d102      	bne.n	800ce3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce38:	4b26      	ldr	r3, [pc, #152]	; (800ced4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce3a:	613b      	str	r3, [r7, #16]
 800ce3c:	e03e      	b.n	800cebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ce3e:	4b23      	ldr	r3, [pc, #140]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f003 030c 	and.w	r3, r3, #12
 800ce46:	2b0c      	cmp	r3, #12
 800ce48:	d136      	bne.n	800ceb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce4a:	4b20      	ldr	r3, [pc, #128]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	f003 0303 	and.w	r3, r3, #3
 800ce52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce54:	4b1d      	ldr	r3, [pc, #116]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	091b      	lsrs	r3, r3, #4
 800ce5a:	f003 030f 	and.w	r3, r3, #15
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d10c      	bne.n	800ce82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce68:	4a1a      	ldr	r2, [pc, #104]	; (800ced4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce70:	4a16      	ldr	r2, [pc, #88]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce72:	68d2      	ldr	r2, [r2, #12]
 800ce74:	0a12      	lsrs	r2, r2, #8
 800ce76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce7a:	fb02 f303 	mul.w	r3, r2, r3
 800ce7e:	617b      	str	r3, [r7, #20]
      break;
 800ce80:	e00c      	b.n	800ce9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce82:	4a13      	ldr	r2, [pc, #76]	; (800ced0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8a:	4a10      	ldr	r2, [pc, #64]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce8c:	68d2      	ldr	r2, [r2, #12]
 800ce8e:	0a12      	lsrs	r2, r2, #8
 800ce90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce94:	fb02 f303 	mul.w	r3, r2, r3
 800ce98:	617b      	str	r3, [r7, #20]
      break;
 800ce9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ce9c:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	0e5b      	lsrs	r3, r3, #25
 800cea2:	f003 0303 	and.w	r3, r3, #3
 800cea6:	3301      	adds	r3, #1
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb4:	613b      	str	r3, [r7, #16]
 800ceb6:	e001      	b.n	800cebc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cebc:	693b      	ldr	r3, [r7, #16]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	40021000 	.word	0x40021000
 800ced0:	00f42400 	.word	0x00f42400
 800ced4:	007a1200 	.word	0x007a1200

0800ced8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cedc:	4b03      	ldr	r3, [pc, #12]	; (800ceec <HAL_RCC_GetHCLKFreq+0x14>)
 800cede:	681b      	ldr	r3, [r3, #0]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	20000c34 	.word	0x20000c34

0800cef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cef6:	4b1e      	ldr	r3, [pc, #120]	; (800cf70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cf00:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	091b      	lsrs	r3, r3, #4
 800cf06:	f003 030f 	and.w	r3, r3, #15
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d10c      	bne.n	800cf2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf14:	4a17      	ldr	r2, [pc, #92]	; (800cf74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf1c:	4a14      	ldr	r2, [pc, #80]	; (800cf70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf1e:	68d2      	ldr	r2, [r2, #12]
 800cf20:	0a12      	lsrs	r2, r2, #8
 800cf22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	617b      	str	r3, [r7, #20]
    break;
 800cf2c:	e00c      	b.n	800cf48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf2e:	4a12      	ldr	r2, [pc, #72]	; (800cf78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf36:	4a0e      	ldr	r2, [pc, #56]	; (800cf70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf38:	68d2      	ldr	r2, [r2, #12]
 800cf3a:	0a12      	lsrs	r2, r2, #8
 800cf3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf40:	fb02 f303 	mul.w	r3, r2, r3
 800cf44:	617b      	str	r3, [r7, #20]
    break;
 800cf46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cf48:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	0e5b      	lsrs	r3, r3, #25
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	3301      	adds	r3, #1
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cf62:	687b      	ldr	r3, [r7, #4]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	371c      	adds	r7, #28
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	40021000 	.word	0x40021000
 800cf74:	007a1200 	.word	0x007a1200
 800cf78:	00f42400 	.word	0x00f42400

0800cf7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cf84:	2300      	movs	r3, #0
 800cf86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cf88:	2300      	movs	r3, #0
 800cf8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 8098 	beq.w	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf9e:	4b43      	ldr	r3, [pc, #268]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10d      	bne.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfaa:	4b40      	ldr	r3, [pc, #256]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfae:	4a3f      	ldr	r2, [pc, #252]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb4:	6593      	str	r3, [r2, #88]	; 0x58
 800cfb6:	4b3d      	ldr	r3, [pc, #244]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfbe:	60bb      	str	r3, [r7, #8]
 800cfc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cfc6:	4b3a      	ldr	r3, [pc, #232]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a39      	ldr	r2, [pc, #228]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cfcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cfd2:	f7fc f90f 	bl	80091f4 <HAL_GetTick>
 800cfd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cfd8:	e009      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfda:	f7fc f90b 	bl	80091f4 <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d902      	bls.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	74fb      	strb	r3, [r7, #19]
        break;
 800cfec:	e005      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cfee:	4b30      	ldr	r3, [pc, #192]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0ef      	beq.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cffa:	7cfb      	ldrb	r3, [r7, #19]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d159      	bne.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d000:	4b2a      	ldr	r3, [pc, #168]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d00a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01e      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d019      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d01c:	4b23      	ldr	r3, [pc, #140]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d028:	4b20      	ldr	r3, [pc, #128]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02e:	4a1f      	ldr	r2, [pc, #124]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d038:	4b1c      	ldr	r3, [pc, #112]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d03e:	4a1b      	ldr	r2, [pc, #108]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d048:	4a18      	ldr	r2, [pc, #96]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d016      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d05a:	f7fc f8cb 	bl	80091f4 <HAL_GetTick>
 800d05e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d060:	e00b      	b.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d062:	f7fc f8c7 	bl	80091f4 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d070:	4293      	cmp	r3, r2
 800d072:	d902      	bls.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	74fb      	strb	r3, [r7, #19]
            break;
 800d078:	e006      	b.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d07a:	4b0c      	ldr	r3, [pc, #48]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0ec      	beq.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d088:	7cfb      	ldrb	r3, [r7, #19]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10b      	bne.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d08e:	4b07      	ldr	r3, [pc, #28]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d09c:	4903      	ldr	r1, [pc, #12]	; (800d0ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0a4:	e008      	b.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d0a6:	7cfb      	ldrb	r3, [r7, #19]
 800d0a8:	74bb      	strb	r3, [r7, #18]
 800d0aa:	e005      	b.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d0ac:	40021000 	.word	0x40021000
 800d0b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0b4:	7cfb      	ldrb	r3, [r7, #19]
 800d0b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d0b8:	7c7b      	ldrb	r3, [r7, #17]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d105      	bne.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0be:	4baf      	ldr	r3, [pc, #700]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0c2:	4aae      	ldr	r2, [pc, #696]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0d6:	4ba9      	ldr	r3, [pc, #676]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0dc:	f023 0203 	bic.w	r2, r3, #3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	49a5      	ldr	r1, [pc, #660]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 0302 	and.w	r3, r3, #2
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d0f8:	4ba0      	ldr	r3, [pc, #640]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fe:	f023 020c 	bic.w	r2, r3, #12
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	499d      	ldr	r1, [pc, #628]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d108:	4313      	orrs	r3, r2
 800d10a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f003 0304 	and.w	r3, r3, #4
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d11a:	4b98      	ldr	r3, [pc, #608]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d120:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	4994      	ldr	r1, [pc, #592]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d12a:	4313      	orrs	r3, r2
 800d12c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 0308 	and.w	r3, r3, #8
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00a      	beq.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d13c:	4b8f      	ldr	r3, [pc, #572]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	498c      	ldr	r1, [pc, #560]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d14c:	4313      	orrs	r3, r2
 800d14e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 0310 	and.w	r3, r3, #16
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d15e:	4b87      	ldr	r3, [pc, #540]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	4983      	ldr	r1, [pc, #524]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 0320 	and.w	r3, r3, #32
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00a      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d180:	4b7e      	ldr	r3, [pc, #504]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d186:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	497b      	ldr	r1, [pc, #492]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d190:	4313      	orrs	r3, r2
 800d192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00a      	beq.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d1a2:	4b76      	ldr	r3, [pc, #472]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	4972      	ldr	r1, [pc, #456]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00a      	beq.n	800d1da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d1c4:	4b6d      	ldr	r3, [pc, #436]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	496a      	ldr	r1, [pc, #424]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00a      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d1e6:	4b65      	ldr	r3, [pc, #404]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f4:	4961      	ldr	r1, [pc, #388]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d208:	4b5c      	ldr	r3, [pc, #368]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d20a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d20e:	f023 0203 	bic.w	r2, r3, #3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d216:	4959      	ldr	r1, [pc, #356]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d218:	4313      	orrs	r3, r2
 800d21a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d22a:	4b54      	ldr	r3, [pc, #336]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d238:	4950      	ldr	r1, [pc, #320]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d015      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d24c:	4b4b      	ldr	r3, [pc, #300]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25a:	4948      	ldr	r1, [pc, #288]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d25c:	4313      	orrs	r3, r2
 800d25e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d26a:	d105      	bne.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d26c:	4b43      	ldr	r3, [pc, #268]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	4a42      	ldr	r2, [pc, #264]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d276:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d280:	2b00      	cmp	r3, #0
 800d282:	d015      	beq.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d284:	4b3d      	ldr	r3, [pc, #244]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d28a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d292:	493a      	ldr	r1, [pc, #232]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d294:	4313      	orrs	r3, r2
 800d296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2a2:	d105      	bne.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2a4:	4b35      	ldr	r3, [pc, #212]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	4a34      	ldr	r2, [pc, #208]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d015      	beq.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d2bc:	4b2f      	ldr	r3, [pc, #188]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ca:	492c      	ldr	r1, [pc, #176]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2da:	d105      	bne.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2dc:	4b27      	ldr	r3, [pc, #156]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	4a26      	ldr	r2, [pc, #152]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d015      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d2f4:	4b21      	ldr	r3, [pc, #132]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d302:	491e      	ldr	r1, [pc, #120]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d304:	4313      	orrs	r3, r2
 800d306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d312:	d105      	bne.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d314:	4b19      	ldr	r3, [pc, #100]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	4a18      	ldr	r2, [pc, #96]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d31e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d015      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d32c:	4b13      	ldr	r3, [pc, #76]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	4910      	ldr	r1, [pc, #64]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d33c:	4313      	orrs	r3, r2
 800d33e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d34a:	d105      	bne.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	4a0a      	ldr	r2, [pc, #40]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d356:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d018      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d36a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d372:	4902      	ldr	r1, [pc, #8]	; (800d37c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d374:	4313      	orrs	r3, r2
 800d376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d37a:	e001      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d37c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d388:	d105      	bne.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d38a:	4b21      	ldr	r3, [pc, #132]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	4a20      	ldr	r2, [pc, #128]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d394:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d015      	beq.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d3a2:	4b1b      	ldr	r3, [pc, #108]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b0:	4917      	ldr	r1, [pc, #92]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3c0:	d105      	bne.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d3c2:	4b13      	ldr	r3, [pc, #76]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	4a12      	ldr	r2, [pc, #72]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3cc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d015      	beq.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d3da:	4b0d      	ldr	r3, [pc, #52]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3e8:	4909      	ldr	r1, [pc, #36]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3f8:	d105      	bne.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d3fa:	4b05      	ldr	r3, [pc, #20]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	4a04      	ldr	r2, [pc, #16]	; (800d410 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d404:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d406:	7cbb      	ldrb	r3, [r7, #18]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3718      	adds	r7, #24
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	40021000 	.word	0x40021000

0800d414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d101      	bne.n	800d426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	e084      	b.n	800d530 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b00      	cmp	r3, #0
 800d436:	d106      	bne.n	800d446 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7fa ffc3 	bl	80083cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2202      	movs	r2, #2
 800d44a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d45c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d466:	d902      	bls.n	800d46e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d468:	2300      	movs	r3, #0
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	e002      	b.n	800d474 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d46e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d472:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d47c:	d007      	beq.n	800d48e <HAL_SPI_Init+0x7a>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d486:	d002      	beq.n	800d48e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10b      	bne.n	800d4ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d49e:	d903      	bls.n	800d4a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	631a      	str	r2, [r3, #48]	; 0x30
 800d4a6:	e002      	b.n	800d4ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	431a      	orrs	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	695b      	ldr	r3, [r3, #20]
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4cc:	431a      	orrs	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	69db      	ldr	r3, [r3, #28]
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a1b      	ldr	r3, [r3, #32]
 800d4d8:	ea42 0103 	orr.w	r1, r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	0c1b      	lsrs	r3, r3, #16
 800d4ee:	f003 0204 	and.w	r2, r3, #4
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	ea42 0103 	orr.w	r1, r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	430a      	orrs	r2, r1
 800d50e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	69da      	ldr	r2, [r3, #28]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d51e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e049      	b.n	800d5de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d106      	bne.n	800d564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7fb fc96 	bl	8008e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2202      	movs	r2, #2
 800d568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f001 fb9e 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
	...

0800d5e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d001      	beq.n	800d600 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e019      	b.n	800d634 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689a      	ldr	r2, [r3, #8]
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <HAL_TIM_Base_Start+0x58>)
 800d610:	4013      	ands	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b06      	cmp	r3, #6
 800d618:	d00b      	beq.n	800d632 <HAL_TIM_Base_Start+0x4a>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d620:	d007      	beq.n	800d632 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f042 0201 	orr.w	r2, r2, #1
 800d630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	00010007 	.word	0x00010007

0800d644 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6a1a      	ldr	r2, [r3, #32]
 800d652:	f241 1311 	movw	r3, #4369	; 0x1111
 800d656:	4013      	ands	r3, r2
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10f      	bne.n	800d67c <HAL_TIM_Base_Stop+0x38>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6a1a      	ldr	r2, [r3, #32]
 800d662:	f244 4344 	movw	r3, #17476	; 0x4444
 800d666:	4013      	ands	r3, r2
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d107      	bne.n	800d67c <HAL_TIM_Base_Stop+0x38>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0201 	bic.w	r2, r2, #1
 800d67a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
	...

0800d694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d001      	beq.n	800d6ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e021      	b.n	800d6f0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f042 0201 	orr.w	r2, r2, #1
 800d6c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <HAL_TIM_Base_Start_IT+0x68>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2b06      	cmp	r3, #6
 800d6d4:	d00b      	beq.n	800d6ee <HAL_TIM_Base_Start_IT+0x5a>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6dc:	d007      	beq.n	800d6ee <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f042 0201 	orr.w	r2, r2, #1
 800d6ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	00010007 	.word	0x00010007

0800d700 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f022 0201 	bic.w	r2, r2, #1
 800d716:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6a1a      	ldr	r2, [r3, #32]
 800d71e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d722:	4013      	ands	r3, r2
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10f      	bne.n	800d748 <HAL_TIM_Base_Stop_IT+0x48>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6a1a      	ldr	r2, [r3, #32]
 800d72e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d732:	4013      	ands	r3, r2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d107      	bne.n	800d748 <HAL_TIM_Base_Stop_IT+0x48>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f022 0201 	bic.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e049      	b.n	800d804 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f841 	bl	800d80c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2202      	movs	r2, #2
 800d78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	3304      	adds	r3, #4
 800d79a:	4619      	mov	r1, r3
 800d79c:	4610      	mov	r0, r2
 800d79e:	f001 fa8b 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <HAL_TIM_PWM_Start+0x24>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d836:	b2db      	uxtb	r3, r3
 800d838:	2b01      	cmp	r3, #1
 800d83a:	bf14      	ite	ne
 800d83c:	2301      	movne	r3, #1
 800d83e:	2300      	moveq	r3, #0
 800d840:	b2db      	uxtb	r3, r3
 800d842:	e03c      	b.n	800d8be <HAL_TIM_PWM_Start+0x9e>
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b04      	cmp	r3, #4
 800d848:	d109      	bne.n	800d85e <HAL_TIM_PWM_Start+0x3e>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b01      	cmp	r3, #1
 800d854:	bf14      	ite	ne
 800d856:	2301      	movne	r3, #1
 800d858:	2300      	moveq	r3, #0
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	e02f      	b.n	800d8be <HAL_TIM_PWM_Start+0x9e>
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b08      	cmp	r3, #8
 800d862:	d109      	bne.n	800d878 <HAL_TIM_PWM_Start+0x58>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	bf14      	ite	ne
 800d870:	2301      	movne	r3, #1
 800d872:	2300      	moveq	r3, #0
 800d874:	b2db      	uxtb	r3, r3
 800d876:	e022      	b.n	800d8be <HAL_TIM_PWM_Start+0x9e>
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2b0c      	cmp	r3, #12
 800d87c:	d109      	bne.n	800d892 <HAL_TIM_PWM_Start+0x72>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d884:	b2db      	uxtb	r3, r3
 800d886:	2b01      	cmp	r3, #1
 800d888:	bf14      	ite	ne
 800d88a:	2301      	movne	r3, #1
 800d88c:	2300      	moveq	r3, #0
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	e015      	b.n	800d8be <HAL_TIM_PWM_Start+0x9e>
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	2b10      	cmp	r3, #16
 800d896:	d109      	bne.n	800d8ac <HAL_TIM_PWM_Start+0x8c>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	bf14      	ite	ne
 800d8a4:	2301      	movne	r3, #1
 800d8a6:	2300      	moveq	r3, #0
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	e008      	b.n	800d8be <HAL_TIM_PWM_Start+0x9e>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	bf14      	ite	ne
 800d8b8:	2301      	movne	r3, #1
 800d8ba:	2300      	moveq	r3, #0
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e073      	b.n	800d9ae <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d104      	bne.n	800d8d6 <HAL_TIM_PWM_Start+0xb6>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8d4:	e023      	b.n	800d91e <HAL_TIM_PWM_Start+0xfe>
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b04      	cmp	r3, #4
 800d8da:	d104      	bne.n	800d8e6 <HAL_TIM_PWM_Start+0xc6>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8e4:	e01b      	b.n	800d91e <HAL_TIM_PWM_Start+0xfe>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2b08      	cmp	r3, #8
 800d8ea:	d104      	bne.n	800d8f6 <HAL_TIM_PWM_Start+0xd6>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8f4:	e013      	b.n	800d91e <HAL_TIM_PWM_Start+0xfe>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b0c      	cmp	r3, #12
 800d8fa:	d104      	bne.n	800d906 <HAL_TIM_PWM_Start+0xe6>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d904:	e00b      	b.n	800d91e <HAL_TIM_PWM_Start+0xfe>
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d104      	bne.n	800d916 <HAL_TIM_PWM_Start+0xf6>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2202      	movs	r2, #2
 800d910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d914:	e003      	b.n	800d91e <HAL_TIM_PWM_Start+0xfe>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2202      	movs	r2, #2
 800d91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2201      	movs	r2, #1
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f002 f81a 	bl	800f960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a21      	ldr	r2, [pc, #132]	; (800d9b8 <HAL_TIM_PWM_Start+0x198>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d018      	beq.n	800d968 <HAL_TIM_PWM_Start+0x148>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a20      	ldr	r2, [pc, #128]	; (800d9bc <HAL_TIM_PWM_Start+0x19c>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d013      	beq.n	800d968 <HAL_TIM_PWM_Start+0x148>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a1e      	ldr	r2, [pc, #120]	; (800d9c0 <HAL_TIM_PWM_Start+0x1a0>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d00e      	beq.n	800d968 <HAL_TIM_PWM_Start+0x148>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a1d      	ldr	r2, [pc, #116]	; (800d9c4 <HAL_TIM_PWM_Start+0x1a4>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d009      	beq.n	800d968 <HAL_TIM_PWM_Start+0x148>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a1b      	ldr	r2, [pc, #108]	; (800d9c8 <HAL_TIM_PWM_Start+0x1a8>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d004      	beq.n	800d968 <HAL_TIM_PWM_Start+0x148>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a1a      	ldr	r2, [pc, #104]	; (800d9cc <HAL_TIM_PWM_Start+0x1ac>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d101      	bne.n	800d96c <HAL_TIM_PWM_Start+0x14c>
 800d968:	2301      	movs	r3, #1
 800d96a:	e000      	b.n	800d96e <HAL_TIM_PWM_Start+0x14e>
 800d96c:	2300      	movs	r3, #0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d007      	beq.n	800d982 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	689a      	ldr	r2, [r3, #8]
 800d988:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <HAL_TIM_PWM_Start+0x1b0>)
 800d98a:	4013      	ands	r3, r2
 800d98c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2b06      	cmp	r3, #6
 800d992:	d00b      	beq.n	800d9ac <HAL_TIM_PWM_Start+0x18c>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d99a:	d007      	beq.n	800d9ac <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	40012c00 	.word	0x40012c00
 800d9bc:	40013400 	.word	0x40013400
 800d9c0:	40014000 	.word	0x40014000
 800d9c4:	40014400 	.word	0x40014400
 800d9c8:	40014800 	.word	0x40014800
 800d9cc:	40015000 	.word	0x40015000
 800d9d0:	00010007 	.word	0x00010007

0800d9d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	6839      	ldr	r1, [r7, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f001 ffba 	bl	800f960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a40      	ldr	r2, [pc, #256]	; (800daf4 <HAL_TIM_PWM_Stop+0x120>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d018      	beq.n	800da28 <HAL_TIM_PWM_Stop+0x54>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a3f      	ldr	r2, [pc, #252]	; (800daf8 <HAL_TIM_PWM_Stop+0x124>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d013      	beq.n	800da28 <HAL_TIM_PWM_Stop+0x54>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a3d      	ldr	r2, [pc, #244]	; (800dafc <HAL_TIM_PWM_Stop+0x128>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d00e      	beq.n	800da28 <HAL_TIM_PWM_Stop+0x54>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a3c      	ldr	r2, [pc, #240]	; (800db00 <HAL_TIM_PWM_Stop+0x12c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d009      	beq.n	800da28 <HAL_TIM_PWM_Stop+0x54>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a3a      	ldr	r2, [pc, #232]	; (800db04 <HAL_TIM_PWM_Stop+0x130>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d004      	beq.n	800da28 <HAL_TIM_PWM_Stop+0x54>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a39      	ldr	r2, [pc, #228]	; (800db08 <HAL_TIM_PWM_Stop+0x134>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d101      	bne.n	800da2c <HAL_TIM_PWM_Stop+0x58>
 800da28:	2301      	movs	r3, #1
 800da2a:	e000      	b.n	800da2e <HAL_TIM_PWM_Stop+0x5a>
 800da2c:	2300      	movs	r3, #0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d017      	beq.n	800da62 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	6a1a      	ldr	r2, [r3, #32]
 800da38:	f241 1311 	movw	r3, #4369	; 0x1111
 800da3c:	4013      	ands	r3, r2
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10f      	bne.n	800da62 <HAL_TIM_PWM_Stop+0x8e>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6a1a      	ldr	r2, [r3, #32]
 800da48:	f244 4344 	movw	r3, #17476	; 0x4444
 800da4c:	4013      	ands	r3, r2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d107      	bne.n	800da62 <HAL_TIM_PWM_Stop+0x8e>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6a1a      	ldr	r2, [r3, #32]
 800da68:	f241 1311 	movw	r3, #4369	; 0x1111
 800da6c:	4013      	ands	r3, r2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d10f      	bne.n	800da92 <HAL_TIM_PWM_Stop+0xbe>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6a1a      	ldr	r2, [r3, #32]
 800da78:	f244 4344 	movw	r3, #17476	; 0x4444
 800da7c:	4013      	ands	r3, r2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d107      	bne.n	800da92 <HAL_TIM_PWM_Stop+0xbe>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f022 0201 	bic.w	r2, r2, #1
 800da90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <HAL_TIM_PWM_Stop+0xce>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daa0:	e023      	b.n	800daea <HAL_TIM_PWM_Stop+0x116>
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	d104      	bne.n	800dab2 <HAL_TIM_PWM_Stop+0xde>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dab0:	e01b      	b.n	800daea <HAL_TIM_PWM_Stop+0x116>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b08      	cmp	r3, #8
 800dab6:	d104      	bne.n	800dac2 <HAL_TIM_PWM_Stop+0xee>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dac0:	e013      	b.n	800daea <HAL_TIM_PWM_Stop+0x116>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b0c      	cmp	r3, #12
 800dac6:	d104      	bne.n	800dad2 <HAL_TIM_PWM_Stop+0xfe>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dad0:	e00b      	b.n	800daea <HAL_TIM_PWM_Stop+0x116>
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2b10      	cmp	r3, #16
 800dad6:	d104      	bne.n	800dae2 <HAL_TIM_PWM_Stop+0x10e>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dae0:	e003      	b.n	800daea <HAL_TIM_PWM_Stop+0x116>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	40012c00 	.word	0x40012c00
 800daf8:	40013400 	.word	0x40013400
 800dafc:	40014000 	.word	0x40014000
 800db00:	40014400 	.word	0x40014400
 800db04:	40014800 	.word	0x40014800
 800db08:	40015000 	.word	0x40015000

0800db0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d101      	bne.n	800db1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e049      	b.n	800dbb2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f841 	bl	800dbba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2202      	movs	r2, #2
 800db3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	3304      	adds	r3, #4
 800db48:	4619      	mov	r1, r3
 800db4a:	4610      	mov	r0, r2
 800db4c:	f001 f8b4 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800dbc2:	bf00      	nop
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
	...

0800dbd0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d104      	bne.n	800dbee <HAL_TIM_IC_Start_DMA+0x1e>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	e023      	b.n	800dc36 <HAL_TIM_IC_Start_DMA+0x66>
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b04      	cmp	r3, #4
 800dbf2:	d104      	bne.n	800dbfe <HAL_TIM_IC_Start_DMA+0x2e>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	e01b      	b.n	800dc36 <HAL_TIM_IC_Start_DMA+0x66>
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b08      	cmp	r3, #8
 800dc02:	d104      	bne.n	800dc0e <HAL_TIM_IC_Start_DMA+0x3e>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	e013      	b.n	800dc36 <HAL_TIM_IC_Start_DMA+0x66>
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	2b0c      	cmp	r3, #12
 800dc12:	d104      	bne.n	800dc1e <HAL_TIM_IC_Start_DMA+0x4e>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	e00b      	b.n	800dc36 <HAL_TIM_IC_Start_DMA+0x66>
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b10      	cmp	r3, #16
 800dc22:	d104      	bne.n	800dc2e <HAL_TIM_IC_Start_DMA+0x5e>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	e003      	b.n	800dc36 <HAL_TIM_IC_Start_DMA+0x66>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d104      	bne.n	800dc48 <HAL_TIM_IC_Start_DMA+0x78>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	e013      	b.n	800dc70 <HAL_TIM_IC_Start_DMA+0xa0>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d104      	bne.n	800dc58 <HAL_TIM_IC_Start_DMA+0x88>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	e00b      	b.n	800dc70 <HAL_TIM_IC_Start_DMA+0xa0>
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b08      	cmp	r3, #8
 800dc5c:	d104      	bne.n	800dc68 <HAL_TIM_IC_Start_DMA+0x98>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	e003      	b.n	800dc70 <HAL_TIM_IC_Start_DMA+0xa0>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d002      	beq.n	800dc7e <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800dc78:	7dbb      	ldrb	r3, [r7, #22]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d101      	bne.n	800dc82 <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e128      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d153      	bne.n	800dd30 <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800dc88:	7dbb      	ldrb	r3, [r7, #22]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d150      	bne.n	800dd30 <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d104      	bne.n	800dc9e <HAL_TIM_IC_Start_DMA+0xce>
 800dc94:	887b      	ldrh	r3, [r7, #2]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e11a      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d104      	bne.n	800dcae <HAL_TIM_IC_Start_DMA+0xde>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2202      	movs	r2, #2
 800dca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcac:	e023      	b.n	800dcf6 <HAL_TIM_IC_Start_DMA+0x126>
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d104      	bne.n	800dcbe <HAL_TIM_IC_Start_DMA+0xee>
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2202      	movs	r2, #2
 800dcb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcbc:	e01b      	b.n	800dcf6 <HAL_TIM_IC_Start_DMA+0x126>
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d104      	bne.n	800dcce <HAL_TIM_IC_Start_DMA+0xfe>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dccc:	e013      	b.n	800dcf6 <HAL_TIM_IC_Start_DMA+0x126>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b0c      	cmp	r3, #12
 800dcd2:	d104      	bne.n	800dcde <HAL_TIM_IC_Start_DMA+0x10e>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcdc:	e00b      	b.n	800dcf6 <HAL_TIM_IC_Start_DMA+0x126>
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b10      	cmp	r3, #16
 800dce2:	d104      	bne.n	800dcee <HAL_TIM_IC_Start_DMA+0x11e>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2202      	movs	r2, #2
 800dce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcec:	e003      	b.n	800dcf6 <HAL_TIM_IC_Start_DMA+0x126>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2202      	movs	r2, #2
 800dcf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <HAL_TIM_IC_Start_DMA+0x136>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2202      	movs	r2, #2
 800dd00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800dd04:	e016      	b.n	800dd34 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	d104      	bne.n	800dd16 <HAL_TIM_IC_Start_DMA+0x146>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800dd14:	e00e      	b.n	800dd34 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b08      	cmp	r3, #8
 800dd1a:	d104      	bne.n	800dd26 <HAL_TIM_IC_Start_DMA+0x156>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2202      	movs	r2, #2
 800dd20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800dd24:	e006      	b.n	800dd34 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2202      	movs	r2, #2
 800dd2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800dd2e:	e001      	b.n	800dd34 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e0cf      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2b0c      	cmp	r3, #12
 800dd38:	f200 80ae 	bhi.w	800de98 <HAL_TIM_IC_Start_DMA+0x2c8>
 800dd3c:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <HAL_TIM_IC_Start_DMA+0x174>)
 800dd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd42:	bf00      	nop
 800dd44:	0800dd79 	.word	0x0800dd79
 800dd48:	0800de99 	.word	0x0800de99
 800dd4c:	0800de99 	.word	0x0800de99
 800dd50:	0800de99 	.word	0x0800de99
 800dd54:	0800ddc1 	.word	0x0800ddc1
 800dd58:	0800de99 	.word	0x0800de99
 800dd5c:	0800de99 	.word	0x0800de99
 800dd60:	0800de99 	.word	0x0800de99
 800dd64:	0800de09 	.word	0x0800de09
 800dd68:	0800de99 	.word	0x0800de99
 800dd6c:	0800de99 	.word	0x0800de99
 800dd70:	0800de99 	.word	0x0800de99
 800dd74:	0800de51 	.word	0x0800de51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7c:	4a57      	ldr	r2, [pc, #348]	; (800dedc <HAL_TIM_IC_Start_DMA+0x30c>)
 800dd7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd84:	4a56      	ldr	r2, [pc, #344]	; (800dee0 <HAL_TIM_IC_Start_DMA+0x310>)
 800dd86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	4a55      	ldr	r2, [pc, #340]	; (800dee4 <HAL_TIM_IC_Start_DMA+0x314>)
 800dd8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3334      	adds	r3, #52	; 0x34
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	887b      	ldrh	r3, [r7, #2]
 800dda0:	f7fd fe3a 	bl	800ba18 <HAL_DMA_Start_IT>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e092      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68da      	ldr	r2, [r3, #12]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddbc:	60da      	str	r2, [r3, #12]
      break;
 800ddbe:	e06c      	b.n	800de9a <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc4:	4a45      	ldr	r2, [pc, #276]	; (800dedc <HAL_TIM_IC_Start_DMA+0x30c>)
 800ddc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddcc:	4a44      	ldr	r2, [pc, #272]	; (800dee0 <HAL_TIM_IC_Start_DMA+0x310>)
 800ddce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd4:	4a43      	ldr	r2, [pc, #268]	; (800dee4 <HAL_TIM_IC_Start_DMA+0x314>)
 800ddd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3338      	adds	r3, #56	; 0x38
 800dde2:	4619      	mov	r1, r3
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	887b      	ldrh	r3, [r7, #2]
 800dde8:	f7fd fe16 	bl	800ba18 <HAL_DMA_Start_IT>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e06e      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68da      	ldr	r2, [r3, #12]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de04:	60da      	str	r2, [r3, #12]
      break;
 800de06:	e048      	b.n	800de9a <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0c:	4a33      	ldr	r2, [pc, #204]	; (800dedc <HAL_TIM_IC_Start_DMA+0x30c>)
 800de0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de14:	4a32      	ldr	r2, [pc, #200]	; (800dee0 <HAL_TIM_IC_Start_DMA+0x310>)
 800de16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1c:	4a31      	ldr	r2, [pc, #196]	; (800dee4 <HAL_TIM_IC_Start_DMA+0x314>)
 800de1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	333c      	adds	r3, #60	; 0x3c
 800de2a:	4619      	mov	r1, r3
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	887b      	ldrh	r3, [r7, #2]
 800de30:	f7fd fdf2 	bl	800ba18 <HAL_DMA_Start_IT>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e04a      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68da      	ldr	r2, [r3, #12]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de4c:	60da      	str	r2, [r3, #12]
      break;
 800de4e:	e024      	b.n	800de9a <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de54:	4a21      	ldr	r2, [pc, #132]	; (800dedc <HAL_TIM_IC_Start_DMA+0x30c>)
 800de56:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5c:	4a20      	ldr	r2, [pc, #128]	; (800dee0 <HAL_TIM_IC_Start_DMA+0x310>)
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de64:	4a1f      	ldr	r2, [pc, #124]	; (800dee4 <HAL_TIM_IC_Start_DMA+0x314>)
 800de66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3340      	adds	r3, #64	; 0x40
 800de72:	4619      	mov	r1, r3
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	887b      	ldrh	r3, [r7, #2]
 800de78:	f7fd fdce 	bl	800ba18 <HAL_DMA_Start_IT>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e026      	b.n	800ded4 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de94:	60da      	str	r2, [r3, #12]
      break;
 800de96:	e000      	b.n	800de9a <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800de98:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2201      	movs	r2, #1
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f001 fd5c 	bl	800f960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	4b0e      	ldr	r3, [pc, #56]	; (800dee8 <HAL_TIM_IC_Start_DMA+0x318>)
 800deb0:	4013      	ands	r3, r2
 800deb2:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	2b06      	cmp	r3, #6
 800deb8:	d00b      	beq.n	800ded2 <HAL_TIM_IC_Start_DMA+0x302>
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dec0:	d007      	beq.n	800ded2 <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f042 0201 	orr.w	r2, r2, #1
 800ded0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	0800eb87 	.word	0x0800eb87
 800dee0:	0800ec4f 	.word	0x0800ec4f
 800dee4:	0800eaf5 	.word	0x0800eaf5
 800dee8:	00010007 	.word	0x00010007

0800deec <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b0c      	cmp	r3, #12
 800defa:	d855      	bhi.n	800dfa8 <HAL_TIM_IC_Stop_DMA+0xbc>
 800defc:	a201      	add	r2, pc, #4	; (adr r2, 800df04 <HAL_TIM_IC_Stop_DMA+0x18>)
 800defe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df02:	bf00      	nop
 800df04:	0800df39 	.word	0x0800df39
 800df08:	0800dfa9 	.word	0x0800dfa9
 800df0c:	0800dfa9 	.word	0x0800dfa9
 800df10:	0800dfa9 	.word	0x0800dfa9
 800df14:	0800df55 	.word	0x0800df55
 800df18:	0800dfa9 	.word	0x0800dfa9
 800df1c:	0800dfa9 	.word	0x0800dfa9
 800df20:	0800dfa9 	.word	0x0800dfa9
 800df24:	0800df71 	.word	0x0800df71
 800df28:	0800dfa9 	.word	0x0800dfa9
 800df2c:	0800dfa9 	.word	0x0800dfa9
 800df30:	0800dfa9 	.word	0x0800dfa9
 800df34:	0800df8d 	.word	0x0800df8d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	68da      	ldr	r2, [r3, #12]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fd fe37 	bl	800bbc0 <HAL_DMA_Abort_IT>
      break;
 800df52:	e02a      	b.n	800dfaa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68da      	ldr	r2, [r3, #12]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fd fe29 	bl	800bbc0 <HAL_DMA_Abort_IT>
      break;
 800df6e:	e01c      	b.n	800dfaa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df84:	4618      	mov	r0, r3
 800df86:	f7fd fe1b 	bl	800bbc0 <HAL_DMA_Abort_IT>
      break;
 800df8a:	e00e      	b.n	800dfaa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68da      	ldr	r2, [r3, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd fe0d 	bl	800bbc0 <HAL_DMA_Abort_IT>
      break;
 800dfa6:	e000      	b.n	800dfaa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800dfa8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f001 fcd4 	bl	800f960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6a1a      	ldr	r2, [r3, #32]
 800dfbe:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10f      	bne.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xfc>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6a1a      	ldr	r2, [r3, #32]
 800dfce:	f244 4344 	movw	r3, #17476	; 0x4444
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d107      	bne.n	800dfe8 <HAL_TIM_IC_Stop_DMA+0xfc>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f022 0201 	bic.w	r2, r2, #1
 800dfe6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <HAL_TIM_IC_Stop_DMA+0x10c>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dff6:	e023      	b.n	800e040 <HAL_TIM_IC_Stop_DMA+0x154>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d104      	bne.n	800e008 <HAL_TIM_IC_Stop_DMA+0x11c>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e006:	e01b      	b.n	800e040 <HAL_TIM_IC_Stop_DMA+0x154>
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	2b08      	cmp	r3, #8
 800e00c:	d104      	bne.n	800e018 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2201      	movs	r2, #1
 800e012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e016:	e013      	b.n	800e040 <HAL_TIM_IC_Stop_DMA+0x154>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	2b0c      	cmp	r3, #12
 800e01c:	d104      	bne.n	800e028 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e026:	e00b      	b.n	800e040 <HAL_TIM_IC_Stop_DMA+0x154>
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2b10      	cmp	r3, #16
 800e02c:	d104      	bne.n	800e038 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e036:	e003      	b.n	800e040 <HAL_TIM_IC_Stop_DMA+0x154>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d104      	bne.n	800e050 <HAL_TIM_IC_Stop_DMA+0x164>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e04e:	e013      	b.n	800e078 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	2b04      	cmp	r3, #4
 800e054:	d104      	bne.n	800e060 <HAL_TIM_IC_Stop_DMA+0x174>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e05e:	e00b      	b.n	800e078 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b08      	cmp	r3, #8
 800e064:	d104      	bne.n	800e070 <HAL_TIM_IC_Stop_DMA+0x184>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e06e:	e003      	b.n	800e078 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop

0800e084 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	e097      	b.n	800e1c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d106      	bne.n	800e0b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7fa fe9b 	bl	8008de8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	6812      	ldr	r2, [r2, #0]
 800e0c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e0c8:	f023 0307 	bic.w	r3, r3, #7
 800e0cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4610      	mov	r0, r2
 800e0da:	f000 fded 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	697a      	ldr	r2, [r7, #20]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	699b      	ldr	r3, [r3, #24]
 800e114:	021b      	lsls	r3, r3, #8
 800e116:	4313      	orrs	r3, r2
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e124:	f023 030c 	bic.w	r3, r3, #12
 800e128:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	68da      	ldr	r2, [r3, #12]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	69db      	ldr	r3, [r3, #28]
 800e13e:	021b      	lsls	r3, r3, #8
 800e140:	4313      	orrs	r3, r2
 800e142:	693a      	ldr	r2, [r7, #16]
 800e144:	4313      	orrs	r3, r2
 800e146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	011a      	lsls	r2, r3, #4
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	6a1b      	ldr	r3, [r3, #32]
 800e152:	031b      	lsls	r3, r3, #12
 800e154:	4313      	orrs	r3, r2
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	4313      	orrs	r3, r2
 800e15a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e162:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e16a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	695b      	ldr	r3, [r3, #20]
 800e174:	011b      	lsls	r3, r3, #4
 800e176:	4313      	orrs	r3, r2
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	693a      	ldr	r2, [r7, #16]
 800e18c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3718      	adds	r7, #24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	f003 0302 	and.w	r3, r3, #2
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d122      	bne.n	800e22c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f003 0302 	and.w	r3, r3, #2
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d11b      	bne.n	800e22c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f06f 0202 	mvn.w	r2, #2
 800e1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	f003 0303 	and.w	r3, r3, #3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7f8 fad8 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 800e218:	e005      	b.n	800e226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fc38 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fc49 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	f003 0304 	and.w	r3, r3, #4
 800e236:	2b04      	cmp	r3, #4
 800e238:	d122      	bne.n	800e280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b04      	cmp	r3, #4
 800e246:	d11b      	bne.n	800e280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f06f 0204 	mvn.w	r2, #4
 800e250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2202      	movs	r2, #2
 800e256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7f8 faae 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 800e26c:	e005      	b.n	800e27a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fc0e 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fc1f 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f003 0308 	and.w	r3, r3, #8
 800e28a:	2b08      	cmp	r3, #8
 800e28c:	d122      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d11b      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f06f 0208 	mvn.w	r2, #8
 800e2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2204      	movs	r2, #4
 800e2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	f003 0303 	and.w	r3, r3, #3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7f8 fa84 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 800e2c0:	e005      	b.n	800e2ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fbe4 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fbf5 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d122      	bne.n	800e328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b10      	cmp	r3, #16
 800e2ee:	d11b      	bne.n	800e328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f06f 0210 	mvn.w	r2, #16
 800e2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2208      	movs	r2, #8
 800e2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7f8 fa5a 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
 800e314:	e005      	b.n	800e322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fbba 	bl	800ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fbcb 	bl	800eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b01      	cmp	r3, #1
 800e334:	d10e      	bne.n	800e354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b01      	cmp	r3, #1
 800e342:	d107      	bne.n	800e354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f06f 0201 	mvn.w	r2, #1
 800e34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fb94 	bl	800ea7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35e:	2b80      	cmp	r3, #128	; 0x80
 800e360:	d10e      	bne.n	800e380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36c:	2b80      	cmp	r3, #128	; 0x80
 800e36e:	d107      	bne.n	800e380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f001 fc68 	bl	800fc50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e38e:	d10e      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e39a:	2b80      	cmp	r3, #128	; 0x80
 800e39c:	d107      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f001 fc5b 	bl	800fc64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b8:	2b40      	cmp	r3, #64	; 0x40
 800e3ba:	d10e      	bne.n	800e3da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c6:	2b40      	cmp	r3, #64	; 0x40
 800e3c8:	d107      	bne.n	800e3da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fb79 	bl	800eacc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f003 0320 	and.w	r3, r3, #32
 800e3e4:	2b20      	cmp	r3, #32
 800e3e6:	d10e      	bne.n	800e406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	f003 0320 	and.w	r3, r3, #32
 800e3f2:	2b20      	cmp	r3, #32
 800e3f4:	d107      	bne.n	800e406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f06f 0220 	mvn.w	r2, #32
 800e3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f001 fc1b 	bl	800fc3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e414:	d10f      	bne.n	800e436 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e424:	d107      	bne.n	800e436 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f001 fc21 	bl	800fc78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e444:	d10f      	bne.n	800e466 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e454:	d107      	bne.n	800e466 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 fc13 	bl	800fc8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e474:	d10f      	bne.n	800e496 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e484:	d107      	bne.n	800e496 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f001 fc05 	bl	800fca0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4a4:	d10f      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4b4:	d107      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f001 fbf7 	bl	800fcb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d101      	bne.n	800e4e8 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	e082      	b.n	800e5ee <HAL_TIM_IC_ConfigChannel+0x120>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d11b      	bne.n	800e52e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6818      	ldr	r0, [r3, #0]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	6819      	ldr	r1, [r3, #0]
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	f001 f865 	bl	800f5d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	699a      	ldr	r2, [r3, #24]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f022 020c 	bic.w	r2, r2, #12
 800e518:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6999      	ldr	r1, [r3, #24]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	430a      	orrs	r2, r1
 800e52a:	619a      	str	r2, [r3, #24]
 800e52c:	e05a      	b.n	800e5e4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b04      	cmp	r3, #4
 800e532:	d11c      	bne.n	800e56e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6818      	ldr	r0, [r3, #0]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	6819      	ldr	r1, [r3, #0]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f001 f8e9 	bl	800f71a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699a      	ldr	r2, [r3, #24]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e556:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6999      	ldr	r1, [r3, #24]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	021a      	lsls	r2, r3, #8
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	430a      	orrs	r2, r1
 800e56a:	619a      	str	r2, [r3, #24]
 800e56c:	e03a      	b.n	800e5e4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b08      	cmp	r3, #8
 800e572:	d11b      	bne.n	800e5ac <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6818      	ldr	r0, [r3, #0]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	6819      	ldr	r1, [r3, #0]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	f001 f936 	bl	800f7f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	69da      	ldr	r2, [r3, #28]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f022 020c 	bic.w	r2, r2, #12
 800e596:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	69d9      	ldr	r1, [r3, #28]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	689a      	ldr	r2, [r3, #8]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	61da      	str	r2, [r3, #28]
 800e5aa:	e01b      	b.n	800e5e4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	6819      	ldr	r1, [r3, #0]
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	f001 f956 	bl	800f86c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	69da      	ldr	r2, [r3, #28]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e5ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	69d9      	ldr	r1, [r3, #28]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	021a      	lsls	r2, r3, #8
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	430a      	orrs	r2, r1
 800e5e2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
	...

0800e5f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d101      	bne.n	800e612 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e60e:	2302      	movs	r3, #2
 800e610:	e0fd      	b.n	800e80e <HAL_TIM_PWM_ConfigChannel+0x216>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b14      	cmp	r3, #20
 800e61e:	f200 80f0 	bhi.w	800e802 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e622:	a201      	add	r2, pc, #4	; (adr r2, 800e628 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e628:	0800e67d 	.word	0x0800e67d
 800e62c:	0800e803 	.word	0x0800e803
 800e630:	0800e803 	.word	0x0800e803
 800e634:	0800e803 	.word	0x0800e803
 800e638:	0800e6bd 	.word	0x0800e6bd
 800e63c:	0800e803 	.word	0x0800e803
 800e640:	0800e803 	.word	0x0800e803
 800e644:	0800e803 	.word	0x0800e803
 800e648:	0800e6ff 	.word	0x0800e6ff
 800e64c:	0800e803 	.word	0x0800e803
 800e650:	0800e803 	.word	0x0800e803
 800e654:	0800e803 	.word	0x0800e803
 800e658:	0800e73f 	.word	0x0800e73f
 800e65c:	0800e803 	.word	0x0800e803
 800e660:	0800e803 	.word	0x0800e803
 800e664:	0800e803 	.word	0x0800e803
 800e668:	0800e781 	.word	0x0800e781
 800e66c:	0800e803 	.word	0x0800e803
 800e670:	0800e803 	.word	0x0800e803
 800e674:	0800e803 	.word	0x0800e803
 800e678:	0800e7c1 	.word	0x0800e7c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68b9      	ldr	r1, [r7, #8]
 800e682:	4618      	mov	r0, r3
 800e684:	f000 fbc0 	bl	800ee08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f042 0208 	orr.w	r2, r2, #8
 800e696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	699a      	ldr	r2, [r3, #24]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f022 0204 	bic.w	r2, r2, #4
 800e6a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6999      	ldr	r1, [r3, #24]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	691a      	ldr	r2, [r3, #16]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	430a      	orrs	r2, r1
 800e6b8:	619a      	str	r2, [r3, #24]
      break;
 800e6ba:	e0a3      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68b9      	ldr	r1, [r7, #8]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fc3a 	bl	800ef3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	699a      	ldr	r2, [r3, #24]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	699a      	ldr	r2, [r3, #24]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6999      	ldr	r1, [r3, #24]
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	021a      	lsls	r2, r3, #8
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	430a      	orrs	r2, r1
 800e6fa:	619a      	str	r2, [r3, #24]
      break;
 800e6fc:	e082      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68b9      	ldr	r1, [r7, #8]
 800e704:	4618      	mov	r0, r3
 800e706:	f000 fcad 	bl	800f064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69da      	ldr	r2, [r3, #28]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f042 0208 	orr.w	r2, r2, #8
 800e718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	69da      	ldr	r2, [r3, #28]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0204 	bic.w	r2, r2, #4
 800e728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69d9      	ldr	r1, [r3, #28]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	691a      	ldr	r2, [r3, #16]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	430a      	orrs	r2, r1
 800e73a:	61da      	str	r2, [r3, #28]
      break;
 800e73c:	e062      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68b9      	ldr	r1, [r7, #8]
 800e744:	4618      	mov	r0, r3
 800e746:	f000 fd1f 	bl	800f188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	69da      	ldr	r2, [r3, #28]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	69da      	ldr	r2, [r3, #28]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69d9      	ldr	r1, [r3, #28]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	691b      	ldr	r3, [r3, #16]
 800e774:	021a      	lsls	r2, r3, #8
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	430a      	orrs	r2, r1
 800e77c:	61da      	str	r2, [r3, #28]
      break;
 800e77e:	e041      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	68b9      	ldr	r1, [r7, #8]
 800e786:	4618      	mov	r0, r3
 800e788:	f000 fd92 	bl	800f2b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f042 0208 	orr.w	r2, r2, #8
 800e79a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f022 0204 	bic.w	r2, r2, #4
 800e7aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	691a      	ldr	r2, [r3, #16]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e7be:	e021      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fddc 	bl	800f384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	021a      	lsls	r2, r3, #8
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e800:	e000      	b.n	800e804 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e802:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop

0800e818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d101      	bne.n	800e830 <HAL_TIM_ConfigClockSource+0x18>
 800e82c:	2302      	movs	r3, #2
 800e82e:	e0d2      	b.n	800e9d6 <HAL_TIM_ConfigClockSource+0x1be>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2202      	movs	r2, #2
 800e83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e84e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e85a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e86c:	f000 80a9 	beq.w	800e9c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e874:	d81a      	bhi.n	800e8ac <HAL_TIM_ConfigClockSource+0x94>
 800e876:	2b30      	cmp	r3, #48	; 0x30
 800e878:	f000 809a 	beq.w	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e87c:	2b30      	cmp	r3, #48	; 0x30
 800e87e:	d809      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x7c>
 800e880:	2b10      	cmp	r3, #16
 800e882:	f000 8095 	beq.w	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e886:	2b20      	cmp	r3, #32
 800e888:	f000 8092 	beq.w	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 808f 	beq.w	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e892:	e097      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e894:	2b50      	cmp	r3, #80	; 0x50
 800e896:	d05b      	beq.n	800e950 <HAL_TIM_ConfigClockSource+0x138>
 800e898:	2b50      	cmp	r3, #80	; 0x50
 800e89a:	d802      	bhi.n	800e8a2 <HAL_TIM_ConfigClockSource+0x8a>
 800e89c:	2b40      	cmp	r3, #64	; 0x40
 800e89e:	d077      	beq.n	800e990 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e8a0:	e090      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8a2:	2b60      	cmp	r3, #96	; 0x60
 800e8a4:	d064      	beq.n	800e970 <HAL_TIM_ConfigClockSource+0x158>
 800e8a6:	2b70      	cmp	r3, #112	; 0x70
 800e8a8:	d028      	beq.n	800e8fc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800e8aa:	e08b      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8ac:	4a4c      	ldr	r2, [pc, #304]	; (800e9e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d07e      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e8b2:	4a4b      	ldr	r2, [pc, #300]	; (800e9e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d810      	bhi.n	800e8da <HAL_TIM_ConfigClockSource+0xc2>
 800e8b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8bc:	d078      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c2:	d803      	bhi.n	800e8cc <HAL_TIM_ConfigClockSource+0xb4>
 800e8c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8c8:	d02f      	beq.n	800e92a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800e8ca:	e07b      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e8d0:	d06e      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e8d2:	4a44      	ldr	r2, [pc, #272]	; (800e9e4 <HAL_TIM_ConfigClockSource+0x1cc>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d06b      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e8d8:	e074      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8da:	4a43      	ldr	r2, [pc, #268]	; (800e9e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d067      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e8e0:	4a41      	ldr	r2, [pc, #260]	; (800e9e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d803      	bhi.n	800e8ee <HAL_TIM_ConfigClockSource+0xd6>
 800e8e6:	4a41      	ldr	r2, [pc, #260]	; (800e9ec <HAL_TIM_ConfigClockSource+0x1d4>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d061      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e8ec:	e06a      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8ee:	4a40      	ldr	r2, [pc, #256]	; (800e9f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d05d      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
 800e8f4:	4a3f      	ldr	r2, [pc, #252]	; (800e9f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d05a      	beq.n	800e9b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e8fa:	e063      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	6899      	ldr	r1, [r3, #8]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	685a      	ldr	r2, [r3, #4]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	f001 f808 	bl	800f920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e91e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	609a      	str	r2, [r3, #8]
      break;
 800e928:	e04c      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	6899      	ldr	r1, [r3, #8]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	f000 fff1 	bl	800f920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	689a      	ldr	r2, [r3, #8]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e94c:	609a      	str	r2, [r3, #8]
      break;
 800e94e:	e039      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	6859      	ldr	r1, [r3, #4]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	461a      	mov	r2, r3
 800e95e:	f000 fead 	bl	800f6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2150      	movs	r1, #80	; 0x50
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 ffbc 	bl	800f8e6 <TIM_ITRx_SetConfig>
      break;
 800e96e:	e029      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6818      	ldr	r0, [r3, #0]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	6859      	ldr	r1, [r3, #4]
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	461a      	mov	r2, r3
 800e97e:	f000 ff09 	bl	800f794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2160      	movs	r1, #96	; 0x60
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 ffac 	bl	800f8e6 <TIM_ITRx_SetConfig>
      break;
 800e98e:	e019      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6818      	ldr	r0, [r3, #0]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	6859      	ldr	r1, [r3, #4]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	461a      	mov	r2, r3
 800e99e:	f000 fe8d 	bl	800f6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2140      	movs	r1, #64	; 0x40
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f000 ff9c 	bl	800f8e6 <TIM_ITRx_SetConfig>
      break;
 800e9ae:	e009      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f000 ff93 	bl	800f8e6 <TIM_ITRx_SetConfig>
      break;
 800e9c0:	e000      	b.n	800e9c4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800e9c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	00100030 	.word	0x00100030
 800e9e4:	00100020 	.word	0x00100020
 800e9e8:	00100050 	.word	0x00100050
 800e9ec:	00100040 	.word	0x00100040
 800e9f0:	00100060 	.word	0x00100060
 800e9f4:	00100070 	.word	0x00100070

0800e9f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d101      	bne.n	800ea10 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	e031      	b.n	800ea74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 fd1a 	bl	800f45c <TIM_SlaveTimer_SetConfig>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e018      	b.n	800ea74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68da      	ldr	r2, [r3, #12]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ea60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ea84:	bf00      	nop
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d107      	bne.n	800eb1c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2201      	movs	r2, #1
 800eb16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb1a:	e02a      	b.n	800eb72 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d107      	bne.n	800eb36 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2202      	movs	r2, #2
 800eb2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb34:	e01d      	b.n	800eb72 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d107      	bne.n	800eb50 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2204      	movs	r2, #4
 800eb44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb4e:	e010      	b.n	800eb72 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d107      	bne.n	800eb6a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2208      	movs	r2, #8
 800eb5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb68:	e003      	b.n	800eb72 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7ff ffb4 	bl	800eae0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	771a      	strb	r2, [r3, #28]
}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb92:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d10f      	bne.n	800ebbe <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2201      	movs	r2, #1
 800eba2:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	69db      	ldr	r3, [r3, #28]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d146      	bne.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebbc:	e03d      	b.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d10f      	bne.n	800ebe8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2202      	movs	r2, #2
 800ebcc:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	69db      	ldr	r3, [r3, #28]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d131      	bne.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2201      	movs	r2, #1
 800ebda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebe6:	e028      	b.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d10f      	bne.n	800ec12 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	69db      	ldr	r3, [r3, #28]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d11c      	bne.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec10:	e013      	b.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d10e      	bne.n	800ec3a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2208      	movs	r2, #8
 800ec20:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d107      	bne.n	800ec3a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	f7f7 fdc4 	bl	80067c8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	771a      	strb	r2, [r3, #28]
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d103      	bne.n	800ec6e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	771a      	strb	r2, [r3, #28]
 800ec6c:	e019      	b.n	800eca2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d103      	bne.n	800ec80 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	771a      	strb	r2, [r3, #28]
 800ec7e:	e010      	b.n	800eca2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d103      	bne.n	800ec92 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	771a      	strb	r2, [r3, #28]
 800ec90:	e007      	b.n	800eca2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d102      	bne.n	800eca2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2208      	movs	r2, #8
 800eca0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff fefe 	bl	800eaa4 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	771a      	strb	r2, [r3, #28]
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a46      	ldr	r2, [pc, #280]	; (800ede4 <TIM_Base_SetConfig+0x12c>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d017      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecd6:	d013      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a43      	ldr	r2, [pc, #268]	; (800ede8 <TIM_Base_SetConfig+0x130>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d00f      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a42      	ldr	r2, [pc, #264]	; (800edec <TIM_Base_SetConfig+0x134>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d00b      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a41      	ldr	r2, [pc, #260]	; (800edf0 <TIM_Base_SetConfig+0x138>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d007      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a40      	ldr	r2, [pc, #256]	; (800edf4 <TIM_Base_SetConfig+0x13c>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d003      	beq.n	800ed00 <TIM_Base_SetConfig+0x48>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a3f      	ldr	r2, [pc, #252]	; (800edf8 <TIM_Base_SetConfig+0x140>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d108      	bne.n	800ed12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4a33      	ldr	r2, [pc, #204]	; (800ede4 <TIM_Base_SetConfig+0x12c>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d023      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed20:	d01f      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a30      	ldr	r2, [pc, #192]	; (800ede8 <TIM_Base_SetConfig+0x130>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d01b      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a2f      	ldr	r2, [pc, #188]	; (800edec <TIM_Base_SetConfig+0x134>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d017      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a2e      	ldr	r2, [pc, #184]	; (800edf0 <TIM_Base_SetConfig+0x138>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d013      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a2d      	ldr	r2, [pc, #180]	; (800edf4 <TIM_Base_SetConfig+0x13c>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00f      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a2d      	ldr	r2, [pc, #180]	; (800edfc <TIM_Base_SetConfig+0x144>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d00b      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a2c      	ldr	r2, [pc, #176]	; (800ee00 <TIM_Base_SetConfig+0x148>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d007      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a2b      	ldr	r2, [pc, #172]	; (800ee04 <TIM_Base_SetConfig+0x14c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d003      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a26      	ldr	r2, [pc, #152]	; (800edf8 <TIM_Base_SetConfig+0x140>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d108      	bne.n	800ed74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a12      	ldr	r2, [pc, #72]	; (800ede4 <TIM_Base_SetConfig+0x12c>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d013      	beq.n	800edc8 <TIM_Base_SetConfig+0x110>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a14      	ldr	r2, [pc, #80]	; (800edf4 <TIM_Base_SetConfig+0x13c>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d00f      	beq.n	800edc8 <TIM_Base_SetConfig+0x110>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a14      	ldr	r2, [pc, #80]	; (800edfc <TIM_Base_SetConfig+0x144>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d00b      	beq.n	800edc8 <TIM_Base_SetConfig+0x110>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a13      	ldr	r2, [pc, #76]	; (800ee00 <TIM_Base_SetConfig+0x148>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d007      	beq.n	800edc8 <TIM_Base_SetConfig+0x110>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a12      	ldr	r2, [pc, #72]	; (800ee04 <TIM_Base_SetConfig+0x14c>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d003      	beq.n	800edc8 <TIM_Base_SetConfig+0x110>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a0d      	ldr	r2, [pc, #52]	; (800edf8 <TIM_Base_SetConfig+0x140>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d103      	bne.n	800edd0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	691a      	ldr	r2, [r3, #16]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	615a      	str	r2, [r3, #20]
}
 800edd6:	bf00      	nop
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop
 800ede4:	40012c00 	.word	0x40012c00
 800ede8:	40000400 	.word	0x40000400
 800edec:	40000800 	.word	0x40000800
 800edf0:	40000c00 	.word	0x40000c00
 800edf4:	40013400 	.word	0x40013400
 800edf8:	40015000 	.word	0x40015000
 800edfc:	40014000 	.word	0x40014000
 800ee00:	40014400 	.word	0x40014400
 800ee04:	40014800 	.word	0x40014800

0800ee08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	f023 0201 	bic.w	r2, r3, #1
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f023 0303 	bic.w	r3, r3, #3
 800ee42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	f023 0302 	bic.w	r3, r3, #2
 800ee54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a30      	ldr	r2, [pc, #192]	; (800ef24 <TIM_OC1_SetConfig+0x11c>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d013      	beq.n	800ee90 <TIM_OC1_SetConfig+0x88>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a2f      	ldr	r2, [pc, #188]	; (800ef28 <TIM_OC1_SetConfig+0x120>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d00f      	beq.n	800ee90 <TIM_OC1_SetConfig+0x88>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a2e      	ldr	r2, [pc, #184]	; (800ef2c <TIM_OC1_SetConfig+0x124>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d00b      	beq.n	800ee90 <TIM_OC1_SetConfig+0x88>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a2d      	ldr	r2, [pc, #180]	; (800ef30 <TIM_OC1_SetConfig+0x128>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d007      	beq.n	800ee90 <TIM_OC1_SetConfig+0x88>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a2c      	ldr	r2, [pc, #176]	; (800ef34 <TIM_OC1_SetConfig+0x12c>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d003      	beq.n	800ee90 <TIM_OC1_SetConfig+0x88>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a2b      	ldr	r2, [pc, #172]	; (800ef38 <TIM_OC1_SetConfig+0x130>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d10c      	bne.n	800eeaa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f023 0308 	bic.w	r3, r3, #8
 800ee96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	697a      	ldr	r2, [r7, #20]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	f023 0304 	bic.w	r3, r3, #4
 800eea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a1d      	ldr	r2, [pc, #116]	; (800ef24 <TIM_OC1_SetConfig+0x11c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <TIM_OC1_SetConfig+0xd2>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a1c      	ldr	r2, [pc, #112]	; (800ef28 <TIM_OC1_SetConfig+0x120>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d00f      	beq.n	800eeda <TIM_OC1_SetConfig+0xd2>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a1b      	ldr	r2, [pc, #108]	; (800ef2c <TIM_OC1_SetConfig+0x124>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00b      	beq.n	800eeda <TIM_OC1_SetConfig+0xd2>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a1a      	ldr	r2, [pc, #104]	; (800ef30 <TIM_OC1_SetConfig+0x128>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d007      	beq.n	800eeda <TIM_OC1_SetConfig+0xd2>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a19      	ldr	r2, [pc, #100]	; (800ef34 <TIM_OC1_SetConfig+0x12c>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d003      	beq.n	800eeda <TIM_OC1_SetConfig+0xd2>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a18      	ldr	r2, [pc, #96]	; (800ef38 <TIM_OC1_SetConfig+0x130>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d111      	bne.n	800eefe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	695b      	ldr	r3, [r3, #20]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	693a      	ldr	r2, [r7, #16]
 800ef02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	621a      	str	r2, [r3, #32]
}
 800ef18:	bf00      	nop
 800ef1a:	371c      	adds	r7, #28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	40012c00 	.word	0x40012c00
 800ef28:	40013400 	.word	0x40013400
 800ef2c:	40014000 	.word	0x40014000
 800ef30:	40014400 	.word	0x40014400
 800ef34:	40014800 	.word	0x40014800
 800ef38:	40015000 	.word	0x40015000

0800ef3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b087      	sub	sp, #28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	f023 0210 	bic.w	r2, r3, #16
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	021b      	lsls	r3, r3, #8
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	f023 0320 	bic.w	r3, r3, #32
 800ef8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a2c      	ldr	r2, [pc, #176]	; (800f04c <TIM_OC2_SetConfig+0x110>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d007      	beq.n	800efb0 <TIM_OC2_SetConfig+0x74>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a2b      	ldr	r2, [pc, #172]	; (800f050 <TIM_OC2_SetConfig+0x114>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d003      	beq.n	800efb0 <TIM_OC2_SetConfig+0x74>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a2a      	ldr	r2, [pc, #168]	; (800f054 <TIM_OC2_SetConfig+0x118>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d10d      	bne.n	800efcc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	011b      	lsls	r3, r3, #4
 800efbe:	697a      	ldr	r2, [r7, #20]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a1f      	ldr	r2, [pc, #124]	; (800f04c <TIM_OC2_SetConfig+0x110>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d013      	beq.n	800effc <TIM_OC2_SetConfig+0xc0>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a1e      	ldr	r2, [pc, #120]	; (800f050 <TIM_OC2_SetConfig+0x114>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d00f      	beq.n	800effc <TIM_OC2_SetConfig+0xc0>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a1e      	ldr	r2, [pc, #120]	; (800f058 <TIM_OC2_SetConfig+0x11c>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d00b      	beq.n	800effc <TIM_OC2_SetConfig+0xc0>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a1d      	ldr	r2, [pc, #116]	; (800f05c <TIM_OC2_SetConfig+0x120>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d007      	beq.n	800effc <TIM_OC2_SetConfig+0xc0>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a1c      	ldr	r2, [pc, #112]	; (800f060 <TIM_OC2_SetConfig+0x124>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d003      	beq.n	800effc <TIM_OC2_SetConfig+0xc0>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a17      	ldr	r2, [pc, #92]	; (800f054 <TIM_OC2_SetConfig+0x118>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d113      	bne.n	800f024 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f00a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	4313      	orrs	r3, r2
 800f016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	4313      	orrs	r3, r2
 800f022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	693a      	ldr	r2, [r7, #16]
 800f028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	621a      	str	r2, [r3, #32]
}
 800f03e:	bf00      	nop
 800f040:	371c      	adds	r7, #28
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	40012c00 	.word	0x40012c00
 800f050:	40013400 	.word	0x40013400
 800f054:	40015000 	.word	0x40015000
 800f058:	40014000 	.word	0x40014000
 800f05c:	40014400 	.word	0x40014400
 800f060:	40014800 	.word	0x40014800

0800f064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f064:	b480      	push	{r7}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f023 0303 	bic.w	r3, r3, #3
 800f09e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	021b      	lsls	r3, r3, #8
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a2b      	ldr	r2, [pc, #172]	; (800f170 <TIM_OC3_SetConfig+0x10c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d007      	beq.n	800f0d6 <TIM_OC3_SetConfig+0x72>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a2a      	ldr	r2, [pc, #168]	; (800f174 <TIM_OC3_SetConfig+0x110>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d003      	beq.n	800f0d6 <TIM_OC3_SetConfig+0x72>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a29      	ldr	r2, [pc, #164]	; (800f178 <TIM_OC3_SetConfig+0x114>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d10d      	bne.n	800f0f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	021b      	lsls	r3, r3, #8
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a1e      	ldr	r2, [pc, #120]	; (800f170 <TIM_OC3_SetConfig+0x10c>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d013      	beq.n	800f122 <TIM_OC3_SetConfig+0xbe>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <TIM_OC3_SetConfig+0x110>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d00f      	beq.n	800f122 <TIM_OC3_SetConfig+0xbe>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a1d      	ldr	r2, [pc, #116]	; (800f17c <TIM_OC3_SetConfig+0x118>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d00b      	beq.n	800f122 <TIM_OC3_SetConfig+0xbe>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a1c      	ldr	r2, [pc, #112]	; (800f180 <TIM_OC3_SetConfig+0x11c>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d007      	beq.n	800f122 <TIM_OC3_SetConfig+0xbe>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a1b      	ldr	r2, [pc, #108]	; (800f184 <TIM_OC3_SetConfig+0x120>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d003      	beq.n	800f122 <TIM_OC3_SetConfig+0xbe>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a16      	ldr	r2, [pc, #88]	; (800f178 <TIM_OC3_SetConfig+0x114>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d113      	bne.n	800f14a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	695b      	ldr	r3, [r3, #20]
 800f136:	011b      	lsls	r3, r3, #4
 800f138:	693a      	ldr	r2, [r7, #16]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	699b      	ldr	r3, [r3, #24]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	4313      	orrs	r3, r2
 800f148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	685a      	ldr	r2, [r3, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	697a      	ldr	r2, [r7, #20]
 800f162:	621a      	str	r2, [r3, #32]
}
 800f164:	bf00      	nop
 800f166:	371c      	adds	r7, #28
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	40012c00 	.word	0x40012c00
 800f174:	40013400 	.word	0x40013400
 800f178:	40015000 	.word	0x40015000
 800f17c:	40014000 	.word	0x40014000
 800f180:	40014400 	.word	0x40014400
 800f184:	40014800 	.word	0x40014800

0800f188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f188:	b480      	push	{r7}
 800f18a:	b087      	sub	sp, #28
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6a1b      	ldr	r3, [r3, #32]
 800f196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	021b      	lsls	r3, r3, #8
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	031b      	lsls	r3, r3, #12
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a2c      	ldr	r2, [pc, #176]	; (800f298 <TIM_OC4_SetConfig+0x110>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d007      	beq.n	800f1fc <TIM_OC4_SetConfig+0x74>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4a2b      	ldr	r2, [pc, #172]	; (800f29c <TIM_OC4_SetConfig+0x114>)
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d003      	beq.n	800f1fc <TIM_OC4_SetConfig+0x74>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4a2a      	ldr	r2, [pc, #168]	; (800f2a0 <TIM_OC4_SetConfig+0x118>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d10d      	bne.n	800f218 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	031b      	lsls	r3, r3, #12
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4a1f      	ldr	r2, [pc, #124]	; (800f298 <TIM_OC4_SetConfig+0x110>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d013      	beq.n	800f248 <TIM_OC4_SetConfig+0xc0>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4a1e      	ldr	r2, [pc, #120]	; (800f29c <TIM_OC4_SetConfig+0x114>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d00f      	beq.n	800f248 <TIM_OC4_SetConfig+0xc0>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	4a1e      	ldr	r2, [pc, #120]	; (800f2a4 <TIM_OC4_SetConfig+0x11c>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d00b      	beq.n	800f248 <TIM_OC4_SetConfig+0xc0>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a1d      	ldr	r2, [pc, #116]	; (800f2a8 <TIM_OC4_SetConfig+0x120>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d007      	beq.n	800f248 <TIM_OC4_SetConfig+0xc0>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a1c      	ldr	r2, [pc, #112]	; (800f2ac <TIM_OC4_SetConfig+0x124>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d003      	beq.n	800f248 <TIM_OC4_SetConfig+0xc0>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a17      	ldr	r2, [pc, #92]	; (800f2a0 <TIM_OC4_SetConfig+0x118>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d113      	bne.n	800f270 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f24e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f256:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	695b      	ldr	r3, [r3, #20]
 800f25c:	019b      	lsls	r3, r3, #6
 800f25e:	693a      	ldr	r2, [r7, #16]
 800f260:	4313      	orrs	r3, r2
 800f262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	019b      	lsls	r3, r3, #6
 800f26a:	693a      	ldr	r2, [r7, #16]
 800f26c:	4313      	orrs	r3, r2
 800f26e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	693a      	ldr	r2, [r7, #16]
 800f274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	685a      	ldr	r2, [r3, #4]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	621a      	str	r2, [r3, #32]
}
 800f28a:	bf00      	nop
 800f28c:	371c      	adds	r7, #28
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	40012c00 	.word	0x40012c00
 800f29c:	40013400 	.word	0x40013400
 800f2a0:	40015000 	.word	0x40015000
 800f2a4:	40014000 	.word	0x40014000
 800f2a8:	40014400 	.word	0x40014400
 800f2ac:	40014800 	.word	0x40014800

0800f2b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b087      	sub	sp, #28
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f2f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	041b      	lsls	r3, r3, #16
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a19      	ldr	r2, [pc, #100]	; (800f36c <TIM_OC5_SetConfig+0xbc>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d013      	beq.n	800f332 <TIM_OC5_SetConfig+0x82>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a18      	ldr	r2, [pc, #96]	; (800f370 <TIM_OC5_SetConfig+0xc0>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d00f      	beq.n	800f332 <TIM_OC5_SetConfig+0x82>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a17      	ldr	r2, [pc, #92]	; (800f374 <TIM_OC5_SetConfig+0xc4>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d00b      	beq.n	800f332 <TIM_OC5_SetConfig+0x82>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a16      	ldr	r2, [pc, #88]	; (800f378 <TIM_OC5_SetConfig+0xc8>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d007      	beq.n	800f332 <TIM_OC5_SetConfig+0x82>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a15      	ldr	r2, [pc, #84]	; (800f37c <TIM_OC5_SetConfig+0xcc>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d003      	beq.n	800f332 <TIM_OC5_SetConfig+0x82>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4a14      	ldr	r2, [pc, #80]	; (800f380 <TIM_OC5_SetConfig+0xd0>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d109      	bne.n	800f346 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	695b      	ldr	r3, [r3, #20]
 800f33e:	021b      	lsls	r3, r3, #8
 800f340:	697a      	ldr	r2, [r7, #20]
 800f342:	4313      	orrs	r3, r2
 800f344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	693a      	ldr	r2, [r7, #16]
 800f35e:	621a      	str	r2, [r3, #32]
}
 800f360:	bf00      	nop
 800f362:	371c      	adds	r7, #28
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	40012c00 	.word	0x40012c00
 800f370:	40013400 	.word	0x40013400
 800f374:	40014000 	.word	0x40014000
 800f378:	40014400 	.word	0x40014400
 800f37c:	40014800 	.word	0x40014800
 800f380:	40015000 	.word	0x40015000

0800f384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f384:	b480      	push	{r7}
 800f386:	b087      	sub	sp, #28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a1b      	ldr	r3, [r3, #32]
 800f392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	021b      	lsls	r3, r3, #8
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	051b      	lsls	r3, r3, #20
 800f3d2:	693a      	ldr	r2, [r7, #16]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a1a      	ldr	r2, [pc, #104]	; (800f444 <TIM_OC6_SetConfig+0xc0>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d013      	beq.n	800f408 <TIM_OC6_SetConfig+0x84>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a19      	ldr	r2, [pc, #100]	; (800f448 <TIM_OC6_SetConfig+0xc4>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d00f      	beq.n	800f408 <TIM_OC6_SetConfig+0x84>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a18      	ldr	r2, [pc, #96]	; (800f44c <TIM_OC6_SetConfig+0xc8>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d00b      	beq.n	800f408 <TIM_OC6_SetConfig+0x84>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a17      	ldr	r2, [pc, #92]	; (800f450 <TIM_OC6_SetConfig+0xcc>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d007      	beq.n	800f408 <TIM_OC6_SetConfig+0x84>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a16      	ldr	r2, [pc, #88]	; (800f454 <TIM_OC6_SetConfig+0xd0>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d003      	beq.n	800f408 <TIM_OC6_SetConfig+0x84>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a15      	ldr	r2, [pc, #84]	; (800f458 <TIM_OC6_SetConfig+0xd4>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d109      	bne.n	800f41c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f40e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	695b      	ldr	r3, [r3, #20]
 800f414:	029b      	lsls	r3, r3, #10
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	4313      	orrs	r3, r2
 800f41a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	621a      	str	r2, [r3, #32]
}
 800f436:	bf00      	nop
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	40012c00 	.word	0x40012c00
 800f448:	40013400 	.word	0x40013400
 800f44c:	40014000 	.word	0x40014000
 800f450:	40014400 	.word	0x40014400
 800f454:	40014800 	.word	0x40014800
 800f458:	40015000 	.word	0x40015000

0800f45c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f478:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	4313      	orrs	r3, r2
 800f482:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f48a:	f023 0307 	bic.w	r3, r3, #7
 800f48e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	697a      	ldr	r2, [r7, #20]
 800f496:	4313      	orrs	r3, r2
 800f498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	2b70      	cmp	r3, #112	; 0x70
 800f4a8:	d034      	beq.n	800f514 <TIM_SlaveTimer_SetConfig+0xb8>
 800f4aa:	2b70      	cmp	r3, #112	; 0x70
 800f4ac:	d811      	bhi.n	800f4d2 <TIM_SlaveTimer_SetConfig+0x76>
 800f4ae:	2b30      	cmp	r3, #48	; 0x30
 800f4b0:	d07d      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4b2:	2b30      	cmp	r3, #48	; 0x30
 800f4b4:	d806      	bhi.n	800f4c4 <TIM_SlaveTimer_SetConfig+0x68>
 800f4b6:	2b10      	cmp	r3, #16
 800f4b8:	d079      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4ba:	2b20      	cmp	r3, #32
 800f4bc:	d077      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d075      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f4c2:	e075      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4c4:	2b50      	cmp	r3, #80	; 0x50
 800f4c6:	d05e      	beq.n	800f586 <TIM_SlaveTimer_SetConfig+0x12a>
 800f4c8:	2b60      	cmp	r3, #96	; 0x60
 800f4ca:	d066      	beq.n	800f59a <TIM_SlaveTimer_SetConfig+0x13e>
 800f4cc:	2b40      	cmp	r3, #64	; 0x40
 800f4ce:	d02c      	beq.n	800f52a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f4d0:	e06e      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4d2:	4a3a      	ldr	r2, [pc, #232]	; (800f5bc <TIM_SlaveTimer_SetConfig+0x160>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d06a      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4d8:	4a38      	ldr	r2, [pc, #224]	; (800f5bc <TIM_SlaveTimer_SetConfig+0x160>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d809      	bhi.n	800f4f2 <TIM_SlaveTimer_SetConfig+0x96>
 800f4de:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4e2:	d064      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4e4:	4a36      	ldr	r2, [pc, #216]	; (800f5c0 <TIM_SlaveTimer_SetConfig+0x164>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d061      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4ee:	d05e      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f4f0:	e05e      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4f2:	4a34      	ldr	r2, [pc, #208]	; (800f5c4 <TIM_SlaveTimer_SetConfig+0x168>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d05a      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f4f8:	4a32      	ldr	r2, [pc, #200]	; (800f5c4 <TIM_SlaveTimer_SetConfig+0x168>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d803      	bhi.n	800f506 <TIM_SlaveTimer_SetConfig+0xaa>
 800f4fe:	4a32      	ldr	r2, [pc, #200]	; (800f5c8 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d054      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f504:	e054      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f506:	4a31      	ldr	r2, [pc, #196]	; (800f5cc <TIM_SlaveTimer_SetConfig+0x170>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d050      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
 800f50c:	4a30      	ldr	r2, [pc, #192]	; (800f5d0 <TIM_SlaveTimer_SetConfig+0x174>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d04d      	beq.n	800f5ae <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f512:	e04d      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	68d9      	ldr	r1, [r3, #12]
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	689a      	ldr	r2, [r3, #8]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	f000 f9fc 	bl	800f920 <TIM_ETR_SetConfig>
      break;
 800f528:	e042      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b05      	cmp	r3, #5
 800f530:	d004      	beq.n	800f53c <TIM_SlaveTimer_SetConfig+0xe0>
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f53a:	d101      	bne.n	800f540 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	e038      	b.n	800f5b2 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6a1a      	ldr	r2, [r3, #32]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f022 0201 	bic.w	r2, r2, #1
 800f556:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	699b      	ldr	r3, [r3, #24]
 800f55e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f566:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	4313      	orrs	r3, r2
 800f572:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	621a      	str	r2, [r3, #32]
      break;
 800f584:	e014      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	6899      	ldr	r1, [r3, #8]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	461a      	mov	r2, r3
 800f594:	f000 f892 	bl	800f6bc <TIM_TI1_ConfigInputStage>
      break;
 800f598:	e00a      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6818      	ldr	r0, [r3, #0]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	6899      	ldr	r1, [r3, #8]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	f000 f8f4 	bl	800f794 <TIM_TI2_ConfigInputStage>
      break;
 800f5ac:	e000      	b.n	800f5b0 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f5ae:	bf00      	nop
  }
  return HAL_OK;
 800f5b0:	2300      	movs	r3, #0
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	00100030 	.word	0x00100030
 800f5c0:	00100020 	.word	0x00100020
 800f5c4:	00100050 	.word	0x00100050
 800f5c8:	00100040 	.word	0x00100040
 800f5cc:	00100060 	.word	0x00100060
 800f5d0:	00100070 	.word	0x00100070

0800f5d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	f023 0201 	bic.w	r2, r3, #1
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	4a28      	ldr	r2, [pc, #160]	; (800f6a0 <TIM_TI1_SetConfig+0xcc>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d01b      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f608:	d017      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4a25      	ldr	r2, [pc, #148]	; (800f6a4 <TIM_TI1_SetConfig+0xd0>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d013      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4a24      	ldr	r2, [pc, #144]	; (800f6a8 <TIM_TI1_SetConfig+0xd4>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d00f      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	4a23      	ldr	r2, [pc, #140]	; (800f6ac <TIM_TI1_SetConfig+0xd8>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d00b      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	4a22      	ldr	r2, [pc, #136]	; (800f6b0 <TIM_TI1_SetConfig+0xdc>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d007      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	4a21      	ldr	r2, [pc, #132]	; (800f6b4 <TIM_TI1_SetConfig+0xe0>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d003      	beq.n	800f63a <TIM_TI1_SetConfig+0x66>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	4a20      	ldr	r2, [pc, #128]	; (800f6b8 <TIM_TI1_SetConfig+0xe4>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d101      	bne.n	800f63e <TIM_TI1_SetConfig+0x6a>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <TIM_TI1_SetConfig+0x6c>
 800f63e:	2300      	movs	r3, #0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d008      	beq.n	800f656 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	f023 0303 	bic.w	r3, r3, #3
 800f64a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4313      	orrs	r3, r2
 800f652:	617b      	str	r3, [r7, #20]
 800f654:	e003      	b.n	800f65e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	f043 0301 	orr.w	r3, r3, #1
 800f65c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	011b      	lsls	r3, r3, #4
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	4313      	orrs	r3, r2
 800f670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	f023 030a 	bic.w	r3, r3, #10
 800f678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f003 030a 	and.w	r3, r3, #10
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	4313      	orrs	r3, r2
 800f684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	693a      	ldr	r2, [r7, #16]
 800f690:	621a      	str	r2, [r3, #32]
}
 800f692:	bf00      	nop
 800f694:	371c      	adds	r7, #28
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	40012c00 	.word	0x40012c00
 800f6a4:	40000400 	.word	0x40000400
 800f6a8:	40000800 	.word	0x40000800
 800f6ac:	40000c00 	.word	0x40000c00
 800f6b0:	40013400 	.word	0x40013400
 800f6b4:	40014000 	.word	0x40014000
 800f6b8:	40015000 	.word	0x40015000

0800f6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	f023 0201 	bic.w	r2, r3, #1
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	699b      	ldr	r3, [r3, #24]
 800f6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f023 030a 	bic.w	r3, r3, #10
 800f6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	621a      	str	r2, [r3, #32]
}
 800f70e:	bf00      	nop
 800f710:	371c      	adds	r7, #28
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b087      	sub	sp, #28
 800f71e:	af00      	add	r7, sp, #0
 800f720:	60f8      	str	r0, [r7, #12]
 800f722:	60b9      	str	r1, [r7, #8]
 800f724:	607a      	str	r2, [r7, #4]
 800f726:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6a1b      	ldr	r3, [r3, #32]
 800f72c:	f023 0210 	bic.w	r2, r3, #16
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f746:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	021b      	lsls	r3, r3, #8
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	4313      	orrs	r3, r2
 800f750:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	031b      	lsls	r3, r3, #12
 800f75e:	b29b      	uxth	r3, r3
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	4313      	orrs	r3, r2
 800f764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f76c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	011b      	lsls	r3, r3, #4
 800f772:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	4313      	orrs	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	621a      	str	r2, [r3, #32]
}
 800f788:	bf00      	nop
 800f78a:	371c      	adds	r7, #28
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f794:	b480      	push	{r7}
 800f796:	b087      	sub	sp, #28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6a1b      	ldr	r3, [r3, #32]
 800f7a4:	f023 0210 	bic.w	r2, r3, #16
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6a1b      	ldr	r3, [r3, #32]
 800f7b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	031b      	lsls	r3, r3, #12
 800f7c4:	697a      	ldr	r2, [r7, #20]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f7d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	011b      	lsls	r3, r3, #4
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	621a      	str	r2, [r3, #32]
}
 800f7e8:	bf00      	nop
 800f7ea:	371c      	adds	r7, #28
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6a1b      	ldr	r3, [r3, #32]
 800f806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	69db      	ldr	r3, [r3, #28]
 800f812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f023 0303 	bic.w	r3, r3, #3
 800f820:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4313      	orrs	r3, r2
 800f828:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f830:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	011b      	lsls	r3, r3, #4
 800f836:	b2db      	uxtb	r3, r3
 800f838:	697a      	ldr	r2, [r7, #20]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f844:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	021b      	lsls	r3, r3, #8
 800f84a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	4313      	orrs	r3, r2
 800f852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	621a      	str	r2, [r3, #32]
}
 800f860:	bf00      	nop
 800f862:	371c      	adds	r7, #28
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b087      	sub	sp, #28
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	69db      	ldr	r3, [r3, #28]
 800f88a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6a1b      	ldr	r3, [r3, #32]
 800f890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f898:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	021b      	lsls	r3, r3, #8
 800f89e:	697a      	ldr	r2, [r7, #20]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f8aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	031b      	lsls	r3, r3, #12
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	697a      	ldr	r2, [r7, #20]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f8be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	031b      	lsls	r3, r3, #12
 800f8c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f8c8:	693a      	ldr	r2, [r7, #16]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	693a      	ldr	r2, [r7, #16]
 800f8d8:	621a      	str	r2, [r3, #32]
}
 800f8da:	bf00      	nop
 800f8dc:	371c      	adds	r7, #28
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr

0800f8e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8e6:	b480      	push	{r7}
 800f8e8:	b085      	sub	sp, #20
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	689b      	ldr	r3, [r3, #8]
 800f8f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	4313      	orrs	r3, r2
 800f908:	f043 0307 	orr.w	r3, r3, #7
 800f90c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	609a      	str	r2, [r3, #8]
}
 800f914:	bf00      	nop
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f920:	b480      	push	{r7}
 800f922:	b087      	sub	sp, #28
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f93a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	021a      	lsls	r2, r3, #8
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	431a      	orrs	r2, r3
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	4313      	orrs	r3, r2
 800f948:	697a      	ldr	r2, [r7, #20]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	609a      	str	r2, [r3, #8]
}
 800f954:	bf00      	nop
 800f956:	371c      	adds	r7, #28
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f960:	b480      	push	{r7}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f003 031f 	and.w	r3, r3, #31
 800f972:	2201      	movs	r2, #1
 800f974:	fa02 f303 	lsl.w	r3, r2, r3
 800f978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6a1a      	ldr	r2, [r3, #32]
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	43db      	mvns	r3, r3
 800f982:	401a      	ands	r2, r3
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6a1a      	ldr	r2, [r3, #32]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	f003 031f 	and.w	r3, r3, #31
 800f992:	6879      	ldr	r1, [r7, #4]
 800f994:	fa01 f303 	lsl.w	r3, r1, r3
 800f998:	431a      	orrs	r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	621a      	str	r2, [r3, #32]
}
 800f99e:	bf00      	nop
 800f9a0:	371c      	adds	r7, #28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d101      	bne.n	800f9c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	e074      	b.n	800faae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a34      	ldr	r2, [pc, #208]	; (800fabc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d009      	beq.n	800fa02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a33      	ldr	r2, [pc, #204]	; (800fac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d004      	beq.n	800fa02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a31      	ldr	r2, [pc, #196]	; (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d108      	bne.n	800fa14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fa08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	4313      	orrs	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fa1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4a21      	ldr	r2, [pc, #132]	; (800fabc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d022      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa44:	d01d      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a1f      	ldr	r2, [pc, #124]	; (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d018      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a1d      	ldr	r2, [pc, #116]	; (800facc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d013      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a1c      	ldr	r2, [pc, #112]	; (800fad0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d00e      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a15      	ldr	r2, [pc, #84]	; (800fac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d009      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a18      	ldr	r2, [pc, #96]	; (800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d004      	beq.n	800fa82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a11      	ldr	r2, [pc, #68]	; (800fac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d10c      	bne.n	800fa9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	40012c00 	.word	0x40012c00
 800fac0:	40013400 	.word	0x40013400
 800fac4:	40015000 	.word	0x40015000
 800fac8:	40000400 	.word	0x40000400
 800facc:	40000800 	.word	0x40000800
 800fad0:	40000c00 	.word	0x40000c00
 800fad4:	40014000 	.word	0x40014000

0800fad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faec:	2b01      	cmp	r3, #1
 800faee:	d101      	bne.n	800faf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800faf0:	2302      	movs	r3, #2
 800faf2:	e096      	b.n	800fc22 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	041b      	lsls	r3, r3, #16
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a2f      	ldr	r2, [pc, #188]	; (800fc30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d009      	beq.n	800fb8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a2d      	ldr	r2, [pc, #180]	; (800fc34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d004      	beq.n	800fb8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a2c      	ldr	r2, [pc, #176]	; (800fc38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d106      	bne.n	800fb9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a24      	ldr	r2, [pc, #144]	; (800fc30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d009      	beq.n	800fbb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a22      	ldr	r2, [pc, #136]	; (800fc34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d004      	beq.n	800fbb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a21      	ldr	r2, [pc, #132]	; (800fc38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d12b      	bne.n	800fc10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc2:	051b      	lsls	r3, r3, #20
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d009      	beq.n	800fc02 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a10      	ldr	r2, [pc, #64]	; (800fc34 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d004      	beq.n	800fc02 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a0e      	ldr	r2, [pc, #56]	; (800fc38 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d106      	bne.n	800fc10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3714      	adds	r7, #20
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop
 800fc30:	40012c00 	.word	0x40012c00
 800fc34:	40013400 	.word	0x40013400
 800fc38:	40015000 	.word	0x40015000

0800fc3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc44:	bf00      	nop
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc58:	bf00      	nop
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fc80:	bf00      	nop
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fca8:	bf00      	nop
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <LL_EXTI_EnableIT_0_31>:
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <LL_EXTI_EnableIT_0_31+0x20>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	4904      	ldr	r1, [pc, #16]	; (800fce8 <LL_EXTI_EnableIT_0_31+0x20>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	600b      	str	r3, [r1, #0]
}
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	40010400 	.word	0x40010400

0800fcec <LL_EXTI_EnableIT_32_63>:
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <LL_EXTI_EnableIT_32_63+0x20>)
 800fcf6:	6a1a      	ldr	r2, [r3, #32]
 800fcf8:	4904      	ldr	r1, [pc, #16]	; (800fd0c <LL_EXTI_EnableIT_32_63+0x20>)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	620b      	str	r3, [r1, #32]
}
 800fd00:	bf00      	nop
 800fd02:	370c      	adds	r7, #12
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	40010400 	.word	0x40010400

0800fd10 <LL_EXTI_DisableIT_0_31>:
{
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800fd18:	4b06      	ldr	r3, [pc, #24]	; (800fd34 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	43db      	mvns	r3, r3
 800fd20:	4904      	ldr	r1, [pc, #16]	; (800fd34 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd22:	4013      	ands	r3, r2
 800fd24:	600b      	str	r3, [r1, #0]
}
 800fd26:	bf00      	nop
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	40010400 	.word	0x40010400

0800fd38 <LL_EXTI_DisableIT_32_63>:
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800fd40:	4b06      	ldr	r3, [pc, #24]	; (800fd5c <LL_EXTI_DisableIT_32_63+0x24>)
 800fd42:	6a1a      	ldr	r2, [r3, #32]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	43db      	mvns	r3, r3
 800fd48:	4904      	ldr	r1, [pc, #16]	; (800fd5c <LL_EXTI_DisableIT_32_63+0x24>)
 800fd4a:	4013      	ands	r3, r2
 800fd4c:	620b      	str	r3, [r1, #32]
}
 800fd4e:	bf00      	nop
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	40010400 	.word	0x40010400

0800fd60 <LL_EXTI_EnableEvent_0_31>:
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800fd68:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	4904      	ldr	r1, [pc, #16]	; (800fd80 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	604b      	str	r3, [r1, #4]
}
 800fd74:	bf00      	nop
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	40010400 	.word	0x40010400

0800fd84 <LL_EXTI_EnableEvent_32_63>:
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fd8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd90:	4904      	ldr	r1, [pc, #16]	; (800fda4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr
 800fda4:	40010400 	.word	0x40010400

0800fda8 <LL_EXTI_DisableEvent_0_31>:
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800fdb0:	4b06      	ldr	r3, [pc, #24]	; (800fdcc <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdb2:	685a      	ldr	r2, [r3, #4]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	43db      	mvns	r3, r3
 800fdb8:	4904      	ldr	r1, [pc, #16]	; (800fdcc <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdba:	4013      	ands	r3, r2
 800fdbc:	604b      	str	r3, [r1, #4]
}
 800fdbe:	bf00      	nop
 800fdc0:	370c      	adds	r7, #12
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	40010400 	.word	0x40010400

0800fdd0 <LL_EXTI_DisableEvent_32_63>:
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800fdd8:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fdda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	43db      	mvns	r3, r3
 800fde0:	4904      	ldr	r1, [pc, #16]	; (800fdf4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fde2:	4013      	ands	r3, r2
 800fde4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fde6:	bf00      	nop
 800fde8:	370c      	adds	r7, #12
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	40010400 	.word	0x40010400

0800fdf8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800fe00:	4b05      	ldr	r3, [pc, #20]	; (800fe18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe02:	689a      	ldr	r2, [r3, #8]
 800fe04:	4904      	ldr	r1, [pc, #16]	; (800fe18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	608b      	str	r3, [r1, #8]
}
 800fe0c:	bf00      	nop
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	40010400 	.word	0x40010400

0800fe1c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fe24:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe28:	4904      	ldr	r1, [pc, #16]	; (800fe3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800fe30:	bf00      	nop
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	40010400 	.word	0x40010400

0800fe40 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800fe48:	4b06      	ldr	r3, [pc, #24]	; (800fe64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe4a:	689a      	ldr	r2, [r3, #8]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	43db      	mvns	r3, r3
 800fe50:	4904      	ldr	r1, [pc, #16]	; (800fe64 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe52:	4013      	ands	r3, r2
 800fe54:	608b      	str	r3, [r1, #8]
}
 800fe56:	bf00      	nop
 800fe58:	370c      	adds	r7, #12
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	40010400 	.word	0x40010400

0800fe68 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800fe70:	4b06      	ldr	r3, [pc, #24]	; (800fe8c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800fe72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	43db      	mvns	r3, r3
 800fe78:	4904      	ldr	r1, [pc, #16]	; (800fe8c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800fe7e:	bf00      	nop
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	40010400 	.word	0x40010400

0800fe90 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fe9a:	68da      	ldr	r2, [r3, #12]
 800fe9c:	4904      	ldr	r1, [pc, #16]	; (800feb0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4313      	orrs	r3, r2
 800fea2:	60cb      	str	r3, [r1, #12]
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr
 800feb0:	40010400 	.word	0x40010400

0800feb4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800febc:	4b05      	ldr	r3, [pc, #20]	; (800fed4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	4904      	ldr	r1, [pc, #16]	; (800fed4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr
 800fed4:	40010400 	.word	0x40010400

0800fed8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800fee0:	4b06      	ldr	r3, [pc, #24]	; (800fefc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800fee2:	68da      	ldr	r2, [r3, #12]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	43db      	mvns	r3, r3
 800fee8:	4904      	ldr	r1, [pc, #16]	; (800fefc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800feea:	4013      	ands	r3, r2
 800feec:	60cb      	str	r3, [r1, #12]
}
 800feee:	bf00      	nop
 800fef0:	370c      	adds	r7, #12
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	40010400 	.word	0x40010400

0800ff00 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ff08:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	43db      	mvns	r3, r3
 800ff10:	4904      	ldr	r1, [pc, #16]	; (800ff24 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff12:	4013      	ands	r3, r2
 800ff14:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ff16:	bf00      	nop
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	40010400 	.word	0x40010400

0800ff28 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ff30:	2300      	movs	r3, #0
 800ff32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	7a1b      	ldrb	r3, [r3, #8]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f000 80c8 	beq.w	80100ce <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d05d      	beq.n	8010002 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	7a5b      	ldrb	r3, [r3, #9]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d00e      	beq.n	800ff6c <LL_EXTI_Init+0x44>
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d017      	beq.n	800ff82 <LL_EXTI_Init+0x5a>
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d120      	bne.n	800ff98 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7ff ff24 	bl	800fda8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7ff feaf 	bl	800fcc8 <LL_EXTI_EnableIT_0_31>
          break;
 800ff6a:	e018      	b.n	800ff9e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff fecd 	bl	800fd10 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff fef0 	bl	800fd60 <LL_EXTI_EnableEvent_0_31>
          break;
 800ff80:	e00d      	b.n	800ff9e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fe9e 	bl	800fcc8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7ff fee5 	bl	800fd60 <LL_EXTI_EnableEvent_0_31>
          break;
 800ff96:	e002      	b.n	800ff9e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	60fb      	str	r3, [r7, #12]
          break;
 800ff9c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	7a9b      	ldrb	r3, [r3, #10]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d02d      	beq.n	8010002 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	7a9b      	ldrb	r3, [r3, #10]
 800ffaa:	2b02      	cmp	r3, #2
 800ffac:	d00e      	beq.n	800ffcc <LL_EXTI_Init+0xa4>
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d017      	beq.n	800ffe2 <LL_EXTI_Init+0xba>
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d120      	bne.n	800fff8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7ff ff8c 	bl	800fed8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7ff ff17 	bl	800fdf8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ffca:	e01b      	b.n	8010004 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff35 	bl	800fe40 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff ff58 	bl	800fe90 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ffe0:	e010      	b.n	8010004 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7ff ff06 	bl	800fdf8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff ff4d 	bl	800fe90 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800fff6:	e005      	b.n	8010004 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f043 0302 	orr.w	r3, r3, #2
 800fffe:	60fb      	str	r3, [r7, #12]
            break;
 8010000:	e000      	b.n	8010004 <LL_EXTI_Init+0xdc>
        }
      }
 8010002:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d075      	beq.n	80100f8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	7a5b      	ldrb	r3, [r3, #9]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d00e      	beq.n	8010032 <LL_EXTI_Init+0x10a>
 8010014:	2b02      	cmp	r3, #2
 8010016:	d017      	beq.n	8010048 <LL_EXTI_Init+0x120>
 8010018:	2b00      	cmp	r3, #0
 801001a:	d120      	bne.n	801005e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff fed5 	bl	800fdd0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff fe5e 	bl	800fcec <LL_EXTI_EnableIT_32_63>
          break;
 8010030:	e01a      	b.n	8010068 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fe7e 	bl	800fd38 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7ff fe9f 	bl	800fd84 <LL_EXTI_EnableEvent_32_63>
          break;
 8010046:	e00f      	b.n	8010068 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff fe4d 	bl	800fcec <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fe94 	bl	800fd84 <LL_EXTI_EnableEvent_32_63>
          break;
 801005c:	e004      	b.n	8010068 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f043 0304 	orr.w	r3, r3, #4
 8010064:	60fb      	str	r3, [r7, #12]
          break;
 8010066:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	7a9b      	ldrb	r3, [r3, #10]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d043      	beq.n	80100f8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	7a9b      	ldrb	r3, [r3, #10]
 8010074:	2b02      	cmp	r3, #2
 8010076:	d00e      	beq.n	8010096 <LL_EXTI_Init+0x16e>
 8010078:	2b03      	cmp	r3, #3
 801007a:	d017      	beq.n	80100ac <LL_EXTI_Init+0x184>
 801007c:	2b01      	cmp	r3, #1
 801007e:	d120      	bne.n	80100c2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	f7ff ff3b 	bl	800ff00 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff fec4 	bl	800fe1c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8010094:	e031      	b.n	80100fa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fee4 	bl	800fe68 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff ff05 	bl	800feb4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80100aa:	e026      	b.n	80100fa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff feb3 	bl	800fe1c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fefa 	bl	800feb4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80100c0:	e01b      	b.n	80100fa <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f043 0305 	orr.w	r3, r3, #5
 80100c8:	60fb      	str	r3, [r7, #12]
            break;
 80100ca:	bf00      	nop
 80100cc:	e015      	b.n	80100fa <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fe1c 	bl	800fd10 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7ff fe63 	bl	800fda8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7ff fe26 	bl	800fd38 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff fe6d 	bl	800fdd0 <LL_EXTI_DisableEvent_32_63>
 80100f6:	e000      	b.n	80100fa <LL_EXTI_Init+0x1d2>
      }
 80100f8:	bf00      	nop
  }

  return status;
 80100fa:	68fb      	ldr	r3, [r7, #12]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <LL_GPIO_SetPinMode>:
{
 8010104:	b480      	push	{r7}
 8010106:	b089      	sub	sp, #36	; 0x24
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	fa93 f3a3 	rbit	r3, r3
 801011e:	613b      	str	r3, [r7, #16]
  return result;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	fab3 f383 	clz	r3, r3
 8010126:	b2db      	uxtb	r3, r3
 8010128:	005b      	lsls	r3, r3, #1
 801012a:	2103      	movs	r1, #3
 801012c:	fa01 f303 	lsl.w	r3, r1, r3
 8010130:	43db      	mvns	r3, r3
 8010132:	401a      	ands	r2, r3
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	fa93 f3a3 	rbit	r3, r3
 801013e:	61bb      	str	r3, [r7, #24]
  return result;
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	fab3 f383 	clz	r3, r3
 8010146:	b2db      	uxtb	r3, r3
 8010148:	005b      	lsls	r3, r3, #1
 801014a:	6879      	ldr	r1, [r7, #4]
 801014c:	fa01 f303 	lsl.w	r3, r1, r3
 8010150:	431a      	orrs	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	601a      	str	r2, [r3, #0]
}
 8010156:	bf00      	nop
 8010158:	3724      	adds	r7, #36	; 0x24
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <LL_GPIO_SetPinOutputType>:
{
 8010162:	b480      	push	{r7}
 8010164:	b085      	sub	sp, #20
 8010166:	af00      	add	r7, sp, #0
 8010168:	60f8      	str	r0, [r7, #12]
 801016a:	60b9      	str	r1, [r7, #8]
 801016c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	685a      	ldr	r2, [r3, #4]
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	43db      	mvns	r3, r3
 8010176:	401a      	ands	r2, r3
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	6879      	ldr	r1, [r7, #4]
 801017c:	fb01 f303 	mul.w	r3, r1, r3
 8010180:	431a      	orrs	r2, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	605a      	str	r2, [r3, #4]
}
 8010186:	bf00      	nop
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <LL_GPIO_SetPinSpeed>:
{
 8010192:	b480      	push	{r7}
 8010194:	b089      	sub	sp, #36	; 0x24
 8010196:	af00      	add	r7, sp, #0
 8010198:	60f8      	str	r0, [r7, #12]
 801019a:	60b9      	str	r1, [r7, #8]
 801019c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	689a      	ldr	r2, [r3, #8]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	fa93 f3a3 	rbit	r3, r3
 80101ac:	613b      	str	r3, [r7, #16]
  return result;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	fab3 f383 	clz	r3, r3
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	2103      	movs	r1, #3
 80101ba:	fa01 f303 	lsl.w	r3, r1, r3
 80101be:	43db      	mvns	r3, r3
 80101c0:	401a      	ands	r2, r3
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	fa93 f3a3 	rbit	r3, r3
 80101cc:	61bb      	str	r3, [r7, #24]
  return result;
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	fab3 f383 	clz	r3, r3
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	005b      	lsls	r3, r3, #1
 80101d8:	6879      	ldr	r1, [r7, #4]
 80101da:	fa01 f303 	lsl.w	r3, r1, r3
 80101de:	431a      	orrs	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	609a      	str	r2, [r3, #8]
}
 80101e4:	bf00      	nop
 80101e6:	3724      	adds	r7, #36	; 0x24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <LL_GPIO_SetPinPull>:
{
 80101f0:	b480      	push	{r7}
 80101f2:	b089      	sub	sp, #36	; 0x24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	68da      	ldr	r2, [r3, #12]
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	fa93 f3a3 	rbit	r3, r3
 801020a:	613b      	str	r3, [r7, #16]
  return result;
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	fab3 f383 	clz	r3, r3
 8010212:	b2db      	uxtb	r3, r3
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	2103      	movs	r1, #3
 8010218:	fa01 f303 	lsl.w	r3, r1, r3
 801021c:	43db      	mvns	r3, r3
 801021e:	401a      	ands	r2, r3
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	fa93 f3a3 	rbit	r3, r3
 801022a:	61bb      	str	r3, [r7, #24]
  return result;
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	fab3 f383 	clz	r3, r3
 8010232:	b2db      	uxtb	r3, r3
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	6879      	ldr	r1, [r7, #4]
 8010238:	fa01 f303 	lsl.w	r3, r1, r3
 801023c:	431a      	orrs	r2, r3
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	60da      	str	r2, [r3, #12]
}
 8010242:	bf00      	nop
 8010244:	3724      	adds	r7, #36	; 0x24
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <LL_GPIO_SetAFPin_0_7>:
{
 801024e:	b480      	push	{r7}
 8010250:	b089      	sub	sp, #36	; 0x24
 8010252:	af00      	add	r7, sp, #0
 8010254:	60f8      	str	r0, [r7, #12]
 8010256:	60b9      	str	r1, [r7, #8]
 8010258:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a1a      	ldr	r2, [r3, #32]
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	fa93 f3a3 	rbit	r3, r3
 8010268:	613b      	str	r3, [r7, #16]
  return result;
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	fab3 f383 	clz	r3, r3
 8010270:	b2db      	uxtb	r3, r3
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	210f      	movs	r1, #15
 8010276:	fa01 f303 	lsl.w	r3, r1, r3
 801027a:	43db      	mvns	r3, r3
 801027c:	401a      	ands	r2, r3
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	fa93 f3a3 	rbit	r3, r3
 8010288:	61bb      	str	r3, [r7, #24]
  return result;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	fab3 f383 	clz	r3, r3
 8010290:	b2db      	uxtb	r3, r3
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	6879      	ldr	r1, [r7, #4]
 8010296:	fa01 f303 	lsl.w	r3, r1, r3
 801029a:	431a      	orrs	r2, r3
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	621a      	str	r2, [r3, #32]
}
 80102a0:	bf00      	nop
 80102a2:	3724      	adds	r7, #36	; 0x24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <LL_GPIO_SetAFPin_8_15>:
{
 80102ac:	b480      	push	{r7}
 80102ae:	b089      	sub	sp, #36	; 0x24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	0a1b      	lsrs	r3, r3, #8
 80102c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	fa93 f3a3 	rbit	r3, r3
 80102c8:	613b      	str	r3, [r7, #16]
  return result;
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	fab3 f383 	clz	r3, r3
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	210f      	movs	r1, #15
 80102d6:	fa01 f303 	lsl.w	r3, r1, r3
 80102da:	43db      	mvns	r3, r3
 80102dc:	401a      	ands	r2, r3
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	0a1b      	lsrs	r3, r3, #8
 80102e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	fa93 f3a3 	rbit	r3, r3
 80102ea:	61bb      	str	r3, [r7, #24]
  return result;
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	fab3 f383 	clz	r3, r3
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	009b      	lsls	r3, r3, #2
 80102f6:	6879      	ldr	r1, [r7, #4]
 80102f8:	fa01 f303 	lsl.w	r3, r1, r3
 80102fc:	431a      	orrs	r2, r3
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010302:	bf00      	nop
 8010304:	3724      	adds	r7, #36	; 0x24
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b086      	sub	sp, #24
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
 8010316:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	fa93 f3a3 	rbit	r3, r3
 8010324:	60bb      	str	r3, [r7, #8]
  return result;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	fab3 f383 	clz	r3, r3
 801032c:	b2db      	uxtb	r3, r3
 801032e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010330:	e040      	b.n	80103b4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	2101      	movs	r1, #1
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	fa01 f303 	lsl.w	r3, r1, r3
 801033e:	4013      	ands	r3, r2
 8010340:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d032      	beq.n	80103ae <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	461a      	mov	r2, r3
 801034e:	6939      	ldr	r1, [r7, #16]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7ff fed7 	bl	8010104 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	2b01      	cmp	r3, #1
 801035c:	d003      	beq.n	8010366 <LL_GPIO_Init+0x58>
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	2b02      	cmp	r3, #2
 8010364:	d106      	bne.n	8010374 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	461a      	mov	r2, r3
 801036c:	6939      	ldr	r1, [r7, #16]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff ff0f 	bl	8010192 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	461a      	mov	r2, r3
 801037a:	6939      	ldr	r1, [r7, #16]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7ff ff37 	bl	80101f0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	2b02      	cmp	r3, #2
 8010388:	d111      	bne.n	80103ae <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	2bff      	cmp	r3, #255	; 0xff
 801038e:	d807      	bhi.n	80103a0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	695b      	ldr	r3, [r3, #20]
 8010394:	461a      	mov	r2, r3
 8010396:	6939      	ldr	r1, [r7, #16]
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff ff58 	bl	801024e <LL_GPIO_SetAFPin_0_7>
 801039e:	e006      	b.n	80103ae <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	695b      	ldr	r3, [r3, #20]
 80103a4:	461a      	mov	r2, r3
 80103a6:	6939      	ldr	r1, [r7, #16]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff ff7f 	bl	80102ac <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	3301      	adds	r3, #1
 80103b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	fa22 f303 	lsr.w	r3, r2, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1b7      	bne.n	8010332 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d003      	beq.n	80103d2 <LL_GPIO_Init+0xc4>
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	d107      	bne.n	80103e2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	6819      	ldr	r1, [r3, #0]
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	461a      	mov	r2, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff fec0 	bl	8010162 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 80103ec:	b590      	push	{r4, r7, lr}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	4604      	mov	r4, r0
 80103f4:	4608      	mov	r0, r1
 80103f6:	4611      	mov	r1, r2
 80103f8:	461a      	mov	r2, r3
 80103fa:	4623      	mov	r3, r4
 80103fc:	80fb      	strh	r3, [r7, #6]
 80103fe:	4603      	mov	r3, r0
 8010400:	80bb      	strh	r3, [r7, #4]
 8010402:	460b      	mov	r3, r1
 8010404:	70fb      	strb	r3, [r7, #3]
 8010406:	4613      	mov	r3, r2
 8010408:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	e026      	b.n	801045e <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 8010410:	2300      	movs	r3, #0
 8010412:	60bb      	str	r3, [r7, #8]
 8010414:	e01c      	b.n	8010450 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	b29a      	uxth	r2, r3
 801041a:	88fb      	ldrh	r3, [r7, #6]
 801041c:	4413      	add	r3, r2
 801041e:	b298      	uxth	r0, r3
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010426:	4413      	add	r3, r2
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801042e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010432:	b29a      	uxth	r2, r3
 8010434:	88bb      	ldrh	r3, [r7, #4]
 8010436:	4413      	add	r3, r2
 8010438:	b29a      	uxth	r2, r3
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	b29b      	uxth	r3, r3
 801043e:	4413      	add	r3, r2
 8010440:	b29b      	uxth	r3, r3
 8010442:	883a      	ldrh	r2, [r7, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	f000 fc1f 	bl	8010c88 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	3301      	adds	r3, #1
 801044e:	60bb      	str	r3, [r7, #8]
 8010450:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	429a      	cmp	r2, r3
 8010456:	dbde      	blt.n	8010416 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60fb      	str	r3, [r7, #12]
 801045e:	78fb      	ldrb	r3, [r7, #3]
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	429a      	cmp	r2, r3
 8010464:	dbd4      	blt.n	8010410 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 8010466:	bf00      	nop
 8010468:	3714      	adds	r7, #20
 801046a:	46bd      	mov	sp, r7
 801046c:	bd90      	pop	{r4, r7, pc}

0801046e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 801046e:	b590      	push	{r4, r7, lr}
 8010470:	b087      	sub	sp, #28
 8010472:	af02      	add	r7, sp, #8
 8010474:	4604      	mov	r4, r0
 8010476:	4608      	mov	r0, r1
 8010478:	4611      	mov	r1, r2
 801047a:	461a      	mov	r2, r3
 801047c:	4623      	mov	r3, r4
 801047e:	80fb      	strh	r3, [r7, #6]
 8010480:	4603      	mov	r3, r0
 8010482:	80bb      	strh	r3, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	807b      	strh	r3, [r7, #2]
 8010488:	4613      	mov	r3, r2
 801048a:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 801048c:	2300      	movs	r3, #0
 801048e:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8010490:	7bfa      	ldrb	r2, [r7, #15]
 8010492:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010496:	429a      	cmp	r2, r3
 8010498:	d939      	bls.n	801050e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 801049a:	88ba      	ldrh	r2, [r7, #4]
 801049c:	7bfb      	ldrb	r3, [r7, #15]
 801049e:	441a      	add	r2, r3
 80104a0:	88b9      	ldrh	r1, [r7, #4]
 80104a2:	883b      	ldrh	r3, [r7, #0]
 80104a4:	4419      	add	r1, r3
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
 80104a8:	1acb      	subs	r3, r1, r3
 80104aa:	429a      	cmp	r2, r3
 80104ac:	f000 8089 	beq.w	80105c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 80104b0:	88fa      	ldrh	r2, [r7, #6]
 80104b2:	7bfb      	ldrb	r3, [r7, #15]
 80104b4:	441a      	add	r2, r3
 80104b6:	88f9      	ldrh	r1, [r7, #6]
 80104b8:	887b      	ldrh	r3, [r7, #2]
 80104ba:	4419      	add	r1, r3
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	1acb      	subs	r3, r1, r3
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d07e      	beq.n	80105c2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80104c4:	7bfb      	ldrb	r3, [r7, #15]
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	88fb      	ldrh	r3, [r7, #6]
 80104ca:	4413      	add	r3, r2
 80104cc:	b298      	uxth	r0, r3
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	88bb      	ldrh	r3, [r7, #4]
 80104d4:	4413      	add	r3, r2
 80104d6:	b299      	uxth	r1, r3
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	b29b      	uxth	r3, r3
 80104e0:	887a      	ldrh	r2, [r7, #2]
 80104e2:	1ad3      	subs	r3, r2, r3
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	3301      	adds	r3, #1
 80104e8:	b29c      	uxth	r4, r3
 80104ea:	7bfb      	ldrb	r3, [r7, #15]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	883a      	ldrh	r2, [r7, #0]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	3301      	adds	r3, #1
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	2304      	movs	r3, #4
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	8c3b      	ldrh	r3, [r7, #32]
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4613      	mov	r3, r2
 8010506:	4622      	mov	r2, r4
 8010508:	f000 fd18 	bl	8010f3c <ILI9341_Draw_Rectangle>
				goto finish;
 801050c:	e05a      	b.n	80105c4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	b29a      	uxth	r2, r3
 8010512:	88fb      	ldrh	r3, [r7, #6]
 8010514:	4413      	add	r3, r2
 8010516:	b298      	uxth	r0, r3
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	b29a      	uxth	r2, r3
 801051c:	88bb      	ldrh	r3, [r7, #4]
 801051e:	4413      	add	r3, r2
 8010520:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 8010522:	7bfb      	ldrb	r3, [r7, #15]
 8010524:	b29b      	uxth	r3, r3
 8010526:	887a      	ldrh	r2, [r7, #2]
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 801052c:	3301      	adds	r3, #1
 801052e:	b29a      	uxth	r2, r3
 8010530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010532:	f000 fa6b 	bl	8010a0c <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	b29a      	uxth	r2, r3
 801053a:	88fb      	ldrh	r3, [r7, #6]
 801053c:	4413      	add	r3, r2
 801053e:	b298      	uxth	r0, r3
										(y + h) - b,
 8010540:	88ba      	ldrh	r2, [r7, #4]
 8010542:	883b      	ldrh	r3, [r7, #0]
 8010544:	4413      	add	r3, r2
 8010546:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010548:	7bfb      	ldrb	r3, [r7, #15]
 801054a:	b29b      	uxth	r3, r3
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	b299      	uxth	r1, r3
										(w - b)+1,
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	b29b      	uxth	r3, r3
 8010554:	887a      	ldrh	r2, [r7, #2]
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 801055a:	3301      	adds	r3, #1
 801055c:	b29a      	uxth	r2, r3
 801055e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010560:	f000 fa54 	bl	8010a0c <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 8010564:	7bfb      	ldrb	r3, [r7, #15]
 8010566:	b29a      	uxth	r2, r3
 8010568:	88fb      	ldrh	r3, [r7, #6]
 801056a:	4413      	add	r3, r2
 801056c:	b298      	uxth	r0, r3
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	b29a      	uxth	r2, r3
 8010572:	88bb      	ldrh	r3, [r7, #4]
 8010574:	4413      	add	r3, r2
 8010576:	b299      	uxth	r1, r3
 8010578:	7bfb      	ldrb	r3, [r7, #15]
 801057a:	b29b      	uxth	r3, r3
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	b29b      	uxth	r3, r3
 8010580:	883a      	ldrh	r2, [r7, #0]
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	b29a      	uxth	r2, r3
 8010586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010588:	f000 faa4 	bl	8010ad4 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 801058c:	88fa      	ldrh	r2, [r7, #6]
 801058e:	887b      	ldrh	r3, [r7, #2]
 8010590:	4413      	add	r3, r2
 8010592:	b29a      	uxth	r2, r3
 8010594:	7bfb      	ldrb	r3, [r7, #15]
 8010596:	b29b      	uxth	r3, r3
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	b298      	uxth	r0, r3
 801059c:	7bfb      	ldrb	r3, [r7, #15]
 801059e:	b29a      	uxth	r2, r3
 80105a0:	88bb      	ldrh	r3, [r7, #4]
 80105a2:	4413      	add	r3, r2
 80105a4:	b299      	uxth	r1, r3
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	883a      	ldrh	r2, [r7, #0]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105b6:	f000 fa8d 	bl	8010ad4 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	3301      	adds	r3, #1
 80105be:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80105c0:	e766      	b.n	8010490 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80105c2:	bf00      	nop
	// done
	return;
 80105c4:	bf00      	nop
}
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd90      	pop	{r4, r7, pc}

080105cc <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80105cc:	b590      	push	{r4, r7, lr}
 80105ce:	b089      	sub	sp, #36	; 0x24
 80105d0:	af02      	add	r7, sp, #8
 80105d2:	4604      	mov	r4, r0
 80105d4:	4608      	mov	r0, r1
 80105d6:	4611      	mov	r1, r2
 80105d8:	461a      	mov	r2, r3
 80105da:	4623      	mov	r3, r4
 80105dc:	71fb      	strb	r3, [r7, #7]
 80105de:	4603      	mov	r3, r0
 80105e0:	80bb      	strh	r3, [r7, #4]
 80105e2:	460b      	mov	r3, r1
 80105e4:	807b      	strh	r3, [r7, #2]
 80105e6:	4613      	mov	r3, r2
 80105e8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80105ee:	7dfb      	ldrb	r3, [r7, #23]
 80105f0:	2b1f      	cmp	r3, #31
 80105f2:	d802      	bhi.n	80105fa <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 80105f4:	2300      	movs	r3, #0
 80105f6:	71fb      	strb	r3, [r7, #7]
 80105f8:	e002      	b.n	8010600 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
 80105fc:	3b20      	subs	r3, #32
 80105fe:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010600:	2300      	movs	r3, #0
 8010602:	753b      	strb	r3, [r7, #20]
 8010604:	e012      	b.n	801062c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010606:	7dfa      	ldrb	r2, [r7, #23]
 8010608:	7d38      	ldrb	r0, [r7, #20]
 801060a:	7d39      	ldrb	r1, [r7, #20]
 801060c:	4c48      	ldr	r4, [pc, #288]	; (8010730 <ILI9341_Draw_Char+0x164>)
 801060e:	4613      	mov	r3, r2
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	4413      	add	r3, r2
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	4423      	add	r3, r4
 8010618:	4403      	add	r3, r0
 801061a:	781a      	ldrb	r2, [r3, #0]
 801061c:	f107 0318 	add.w	r3, r7, #24
 8010620:	440b      	add	r3, r1
 8010622:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010626:	7d3b      	ldrb	r3, [r7, #20]
 8010628:	3301      	adds	r3, #1
 801062a:	753b      	strb	r3, [r7, #20]
 801062c:	7d3b      	ldrb	r3, [r7, #20]
 801062e:	2b05      	cmp	r3, #5
 8010630:	d9e9      	bls.n	8010606 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8010632:	2300      	movs	r3, #0
 8010634:	757b      	strb	r3, [r7, #21]
 8010636:	e074      	b.n	8010722 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010638:	2300      	movs	r3, #0
 801063a:	75bb      	strb	r3, [r7, #22]
 801063c:	e06b      	b.n	8010716 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 801063e:	7d7b      	ldrb	r3, [r7, #21]
 8010640:	f107 0218 	add.w	r2, r7, #24
 8010644:	4413      	add	r3, r2
 8010646:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801064a:	461a      	mov	r2, r3
 801064c:	7dbb      	ldrb	r3, [r7, #22]
 801064e:	fa42 f303 	asr.w	r3, r2, r3
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d02d      	beq.n	80106b6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 801065a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801065c:	2b01      	cmp	r3, #1
 801065e:	d10e      	bne.n	801067e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8010660:	7d7b      	ldrb	r3, [r7, #21]
 8010662:	b29a      	uxth	r2, r3
 8010664:	88bb      	ldrh	r3, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	b298      	uxth	r0, r3
 801066a:	7dbb      	ldrb	r3, [r7, #22]
 801066c:	b29a      	uxth	r2, r3
 801066e:	887b      	ldrh	r3, [r7, #2]
 8010670:	4413      	add	r3, r2
 8010672:	b29b      	uxth	r3, r3
 8010674:	883a      	ldrh	r2, [r7, #0]
 8010676:	4619      	mov	r1, r3
 8010678:	f000 fb06 	bl	8010c88 <ILI9341_Draw_Pixel>
 801067c:	e048      	b.n	8010710 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 801067e:	7d7b      	ldrb	r3, [r7, #21]
 8010680:	b29b      	uxth	r3, r3
 8010682:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010684:	fb12 f303 	smulbb	r3, r2, r3
 8010688:	b29a      	uxth	r2, r3
 801068a:	88bb      	ldrh	r3, [r7, #4]
 801068c:	4413      	add	r3, r2
 801068e:	b298      	uxth	r0, r3
 8010690:	7dbb      	ldrb	r3, [r7, #22]
 8010692:	b29b      	uxth	r3, r3
 8010694:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010696:	fb12 f303 	smulbb	r3, r2, r3
 801069a:	b29a      	uxth	r2, r3
 801069c:	887b      	ldrh	r3, [r7, #2]
 801069e:	4413      	add	r3, r2
 80106a0:	b299      	uxth	r1, r3
 80106a2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80106a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106a6:	2301      	movs	r3, #1
 80106a8:	9301      	str	r3, [sp, #4]
 80106aa:	883b      	ldrh	r3, [r7, #0]
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	4623      	mov	r3, r4
 80106b0:	f000 fc44 	bl	8010f3c <ILI9341_Draw_Rectangle>
 80106b4:	e02c      	b.n	8010710 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80106b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d10e      	bne.n	80106da <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80106bc:	7d7b      	ldrb	r3, [r7, #21]
 80106be:	b29a      	uxth	r2, r3
 80106c0:	88bb      	ldrh	r3, [r7, #4]
 80106c2:	4413      	add	r3, r2
 80106c4:	b298      	uxth	r0, r3
 80106c6:	7dbb      	ldrb	r3, [r7, #22]
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	887b      	ldrh	r3, [r7, #2]
 80106cc:	4413      	add	r3, r2
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80106d2:	4619      	mov	r1, r3
 80106d4:	f000 fad8 	bl	8010c88 <ILI9341_Draw_Pixel>
 80106d8:	e01a      	b.n	8010710 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80106da:	7d7b      	ldrb	r3, [r7, #21]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106e0:	fb12 f303 	smulbb	r3, r2, r3
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	88bb      	ldrh	r3, [r7, #4]
 80106e8:	4413      	add	r3, r2
 80106ea:	b298      	uxth	r0, r3
 80106ec:	7dbb      	ldrb	r3, [r7, #22]
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106f2:	fb12 f303 	smulbb	r3, r2, r3
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	887b      	ldrh	r3, [r7, #2]
 80106fa:	4413      	add	r3, r2
 80106fc:	b299      	uxth	r1, r3
 80106fe:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010700:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010702:	2301      	movs	r3, #1
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	4623      	mov	r3, r4
 801070c:	f000 fc16 	bl	8010f3c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8010710:	7dbb      	ldrb	r3, [r7, #22]
 8010712:	3301      	adds	r3, #1
 8010714:	75bb      	strb	r3, [r7, #22]
 8010716:	7dbb      	ldrb	r3, [r7, #22]
 8010718:	2b07      	cmp	r3, #7
 801071a:	d990      	bls.n	801063e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 801071c:	7d7b      	ldrb	r3, [r7, #21]
 801071e:	3301      	adds	r3, #1
 8010720:	757b      	strb	r3, [r7, #21]
 8010722:	7d7b      	ldrb	r3, [r7, #21]
 8010724:	2b05      	cmp	r3, #5
 8010726:	d987      	bls.n	8010638 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010728:	bf00      	nop
 801072a:	371c      	adds	r7, #28
 801072c:	46bd      	mov	sp, r7
 801072e:	bd90      	pop	{r4, r7, pc}
 8010730:	08016548 	.word	0x08016548

08010734 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010734:	b590      	push	{r4, r7, lr}
 8010736:	b087      	sub	sp, #28
 8010738:	af02      	add	r7, sp, #8
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	4608      	mov	r0, r1
 801073e:	4611      	mov	r1, r2
 8010740:	461a      	mov	r2, r3
 8010742:	4603      	mov	r3, r0
 8010744:	817b      	strh	r3, [r7, #10]
 8010746:	460b      	mov	r3, r1
 8010748:	813b      	strh	r3, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801074e:	897b      	ldrh	r3, [r7, #10]
 8010750:	3b01      	subs	r3, #1
 8010752:	b298      	uxth	r0, r3
 8010754:	8c3b      	ldrh	r3, [r7, #32]
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	b29a      	uxth	r2, r3
 801075a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801075c:	8939      	ldrh	r1, [r7, #8]
 801075e:	f000 f9b9 	bl	8010ad4 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8010762:	897b      	ldrh	r3, [r7, #10]
 8010764:	3b02      	subs	r3, #2
 8010766:	b298      	uxth	r0, r3
 8010768:	8c3b      	ldrh	r3, [r7, #32]
 801076a:	00db      	lsls	r3, r3, #3
 801076c:	b29a      	uxth	r2, r3
 801076e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010770:	8939      	ldrh	r1, [r7, #8]
 8010772:	f000 f9af 	bl	8010ad4 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8010776:	e016      	b.n	80107a6 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	1c5a      	adds	r2, r3, #1
 801077c:	60fa      	str	r2, [r7, #12]
 801077e:	7818      	ldrb	r0, [r3, #0]
 8010780:	88fc      	ldrh	r4, [r7, #6]
 8010782:	893a      	ldrh	r2, [r7, #8]
 8010784:	8979      	ldrh	r1, [r7, #10]
 8010786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	8c3b      	ldrh	r3, [r7, #32]
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	4623      	mov	r3, r4
 8010790:	f7ff ff1c 	bl	80105cc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8010794:	8c3b      	ldrh	r3, [r7, #32]
 8010796:	461a      	mov	r2, r3
 8010798:	0052      	lsls	r2, r2, #1
 801079a:	4413      	add	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	b29a      	uxth	r2, r3
 80107a0:	897b      	ldrh	r3, [r7, #10]
 80107a2:	4413      	add	r3, r2
 80107a4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1e4      	bne.n	8010778 <ILI9341_Draw_Text+0x44>
    }


}
 80107ae:	bf00      	nop
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd90      	pop	{r4, r7, pc}

080107b6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80107b6:	b580      	push	{r7, lr}
 80107b8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80107ba:	f000 fca3 	bl	8011104 <_LCD_Enable>
	ILI9341_SPI_Init();
 80107be:	f000 f907 	bl	80109d0 <ILI9341_SPI_Init>
	_LCD_Reset();
 80107c2:	f000 fcaf 	bl	8011124 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80107c6:	2001      	movs	r0, #1
 80107c8:	f000 fd7a 	bl	80112c0 <_LCD_SendCommand>
	HAL_Delay(2000);
 80107cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80107d0:	f7f8 fd1c 	bl	800920c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 80107d4:	20cb      	movs	r0, #203	; 0xcb
 80107d6:	f000 fd73 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 80107da:	2039      	movs	r0, #57	; 0x39
 80107dc:	f000 fda2 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x2C);
 80107e0:	202c      	movs	r0, #44	; 0x2c
 80107e2:	f000 fd9f 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x00);
 80107e6:	2000      	movs	r0, #0
 80107e8:	f000 fd9c 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x34);
 80107ec:	2034      	movs	r0, #52	; 0x34
 80107ee:	f000 fd99 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x02);
 80107f2:	2002      	movs	r0, #2
 80107f4:	f000 fd96 	bl	8011324 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 80107f8:	20cf      	movs	r0, #207	; 0xcf
 80107fa:	f000 fd61 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80107fe:	2000      	movs	r0, #0
 8010800:	f000 fd90 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010804:	20c1      	movs	r0, #193	; 0xc1
 8010806:	f000 fd8d 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x30);
 801080a:	2030      	movs	r0, #48	; 0x30
 801080c:	f000 fd8a 	bl	8011324 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8010810:	20e8      	movs	r0, #232	; 0xe8
 8010812:	f000 fd55 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010816:	2085      	movs	r0, #133	; 0x85
 8010818:	f000 fd84 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x00);
 801081c:	2000      	movs	r0, #0
 801081e:	f000 fd81 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x78);
 8010822:	2078      	movs	r0, #120	; 0x78
 8010824:	f000 fd7e 	bl	8011324 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010828:	20ea      	movs	r0, #234	; 0xea
 801082a:	f000 fd49 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801082e:	2000      	movs	r0, #0
 8010830:	f000 fd78 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010834:	2000      	movs	r0, #0
 8010836:	f000 fd75 	bl	8011324 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 801083a:	20ed      	movs	r0, #237	; 0xed
 801083c:	f000 fd40 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8010840:	2064      	movs	r0, #100	; 0x64
 8010842:	f000 fd6f 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010846:	2003      	movs	r0, #3
 8010848:	f000 fd6c 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x12);
 801084c:	2012      	movs	r0, #18
 801084e:	f000 fd69 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x81);
 8010852:	2081      	movs	r0, #129	; 0x81
 8010854:	f000 fd66 	bl	8011324 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010858:	20f7      	movs	r0, #247	; 0xf7
 801085a:	f000 fd31 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 801085e:	2020      	movs	r0, #32
 8010860:	f000 fd60 	bl	8011324 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010864:	20c0      	movs	r0, #192	; 0xc0
 8010866:	f000 fd2b 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 801086a:	2023      	movs	r0, #35	; 0x23
 801086c:	f000 fd5a 	bl	8011324 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8010870:	20c1      	movs	r0, #193	; 0xc1
 8010872:	f000 fd25 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010876:	2010      	movs	r0, #16
 8010878:	f000 fd54 	bl	8011324 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 801087c:	20c5      	movs	r0, #197	; 0xc5
 801087e:	f000 fd1f 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8010882:	203e      	movs	r0, #62	; 0x3e
 8010884:	f000 fd4e 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x28);
 8010888:	2028      	movs	r0, #40	; 0x28
 801088a:	f000 fd4b 	bl	8011324 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 801088e:	20c7      	movs	r0, #199	; 0xc7
 8010890:	f000 fd16 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8010894:	2086      	movs	r0, #134	; 0x86
 8010896:	f000 fd45 	bl	8011324 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 801089a:	2036      	movs	r0, #54	; 0x36
 801089c:	f000 fd10 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80108a0:	2048      	movs	r0, #72	; 0x48
 80108a2:	f000 fd3f 	bl	8011324 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80108a6:	203a      	movs	r0, #58	; 0x3a
 80108a8:	f000 fd0a 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80108ac:	2055      	movs	r0, #85	; 0x55
 80108ae:	f000 fd39 	bl	8011324 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80108b2:	20b1      	movs	r0, #177	; 0xb1
 80108b4:	f000 fd04 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80108b8:	2000      	movs	r0, #0
 80108ba:	f000 fd33 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x18);
 80108be:	2018      	movs	r0, #24
 80108c0:	f000 fd30 	bl	8011324 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 80108c4:	20b6      	movs	r0, #182	; 0xb6
 80108c6:	f000 fcfb 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 80108ca:	2008      	movs	r0, #8
 80108cc:	f000 fd2a 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x82);
 80108d0:	2082      	movs	r0, #130	; 0x82
 80108d2:	f000 fd27 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x27);
 80108d6:	2027      	movs	r0, #39	; 0x27
 80108d8:	f000 fd24 	bl	8011324 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 80108dc:	20f2      	movs	r0, #242	; 0xf2
 80108de:	f000 fcef 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80108e2:	2000      	movs	r0, #0
 80108e4:	f000 fd1e 	bl	8011324 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 80108e8:	2026      	movs	r0, #38	; 0x26
 80108ea:	f000 fce9 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 80108ee:	2001      	movs	r0, #1
 80108f0:	f000 fd18 	bl	8011324 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 80108f4:	20e0      	movs	r0, #224	; 0xe0
 80108f6:	f000 fce3 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 80108fa:	200f      	movs	r0, #15
 80108fc:	f000 fd12 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010900:	2031      	movs	r0, #49	; 0x31
 8010902:	f000 fd0f 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010906:	202b      	movs	r0, #43	; 0x2b
 8010908:	f000 fd0c 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0C);
 801090c:	200c      	movs	r0, #12
 801090e:	f000 fd09 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010912:	200e      	movs	r0, #14
 8010914:	f000 fd06 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010918:	2008      	movs	r0, #8
 801091a:	f000 fd03 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x4E);
 801091e:	204e      	movs	r0, #78	; 0x4e
 8010920:	f000 fd00 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010924:	20f1      	movs	r0, #241	; 0xf1
 8010926:	f000 fcfd 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x37);
 801092a:	2037      	movs	r0, #55	; 0x37
 801092c:	f000 fcfa 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010930:	2007      	movs	r0, #7
 8010932:	f000 fcf7 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010936:	2010      	movs	r0, #16
 8010938:	f000 fcf4 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x03);
 801093c:	2003      	movs	r0, #3
 801093e:	f000 fcf1 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010942:	200e      	movs	r0, #14
 8010944:	f000 fcee 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010948:	2009      	movs	r0, #9
 801094a:	f000 fceb 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x00);
 801094e:	2000      	movs	r0, #0
 8010950:	f000 fce8 	bl	8011324 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010954:	20e1      	movs	r0, #225	; 0xe1
 8010956:	f000 fcb3 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801095a:	2000      	movs	r0, #0
 801095c:	f000 fce2 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010960:	200e      	movs	r0, #14
 8010962:	f000 fcdf 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x14);
 8010966:	2014      	movs	r0, #20
 8010968:	f000 fcdc 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x03);
 801096c:	2003      	movs	r0, #3
 801096e:	f000 fcd9 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x11);
 8010972:	2011      	movs	r0, #17
 8010974:	f000 fcd6 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010978:	2007      	movs	r0, #7
 801097a:	f000 fcd3 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x31);
 801097e:	2031      	movs	r0, #49	; 0x31
 8010980:	f000 fcd0 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010984:	20c1      	movs	r0, #193	; 0xc1
 8010986:	f000 fccd 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x48);
 801098a:	2048      	movs	r0, #72	; 0x48
 801098c:	f000 fcca 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010990:	2008      	movs	r0, #8
 8010992:	f000 fcc7 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010996:	200f      	movs	r0, #15
 8010998:	f000 fcc4 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0C);
 801099c:	200c      	movs	r0, #12
 801099e:	f000 fcc1 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x31);
 80109a2:	2031      	movs	r0, #49	; 0x31
 80109a4:	f000 fcbe 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x36);
 80109a8:	2036      	movs	r0, #54	; 0x36
 80109aa:	f000 fcbb 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80109ae:	200f      	movs	r0, #15
 80109b0:	f000 fcb8 	bl	8011324 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80109b4:	2011      	movs	r0, #17
 80109b6:	f000 fc83 	bl	80112c0 <_LCD_SendCommand>
	HAL_Delay(240);
 80109ba:	20f0      	movs	r0, #240	; 0xf0
 80109bc:	f7f8 fc26 	bl	800920c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 80109c0:	2029      	movs	r0, #41	; 0x29
 80109c2:	f000 fc7d 	bl	80112c0 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80109c6:	2000      	movs	r0, #0
 80109c8:	f000 fb4e 	bl	8011068 <ILI9341_Set_Rotation>
}
 80109cc:	bf00      	nop
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 80109d0:	b480      	push	{r7}
 80109d2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80109d4:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <ILI9341_SPI_Init+0x34>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109dc:	2b40      	cmp	r3, #64	; 0x40
 80109de:	d005      	beq.n	80109ec <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 80109e0:	4b08      	ldr	r3, [pc, #32]	; (8010a04 <ILI9341_SPI_Init+0x34>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a07      	ldr	r2, [pc, #28]	; (8010a04 <ILI9341_SPI_Init+0x34>)
 80109e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ea:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80109ec:	4b06      	ldr	r3, [pc, #24]	; (8010a08 <ILI9341_SPI_Init+0x38>)
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	4a05      	ldr	r2, [pc, #20]	; (8010a08 <ILI9341_SPI_Init+0x38>)
 80109f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109f6:	6153      	str	r3, [r2, #20]
}
 80109f8:	bf00      	nop
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	40003c00 	.word	0x40003c00
 8010a08:	48000400 	.word	0x48000400

08010a0c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010a0c:	b590      	push	{r4, r7, lr}
 8010a0e:	b087      	sub	sp, #28
 8010a10:	af02      	add	r7, sp, #8
 8010a12:	4604      	mov	r4, r0
 8010a14:	4608      	mov	r0, r1
 8010a16:	4611      	mov	r1, r2
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4623      	mov	r3, r4
 8010a1c:	80fb      	strh	r3, [r7, #6]
 8010a1e:	4603      	mov	r3, r0
 8010a20:	80bb      	strh	r3, [r7, #4]
 8010a22:	460b      	mov	r3, r1
 8010a24:	807b      	strh	r3, [r7, #2]
 8010a26:	4613      	mov	r3, r2
 8010a28:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010a2a:	4b28      	ldr	r3, [pc, #160]	; (8010acc <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	88fa      	ldrh	r2, [r7, #6]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d246      	bcs.n	8010ac4 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010a36:	4b26      	ldr	r3, [pc, #152]	; (8010ad0 <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	88ba      	ldrh	r2, [r7, #4]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d240      	bcs.n	8010ac4 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010a42:	88fa      	ldrh	r2, [r7, #6]
 8010a44:	887b      	ldrh	r3, [r7, #2]
 8010a46:	4413      	add	r3, r2
 8010a48:	3b01      	subs	r3, #1
 8010a4a:	4a20      	ldr	r2, [pc, #128]	; (8010acc <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a4c:	8812      	ldrh	r2, [r2, #0]
 8010a4e:	b292      	uxth	r2, r2
 8010a50:	4293      	cmp	r3, r2
 8010a52:	db05      	blt.n	8010a60 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010a54:	4b1d      	ldr	r3, [pc, #116]	; (8010acc <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a56:	881b      	ldrh	r3, [r3, #0]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	88fb      	ldrh	r3, [r7, #6]
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010a60:	88fa      	ldrh	r2, [r7, #6]
 8010a62:	887b      	ldrh	r3, [r7, #2]
 8010a64:	4413      	add	r3, r2
 8010a66:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	88bb      	ldrh	r3, [r7, #4]
 8010a6e:	88b9      	ldrh	r1, [r7, #4]
 8010a70:	88f8      	ldrh	r0, [r7, #6]
 8010a72:	f000 f893 	bl	8010b9c <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010a7a:	887b      	ldrh	r3, [r7, #2]
 8010a7c:	f003 0301 	and.w	r3, r3, #1
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d009      	beq.n	8010a98 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010a84:	887b      	ldrh	r3, [r7, #2]
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d906      	bls.n	8010a98 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010a8e:	887b      	ldrh	r3, [r7, #2]
 8010a90:	085b      	lsrs	r3, r3, #1
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010a98:	887c      	ldrh	r4, [r7, #2]
 8010a9a:	883a      	ldrh	r2, [r7, #0]
 8010a9c:	88b9      	ldrh	r1, [r7, #4]
 8010a9e:	88f8      	ldrh	r0, [r7, #6]
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	4623      	mov	r3, r4
 8010aa6:	f000 fb5b 	bl	8011160 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00a      	beq.n	8010ac6 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010ab0:	88fa      	ldrh	r2, [r7, #6]
 8010ab2:	887b      	ldrh	r3, [r7, #2]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	883a      	ldrh	r2, [r7, #0]
 8010aba:	88b9      	ldrh	r1, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f000 f8e3 	bl	8010c88 <ILI9341_Draw_Pixel>
 8010ac2:	e000      	b.n	8010ac6 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010ac4:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd90      	pop	{r4, r7, pc}
 8010acc:	20000c42 	.word	0x20000c42
 8010ad0:	20000c40 	.word	0x20000c40

08010ad4 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010ad4:	b590      	push	{r4, r7, lr}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af02      	add	r7, sp, #8
 8010ada:	4604      	mov	r4, r0
 8010adc:	4608      	mov	r0, r1
 8010ade:	4611      	mov	r1, r2
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	4623      	mov	r3, r4
 8010ae4:	80fb      	strh	r3, [r7, #6]
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	80bb      	strh	r3, [r7, #4]
 8010aea:	460b      	mov	r3, r1
 8010aec:	807b      	strh	r3, [r7, #2]
 8010aee:	4613      	mov	r3, r2
 8010af0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010af2:	4b28      	ldr	r3, [pc, #160]	; (8010b94 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010af4:	881b      	ldrh	r3, [r3, #0]
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	88fa      	ldrh	r2, [r7, #6]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d246      	bcs.n	8010b8c <ILI9341_Draw_Vertical_Line+0xb8>
 8010afe:	4b26      	ldr	r3, [pc, #152]	; (8010b98 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	88ba      	ldrh	r2, [r7, #4]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d240      	bcs.n	8010b8c <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010b0a:	88ba      	ldrh	r2, [r7, #4]
 8010b0c:	887b      	ldrh	r3, [r7, #2]
 8010b0e:	4413      	add	r3, r2
 8010b10:	3b01      	subs	r3, #1
 8010b12:	4a21      	ldr	r2, [pc, #132]	; (8010b98 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b14:	8812      	ldrh	r2, [r2, #0]
 8010b16:	b292      	uxth	r2, r2
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	db05      	blt.n	8010b28 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010b1c:	4b1e      	ldr	r3, [pc, #120]	; (8010b98 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	88bb      	ldrh	r3, [r7, #4]
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010b28:	88ba      	ldrh	r2, [r7, #4]
 8010b2a:	887b      	ldrh	r3, [r7, #2]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	3b01      	subs	r3, #1
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	88fa      	ldrh	r2, [r7, #6]
 8010b36:	88b9      	ldrh	r1, [r7, #4]
 8010b38:	88f8      	ldrh	r0, [r7, #6]
 8010b3a:	f000 f82f 	bl	8010b9c <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010b42:	887b      	ldrh	r3, [r7, #2]
 8010b44:	f003 0301 	and.w	r3, r3, #1
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d009      	beq.n	8010b60 <ILI9341_Draw_Vertical_Line+0x8c>
 8010b4c:	887b      	ldrh	r3, [r7, #2]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d906      	bls.n	8010b60 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010b52:	2301      	movs	r3, #1
 8010b54:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010b56:	887b      	ldrh	r3, [r7, #2]
 8010b58:	085b      	lsrs	r3, r3, #1
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d008      	beq.n	8010b78 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010b66:	88ba      	ldrh	r2, [r7, #4]
 8010b68:	887b      	ldrh	r3, [r7, #2]
 8010b6a:	4413      	add	r3, r2
 8010b6c:	b299      	uxth	r1, r3
 8010b6e:	883a      	ldrh	r2, [r7, #0]
 8010b70:	88fb      	ldrh	r3, [r7, #6]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 f888 	bl	8010c88 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010b78:	887c      	ldrh	r4, [r7, #2]
 8010b7a:	883a      	ldrh	r2, [r7, #0]
 8010b7c:	88b9      	ldrh	r1, [r7, #4]
 8010b7e:	88f8      	ldrh	r0, [r7, #6]
 8010b80:	2303      	movs	r3, #3
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	4623      	mov	r3, r4
 8010b86:	f000 faeb 	bl	8011160 <_LCD_Write_Frame>
 8010b8a:	e000      	b.n	8010b8e <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010b8c:	bf00      	nop
}
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd90      	pop	{r4, r7, pc}
 8010b94:	20000c42 	.word	0x20000c42
 8010b98:	20000c40 	.word	0x20000c40

08010b9c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010b9c:	b590      	push	{r4, r7, lr}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	4608      	mov	r0, r1
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	461a      	mov	r2, r3
 8010baa:	4623      	mov	r3, r4
 8010bac:	80fb      	strh	r3, [r7, #6]
 8010bae:	4603      	mov	r3, r0
 8010bb0:	80bb      	strh	r3, [r7, #4]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	807b      	strh	r3, [r7, #2]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010bba:	202a      	movs	r0, #42	; 0x2a
 8010bbc:	f000 fb80 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010bc0:	88fb      	ldrh	r3, [r7, #6]
 8010bc2:	0a1b      	lsrs	r3, r3, #8
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f000 fbab 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(sc);
 8010bce:	88fb      	ldrh	r3, [r7, #6]
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 fba6 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010bd8:	887b      	ldrh	r3, [r7, #2]
 8010bda:	0a1b      	lsrs	r3, r3, #8
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 fb9f 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(ec);
 8010be6:	887b      	ldrh	r3, [r7, #2]
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	4618      	mov	r0, r3
 8010bec:	f000 fb9a 	bl	8011324 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010bf0:	202b      	movs	r0, #43	; 0x2b
 8010bf2:	f000 fb65 	bl	80112c0 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010bf6:	88bb      	ldrh	r3, [r7, #4]
 8010bf8:	0a1b      	lsrs	r3, r3, #8
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 fb90 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(sp);
 8010c04:	88bb      	ldrh	r3, [r7, #4]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f000 fb8b 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010c0e:	883b      	ldrh	r3, [r7, #0]
 8010c10:	0a1b      	lsrs	r3, r3, #8
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	4618      	mov	r0, r3
 8010c18:	f000 fb84 	bl	8011324 <_LCD_SendData>
	_LCD_SendData(ep);
 8010c1c:	883b      	ldrh	r3, [r7, #0]
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 fb7f 	bl	8011324 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010c26:	202c      	movs	r0, #44	; 0x2c
 8010c28:	f000 fb4a 	bl	80112c0 <_LCD_SendCommand>
}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd90      	pop	{r4, r7, pc}

08010c34 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af02      	add	r7, sp, #8
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010c3e:	4b10      	ldr	r3, [pc, #64]	; (8010c80 <ILI9341_Fill_Screen+0x4c>)
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	4b0f      	ldr	r3, [pc, #60]	; (8010c84 <ILI9341_Fill_Screen+0x50>)
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f7ff ffa5 	bl	8010b9c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010c52:	4b0b      	ldr	r3, [pc, #44]	; (8010c80 <ILI9341_Fill_Screen+0x4c>)
 8010c54:	881b      	ldrh	r3, [r3, #0]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	461a      	mov	r2, r3
 8010c5a:	4b0a      	ldr	r3, [pc, #40]	; (8010c84 <ILI9341_Fill_Screen+0x50>)
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	fb03 f302 	mul.w	r3, r3, r2
 8010c64:	4619      	mov	r1, r3
 8010c66:	88fa      	ldrh	r2, [r7, #6]
 8010c68:	2304      	movs	r3, #4
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	2100      	movs	r1, #0
 8010c70:	2000      	movs	r0, #0
 8010c72:	f000 fa75 	bl	8011160 <_LCD_Write_Frame>
}
 8010c76:	bf00      	nop
 8010c78:	3708      	adds	r7, #8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	20000c42 	.word	0x20000c42
 8010c84:	20000c40 	.word	0x20000c40

08010c88 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b08e      	sub	sp, #56	; 0x38
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	4603      	mov	r3, r0
 8010c90:	80fb      	strh	r3, [r7, #6]
 8010c92:	460b      	mov	r3, r1
 8010c94:	80bb      	strh	r3, [r7, #4]
 8010c96:	4613      	mov	r3, r2
 8010c98:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010c9a:	4b98      	ldr	r3, [pc, #608]	; (8010efc <ILI9341_Draw_Pixel+0x274>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	88fa      	ldrh	r2, [r7, #6]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	f080 8143 	bcs.w	8010f2e <ILI9341_Draw_Pixel+0x2a6>
 8010ca8:	4b95      	ldr	r3, [pc, #596]	; (8010f00 <ILI9341_Draw_Pixel+0x278>)
 8010caa:	881b      	ldrh	r3, [r3, #0]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	88ba      	ldrh	r2, [r7, #4]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	f080 813c 	bcs.w	8010f2e <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010cb6:	4b93      	ldr	r3, [pc, #588]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	4a92      	ldr	r2, [pc, #584]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cc0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010cc2:	4b90      	ldr	r3, [pc, #576]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	4a8f      	ldr	r2, [pc, #572]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ccc:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010cce:	220a      	movs	r2, #10
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	202a      	movs	r0, #42	; 0x2a
 8010cd4:	f000 fb58 	bl	8011388 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010cd8:	2300      	movs	r3, #0
 8010cda:	637b      	str	r3, [r7, #52]	; 0x34
 8010cdc:	e008      	b.n	8010cf0 <ILI9341_Draw_Pixel+0x68>
 8010cde:	4b89      	ldr	r3, [pc, #548]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ce0:	695b      	ldr	r3, [r3, #20]
 8010ce2:	4a88      	ldr	r2, [pc, #544]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ce8:	6153      	str	r3, [r2, #20]
 8010cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cec:	3301      	adds	r3, #1
 8010cee:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf2:	2b02      	cmp	r3, #2
 8010cf4:	ddf3      	ble.n	8010cde <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010cf6:	4b83      	ldr	r3, [pc, #524]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	4a82      	ldr	r2, [pc, #520]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d00:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010d02:	4b80      	ldr	r3, [pc, #512]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	4a7f      	ldr	r2, [pc, #508]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d0c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d0e:	4b7d      	ldr	r3, [pc, #500]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d10:	695b      	ldr	r3, [r3, #20]
 8010d12:	4a7c      	ldr	r2, [pc, #496]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d18:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010d1a:	88fb      	ldrh	r3, [r7, #6]
 8010d1c:	0a1b      	lsrs	r3, r3, #8
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	753b      	strb	r3, [r7, #20]
 8010d24:	88fb      	ldrh	r3, [r7, #6]
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	757b      	strb	r3, [r7, #21]
 8010d2a:	88fb      	ldrh	r3, [r7, #6]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	121b      	asrs	r3, r3, #8
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	75bb      	strb	r3, [r7, #22]
 8010d34:	88fb      	ldrh	r3, [r7, #6]
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	3301      	adds	r3, #1
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010d3e:	f107 0014 	add.w	r0, r7, #20
 8010d42:	230a      	movs	r3, #10
 8010d44:	2200      	movs	r2, #0
 8010d46:	2104      	movs	r1, #4
 8010d48:	f000 fb50 	bl	80113ec <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8010d50:	e008      	b.n	8010d64 <ILI9341_Draw_Pixel+0xdc>
 8010d52:	4b6c      	ldr	r3, [pc, #432]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d54:	695b      	ldr	r3, [r3, #20]
 8010d56:	4a6b      	ldr	r2, [pc, #428]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d5c:	6153      	str	r3, [r2, #20]
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d60:	3301      	adds	r3, #1
 8010d62:	633b      	str	r3, [r7, #48]	; 0x30
 8010d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	ddf3      	ble.n	8010d52 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010d6a:	4b66      	ldr	r3, [pc, #408]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d6c:	695b      	ldr	r3, [r3, #20]
 8010d6e:	4a65      	ldr	r2, [pc, #404]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d74:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010d76:	4b63      	ldr	r3, [pc, #396]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	4a62      	ldr	r2, [pc, #392]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d80:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d82:	4b60      	ldr	r3, [pc, #384]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	4a5f      	ldr	r2, [pc, #380]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d8c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010d8e:	220a      	movs	r2, #10
 8010d90:	2100      	movs	r1, #0
 8010d92:	202b      	movs	r0, #43	; 0x2b
 8010d94:	f000 faf8 	bl	8011388 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d98:	2300      	movs	r3, #0
 8010d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d9c:	e008      	b.n	8010db0 <ILI9341_Draw_Pixel+0x128>
 8010d9e:	4b59      	ldr	r3, [pc, #356]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010da0:	695b      	ldr	r3, [r3, #20]
 8010da2:	4a58      	ldr	r2, [pc, #352]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010da8:	6153      	str	r3, [r2, #20]
 8010daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dac:	3301      	adds	r3, #1
 8010dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db2:	2b02      	cmp	r3, #2
 8010db4:	ddf3      	ble.n	8010d9e <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010db6:	4b53      	ldr	r3, [pc, #332]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010db8:	695b      	ldr	r3, [r3, #20]
 8010dba:	4a52      	ldr	r2, [pc, #328]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010dc2:	4b50      	ldr	r3, [pc, #320]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	4a4f      	ldr	r2, [pc, #316]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dcc:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010dce:	4b4d      	ldr	r3, [pc, #308]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010dd0:	695b      	ldr	r3, [r3, #20]
 8010dd2:	4a4c      	ldr	r2, [pc, #304]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dd8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8010dda:	88bb      	ldrh	r3, [r7, #4]
 8010ddc:	0a1b      	lsrs	r3, r3, #8
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	743b      	strb	r3, [r7, #16]
 8010de4:	88bb      	ldrh	r3, [r7, #4]
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	747b      	strb	r3, [r7, #17]
 8010dea:	88bb      	ldrh	r3, [r7, #4]
 8010dec:	3301      	adds	r3, #1
 8010dee:	121b      	asrs	r3, r3, #8
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	74bb      	strb	r3, [r7, #18]
 8010df4:	88bb      	ldrh	r3, [r7, #4]
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	3301      	adds	r3, #1
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8010dfe:	f107 0010 	add.w	r0, r7, #16
 8010e02:	230a      	movs	r3, #10
 8010e04:	2200      	movs	r2, #0
 8010e06:	2104      	movs	r1, #4
 8010e08:	f000 faf0 	bl	80113ec <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e10:	e008      	b.n	8010e24 <ILI9341_Draw_Pixel+0x19c>
 8010e12:	4b3c      	ldr	r3, [pc, #240]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e14:	695b      	ldr	r3, [r3, #20]
 8010e16:	4a3b      	ldr	r2, [pc, #236]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e1c:	6153      	str	r3, [r2, #20]
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	3301      	adds	r3, #1
 8010e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	ddf3      	ble.n	8010e12 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e2a:	4b36      	ldr	r3, [pc, #216]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e2c:	695b      	ldr	r3, [r3, #20]
 8010e2e:	4a35      	ldr	r2, [pc, #212]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e34:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010e36:	4b33      	ldr	r3, [pc, #204]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e38:	695b      	ldr	r3, [r3, #20]
 8010e3a:	4a32      	ldr	r2, [pc, #200]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e40:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e42:	4b30      	ldr	r3, [pc, #192]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	4a2f      	ldr	r2, [pc, #188]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e4c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8010e4e:	220a      	movs	r2, #10
 8010e50:	2100      	movs	r1, #0
 8010e52:	202c      	movs	r0, #44	; 0x2c
 8010e54:	f000 fa98 	bl	8011388 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e58:	2300      	movs	r3, #0
 8010e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e5c:	e008      	b.n	8010e70 <ILI9341_Draw_Pixel+0x1e8>
 8010e5e:	4b29      	ldr	r3, [pc, #164]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e60:	695b      	ldr	r3, [r3, #20]
 8010e62:	4a28      	ldr	r2, [pc, #160]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e68:	6153      	str	r3, [r2, #20]
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	ddf3      	ble.n	8010e5e <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010e76:	4b23      	ldr	r3, [pc, #140]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e78:	695b      	ldr	r3, [r3, #20]
 8010e7a:	4a22      	ldr	r2, [pc, #136]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e80:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e82:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	4a1f      	ldr	r2, [pc, #124]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e8c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e8e:	4b1d      	ldr	r3, [pc, #116]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	4a1c      	ldr	r2, [pc, #112]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e98:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8010e9a:	887b      	ldrh	r3, [r7, #2]
 8010e9c:	0a1b      	lsrs	r3, r3, #8
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	733b      	strb	r3, [r7, #12]
 8010ea4:	887b      	ldrh	r3, [r7, #2]
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8010eaa:	f107 000c 	add.w	r0, r7, #12
 8010eae:	2301      	movs	r3, #1
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2102      	movs	r1, #2
 8010eb4:	f000 fa9a 	bl	80113ec <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010eb8:	2300      	movs	r3, #0
 8010eba:	623b      	str	r3, [r7, #32]
 8010ebc:	e008      	b.n	8010ed0 <ILI9341_Draw_Pixel+0x248>
 8010ebe:	4b11      	ldr	r3, [pc, #68]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	4a10      	ldr	r2, [pc, #64]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ec8:	6153      	str	r3, [r2, #20]
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	623b      	str	r3, [r7, #32]
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	2b02      	cmp	r3, #2
 8010ed4:	ddf3      	ble.n	8010ebe <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	61fb      	str	r3, [r7, #28]
 8010eda:	e008      	b.n	8010eee <ILI9341_Draw_Pixel+0x266>
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ede:	695b      	ldr	r3, [r3, #20]
 8010ee0:	4a08      	ldr	r2, [pc, #32]	; (8010f04 <ILI9341_Draw_Pixel+0x27c>)
 8010ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ee6:	6153      	str	r3, [r2, #20]
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	3301      	adds	r3, #1
 8010eec:	61fb      	str	r3, [r7, #28]
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	2b02      	cmp	r3, #2
 8010ef2:	ddf3      	ble.n	8010edc <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	61bb      	str	r3, [r7, #24]
 8010ef8:	e00f      	b.n	8010f1a <ILI9341_Draw_Pixel+0x292>
 8010efa:	bf00      	nop
 8010efc:	20000c42 	.word	0x20000c42
 8010f00:	20000c40 	.word	0x20000c40
 8010f04:	48000400 	.word	0x48000400
 8010f08:	4b0b      	ldr	r3, [pc, #44]	; (8010f38 <ILI9341_Draw_Pixel+0x2b0>)
 8010f0a:	695b      	ldr	r3, [r3, #20]
 8010f0c:	4a0a      	ldr	r2, [pc, #40]	; (8010f38 <ILI9341_Draw_Pixel+0x2b0>)
 8010f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f12:	6153      	str	r3, [r2, #20]
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	3301      	adds	r3, #1
 8010f18:	61bb      	str	r3, [r7, #24]
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	ddf3      	ble.n	8010f08 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f20:	4b05      	ldr	r3, [pc, #20]	; (8010f38 <ILI9341_Draw_Pixel+0x2b0>)
 8010f22:	695b      	ldr	r3, [r3, #20]
 8010f24:	4a04      	ldr	r2, [pc, #16]	; (8010f38 <ILI9341_Draw_Pixel+0x2b0>)
 8010f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f2a:	6153      	str	r3, [r2, #20]
 8010f2c:	e000      	b.n	8010f30 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010f2e:	bf00      	nop


}
 8010f30:	3738      	adds	r7, #56	; 0x38
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	48000400 	.word	0x48000400

08010f3c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af02      	add	r7, sp, #8
 8010f42:	4604      	mov	r4, r0
 8010f44:	4608      	mov	r0, r1
 8010f46:	4611      	mov	r1, r2
 8010f48:	461a      	mov	r2, r3
 8010f4a:	4623      	mov	r3, r4
 8010f4c:	80fb      	strh	r3, [r7, #6]
 8010f4e:	4603      	mov	r3, r0
 8010f50:	80bb      	strh	r3, [r7, #4]
 8010f52:	460b      	mov	r3, r1
 8010f54:	807b      	strh	r3, [r7, #2]
 8010f56:	4613      	mov	r3, r2
 8010f58:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010f5a:	4b41      	ldr	r3, [pc, #260]	; (8011060 <ILI9341_Draw_Rectangle+0x124>)
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	88fa      	ldrh	r2, [r7, #6]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d278      	bcs.n	8011058 <ILI9341_Draw_Rectangle+0x11c>
 8010f66:	4b3f      	ldr	r3, [pc, #252]	; (8011064 <ILI9341_Draw_Rectangle+0x128>)
 8010f68:	881b      	ldrh	r3, [r3, #0]
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	88ba      	ldrh	r2, [r7, #4]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d272      	bcs.n	8011058 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 8010f72:	88fa      	ldrh	r2, [r7, #6]
 8010f74:	887b      	ldrh	r3, [r7, #2]
 8010f76:	4413      	add	r3, r2
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	4a39      	ldr	r2, [pc, #228]	; (8011060 <ILI9341_Draw_Rectangle+0x124>)
 8010f7c:	8812      	ldrh	r2, [r2, #0]
 8010f7e:	b292      	uxth	r2, r2
 8010f80:	4293      	cmp	r3, r2
 8010f82:	db05      	blt.n	8010f90 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8010f84:	4b36      	ldr	r3, [pc, #216]	; (8011060 <ILI9341_Draw_Rectangle+0x124>)
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	88fb      	ldrh	r3, [r7, #6]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8010f90:	88ba      	ldrh	r2, [r7, #4]
 8010f92:	883b      	ldrh	r3, [r7, #0]
 8010f94:	4413      	add	r3, r2
 8010f96:	3b01      	subs	r3, #1
 8010f98:	4a32      	ldr	r2, [pc, #200]	; (8011064 <ILI9341_Draw_Rectangle+0x128>)
 8010f9a:	8812      	ldrh	r2, [r2, #0]
 8010f9c:	b292      	uxth	r2, r2
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	db05      	blt.n	8010fae <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8010fa2:	4b30      	ldr	r3, [pc, #192]	; (8011064 <ILI9341_Draw_Rectangle+0x128>)
 8010fa4:	881b      	ldrh	r3, [r3, #0]
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	88bb      	ldrh	r3, [r7, #4]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8010fae:	88fa      	ldrh	r2, [r7, #6]
 8010fb0:	887b      	ldrh	r3, [r7, #2]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8010fba:	88ba      	ldrh	r2, [r7, #4]
 8010fbc:	883b      	ldrh	r3, [r7, #0]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	88b9      	ldrh	r1, [r7, #4]
 8010fc8:	88f8      	ldrh	r0, [r7, #6]
 8010fca:	4622      	mov	r2, r4
 8010fcc:	f7ff fde6 	bl	8010b9c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8010fd0:	883a      	ldrh	r2, [r7, #0]
 8010fd2:	887b      	ldrh	r3, [r7, #2]
 8010fd4:	fb12 f303 	smulbb	r3, r2, r3
 8010fd8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8010fde:	89fb      	ldrh	r3, [r7, #14]
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d009      	beq.n	8010ffc <ILI9341_Draw_Rectangle+0xc0>
 8010fe8:	89fb      	ldrh	r3, [r7, #14]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d906      	bls.n	8010ffc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8010ff2:	89fb      	ldrh	r3, [r7, #14]
 8010ff4:	085b      	lsrs	r3, r3, #1
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 8010ffc:	89fc      	ldrh	r4, [r7, #14]
 8010ffe:	8c3a      	ldrh	r2, [r7, #32]
 8011000:	88b9      	ldrh	r1, [r7, #4]
 8011002:	88f8      	ldrh	r0, [r7, #6]
 8011004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011008:	9300      	str	r3, [sp, #0]
 801100a:	4623      	mov	r3, r4
 801100c:	f000 f8a8 	bl	8011160 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8011010:	7b7b      	ldrb	r3, [r7, #13]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d021      	beq.n	801105a <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011016:	88fa      	ldrh	r2, [r7, #6]
 8011018:	887b      	ldrh	r3, [r7, #2]
 801101a:	4413      	add	r3, r2
 801101c:	b29b      	uxth	r3, r3
 801101e:	3b02      	subs	r3, #2
 8011020:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011022:	88ba      	ldrh	r2, [r7, #4]
 8011024:	883b      	ldrh	r3, [r7, #0]
 8011026:	4413      	add	r3, r2
 8011028:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 801102a:	3b01      	subs	r3, #1
 801102c:	b29b      	uxth	r3, r3
 801102e:	8c3a      	ldrh	r2, [r7, #32]
 8011030:	4619      	mov	r1, r3
 8011032:	f7ff fe29 	bl	8010c88 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011036:	88fa      	ldrh	r2, [r7, #6]
 8011038:	887b      	ldrh	r3, [r7, #2]
 801103a:	4413      	add	r3, r2
 801103c:	b29b      	uxth	r3, r3
 801103e:	3b01      	subs	r3, #1
 8011040:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011042:	88ba      	ldrh	r2, [r7, #4]
 8011044:	883b      	ldrh	r3, [r7, #0]
 8011046:	4413      	add	r3, r2
 8011048:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801104a:	3b01      	subs	r3, #1
 801104c:	b29b      	uxth	r3, r3
 801104e:	8c3a      	ldrh	r2, [r7, #32]
 8011050:	4619      	mov	r1, r3
 8011052:	f7ff fe19 	bl	8010c88 <ILI9341_Draw_Pixel>
 8011056:	e000      	b.n	801105a <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011058:	bf00      	nop
							colour);
	}
}
 801105a:	3714      	adds	r7, #20
 801105c:	46bd      	mov	sp, r7
 801105e:	bd90      	pop	{r4, r7, pc}
 8011060:	20000c42 	.word	0x20000c42
 8011064:	20000c40 	.word	0x20000c40

08011068 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 8011072:	79fb      	ldrb	r3, [r7, #7]
 8011074:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8011076:	2036      	movs	r0, #54	; 0x36
 8011078:	f000 f922 	bl	80112c0 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 801107c:	7bfb      	ldrb	r3, [r7, #15]
 801107e:	2b03      	cmp	r3, #3
 8011080:	d836      	bhi.n	80110f0 <ILI9341_Set_Rotation+0x88>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <ILI9341_Set_Rotation+0x20>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	08011099 	.word	0x08011099
 801108c:	080110af 	.word	0x080110af
 8011090:	080110c5 	.word	0x080110c5
 8011094:	080110db 	.word	0x080110db
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8011098:	2048      	movs	r0, #72	; 0x48
 801109a:	f000 f943 	bl	8011324 <_LCD_SendData>
			LCD_WIDTH = 240;
 801109e:	4b17      	ldr	r3, [pc, #92]	; (80110fc <ILI9341_Set_Rotation+0x94>)
 80110a0:	22f0      	movs	r2, #240	; 0xf0
 80110a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80110a4:	4b16      	ldr	r3, [pc, #88]	; (8011100 <ILI9341_Set_Rotation+0x98>)
 80110a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110aa:	801a      	strh	r2, [r3, #0]
			break;
 80110ac:	e021      	b.n	80110f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80110ae:	2028      	movs	r0, #40	; 0x28
 80110b0:	f000 f938 	bl	8011324 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80110b4:	4b11      	ldr	r3, [pc, #68]	; (80110fc <ILI9341_Set_Rotation+0x94>)
 80110b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80110bc:	4b10      	ldr	r3, [pc, #64]	; (8011100 <ILI9341_Set_Rotation+0x98>)
 80110be:	22f0      	movs	r2, #240	; 0xf0
 80110c0:	801a      	strh	r2, [r3, #0]
			break;
 80110c2:	e016      	b.n	80110f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 80110c4:	2088      	movs	r0, #136	; 0x88
 80110c6:	f000 f92d 	bl	8011324 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80110ca:	4b0c      	ldr	r3, [pc, #48]	; (80110fc <ILI9341_Set_Rotation+0x94>)
 80110cc:	22f0      	movs	r2, #240	; 0xf0
 80110ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80110d0:	4b0b      	ldr	r3, [pc, #44]	; (8011100 <ILI9341_Set_Rotation+0x98>)
 80110d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110d6:	801a      	strh	r2, [r3, #0]
			break;
 80110d8:	e00b      	b.n	80110f2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80110da:	20e8      	movs	r0, #232	; 0xe8
 80110dc:	f000 f922 	bl	8011324 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80110e0:	4b06      	ldr	r3, [pc, #24]	; (80110fc <ILI9341_Set_Rotation+0x94>)
 80110e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80110e8:	4b05      	ldr	r3, [pc, #20]	; (8011100 <ILI9341_Set_Rotation+0x98>)
 80110ea:	22f0      	movs	r2, #240	; 0xf0
 80110ec:	801a      	strh	r2, [r3, #0]
			break;
 80110ee:	e000      	b.n	80110f2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80110f0:	bf00      	nop
	}
}
 80110f2:	bf00      	nop
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20000c42 	.word	0x20000c42
 8011100:	20000c40 	.word	0x20000c40

08011104 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8011104:	b480      	push	{r7}
 8011106:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011108:	4b05      	ldr	r3, [pc, #20]	; (8011120 <_LCD_Enable+0x1c>)
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	4a04      	ldr	r2, [pc, #16]	; (8011120 <_LCD_Enable+0x1c>)
 801110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011112:	6153      	str	r3, [r2, #20]
}
 8011114:	bf00      	nop
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	48000400 	.word	0x48000400

08011124 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8011124:	b580      	push	{r7, lr}
 8011126:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8011128:	4b0c      	ldr	r3, [pc, #48]	; (801115c <_LCD_Reset+0x38>)
 801112a:	695b      	ldr	r3, [r3, #20]
 801112c:	4a0b      	ldr	r2, [pc, #44]	; (801115c <_LCD_Reset+0x38>)
 801112e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011132:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011134:	20c8      	movs	r0, #200	; 0xc8
 8011136:	f7f8 f869 	bl	800920c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801113a:	4b08      	ldr	r3, [pc, #32]	; (801115c <_LCD_Reset+0x38>)
 801113c:	695b      	ldr	r3, [r3, #20]
 801113e:	4a07      	ldr	r2, [pc, #28]	; (801115c <_LCD_Reset+0x38>)
 8011140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011144:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011146:	20c8      	movs	r0, #200	; 0xc8
 8011148:	f7f8 f860 	bl	800920c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <_LCD_Reset+0x38>)
 801114e:	695b      	ldr	r3, [r3, #20]
 8011150:	4a02      	ldr	r2, [pc, #8]	; (801115c <_LCD_Reset+0x38>)
 8011152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011156:	6153      	str	r3, [r2, #20]
}
 8011158:	bf00      	nop
 801115a:	bd80      	pop	{r7, pc}
 801115c:	48000400 	.word	0x48000400

08011160 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8011160:	b5b0      	push	{r4, r5, r7, lr}
 8011162:	b08e      	sub	sp, #56	; 0x38
 8011164:	af00      	add	r7, sp, #0
 8011166:	607b      	str	r3, [r7, #4]
 8011168:	4603      	mov	r3, r0
 801116a:	81fb      	strh	r3, [r7, #14]
 801116c:	460b      	mov	r3, r1
 801116e:	81bb      	strh	r3, [r7, #12]
 8011170:	4613      	mov	r3, r2
 8011172:	817b      	strh	r3, [r7, #10]
 8011174:	466b      	mov	r3, sp
 8011176:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8011178:	2300      	movs	r3, #0
 801117a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	4a4d      	ldr	r2, [pc, #308]	; (80112b8 <_LCD_Write_Frame+0x158>)
 8011182:	8812      	ldrh	r2, [r2, #0]
 8011184:	4293      	cmp	r3, r2
 8011186:	d202      	bcs.n	801118e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801118c:	e002      	b.n	8011194 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 801118e:	4b4a      	ldr	r3, [pc, #296]	; (80112b8 <_LCD_Write_Frame+0x158>)
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 8011194:	897b      	ldrh	r3, [r7, #10]
 8011196:	0a1b      	lsrs	r3, r3, #8
 8011198:	b29b      	uxth	r3, r3
 801119a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 801119c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801119e:	4603      	mov	r3, r0
 80111a0:	3b01      	subs	r3, #1
 80111a2:	61bb      	str	r3, [r7, #24]
 80111a4:	4601      	mov	r1, r0
 80111a6:	f04f 0200 	mov.w	r2, #0
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	f04f 0400 	mov.w	r4, #0
 80111b2:	00d4      	lsls	r4, r2, #3
 80111b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80111b8:	00cb      	lsls	r3, r1, #3
 80111ba:	4601      	mov	r1, r0
 80111bc:	f04f 0200 	mov.w	r2, #0
 80111c0:	f04f 0300 	mov.w	r3, #0
 80111c4:	f04f 0400 	mov.w	r4, #0
 80111c8:	00d4      	lsls	r4, r2, #3
 80111ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80111ce:	00cb      	lsls	r3, r1, #3
 80111d0:	1dc3      	adds	r3, r0, #7
 80111d2:	08db      	lsrs	r3, r3, #3
 80111d4:	00db      	lsls	r3, r3, #3
 80111d6:	ebad 0d03 	sub.w	sp, sp, r3
 80111da:	466b      	mov	r3, sp
 80111dc:	3300      	adds	r3, #0
 80111de:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80111e0:	2300      	movs	r3, #0
 80111e2:	633b      	str	r3, [r7, #48]	; 0x30
 80111e4:	e00d      	b.n	8011202 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	4413      	add	r3, r2
 80111ec:	7ffa      	ldrb	r2, [r7, #31]
 80111ee:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	3301      	adds	r3, #1
 80111f4:	897a      	ldrh	r2, [r7, #10]
 80111f6:	b2d1      	uxtb	r1, r2
 80111f8:	697a      	ldr	r2, [r7, #20]
 80111fa:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80111fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fe:	3302      	adds	r3, #2
 8011200:	633b      	str	r3, [r7, #48]	; 0x30
 8011202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	429a      	cmp	r2, r3
 8011208:	d3ed      	bcc.n	80111e6 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8011210:	2301      	movs	r3, #1
 8011212:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8011214:	2300      	movs	r3, #0
 8011216:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00d      	beq.n	801123a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801121e:	693a      	ldr	r2, [r7, #16]
 8011220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011222:	fbb2 f3f3 	udiv	r3, r2, r3
 8011226:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801122c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011232:	fb01 f202 	mul.w	r2, r1, r2
 8011236:	1a9b      	subs	r3, r3, r2
 8011238:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801123a:	4b20      	ldr	r3, [pc, #128]	; (80112bc <_LCD_Write_Frame+0x15c>)
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	4a1f      	ldr	r2, [pc, #124]	; (80112bc <_LCD_Write_Frame+0x15c>)
 8011240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011244:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011246:	4b1d      	ldr	r3, [pc, #116]	; (80112bc <_LCD_Write_Frame+0x15c>)
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	4a1c      	ldr	r2, [pc, #112]	; (80112bc <_LCD_Write_Frame+0x15c>)
 801124c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011250:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 8011252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00f      	beq.n	8011278 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011258:	2300      	movs	r3, #0
 801125a:	627b      	str	r3, [r7, #36]	; 0x24
 801125c:	e008      	b.n	8011270 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801125e:	6978      	ldr	r0, [r7, #20]
 8011260:	230a      	movs	r3, #10
 8011262:	2200      	movs	r2, #0
 8011264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011266:	f000 f8c1 	bl	80113ec <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	3301      	adds	r3, #1
 801126e:	627b      	str	r3, [r7, #36]	; 0x24
 8011270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011274:	429a      	cmp	r2, r3
 8011276:	d3f2      	bcc.n	801125e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8011278:	6978      	ldr	r0, [r7, #20]
 801127a:	230a      	movs	r3, #10
 801127c:	2200      	movs	r2, #0
 801127e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011280:	f000 f8b4 	bl	80113ec <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011284:	2300      	movs	r3, #0
 8011286:	623b      	str	r3, [r7, #32]
 8011288:	e008      	b.n	801129c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801128a:	4b0c      	ldr	r3, [pc, #48]	; (80112bc <_LCD_Write_Frame+0x15c>)
 801128c:	695b      	ldr	r3, [r3, #20]
 801128e:	4a0b      	ldr	r2, [pc, #44]	; (80112bc <_LCD_Write_Frame+0x15c>)
 8011290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011294:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011296:	6a3b      	ldr	r3, [r7, #32]
 8011298:	3301      	adds	r3, #1
 801129a:	623b      	str	r3, [r7, #32]
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	2b02      	cmp	r3, #2
 80112a0:	ddf3      	ble.n	801128a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80112a2:	4b06      	ldr	r3, [pc, #24]	; (80112bc <_LCD_Write_Frame+0x15c>)
 80112a4:	695b      	ldr	r3, [r3, #20]
 80112a6:	4a05      	ldr	r2, [pc, #20]	; (80112bc <_LCD_Write_Frame+0x15c>)
 80112a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ac:	6153      	str	r3, [r2, #20]
 80112ae:	46ad      	mov	sp, r5

}
 80112b0:	bf00      	nop
 80112b2:	3738      	adds	r7, #56	; 0x38
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bdb0      	pop	{r4, r5, r7, pc}
 80112b8:	20000c44 	.word	0x20000c44
 80112bc:	48000400 	.word	0x48000400

080112c0 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	4603      	mov	r3, r0
 80112c8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112ca:	4b15      	ldr	r3, [pc, #84]	; (8011320 <_LCD_SendCommand+0x60>)
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	4a14      	ldr	r2, [pc, #80]	; (8011320 <_LCD_SendCommand+0x60>)
 80112d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112d4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80112d6:	4b12      	ldr	r3, [pc, #72]	; (8011320 <_LCD_SendCommand+0x60>)
 80112d8:	695b      	ldr	r3, [r3, #20]
 80112da:	4a11      	ldr	r2, [pc, #68]	; (8011320 <_LCD_SendCommand+0x60>)
 80112dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112e0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 80112e2:	79fb      	ldrb	r3, [r7, #7]
 80112e4:	2200      	movs	r2, #0
 80112e6:	2100      	movs	r1, #0
 80112e8:	4618      	mov	r0, r3
 80112ea:	f000 f84d 	bl	8011388 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80112ee:	2300      	movs	r3, #0
 80112f0:	60fb      	str	r3, [r7, #12]
 80112f2:	e008      	b.n	8011306 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112f4:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <_LCD_SendCommand+0x60>)
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	4a09      	ldr	r2, [pc, #36]	; (8011320 <_LCD_SendCommand+0x60>)
 80112fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112fe:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3301      	adds	r3, #1
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b02      	cmp	r3, #2
 801130a:	ddf3      	ble.n	80112f4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801130c:	4b04      	ldr	r3, [pc, #16]	; (8011320 <_LCD_SendCommand+0x60>)
 801130e:	695b      	ldr	r3, [r3, #20]
 8011310:	4a03      	ldr	r2, [pc, #12]	; (8011320 <_LCD_SendCommand+0x60>)
 8011312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011316:	6153      	str	r3, [r2, #20]
}
 8011318:	bf00      	nop
 801131a:	3710      	adds	r7, #16
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	48000400 	.word	0x48000400

08011324 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801132e:	4b15      	ldr	r3, [pc, #84]	; (8011384 <_LCD_SendData+0x60>)
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	4a14      	ldr	r2, [pc, #80]	; (8011384 <_LCD_SendData+0x60>)
 8011334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011338:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801133a:	4b12      	ldr	r3, [pc, #72]	; (8011384 <_LCD_SendData+0x60>)
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	4a11      	ldr	r2, [pc, #68]	; (8011384 <_LCD_SendData+0x60>)
 8011340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011344:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011346:	79fb      	ldrb	r3, [r7, #7]
 8011348:	2200      	movs	r2, #0
 801134a:	2100      	movs	r1, #0
 801134c:	4618      	mov	r0, r3
 801134e:	f000 f81b 	bl	8011388 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011352:	2300      	movs	r3, #0
 8011354:	60fb      	str	r3, [r7, #12]
 8011356:	e008      	b.n	801136a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011358:	4b0a      	ldr	r3, [pc, #40]	; (8011384 <_LCD_SendData+0x60>)
 801135a:	695b      	ldr	r3, [r3, #20]
 801135c:	4a09      	ldr	r2, [pc, #36]	; (8011384 <_LCD_SendData+0x60>)
 801135e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011362:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	3301      	adds	r3, #1
 8011368:	60fb      	str	r3, [r7, #12]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2b02      	cmp	r3, #2
 801136e:	ddf3      	ble.n	8011358 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011370:	4b04      	ldr	r3, [pc, #16]	; (8011384 <_LCD_SendData+0x60>)
 8011372:	695b      	ldr	r3, [r3, #20]
 8011374:	4a03      	ldr	r2, [pc, #12]	; (8011384 <_LCD_SendData+0x60>)
 8011376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801137a:	6153      	str	r3, [r2, #20]
}
 801137c:	bf00      	nop
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	48000400 	.word	0x48000400

08011388 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8011388:	b480      	push	{r7}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
 801138e:	4603      	mov	r3, r0
 8011390:	71fb      	strb	r3, [r7, #7]
 8011392:	460b      	mov	r3, r1
 8011394:	71bb      	strb	r3, [r7, #6]
 8011396:	4613      	mov	r3, r2
 8011398:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 801139a:	2300      	movs	r3, #0
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e003      	b.n	80113a8 <_SPI_SendByte+0x20>
   		asm("nop");
 80113a0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	3301      	adds	r3, #1
 80113a6:	60fb      	str	r3, [r7, #12]
 80113a8:	79bb      	ldrb	r3, [r7, #6]
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	dbf7      	blt.n	80113a0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80113b0:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <_SPI_SendByte+0x5c>)
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	f003 0302 	and.w	r3, r3, #2
 80113b8:	2b02      	cmp	r3, #2
 80113ba:	d102      	bne.n	80113c2 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80113bc:	4a0a      	ldr	r2, [pc, #40]	; (80113e8 <_SPI_SendByte+0x60>)
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80113c2:	2300      	movs	r3, #0
 80113c4:	60bb      	str	r3, [r7, #8]
 80113c6:	e003      	b.n	80113d0 <_SPI_SendByte+0x48>
   		asm("nop");
 80113c8:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	3301      	adds	r3, #1
 80113ce:	60bb      	str	r3, [r7, #8]
 80113d0:	797b      	ldrb	r3, [r7, #5]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	dbf7      	blt.n	80113c8 <_SPI_SendByte+0x40>

#endif

}
 80113d8:	bf00      	nop
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr
 80113e4:	40003c00 	.word	0x40003c00
 80113e8:	40003c0c 	.word	0x40003c0c

080113ec <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b089      	sub	sp, #36	; 0x24
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	4611      	mov	r1, r2
 80113f8:	461a      	mov	r2, r3
 80113fa:	460b      	mov	r3, r1
 80113fc:	71fb      	strb	r3, [r7, #7]
 80113fe:	4613      	mov	r3, r2
 8011400:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011402:	2300      	movs	r3, #0
 8011404:	61fb      	str	r3, [r7, #28]
 8011406:	e003      	b.n	8011410 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8011408:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	3301      	adds	r3, #1
 801140e:	61fb      	str	r3, [r7, #28]
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	69fa      	ldr	r2, [r7, #28]
 8011414:	429a      	cmp	r2, r3
 8011416:	dbf7      	blt.n	8011408 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 801141c:	e01d      	b.n	801145a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801141e:	4b1c      	ldr	r3, [pc, #112]	; (8011490 <_SPI_SendByteMultiByte+0xa4>)
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	f003 0302 	and.w	r3, r3, #2
 8011426:	2b02      	cmp	r3, #2
 8011428:	d117      	bne.n	801145a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	2b01      	cmp	r3, #1
 801142e:	d90a      	bls.n	8011446 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	881a      	ldrh	r2, [r3, #0]
 8011434:	4b16      	ldr	r3, [pc, #88]	; (8011490 <_SPI_SendByteMultiByte+0xa4>)
 8011436:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	3302      	adds	r3, #2
 801143c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	3b02      	subs	r3, #2
 8011442:	60bb      	str	r3, [r7, #8]
 8011444:	e009      	b.n	801145a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011446:	4a13      	ldr	r2, [pc, #76]	; (8011494 <_SPI_SendByteMultiByte+0xa8>)
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	3301      	adds	r3, #1
 8011452:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	3b01      	subs	r3, #1
 8011458:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d1de      	bne.n	801141e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8011460:	4b0b      	ldr	r3, [pc, #44]	; (8011490 <_SPI_SendByteMultiByte+0xa4>)
 8011462:	689b      	ldr	r3, [r3, #8]
 8011464:	4a0a      	ldr	r2, [pc, #40]	; (8011490 <_SPI_SendByteMultiByte+0xa4>)
 8011466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801146a:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 801146c:	2300      	movs	r3, #0
 801146e:	617b      	str	r3, [r7, #20]
 8011470:	e003      	b.n	801147a <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 8011472:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	3301      	adds	r3, #1
 8011478:	617b      	str	r3, [r7, #20]
 801147a:	79bb      	ldrb	r3, [r7, #6]
 801147c:	697a      	ldr	r2, [r7, #20]
 801147e:	429a      	cmp	r2, r3
 8011480:	dbf7      	blt.n	8011472 <_SPI_SendByteMultiByte+0x86>

#endif

}
 8011482:	bf00      	nop
 8011484:	3724      	adds	r7, #36	; 0x24
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	40003c00 	.word	0x40003c00
 8011494:	40003c0c 	.word	0x40003c0c

08011498 <__errno>:
 8011498:	4b01      	ldr	r3, [pc, #4]	; (80114a0 <__errno+0x8>)
 801149a:	6818      	ldr	r0, [r3, #0]
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	20001c38 	.word	0x20001c38

080114a4 <__libc_init_array>:
 80114a4:	b570      	push	{r4, r5, r6, lr}
 80114a6:	4e0d      	ldr	r6, [pc, #52]	; (80114dc <__libc_init_array+0x38>)
 80114a8:	4c0d      	ldr	r4, [pc, #52]	; (80114e0 <__libc_init_array+0x3c>)
 80114aa:	1ba4      	subs	r4, r4, r6
 80114ac:	10a4      	asrs	r4, r4, #2
 80114ae:	2500      	movs	r5, #0
 80114b0:	42a5      	cmp	r5, r4
 80114b2:	d109      	bne.n	80114c8 <__libc_init_array+0x24>
 80114b4:	4e0b      	ldr	r6, [pc, #44]	; (80114e4 <__libc_init_array+0x40>)
 80114b6:	4c0c      	ldr	r4, [pc, #48]	; (80114e8 <__libc_init_array+0x44>)
 80114b8:	f004 f8a0 	bl	80155fc <_init>
 80114bc:	1ba4      	subs	r4, r4, r6
 80114be:	10a4      	asrs	r4, r4, #2
 80114c0:	2500      	movs	r5, #0
 80114c2:	42a5      	cmp	r5, r4
 80114c4:	d105      	bne.n	80114d2 <__libc_init_array+0x2e>
 80114c6:	bd70      	pop	{r4, r5, r6, pc}
 80114c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114cc:	4798      	blx	r3
 80114ce:	3501      	adds	r5, #1
 80114d0:	e7ee      	b.n	80114b0 <__libc_init_array+0xc>
 80114d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114d6:	4798      	blx	r3
 80114d8:	3501      	adds	r5, #1
 80114da:	e7f2      	b.n	80114c2 <__libc_init_array+0x1e>
 80114dc:	08016a98 	.word	0x08016a98
 80114e0:	08016a98 	.word	0x08016a98
 80114e4:	08016a98 	.word	0x08016a98
 80114e8:	08016a9c 	.word	0x08016a9c

080114ec <memset>:
 80114ec:	4402      	add	r2, r0
 80114ee:	4603      	mov	r3, r0
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d100      	bne.n	80114f6 <memset+0xa>
 80114f4:	4770      	bx	lr
 80114f6:	f803 1b01 	strb.w	r1, [r3], #1
 80114fa:	e7f9      	b.n	80114f0 <memset+0x4>

080114fc <__cvt>:
 80114fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011500:	ec55 4b10 	vmov	r4, r5, d0
 8011504:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011506:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801150a:	2d00      	cmp	r5, #0
 801150c:	460e      	mov	r6, r1
 801150e:	4691      	mov	r9, r2
 8011510:	4619      	mov	r1, r3
 8011512:	bfb8      	it	lt
 8011514:	4622      	movlt	r2, r4
 8011516:	462b      	mov	r3, r5
 8011518:	f027 0720 	bic.w	r7, r7, #32
 801151c:	bfbb      	ittet	lt
 801151e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011522:	461d      	movlt	r5, r3
 8011524:	2300      	movge	r3, #0
 8011526:	232d      	movlt	r3, #45	; 0x2d
 8011528:	bfb8      	it	lt
 801152a:	4614      	movlt	r4, r2
 801152c:	2f46      	cmp	r7, #70	; 0x46
 801152e:	700b      	strb	r3, [r1, #0]
 8011530:	d004      	beq.n	801153c <__cvt+0x40>
 8011532:	2f45      	cmp	r7, #69	; 0x45
 8011534:	d100      	bne.n	8011538 <__cvt+0x3c>
 8011536:	3601      	adds	r6, #1
 8011538:	2102      	movs	r1, #2
 801153a:	e000      	b.n	801153e <__cvt+0x42>
 801153c:	2103      	movs	r1, #3
 801153e:	ab03      	add	r3, sp, #12
 8011540:	9301      	str	r3, [sp, #4]
 8011542:	ab02      	add	r3, sp, #8
 8011544:	9300      	str	r3, [sp, #0]
 8011546:	4632      	mov	r2, r6
 8011548:	4653      	mov	r3, sl
 801154a:	ec45 4b10 	vmov	d0, r4, r5
 801154e:	f000 fe3f 	bl	80121d0 <_dtoa_r>
 8011552:	2f47      	cmp	r7, #71	; 0x47
 8011554:	4680      	mov	r8, r0
 8011556:	d102      	bne.n	801155e <__cvt+0x62>
 8011558:	f019 0f01 	tst.w	r9, #1
 801155c:	d026      	beq.n	80115ac <__cvt+0xb0>
 801155e:	2f46      	cmp	r7, #70	; 0x46
 8011560:	eb08 0906 	add.w	r9, r8, r6
 8011564:	d111      	bne.n	801158a <__cvt+0x8e>
 8011566:	f898 3000 	ldrb.w	r3, [r8]
 801156a:	2b30      	cmp	r3, #48	; 0x30
 801156c:	d10a      	bne.n	8011584 <__cvt+0x88>
 801156e:	2200      	movs	r2, #0
 8011570:	2300      	movs	r3, #0
 8011572:	4620      	mov	r0, r4
 8011574:	4629      	mov	r1, r5
 8011576:	f7ef facf 	bl	8000b18 <__aeabi_dcmpeq>
 801157a:	b918      	cbnz	r0, 8011584 <__cvt+0x88>
 801157c:	f1c6 0601 	rsb	r6, r6, #1
 8011580:	f8ca 6000 	str.w	r6, [sl]
 8011584:	f8da 3000 	ldr.w	r3, [sl]
 8011588:	4499      	add	r9, r3
 801158a:	2200      	movs	r2, #0
 801158c:	2300      	movs	r3, #0
 801158e:	4620      	mov	r0, r4
 8011590:	4629      	mov	r1, r5
 8011592:	f7ef fac1 	bl	8000b18 <__aeabi_dcmpeq>
 8011596:	b938      	cbnz	r0, 80115a8 <__cvt+0xac>
 8011598:	2230      	movs	r2, #48	; 0x30
 801159a:	9b03      	ldr	r3, [sp, #12]
 801159c:	454b      	cmp	r3, r9
 801159e:	d205      	bcs.n	80115ac <__cvt+0xb0>
 80115a0:	1c59      	adds	r1, r3, #1
 80115a2:	9103      	str	r1, [sp, #12]
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	e7f8      	b.n	801159a <__cvt+0x9e>
 80115a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80115ac:	9b03      	ldr	r3, [sp, #12]
 80115ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115b0:	eba3 0308 	sub.w	r3, r3, r8
 80115b4:	4640      	mov	r0, r8
 80115b6:	6013      	str	r3, [r2, #0]
 80115b8:	b004      	add	sp, #16
 80115ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080115be <__exponent>:
 80115be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115c0:	2900      	cmp	r1, #0
 80115c2:	4604      	mov	r4, r0
 80115c4:	bfba      	itte	lt
 80115c6:	4249      	neglt	r1, r1
 80115c8:	232d      	movlt	r3, #45	; 0x2d
 80115ca:	232b      	movge	r3, #43	; 0x2b
 80115cc:	2909      	cmp	r1, #9
 80115ce:	f804 2b02 	strb.w	r2, [r4], #2
 80115d2:	7043      	strb	r3, [r0, #1]
 80115d4:	dd20      	ble.n	8011618 <__exponent+0x5a>
 80115d6:	f10d 0307 	add.w	r3, sp, #7
 80115da:	461f      	mov	r7, r3
 80115dc:	260a      	movs	r6, #10
 80115de:	fb91 f5f6 	sdiv	r5, r1, r6
 80115e2:	fb06 1115 	mls	r1, r6, r5, r1
 80115e6:	3130      	adds	r1, #48	; 0x30
 80115e8:	2d09      	cmp	r5, #9
 80115ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80115ee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80115f2:	4629      	mov	r1, r5
 80115f4:	dc09      	bgt.n	801160a <__exponent+0x4c>
 80115f6:	3130      	adds	r1, #48	; 0x30
 80115f8:	3b02      	subs	r3, #2
 80115fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80115fe:	42bb      	cmp	r3, r7
 8011600:	4622      	mov	r2, r4
 8011602:	d304      	bcc.n	801160e <__exponent+0x50>
 8011604:	1a10      	subs	r0, r2, r0
 8011606:	b003      	add	sp, #12
 8011608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160a:	4613      	mov	r3, r2
 801160c:	e7e7      	b.n	80115de <__exponent+0x20>
 801160e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011612:	f804 2b01 	strb.w	r2, [r4], #1
 8011616:	e7f2      	b.n	80115fe <__exponent+0x40>
 8011618:	2330      	movs	r3, #48	; 0x30
 801161a:	4419      	add	r1, r3
 801161c:	7083      	strb	r3, [r0, #2]
 801161e:	1d02      	adds	r2, r0, #4
 8011620:	70c1      	strb	r1, [r0, #3]
 8011622:	e7ef      	b.n	8011604 <__exponent+0x46>

08011624 <_printf_float>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b08d      	sub	sp, #52	; 0x34
 801162a:	460c      	mov	r4, r1
 801162c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011630:	4616      	mov	r6, r2
 8011632:	461f      	mov	r7, r3
 8011634:	4605      	mov	r5, r0
 8011636:	f001 fcfd 	bl	8013034 <_localeconv_r>
 801163a:	6803      	ldr	r3, [r0, #0]
 801163c:	9304      	str	r3, [sp, #16]
 801163e:	4618      	mov	r0, r3
 8011640:	f7ee fdee 	bl	8000220 <strlen>
 8011644:	2300      	movs	r3, #0
 8011646:	930a      	str	r3, [sp, #40]	; 0x28
 8011648:	f8d8 3000 	ldr.w	r3, [r8]
 801164c:	9005      	str	r0, [sp, #20]
 801164e:	3307      	adds	r3, #7
 8011650:	f023 0307 	bic.w	r3, r3, #7
 8011654:	f103 0208 	add.w	r2, r3, #8
 8011658:	f894 a018 	ldrb.w	sl, [r4, #24]
 801165c:	f8d4 b000 	ldr.w	fp, [r4]
 8011660:	f8c8 2000 	str.w	r2, [r8]
 8011664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011668:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801166c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011670:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011674:	9307      	str	r3, [sp, #28]
 8011676:	f8cd 8018 	str.w	r8, [sp, #24]
 801167a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801167e:	4ba7      	ldr	r3, [pc, #668]	; (801191c <_printf_float+0x2f8>)
 8011680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011684:	f7ef fa7a 	bl	8000b7c <__aeabi_dcmpun>
 8011688:	bb70      	cbnz	r0, 80116e8 <_printf_float+0xc4>
 801168a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801168e:	4ba3      	ldr	r3, [pc, #652]	; (801191c <_printf_float+0x2f8>)
 8011690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011694:	f7ef fa54 	bl	8000b40 <__aeabi_dcmple>
 8011698:	bb30      	cbnz	r0, 80116e8 <_printf_float+0xc4>
 801169a:	2200      	movs	r2, #0
 801169c:	2300      	movs	r3, #0
 801169e:	4640      	mov	r0, r8
 80116a0:	4649      	mov	r1, r9
 80116a2:	f7ef fa43 	bl	8000b2c <__aeabi_dcmplt>
 80116a6:	b110      	cbz	r0, 80116ae <_printf_float+0x8a>
 80116a8:	232d      	movs	r3, #45	; 0x2d
 80116aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116ae:	4a9c      	ldr	r2, [pc, #624]	; (8011920 <_printf_float+0x2fc>)
 80116b0:	4b9c      	ldr	r3, [pc, #624]	; (8011924 <_printf_float+0x300>)
 80116b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80116b6:	bf8c      	ite	hi
 80116b8:	4690      	movhi	r8, r2
 80116ba:	4698      	movls	r8, r3
 80116bc:	2303      	movs	r3, #3
 80116be:	f02b 0204 	bic.w	r2, fp, #4
 80116c2:	6123      	str	r3, [r4, #16]
 80116c4:	6022      	str	r2, [r4, #0]
 80116c6:	f04f 0900 	mov.w	r9, #0
 80116ca:	9700      	str	r7, [sp, #0]
 80116cc:	4633      	mov	r3, r6
 80116ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80116d0:	4621      	mov	r1, r4
 80116d2:	4628      	mov	r0, r5
 80116d4:	f000 f9e6 	bl	8011aa4 <_printf_common>
 80116d8:	3001      	adds	r0, #1
 80116da:	f040 808d 	bne.w	80117f8 <_printf_float+0x1d4>
 80116de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116e2:	b00d      	add	sp, #52	; 0x34
 80116e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e8:	4642      	mov	r2, r8
 80116ea:	464b      	mov	r3, r9
 80116ec:	4640      	mov	r0, r8
 80116ee:	4649      	mov	r1, r9
 80116f0:	f7ef fa44 	bl	8000b7c <__aeabi_dcmpun>
 80116f4:	b110      	cbz	r0, 80116fc <_printf_float+0xd8>
 80116f6:	4a8c      	ldr	r2, [pc, #560]	; (8011928 <_printf_float+0x304>)
 80116f8:	4b8c      	ldr	r3, [pc, #560]	; (801192c <_printf_float+0x308>)
 80116fa:	e7da      	b.n	80116b2 <_printf_float+0x8e>
 80116fc:	6861      	ldr	r1, [r4, #4]
 80116fe:	1c4b      	adds	r3, r1, #1
 8011700:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011704:	a80a      	add	r0, sp, #40	; 0x28
 8011706:	d13e      	bne.n	8011786 <_printf_float+0x162>
 8011708:	2306      	movs	r3, #6
 801170a:	6063      	str	r3, [r4, #4]
 801170c:	2300      	movs	r3, #0
 801170e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011712:	ab09      	add	r3, sp, #36	; 0x24
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	ec49 8b10 	vmov	d0, r8, r9
 801171a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801171e:	6022      	str	r2, [r4, #0]
 8011720:	f8cd a004 	str.w	sl, [sp, #4]
 8011724:	6861      	ldr	r1, [r4, #4]
 8011726:	4628      	mov	r0, r5
 8011728:	f7ff fee8 	bl	80114fc <__cvt>
 801172c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011730:	2b47      	cmp	r3, #71	; 0x47
 8011732:	4680      	mov	r8, r0
 8011734:	d109      	bne.n	801174a <_printf_float+0x126>
 8011736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011738:	1cd8      	adds	r0, r3, #3
 801173a:	db02      	blt.n	8011742 <_printf_float+0x11e>
 801173c:	6862      	ldr	r2, [r4, #4]
 801173e:	4293      	cmp	r3, r2
 8011740:	dd47      	ble.n	80117d2 <_printf_float+0x1ae>
 8011742:	f1aa 0a02 	sub.w	sl, sl, #2
 8011746:	fa5f fa8a 	uxtb.w	sl, sl
 801174a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801174e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011750:	d824      	bhi.n	801179c <_printf_float+0x178>
 8011752:	3901      	subs	r1, #1
 8011754:	4652      	mov	r2, sl
 8011756:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801175a:	9109      	str	r1, [sp, #36]	; 0x24
 801175c:	f7ff ff2f 	bl	80115be <__exponent>
 8011760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011762:	1813      	adds	r3, r2, r0
 8011764:	2a01      	cmp	r2, #1
 8011766:	4681      	mov	r9, r0
 8011768:	6123      	str	r3, [r4, #16]
 801176a:	dc02      	bgt.n	8011772 <_printf_float+0x14e>
 801176c:	6822      	ldr	r2, [r4, #0]
 801176e:	07d1      	lsls	r1, r2, #31
 8011770:	d501      	bpl.n	8011776 <_printf_float+0x152>
 8011772:	3301      	adds	r3, #1
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0a5      	beq.n	80116ca <_printf_float+0xa6>
 801177e:	232d      	movs	r3, #45	; 0x2d
 8011780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011784:	e7a1      	b.n	80116ca <_printf_float+0xa6>
 8011786:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801178a:	f000 8177 	beq.w	8011a7c <_printf_float+0x458>
 801178e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011792:	d1bb      	bne.n	801170c <_printf_float+0xe8>
 8011794:	2900      	cmp	r1, #0
 8011796:	d1b9      	bne.n	801170c <_printf_float+0xe8>
 8011798:	2301      	movs	r3, #1
 801179a:	e7b6      	b.n	801170a <_printf_float+0xe6>
 801179c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80117a0:	d119      	bne.n	80117d6 <_printf_float+0x1b2>
 80117a2:	2900      	cmp	r1, #0
 80117a4:	6863      	ldr	r3, [r4, #4]
 80117a6:	dd0c      	ble.n	80117c2 <_printf_float+0x19e>
 80117a8:	6121      	str	r1, [r4, #16]
 80117aa:	b913      	cbnz	r3, 80117b2 <_printf_float+0x18e>
 80117ac:	6822      	ldr	r2, [r4, #0]
 80117ae:	07d2      	lsls	r2, r2, #31
 80117b0:	d502      	bpl.n	80117b8 <_printf_float+0x194>
 80117b2:	3301      	adds	r3, #1
 80117b4:	440b      	add	r3, r1
 80117b6:	6123      	str	r3, [r4, #16]
 80117b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80117bc:	f04f 0900 	mov.w	r9, #0
 80117c0:	e7d9      	b.n	8011776 <_printf_float+0x152>
 80117c2:	b913      	cbnz	r3, 80117ca <_printf_float+0x1a6>
 80117c4:	6822      	ldr	r2, [r4, #0]
 80117c6:	07d0      	lsls	r0, r2, #31
 80117c8:	d501      	bpl.n	80117ce <_printf_float+0x1aa>
 80117ca:	3302      	adds	r3, #2
 80117cc:	e7f3      	b.n	80117b6 <_printf_float+0x192>
 80117ce:	2301      	movs	r3, #1
 80117d0:	e7f1      	b.n	80117b6 <_printf_float+0x192>
 80117d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80117d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80117da:	4293      	cmp	r3, r2
 80117dc:	db05      	blt.n	80117ea <_printf_float+0x1c6>
 80117de:	6822      	ldr	r2, [r4, #0]
 80117e0:	6123      	str	r3, [r4, #16]
 80117e2:	07d1      	lsls	r1, r2, #31
 80117e4:	d5e8      	bpl.n	80117b8 <_printf_float+0x194>
 80117e6:	3301      	adds	r3, #1
 80117e8:	e7e5      	b.n	80117b6 <_printf_float+0x192>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfd4      	ite	le
 80117ee:	f1c3 0302 	rsble	r3, r3, #2
 80117f2:	2301      	movgt	r3, #1
 80117f4:	4413      	add	r3, r2
 80117f6:	e7de      	b.n	80117b6 <_printf_float+0x192>
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	055a      	lsls	r2, r3, #21
 80117fc:	d407      	bmi.n	801180e <_printf_float+0x1ea>
 80117fe:	6923      	ldr	r3, [r4, #16]
 8011800:	4642      	mov	r2, r8
 8011802:	4631      	mov	r1, r6
 8011804:	4628      	mov	r0, r5
 8011806:	47b8      	blx	r7
 8011808:	3001      	adds	r0, #1
 801180a:	d12b      	bne.n	8011864 <_printf_float+0x240>
 801180c:	e767      	b.n	80116de <_printf_float+0xba>
 801180e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011812:	f240 80dc 	bls.w	80119ce <_printf_float+0x3aa>
 8011816:	2200      	movs	r2, #0
 8011818:	2300      	movs	r3, #0
 801181a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801181e:	f7ef f97b 	bl	8000b18 <__aeabi_dcmpeq>
 8011822:	2800      	cmp	r0, #0
 8011824:	d033      	beq.n	801188e <_printf_float+0x26a>
 8011826:	2301      	movs	r3, #1
 8011828:	4a41      	ldr	r2, [pc, #260]	; (8011930 <_printf_float+0x30c>)
 801182a:	4631      	mov	r1, r6
 801182c:	4628      	mov	r0, r5
 801182e:	47b8      	blx	r7
 8011830:	3001      	adds	r0, #1
 8011832:	f43f af54 	beq.w	80116de <_printf_float+0xba>
 8011836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801183a:	429a      	cmp	r2, r3
 801183c:	db02      	blt.n	8011844 <_printf_float+0x220>
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	07d8      	lsls	r0, r3, #31
 8011842:	d50f      	bpl.n	8011864 <_printf_float+0x240>
 8011844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011848:	4631      	mov	r1, r6
 801184a:	4628      	mov	r0, r5
 801184c:	47b8      	blx	r7
 801184e:	3001      	adds	r0, #1
 8011850:	f43f af45 	beq.w	80116de <_printf_float+0xba>
 8011854:	f04f 0800 	mov.w	r8, #0
 8011858:	f104 091a 	add.w	r9, r4, #26
 801185c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801185e:	3b01      	subs	r3, #1
 8011860:	4543      	cmp	r3, r8
 8011862:	dc09      	bgt.n	8011878 <_printf_float+0x254>
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	079b      	lsls	r3, r3, #30
 8011868:	f100 8103 	bmi.w	8011a72 <_printf_float+0x44e>
 801186c:	68e0      	ldr	r0, [r4, #12]
 801186e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011870:	4298      	cmp	r0, r3
 8011872:	bfb8      	it	lt
 8011874:	4618      	movlt	r0, r3
 8011876:	e734      	b.n	80116e2 <_printf_float+0xbe>
 8011878:	2301      	movs	r3, #1
 801187a:	464a      	mov	r2, r9
 801187c:	4631      	mov	r1, r6
 801187e:	4628      	mov	r0, r5
 8011880:	47b8      	blx	r7
 8011882:	3001      	adds	r0, #1
 8011884:	f43f af2b 	beq.w	80116de <_printf_float+0xba>
 8011888:	f108 0801 	add.w	r8, r8, #1
 801188c:	e7e6      	b.n	801185c <_printf_float+0x238>
 801188e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011890:	2b00      	cmp	r3, #0
 8011892:	dc2b      	bgt.n	80118ec <_printf_float+0x2c8>
 8011894:	2301      	movs	r3, #1
 8011896:	4a26      	ldr	r2, [pc, #152]	; (8011930 <_printf_float+0x30c>)
 8011898:	4631      	mov	r1, r6
 801189a:	4628      	mov	r0, r5
 801189c:	47b8      	blx	r7
 801189e:	3001      	adds	r0, #1
 80118a0:	f43f af1d 	beq.w	80116de <_printf_float+0xba>
 80118a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a6:	b923      	cbnz	r3, 80118b2 <_printf_float+0x28e>
 80118a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118aa:	b913      	cbnz	r3, 80118b2 <_printf_float+0x28e>
 80118ac:	6823      	ldr	r3, [r4, #0]
 80118ae:	07d9      	lsls	r1, r3, #31
 80118b0:	d5d8      	bpl.n	8011864 <_printf_float+0x240>
 80118b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118b6:	4631      	mov	r1, r6
 80118b8:	4628      	mov	r0, r5
 80118ba:	47b8      	blx	r7
 80118bc:	3001      	adds	r0, #1
 80118be:	f43f af0e 	beq.w	80116de <_printf_float+0xba>
 80118c2:	f04f 0900 	mov.w	r9, #0
 80118c6:	f104 0a1a 	add.w	sl, r4, #26
 80118ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118cc:	425b      	negs	r3, r3
 80118ce:	454b      	cmp	r3, r9
 80118d0:	dc01      	bgt.n	80118d6 <_printf_float+0x2b2>
 80118d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118d4:	e794      	b.n	8011800 <_printf_float+0x1dc>
 80118d6:	2301      	movs	r3, #1
 80118d8:	4652      	mov	r2, sl
 80118da:	4631      	mov	r1, r6
 80118dc:	4628      	mov	r0, r5
 80118de:	47b8      	blx	r7
 80118e0:	3001      	adds	r0, #1
 80118e2:	f43f aefc 	beq.w	80116de <_printf_float+0xba>
 80118e6:	f109 0901 	add.w	r9, r9, #1
 80118ea:	e7ee      	b.n	80118ca <_printf_float+0x2a6>
 80118ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118f0:	429a      	cmp	r2, r3
 80118f2:	bfa8      	it	ge
 80118f4:	461a      	movge	r2, r3
 80118f6:	2a00      	cmp	r2, #0
 80118f8:	4691      	mov	r9, r2
 80118fa:	dd07      	ble.n	801190c <_printf_float+0x2e8>
 80118fc:	4613      	mov	r3, r2
 80118fe:	4631      	mov	r1, r6
 8011900:	4642      	mov	r2, r8
 8011902:	4628      	mov	r0, r5
 8011904:	47b8      	blx	r7
 8011906:	3001      	adds	r0, #1
 8011908:	f43f aee9 	beq.w	80116de <_printf_float+0xba>
 801190c:	f104 031a 	add.w	r3, r4, #26
 8011910:	f04f 0b00 	mov.w	fp, #0
 8011914:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011918:	9306      	str	r3, [sp, #24]
 801191a:	e015      	b.n	8011948 <_printf_float+0x324>
 801191c:	7fefffff 	.word	0x7fefffff
 8011920:	08016790 	.word	0x08016790
 8011924:	0801678c 	.word	0x0801678c
 8011928:	08016798 	.word	0x08016798
 801192c:	08016794 	.word	0x08016794
 8011930:	08016a4c 	.word	0x08016a4c
 8011934:	2301      	movs	r3, #1
 8011936:	9a06      	ldr	r2, [sp, #24]
 8011938:	4631      	mov	r1, r6
 801193a:	4628      	mov	r0, r5
 801193c:	47b8      	blx	r7
 801193e:	3001      	adds	r0, #1
 8011940:	f43f aecd 	beq.w	80116de <_printf_float+0xba>
 8011944:	f10b 0b01 	add.w	fp, fp, #1
 8011948:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801194c:	ebaa 0309 	sub.w	r3, sl, r9
 8011950:	455b      	cmp	r3, fp
 8011952:	dcef      	bgt.n	8011934 <_printf_float+0x310>
 8011954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011958:	429a      	cmp	r2, r3
 801195a:	44d0      	add	r8, sl
 801195c:	db15      	blt.n	801198a <_printf_float+0x366>
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	07da      	lsls	r2, r3, #31
 8011962:	d412      	bmi.n	801198a <_printf_float+0x366>
 8011964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011968:	eba3 020a 	sub.w	r2, r3, sl
 801196c:	eba3 0a01 	sub.w	sl, r3, r1
 8011970:	4592      	cmp	sl, r2
 8011972:	bfa8      	it	ge
 8011974:	4692      	movge	sl, r2
 8011976:	f1ba 0f00 	cmp.w	sl, #0
 801197a:	dc0e      	bgt.n	801199a <_printf_float+0x376>
 801197c:	f04f 0800 	mov.w	r8, #0
 8011980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011984:	f104 091a 	add.w	r9, r4, #26
 8011988:	e019      	b.n	80119be <_printf_float+0x39a>
 801198a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801198e:	4631      	mov	r1, r6
 8011990:	4628      	mov	r0, r5
 8011992:	47b8      	blx	r7
 8011994:	3001      	adds	r0, #1
 8011996:	d1e5      	bne.n	8011964 <_printf_float+0x340>
 8011998:	e6a1      	b.n	80116de <_printf_float+0xba>
 801199a:	4653      	mov	r3, sl
 801199c:	4642      	mov	r2, r8
 801199e:	4631      	mov	r1, r6
 80119a0:	4628      	mov	r0, r5
 80119a2:	47b8      	blx	r7
 80119a4:	3001      	adds	r0, #1
 80119a6:	d1e9      	bne.n	801197c <_printf_float+0x358>
 80119a8:	e699      	b.n	80116de <_printf_float+0xba>
 80119aa:	2301      	movs	r3, #1
 80119ac:	464a      	mov	r2, r9
 80119ae:	4631      	mov	r1, r6
 80119b0:	4628      	mov	r0, r5
 80119b2:	47b8      	blx	r7
 80119b4:	3001      	adds	r0, #1
 80119b6:	f43f ae92 	beq.w	80116de <_printf_float+0xba>
 80119ba:	f108 0801 	add.w	r8, r8, #1
 80119be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	eba3 030a 	sub.w	r3, r3, sl
 80119c8:	4543      	cmp	r3, r8
 80119ca:	dcee      	bgt.n	80119aa <_printf_float+0x386>
 80119cc:	e74a      	b.n	8011864 <_printf_float+0x240>
 80119ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119d0:	2a01      	cmp	r2, #1
 80119d2:	dc01      	bgt.n	80119d8 <_printf_float+0x3b4>
 80119d4:	07db      	lsls	r3, r3, #31
 80119d6:	d53a      	bpl.n	8011a4e <_printf_float+0x42a>
 80119d8:	2301      	movs	r3, #1
 80119da:	4642      	mov	r2, r8
 80119dc:	4631      	mov	r1, r6
 80119de:	4628      	mov	r0, r5
 80119e0:	47b8      	blx	r7
 80119e2:	3001      	adds	r0, #1
 80119e4:	f43f ae7b 	beq.w	80116de <_printf_float+0xba>
 80119e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119ec:	4631      	mov	r1, r6
 80119ee:	4628      	mov	r0, r5
 80119f0:	47b8      	blx	r7
 80119f2:	3001      	adds	r0, #1
 80119f4:	f108 0801 	add.w	r8, r8, #1
 80119f8:	f43f ae71 	beq.w	80116de <_printf_float+0xba>
 80119fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119fe:	2200      	movs	r2, #0
 8011a00:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f7ef f885 	bl	8000b18 <__aeabi_dcmpeq>
 8011a0e:	b9c8      	cbnz	r0, 8011a44 <_printf_float+0x420>
 8011a10:	4653      	mov	r3, sl
 8011a12:	4642      	mov	r2, r8
 8011a14:	4631      	mov	r1, r6
 8011a16:	4628      	mov	r0, r5
 8011a18:	47b8      	blx	r7
 8011a1a:	3001      	adds	r0, #1
 8011a1c:	d10e      	bne.n	8011a3c <_printf_float+0x418>
 8011a1e:	e65e      	b.n	80116de <_printf_float+0xba>
 8011a20:	2301      	movs	r3, #1
 8011a22:	4652      	mov	r2, sl
 8011a24:	4631      	mov	r1, r6
 8011a26:	4628      	mov	r0, r5
 8011a28:	47b8      	blx	r7
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	f43f ae57 	beq.w	80116de <_printf_float+0xba>
 8011a30:	f108 0801 	add.w	r8, r8, #1
 8011a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a36:	3b01      	subs	r3, #1
 8011a38:	4543      	cmp	r3, r8
 8011a3a:	dcf1      	bgt.n	8011a20 <_printf_float+0x3fc>
 8011a3c:	464b      	mov	r3, r9
 8011a3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a42:	e6de      	b.n	8011802 <_printf_float+0x1de>
 8011a44:	f04f 0800 	mov.w	r8, #0
 8011a48:	f104 0a1a 	add.w	sl, r4, #26
 8011a4c:	e7f2      	b.n	8011a34 <_printf_float+0x410>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e7df      	b.n	8011a12 <_printf_float+0x3ee>
 8011a52:	2301      	movs	r3, #1
 8011a54:	464a      	mov	r2, r9
 8011a56:	4631      	mov	r1, r6
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b8      	blx	r7
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	f43f ae3e 	beq.w	80116de <_printf_float+0xba>
 8011a62:	f108 0801 	add.w	r8, r8, #1
 8011a66:	68e3      	ldr	r3, [r4, #12]
 8011a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a6a:	1a9b      	subs	r3, r3, r2
 8011a6c:	4543      	cmp	r3, r8
 8011a6e:	dcf0      	bgt.n	8011a52 <_printf_float+0x42e>
 8011a70:	e6fc      	b.n	801186c <_printf_float+0x248>
 8011a72:	f04f 0800 	mov.w	r8, #0
 8011a76:	f104 0919 	add.w	r9, r4, #25
 8011a7a:	e7f4      	b.n	8011a66 <_printf_float+0x442>
 8011a7c:	2900      	cmp	r1, #0
 8011a7e:	f43f ae8b 	beq.w	8011798 <_printf_float+0x174>
 8011a82:	2300      	movs	r3, #0
 8011a84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011a88:	ab09      	add	r3, sp, #36	; 0x24
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	ec49 8b10 	vmov	d0, r8, r9
 8011a90:	6022      	str	r2, [r4, #0]
 8011a92:	f8cd a004 	str.w	sl, [sp, #4]
 8011a96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f7ff fd2e 	bl	80114fc <__cvt>
 8011aa0:	4680      	mov	r8, r0
 8011aa2:	e648      	b.n	8011736 <_printf_float+0x112>

08011aa4 <_printf_common>:
 8011aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa8:	4691      	mov	r9, r2
 8011aaa:	461f      	mov	r7, r3
 8011aac:	688a      	ldr	r2, [r1, #8]
 8011aae:	690b      	ldr	r3, [r1, #16]
 8011ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	bfb8      	it	lt
 8011ab8:	4613      	movlt	r3, r2
 8011aba:	f8c9 3000 	str.w	r3, [r9]
 8011abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	b112      	cbz	r2, 8011ace <_printf_common+0x2a>
 8011ac8:	3301      	adds	r3, #1
 8011aca:	f8c9 3000 	str.w	r3, [r9]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	0699      	lsls	r1, r3, #26
 8011ad2:	bf42      	ittt	mi
 8011ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ad8:	3302      	addmi	r3, #2
 8011ada:	f8c9 3000 	strmi.w	r3, [r9]
 8011ade:	6825      	ldr	r5, [r4, #0]
 8011ae0:	f015 0506 	ands.w	r5, r5, #6
 8011ae4:	d107      	bne.n	8011af6 <_printf_common+0x52>
 8011ae6:	f104 0a19 	add.w	sl, r4, #25
 8011aea:	68e3      	ldr	r3, [r4, #12]
 8011aec:	f8d9 2000 	ldr.w	r2, [r9]
 8011af0:	1a9b      	subs	r3, r3, r2
 8011af2:	42ab      	cmp	r3, r5
 8011af4:	dc28      	bgt.n	8011b48 <_printf_common+0xa4>
 8011af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	3300      	adds	r3, #0
 8011afe:	bf18      	it	ne
 8011b00:	2301      	movne	r3, #1
 8011b02:	0692      	lsls	r2, r2, #26
 8011b04:	d42d      	bmi.n	8011b62 <_printf_common+0xbe>
 8011b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b0a:	4639      	mov	r1, r7
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	47c0      	blx	r8
 8011b10:	3001      	adds	r0, #1
 8011b12:	d020      	beq.n	8011b56 <_printf_common+0xb2>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	68e5      	ldr	r5, [r4, #12]
 8011b18:	f8d9 2000 	ldr.w	r2, [r9]
 8011b1c:	f003 0306 	and.w	r3, r3, #6
 8011b20:	2b04      	cmp	r3, #4
 8011b22:	bf08      	it	eq
 8011b24:	1aad      	subeq	r5, r5, r2
 8011b26:	68a3      	ldr	r3, [r4, #8]
 8011b28:	6922      	ldr	r2, [r4, #16]
 8011b2a:	bf0c      	ite	eq
 8011b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b30:	2500      	movne	r5, #0
 8011b32:	4293      	cmp	r3, r2
 8011b34:	bfc4      	itt	gt
 8011b36:	1a9b      	subgt	r3, r3, r2
 8011b38:	18ed      	addgt	r5, r5, r3
 8011b3a:	f04f 0900 	mov.w	r9, #0
 8011b3e:	341a      	adds	r4, #26
 8011b40:	454d      	cmp	r5, r9
 8011b42:	d11a      	bne.n	8011b7a <_printf_common+0xd6>
 8011b44:	2000      	movs	r0, #0
 8011b46:	e008      	b.n	8011b5a <_printf_common+0xb6>
 8011b48:	2301      	movs	r3, #1
 8011b4a:	4652      	mov	r2, sl
 8011b4c:	4639      	mov	r1, r7
 8011b4e:	4630      	mov	r0, r6
 8011b50:	47c0      	blx	r8
 8011b52:	3001      	adds	r0, #1
 8011b54:	d103      	bne.n	8011b5e <_printf_common+0xba>
 8011b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b5e:	3501      	adds	r5, #1
 8011b60:	e7c3      	b.n	8011aea <_printf_common+0x46>
 8011b62:	18e1      	adds	r1, r4, r3
 8011b64:	1c5a      	adds	r2, r3, #1
 8011b66:	2030      	movs	r0, #48	; 0x30
 8011b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b6c:	4422      	add	r2, r4
 8011b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b76:	3302      	adds	r3, #2
 8011b78:	e7c5      	b.n	8011b06 <_printf_common+0x62>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	4639      	mov	r1, r7
 8011b80:	4630      	mov	r0, r6
 8011b82:	47c0      	blx	r8
 8011b84:	3001      	adds	r0, #1
 8011b86:	d0e6      	beq.n	8011b56 <_printf_common+0xb2>
 8011b88:	f109 0901 	add.w	r9, r9, #1
 8011b8c:	e7d8      	b.n	8011b40 <_printf_common+0x9c>
	...

08011b90 <_printf_i>:
 8011b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b98:	460c      	mov	r4, r1
 8011b9a:	7e09      	ldrb	r1, [r1, #24]
 8011b9c:	b085      	sub	sp, #20
 8011b9e:	296e      	cmp	r1, #110	; 0x6e
 8011ba0:	4617      	mov	r7, r2
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	4698      	mov	r8, r3
 8011ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ba8:	f000 80b3 	beq.w	8011d12 <_printf_i+0x182>
 8011bac:	d822      	bhi.n	8011bf4 <_printf_i+0x64>
 8011bae:	2963      	cmp	r1, #99	; 0x63
 8011bb0:	d036      	beq.n	8011c20 <_printf_i+0x90>
 8011bb2:	d80a      	bhi.n	8011bca <_printf_i+0x3a>
 8011bb4:	2900      	cmp	r1, #0
 8011bb6:	f000 80b9 	beq.w	8011d2c <_printf_i+0x19c>
 8011bba:	2958      	cmp	r1, #88	; 0x58
 8011bbc:	f000 8083 	beq.w	8011cc6 <_printf_i+0x136>
 8011bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011bc8:	e032      	b.n	8011c30 <_printf_i+0xa0>
 8011bca:	2964      	cmp	r1, #100	; 0x64
 8011bcc:	d001      	beq.n	8011bd2 <_printf_i+0x42>
 8011bce:	2969      	cmp	r1, #105	; 0x69
 8011bd0:	d1f6      	bne.n	8011bc0 <_printf_i+0x30>
 8011bd2:	6820      	ldr	r0, [r4, #0]
 8011bd4:	6813      	ldr	r3, [r2, #0]
 8011bd6:	0605      	lsls	r5, r0, #24
 8011bd8:	f103 0104 	add.w	r1, r3, #4
 8011bdc:	d52a      	bpl.n	8011c34 <_printf_i+0xa4>
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6011      	str	r1, [r2, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	da03      	bge.n	8011bee <_printf_i+0x5e>
 8011be6:	222d      	movs	r2, #45	; 0x2d
 8011be8:	425b      	negs	r3, r3
 8011bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bee:	486f      	ldr	r0, [pc, #444]	; (8011dac <_printf_i+0x21c>)
 8011bf0:	220a      	movs	r2, #10
 8011bf2:	e039      	b.n	8011c68 <_printf_i+0xd8>
 8011bf4:	2973      	cmp	r1, #115	; 0x73
 8011bf6:	f000 809d 	beq.w	8011d34 <_printf_i+0x1a4>
 8011bfa:	d808      	bhi.n	8011c0e <_printf_i+0x7e>
 8011bfc:	296f      	cmp	r1, #111	; 0x6f
 8011bfe:	d020      	beq.n	8011c42 <_printf_i+0xb2>
 8011c00:	2970      	cmp	r1, #112	; 0x70
 8011c02:	d1dd      	bne.n	8011bc0 <_printf_i+0x30>
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	f043 0320 	orr.w	r3, r3, #32
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	e003      	b.n	8011c16 <_printf_i+0x86>
 8011c0e:	2975      	cmp	r1, #117	; 0x75
 8011c10:	d017      	beq.n	8011c42 <_printf_i+0xb2>
 8011c12:	2978      	cmp	r1, #120	; 0x78
 8011c14:	d1d4      	bne.n	8011bc0 <_printf_i+0x30>
 8011c16:	2378      	movs	r3, #120	; 0x78
 8011c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c1c:	4864      	ldr	r0, [pc, #400]	; (8011db0 <_printf_i+0x220>)
 8011c1e:	e055      	b.n	8011ccc <_printf_i+0x13c>
 8011c20:	6813      	ldr	r3, [r2, #0]
 8011c22:	1d19      	adds	r1, r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	6011      	str	r1, [r2, #0]
 8011c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c30:	2301      	movs	r3, #1
 8011c32:	e08c      	b.n	8011d4e <_printf_i+0x1be>
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	6011      	str	r1, [r2, #0]
 8011c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c3c:	bf18      	it	ne
 8011c3e:	b21b      	sxthne	r3, r3
 8011c40:	e7cf      	b.n	8011be2 <_printf_i+0x52>
 8011c42:	6813      	ldr	r3, [r2, #0]
 8011c44:	6825      	ldr	r5, [r4, #0]
 8011c46:	1d18      	adds	r0, r3, #4
 8011c48:	6010      	str	r0, [r2, #0]
 8011c4a:	0628      	lsls	r0, r5, #24
 8011c4c:	d501      	bpl.n	8011c52 <_printf_i+0xc2>
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	e002      	b.n	8011c58 <_printf_i+0xc8>
 8011c52:	0668      	lsls	r0, r5, #25
 8011c54:	d5fb      	bpl.n	8011c4e <_printf_i+0xbe>
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	4854      	ldr	r0, [pc, #336]	; (8011dac <_printf_i+0x21c>)
 8011c5a:	296f      	cmp	r1, #111	; 0x6f
 8011c5c:	bf14      	ite	ne
 8011c5e:	220a      	movne	r2, #10
 8011c60:	2208      	moveq	r2, #8
 8011c62:	2100      	movs	r1, #0
 8011c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c68:	6865      	ldr	r5, [r4, #4]
 8011c6a:	60a5      	str	r5, [r4, #8]
 8011c6c:	2d00      	cmp	r5, #0
 8011c6e:	f2c0 8095 	blt.w	8011d9c <_printf_i+0x20c>
 8011c72:	6821      	ldr	r1, [r4, #0]
 8011c74:	f021 0104 	bic.w	r1, r1, #4
 8011c78:	6021      	str	r1, [r4, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d13d      	bne.n	8011cfa <_printf_i+0x16a>
 8011c7e:	2d00      	cmp	r5, #0
 8011c80:	f040 808e 	bne.w	8011da0 <_printf_i+0x210>
 8011c84:	4665      	mov	r5, ip
 8011c86:	2a08      	cmp	r2, #8
 8011c88:	d10b      	bne.n	8011ca2 <_printf_i+0x112>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	07db      	lsls	r3, r3, #31
 8011c8e:	d508      	bpl.n	8011ca2 <_printf_i+0x112>
 8011c90:	6923      	ldr	r3, [r4, #16]
 8011c92:	6862      	ldr	r2, [r4, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	bfde      	ittt	le
 8011c98:	2330      	movle	r3, #48	; 0x30
 8011c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ca2:	ebac 0305 	sub.w	r3, ip, r5
 8011ca6:	6123      	str	r3, [r4, #16]
 8011ca8:	f8cd 8000 	str.w	r8, [sp]
 8011cac:	463b      	mov	r3, r7
 8011cae:	aa03      	add	r2, sp, #12
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f7ff fef6 	bl	8011aa4 <_printf_common>
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d14d      	bne.n	8011d58 <_printf_i+0x1c8>
 8011cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cc0:	b005      	add	sp, #20
 8011cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cc6:	4839      	ldr	r0, [pc, #228]	; (8011dac <_printf_i+0x21c>)
 8011cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ccc:	6813      	ldr	r3, [r2, #0]
 8011cce:	6821      	ldr	r1, [r4, #0]
 8011cd0:	1d1d      	adds	r5, r3, #4
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6015      	str	r5, [r2, #0]
 8011cd6:	060a      	lsls	r2, r1, #24
 8011cd8:	d50b      	bpl.n	8011cf2 <_printf_i+0x162>
 8011cda:	07ca      	lsls	r2, r1, #31
 8011cdc:	bf44      	itt	mi
 8011cde:	f041 0120 	orrmi.w	r1, r1, #32
 8011ce2:	6021      	strmi	r1, [r4, #0]
 8011ce4:	b91b      	cbnz	r3, 8011cee <_printf_i+0x15e>
 8011ce6:	6822      	ldr	r2, [r4, #0]
 8011ce8:	f022 0220 	bic.w	r2, r2, #32
 8011cec:	6022      	str	r2, [r4, #0]
 8011cee:	2210      	movs	r2, #16
 8011cf0:	e7b7      	b.n	8011c62 <_printf_i+0xd2>
 8011cf2:	064d      	lsls	r5, r1, #25
 8011cf4:	bf48      	it	mi
 8011cf6:	b29b      	uxthmi	r3, r3
 8011cf8:	e7ef      	b.n	8011cda <_printf_i+0x14a>
 8011cfa:	4665      	mov	r5, ip
 8011cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d00:	fb02 3311 	mls	r3, r2, r1, r3
 8011d04:	5cc3      	ldrb	r3, [r0, r3]
 8011d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	2900      	cmp	r1, #0
 8011d0e:	d1f5      	bne.n	8011cfc <_printf_i+0x16c>
 8011d10:	e7b9      	b.n	8011c86 <_printf_i+0xf6>
 8011d12:	6813      	ldr	r3, [r2, #0]
 8011d14:	6825      	ldr	r5, [r4, #0]
 8011d16:	6961      	ldr	r1, [r4, #20]
 8011d18:	1d18      	adds	r0, r3, #4
 8011d1a:	6010      	str	r0, [r2, #0]
 8011d1c:	0628      	lsls	r0, r5, #24
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	d501      	bpl.n	8011d26 <_printf_i+0x196>
 8011d22:	6019      	str	r1, [r3, #0]
 8011d24:	e002      	b.n	8011d2c <_printf_i+0x19c>
 8011d26:	066a      	lsls	r2, r5, #25
 8011d28:	d5fb      	bpl.n	8011d22 <_printf_i+0x192>
 8011d2a:	8019      	strh	r1, [r3, #0]
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	4665      	mov	r5, ip
 8011d32:	e7b9      	b.n	8011ca8 <_printf_i+0x118>
 8011d34:	6813      	ldr	r3, [r2, #0]
 8011d36:	1d19      	adds	r1, r3, #4
 8011d38:	6011      	str	r1, [r2, #0]
 8011d3a:	681d      	ldr	r5, [r3, #0]
 8011d3c:	6862      	ldr	r2, [r4, #4]
 8011d3e:	2100      	movs	r1, #0
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ee fa75 	bl	8000230 <memchr>
 8011d46:	b108      	cbz	r0, 8011d4c <_printf_i+0x1bc>
 8011d48:	1b40      	subs	r0, r0, r5
 8011d4a:	6060      	str	r0, [r4, #4]
 8011d4c:	6863      	ldr	r3, [r4, #4]
 8011d4e:	6123      	str	r3, [r4, #16]
 8011d50:	2300      	movs	r3, #0
 8011d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d56:	e7a7      	b.n	8011ca8 <_printf_i+0x118>
 8011d58:	6923      	ldr	r3, [r4, #16]
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4630      	mov	r0, r6
 8011d60:	47c0      	blx	r8
 8011d62:	3001      	adds	r0, #1
 8011d64:	d0aa      	beq.n	8011cbc <_printf_i+0x12c>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	079b      	lsls	r3, r3, #30
 8011d6a:	d413      	bmi.n	8011d94 <_printf_i+0x204>
 8011d6c:	68e0      	ldr	r0, [r4, #12]
 8011d6e:	9b03      	ldr	r3, [sp, #12]
 8011d70:	4298      	cmp	r0, r3
 8011d72:	bfb8      	it	lt
 8011d74:	4618      	movlt	r0, r3
 8011d76:	e7a3      	b.n	8011cc0 <_printf_i+0x130>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	464a      	mov	r2, r9
 8011d7c:	4639      	mov	r1, r7
 8011d7e:	4630      	mov	r0, r6
 8011d80:	47c0      	blx	r8
 8011d82:	3001      	adds	r0, #1
 8011d84:	d09a      	beq.n	8011cbc <_printf_i+0x12c>
 8011d86:	3501      	adds	r5, #1
 8011d88:	68e3      	ldr	r3, [r4, #12]
 8011d8a:	9a03      	ldr	r2, [sp, #12]
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	42ab      	cmp	r3, r5
 8011d90:	dcf2      	bgt.n	8011d78 <_printf_i+0x1e8>
 8011d92:	e7eb      	b.n	8011d6c <_printf_i+0x1dc>
 8011d94:	2500      	movs	r5, #0
 8011d96:	f104 0919 	add.w	r9, r4, #25
 8011d9a:	e7f5      	b.n	8011d88 <_printf_i+0x1f8>
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1ac      	bne.n	8011cfa <_printf_i+0x16a>
 8011da0:	7803      	ldrb	r3, [r0, #0]
 8011da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011daa:	e76c      	b.n	8011c86 <_printf_i+0xf6>
 8011dac:	0801679c 	.word	0x0801679c
 8011db0:	080167ad 	.word	0x080167ad

08011db4 <iprintf>:
 8011db4:	b40f      	push	{r0, r1, r2, r3}
 8011db6:	4b0a      	ldr	r3, [pc, #40]	; (8011de0 <iprintf+0x2c>)
 8011db8:	b513      	push	{r0, r1, r4, lr}
 8011dba:	681c      	ldr	r4, [r3, #0]
 8011dbc:	b124      	cbz	r4, 8011dc8 <iprintf+0x14>
 8011dbe:	69a3      	ldr	r3, [r4, #24]
 8011dc0:	b913      	cbnz	r3, 8011dc8 <iprintf+0x14>
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f001 f8ac 	bl	8012f20 <__sinit>
 8011dc8:	ab05      	add	r3, sp, #20
 8011dca:	9a04      	ldr	r2, [sp, #16]
 8011dcc:	68a1      	ldr	r1, [r4, #8]
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f001 fec1 	bl	8013b58 <_vfiprintf_r>
 8011dd6:	b002      	add	sp, #8
 8011dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ddc:	b004      	add	sp, #16
 8011dde:	4770      	bx	lr
 8011de0:	20001c38 	.word	0x20001c38

08011de4 <_puts_r>:
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	460e      	mov	r6, r1
 8011de8:	4605      	mov	r5, r0
 8011dea:	b118      	cbz	r0, 8011df4 <_puts_r+0x10>
 8011dec:	6983      	ldr	r3, [r0, #24]
 8011dee:	b90b      	cbnz	r3, 8011df4 <_puts_r+0x10>
 8011df0:	f001 f896 	bl	8012f20 <__sinit>
 8011df4:	69ab      	ldr	r3, [r5, #24]
 8011df6:	68ac      	ldr	r4, [r5, #8]
 8011df8:	b913      	cbnz	r3, 8011e00 <_puts_r+0x1c>
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	f001 f890 	bl	8012f20 <__sinit>
 8011e00:	4b23      	ldr	r3, [pc, #140]	; (8011e90 <_puts_r+0xac>)
 8011e02:	429c      	cmp	r4, r3
 8011e04:	d117      	bne.n	8011e36 <_puts_r+0x52>
 8011e06:	686c      	ldr	r4, [r5, #4]
 8011e08:	89a3      	ldrh	r3, [r4, #12]
 8011e0a:	071b      	lsls	r3, r3, #28
 8011e0c:	d51d      	bpl.n	8011e4a <_puts_r+0x66>
 8011e0e:	6923      	ldr	r3, [r4, #16]
 8011e10:	b1db      	cbz	r3, 8011e4a <_puts_r+0x66>
 8011e12:	3e01      	subs	r6, #1
 8011e14:	68a3      	ldr	r3, [r4, #8]
 8011e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e1a:	3b01      	subs	r3, #1
 8011e1c:	60a3      	str	r3, [r4, #8]
 8011e1e:	b9e9      	cbnz	r1, 8011e5c <_puts_r+0x78>
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	da2e      	bge.n	8011e82 <_puts_r+0x9e>
 8011e24:	4622      	mov	r2, r4
 8011e26:	210a      	movs	r1, #10
 8011e28:	4628      	mov	r0, r5
 8011e2a:	f000 f883 	bl	8011f34 <__swbuf_r>
 8011e2e:	3001      	adds	r0, #1
 8011e30:	d011      	beq.n	8011e56 <_puts_r+0x72>
 8011e32:	200a      	movs	r0, #10
 8011e34:	e011      	b.n	8011e5a <_puts_r+0x76>
 8011e36:	4b17      	ldr	r3, [pc, #92]	; (8011e94 <_puts_r+0xb0>)
 8011e38:	429c      	cmp	r4, r3
 8011e3a:	d101      	bne.n	8011e40 <_puts_r+0x5c>
 8011e3c:	68ac      	ldr	r4, [r5, #8]
 8011e3e:	e7e3      	b.n	8011e08 <_puts_r+0x24>
 8011e40:	4b15      	ldr	r3, [pc, #84]	; (8011e98 <_puts_r+0xb4>)
 8011e42:	429c      	cmp	r4, r3
 8011e44:	bf08      	it	eq
 8011e46:	68ec      	ldreq	r4, [r5, #12]
 8011e48:	e7de      	b.n	8011e08 <_puts_r+0x24>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	f000 f8c3 	bl	8011fd8 <__swsetup_r>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	d0dd      	beq.n	8011e12 <_puts_r+0x2e>
 8011e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e5a:	bd70      	pop	{r4, r5, r6, pc}
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	da04      	bge.n	8011e6a <_puts_r+0x86>
 8011e60:	69a2      	ldr	r2, [r4, #24]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	dc06      	bgt.n	8011e74 <_puts_r+0x90>
 8011e66:	290a      	cmp	r1, #10
 8011e68:	d004      	beq.n	8011e74 <_puts_r+0x90>
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	1c5a      	adds	r2, r3, #1
 8011e6e:	6022      	str	r2, [r4, #0]
 8011e70:	7019      	strb	r1, [r3, #0]
 8011e72:	e7cf      	b.n	8011e14 <_puts_r+0x30>
 8011e74:	4622      	mov	r2, r4
 8011e76:	4628      	mov	r0, r5
 8011e78:	f000 f85c 	bl	8011f34 <__swbuf_r>
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	d1c9      	bne.n	8011e14 <_puts_r+0x30>
 8011e80:	e7e9      	b.n	8011e56 <_puts_r+0x72>
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	200a      	movs	r0, #10
 8011e86:	1c5a      	adds	r2, r3, #1
 8011e88:	6022      	str	r2, [r4, #0]
 8011e8a:	7018      	strb	r0, [r3, #0]
 8011e8c:	e7e5      	b.n	8011e5a <_puts_r+0x76>
 8011e8e:	bf00      	nop
 8011e90:	080167ec 	.word	0x080167ec
 8011e94:	0801680c 	.word	0x0801680c
 8011e98:	080167cc 	.word	0x080167cc

08011e9c <puts>:
 8011e9c:	4b02      	ldr	r3, [pc, #8]	; (8011ea8 <puts+0xc>)
 8011e9e:	4601      	mov	r1, r0
 8011ea0:	6818      	ldr	r0, [r3, #0]
 8011ea2:	f7ff bf9f 	b.w	8011de4 <_puts_r>
 8011ea6:	bf00      	nop
 8011ea8:	20001c38 	.word	0x20001c38

08011eac <sniprintf>:
 8011eac:	b40c      	push	{r2, r3}
 8011eae:	b530      	push	{r4, r5, lr}
 8011eb0:	4b17      	ldr	r3, [pc, #92]	; (8011f10 <sniprintf+0x64>)
 8011eb2:	1e0c      	subs	r4, r1, #0
 8011eb4:	b09d      	sub	sp, #116	; 0x74
 8011eb6:	681d      	ldr	r5, [r3, #0]
 8011eb8:	da08      	bge.n	8011ecc <sniprintf+0x20>
 8011eba:	238b      	movs	r3, #139	; 0x8b
 8011ebc:	602b      	str	r3, [r5, #0]
 8011ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ec2:	b01d      	add	sp, #116	; 0x74
 8011ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ec8:	b002      	add	sp, #8
 8011eca:	4770      	bx	lr
 8011ecc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011ed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ed4:	bf14      	ite	ne
 8011ed6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011eda:	4623      	moveq	r3, r4
 8011edc:	9304      	str	r3, [sp, #16]
 8011ede:	9307      	str	r3, [sp, #28]
 8011ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ee4:	9002      	str	r0, [sp, #8]
 8011ee6:	9006      	str	r0, [sp, #24]
 8011ee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011eec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011eee:	ab21      	add	r3, sp, #132	; 0x84
 8011ef0:	a902      	add	r1, sp, #8
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	9301      	str	r3, [sp, #4]
 8011ef6:	f001 fd0d 	bl	8013914 <_svfiprintf_r>
 8011efa:	1c43      	adds	r3, r0, #1
 8011efc:	bfbc      	itt	lt
 8011efe:	238b      	movlt	r3, #139	; 0x8b
 8011f00:	602b      	strlt	r3, [r5, #0]
 8011f02:	2c00      	cmp	r4, #0
 8011f04:	d0dd      	beq.n	8011ec2 <sniprintf+0x16>
 8011f06:	9b02      	ldr	r3, [sp, #8]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	701a      	strb	r2, [r3, #0]
 8011f0c:	e7d9      	b.n	8011ec2 <sniprintf+0x16>
 8011f0e:	bf00      	nop
 8011f10:	20001c38 	.word	0x20001c38

08011f14 <strcat>:
 8011f14:	b510      	push	{r4, lr}
 8011f16:	4603      	mov	r3, r0
 8011f18:	781a      	ldrb	r2, [r3, #0]
 8011f1a:	1c5c      	adds	r4, r3, #1
 8011f1c:	b93a      	cbnz	r2, 8011f2e <strcat+0x1a>
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f28:	2a00      	cmp	r2, #0
 8011f2a:	d1f9      	bne.n	8011f20 <strcat+0xc>
 8011f2c:	bd10      	pop	{r4, pc}
 8011f2e:	4623      	mov	r3, r4
 8011f30:	e7f2      	b.n	8011f18 <strcat+0x4>
	...

08011f34 <__swbuf_r>:
 8011f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f36:	460e      	mov	r6, r1
 8011f38:	4614      	mov	r4, r2
 8011f3a:	4605      	mov	r5, r0
 8011f3c:	b118      	cbz	r0, 8011f46 <__swbuf_r+0x12>
 8011f3e:	6983      	ldr	r3, [r0, #24]
 8011f40:	b90b      	cbnz	r3, 8011f46 <__swbuf_r+0x12>
 8011f42:	f000 ffed 	bl	8012f20 <__sinit>
 8011f46:	4b21      	ldr	r3, [pc, #132]	; (8011fcc <__swbuf_r+0x98>)
 8011f48:	429c      	cmp	r4, r3
 8011f4a:	d12a      	bne.n	8011fa2 <__swbuf_r+0x6e>
 8011f4c:	686c      	ldr	r4, [r5, #4]
 8011f4e:	69a3      	ldr	r3, [r4, #24]
 8011f50:	60a3      	str	r3, [r4, #8]
 8011f52:	89a3      	ldrh	r3, [r4, #12]
 8011f54:	071a      	lsls	r2, r3, #28
 8011f56:	d52e      	bpl.n	8011fb6 <__swbuf_r+0x82>
 8011f58:	6923      	ldr	r3, [r4, #16]
 8011f5a:	b363      	cbz	r3, 8011fb6 <__swbuf_r+0x82>
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	1ac0      	subs	r0, r0, r3
 8011f62:	6963      	ldr	r3, [r4, #20]
 8011f64:	b2f6      	uxtb	r6, r6
 8011f66:	4283      	cmp	r3, r0
 8011f68:	4637      	mov	r7, r6
 8011f6a:	dc04      	bgt.n	8011f76 <__swbuf_r+0x42>
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f000 ff6c 	bl	8012e4c <_fflush_r>
 8011f74:	bb28      	cbnz	r0, 8011fc2 <__swbuf_r+0x8e>
 8011f76:	68a3      	ldr	r3, [r4, #8]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	60a3      	str	r3, [r4, #8]
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	1c5a      	adds	r2, r3, #1
 8011f80:	6022      	str	r2, [r4, #0]
 8011f82:	701e      	strb	r6, [r3, #0]
 8011f84:	6963      	ldr	r3, [r4, #20]
 8011f86:	3001      	adds	r0, #1
 8011f88:	4283      	cmp	r3, r0
 8011f8a:	d004      	beq.n	8011f96 <__swbuf_r+0x62>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	07db      	lsls	r3, r3, #31
 8011f90:	d519      	bpl.n	8011fc6 <__swbuf_r+0x92>
 8011f92:	2e0a      	cmp	r6, #10
 8011f94:	d117      	bne.n	8011fc6 <__swbuf_r+0x92>
 8011f96:	4621      	mov	r1, r4
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f000 ff57 	bl	8012e4c <_fflush_r>
 8011f9e:	b190      	cbz	r0, 8011fc6 <__swbuf_r+0x92>
 8011fa0:	e00f      	b.n	8011fc2 <__swbuf_r+0x8e>
 8011fa2:	4b0b      	ldr	r3, [pc, #44]	; (8011fd0 <__swbuf_r+0x9c>)
 8011fa4:	429c      	cmp	r4, r3
 8011fa6:	d101      	bne.n	8011fac <__swbuf_r+0x78>
 8011fa8:	68ac      	ldr	r4, [r5, #8]
 8011faa:	e7d0      	b.n	8011f4e <__swbuf_r+0x1a>
 8011fac:	4b09      	ldr	r3, [pc, #36]	; (8011fd4 <__swbuf_r+0xa0>)
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	bf08      	it	eq
 8011fb2:	68ec      	ldreq	r4, [r5, #12]
 8011fb4:	e7cb      	b.n	8011f4e <__swbuf_r+0x1a>
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f000 f80d 	bl	8011fd8 <__swsetup_r>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0cc      	beq.n	8011f5c <__swbuf_r+0x28>
 8011fc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011fc6:	4638      	mov	r0, r7
 8011fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	080167ec 	.word	0x080167ec
 8011fd0:	0801680c 	.word	0x0801680c
 8011fd4:	080167cc 	.word	0x080167cc

08011fd8 <__swsetup_r>:
 8011fd8:	4b32      	ldr	r3, [pc, #200]	; (80120a4 <__swsetup_r+0xcc>)
 8011fda:	b570      	push	{r4, r5, r6, lr}
 8011fdc:	681d      	ldr	r5, [r3, #0]
 8011fde:	4606      	mov	r6, r0
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	b125      	cbz	r5, 8011fee <__swsetup_r+0x16>
 8011fe4:	69ab      	ldr	r3, [r5, #24]
 8011fe6:	b913      	cbnz	r3, 8011fee <__swsetup_r+0x16>
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f000 ff99 	bl	8012f20 <__sinit>
 8011fee:	4b2e      	ldr	r3, [pc, #184]	; (80120a8 <__swsetup_r+0xd0>)
 8011ff0:	429c      	cmp	r4, r3
 8011ff2:	d10f      	bne.n	8012014 <__swsetup_r+0x3c>
 8011ff4:	686c      	ldr	r4, [r5, #4]
 8011ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	0715      	lsls	r5, r2, #28
 8011ffe:	d42c      	bmi.n	801205a <__swsetup_r+0x82>
 8012000:	06d0      	lsls	r0, r2, #27
 8012002:	d411      	bmi.n	8012028 <__swsetup_r+0x50>
 8012004:	2209      	movs	r2, #9
 8012006:	6032      	str	r2, [r6, #0]
 8012008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012012:	e03e      	b.n	8012092 <__swsetup_r+0xba>
 8012014:	4b25      	ldr	r3, [pc, #148]	; (80120ac <__swsetup_r+0xd4>)
 8012016:	429c      	cmp	r4, r3
 8012018:	d101      	bne.n	801201e <__swsetup_r+0x46>
 801201a:	68ac      	ldr	r4, [r5, #8]
 801201c:	e7eb      	b.n	8011ff6 <__swsetup_r+0x1e>
 801201e:	4b24      	ldr	r3, [pc, #144]	; (80120b0 <__swsetup_r+0xd8>)
 8012020:	429c      	cmp	r4, r3
 8012022:	bf08      	it	eq
 8012024:	68ec      	ldreq	r4, [r5, #12]
 8012026:	e7e6      	b.n	8011ff6 <__swsetup_r+0x1e>
 8012028:	0751      	lsls	r1, r2, #29
 801202a:	d512      	bpl.n	8012052 <__swsetup_r+0x7a>
 801202c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801202e:	b141      	cbz	r1, 8012042 <__swsetup_r+0x6a>
 8012030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012034:	4299      	cmp	r1, r3
 8012036:	d002      	beq.n	801203e <__swsetup_r+0x66>
 8012038:	4630      	mov	r0, r6
 801203a:	f001 fb69 	bl	8013710 <_free_r>
 801203e:	2300      	movs	r3, #0
 8012040:	6363      	str	r3, [r4, #52]	; 0x34
 8012042:	89a3      	ldrh	r3, [r4, #12]
 8012044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012048:	81a3      	strh	r3, [r4, #12]
 801204a:	2300      	movs	r3, #0
 801204c:	6063      	str	r3, [r4, #4]
 801204e:	6923      	ldr	r3, [r4, #16]
 8012050:	6023      	str	r3, [r4, #0]
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	f043 0308 	orr.w	r3, r3, #8
 8012058:	81a3      	strh	r3, [r4, #12]
 801205a:	6923      	ldr	r3, [r4, #16]
 801205c:	b94b      	cbnz	r3, 8012072 <__swsetup_r+0x9a>
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012068:	d003      	beq.n	8012072 <__swsetup_r+0x9a>
 801206a:	4621      	mov	r1, r4
 801206c:	4630      	mov	r0, r6
 801206e:	f001 f813 	bl	8013098 <__smakebuf_r>
 8012072:	89a2      	ldrh	r2, [r4, #12]
 8012074:	f012 0301 	ands.w	r3, r2, #1
 8012078:	d00c      	beq.n	8012094 <__swsetup_r+0xbc>
 801207a:	2300      	movs	r3, #0
 801207c:	60a3      	str	r3, [r4, #8]
 801207e:	6963      	ldr	r3, [r4, #20]
 8012080:	425b      	negs	r3, r3
 8012082:	61a3      	str	r3, [r4, #24]
 8012084:	6923      	ldr	r3, [r4, #16]
 8012086:	b953      	cbnz	r3, 801209e <__swsetup_r+0xc6>
 8012088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801208c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012090:	d1ba      	bne.n	8012008 <__swsetup_r+0x30>
 8012092:	bd70      	pop	{r4, r5, r6, pc}
 8012094:	0792      	lsls	r2, r2, #30
 8012096:	bf58      	it	pl
 8012098:	6963      	ldrpl	r3, [r4, #20]
 801209a:	60a3      	str	r3, [r4, #8]
 801209c:	e7f2      	b.n	8012084 <__swsetup_r+0xac>
 801209e:	2000      	movs	r0, #0
 80120a0:	e7f7      	b.n	8012092 <__swsetup_r+0xba>
 80120a2:	bf00      	nop
 80120a4:	20001c38 	.word	0x20001c38
 80120a8:	080167ec 	.word	0x080167ec
 80120ac:	0801680c 	.word	0x0801680c
 80120b0:	080167cc 	.word	0x080167cc

080120b4 <quorem>:
 80120b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b8:	6903      	ldr	r3, [r0, #16]
 80120ba:	690c      	ldr	r4, [r1, #16]
 80120bc:	42a3      	cmp	r3, r4
 80120be:	4680      	mov	r8, r0
 80120c0:	f2c0 8082 	blt.w	80121c8 <quorem+0x114>
 80120c4:	3c01      	subs	r4, #1
 80120c6:	f101 0714 	add.w	r7, r1, #20
 80120ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80120ce:	f100 0614 	add.w	r6, r0, #20
 80120d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80120d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80120da:	eb06 030c 	add.w	r3, r6, ip
 80120de:	3501      	adds	r5, #1
 80120e0:	eb07 090c 	add.w	r9, r7, ip
 80120e4:	9301      	str	r3, [sp, #4]
 80120e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80120ea:	b395      	cbz	r5, 8012152 <quorem+0x9e>
 80120ec:	f04f 0a00 	mov.w	sl, #0
 80120f0:	4638      	mov	r0, r7
 80120f2:	46b6      	mov	lr, r6
 80120f4:	46d3      	mov	fp, sl
 80120f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80120fa:	b293      	uxth	r3, r2
 80120fc:	fb05 a303 	mla	r3, r5, r3, sl
 8012100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012104:	b29b      	uxth	r3, r3
 8012106:	ebab 0303 	sub.w	r3, fp, r3
 801210a:	0c12      	lsrs	r2, r2, #16
 801210c:	f8de b000 	ldr.w	fp, [lr]
 8012110:	fb05 a202 	mla	r2, r5, r2, sl
 8012114:	fa13 f38b 	uxtah	r3, r3, fp
 8012118:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801211c:	fa1f fb82 	uxth.w	fp, r2
 8012120:	f8de 2000 	ldr.w	r2, [lr]
 8012124:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801212c:	b29b      	uxth	r3, r3
 801212e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012132:	4581      	cmp	r9, r0
 8012134:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012138:	f84e 3b04 	str.w	r3, [lr], #4
 801213c:	d2db      	bcs.n	80120f6 <quorem+0x42>
 801213e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012142:	b933      	cbnz	r3, 8012152 <quorem+0x9e>
 8012144:	9b01      	ldr	r3, [sp, #4]
 8012146:	3b04      	subs	r3, #4
 8012148:	429e      	cmp	r6, r3
 801214a:	461a      	mov	r2, r3
 801214c:	d330      	bcc.n	80121b0 <quorem+0xfc>
 801214e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012152:	4640      	mov	r0, r8
 8012154:	f001 fa08 	bl	8013568 <__mcmp>
 8012158:	2800      	cmp	r0, #0
 801215a:	db25      	blt.n	80121a8 <quorem+0xf4>
 801215c:	3501      	adds	r5, #1
 801215e:	4630      	mov	r0, r6
 8012160:	f04f 0c00 	mov.w	ip, #0
 8012164:	f857 2b04 	ldr.w	r2, [r7], #4
 8012168:	f8d0 e000 	ldr.w	lr, [r0]
 801216c:	b293      	uxth	r3, r2
 801216e:	ebac 0303 	sub.w	r3, ip, r3
 8012172:	0c12      	lsrs	r2, r2, #16
 8012174:	fa13 f38e 	uxtah	r3, r3, lr
 8012178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801217c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012180:	b29b      	uxth	r3, r3
 8012182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012186:	45b9      	cmp	r9, r7
 8012188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801218c:	f840 3b04 	str.w	r3, [r0], #4
 8012190:	d2e8      	bcs.n	8012164 <quorem+0xb0>
 8012192:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012196:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801219a:	b92a      	cbnz	r2, 80121a8 <quorem+0xf4>
 801219c:	3b04      	subs	r3, #4
 801219e:	429e      	cmp	r6, r3
 80121a0:	461a      	mov	r2, r3
 80121a2:	d30b      	bcc.n	80121bc <quorem+0x108>
 80121a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80121a8:	4628      	mov	r0, r5
 80121aa:	b003      	add	sp, #12
 80121ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b0:	6812      	ldr	r2, [r2, #0]
 80121b2:	3b04      	subs	r3, #4
 80121b4:	2a00      	cmp	r2, #0
 80121b6:	d1ca      	bne.n	801214e <quorem+0x9a>
 80121b8:	3c01      	subs	r4, #1
 80121ba:	e7c5      	b.n	8012148 <quorem+0x94>
 80121bc:	6812      	ldr	r2, [r2, #0]
 80121be:	3b04      	subs	r3, #4
 80121c0:	2a00      	cmp	r2, #0
 80121c2:	d1ef      	bne.n	80121a4 <quorem+0xf0>
 80121c4:	3c01      	subs	r4, #1
 80121c6:	e7ea      	b.n	801219e <quorem+0xea>
 80121c8:	2000      	movs	r0, #0
 80121ca:	e7ee      	b.n	80121aa <quorem+0xf6>
 80121cc:	0000      	movs	r0, r0
	...

080121d0 <_dtoa_r>:
 80121d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	ec57 6b10 	vmov	r6, r7, d0
 80121d8:	b097      	sub	sp, #92	; 0x5c
 80121da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121dc:	9106      	str	r1, [sp, #24]
 80121de:	4604      	mov	r4, r0
 80121e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80121e2:	9312      	str	r3, [sp, #72]	; 0x48
 80121e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80121e8:	e9cd 6700 	strd	r6, r7, [sp]
 80121ec:	b93d      	cbnz	r5, 80121fe <_dtoa_r+0x2e>
 80121ee:	2010      	movs	r0, #16
 80121f0:	f000 ff92 	bl	8013118 <malloc>
 80121f4:	6260      	str	r0, [r4, #36]	; 0x24
 80121f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80121fa:	6005      	str	r5, [r0, #0]
 80121fc:	60c5      	str	r5, [r0, #12]
 80121fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012200:	6819      	ldr	r1, [r3, #0]
 8012202:	b151      	cbz	r1, 801221a <_dtoa_r+0x4a>
 8012204:	685a      	ldr	r2, [r3, #4]
 8012206:	604a      	str	r2, [r1, #4]
 8012208:	2301      	movs	r3, #1
 801220a:	4093      	lsls	r3, r2
 801220c:	608b      	str	r3, [r1, #8]
 801220e:	4620      	mov	r0, r4
 8012210:	f000 ffc9 	bl	80131a6 <_Bfree>
 8012214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012216:	2200      	movs	r2, #0
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	1e3b      	subs	r3, r7, #0
 801221c:	bfbb      	ittet	lt
 801221e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012222:	9301      	strlt	r3, [sp, #4]
 8012224:	2300      	movge	r3, #0
 8012226:	2201      	movlt	r2, #1
 8012228:	bfac      	ite	ge
 801222a:	f8c8 3000 	strge.w	r3, [r8]
 801222e:	f8c8 2000 	strlt.w	r2, [r8]
 8012232:	4baf      	ldr	r3, [pc, #700]	; (80124f0 <_dtoa_r+0x320>)
 8012234:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012238:	ea33 0308 	bics.w	r3, r3, r8
 801223c:	d114      	bne.n	8012268 <_dtoa_r+0x98>
 801223e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012240:	f242 730f 	movw	r3, #9999	; 0x270f
 8012244:	6013      	str	r3, [r2, #0]
 8012246:	9b00      	ldr	r3, [sp, #0]
 8012248:	b923      	cbnz	r3, 8012254 <_dtoa_r+0x84>
 801224a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801224e:	2800      	cmp	r0, #0
 8012250:	f000 8542 	beq.w	8012cd8 <_dtoa_r+0xb08>
 8012254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012256:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012504 <_dtoa_r+0x334>
 801225a:	2b00      	cmp	r3, #0
 801225c:	f000 8544 	beq.w	8012ce8 <_dtoa_r+0xb18>
 8012260:	f10b 0303 	add.w	r3, fp, #3
 8012264:	f000 bd3e 	b.w	8012ce4 <_dtoa_r+0xb14>
 8012268:	e9dd 6700 	ldrd	r6, r7, [sp]
 801226c:	2200      	movs	r2, #0
 801226e:	2300      	movs	r3, #0
 8012270:	4630      	mov	r0, r6
 8012272:	4639      	mov	r1, r7
 8012274:	f7ee fc50 	bl	8000b18 <__aeabi_dcmpeq>
 8012278:	4681      	mov	r9, r0
 801227a:	b168      	cbz	r0, 8012298 <_dtoa_r+0xc8>
 801227c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801227e:	2301      	movs	r3, #1
 8012280:	6013      	str	r3, [r2, #0]
 8012282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012284:	2b00      	cmp	r3, #0
 8012286:	f000 8524 	beq.w	8012cd2 <_dtoa_r+0xb02>
 801228a:	4b9a      	ldr	r3, [pc, #616]	; (80124f4 <_dtoa_r+0x324>)
 801228c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801228e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8012292:	6013      	str	r3, [r2, #0]
 8012294:	f000 bd28 	b.w	8012ce8 <_dtoa_r+0xb18>
 8012298:	aa14      	add	r2, sp, #80	; 0x50
 801229a:	a915      	add	r1, sp, #84	; 0x54
 801229c:	ec47 6b10 	vmov	d0, r6, r7
 80122a0:	4620      	mov	r0, r4
 80122a2:	f001 f9d8 	bl	8013656 <__d2b>
 80122a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80122aa:	9004      	str	r0, [sp, #16]
 80122ac:	2d00      	cmp	r5, #0
 80122ae:	d07c      	beq.n	80123aa <_dtoa_r+0x1da>
 80122b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80122b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80122b8:	46b2      	mov	sl, r6
 80122ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80122be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80122c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80122c6:	2200      	movs	r2, #0
 80122c8:	4b8b      	ldr	r3, [pc, #556]	; (80124f8 <_dtoa_r+0x328>)
 80122ca:	4650      	mov	r0, sl
 80122cc:	4659      	mov	r1, fp
 80122ce:	f7ee f803 	bl	80002d8 <__aeabi_dsub>
 80122d2:	a381      	add	r3, pc, #516	; (adr r3, 80124d8 <_dtoa_r+0x308>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	f7ee f9b6 	bl	8000648 <__aeabi_dmul>
 80122dc:	a380      	add	r3, pc, #512	; (adr r3, 80124e0 <_dtoa_r+0x310>)
 80122de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e2:	f7ed fffb 	bl	80002dc <__adddf3>
 80122e6:	4606      	mov	r6, r0
 80122e8:	4628      	mov	r0, r5
 80122ea:	460f      	mov	r7, r1
 80122ec:	f7ee f942 	bl	8000574 <__aeabi_i2d>
 80122f0:	a37d      	add	r3, pc, #500	; (adr r3, 80124e8 <_dtoa_r+0x318>)
 80122f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f6:	f7ee f9a7 	bl	8000648 <__aeabi_dmul>
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	4630      	mov	r0, r6
 8012300:	4639      	mov	r1, r7
 8012302:	f7ed ffeb 	bl	80002dc <__adddf3>
 8012306:	4606      	mov	r6, r0
 8012308:	460f      	mov	r7, r1
 801230a:	f7ee fc4d 	bl	8000ba8 <__aeabi_d2iz>
 801230e:	2200      	movs	r2, #0
 8012310:	4682      	mov	sl, r0
 8012312:	2300      	movs	r3, #0
 8012314:	4630      	mov	r0, r6
 8012316:	4639      	mov	r1, r7
 8012318:	f7ee fc08 	bl	8000b2c <__aeabi_dcmplt>
 801231c:	b148      	cbz	r0, 8012332 <_dtoa_r+0x162>
 801231e:	4650      	mov	r0, sl
 8012320:	f7ee f928 	bl	8000574 <__aeabi_i2d>
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	f7ee fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 801232c:	b908      	cbnz	r0, 8012332 <_dtoa_r+0x162>
 801232e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012332:	f1ba 0f16 	cmp.w	sl, #22
 8012336:	d859      	bhi.n	80123ec <_dtoa_r+0x21c>
 8012338:	4970      	ldr	r1, [pc, #448]	; (80124fc <_dtoa_r+0x32c>)
 801233a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801233e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012346:	f7ee fc0f 	bl	8000b68 <__aeabi_dcmpgt>
 801234a:	2800      	cmp	r0, #0
 801234c:	d050      	beq.n	80123f0 <_dtoa_r+0x220>
 801234e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012352:	2300      	movs	r3, #0
 8012354:	930f      	str	r3, [sp, #60]	; 0x3c
 8012356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012358:	1b5d      	subs	r5, r3, r5
 801235a:	f1b5 0801 	subs.w	r8, r5, #1
 801235e:	bf49      	itett	mi
 8012360:	f1c5 0301 	rsbmi	r3, r5, #1
 8012364:	2300      	movpl	r3, #0
 8012366:	9305      	strmi	r3, [sp, #20]
 8012368:	f04f 0800 	movmi.w	r8, #0
 801236c:	bf58      	it	pl
 801236e:	9305      	strpl	r3, [sp, #20]
 8012370:	f1ba 0f00 	cmp.w	sl, #0
 8012374:	db3e      	blt.n	80123f4 <_dtoa_r+0x224>
 8012376:	2300      	movs	r3, #0
 8012378:	44d0      	add	r8, sl
 801237a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801237e:	9307      	str	r3, [sp, #28]
 8012380:	9b06      	ldr	r3, [sp, #24]
 8012382:	2b09      	cmp	r3, #9
 8012384:	f200 8090 	bhi.w	80124a8 <_dtoa_r+0x2d8>
 8012388:	2b05      	cmp	r3, #5
 801238a:	bfc4      	itt	gt
 801238c:	3b04      	subgt	r3, #4
 801238e:	9306      	strgt	r3, [sp, #24]
 8012390:	9b06      	ldr	r3, [sp, #24]
 8012392:	f1a3 0302 	sub.w	r3, r3, #2
 8012396:	bfcc      	ite	gt
 8012398:	2500      	movgt	r5, #0
 801239a:	2501      	movle	r5, #1
 801239c:	2b03      	cmp	r3, #3
 801239e:	f200 808f 	bhi.w	80124c0 <_dtoa_r+0x2f0>
 80123a2:	e8df f003 	tbb	[pc, r3]
 80123a6:	7f7d      	.short	0x7f7d
 80123a8:	7131      	.short	0x7131
 80123aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80123ae:	441d      	add	r5, r3
 80123b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80123b4:	2820      	cmp	r0, #32
 80123b6:	dd13      	ble.n	80123e0 <_dtoa_r+0x210>
 80123b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80123bc:	9b00      	ldr	r3, [sp, #0]
 80123be:	fa08 f800 	lsl.w	r8, r8, r0
 80123c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80123c6:	fa23 f000 	lsr.w	r0, r3, r0
 80123ca:	ea48 0000 	orr.w	r0, r8, r0
 80123ce:	f7ee f8c1 	bl	8000554 <__aeabi_ui2d>
 80123d2:	2301      	movs	r3, #1
 80123d4:	4682      	mov	sl, r0
 80123d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80123da:	3d01      	subs	r5, #1
 80123dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80123de:	e772      	b.n	80122c6 <_dtoa_r+0xf6>
 80123e0:	9b00      	ldr	r3, [sp, #0]
 80123e2:	f1c0 0020 	rsb	r0, r0, #32
 80123e6:	fa03 f000 	lsl.w	r0, r3, r0
 80123ea:	e7f0      	b.n	80123ce <_dtoa_r+0x1fe>
 80123ec:	2301      	movs	r3, #1
 80123ee:	e7b1      	b.n	8012354 <_dtoa_r+0x184>
 80123f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80123f2:	e7b0      	b.n	8012356 <_dtoa_r+0x186>
 80123f4:	9b05      	ldr	r3, [sp, #20]
 80123f6:	eba3 030a 	sub.w	r3, r3, sl
 80123fa:	9305      	str	r3, [sp, #20]
 80123fc:	f1ca 0300 	rsb	r3, sl, #0
 8012400:	9307      	str	r3, [sp, #28]
 8012402:	2300      	movs	r3, #0
 8012404:	930e      	str	r3, [sp, #56]	; 0x38
 8012406:	e7bb      	b.n	8012380 <_dtoa_r+0x1b0>
 8012408:	2301      	movs	r3, #1
 801240a:	930a      	str	r3, [sp, #40]	; 0x28
 801240c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801240e:	2b00      	cmp	r3, #0
 8012410:	dd59      	ble.n	80124c6 <_dtoa_r+0x2f6>
 8012412:	9302      	str	r3, [sp, #8]
 8012414:	4699      	mov	r9, r3
 8012416:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012418:	2200      	movs	r2, #0
 801241a:	6072      	str	r2, [r6, #4]
 801241c:	2204      	movs	r2, #4
 801241e:	f102 0014 	add.w	r0, r2, #20
 8012422:	4298      	cmp	r0, r3
 8012424:	6871      	ldr	r1, [r6, #4]
 8012426:	d953      	bls.n	80124d0 <_dtoa_r+0x300>
 8012428:	4620      	mov	r0, r4
 801242a:	f000 fe88 	bl	801313e <_Balloc>
 801242e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012430:	6030      	str	r0, [r6, #0]
 8012432:	f1b9 0f0e 	cmp.w	r9, #14
 8012436:	f8d3 b000 	ldr.w	fp, [r3]
 801243a:	f200 80e6 	bhi.w	801260a <_dtoa_r+0x43a>
 801243e:	2d00      	cmp	r5, #0
 8012440:	f000 80e3 	beq.w	801260a <_dtoa_r+0x43a>
 8012444:	ed9d 7b00 	vldr	d7, [sp]
 8012448:	f1ba 0f00 	cmp.w	sl, #0
 801244c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012450:	dd74      	ble.n	801253c <_dtoa_r+0x36c>
 8012452:	4a2a      	ldr	r2, [pc, #168]	; (80124fc <_dtoa_r+0x32c>)
 8012454:	f00a 030f 	and.w	r3, sl, #15
 8012458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801245c:	ed93 7b00 	vldr	d7, [r3]
 8012460:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012464:	06f0      	lsls	r0, r6, #27
 8012466:	ed8d 7b08 	vstr	d7, [sp, #32]
 801246a:	d565      	bpl.n	8012538 <_dtoa_r+0x368>
 801246c:	4b24      	ldr	r3, [pc, #144]	; (8012500 <_dtoa_r+0x330>)
 801246e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012472:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012476:	f7ee fa11 	bl	800089c <__aeabi_ddiv>
 801247a:	e9cd 0100 	strd	r0, r1, [sp]
 801247e:	f006 060f 	and.w	r6, r6, #15
 8012482:	2503      	movs	r5, #3
 8012484:	4f1e      	ldr	r7, [pc, #120]	; (8012500 <_dtoa_r+0x330>)
 8012486:	e04c      	b.n	8012522 <_dtoa_r+0x352>
 8012488:	2301      	movs	r3, #1
 801248a:	930a      	str	r3, [sp, #40]	; 0x28
 801248c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801248e:	4453      	add	r3, sl
 8012490:	f103 0901 	add.w	r9, r3, #1
 8012494:	9302      	str	r3, [sp, #8]
 8012496:	464b      	mov	r3, r9
 8012498:	2b01      	cmp	r3, #1
 801249a:	bfb8      	it	lt
 801249c:	2301      	movlt	r3, #1
 801249e:	e7ba      	b.n	8012416 <_dtoa_r+0x246>
 80124a0:	2300      	movs	r3, #0
 80124a2:	e7b2      	b.n	801240a <_dtoa_r+0x23a>
 80124a4:	2300      	movs	r3, #0
 80124a6:	e7f0      	b.n	801248a <_dtoa_r+0x2ba>
 80124a8:	2501      	movs	r5, #1
 80124aa:	2300      	movs	r3, #0
 80124ac:	9306      	str	r3, [sp, #24]
 80124ae:	950a      	str	r5, [sp, #40]	; 0x28
 80124b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124b4:	9302      	str	r3, [sp, #8]
 80124b6:	4699      	mov	r9, r3
 80124b8:	2200      	movs	r2, #0
 80124ba:	2312      	movs	r3, #18
 80124bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80124be:	e7aa      	b.n	8012416 <_dtoa_r+0x246>
 80124c0:	2301      	movs	r3, #1
 80124c2:	930a      	str	r3, [sp, #40]	; 0x28
 80124c4:	e7f4      	b.n	80124b0 <_dtoa_r+0x2e0>
 80124c6:	2301      	movs	r3, #1
 80124c8:	9302      	str	r3, [sp, #8]
 80124ca:	4699      	mov	r9, r3
 80124cc:	461a      	mov	r2, r3
 80124ce:	e7f5      	b.n	80124bc <_dtoa_r+0x2ec>
 80124d0:	3101      	adds	r1, #1
 80124d2:	6071      	str	r1, [r6, #4]
 80124d4:	0052      	lsls	r2, r2, #1
 80124d6:	e7a2      	b.n	801241e <_dtoa_r+0x24e>
 80124d8:	636f4361 	.word	0x636f4361
 80124dc:	3fd287a7 	.word	0x3fd287a7
 80124e0:	8b60c8b3 	.word	0x8b60c8b3
 80124e4:	3fc68a28 	.word	0x3fc68a28
 80124e8:	509f79fb 	.word	0x509f79fb
 80124ec:	3fd34413 	.word	0x3fd34413
 80124f0:	7ff00000 	.word	0x7ff00000
 80124f4:	08016a4d 	.word	0x08016a4d
 80124f8:	3ff80000 	.word	0x3ff80000
 80124fc:	08016858 	.word	0x08016858
 8012500:	08016830 	.word	0x08016830
 8012504:	080167c7 	.word	0x080167c7
 8012508:	07f1      	lsls	r1, r6, #31
 801250a:	d508      	bpl.n	801251e <_dtoa_r+0x34e>
 801250c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012514:	f7ee f898 	bl	8000648 <__aeabi_dmul>
 8012518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801251c:	3501      	adds	r5, #1
 801251e:	1076      	asrs	r6, r6, #1
 8012520:	3708      	adds	r7, #8
 8012522:	2e00      	cmp	r6, #0
 8012524:	d1f0      	bne.n	8012508 <_dtoa_r+0x338>
 8012526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801252a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801252e:	f7ee f9b5 	bl	800089c <__aeabi_ddiv>
 8012532:	e9cd 0100 	strd	r0, r1, [sp]
 8012536:	e01a      	b.n	801256e <_dtoa_r+0x39e>
 8012538:	2502      	movs	r5, #2
 801253a:	e7a3      	b.n	8012484 <_dtoa_r+0x2b4>
 801253c:	f000 80a0 	beq.w	8012680 <_dtoa_r+0x4b0>
 8012540:	f1ca 0600 	rsb	r6, sl, #0
 8012544:	4b9f      	ldr	r3, [pc, #636]	; (80127c4 <_dtoa_r+0x5f4>)
 8012546:	4fa0      	ldr	r7, [pc, #640]	; (80127c8 <_dtoa_r+0x5f8>)
 8012548:	f006 020f 	and.w	r2, r6, #15
 801254c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012558:	f7ee f876 	bl	8000648 <__aeabi_dmul>
 801255c:	e9cd 0100 	strd	r0, r1, [sp]
 8012560:	1136      	asrs	r6, r6, #4
 8012562:	2300      	movs	r3, #0
 8012564:	2502      	movs	r5, #2
 8012566:	2e00      	cmp	r6, #0
 8012568:	d17f      	bne.n	801266a <_dtoa_r+0x49a>
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1e1      	bne.n	8012532 <_dtoa_r+0x362>
 801256e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012570:	2b00      	cmp	r3, #0
 8012572:	f000 8087 	beq.w	8012684 <_dtoa_r+0x4b4>
 8012576:	e9dd 6700 	ldrd	r6, r7, [sp]
 801257a:	2200      	movs	r2, #0
 801257c:	4b93      	ldr	r3, [pc, #588]	; (80127cc <_dtoa_r+0x5fc>)
 801257e:	4630      	mov	r0, r6
 8012580:	4639      	mov	r1, r7
 8012582:	f7ee fad3 	bl	8000b2c <__aeabi_dcmplt>
 8012586:	2800      	cmp	r0, #0
 8012588:	d07c      	beq.n	8012684 <_dtoa_r+0x4b4>
 801258a:	f1b9 0f00 	cmp.w	r9, #0
 801258e:	d079      	beq.n	8012684 <_dtoa_r+0x4b4>
 8012590:	9b02      	ldr	r3, [sp, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	dd35      	ble.n	8012602 <_dtoa_r+0x432>
 8012596:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801259a:	9308      	str	r3, [sp, #32]
 801259c:	4639      	mov	r1, r7
 801259e:	2200      	movs	r2, #0
 80125a0:	4b8b      	ldr	r3, [pc, #556]	; (80127d0 <_dtoa_r+0x600>)
 80125a2:	4630      	mov	r0, r6
 80125a4:	f7ee f850 	bl	8000648 <__aeabi_dmul>
 80125a8:	e9cd 0100 	strd	r0, r1, [sp]
 80125ac:	9f02      	ldr	r7, [sp, #8]
 80125ae:	3501      	adds	r5, #1
 80125b0:	4628      	mov	r0, r5
 80125b2:	f7ed ffdf 	bl	8000574 <__aeabi_i2d>
 80125b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ba:	f7ee f845 	bl	8000648 <__aeabi_dmul>
 80125be:	2200      	movs	r2, #0
 80125c0:	4b84      	ldr	r3, [pc, #528]	; (80127d4 <_dtoa_r+0x604>)
 80125c2:	f7ed fe8b 	bl	80002dc <__adddf3>
 80125c6:	4605      	mov	r5, r0
 80125c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80125cc:	2f00      	cmp	r7, #0
 80125ce:	d15d      	bne.n	801268c <_dtoa_r+0x4bc>
 80125d0:	2200      	movs	r2, #0
 80125d2:	4b81      	ldr	r3, [pc, #516]	; (80127d8 <_dtoa_r+0x608>)
 80125d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125d8:	f7ed fe7e 	bl	80002d8 <__aeabi_dsub>
 80125dc:	462a      	mov	r2, r5
 80125de:	4633      	mov	r3, r6
 80125e0:	e9cd 0100 	strd	r0, r1, [sp]
 80125e4:	f7ee fac0 	bl	8000b68 <__aeabi_dcmpgt>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	f040 8288 	bne.w	8012afe <_dtoa_r+0x92e>
 80125ee:	462a      	mov	r2, r5
 80125f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80125f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125f8:	f7ee fa98 	bl	8000b2c <__aeabi_dcmplt>
 80125fc:	2800      	cmp	r0, #0
 80125fe:	f040 827c 	bne.w	8012afa <_dtoa_r+0x92a>
 8012602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012606:	e9cd 2300 	strd	r2, r3, [sp]
 801260a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801260c:	2b00      	cmp	r3, #0
 801260e:	f2c0 8150 	blt.w	80128b2 <_dtoa_r+0x6e2>
 8012612:	f1ba 0f0e 	cmp.w	sl, #14
 8012616:	f300 814c 	bgt.w	80128b2 <_dtoa_r+0x6e2>
 801261a:	4b6a      	ldr	r3, [pc, #424]	; (80127c4 <_dtoa_r+0x5f4>)
 801261c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012620:	ed93 7b00 	vldr	d7, [r3]
 8012624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012626:	2b00      	cmp	r3, #0
 8012628:	ed8d 7b02 	vstr	d7, [sp, #8]
 801262c:	f280 80d8 	bge.w	80127e0 <_dtoa_r+0x610>
 8012630:	f1b9 0f00 	cmp.w	r9, #0
 8012634:	f300 80d4 	bgt.w	80127e0 <_dtoa_r+0x610>
 8012638:	f040 825e 	bne.w	8012af8 <_dtoa_r+0x928>
 801263c:	2200      	movs	r2, #0
 801263e:	4b66      	ldr	r3, [pc, #408]	; (80127d8 <_dtoa_r+0x608>)
 8012640:	ec51 0b17 	vmov	r0, r1, d7
 8012644:	f7ee f800 	bl	8000648 <__aeabi_dmul>
 8012648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801264c:	f7ee fa82 	bl	8000b54 <__aeabi_dcmpge>
 8012650:	464f      	mov	r7, r9
 8012652:	464e      	mov	r6, r9
 8012654:	2800      	cmp	r0, #0
 8012656:	f040 8234 	bne.w	8012ac2 <_dtoa_r+0x8f2>
 801265a:	2331      	movs	r3, #49	; 0x31
 801265c:	f10b 0501 	add.w	r5, fp, #1
 8012660:	f88b 3000 	strb.w	r3, [fp]
 8012664:	f10a 0a01 	add.w	sl, sl, #1
 8012668:	e22f      	b.n	8012aca <_dtoa_r+0x8fa>
 801266a:	07f2      	lsls	r2, r6, #31
 801266c:	d505      	bpl.n	801267a <_dtoa_r+0x4aa>
 801266e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012672:	f7ed ffe9 	bl	8000648 <__aeabi_dmul>
 8012676:	3501      	adds	r5, #1
 8012678:	2301      	movs	r3, #1
 801267a:	1076      	asrs	r6, r6, #1
 801267c:	3708      	adds	r7, #8
 801267e:	e772      	b.n	8012566 <_dtoa_r+0x396>
 8012680:	2502      	movs	r5, #2
 8012682:	e774      	b.n	801256e <_dtoa_r+0x39e>
 8012684:	f8cd a020 	str.w	sl, [sp, #32]
 8012688:	464f      	mov	r7, r9
 801268a:	e791      	b.n	80125b0 <_dtoa_r+0x3e0>
 801268c:	4b4d      	ldr	r3, [pc, #308]	; (80127c4 <_dtoa_r+0x5f4>)
 801268e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012692:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012698:	2b00      	cmp	r3, #0
 801269a:	d047      	beq.n	801272c <_dtoa_r+0x55c>
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	2000      	movs	r0, #0
 80126a2:	494e      	ldr	r1, [pc, #312]	; (80127dc <_dtoa_r+0x60c>)
 80126a4:	f7ee f8fa 	bl	800089c <__aeabi_ddiv>
 80126a8:	462a      	mov	r2, r5
 80126aa:	4633      	mov	r3, r6
 80126ac:	f7ed fe14 	bl	80002d8 <__aeabi_dsub>
 80126b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80126b4:	465d      	mov	r5, fp
 80126b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126ba:	f7ee fa75 	bl	8000ba8 <__aeabi_d2iz>
 80126be:	4606      	mov	r6, r0
 80126c0:	f7ed ff58 	bl	8000574 <__aeabi_i2d>
 80126c4:	4602      	mov	r2, r0
 80126c6:	460b      	mov	r3, r1
 80126c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126cc:	f7ed fe04 	bl	80002d8 <__aeabi_dsub>
 80126d0:	3630      	adds	r6, #48	; 0x30
 80126d2:	f805 6b01 	strb.w	r6, [r5], #1
 80126d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80126da:	e9cd 0100 	strd	r0, r1, [sp]
 80126de:	f7ee fa25 	bl	8000b2c <__aeabi_dcmplt>
 80126e2:	2800      	cmp	r0, #0
 80126e4:	d163      	bne.n	80127ae <_dtoa_r+0x5de>
 80126e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ea:	2000      	movs	r0, #0
 80126ec:	4937      	ldr	r1, [pc, #220]	; (80127cc <_dtoa_r+0x5fc>)
 80126ee:	f7ed fdf3 	bl	80002d8 <__aeabi_dsub>
 80126f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80126f6:	f7ee fa19 	bl	8000b2c <__aeabi_dcmplt>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	f040 80b7 	bne.w	801286e <_dtoa_r+0x69e>
 8012700:	eba5 030b 	sub.w	r3, r5, fp
 8012704:	429f      	cmp	r7, r3
 8012706:	f77f af7c 	ble.w	8012602 <_dtoa_r+0x432>
 801270a:	2200      	movs	r2, #0
 801270c:	4b30      	ldr	r3, [pc, #192]	; (80127d0 <_dtoa_r+0x600>)
 801270e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012712:	f7ed ff99 	bl	8000648 <__aeabi_dmul>
 8012716:	2200      	movs	r2, #0
 8012718:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801271c:	4b2c      	ldr	r3, [pc, #176]	; (80127d0 <_dtoa_r+0x600>)
 801271e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012722:	f7ed ff91 	bl	8000648 <__aeabi_dmul>
 8012726:	e9cd 0100 	strd	r0, r1, [sp]
 801272a:	e7c4      	b.n	80126b6 <_dtoa_r+0x4e6>
 801272c:	462a      	mov	r2, r5
 801272e:	4633      	mov	r3, r6
 8012730:	f7ed ff8a 	bl	8000648 <__aeabi_dmul>
 8012734:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012738:	eb0b 0507 	add.w	r5, fp, r7
 801273c:	465e      	mov	r6, fp
 801273e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012742:	f7ee fa31 	bl	8000ba8 <__aeabi_d2iz>
 8012746:	4607      	mov	r7, r0
 8012748:	f7ed ff14 	bl	8000574 <__aeabi_i2d>
 801274c:	3730      	adds	r7, #48	; 0x30
 801274e:	4602      	mov	r2, r0
 8012750:	460b      	mov	r3, r1
 8012752:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012756:	f7ed fdbf 	bl	80002d8 <__aeabi_dsub>
 801275a:	f806 7b01 	strb.w	r7, [r6], #1
 801275e:	42ae      	cmp	r6, r5
 8012760:	e9cd 0100 	strd	r0, r1, [sp]
 8012764:	f04f 0200 	mov.w	r2, #0
 8012768:	d126      	bne.n	80127b8 <_dtoa_r+0x5e8>
 801276a:	4b1c      	ldr	r3, [pc, #112]	; (80127dc <_dtoa_r+0x60c>)
 801276c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012770:	f7ed fdb4 	bl	80002dc <__adddf3>
 8012774:	4602      	mov	r2, r0
 8012776:	460b      	mov	r3, r1
 8012778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801277c:	f7ee f9f4 	bl	8000b68 <__aeabi_dcmpgt>
 8012780:	2800      	cmp	r0, #0
 8012782:	d174      	bne.n	801286e <_dtoa_r+0x69e>
 8012784:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012788:	2000      	movs	r0, #0
 801278a:	4914      	ldr	r1, [pc, #80]	; (80127dc <_dtoa_r+0x60c>)
 801278c:	f7ed fda4 	bl	80002d8 <__aeabi_dsub>
 8012790:	4602      	mov	r2, r0
 8012792:	460b      	mov	r3, r1
 8012794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012798:	f7ee f9c8 	bl	8000b2c <__aeabi_dcmplt>
 801279c:	2800      	cmp	r0, #0
 801279e:	f43f af30 	beq.w	8012602 <_dtoa_r+0x432>
 80127a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127a6:	2b30      	cmp	r3, #48	; 0x30
 80127a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80127ac:	d002      	beq.n	80127b4 <_dtoa_r+0x5e4>
 80127ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80127b2:	e04a      	b.n	801284a <_dtoa_r+0x67a>
 80127b4:	4615      	mov	r5, r2
 80127b6:	e7f4      	b.n	80127a2 <_dtoa_r+0x5d2>
 80127b8:	4b05      	ldr	r3, [pc, #20]	; (80127d0 <_dtoa_r+0x600>)
 80127ba:	f7ed ff45 	bl	8000648 <__aeabi_dmul>
 80127be:	e9cd 0100 	strd	r0, r1, [sp]
 80127c2:	e7bc      	b.n	801273e <_dtoa_r+0x56e>
 80127c4:	08016858 	.word	0x08016858
 80127c8:	08016830 	.word	0x08016830
 80127cc:	3ff00000 	.word	0x3ff00000
 80127d0:	40240000 	.word	0x40240000
 80127d4:	401c0000 	.word	0x401c0000
 80127d8:	40140000 	.word	0x40140000
 80127dc:	3fe00000 	.word	0x3fe00000
 80127e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80127e4:	465d      	mov	r5, fp
 80127e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127ea:	4630      	mov	r0, r6
 80127ec:	4639      	mov	r1, r7
 80127ee:	f7ee f855 	bl	800089c <__aeabi_ddiv>
 80127f2:	f7ee f9d9 	bl	8000ba8 <__aeabi_d2iz>
 80127f6:	4680      	mov	r8, r0
 80127f8:	f7ed febc 	bl	8000574 <__aeabi_i2d>
 80127fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012800:	f7ed ff22 	bl	8000648 <__aeabi_dmul>
 8012804:	4602      	mov	r2, r0
 8012806:	460b      	mov	r3, r1
 8012808:	4630      	mov	r0, r6
 801280a:	4639      	mov	r1, r7
 801280c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012810:	f7ed fd62 	bl	80002d8 <__aeabi_dsub>
 8012814:	f805 6b01 	strb.w	r6, [r5], #1
 8012818:	eba5 060b 	sub.w	r6, r5, fp
 801281c:	45b1      	cmp	r9, r6
 801281e:	4602      	mov	r2, r0
 8012820:	460b      	mov	r3, r1
 8012822:	d139      	bne.n	8012898 <_dtoa_r+0x6c8>
 8012824:	f7ed fd5a 	bl	80002dc <__adddf3>
 8012828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801282c:	4606      	mov	r6, r0
 801282e:	460f      	mov	r7, r1
 8012830:	f7ee f99a 	bl	8000b68 <__aeabi_dcmpgt>
 8012834:	b9c8      	cbnz	r0, 801286a <_dtoa_r+0x69a>
 8012836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801283a:	4630      	mov	r0, r6
 801283c:	4639      	mov	r1, r7
 801283e:	f7ee f96b 	bl	8000b18 <__aeabi_dcmpeq>
 8012842:	b110      	cbz	r0, 801284a <_dtoa_r+0x67a>
 8012844:	f018 0f01 	tst.w	r8, #1
 8012848:	d10f      	bne.n	801286a <_dtoa_r+0x69a>
 801284a:	9904      	ldr	r1, [sp, #16]
 801284c:	4620      	mov	r0, r4
 801284e:	f000 fcaa 	bl	80131a6 <_Bfree>
 8012852:	2300      	movs	r3, #0
 8012854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012856:	702b      	strb	r3, [r5, #0]
 8012858:	f10a 0301 	add.w	r3, sl, #1
 801285c:	6013      	str	r3, [r2, #0]
 801285e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012860:	2b00      	cmp	r3, #0
 8012862:	f000 8241 	beq.w	8012ce8 <_dtoa_r+0xb18>
 8012866:	601d      	str	r5, [r3, #0]
 8012868:	e23e      	b.n	8012ce8 <_dtoa_r+0xb18>
 801286a:	f8cd a020 	str.w	sl, [sp, #32]
 801286e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012872:	2a39      	cmp	r2, #57	; 0x39
 8012874:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012878:	d108      	bne.n	801288c <_dtoa_r+0x6bc>
 801287a:	459b      	cmp	fp, r3
 801287c:	d10a      	bne.n	8012894 <_dtoa_r+0x6c4>
 801287e:	9b08      	ldr	r3, [sp, #32]
 8012880:	3301      	adds	r3, #1
 8012882:	9308      	str	r3, [sp, #32]
 8012884:	2330      	movs	r3, #48	; 0x30
 8012886:	f88b 3000 	strb.w	r3, [fp]
 801288a:	465b      	mov	r3, fp
 801288c:	781a      	ldrb	r2, [r3, #0]
 801288e:	3201      	adds	r2, #1
 8012890:	701a      	strb	r2, [r3, #0]
 8012892:	e78c      	b.n	80127ae <_dtoa_r+0x5de>
 8012894:	461d      	mov	r5, r3
 8012896:	e7ea      	b.n	801286e <_dtoa_r+0x69e>
 8012898:	2200      	movs	r2, #0
 801289a:	4b9b      	ldr	r3, [pc, #620]	; (8012b08 <_dtoa_r+0x938>)
 801289c:	f7ed fed4 	bl	8000648 <__aeabi_dmul>
 80128a0:	2200      	movs	r2, #0
 80128a2:	2300      	movs	r3, #0
 80128a4:	4606      	mov	r6, r0
 80128a6:	460f      	mov	r7, r1
 80128a8:	f7ee f936 	bl	8000b18 <__aeabi_dcmpeq>
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d09a      	beq.n	80127e6 <_dtoa_r+0x616>
 80128b0:	e7cb      	b.n	801284a <_dtoa_r+0x67a>
 80128b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128b4:	2a00      	cmp	r2, #0
 80128b6:	f000 808b 	beq.w	80129d0 <_dtoa_r+0x800>
 80128ba:	9a06      	ldr	r2, [sp, #24]
 80128bc:	2a01      	cmp	r2, #1
 80128be:	dc6e      	bgt.n	801299e <_dtoa_r+0x7ce>
 80128c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80128c2:	2a00      	cmp	r2, #0
 80128c4:	d067      	beq.n	8012996 <_dtoa_r+0x7c6>
 80128c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80128ca:	9f07      	ldr	r7, [sp, #28]
 80128cc:	9d05      	ldr	r5, [sp, #20]
 80128ce:	9a05      	ldr	r2, [sp, #20]
 80128d0:	2101      	movs	r1, #1
 80128d2:	441a      	add	r2, r3
 80128d4:	4620      	mov	r0, r4
 80128d6:	9205      	str	r2, [sp, #20]
 80128d8:	4498      	add	r8, r3
 80128da:	f000 fd04 	bl	80132e6 <__i2b>
 80128de:	4606      	mov	r6, r0
 80128e0:	2d00      	cmp	r5, #0
 80128e2:	dd0c      	ble.n	80128fe <_dtoa_r+0x72e>
 80128e4:	f1b8 0f00 	cmp.w	r8, #0
 80128e8:	dd09      	ble.n	80128fe <_dtoa_r+0x72e>
 80128ea:	4545      	cmp	r5, r8
 80128ec:	9a05      	ldr	r2, [sp, #20]
 80128ee:	462b      	mov	r3, r5
 80128f0:	bfa8      	it	ge
 80128f2:	4643      	movge	r3, r8
 80128f4:	1ad2      	subs	r2, r2, r3
 80128f6:	9205      	str	r2, [sp, #20]
 80128f8:	1aed      	subs	r5, r5, r3
 80128fa:	eba8 0803 	sub.w	r8, r8, r3
 80128fe:	9b07      	ldr	r3, [sp, #28]
 8012900:	b1eb      	cbz	r3, 801293e <_dtoa_r+0x76e>
 8012902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012904:	2b00      	cmp	r3, #0
 8012906:	d067      	beq.n	80129d8 <_dtoa_r+0x808>
 8012908:	b18f      	cbz	r7, 801292e <_dtoa_r+0x75e>
 801290a:	4631      	mov	r1, r6
 801290c:	463a      	mov	r2, r7
 801290e:	4620      	mov	r0, r4
 8012910:	f000 fd88 	bl	8013424 <__pow5mult>
 8012914:	9a04      	ldr	r2, [sp, #16]
 8012916:	4601      	mov	r1, r0
 8012918:	4606      	mov	r6, r0
 801291a:	4620      	mov	r0, r4
 801291c:	f000 fcec 	bl	80132f8 <__multiply>
 8012920:	9904      	ldr	r1, [sp, #16]
 8012922:	9008      	str	r0, [sp, #32]
 8012924:	4620      	mov	r0, r4
 8012926:	f000 fc3e 	bl	80131a6 <_Bfree>
 801292a:	9b08      	ldr	r3, [sp, #32]
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	9b07      	ldr	r3, [sp, #28]
 8012930:	1bda      	subs	r2, r3, r7
 8012932:	d004      	beq.n	801293e <_dtoa_r+0x76e>
 8012934:	9904      	ldr	r1, [sp, #16]
 8012936:	4620      	mov	r0, r4
 8012938:	f000 fd74 	bl	8013424 <__pow5mult>
 801293c:	9004      	str	r0, [sp, #16]
 801293e:	2101      	movs	r1, #1
 8012940:	4620      	mov	r0, r4
 8012942:	f000 fcd0 	bl	80132e6 <__i2b>
 8012946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012948:	4607      	mov	r7, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 81d0 	beq.w	8012cf0 <_dtoa_r+0xb20>
 8012950:	461a      	mov	r2, r3
 8012952:	4601      	mov	r1, r0
 8012954:	4620      	mov	r0, r4
 8012956:	f000 fd65 	bl	8013424 <__pow5mult>
 801295a:	9b06      	ldr	r3, [sp, #24]
 801295c:	2b01      	cmp	r3, #1
 801295e:	4607      	mov	r7, r0
 8012960:	dc40      	bgt.n	80129e4 <_dtoa_r+0x814>
 8012962:	9b00      	ldr	r3, [sp, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d139      	bne.n	80129dc <_dtoa_r+0x80c>
 8012968:	9b01      	ldr	r3, [sp, #4]
 801296a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801296e:	2b00      	cmp	r3, #0
 8012970:	d136      	bne.n	80129e0 <_dtoa_r+0x810>
 8012972:	9b01      	ldr	r3, [sp, #4]
 8012974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012978:	0d1b      	lsrs	r3, r3, #20
 801297a:	051b      	lsls	r3, r3, #20
 801297c:	b12b      	cbz	r3, 801298a <_dtoa_r+0x7ba>
 801297e:	9b05      	ldr	r3, [sp, #20]
 8012980:	3301      	adds	r3, #1
 8012982:	9305      	str	r3, [sp, #20]
 8012984:	f108 0801 	add.w	r8, r8, #1
 8012988:	2301      	movs	r3, #1
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801298e:	2b00      	cmp	r3, #0
 8012990:	d12a      	bne.n	80129e8 <_dtoa_r+0x818>
 8012992:	2001      	movs	r0, #1
 8012994:	e030      	b.n	80129f8 <_dtoa_r+0x828>
 8012996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012998:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801299c:	e795      	b.n	80128ca <_dtoa_r+0x6fa>
 801299e:	9b07      	ldr	r3, [sp, #28]
 80129a0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80129a4:	42bb      	cmp	r3, r7
 80129a6:	bfbf      	itttt	lt
 80129a8:	9b07      	ldrlt	r3, [sp, #28]
 80129aa:	9707      	strlt	r7, [sp, #28]
 80129ac:	1afa      	sublt	r2, r7, r3
 80129ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80129b0:	bfbb      	ittet	lt
 80129b2:	189b      	addlt	r3, r3, r2
 80129b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80129b6:	1bdf      	subge	r7, r3, r7
 80129b8:	2700      	movlt	r7, #0
 80129ba:	f1b9 0f00 	cmp.w	r9, #0
 80129be:	bfb5      	itete	lt
 80129c0:	9b05      	ldrlt	r3, [sp, #20]
 80129c2:	9d05      	ldrge	r5, [sp, #20]
 80129c4:	eba3 0509 	sublt.w	r5, r3, r9
 80129c8:	464b      	movge	r3, r9
 80129ca:	bfb8      	it	lt
 80129cc:	2300      	movlt	r3, #0
 80129ce:	e77e      	b.n	80128ce <_dtoa_r+0x6fe>
 80129d0:	9f07      	ldr	r7, [sp, #28]
 80129d2:	9d05      	ldr	r5, [sp, #20]
 80129d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80129d6:	e783      	b.n	80128e0 <_dtoa_r+0x710>
 80129d8:	9a07      	ldr	r2, [sp, #28]
 80129da:	e7ab      	b.n	8012934 <_dtoa_r+0x764>
 80129dc:	2300      	movs	r3, #0
 80129de:	e7d4      	b.n	801298a <_dtoa_r+0x7ba>
 80129e0:	9b00      	ldr	r3, [sp, #0]
 80129e2:	e7d2      	b.n	801298a <_dtoa_r+0x7ba>
 80129e4:	2300      	movs	r3, #0
 80129e6:	9307      	str	r3, [sp, #28]
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80129ee:	6918      	ldr	r0, [r3, #16]
 80129f0:	f000 fc2b 	bl	801324a <__hi0bits>
 80129f4:	f1c0 0020 	rsb	r0, r0, #32
 80129f8:	4440      	add	r0, r8
 80129fa:	f010 001f 	ands.w	r0, r0, #31
 80129fe:	d047      	beq.n	8012a90 <_dtoa_r+0x8c0>
 8012a00:	f1c0 0320 	rsb	r3, r0, #32
 8012a04:	2b04      	cmp	r3, #4
 8012a06:	dd3b      	ble.n	8012a80 <_dtoa_r+0x8b0>
 8012a08:	9b05      	ldr	r3, [sp, #20]
 8012a0a:	f1c0 001c 	rsb	r0, r0, #28
 8012a0e:	4403      	add	r3, r0
 8012a10:	9305      	str	r3, [sp, #20]
 8012a12:	4405      	add	r5, r0
 8012a14:	4480      	add	r8, r0
 8012a16:	9b05      	ldr	r3, [sp, #20]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	dd05      	ble.n	8012a28 <_dtoa_r+0x858>
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	9904      	ldr	r1, [sp, #16]
 8012a20:	4620      	mov	r0, r4
 8012a22:	f000 fd4d 	bl	80134c0 <__lshift>
 8012a26:	9004      	str	r0, [sp, #16]
 8012a28:	f1b8 0f00 	cmp.w	r8, #0
 8012a2c:	dd05      	ble.n	8012a3a <_dtoa_r+0x86a>
 8012a2e:	4639      	mov	r1, r7
 8012a30:	4642      	mov	r2, r8
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 fd44 	bl	80134c0 <__lshift>
 8012a38:	4607      	mov	r7, r0
 8012a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a3c:	b353      	cbz	r3, 8012a94 <_dtoa_r+0x8c4>
 8012a3e:	4639      	mov	r1, r7
 8012a40:	9804      	ldr	r0, [sp, #16]
 8012a42:	f000 fd91 	bl	8013568 <__mcmp>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	da24      	bge.n	8012a94 <_dtoa_r+0x8c4>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	220a      	movs	r2, #10
 8012a4e:	9904      	ldr	r1, [sp, #16]
 8012a50:	4620      	mov	r0, r4
 8012a52:	f000 fbbf 	bl	80131d4 <__multadd>
 8012a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a58:	9004      	str	r0, [sp, #16]
 8012a5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 814d 	beq.w	8012cfe <_dtoa_r+0xb2e>
 8012a64:	2300      	movs	r3, #0
 8012a66:	4631      	mov	r1, r6
 8012a68:	220a      	movs	r2, #10
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f000 fbb2 	bl	80131d4 <__multadd>
 8012a70:	9b02      	ldr	r3, [sp, #8]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	4606      	mov	r6, r0
 8012a76:	dc4f      	bgt.n	8012b18 <_dtoa_r+0x948>
 8012a78:	9b06      	ldr	r3, [sp, #24]
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	dd4c      	ble.n	8012b18 <_dtoa_r+0x948>
 8012a7e:	e011      	b.n	8012aa4 <_dtoa_r+0x8d4>
 8012a80:	d0c9      	beq.n	8012a16 <_dtoa_r+0x846>
 8012a82:	9a05      	ldr	r2, [sp, #20]
 8012a84:	331c      	adds	r3, #28
 8012a86:	441a      	add	r2, r3
 8012a88:	9205      	str	r2, [sp, #20]
 8012a8a:	441d      	add	r5, r3
 8012a8c:	4498      	add	r8, r3
 8012a8e:	e7c2      	b.n	8012a16 <_dtoa_r+0x846>
 8012a90:	4603      	mov	r3, r0
 8012a92:	e7f6      	b.n	8012a82 <_dtoa_r+0x8b2>
 8012a94:	f1b9 0f00 	cmp.w	r9, #0
 8012a98:	dc38      	bgt.n	8012b0c <_dtoa_r+0x93c>
 8012a9a:	9b06      	ldr	r3, [sp, #24]
 8012a9c:	2b02      	cmp	r3, #2
 8012a9e:	dd35      	ble.n	8012b0c <_dtoa_r+0x93c>
 8012aa0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012aa4:	9b02      	ldr	r3, [sp, #8]
 8012aa6:	b963      	cbnz	r3, 8012ac2 <_dtoa_r+0x8f2>
 8012aa8:	4639      	mov	r1, r7
 8012aaa:	2205      	movs	r2, #5
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 fb91 	bl	80131d4 <__multadd>
 8012ab2:	4601      	mov	r1, r0
 8012ab4:	4607      	mov	r7, r0
 8012ab6:	9804      	ldr	r0, [sp, #16]
 8012ab8:	f000 fd56 	bl	8013568 <__mcmp>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	f73f adcc 	bgt.w	801265a <_dtoa_r+0x48a>
 8012ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac4:	465d      	mov	r5, fp
 8012ac6:	ea6f 0a03 	mvn.w	sl, r3
 8012aca:	f04f 0900 	mov.w	r9, #0
 8012ace:	4639      	mov	r1, r7
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 fb68 	bl	80131a6 <_Bfree>
 8012ad6:	2e00      	cmp	r6, #0
 8012ad8:	f43f aeb7 	beq.w	801284a <_dtoa_r+0x67a>
 8012adc:	f1b9 0f00 	cmp.w	r9, #0
 8012ae0:	d005      	beq.n	8012aee <_dtoa_r+0x91e>
 8012ae2:	45b1      	cmp	r9, r6
 8012ae4:	d003      	beq.n	8012aee <_dtoa_r+0x91e>
 8012ae6:	4649      	mov	r1, r9
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f000 fb5c 	bl	80131a6 <_Bfree>
 8012aee:	4631      	mov	r1, r6
 8012af0:	4620      	mov	r0, r4
 8012af2:	f000 fb58 	bl	80131a6 <_Bfree>
 8012af6:	e6a8      	b.n	801284a <_dtoa_r+0x67a>
 8012af8:	2700      	movs	r7, #0
 8012afa:	463e      	mov	r6, r7
 8012afc:	e7e1      	b.n	8012ac2 <_dtoa_r+0x8f2>
 8012afe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b02:	463e      	mov	r6, r7
 8012b04:	e5a9      	b.n	801265a <_dtoa_r+0x48a>
 8012b06:	bf00      	nop
 8012b08:	40240000 	.word	0x40240000
 8012b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 80fa 	beq.w	8012d0c <_dtoa_r+0xb3c>
 8012b18:	2d00      	cmp	r5, #0
 8012b1a:	dd05      	ble.n	8012b28 <_dtoa_r+0x958>
 8012b1c:	4631      	mov	r1, r6
 8012b1e:	462a      	mov	r2, r5
 8012b20:	4620      	mov	r0, r4
 8012b22:	f000 fccd 	bl	80134c0 <__lshift>
 8012b26:	4606      	mov	r6, r0
 8012b28:	9b07      	ldr	r3, [sp, #28]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d04c      	beq.n	8012bc8 <_dtoa_r+0x9f8>
 8012b2e:	6871      	ldr	r1, [r6, #4]
 8012b30:	4620      	mov	r0, r4
 8012b32:	f000 fb04 	bl	801313e <_Balloc>
 8012b36:	6932      	ldr	r2, [r6, #16]
 8012b38:	3202      	adds	r2, #2
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	0092      	lsls	r2, r2, #2
 8012b3e:	f106 010c 	add.w	r1, r6, #12
 8012b42:	300c      	adds	r0, #12
 8012b44:	f000 faf0 	bl	8013128 <memcpy>
 8012b48:	2201      	movs	r2, #1
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f000 fcb7 	bl	80134c0 <__lshift>
 8012b52:	9b00      	ldr	r3, [sp, #0]
 8012b54:	f8cd b014 	str.w	fp, [sp, #20]
 8012b58:	f003 0301 	and.w	r3, r3, #1
 8012b5c:	46b1      	mov	r9, r6
 8012b5e:	9307      	str	r3, [sp, #28]
 8012b60:	4606      	mov	r6, r0
 8012b62:	4639      	mov	r1, r7
 8012b64:	9804      	ldr	r0, [sp, #16]
 8012b66:	f7ff faa5 	bl	80120b4 <quorem>
 8012b6a:	4649      	mov	r1, r9
 8012b6c:	4605      	mov	r5, r0
 8012b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012b72:	9804      	ldr	r0, [sp, #16]
 8012b74:	f000 fcf8 	bl	8013568 <__mcmp>
 8012b78:	4632      	mov	r2, r6
 8012b7a:	9000      	str	r0, [sp, #0]
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 fd0c 	bl	801359c <__mdiff>
 8012b84:	68c3      	ldr	r3, [r0, #12]
 8012b86:	4602      	mov	r2, r0
 8012b88:	bb03      	cbnz	r3, 8012bcc <_dtoa_r+0x9fc>
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	9008      	str	r0, [sp, #32]
 8012b8e:	9804      	ldr	r0, [sp, #16]
 8012b90:	f000 fcea 	bl	8013568 <__mcmp>
 8012b94:	9a08      	ldr	r2, [sp, #32]
 8012b96:	4603      	mov	r3, r0
 8012b98:	4611      	mov	r1, r2
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	9308      	str	r3, [sp, #32]
 8012b9e:	f000 fb02 	bl	80131a6 <_Bfree>
 8012ba2:	9b08      	ldr	r3, [sp, #32]
 8012ba4:	b9a3      	cbnz	r3, 8012bd0 <_dtoa_r+0xa00>
 8012ba6:	9a06      	ldr	r2, [sp, #24]
 8012ba8:	b992      	cbnz	r2, 8012bd0 <_dtoa_r+0xa00>
 8012baa:	9a07      	ldr	r2, [sp, #28]
 8012bac:	b982      	cbnz	r2, 8012bd0 <_dtoa_r+0xa00>
 8012bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012bb2:	d029      	beq.n	8012c08 <_dtoa_r+0xa38>
 8012bb4:	9b00      	ldr	r3, [sp, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	dd01      	ble.n	8012bbe <_dtoa_r+0x9ee>
 8012bba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012bbe:	9b05      	ldr	r3, [sp, #20]
 8012bc0:	1c5d      	adds	r5, r3, #1
 8012bc2:	f883 8000 	strb.w	r8, [r3]
 8012bc6:	e782      	b.n	8012ace <_dtoa_r+0x8fe>
 8012bc8:	4630      	mov	r0, r6
 8012bca:	e7c2      	b.n	8012b52 <_dtoa_r+0x982>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e7e3      	b.n	8012b98 <_dtoa_r+0x9c8>
 8012bd0:	9a00      	ldr	r2, [sp, #0]
 8012bd2:	2a00      	cmp	r2, #0
 8012bd4:	db04      	blt.n	8012be0 <_dtoa_r+0xa10>
 8012bd6:	d125      	bne.n	8012c24 <_dtoa_r+0xa54>
 8012bd8:	9a06      	ldr	r2, [sp, #24]
 8012bda:	bb1a      	cbnz	r2, 8012c24 <_dtoa_r+0xa54>
 8012bdc:	9a07      	ldr	r2, [sp, #28]
 8012bde:	bb0a      	cbnz	r2, 8012c24 <_dtoa_r+0xa54>
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	ddec      	ble.n	8012bbe <_dtoa_r+0x9ee>
 8012be4:	2201      	movs	r2, #1
 8012be6:	9904      	ldr	r1, [sp, #16]
 8012be8:	4620      	mov	r0, r4
 8012bea:	f000 fc69 	bl	80134c0 <__lshift>
 8012bee:	4639      	mov	r1, r7
 8012bf0:	9004      	str	r0, [sp, #16]
 8012bf2:	f000 fcb9 	bl	8013568 <__mcmp>
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	dc03      	bgt.n	8012c02 <_dtoa_r+0xa32>
 8012bfa:	d1e0      	bne.n	8012bbe <_dtoa_r+0x9ee>
 8012bfc:	f018 0f01 	tst.w	r8, #1
 8012c00:	d0dd      	beq.n	8012bbe <_dtoa_r+0x9ee>
 8012c02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c06:	d1d8      	bne.n	8012bba <_dtoa_r+0x9ea>
 8012c08:	9b05      	ldr	r3, [sp, #20]
 8012c0a:	9a05      	ldr	r2, [sp, #20]
 8012c0c:	1c5d      	adds	r5, r3, #1
 8012c0e:	2339      	movs	r3, #57	; 0x39
 8012c10:	7013      	strb	r3, [r2, #0]
 8012c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c16:	2b39      	cmp	r3, #57	; 0x39
 8012c18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012c1c:	d04f      	beq.n	8012cbe <_dtoa_r+0xaee>
 8012c1e:	3301      	adds	r3, #1
 8012c20:	7013      	strb	r3, [r2, #0]
 8012c22:	e754      	b.n	8012ace <_dtoa_r+0x8fe>
 8012c24:	9a05      	ldr	r2, [sp, #20]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f102 0501 	add.w	r5, r2, #1
 8012c2c:	dd06      	ble.n	8012c3c <_dtoa_r+0xa6c>
 8012c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c32:	d0e9      	beq.n	8012c08 <_dtoa_r+0xa38>
 8012c34:	f108 0801 	add.w	r8, r8, #1
 8012c38:	9b05      	ldr	r3, [sp, #20]
 8012c3a:	e7c2      	b.n	8012bc2 <_dtoa_r+0x9f2>
 8012c3c:	9a02      	ldr	r2, [sp, #8]
 8012c3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012c42:	eba5 030b 	sub.w	r3, r5, fp
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d021      	beq.n	8012c8e <_dtoa_r+0xabe>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	220a      	movs	r2, #10
 8012c4e:	9904      	ldr	r1, [sp, #16]
 8012c50:	4620      	mov	r0, r4
 8012c52:	f000 fabf 	bl	80131d4 <__multadd>
 8012c56:	45b1      	cmp	r9, r6
 8012c58:	9004      	str	r0, [sp, #16]
 8012c5a:	f04f 0300 	mov.w	r3, #0
 8012c5e:	f04f 020a 	mov.w	r2, #10
 8012c62:	4649      	mov	r1, r9
 8012c64:	4620      	mov	r0, r4
 8012c66:	d105      	bne.n	8012c74 <_dtoa_r+0xaa4>
 8012c68:	f000 fab4 	bl	80131d4 <__multadd>
 8012c6c:	4681      	mov	r9, r0
 8012c6e:	4606      	mov	r6, r0
 8012c70:	9505      	str	r5, [sp, #20]
 8012c72:	e776      	b.n	8012b62 <_dtoa_r+0x992>
 8012c74:	f000 faae 	bl	80131d4 <__multadd>
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4681      	mov	r9, r0
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	220a      	movs	r2, #10
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 faa7 	bl	80131d4 <__multadd>
 8012c86:	4606      	mov	r6, r0
 8012c88:	e7f2      	b.n	8012c70 <_dtoa_r+0xaa0>
 8012c8a:	f04f 0900 	mov.w	r9, #0
 8012c8e:	2201      	movs	r2, #1
 8012c90:	9904      	ldr	r1, [sp, #16]
 8012c92:	4620      	mov	r0, r4
 8012c94:	f000 fc14 	bl	80134c0 <__lshift>
 8012c98:	4639      	mov	r1, r7
 8012c9a:	9004      	str	r0, [sp, #16]
 8012c9c:	f000 fc64 	bl	8013568 <__mcmp>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	dcb6      	bgt.n	8012c12 <_dtoa_r+0xa42>
 8012ca4:	d102      	bne.n	8012cac <_dtoa_r+0xadc>
 8012ca6:	f018 0f01 	tst.w	r8, #1
 8012caa:	d1b2      	bne.n	8012c12 <_dtoa_r+0xa42>
 8012cac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012cb0:	2b30      	cmp	r3, #48	; 0x30
 8012cb2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012cb6:	f47f af0a 	bne.w	8012ace <_dtoa_r+0x8fe>
 8012cba:	4615      	mov	r5, r2
 8012cbc:	e7f6      	b.n	8012cac <_dtoa_r+0xadc>
 8012cbe:	4593      	cmp	fp, r2
 8012cc0:	d105      	bne.n	8012cce <_dtoa_r+0xafe>
 8012cc2:	2331      	movs	r3, #49	; 0x31
 8012cc4:	f10a 0a01 	add.w	sl, sl, #1
 8012cc8:	f88b 3000 	strb.w	r3, [fp]
 8012ccc:	e6ff      	b.n	8012ace <_dtoa_r+0x8fe>
 8012cce:	4615      	mov	r5, r2
 8012cd0:	e79f      	b.n	8012c12 <_dtoa_r+0xa42>
 8012cd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012d38 <_dtoa_r+0xb68>
 8012cd6:	e007      	b.n	8012ce8 <_dtoa_r+0xb18>
 8012cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cda:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012d3c <_dtoa_r+0xb6c>
 8012cde:	b11b      	cbz	r3, 8012ce8 <_dtoa_r+0xb18>
 8012ce0:	f10b 0308 	add.w	r3, fp, #8
 8012ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ce6:	6013      	str	r3, [r2, #0]
 8012ce8:	4658      	mov	r0, fp
 8012cea:	b017      	add	sp, #92	; 0x5c
 8012cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf0:	9b06      	ldr	r3, [sp, #24]
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	f77f ae35 	ble.w	8012962 <_dtoa_r+0x792>
 8012cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cfa:	9307      	str	r3, [sp, #28]
 8012cfc:	e649      	b.n	8012992 <_dtoa_r+0x7c2>
 8012cfe:	9b02      	ldr	r3, [sp, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	dc03      	bgt.n	8012d0c <_dtoa_r+0xb3c>
 8012d04:	9b06      	ldr	r3, [sp, #24]
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	f73f aecc 	bgt.w	8012aa4 <_dtoa_r+0x8d4>
 8012d0c:	465d      	mov	r5, fp
 8012d0e:	4639      	mov	r1, r7
 8012d10:	9804      	ldr	r0, [sp, #16]
 8012d12:	f7ff f9cf 	bl	80120b4 <quorem>
 8012d16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d1a:	f805 8b01 	strb.w	r8, [r5], #1
 8012d1e:	9a02      	ldr	r2, [sp, #8]
 8012d20:	eba5 030b 	sub.w	r3, r5, fp
 8012d24:	429a      	cmp	r2, r3
 8012d26:	ddb0      	ble.n	8012c8a <_dtoa_r+0xaba>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	220a      	movs	r2, #10
 8012d2c:	9904      	ldr	r1, [sp, #16]
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f000 fa50 	bl	80131d4 <__multadd>
 8012d34:	9004      	str	r0, [sp, #16]
 8012d36:	e7ea      	b.n	8012d0e <_dtoa_r+0xb3e>
 8012d38:	08016a4c 	.word	0x08016a4c
 8012d3c:	080167be 	.word	0x080167be

08012d40 <__sflush_r>:
 8012d40:	898a      	ldrh	r2, [r1, #12]
 8012d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d46:	4605      	mov	r5, r0
 8012d48:	0710      	lsls	r0, r2, #28
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	d458      	bmi.n	8012e00 <__sflush_r+0xc0>
 8012d4e:	684b      	ldr	r3, [r1, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dc05      	bgt.n	8012d60 <__sflush_r+0x20>
 8012d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	dc02      	bgt.n	8012d60 <__sflush_r+0x20>
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d62:	2e00      	cmp	r6, #0
 8012d64:	d0f9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012d66:	2300      	movs	r3, #0
 8012d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d6c:	682f      	ldr	r7, [r5, #0]
 8012d6e:	6a21      	ldr	r1, [r4, #32]
 8012d70:	602b      	str	r3, [r5, #0]
 8012d72:	d032      	beq.n	8012dda <__sflush_r+0x9a>
 8012d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d76:	89a3      	ldrh	r3, [r4, #12]
 8012d78:	075a      	lsls	r2, r3, #29
 8012d7a:	d505      	bpl.n	8012d88 <__sflush_r+0x48>
 8012d7c:	6863      	ldr	r3, [r4, #4]
 8012d7e:	1ac0      	subs	r0, r0, r3
 8012d80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d82:	b10b      	cbz	r3, 8012d88 <__sflush_r+0x48>
 8012d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d86:	1ac0      	subs	r0, r0, r3
 8012d88:	2300      	movs	r3, #0
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d8e:	6a21      	ldr	r1, [r4, #32]
 8012d90:	4628      	mov	r0, r5
 8012d92:	47b0      	blx	r6
 8012d94:	1c43      	adds	r3, r0, #1
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	d106      	bne.n	8012da8 <__sflush_r+0x68>
 8012d9a:	6829      	ldr	r1, [r5, #0]
 8012d9c:	291d      	cmp	r1, #29
 8012d9e:	d848      	bhi.n	8012e32 <__sflush_r+0xf2>
 8012da0:	4a29      	ldr	r2, [pc, #164]	; (8012e48 <__sflush_r+0x108>)
 8012da2:	40ca      	lsrs	r2, r1
 8012da4:	07d6      	lsls	r6, r2, #31
 8012da6:	d544      	bpl.n	8012e32 <__sflush_r+0xf2>
 8012da8:	2200      	movs	r2, #0
 8012daa:	6062      	str	r2, [r4, #4]
 8012dac:	04d9      	lsls	r1, r3, #19
 8012dae:	6922      	ldr	r2, [r4, #16]
 8012db0:	6022      	str	r2, [r4, #0]
 8012db2:	d504      	bpl.n	8012dbe <__sflush_r+0x7e>
 8012db4:	1c42      	adds	r2, r0, #1
 8012db6:	d101      	bne.n	8012dbc <__sflush_r+0x7c>
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	b903      	cbnz	r3, 8012dbe <__sflush_r+0x7e>
 8012dbc:	6560      	str	r0, [r4, #84]	; 0x54
 8012dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dc0:	602f      	str	r7, [r5, #0]
 8012dc2:	2900      	cmp	r1, #0
 8012dc4:	d0c9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dca:	4299      	cmp	r1, r3
 8012dcc:	d002      	beq.n	8012dd4 <__sflush_r+0x94>
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f000 fc9e 	bl	8013710 <_free_r>
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	6360      	str	r0, [r4, #52]	; 0x34
 8012dd8:	e7c0      	b.n	8012d5c <__sflush_r+0x1c>
 8012dda:	2301      	movs	r3, #1
 8012ddc:	4628      	mov	r0, r5
 8012dde:	47b0      	blx	r6
 8012de0:	1c41      	adds	r1, r0, #1
 8012de2:	d1c8      	bne.n	8012d76 <__sflush_r+0x36>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d0c5      	beq.n	8012d76 <__sflush_r+0x36>
 8012dea:	2b1d      	cmp	r3, #29
 8012dec:	d001      	beq.n	8012df2 <__sflush_r+0xb2>
 8012dee:	2b16      	cmp	r3, #22
 8012df0:	d101      	bne.n	8012df6 <__sflush_r+0xb6>
 8012df2:	602f      	str	r7, [r5, #0]
 8012df4:	e7b1      	b.n	8012d5a <__sflush_r+0x1a>
 8012df6:	89a3      	ldrh	r3, [r4, #12]
 8012df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfc:	81a3      	strh	r3, [r4, #12]
 8012dfe:	e7ad      	b.n	8012d5c <__sflush_r+0x1c>
 8012e00:	690f      	ldr	r7, [r1, #16]
 8012e02:	2f00      	cmp	r7, #0
 8012e04:	d0a9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012e06:	0793      	lsls	r3, r2, #30
 8012e08:	680e      	ldr	r6, [r1, #0]
 8012e0a:	bf08      	it	eq
 8012e0c:	694b      	ldreq	r3, [r1, #20]
 8012e0e:	600f      	str	r7, [r1, #0]
 8012e10:	bf18      	it	ne
 8012e12:	2300      	movne	r3, #0
 8012e14:	eba6 0807 	sub.w	r8, r6, r7
 8012e18:	608b      	str	r3, [r1, #8]
 8012e1a:	f1b8 0f00 	cmp.w	r8, #0
 8012e1e:	dd9c      	ble.n	8012d5a <__sflush_r+0x1a>
 8012e20:	4643      	mov	r3, r8
 8012e22:	463a      	mov	r2, r7
 8012e24:	6a21      	ldr	r1, [r4, #32]
 8012e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e28:	4628      	mov	r0, r5
 8012e2a:	47b0      	blx	r6
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	dc06      	bgt.n	8012e3e <__sflush_r+0xfe>
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e36:	81a3      	strh	r3, [r4, #12]
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e3c:	e78e      	b.n	8012d5c <__sflush_r+0x1c>
 8012e3e:	4407      	add	r7, r0
 8012e40:	eba8 0800 	sub.w	r8, r8, r0
 8012e44:	e7e9      	b.n	8012e1a <__sflush_r+0xda>
 8012e46:	bf00      	nop
 8012e48:	20400001 	.word	0x20400001

08012e4c <_fflush_r>:
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	690b      	ldr	r3, [r1, #16]
 8012e50:	4605      	mov	r5, r0
 8012e52:	460c      	mov	r4, r1
 8012e54:	b1db      	cbz	r3, 8012e8e <_fflush_r+0x42>
 8012e56:	b118      	cbz	r0, 8012e60 <_fflush_r+0x14>
 8012e58:	6983      	ldr	r3, [r0, #24]
 8012e5a:	b90b      	cbnz	r3, 8012e60 <_fflush_r+0x14>
 8012e5c:	f000 f860 	bl	8012f20 <__sinit>
 8012e60:	4b0c      	ldr	r3, [pc, #48]	; (8012e94 <_fflush_r+0x48>)
 8012e62:	429c      	cmp	r4, r3
 8012e64:	d109      	bne.n	8012e7a <_fflush_r+0x2e>
 8012e66:	686c      	ldr	r4, [r5, #4]
 8012e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e6c:	b17b      	cbz	r3, 8012e8e <_fflush_r+0x42>
 8012e6e:	4621      	mov	r1, r4
 8012e70:	4628      	mov	r0, r5
 8012e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e76:	f7ff bf63 	b.w	8012d40 <__sflush_r>
 8012e7a:	4b07      	ldr	r3, [pc, #28]	; (8012e98 <_fflush_r+0x4c>)
 8012e7c:	429c      	cmp	r4, r3
 8012e7e:	d101      	bne.n	8012e84 <_fflush_r+0x38>
 8012e80:	68ac      	ldr	r4, [r5, #8]
 8012e82:	e7f1      	b.n	8012e68 <_fflush_r+0x1c>
 8012e84:	4b05      	ldr	r3, [pc, #20]	; (8012e9c <_fflush_r+0x50>)
 8012e86:	429c      	cmp	r4, r3
 8012e88:	bf08      	it	eq
 8012e8a:	68ec      	ldreq	r4, [r5, #12]
 8012e8c:	e7ec      	b.n	8012e68 <_fflush_r+0x1c>
 8012e8e:	2000      	movs	r0, #0
 8012e90:	bd38      	pop	{r3, r4, r5, pc}
 8012e92:	bf00      	nop
 8012e94:	080167ec 	.word	0x080167ec
 8012e98:	0801680c 	.word	0x0801680c
 8012e9c:	080167cc 	.word	0x080167cc

08012ea0 <std>:
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	b510      	push	{r4, lr}
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8012eaa:	6083      	str	r3, [r0, #8]
 8012eac:	8181      	strh	r1, [r0, #12]
 8012eae:	6643      	str	r3, [r0, #100]	; 0x64
 8012eb0:	81c2      	strh	r2, [r0, #14]
 8012eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012eb6:	6183      	str	r3, [r0, #24]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	2208      	movs	r2, #8
 8012ebc:	305c      	adds	r0, #92	; 0x5c
 8012ebe:	f7fe fb15 	bl	80114ec <memset>
 8012ec2:	4b05      	ldr	r3, [pc, #20]	; (8012ed8 <std+0x38>)
 8012ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8012ec6:	4b05      	ldr	r3, [pc, #20]	; (8012edc <std+0x3c>)
 8012ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012eca:	4b05      	ldr	r3, [pc, #20]	; (8012ee0 <std+0x40>)
 8012ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ece:	4b05      	ldr	r3, [pc, #20]	; (8012ee4 <std+0x44>)
 8012ed0:	6224      	str	r4, [r4, #32]
 8012ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8012ed4:	bd10      	pop	{r4, pc}
 8012ed6:	bf00      	nop
 8012ed8:	08013da5 	.word	0x08013da5
 8012edc:	08013dc7 	.word	0x08013dc7
 8012ee0:	08013dff 	.word	0x08013dff
 8012ee4:	08013e23 	.word	0x08013e23

08012ee8 <_cleanup_r>:
 8012ee8:	4901      	ldr	r1, [pc, #4]	; (8012ef0 <_cleanup_r+0x8>)
 8012eea:	f000 b885 	b.w	8012ff8 <_fwalk_reent>
 8012eee:	bf00      	nop
 8012ef0:	08012e4d 	.word	0x08012e4d

08012ef4 <__sfmoreglue>:
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	1e4a      	subs	r2, r1, #1
 8012ef8:	2568      	movs	r5, #104	; 0x68
 8012efa:	4355      	muls	r5, r2
 8012efc:	460e      	mov	r6, r1
 8012efe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f02:	f000 fc53 	bl	80137ac <_malloc_r>
 8012f06:	4604      	mov	r4, r0
 8012f08:	b140      	cbz	r0, 8012f1c <__sfmoreglue+0x28>
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	e9c0 1600 	strd	r1, r6, [r0]
 8012f10:	300c      	adds	r0, #12
 8012f12:	60a0      	str	r0, [r4, #8]
 8012f14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f18:	f7fe fae8 	bl	80114ec <memset>
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	bd70      	pop	{r4, r5, r6, pc}

08012f20 <__sinit>:
 8012f20:	6983      	ldr	r3, [r0, #24]
 8012f22:	b510      	push	{r4, lr}
 8012f24:	4604      	mov	r4, r0
 8012f26:	bb33      	cbnz	r3, 8012f76 <__sinit+0x56>
 8012f28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012f2c:	6503      	str	r3, [r0, #80]	; 0x50
 8012f2e:	4b12      	ldr	r3, [pc, #72]	; (8012f78 <__sinit+0x58>)
 8012f30:	4a12      	ldr	r2, [pc, #72]	; (8012f7c <__sinit+0x5c>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	6282      	str	r2, [r0, #40]	; 0x28
 8012f36:	4298      	cmp	r0, r3
 8012f38:	bf04      	itt	eq
 8012f3a:	2301      	moveq	r3, #1
 8012f3c:	6183      	streq	r3, [r0, #24]
 8012f3e:	f000 f81f 	bl	8012f80 <__sfp>
 8012f42:	6060      	str	r0, [r4, #4]
 8012f44:	4620      	mov	r0, r4
 8012f46:	f000 f81b 	bl	8012f80 <__sfp>
 8012f4a:	60a0      	str	r0, [r4, #8]
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 f817 	bl	8012f80 <__sfp>
 8012f52:	2200      	movs	r2, #0
 8012f54:	60e0      	str	r0, [r4, #12]
 8012f56:	2104      	movs	r1, #4
 8012f58:	6860      	ldr	r0, [r4, #4]
 8012f5a:	f7ff ffa1 	bl	8012ea0 <std>
 8012f5e:	2201      	movs	r2, #1
 8012f60:	2109      	movs	r1, #9
 8012f62:	68a0      	ldr	r0, [r4, #8]
 8012f64:	f7ff ff9c 	bl	8012ea0 <std>
 8012f68:	2202      	movs	r2, #2
 8012f6a:	2112      	movs	r1, #18
 8012f6c:	68e0      	ldr	r0, [r4, #12]
 8012f6e:	f7ff ff97 	bl	8012ea0 <std>
 8012f72:	2301      	movs	r3, #1
 8012f74:	61a3      	str	r3, [r4, #24]
 8012f76:	bd10      	pop	{r4, pc}
 8012f78:	08016788 	.word	0x08016788
 8012f7c:	08012ee9 	.word	0x08012ee9

08012f80 <__sfp>:
 8012f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f82:	4b1b      	ldr	r3, [pc, #108]	; (8012ff0 <__sfp+0x70>)
 8012f84:	681e      	ldr	r6, [r3, #0]
 8012f86:	69b3      	ldr	r3, [r6, #24]
 8012f88:	4607      	mov	r7, r0
 8012f8a:	b913      	cbnz	r3, 8012f92 <__sfp+0x12>
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	f7ff ffc7 	bl	8012f20 <__sinit>
 8012f92:	3648      	adds	r6, #72	; 0x48
 8012f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	d503      	bpl.n	8012fa4 <__sfp+0x24>
 8012f9c:	6833      	ldr	r3, [r6, #0]
 8012f9e:	b133      	cbz	r3, 8012fae <__sfp+0x2e>
 8012fa0:	6836      	ldr	r6, [r6, #0]
 8012fa2:	e7f7      	b.n	8012f94 <__sfp+0x14>
 8012fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fa8:	b16d      	cbz	r5, 8012fc6 <__sfp+0x46>
 8012faa:	3468      	adds	r4, #104	; 0x68
 8012fac:	e7f4      	b.n	8012f98 <__sfp+0x18>
 8012fae:	2104      	movs	r1, #4
 8012fb0:	4638      	mov	r0, r7
 8012fb2:	f7ff ff9f 	bl	8012ef4 <__sfmoreglue>
 8012fb6:	6030      	str	r0, [r6, #0]
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d1f1      	bne.n	8012fa0 <__sfp+0x20>
 8012fbc:	230c      	movs	r3, #12
 8012fbe:	603b      	str	r3, [r7, #0]
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc6:	4b0b      	ldr	r3, [pc, #44]	; (8012ff4 <__sfp+0x74>)
 8012fc8:	6665      	str	r5, [r4, #100]	; 0x64
 8012fca:	e9c4 5500 	strd	r5, r5, [r4]
 8012fce:	60a5      	str	r5, [r4, #8]
 8012fd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012fd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012fd8:	2208      	movs	r2, #8
 8012fda:	4629      	mov	r1, r5
 8012fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fe0:	f7fe fa84 	bl	80114ec <memset>
 8012fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fec:	e7e9      	b.n	8012fc2 <__sfp+0x42>
 8012fee:	bf00      	nop
 8012ff0:	08016788 	.word	0x08016788
 8012ff4:	ffff0001 	.word	0xffff0001

08012ff8 <_fwalk_reent>:
 8012ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ffc:	4680      	mov	r8, r0
 8012ffe:	4689      	mov	r9, r1
 8013000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013004:	2600      	movs	r6, #0
 8013006:	b914      	cbnz	r4, 801300e <_fwalk_reent+0x16>
 8013008:	4630      	mov	r0, r6
 801300a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801300e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013012:	3f01      	subs	r7, #1
 8013014:	d501      	bpl.n	801301a <_fwalk_reent+0x22>
 8013016:	6824      	ldr	r4, [r4, #0]
 8013018:	e7f5      	b.n	8013006 <_fwalk_reent+0xe>
 801301a:	89ab      	ldrh	r3, [r5, #12]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d907      	bls.n	8013030 <_fwalk_reent+0x38>
 8013020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013024:	3301      	adds	r3, #1
 8013026:	d003      	beq.n	8013030 <_fwalk_reent+0x38>
 8013028:	4629      	mov	r1, r5
 801302a:	4640      	mov	r0, r8
 801302c:	47c8      	blx	r9
 801302e:	4306      	orrs	r6, r0
 8013030:	3568      	adds	r5, #104	; 0x68
 8013032:	e7ee      	b.n	8013012 <_fwalk_reent+0x1a>

08013034 <_localeconv_r>:
 8013034:	4b04      	ldr	r3, [pc, #16]	; (8013048 <_localeconv_r+0x14>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6a18      	ldr	r0, [r3, #32]
 801303a:	4b04      	ldr	r3, [pc, #16]	; (801304c <_localeconv_r+0x18>)
 801303c:	2800      	cmp	r0, #0
 801303e:	bf08      	it	eq
 8013040:	4618      	moveq	r0, r3
 8013042:	30f0      	adds	r0, #240	; 0xf0
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20001c38 	.word	0x20001c38
 801304c:	20001c9c 	.word	0x20001c9c

08013050 <__swhatbuf_r>:
 8013050:	b570      	push	{r4, r5, r6, lr}
 8013052:	460e      	mov	r6, r1
 8013054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013058:	2900      	cmp	r1, #0
 801305a:	b096      	sub	sp, #88	; 0x58
 801305c:	4614      	mov	r4, r2
 801305e:	461d      	mov	r5, r3
 8013060:	da07      	bge.n	8013072 <__swhatbuf_r+0x22>
 8013062:	2300      	movs	r3, #0
 8013064:	602b      	str	r3, [r5, #0]
 8013066:	89b3      	ldrh	r3, [r6, #12]
 8013068:	061a      	lsls	r2, r3, #24
 801306a:	d410      	bmi.n	801308e <__swhatbuf_r+0x3e>
 801306c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013070:	e00e      	b.n	8013090 <__swhatbuf_r+0x40>
 8013072:	466a      	mov	r2, sp
 8013074:	f000 fefc 	bl	8013e70 <_fstat_r>
 8013078:	2800      	cmp	r0, #0
 801307a:	dbf2      	blt.n	8013062 <__swhatbuf_r+0x12>
 801307c:	9a01      	ldr	r2, [sp, #4]
 801307e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013086:	425a      	negs	r2, r3
 8013088:	415a      	adcs	r2, r3
 801308a:	602a      	str	r2, [r5, #0]
 801308c:	e7ee      	b.n	801306c <__swhatbuf_r+0x1c>
 801308e:	2340      	movs	r3, #64	; 0x40
 8013090:	2000      	movs	r0, #0
 8013092:	6023      	str	r3, [r4, #0]
 8013094:	b016      	add	sp, #88	; 0x58
 8013096:	bd70      	pop	{r4, r5, r6, pc}

08013098 <__smakebuf_r>:
 8013098:	898b      	ldrh	r3, [r1, #12]
 801309a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801309c:	079d      	lsls	r5, r3, #30
 801309e:	4606      	mov	r6, r0
 80130a0:	460c      	mov	r4, r1
 80130a2:	d507      	bpl.n	80130b4 <__smakebuf_r+0x1c>
 80130a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	6123      	str	r3, [r4, #16]
 80130ac:	2301      	movs	r3, #1
 80130ae:	6163      	str	r3, [r4, #20]
 80130b0:	b002      	add	sp, #8
 80130b2:	bd70      	pop	{r4, r5, r6, pc}
 80130b4:	ab01      	add	r3, sp, #4
 80130b6:	466a      	mov	r2, sp
 80130b8:	f7ff ffca 	bl	8013050 <__swhatbuf_r>
 80130bc:	9900      	ldr	r1, [sp, #0]
 80130be:	4605      	mov	r5, r0
 80130c0:	4630      	mov	r0, r6
 80130c2:	f000 fb73 	bl	80137ac <_malloc_r>
 80130c6:	b948      	cbnz	r0, 80130dc <__smakebuf_r+0x44>
 80130c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130cc:	059a      	lsls	r2, r3, #22
 80130ce:	d4ef      	bmi.n	80130b0 <__smakebuf_r+0x18>
 80130d0:	f023 0303 	bic.w	r3, r3, #3
 80130d4:	f043 0302 	orr.w	r3, r3, #2
 80130d8:	81a3      	strh	r3, [r4, #12]
 80130da:	e7e3      	b.n	80130a4 <__smakebuf_r+0xc>
 80130dc:	4b0d      	ldr	r3, [pc, #52]	; (8013114 <__smakebuf_r+0x7c>)
 80130de:	62b3      	str	r3, [r6, #40]	; 0x28
 80130e0:	89a3      	ldrh	r3, [r4, #12]
 80130e2:	6020      	str	r0, [r4, #0]
 80130e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130e8:	81a3      	strh	r3, [r4, #12]
 80130ea:	9b00      	ldr	r3, [sp, #0]
 80130ec:	6163      	str	r3, [r4, #20]
 80130ee:	9b01      	ldr	r3, [sp, #4]
 80130f0:	6120      	str	r0, [r4, #16]
 80130f2:	b15b      	cbz	r3, 801310c <__smakebuf_r+0x74>
 80130f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130f8:	4630      	mov	r0, r6
 80130fa:	f000 fecb 	bl	8013e94 <_isatty_r>
 80130fe:	b128      	cbz	r0, 801310c <__smakebuf_r+0x74>
 8013100:	89a3      	ldrh	r3, [r4, #12]
 8013102:	f023 0303 	bic.w	r3, r3, #3
 8013106:	f043 0301 	orr.w	r3, r3, #1
 801310a:	81a3      	strh	r3, [r4, #12]
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	431d      	orrs	r5, r3
 8013110:	81a5      	strh	r5, [r4, #12]
 8013112:	e7cd      	b.n	80130b0 <__smakebuf_r+0x18>
 8013114:	08012ee9 	.word	0x08012ee9

08013118 <malloc>:
 8013118:	4b02      	ldr	r3, [pc, #8]	; (8013124 <malloc+0xc>)
 801311a:	4601      	mov	r1, r0
 801311c:	6818      	ldr	r0, [r3, #0]
 801311e:	f000 bb45 	b.w	80137ac <_malloc_r>
 8013122:	bf00      	nop
 8013124:	20001c38 	.word	0x20001c38

08013128 <memcpy>:
 8013128:	b510      	push	{r4, lr}
 801312a:	1e43      	subs	r3, r0, #1
 801312c:	440a      	add	r2, r1
 801312e:	4291      	cmp	r1, r2
 8013130:	d100      	bne.n	8013134 <memcpy+0xc>
 8013132:	bd10      	pop	{r4, pc}
 8013134:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013138:	f803 4f01 	strb.w	r4, [r3, #1]!
 801313c:	e7f7      	b.n	801312e <memcpy+0x6>

0801313e <_Balloc>:
 801313e:	b570      	push	{r4, r5, r6, lr}
 8013140:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013142:	4604      	mov	r4, r0
 8013144:	460e      	mov	r6, r1
 8013146:	b93d      	cbnz	r5, 8013158 <_Balloc+0x1a>
 8013148:	2010      	movs	r0, #16
 801314a:	f7ff ffe5 	bl	8013118 <malloc>
 801314e:	6260      	str	r0, [r4, #36]	; 0x24
 8013150:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013154:	6005      	str	r5, [r0, #0]
 8013156:	60c5      	str	r5, [r0, #12]
 8013158:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801315a:	68eb      	ldr	r3, [r5, #12]
 801315c:	b183      	cbz	r3, 8013180 <_Balloc+0x42>
 801315e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013166:	b9b8      	cbnz	r0, 8013198 <_Balloc+0x5a>
 8013168:	2101      	movs	r1, #1
 801316a:	fa01 f506 	lsl.w	r5, r1, r6
 801316e:	1d6a      	adds	r2, r5, #5
 8013170:	0092      	lsls	r2, r2, #2
 8013172:	4620      	mov	r0, r4
 8013174:	f000 fabe 	bl	80136f4 <_calloc_r>
 8013178:	b160      	cbz	r0, 8013194 <_Balloc+0x56>
 801317a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801317e:	e00e      	b.n	801319e <_Balloc+0x60>
 8013180:	2221      	movs	r2, #33	; 0x21
 8013182:	2104      	movs	r1, #4
 8013184:	4620      	mov	r0, r4
 8013186:	f000 fab5 	bl	80136f4 <_calloc_r>
 801318a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801318c:	60e8      	str	r0, [r5, #12]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1e4      	bne.n	801315e <_Balloc+0x20>
 8013194:	2000      	movs	r0, #0
 8013196:	bd70      	pop	{r4, r5, r6, pc}
 8013198:	6802      	ldr	r2, [r0, #0]
 801319a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801319e:	2300      	movs	r3, #0
 80131a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131a4:	e7f7      	b.n	8013196 <_Balloc+0x58>

080131a6 <_Bfree>:
 80131a6:	b570      	push	{r4, r5, r6, lr}
 80131a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80131aa:	4606      	mov	r6, r0
 80131ac:	460d      	mov	r5, r1
 80131ae:	b93c      	cbnz	r4, 80131c0 <_Bfree+0x1a>
 80131b0:	2010      	movs	r0, #16
 80131b2:	f7ff ffb1 	bl	8013118 <malloc>
 80131b6:	6270      	str	r0, [r6, #36]	; 0x24
 80131b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131bc:	6004      	str	r4, [r0, #0]
 80131be:	60c4      	str	r4, [r0, #12]
 80131c0:	b13d      	cbz	r5, 80131d2 <_Bfree+0x2c>
 80131c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80131c4:	686a      	ldr	r2, [r5, #4]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131cc:	6029      	str	r1, [r5, #0]
 80131ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80131d2:	bd70      	pop	{r4, r5, r6, pc}

080131d4 <__multadd>:
 80131d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d8:	690d      	ldr	r5, [r1, #16]
 80131da:	461f      	mov	r7, r3
 80131dc:	4606      	mov	r6, r0
 80131de:	460c      	mov	r4, r1
 80131e0:	f101 0c14 	add.w	ip, r1, #20
 80131e4:	2300      	movs	r3, #0
 80131e6:	f8dc 0000 	ldr.w	r0, [ip]
 80131ea:	b281      	uxth	r1, r0
 80131ec:	fb02 7101 	mla	r1, r2, r1, r7
 80131f0:	0c0f      	lsrs	r7, r1, #16
 80131f2:	0c00      	lsrs	r0, r0, #16
 80131f4:	fb02 7000 	mla	r0, r2, r0, r7
 80131f8:	b289      	uxth	r1, r1
 80131fa:	3301      	adds	r3, #1
 80131fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013200:	429d      	cmp	r5, r3
 8013202:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013206:	f84c 1b04 	str.w	r1, [ip], #4
 801320a:	dcec      	bgt.n	80131e6 <__multadd+0x12>
 801320c:	b1d7      	cbz	r7, 8013244 <__multadd+0x70>
 801320e:	68a3      	ldr	r3, [r4, #8]
 8013210:	42ab      	cmp	r3, r5
 8013212:	dc12      	bgt.n	801323a <__multadd+0x66>
 8013214:	6861      	ldr	r1, [r4, #4]
 8013216:	4630      	mov	r0, r6
 8013218:	3101      	adds	r1, #1
 801321a:	f7ff ff90 	bl	801313e <_Balloc>
 801321e:	6922      	ldr	r2, [r4, #16]
 8013220:	3202      	adds	r2, #2
 8013222:	f104 010c 	add.w	r1, r4, #12
 8013226:	4680      	mov	r8, r0
 8013228:	0092      	lsls	r2, r2, #2
 801322a:	300c      	adds	r0, #12
 801322c:	f7ff ff7c 	bl	8013128 <memcpy>
 8013230:	4621      	mov	r1, r4
 8013232:	4630      	mov	r0, r6
 8013234:	f7ff ffb7 	bl	80131a6 <_Bfree>
 8013238:	4644      	mov	r4, r8
 801323a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801323e:	3501      	adds	r5, #1
 8013240:	615f      	str	r7, [r3, #20]
 8013242:	6125      	str	r5, [r4, #16]
 8013244:	4620      	mov	r0, r4
 8013246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801324a <__hi0bits>:
 801324a:	0c02      	lsrs	r2, r0, #16
 801324c:	0412      	lsls	r2, r2, #16
 801324e:	4603      	mov	r3, r0
 8013250:	b9b2      	cbnz	r2, 8013280 <__hi0bits+0x36>
 8013252:	0403      	lsls	r3, r0, #16
 8013254:	2010      	movs	r0, #16
 8013256:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801325a:	bf04      	itt	eq
 801325c:	021b      	lsleq	r3, r3, #8
 801325e:	3008      	addeq	r0, #8
 8013260:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013264:	bf04      	itt	eq
 8013266:	011b      	lsleq	r3, r3, #4
 8013268:	3004      	addeq	r0, #4
 801326a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801326e:	bf04      	itt	eq
 8013270:	009b      	lsleq	r3, r3, #2
 8013272:	3002      	addeq	r0, #2
 8013274:	2b00      	cmp	r3, #0
 8013276:	db06      	blt.n	8013286 <__hi0bits+0x3c>
 8013278:	005b      	lsls	r3, r3, #1
 801327a:	d503      	bpl.n	8013284 <__hi0bits+0x3a>
 801327c:	3001      	adds	r0, #1
 801327e:	4770      	bx	lr
 8013280:	2000      	movs	r0, #0
 8013282:	e7e8      	b.n	8013256 <__hi0bits+0xc>
 8013284:	2020      	movs	r0, #32
 8013286:	4770      	bx	lr

08013288 <__lo0bits>:
 8013288:	6803      	ldr	r3, [r0, #0]
 801328a:	f013 0207 	ands.w	r2, r3, #7
 801328e:	4601      	mov	r1, r0
 8013290:	d00b      	beq.n	80132aa <__lo0bits+0x22>
 8013292:	07da      	lsls	r2, r3, #31
 8013294:	d423      	bmi.n	80132de <__lo0bits+0x56>
 8013296:	0798      	lsls	r0, r3, #30
 8013298:	bf49      	itett	mi
 801329a:	085b      	lsrmi	r3, r3, #1
 801329c:	089b      	lsrpl	r3, r3, #2
 801329e:	2001      	movmi	r0, #1
 80132a0:	600b      	strmi	r3, [r1, #0]
 80132a2:	bf5c      	itt	pl
 80132a4:	600b      	strpl	r3, [r1, #0]
 80132a6:	2002      	movpl	r0, #2
 80132a8:	4770      	bx	lr
 80132aa:	b298      	uxth	r0, r3
 80132ac:	b9a8      	cbnz	r0, 80132da <__lo0bits+0x52>
 80132ae:	0c1b      	lsrs	r3, r3, #16
 80132b0:	2010      	movs	r0, #16
 80132b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132b6:	bf04      	itt	eq
 80132b8:	0a1b      	lsreq	r3, r3, #8
 80132ba:	3008      	addeq	r0, #8
 80132bc:	071a      	lsls	r2, r3, #28
 80132be:	bf04      	itt	eq
 80132c0:	091b      	lsreq	r3, r3, #4
 80132c2:	3004      	addeq	r0, #4
 80132c4:	079a      	lsls	r2, r3, #30
 80132c6:	bf04      	itt	eq
 80132c8:	089b      	lsreq	r3, r3, #2
 80132ca:	3002      	addeq	r0, #2
 80132cc:	07da      	lsls	r2, r3, #31
 80132ce:	d402      	bmi.n	80132d6 <__lo0bits+0x4e>
 80132d0:	085b      	lsrs	r3, r3, #1
 80132d2:	d006      	beq.n	80132e2 <__lo0bits+0x5a>
 80132d4:	3001      	adds	r0, #1
 80132d6:	600b      	str	r3, [r1, #0]
 80132d8:	4770      	bx	lr
 80132da:	4610      	mov	r0, r2
 80132dc:	e7e9      	b.n	80132b2 <__lo0bits+0x2a>
 80132de:	2000      	movs	r0, #0
 80132e0:	4770      	bx	lr
 80132e2:	2020      	movs	r0, #32
 80132e4:	4770      	bx	lr

080132e6 <__i2b>:
 80132e6:	b510      	push	{r4, lr}
 80132e8:	460c      	mov	r4, r1
 80132ea:	2101      	movs	r1, #1
 80132ec:	f7ff ff27 	bl	801313e <_Balloc>
 80132f0:	2201      	movs	r2, #1
 80132f2:	6144      	str	r4, [r0, #20]
 80132f4:	6102      	str	r2, [r0, #16]
 80132f6:	bd10      	pop	{r4, pc}

080132f8 <__multiply>:
 80132f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	4614      	mov	r4, r2
 80132fe:	690a      	ldr	r2, [r1, #16]
 8013300:	6923      	ldr	r3, [r4, #16]
 8013302:	429a      	cmp	r2, r3
 8013304:	bfb8      	it	lt
 8013306:	460b      	movlt	r3, r1
 8013308:	4688      	mov	r8, r1
 801330a:	bfbc      	itt	lt
 801330c:	46a0      	movlt	r8, r4
 801330e:	461c      	movlt	r4, r3
 8013310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013314:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013318:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801331c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013320:	eb07 0609 	add.w	r6, r7, r9
 8013324:	42b3      	cmp	r3, r6
 8013326:	bfb8      	it	lt
 8013328:	3101      	addlt	r1, #1
 801332a:	f7ff ff08 	bl	801313e <_Balloc>
 801332e:	f100 0514 	add.w	r5, r0, #20
 8013332:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013336:	462b      	mov	r3, r5
 8013338:	2200      	movs	r2, #0
 801333a:	4573      	cmp	r3, lr
 801333c:	d316      	bcc.n	801336c <__multiply+0x74>
 801333e:	f104 0214 	add.w	r2, r4, #20
 8013342:	f108 0114 	add.w	r1, r8, #20
 8013346:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801334a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	9b00      	ldr	r3, [sp, #0]
 8013352:	9201      	str	r2, [sp, #4]
 8013354:	4293      	cmp	r3, r2
 8013356:	d80c      	bhi.n	8013372 <__multiply+0x7a>
 8013358:	2e00      	cmp	r6, #0
 801335a:	dd03      	ble.n	8013364 <__multiply+0x6c>
 801335c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013360:	2b00      	cmp	r3, #0
 8013362:	d05d      	beq.n	8013420 <__multiply+0x128>
 8013364:	6106      	str	r6, [r0, #16]
 8013366:	b003      	add	sp, #12
 8013368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801336c:	f843 2b04 	str.w	r2, [r3], #4
 8013370:	e7e3      	b.n	801333a <__multiply+0x42>
 8013372:	f8b2 b000 	ldrh.w	fp, [r2]
 8013376:	f1bb 0f00 	cmp.w	fp, #0
 801337a:	d023      	beq.n	80133c4 <__multiply+0xcc>
 801337c:	4689      	mov	r9, r1
 801337e:	46ac      	mov	ip, r5
 8013380:	f04f 0800 	mov.w	r8, #0
 8013384:	f859 4b04 	ldr.w	r4, [r9], #4
 8013388:	f8dc a000 	ldr.w	sl, [ip]
 801338c:	b2a3      	uxth	r3, r4
 801338e:	fa1f fa8a 	uxth.w	sl, sl
 8013392:	fb0b a303 	mla	r3, fp, r3, sl
 8013396:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801339a:	f8dc 4000 	ldr.w	r4, [ip]
 801339e:	4443      	add	r3, r8
 80133a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133a4:	fb0b 840a 	mla	r4, fp, sl, r8
 80133a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80133ac:	46e2      	mov	sl, ip
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133b4:	454f      	cmp	r7, r9
 80133b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133ba:	f84a 3b04 	str.w	r3, [sl], #4
 80133be:	d82b      	bhi.n	8013418 <__multiply+0x120>
 80133c0:	f8cc 8004 	str.w	r8, [ip, #4]
 80133c4:	9b01      	ldr	r3, [sp, #4]
 80133c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80133ca:	3204      	adds	r2, #4
 80133cc:	f1ba 0f00 	cmp.w	sl, #0
 80133d0:	d020      	beq.n	8013414 <__multiply+0x11c>
 80133d2:	682b      	ldr	r3, [r5, #0]
 80133d4:	4689      	mov	r9, r1
 80133d6:	46a8      	mov	r8, r5
 80133d8:	f04f 0b00 	mov.w	fp, #0
 80133dc:	f8b9 c000 	ldrh.w	ip, [r9]
 80133e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80133e4:	fb0a 440c 	mla	r4, sl, ip, r4
 80133e8:	445c      	add	r4, fp
 80133ea:	46c4      	mov	ip, r8
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133f2:	f84c 3b04 	str.w	r3, [ip], #4
 80133f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80133fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80133fe:	0c1b      	lsrs	r3, r3, #16
 8013400:	fb0a b303 	mla	r3, sl, r3, fp
 8013404:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013408:	454f      	cmp	r7, r9
 801340a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801340e:	d805      	bhi.n	801341c <__multiply+0x124>
 8013410:	f8c8 3004 	str.w	r3, [r8, #4]
 8013414:	3504      	adds	r5, #4
 8013416:	e79b      	b.n	8013350 <__multiply+0x58>
 8013418:	46d4      	mov	ip, sl
 801341a:	e7b3      	b.n	8013384 <__multiply+0x8c>
 801341c:	46e0      	mov	r8, ip
 801341e:	e7dd      	b.n	80133dc <__multiply+0xe4>
 8013420:	3e01      	subs	r6, #1
 8013422:	e799      	b.n	8013358 <__multiply+0x60>

08013424 <__pow5mult>:
 8013424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013428:	4615      	mov	r5, r2
 801342a:	f012 0203 	ands.w	r2, r2, #3
 801342e:	4606      	mov	r6, r0
 8013430:	460f      	mov	r7, r1
 8013432:	d007      	beq.n	8013444 <__pow5mult+0x20>
 8013434:	3a01      	subs	r2, #1
 8013436:	4c21      	ldr	r4, [pc, #132]	; (80134bc <__pow5mult+0x98>)
 8013438:	2300      	movs	r3, #0
 801343a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801343e:	f7ff fec9 	bl	80131d4 <__multadd>
 8013442:	4607      	mov	r7, r0
 8013444:	10ad      	asrs	r5, r5, #2
 8013446:	d035      	beq.n	80134b4 <__pow5mult+0x90>
 8013448:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801344a:	b93c      	cbnz	r4, 801345c <__pow5mult+0x38>
 801344c:	2010      	movs	r0, #16
 801344e:	f7ff fe63 	bl	8013118 <malloc>
 8013452:	6270      	str	r0, [r6, #36]	; 0x24
 8013454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013458:	6004      	str	r4, [r0, #0]
 801345a:	60c4      	str	r4, [r0, #12]
 801345c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013464:	b94c      	cbnz	r4, 801347a <__pow5mult+0x56>
 8013466:	f240 2171 	movw	r1, #625	; 0x271
 801346a:	4630      	mov	r0, r6
 801346c:	f7ff ff3b 	bl	80132e6 <__i2b>
 8013470:	2300      	movs	r3, #0
 8013472:	f8c8 0008 	str.w	r0, [r8, #8]
 8013476:	4604      	mov	r4, r0
 8013478:	6003      	str	r3, [r0, #0]
 801347a:	f04f 0800 	mov.w	r8, #0
 801347e:	07eb      	lsls	r3, r5, #31
 8013480:	d50a      	bpl.n	8013498 <__pow5mult+0x74>
 8013482:	4639      	mov	r1, r7
 8013484:	4622      	mov	r2, r4
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ff36 	bl	80132f8 <__multiply>
 801348c:	4639      	mov	r1, r7
 801348e:	4681      	mov	r9, r0
 8013490:	4630      	mov	r0, r6
 8013492:	f7ff fe88 	bl	80131a6 <_Bfree>
 8013496:	464f      	mov	r7, r9
 8013498:	106d      	asrs	r5, r5, #1
 801349a:	d00b      	beq.n	80134b4 <__pow5mult+0x90>
 801349c:	6820      	ldr	r0, [r4, #0]
 801349e:	b938      	cbnz	r0, 80134b0 <__pow5mult+0x8c>
 80134a0:	4622      	mov	r2, r4
 80134a2:	4621      	mov	r1, r4
 80134a4:	4630      	mov	r0, r6
 80134a6:	f7ff ff27 	bl	80132f8 <__multiply>
 80134aa:	6020      	str	r0, [r4, #0]
 80134ac:	f8c0 8000 	str.w	r8, [r0]
 80134b0:	4604      	mov	r4, r0
 80134b2:	e7e4      	b.n	801347e <__pow5mult+0x5a>
 80134b4:	4638      	mov	r0, r7
 80134b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ba:	bf00      	nop
 80134bc:	08016920 	.word	0x08016920

080134c0 <__lshift>:
 80134c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134c4:	460c      	mov	r4, r1
 80134c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134ca:	6923      	ldr	r3, [r4, #16]
 80134cc:	6849      	ldr	r1, [r1, #4]
 80134ce:	eb0a 0903 	add.w	r9, sl, r3
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	4607      	mov	r7, r0
 80134d6:	4616      	mov	r6, r2
 80134d8:	f109 0501 	add.w	r5, r9, #1
 80134dc:	42ab      	cmp	r3, r5
 80134de:	db32      	blt.n	8013546 <__lshift+0x86>
 80134e0:	4638      	mov	r0, r7
 80134e2:	f7ff fe2c 	bl	801313e <_Balloc>
 80134e6:	2300      	movs	r3, #0
 80134e8:	4680      	mov	r8, r0
 80134ea:	f100 0114 	add.w	r1, r0, #20
 80134ee:	461a      	mov	r2, r3
 80134f0:	4553      	cmp	r3, sl
 80134f2:	db2b      	blt.n	801354c <__lshift+0x8c>
 80134f4:	6920      	ldr	r0, [r4, #16]
 80134f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80134fa:	f104 0314 	add.w	r3, r4, #20
 80134fe:	f016 021f 	ands.w	r2, r6, #31
 8013502:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013506:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801350a:	d025      	beq.n	8013558 <__lshift+0x98>
 801350c:	f1c2 0e20 	rsb	lr, r2, #32
 8013510:	2000      	movs	r0, #0
 8013512:	681e      	ldr	r6, [r3, #0]
 8013514:	468a      	mov	sl, r1
 8013516:	4096      	lsls	r6, r2
 8013518:	4330      	orrs	r0, r6
 801351a:	f84a 0b04 	str.w	r0, [sl], #4
 801351e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013522:	459c      	cmp	ip, r3
 8013524:	fa20 f00e 	lsr.w	r0, r0, lr
 8013528:	d814      	bhi.n	8013554 <__lshift+0x94>
 801352a:	6048      	str	r0, [r1, #4]
 801352c:	b108      	cbz	r0, 8013532 <__lshift+0x72>
 801352e:	f109 0502 	add.w	r5, r9, #2
 8013532:	3d01      	subs	r5, #1
 8013534:	4638      	mov	r0, r7
 8013536:	f8c8 5010 	str.w	r5, [r8, #16]
 801353a:	4621      	mov	r1, r4
 801353c:	f7ff fe33 	bl	80131a6 <_Bfree>
 8013540:	4640      	mov	r0, r8
 8013542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013546:	3101      	adds	r1, #1
 8013548:	005b      	lsls	r3, r3, #1
 801354a:	e7c7      	b.n	80134dc <__lshift+0x1c>
 801354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013550:	3301      	adds	r3, #1
 8013552:	e7cd      	b.n	80134f0 <__lshift+0x30>
 8013554:	4651      	mov	r1, sl
 8013556:	e7dc      	b.n	8013512 <__lshift+0x52>
 8013558:	3904      	subs	r1, #4
 801355a:	f853 2b04 	ldr.w	r2, [r3], #4
 801355e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013562:	459c      	cmp	ip, r3
 8013564:	d8f9      	bhi.n	801355a <__lshift+0x9a>
 8013566:	e7e4      	b.n	8013532 <__lshift+0x72>

08013568 <__mcmp>:
 8013568:	6903      	ldr	r3, [r0, #16]
 801356a:	690a      	ldr	r2, [r1, #16]
 801356c:	1a9b      	subs	r3, r3, r2
 801356e:	b530      	push	{r4, r5, lr}
 8013570:	d10c      	bne.n	801358c <__mcmp+0x24>
 8013572:	0092      	lsls	r2, r2, #2
 8013574:	3014      	adds	r0, #20
 8013576:	3114      	adds	r1, #20
 8013578:	1884      	adds	r4, r0, r2
 801357a:	4411      	add	r1, r2
 801357c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013584:	4295      	cmp	r5, r2
 8013586:	d003      	beq.n	8013590 <__mcmp+0x28>
 8013588:	d305      	bcc.n	8013596 <__mcmp+0x2e>
 801358a:	2301      	movs	r3, #1
 801358c:	4618      	mov	r0, r3
 801358e:	bd30      	pop	{r4, r5, pc}
 8013590:	42a0      	cmp	r0, r4
 8013592:	d3f3      	bcc.n	801357c <__mcmp+0x14>
 8013594:	e7fa      	b.n	801358c <__mcmp+0x24>
 8013596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801359a:	e7f7      	b.n	801358c <__mcmp+0x24>

0801359c <__mdiff>:
 801359c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135a0:	460d      	mov	r5, r1
 80135a2:	4607      	mov	r7, r0
 80135a4:	4611      	mov	r1, r2
 80135a6:	4628      	mov	r0, r5
 80135a8:	4614      	mov	r4, r2
 80135aa:	f7ff ffdd 	bl	8013568 <__mcmp>
 80135ae:	1e06      	subs	r6, r0, #0
 80135b0:	d108      	bne.n	80135c4 <__mdiff+0x28>
 80135b2:	4631      	mov	r1, r6
 80135b4:	4638      	mov	r0, r7
 80135b6:	f7ff fdc2 	bl	801313e <_Balloc>
 80135ba:	2301      	movs	r3, #1
 80135bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80135c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c4:	bfa4      	itt	ge
 80135c6:	4623      	movge	r3, r4
 80135c8:	462c      	movge	r4, r5
 80135ca:	4638      	mov	r0, r7
 80135cc:	6861      	ldr	r1, [r4, #4]
 80135ce:	bfa6      	itte	ge
 80135d0:	461d      	movge	r5, r3
 80135d2:	2600      	movge	r6, #0
 80135d4:	2601      	movlt	r6, #1
 80135d6:	f7ff fdb2 	bl	801313e <_Balloc>
 80135da:	692b      	ldr	r3, [r5, #16]
 80135dc:	60c6      	str	r6, [r0, #12]
 80135de:	6926      	ldr	r6, [r4, #16]
 80135e0:	f105 0914 	add.w	r9, r5, #20
 80135e4:	f104 0214 	add.w	r2, r4, #20
 80135e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80135ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80135f0:	f100 0514 	add.w	r5, r0, #20
 80135f4:	f04f 0e00 	mov.w	lr, #0
 80135f8:	f852 ab04 	ldr.w	sl, [r2], #4
 80135fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8013600:	fa1e f18a 	uxtah	r1, lr, sl
 8013604:	b2a3      	uxth	r3, r4
 8013606:	1ac9      	subs	r1, r1, r3
 8013608:	0c23      	lsrs	r3, r4, #16
 801360a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801360e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013612:	b289      	uxth	r1, r1
 8013614:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013618:	45c8      	cmp	r8, r9
 801361a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801361e:	4694      	mov	ip, r2
 8013620:	f845 3b04 	str.w	r3, [r5], #4
 8013624:	d8e8      	bhi.n	80135f8 <__mdiff+0x5c>
 8013626:	45bc      	cmp	ip, r7
 8013628:	d304      	bcc.n	8013634 <__mdiff+0x98>
 801362a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801362e:	b183      	cbz	r3, 8013652 <__mdiff+0xb6>
 8013630:	6106      	str	r6, [r0, #16]
 8013632:	e7c5      	b.n	80135c0 <__mdiff+0x24>
 8013634:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013638:	fa1e f381 	uxtah	r3, lr, r1
 801363c:	141a      	asrs	r2, r3, #16
 801363e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013642:	b29b      	uxth	r3, r3
 8013644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013648:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801364c:	f845 3b04 	str.w	r3, [r5], #4
 8013650:	e7e9      	b.n	8013626 <__mdiff+0x8a>
 8013652:	3e01      	subs	r6, #1
 8013654:	e7e9      	b.n	801362a <__mdiff+0x8e>

08013656 <__d2b>:
 8013656:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801365a:	460e      	mov	r6, r1
 801365c:	2101      	movs	r1, #1
 801365e:	ec59 8b10 	vmov	r8, r9, d0
 8013662:	4615      	mov	r5, r2
 8013664:	f7ff fd6b 	bl	801313e <_Balloc>
 8013668:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801366c:	4607      	mov	r7, r0
 801366e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013672:	bb34      	cbnz	r4, 80136c2 <__d2b+0x6c>
 8013674:	9301      	str	r3, [sp, #4]
 8013676:	f1b8 0300 	subs.w	r3, r8, #0
 801367a:	d027      	beq.n	80136cc <__d2b+0x76>
 801367c:	a802      	add	r0, sp, #8
 801367e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013682:	f7ff fe01 	bl	8013288 <__lo0bits>
 8013686:	9900      	ldr	r1, [sp, #0]
 8013688:	b1f0      	cbz	r0, 80136c8 <__d2b+0x72>
 801368a:	9a01      	ldr	r2, [sp, #4]
 801368c:	f1c0 0320 	rsb	r3, r0, #32
 8013690:	fa02 f303 	lsl.w	r3, r2, r3
 8013694:	430b      	orrs	r3, r1
 8013696:	40c2      	lsrs	r2, r0
 8013698:	617b      	str	r3, [r7, #20]
 801369a:	9201      	str	r2, [sp, #4]
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	61bb      	str	r3, [r7, #24]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	bf14      	ite	ne
 80136a4:	2102      	movne	r1, #2
 80136a6:	2101      	moveq	r1, #1
 80136a8:	6139      	str	r1, [r7, #16]
 80136aa:	b1c4      	cbz	r4, 80136de <__d2b+0x88>
 80136ac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80136b0:	4404      	add	r4, r0
 80136b2:	6034      	str	r4, [r6, #0]
 80136b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136b8:	6028      	str	r0, [r5, #0]
 80136ba:	4638      	mov	r0, r7
 80136bc:	b003      	add	sp, #12
 80136be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136c6:	e7d5      	b.n	8013674 <__d2b+0x1e>
 80136c8:	6179      	str	r1, [r7, #20]
 80136ca:	e7e7      	b.n	801369c <__d2b+0x46>
 80136cc:	a801      	add	r0, sp, #4
 80136ce:	f7ff fddb 	bl	8013288 <__lo0bits>
 80136d2:	9b01      	ldr	r3, [sp, #4]
 80136d4:	617b      	str	r3, [r7, #20]
 80136d6:	2101      	movs	r1, #1
 80136d8:	6139      	str	r1, [r7, #16]
 80136da:	3020      	adds	r0, #32
 80136dc:	e7e5      	b.n	80136aa <__d2b+0x54>
 80136de:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80136e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136e6:	6030      	str	r0, [r6, #0]
 80136e8:	6918      	ldr	r0, [r3, #16]
 80136ea:	f7ff fdae 	bl	801324a <__hi0bits>
 80136ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80136f2:	e7e1      	b.n	80136b8 <__d2b+0x62>

080136f4 <_calloc_r>:
 80136f4:	b538      	push	{r3, r4, r5, lr}
 80136f6:	fb02 f401 	mul.w	r4, r2, r1
 80136fa:	4621      	mov	r1, r4
 80136fc:	f000 f856 	bl	80137ac <_malloc_r>
 8013700:	4605      	mov	r5, r0
 8013702:	b118      	cbz	r0, 801370c <_calloc_r+0x18>
 8013704:	4622      	mov	r2, r4
 8013706:	2100      	movs	r1, #0
 8013708:	f7fd fef0 	bl	80114ec <memset>
 801370c:	4628      	mov	r0, r5
 801370e:	bd38      	pop	{r3, r4, r5, pc}

08013710 <_free_r>:
 8013710:	b538      	push	{r3, r4, r5, lr}
 8013712:	4605      	mov	r5, r0
 8013714:	2900      	cmp	r1, #0
 8013716:	d045      	beq.n	80137a4 <_free_r+0x94>
 8013718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801371c:	1f0c      	subs	r4, r1, #4
 801371e:	2b00      	cmp	r3, #0
 8013720:	bfb8      	it	lt
 8013722:	18e4      	addlt	r4, r4, r3
 8013724:	f000 fc03 	bl	8013f2e <__malloc_lock>
 8013728:	4a1f      	ldr	r2, [pc, #124]	; (80137a8 <_free_r+0x98>)
 801372a:	6813      	ldr	r3, [r2, #0]
 801372c:	4610      	mov	r0, r2
 801372e:	b933      	cbnz	r3, 801373e <_free_r+0x2e>
 8013730:	6063      	str	r3, [r4, #4]
 8013732:	6014      	str	r4, [r2, #0]
 8013734:	4628      	mov	r0, r5
 8013736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801373a:	f000 bbf9 	b.w	8013f30 <__malloc_unlock>
 801373e:	42a3      	cmp	r3, r4
 8013740:	d90c      	bls.n	801375c <_free_r+0x4c>
 8013742:	6821      	ldr	r1, [r4, #0]
 8013744:	1862      	adds	r2, r4, r1
 8013746:	4293      	cmp	r3, r2
 8013748:	bf04      	itt	eq
 801374a:	681a      	ldreq	r2, [r3, #0]
 801374c:	685b      	ldreq	r3, [r3, #4]
 801374e:	6063      	str	r3, [r4, #4]
 8013750:	bf04      	itt	eq
 8013752:	1852      	addeq	r2, r2, r1
 8013754:	6022      	streq	r2, [r4, #0]
 8013756:	6004      	str	r4, [r0, #0]
 8013758:	e7ec      	b.n	8013734 <_free_r+0x24>
 801375a:	4613      	mov	r3, r2
 801375c:	685a      	ldr	r2, [r3, #4]
 801375e:	b10a      	cbz	r2, 8013764 <_free_r+0x54>
 8013760:	42a2      	cmp	r2, r4
 8013762:	d9fa      	bls.n	801375a <_free_r+0x4a>
 8013764:	6819      	ldr	r1, [r3, #0]
 8013766:	1858      	adds	r0, r3, r1
 8013768:	42a0      	cmp	r0, r4
 801376a:	d10b      	bne.n	8013784 <_free_r+0x74>
 801376c:	6820      	ldr	r0, [r4, #0]
 801376e:	4401      	add	r1, r0
 8013770:	1858      	adds	r0, r3, r1
 8013772:	4282      	cmp	r2, r0
 8013774:	6019      	str	r1, [r3, #0]
 8013776:	d1dd      	bne.n	8013734 <_free_r+0x24>
 8013778:	6810      	ldr	r0, [r2, #0]
 801377a:	6852      	ldr	r2, [r2, #4]
 801377c:	605a      	str	r2, [r3, #4]
 801377e:	4401      	add	r1, r0
 8013780:	6019      	str	r1, [r3, #0]
 8013782:	e7d7      	b.n	8013734 <_free_r+0x24>
 8013784:	d902      	bls.n	801378c <_free_r+0x7c>
 8013786:	230c      	movs	r3, #12
 8013788:	602b      	str	r3, [r5, #0]
 801378a:	e7d3      	b.n	8013734 <_free_r+0x24>
 801378c:	6820      	ldr	r0, [r4, #0]
 801378e:	1821      	adds	r1, r4, r0
 8013790:	428a      	cmp	r2, r1
 8013792:	bf04      	itt	eq
 8013794:	6811      	ldreq	r1, [r2, #0]
 8013796:	6852      	ldreq	r2, [r2, #4]
 8013798:	6062      	str	r2, [r4, #4]
 801379a:	bf04      	itt	eq
 801379c:	1809      	addeq	r1, r1, r0
 801379e:	6021      	streq	r1, [r4, #0]
 80137a0:	605c      	str	r4, [r3, #4]
 80137a2:	e7c7      	b.n	8013734 <_free_r+0x24>
 80137a4:	bd38      	pop	{r3, r4, r5, pc}
 80137a6:	bf00      	nop
 80137a8:	20001ea4 	.word	0x20001ea4

080137ac <_malloc_r>:
 80137ac:	b570      	push	{r4, r5, r6, lr}
 80137ae:	1ccd      	adds	r5, r1, #3
 80137b0:	f025 0503 	bic.w	r5, r5, #3
 80137b4:	3508      	adds	r5, #8
 80137b6:	2d0c      	cmp	r5, #12
 80137b8:	bf38      	it	cc
 80137ba:	250c      	movcc	r5, #12
 80137bc:	2d00      	cmp	r5, #0
 80137be:	4606      	mov	r6, r0
 80137c0:	db01      	blt.n	80137c6 <_malloc_r+0x1a>
 80137c2:	42a9      	cmp	r1, r5
 80137c4:	d903      	bls.n	80137ce <_malloc_r+0x22>
 80137c6:	230c      	movs	r3, #12
 80137c8:	6033      	str	r3, [r6, #0]
 80137ca:	2000      	movs	r0, #0
 80137cc:	bd70      	pop	{r4, r5, r6, pc}
 80137ce:	f000 fbae 	bl	8013f2e <__malloc_lock>
 80137d2:	4a21      	ldr	r2, [pc, #132]	; (8013858 <_malloc_r+0xac>)
 80137d4:	6814      	ldr	r4, [r2, #0]
 80137d6:	4621      	mov	r1, r4
 80137d8:	b991      	cbnz	r1, 8013800 <_malloc_r+0x54>
 80137da:	4c20      	ldr	r4, [pc, #128]	; (801385c <_malloc_r+0xb0>)
 80137dc:	6823      	ldr	r3, [r4, #0]
 80137de:	b91b      	cbnz	r3, 80137e8 <_malloc_r+0x3c>
 80137e0:	4630      	mov	r0, r6
 80137e2:	f000 facf 	bl	8013d84 <_sbrk_r>
 80137e6:	6020      	str	r0, [r4, #0]
 80137e8:	4629      	mov	r1, r5
 80137ea:	4630      	mov	r0, r6
 80137ec:	f000 faca 	bl	8013d84 <_sbrk_r>
 80137f0:	1c43      	adds	r3, r0, #1
 80137f2:	d124      	bne.n	801383e <_malloc_r+0x92>
 80137f4:	230c      	movs	r3, #12
 80137f6:	6033      	str	r3, [r6, #0]
 80137f8:	4630      	mov	r0, r6
 80137fa:	f000 fb99 	bl	8013f30 <__malloc_unlock>
 80137fe:	e7e4      	b.n	80137ca <_malloc_r+0x1e>
 8013800:	680b      	ldr	r3, [r1, #0]
 8013802:	1b5b      	subs	r3, r3, r5
 8013804:	d418      	bmi.n	8013838 <_malloc_r+0x8c>
 8013806:	2b0b      	cmp	r3, #11
 8013808:	d90f      	bls.n	801382a <_malloc_r+0x7e>
 801380a:	600b      	str	r3, [r1, #0]
 801380c:	50cd      	str	r5, [r1, r3]
 801380e:	18cc      	adds	r4, r1, r3
 8013810:	4630      	mov	r0, r6
 8013812:	f000 fb8d 	bl	8013f30 <__malloc_unlock>
 8013816:	f104 000b 	add.w	r0, r4, #11
 801381a:	1d23      	adds	r3, r4, #4
 801381c:	f020 0007 	bic.w	r0, r0, #7
 8013820:	1ac3      	subs	r3, r0, r3
 8013822:	d0d3      	beq.n	80137cc <_malloc_r+0x20>
 8013824:	425a      	negs	r2, r3
 8013826:	50e2      	str	r2, [r4, r3]
 8013828:	e7d0      	b.n	80137cc <_malloc_r+0x20>
 801382a:	428c      	cmp	r4, r1
 801382c:	684b      	ldr	r3, [r1, #4]
 801382e:	bf16      	itet	ne
 8013830:	6063      	strne	r3, [r4, #4]
 8013832:	6013      	streq	r3, [r2, #0]
 8013834:	460c      	movne	r4, r1
 8013836:	e7eb      	b.n	8013810 <_malloc_r+0x64>
 8013838:	460c      	mov	r4, r1
 801383a:	6849      	ldr	r1, [r1, #4]
 801383c:	e7cc      	b.n	80137d8 <_malloc_r+0x2c>
 801383e:	1cc4      	adds	r4, r0, #3
 8013840:	f024 0403 	bic.w	r4, r4, #3
 8013844:	42a0      	cmp	r0, r4
 8013846:	d005      	beq.n	8013854 <_malloc_r+0xa8>
 8013848:	1a21      	subs	r1, r4, r0
 801384a:	4630      	mov	r0, r6
 801384c:	f000 fa9a 	bl	8013d84 <_sbrk_r>
 8013850:	3001      	adds	r0, #1
 8013852:	d0cf      	beq.n	80137f4 <_malloc_r+0x48>
 8013854:	6025      	str	r5, [r4, #0]
 8013856:	e7db      	b.n	8013810 <_malloc_r+0x64>
 8013858:	20001ea4 	.word	0x20001ea4
 801385c:	20001ea8 	.word	0x20001ea8

08013860 <__ssputs_r>:
 8013860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013864:	688e      	ldr	r6, [r1, #8]
 8013866:	429e      	cmp	r6, r3
 8013868:	4682      	mov	sl, r0
 801386a:	460c      	mov	r4, r1
 801386c:	4690      	mov	r8, r2
 801386e:	4699      	mov	r9, r3
 8013870:	d837      	bhi.n	80138e2 <__ssputs_r+0x82>
 8013872:	898a      	ldrh	r2, [r1, #12]
 8013874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013878:	d031      	beq.n	80138de <__ssputs_r+0x7e>
 801387a:	6825      	ldr	r5, [r4, #0]
 801387c:	6909      	ldr	r1, [r1, #16]
 801387e:	1a6f      	subs	r7, r5, r1
 8013880:	6965      	ldr	r5, [r4, #20]
 8013882:	2302      	movs	r3, #2
 8013884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013888:	fb95 f5f3 	sdiv	r5, r5, r3
 801388c:	f109 0301 	add.w	r3, r9, #1
 8013890:	443b      	add	r3, r7
 8013892:	429d      	cmp	r5, r3
 8013894:	bf38      	it	cc
 8013896:	461d      	movcc	r5, r3
 8013898:	0553      	lsls	r3, r2, #21
 801389a:	d530      	bpl.n	80138fe <__ssputs_r+0x9e>
 801389c:	4629      	mov	r1, r5
 801389e:	f7ff ff85 	bl	80137ac <_malloc_r>
 80138a2:	4606      	mov	r6, r0
 80138a4:	b950      	cbnz	r0, 80138bc <__ssputs_r+0x5c>
 80138a6:	230c      	movs	r3, #12
 80138a8:	f8ca 3000 	str.w	r3, [sl]
 80138ac:	89a3      	ldrh	r3, [r4, #12]
 80138ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138b2:	81a3      	strh	r3, [r4, #12]
 80138b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138bc:	463a      	mov	r2, r7
 80138be:	6921      	ldr	r1, [r4, #16]
 80138c0:	f7ff fc32 	bl	8013128 <memcpy>
 80138c4:	89a3      	ldrh	r3, [r4, #12]
 80138c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138ce:	81a3      	strh	r3, [r4, #12]
 80138d0:	6126      	str	r6, [r4, #16]
 80138d2:	6165      	str	r5, [r4, #20]
 80138d4:	443e      	add	r6, r7
 80138d6:	1bed      	subs	r5, r5, r7
 80138d8:	6026      	str	r6, [r4, #0]
 80138da:	60a5      	str	r5, [r4, #8]
 80138dc:	464e      	mov	r6, r9
 80138de:	454e      	cmp	r6, r9
 80138e0:	d900      	bls.n	80138e4 <__ssputs_r+0x84>
 80138e2:	464e      	mov	r6, r9
 80138e4:	4632      	mov	r2, r6
 80138e6:	4641      	mov	r1, r8
 80138e8:	6820      	ldr	r0, [r4, #0]
 80138ea:	f000 fb07 	bl	8013efc <memmove>
 80138ee:	68a3      	ldr	r3, [r4, #8]
 80138f0:	1b9b      	subs	r3, r3, r6
 80138f2:	60a3      	str	r3, [r4, #8]
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	441e      	add	r6, r3
 80138f8:	6026      	str	r6, [r4, #0]
 80138fa:	2000      	movs	r0, #0
 80138fc:	e7dc      	b.n	80138b8 <__ssputs_r+0x58>
 80138fe:	462a      	mov	r2, r5
 8013900:	f000 fb17 	bl	8013f32 <_realloc_r>
 8013904:	4606      	mov	r6, r0
 8013906:	2800      	cmp	r0, #0
 8013908:	d1e2      	bne.n	80138d0 <__ssputs_r+0x70>
 801390a:	6921      	ldr	r1, [r4, #16]
 801390c:	4650      	mov	r0, sl
 801390e:	f7ff feff 	bl	8013710 <_free_r>
 8013912:	e7c8      	b.n	80138a6 <__ssputs_r+0x46>

08013914 <_svfiprintf_r>:
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	461d      	mov	r5, r3
 801391a:	898b      	ldrh	r3, [r1, #12]
 801391c:	061f      	lsls	r7, r3, #24
 801391e:	b09d      	sub	sp, #116	; 0x74
 8013920:	4680      	mov	r8, r0
 8013922:	460c      	mov	r4, r1
 8013924:	4616      	mov	r6, r2
 8013926:	d50f      	bpl.n	8013948 <_svfiprintf_r+0x34>
 8013928:	690b      	ldr	r3, [r1, #16]
 801392a:	b96b      	cbnz	r3, 8013948 <_svfiprintf_r+0x34>
 801392c:	2140      	movs	r1, #64	; 0x40
 801392e:	f7ff ff3d 	bl	80137ac <_malloc_r>
 8013932:	6020      	str	r0, [r4, #0]
 8013934:	6120      	str	r0, [r4, #16]
 8013936:	b928      	cbnz	r0, 8013944 <_svfiprintf_r+0x30>
 8013938:	230c      	movs	r3, #12
 801393a:	f8c8 3000 	str.w	r3, [r8]
 801393e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013942:	e0c8      	b.n	8013ad6 <_svfiprintf_r+0x1c2>
 8013944:	2340      	movs	r3, #64	; 0x40
 8013946:	6163      	str	r3, [r4, #20]
 8013948:	2300      	movs	r3, #0
 801394a:	9309      	str	r3, [sp, #36]	; 0x24
 801394c:	2320      	movs	r3, #32
 801394e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013952:	2330      	movs	r3, #48	; 0x30
 8013954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013958:	9503      	str	r5, [sp, #12]
 801395a:	f04f 0b01 	mov.w	fp, #1
 801395e:	4637      	mov	r7, r6
 8013960:	463d      	mov	r5, r7
 8013962:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013966:	b10b      	cbz	r3, 801396c <_svfiprintf_r+0x58>
 8013968:	2b25      	cmp	r3, #37	; 0x25
 801396a:	d13e      	bne.n	80139ea <_svfiprintf_r+0xd6>
 801396c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013970:	d00b      	beq.n	801398a <_svfiprintf_r+0x76>
 8013972:	4653      	mov	r3, sl
 8013974:	4632      	mov	r2, r6
 8013976:	4621      	mov	r1, r4
 8013978:	4640      	mov	r0, r8
 801397a:	f7ff ff71 	bl	8013860 <__ssputs_r>
 801397e:	3001      	adds	r0, #1
 8013980:	f000 80a4 	beq.w	8013acc <_svfiprintf_r+0x1b8>
 8013984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013986:	4453      	add	r3, sl
 8013988:	9309      	str	r3, [sp, #36]	; 0x24
 801398a:	783b      	ldrb	r3, [r7, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	f000 809d 	beq.w	8013acc <_svfiprintf_r+0x1b8>
 8013992:	2300      	movs	r3, #0
 8013994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801399c:	9304      	str	r3, [sp, #16]
 801399e:	9307      	str	r3, [sp, #28]
 80139a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139a4:	931a      	str	r3, [sp, #104]	; 0x68
 80139a6:	462f      	mov	r7, r5
 80139a8:	2205      	movs	r2, #5
 80139aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80139ae:	4850      	ldr	r0, [pc, #320]	; (8013af0 <_svfiprintf_r+0x1dc>)
 80139b0:	f7ec fc3e 	bl	8000230 <memchr>
 80139b4:	9b04      	ldr	r3, [sp, #16]
 80139b6:	b9d0      	cbnz	r0, 80139ee <_svfiprintf_r+0xda>
 80139b8:	06d9      	lsls	r1, r3, #27
 80139ba:	bf44      	itt	mi
 80139bc:	2220      	movmi	r2, #32
 80139be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139c2:	071a      	lsls	r2, r3, #28
 80139c4:	bf44      	itt	mi
 80139c6:	222b      	movmi	r2, #43	; 0x2b
 80139c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139cc:	782a      	ldrb	r2, [r5, #0]
 80139ce:	2a2a      	cmp	r2, #42	; 0x2a
 80139d0:	d015      	beq.n	80139fe <_svfiprintf_r+0xea>
 80139d2:	9a07      	ldr	r2, [sp, #28]
 80139d4:	462f      	mov	r7, r5
 80139d6:	2000      	movs	r0, #0
 80139d8:	250a      	movs	r5, #10
 80139da:	4639      	mov	r1, r7
 80139dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139e0:	3b30      	subs	r3, #48	; 0x30
 80139e2:	2b09      	cmp	r3, #9
 80139e4:	d94d      	bls.n	8013a82 <_svfiprintf_r+0x16e>
 80139e6:	b1b8      	cbz	r0, 8013a18 <_svfiprintf_r+0x104>
 80139e8:	e00f      	b.n	8013a0a <_svfiprintf_r+0xf6>
 80139ea:	462f      	mov	r7, r5
 80139ec:	e7b8      	b.n	8013960 <_svfiprintf_r+0x4c>
 80139ee:	4a40      	ldr	r2, [pc, #256]	; (8013af0 <_svfiprintf_r+0x1dc>)
 80139f0:	1a80      	subs	r0, r0, r2
 80139f2:	fa0b f000 	lsl.w	r0, fp, r0
 80139f6:	4318      	orrs	r0, r3
 80139f8:	9004      	str	r0, [sp, #16]
 80139fa:	463d      	mov	r5, r7
 80139fc:	e7d3      	b.n	80139a6 <_svfiprintf_r+0x92>
 80139fe:	9a03      	ldr	r2, [sp, #12]
 8013a00:	1d11      	adds	r1, r2, #4
 8013a02:	6812      	ldr	r2, [r2, #0]
 8013a04:	9103      	str	r1, [sp, #12]
 8013a06:	2a00      	cmp	r2, #0
 8013a08:	db01      	blt.n	8013a0e <_svfiprintf_r+0xfa>
 8013a0a:	9207      	str	r2, [sp, #28]
 8013a0c:	e004      	b.n	8013a18 <_svfiprintf_r+0x104>
 8013a0e:	4252      	negs	r2, r2
 8013a10:	f043 0302 	orr.w	r3, r3, #2
 8013a14:	9207      	str	r2, [sp, #28]
 8013a16:	9304      	str	r3, [sp, #16]
 8013a18:	783b      	ldrb	r3, [r7, #0]
 8013a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8013a1c:	d10c      	bne.n	8013a38 <_svfiprintf_r+0x124>
 8013a1e:	787b      	ldrb	r3, [r7, #1]
 8013a20:	2b2a      	cmp	r3, #42	; 0x2a
 8013a22:	d133      	bne.n	8013a8c <_svfiprintf_r+0x178>
 8013a24:	9b03      	ldr	r3, [sp, #12]
 8013a26:	1d1a      	adds	r2, r3, #4
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	9203      	str	r2, [sp, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bfb8      	it	lt
 8013a30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a34:	3702      	adds	r7, #2
 8013a36:	9305      	str	r3, [sp, #20]
 8013a38:	4d2e      	ldr	r5, [pc, #184]	; (8013af4 <_svfiprintf_r+0x1e0>)
 8013a3a:	7839      	ldrb	r1, [r7, #0]
 8013a3c:	2203      	movs	r2, #3
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f7ec fbf6 	bl	8000230 <memchr>
 8013a44:	b138      	cbz	r0, 8013a56 <_svfiprintf_r+0x142>
 8013a46:	2340      	movs	r3, #64	; 0x40
 8013a48:	1b40      	subs	r0, r0, r5
 8013a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8013a4e:	9b04      	ldr	r3, [sp, #16]
 8013a50:	4303      	orrs	r3, r0
 8013a52:	3701      	adds	r7, #1
 8013a54:	9304      	str	r3, [sp, #16]
 8013a56:	7839      	ldrb	r1, [r7, #0]
 8013a58:	4827      	ldr	r0, [pc, #156]	; (8013af8 <_svfiprintf_r+0x1e4>)
 8013a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a5e:	2206      	movs	r2, #6
 8013a60:	1c7e      	adds	r6, r7, #1
 8013a62:	f7ec fbe5 	bl	8000230 <memchr>
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d038      	beq.n	8013adc <_svfiprintf_r+0x1c8>
 8013a6a:	4b24      	ldr	r3, [pc, #144]	; (8013afc <_svfiprintf_r+0x1e8>)
 8013a6c:	bb13      	cbnz	r3, 8013ab4 <_svfiprintf_r+0x1a0>
 8013a6e:	9b03      	ldr	r3, [sp, #12]
 8013a70:	3307      	adds	r3, #7
 8013a72:	f023 0307 	bic.w	r3, r3, #7
 8013a76:	3308      	adds	r3, #8
 8013a78:	9303      	str	r3, [sp, #12]
 8013a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a7c:	444b      	add	r3, r9
 8013a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8013a80:	e76d      	b.n	801395e <_svfiprintf_r+0x4a>
 8013a82:	fb05 3202 	mla	r2, r5, r2, r3
 8013a86:	2001      	movs	r0, #1
 8013a88:	460f      	mov	r7, r1
 8013a8a:	e7a6      	b.n	80139da <_svfiprintf_r+0xc6>
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	3701      	adds	r7, #1
 8013a90:	9305      	str	r3, [sp, #20]
 8013a92:	4619      	mov	r1, r3
 8013a94:	250a      	movs	r5, #10
 8013a96:	4638      	mov	r0, r7
 8013a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a9c:	3a30      	subs	r2, #48	; 0x30
 8013a9e:	2a09      	cmp	r2, #9
 8013aa0:	d903      	bls.n	8013aaa <_svfiprintf_r+0x196>
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d0c8      	beq.n	8013a38 <_svfiprintf_r+0x124>
 8013aa6:	9105      	str	r1, [sp, #20]
 8013aa8:	e7c6      	b.n	8013a38 <_svfiprintf_r+0x124>
 8013aaa:	fb05 2101 	mla	r1, r5, r1, r2
 8013aae:	2301      	movs	r3, #1
 8013ab0:	4607      	mov	r7, r0
 8013ab2:	e7f0      	b.n	8013a96 <_svfiprintf_r+0x182>
 8013ab4:	ab03      	add	r3, sp, #12
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	4622      	mov	r2, r4
 8013aba:	4b11      	ldr	r3, [pc, #68]	; (8013b00 <_svfiprintf_r+0x1ec>)
 8013abc:	a904      	add	r1, sp, #16
 8013abe:	4640      	mov	r0, r8
 8013ac0:	f7fd fdb0 	bl	8011624 <_printf_float>
 8013ac4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013ac8:	4681      	mov	r9, r0
 8013aca:	d1d6      	bne.n	8013a7a <_svfiprintf_r+0x166>
 8013acc:	89a3      	ldrh	r3, [r4, #12]
 8013ace:	065b      	lsls	r3, r3, #25
 8013ad0:	f53f af35 	bmi.w	801393e <_svfiprintf_r+0x2a>
 8013ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ad6:	b01d      	add	sp, #116	; 0x74
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	ab03      	add	r3, sp, #12
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <_svfiprintf_r+0x1ec>)
 8013ae4:	a904      	add	r1, sp, #16
 8013ae6:	4640      	mov	r0, r8
 8013ae8:	f7fe f852 	bl	8011b90 <_printf_i>
 8013aec:	e7ea      	b.n	8013ac4 <_svfiprintf_r+0x1b0>
 8013aee:	bf00      	nop
 8013af0:	0801692c 	.word	0x0801692c
 8013af4:	08016932 	.word	0x08016932
 8013af8:	08016936 	.word	0x08016936
 8013afc:	08011625 	.word	0x08011625
 8013b00:	08013861 	.word	0x08013861

08013b04 <__sfputc_r>:
 8013b04:	6893      	ldr	r3, [r2, #8]
 8013b06:	3b01      	subs	r3, #1
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	b410      	push	{r4}
 8013b0c:	6093      	str	r3, [r2, #8]
 8013b0e:	da08      	bge.n	8013b22 <__sfputc_r+0x1e>
 8013b10:	6994      	ldr	r4, [r2, #24]
 8013b12:	42a3      	cmp	r3, r4
 8013b14:	db01      	blt.n	8013b1a <__sfputc_r+0x16>
 8013b16:	290a      	cmp	r1, #10
 8013b18:	d103      	bne.n	8013b22 <__sfputc_r+0x1e>
 8013b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b1e:	f7fe ba09 	b.w	8011f34 <__swbuf_r>
 8013b22:	6813      	ldr	r3, [r2, #0]
 8013b24:	1c58      	adds	r0, r3, #1
 8013b26:	6010      	str	r0, [r2, #0]
 8013b28:	7019      	strb	r1, [r3, #0]
 8013b2a:	4608      	mov	r0, r1
 8013b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b30:	4770      	bx	lr

08013b32 <__sfputs_r>:
 8013b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b34:	4606      	mov	r6, r0
 8013b36:	460f      	mov	r7, r1
 8013b38:	4614      	mov	r4, r2
 8013b3a:	18d5      	adds	r5, r2, r3
 8013b3c:	42ac      	cmp	r4, r5
 8013b3e:	d101      	bne.n	8013b44 <__sfputs_r+0x12>
 8013b40:	2000      	movs	r0, #0
 8013b42:	e007      	b.n	8013b54 <__sfputs_r+0x22>
 8013b44:	463a      	mov	r2, r7
 8013b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f7ff ffda 	bl	8013b04 <__sfputc_r>
 8013b50:	1c43      	adds	r3, r0, #1
 8013b52:	d1f3      	bne.n	8013b3c <__sfputs_r+0xa>
 8013b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b58 <_vfiprintf_r>:
 8013b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	460c      	mov	r4, r1
 8013b5e:	b09d      	sub	sp, #116	; 0x74
 8013b60:	4617      	mov	r7, r2
 8013b62:	461d      	mov	r5, r3
 8013b64:	4606      	mov	r6, r0
 8013b66:	b118      	cbz	r0, 8013b70 <_vfiprintf_r+0x18>
 8013b68:	6983      	ldr	r3, [r0, #24]
 8013b6a:	b90b      	cbnz	r3, 8013b70 <_vfiprintf_r+0x18>
 8013b6c:	f7ff f9d8 	bl	8012f20 <__sinit>
 8013b70:	4b7c      	ldr	r3, [pc, #496]	; (8013d64 <_vfiprintf_r+0x20c>)
 8013b72:	429c      	cmp	r4, r3
 8013b74:	d158      	bne.n	8013c28 <_vfiprintf_r+0xd0>
 8013b76:	6874      	ldr	r4, [r6, #4]
 8013b78:	89a3      	ldrh	r3, [r4, #12]
 8013b7a:	0718      	lsls	r0, r3, #28
 8013b7c:	d55e      	bpl.n	8013c3c <_vfiprintf_r+0xe4>
 8013b7e:	6923      	ldr	r3, [r4, #16]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d05b      	beq.n	8013c3c <_vfiprintf_r+0xe4>
 8013b84:	2300      	movs	r3, #0
 8013b86:	9309      	str	r3, [sp, #36]	; 0x24
 8013b88:	2320      	movs	r3, #32
 8013b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b8e:	2330      	movs	r3, #48	; 0x30
 8013b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b94:	9503      	str	r5, [sp, #12]
 8013b96:	f04f 0b01 	mov.w	fp, #1
 8013b9a:	46b8      	mov	r8, r7
 8013b9c:	4645      	mov	r5, r8
 8013b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013ba2:	b10b      	cbz	r3, 8013ba8 <_vfiprintf_r+0x50>
 8013ba4:	2b25      	cmp	r3, #37	; 0x25
 8013ba6:	d154      	bne.n	8013c52 <_vfiprintf_r+0xfa>
 8013ba8:	ebb8 0a07 	subs.w	sl, r8, r7
 8013bac:	d00b      	beq.n	8013bc6 <_vfiprintf_r+0x6e>
 8013bae:	4653      	mov	r3, sl
 8013bb0:	463a      	mov	r2, r7
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4630      	mov	r0, r6
 8013bb6:	f7ff ffbc 	bl	8013b32 <__sfputs_r>
 8013bba:	3001      	adds	r0, #1
 8013bbc:	f000 80c2 	beq.w	8013d44 <_vfiprintf_r+0x1ec>
 8013bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bc2:	4453      	add	r3, sl
 8013bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc6:	f898 3000 	ldrb.w	r3, [r8]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	f000 80ba 	beq.w	8013d44 <_vfiprintf_r+0x1ec>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bda:	9304      	str	r3, [sp, #16]
 8013bdc:	9307      	str	r3, [sp, #28]
 8013bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013be2:	931a      	str	r3, [sp, #104]	; 0x68
 8013be4:	46a8      	mov	r8, r5
 8013be6:	2205      	movs	r2, #5
 8013be8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013bec:	485e      	ldr	r0, [pc, #376]	; (8013d68 <_vfiprintf_r+0x210>)
 8013bee:	f7ec fb1f 	bl	8000230 <memchr>
 8013bf2:	9b04      	ldr	r3, [sp, #16]
 8013bf4:	bb78      	cbnz	r0, 8013c56 <_vfiprintf_r+0xfe>
 8013bf6:	06d9      	lsls	r1, r3, #27
 8013bf8:	bf44      	itt	mi
 8013bfa:	2220      	movmi	r2, #32
 8013bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c00:	071a      	lsls	r2, r3, #28
 8013c02:	bf44      	itt	mi
 8013c04:	222b      	movmi	r2, #43	; 0x2b
 8013c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c0a:	782a      	ldrb	r2, [r5, #0]
 8013c0c:	2a2a      	cmp	r2, #42	; 0x2a
 8013c0e:	d02a      	beq.n	8013c66 <_vfiprintf_r+0x10e>
 8013c10:	9a07      	ldr	r2, [sp, #28]
 8013c12:	46a8      	mov	r8, r5
 8013c14:	2000      	movs	r0, #0
 8013c16:	250a      	movs	r5, #10
 8013c18:	4641      	mov	r1, r8
 8013c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c1e:	3b30      	subs	r3, #48	; 0x30
 8013c20:	2b09      	cmp	r3, #9
 8013c22:	d969      	bls.n	8013cf8 <_vfiprintf_r+0x1a0>
 8013c24:	b360      	cbz	r0, 8013c80 <_vfiprintf_r+0x128>
 8013c26:	e024      	b.n	8013c72 <_vfiprintf_r+0x11a>
 8013c28:	4b50      	ldr	r3, [pc, #320]	; (8013d6c <_vfiprintf_r+0x214>)
 8013c2a:	429c      	cmp	r4, r3
 8013c2c:	d101      	bne.n	8013c32 <_vfiprintf_r+0xda>
 8013c2e:	68b4      	ldr	r4, [r6, #8]
 8013c30:	e7a2      	b.n	8013b78 <_vfiprintf_r+0x20>
 8013c32:	4b4f      	ldr	r3, [pc, #316]	; (8013d70 <_vfiprintf_r+0x218>)
 8013c34:	429c      	cmp	r4, r3
 8013c36:	bf08      	it	eq
 8013c38:	68f4      	ldreq	r4, [r6, #12]
 8013c3a:	e79d      	b.n	8013b78 <_vfiprintf_r+0x20>
 8013c3c:	4621      	mov	r1, r4
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7fe f9ca 	bl	8011fd8 <__swsetup_r>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d09d      	beq.n	8013b84 <_vfiprintf_r+0x2c>
 8013c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c4c:	b01d      	add	sp, #116	; 0x74
 8013c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c52:	46a8      	mov	r8, r5
 8013c54:	e7a2      	b.n	8013b9c <_vfiprintf_r+0x44>
 8013c56:	4a44      	ldr	r2, [pc, #272]	; (8013d68 <_vfiprintf_r+0x210>)
 8013c58:	1a80      	subs	r0, r0, r2
 8013c5a:	fa0b f000 	lsl.w	r0, fp, r0
 8013c5e:	4318      	orrs	r0, r3
 8013c60:	9004      	str	r0, [sp, #16]
 8013c62:	4645      	mov	r5, r8
 8013c64:	e7be      	b.n	8013be4 <_vfiprintf_r+0x8c>
 8013c66:	9a03      	ldr	r2, [sp, #12]
 8013c68:	1d11      	adds	r1, r2, #4
 8013c6a:	6812      	ldr	r2, [r2, #0]
 8013c6c:	9103      	str	r1, [sp, #12]
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	db01      	blt.n	8013c76 <_vfiprintf_r+0x11e>
 8013c72:	9207      	str	r2, [sp, #28]
 8013c74:	e004      	b.n	8013c80 <_vfiprintf_r+0x128>
 8013c76:	4252      	negs	r2, r2
 8013c78:	f043 0302 	orr.w	r3, r3, #2
 8013c7c:	9207      	str	r2, [sp, #28]
 8013c7e:	9304      	str	r3, [sp, #16]
 8013c80:	f898 3000 	ldrb.w	r3, [r8]
 8013c84:	2b2e      	cmp	r3, #46	; 0x2e
 8013c86:	d10e      	bne.n	8013ca6 <_vfiprintf_r+0x14e>
 8013c88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8013c8e:	d138      	bne.n	8013d02 <_vfiprintf_r+0x1aa>
 8013c90:	9b03      	ldr	r3, [sp, #12]
 8013c92:	1d1a      	adds	r2, r3, #4
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	9203      	str	r2, [sp, #12]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	bfb8      	it	lt
 8013c9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013ca0:	f108 0802 	add.w	r8, r8, #2
 8013ca4:	9305      	str	r3, [sp, #20]
 8013ca6:	4d33      	ldr	r5, [pc, #204]	; (8013d74 <_vfiprintf_r+0x21c>)
 8013ca8:	f898 1000 	ldrb.w	r1, [r8]
 8013cac:	2203      	movs	r2, #3
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f7ec fabe 	bl	8000230 <memchr>
 8013cb4:	b140      	cbz	r0, 8013cc8 <_vfiprintf_r+0x170>
 8013cb6:	2340      	movs	r3, #64	; 0x40
 8013cb8:	1b40      	subs	r0, r0, r5
 8013cba:	fa03 f000 	lsl.w	r0, r3, r0
 8013cbe:	9b04      	ldr	r3, [sp, #16]
 8013cc0:	4303      	orrs	r3, r0
 8013cc2:	f108 0801 	add.w	r8, r8, #1
 8013cc6:	9304      	str	r3, [sp, #16]
 8013cc8:	f898 1000 	ldrb.w	r1, [r8]
 8013ccc:	482a      	ldr	r0, [pc, #168]	; (8013d78 <_vfiprintf_r+0x220>)
 8013cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cd2:	2206      	movs	r2, #6
 8013cd4:	f108 0701 	add.w	r7, r8, #1
 8013cd8:	f7ec faaa 	bl	8000230 <memchr>
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	d037      	beq.n	8013d50 <_vfiprintf_r+0x1f8>
 8013ce0:	4b26      	ldr	r3, [pc, #152]	; (8013d7c <_vfiprintf_r+0x224>)
 8013ce2:	bb1b      	cbnz	r3, 8013d2c <_vfiprintf_r+0x1d4>
 8013ce4:	9b03      	ldr	r3, [sp, #12]
 8013ce6:	3307      	adds	r3, #7
 8013ce8:	f023 0307 	bic.w	r3, r3, #7
 8013cec:	3308      	adds	r3, #8
 8013cee:	9303      	str	r3, [sp, #12]
 8013cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cf2:	444b      	add	r3, r9
 8013cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8013cf6:	e750      	b.n	8013b9a <_vfiprintf_r+0x42>
 8013cf8:	fb05 3202 	mla	r2, r5, r2, r3
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	4688      	mov	r8, r1
 8013d00:	e78a      	b.n	8013c18 <_vfiprintf_r+0xc0>
 8013d02:	2300      	movs	r3, #0
 8013d04:	f108 0801 	add.w	r8, r8, #1
 8013d08:	9305      	str	r3, [sp, #20]
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	250a      	movs	r5, #10
 8013d0e:	4640      	mov	r0, r8
 8013d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d14:	3a30      	subs	r2, #48	; 0x30
 8013d16:	2a09      	cmp	r2, #9
 8013d18:	d903      	bls.n	8013d22 <_vfiprintf_r+0x1ca>
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d0c3      	beq.n	8013ca6 <_vfiprintf_r+0x14e>
 8013d1e:	9105      	str	r1, [sp, #20]
 8013d20:	e7c1      	b.n	8013ca6 <_vfiprintf_r+0x14e>
 8013d22:	fb05 2101 	mla	r1, r5, r1, r2
 8013d26:	2301      	movs	r3, #1
 8013d28:	4680      	mov	r8, r0
 8013d2a:	e7f0      	b.n	8013d0e <_vfiprintf_r+0x1b6>
 8013d2c:	ab03      	add	r3, sp, #12
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	4622      	mov	r2, r4
 8013d32:	4b13      	ldr	r3, [pc, #76]	; (8013d80 <_vfiprintf_r+0x228>)
 8013d34:	a904      	add	r1, sp, #16
 8013d36:	4630      	mov	r0, r6
 8013d38:	f7fd fc74 	bl	8011624 <_printf_float>
 8013d3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013d40:	4681      	mov	r9, r0
 8013d42:	d1d5      	bne.n	8013cf0 <_vfiprintf_r+0x198>
 8013d44:	89a3      	ldrh	r3, [r4, #12]
 8013d46:	065b      	lsls	r3, r3, #25
 8013d48:	f53f af7e 	bmi.w	8013c48 <_vfiprintf_r+0xf0>
 8013d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d4e:	e77d      	b.n	8013c4c <_vfiprintf_r+0xf4>
 8013d50:	ab03      	add	r3, sp, #12
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	4622      	mov	r2, r4
 8013d56:	4b0a      	ldr	r3, [pc, #40]	; (8013d80 <_vfiprintf_r+0x228>)
 8013d58:	a904      	add	r1, sp, #16
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f7fd ff18 	bl	8011b90 <_printf_i>
 8013d60:	e7ec      	b.n	8013d3c <_vfiprintf_r+0x1e4>
 8013d62:	bf00      	nop
 8013d64:	080167ec 	.word	0x080167ec
 8013d68:	0801692c 	.word	0x0801692c
 8013d6c:	0801680c 	.word	0x0801680c
 8013d70:	080167cc 	.word	0x080167cc
 8013d74:	08016932 	.word	0x08016932
 8013d78:	08016936 	.word	0x08016936
 8013d7c:	08011625 	.word	0x08011625
 8013d80:	08013b33 	.word	0x08013b33

08013d84 <_sbrk_r>:
 8013d84:	b538      	push	{r3, r4, r5, lr}
 8013d86:	4c06      	ldr	r4, [pc, #24]	; (8013da0 <_sbrk_r+0x1c>)
 8013d88:	2300      	movs	r3, #0
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	4608      	mov	r0, r1
 8013d8e:	6023      	str	r3, [r4, #0]
 8013d90:	f7f4 fd0e 	bl	80087b0 <_sbrk>
 8013d94:	1c43      	adds	r3, r0, #1
 8013d96:	d102      	bne.n	8013d9e <_sbrk_r+0x1a>
 8013d98:	6823      	ldr	r3, [r4, #0]
 8013d9a:	b103      	cbz	r3, 8013d9e <_sbrk_r+0x1a>
 8013d9c:	602b      	str	r3, [r5, #0]
 8013d9e:	bd38      	pop	{r3, r4, r5, pc}
 8013da0:	20002a08 	.word	0x20002a08

08013da4 <__sread>:
 8013da4:	b510      	push	{r4, lr}
 8013da6:	460c      	mov	r4, r1
 8013da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dac:	f000 f8e8 	bl	8013f80 <_read_r>
 8013db0:	2800      	cmp	r0, #0
 8013db2:	bfab      	itete	ge
 8013db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013db6:	89a3      	ldrhlt	r3, [r4, #12]
 8013db8:	181b      	addge	r3, r3, r0
 8013dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dbe:	bfac      	ite	ge
 8013dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013dc2:	81a3      	strhlt	r3, [r4, #12]
 8013dc4:	bd10      	pop	{r4, pc}

08013dc6 <__swrite>:
 8013dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dca:	461f      	mov	r7, r3
 8013dcc:	898b      	ldrh	r3, [r1, #12]
 8013dce:	05db      	lsls	r3, r3, #23
 8013dd0:	4605      	mov	r5, r0
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	4616      	mov	r6, r2
 8013dd6:	d505      	bpl.n	8013de4 <__swrite+0x1e>
 8013dd8:	2302      	movs	r3, #2
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de0:	f000 f868 	bl	8013eb4 <_lseek_r>
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013dee:	81a3      	strh	r3, [r4, #12]
 8013df0:	4632      	mov	r2, r6
 8013df2:	463b      	mov	r3, r7
 8013df4:	4628      	mov	r0, r5
 8013df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dfa:	f000 b817 	b.w	8013e2c <_write_r>

08013dfe <__sseek>:
 8013dfe:	b510      	push	{r4, lr}
 8013e00:	460c      	mov	r4, r1
 8013e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e06:	f000 f855 	bl	8013eb4 <_lseek_r>
 8013e0a:	1c43      	adds	r3, r0, #1
 8013e0c:	89a3      	ldrh	r3, [r4, #12]
 8013e0e:	bf15      	itete	ne
 8013e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e1a:	81a3      	strheq	r3, [r4, #12]
 8013e1c:	bf18      	it	ne
 8013e1e:	81a3      	strhne	r3, [r4, #12]
 8013e20:	bd10      	pop	{r4, pc}

08013e22 <__sclose>:
 8013e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e26:	f000 b813 	b.w	8013e50 <_close_r>
	...

08013e2c <_write_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4c07      	ldr	r4, [pc, #28]	; (8013e4c <_write_r+0x20>)
 8013e30:	4605      	mov	r5, r0
 8013e32:	4608      	mov	r0, r1
 8013e34:	4611      	mov	r1, r2
 8013e36:	2200      	movs	r2, #0
 8013e38:	6022      	str	r2, [r4, #0]
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	f7f4 f969 	bl	8008112 <_write>
 8013e40:	1c43      	adds	r3, r0, #1
 8013e42:	d102      	bne.n	8013e4a <_write_r+0x1e>
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	b103      	cbz	r3, 8013e4a <_write_r+0x1e>
 8013e48:	602b      	str	r3, [r5, #0]
 8013e4a:	bd38      	pop	{r3, r4, r5, pc}
 8013e4c:	20002a08 	.word	0x20002a08

08013e50 <_close_r>:
 8013e50:	b538      	push	{r3, r4, r5, lr}
 8013e52:	4c06      	ldr	r4, [pc, #24]	; (8013e6c <_close_r+0x1c>)
 8013e54:	2300      	movs	r3, #0
 8013e56:	4605      	mov	r5, r0
 8013e58:	4608      	mov	r0, r1
 8013e5a:	6023      	str	r3, [r4, #0]
 8013e5c:	f7f4 fc73 	bl	8008746 <_close>
 8013e60:	1c43      	adds	r3, r0, #1
 8013e62:	d102      	bne.n	8013e6a <_close_r+0x1a>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	b103      	cbz	r3, 8013e6a <_close_r+0x1a>
 8013e68:	602b      	str	r3, [r5, #0]
 8013e6a:	bd38      	pop	{r3, r4, r5, pc}
 8013e6c:	20002a08 	.word	0x20002a08

08013e70 <_fstat_r>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	4c07      	ldr	r4, [pc, #28]	; (8013e90 <_fstat_r+0x20>)
 8013e74:	2300      	movs	r3, #0
 8013e76:	4605      	mov	r5, r0
 8013e78:	4608      	mov	r0, r1
 8013e7a:	4611      	mov	r1, r2
 8013e7c:	6023      	str	r3, [r4, #0]
 8013e7e:	f7f4 fc6e 	bl	800875e <_fstat>
 8013e82:	1c43      	adds	r3, r0, #1
 8013e84:	d102      	bne.n	8013e8c <_fstat_r+0x1c>
 8013e86:	6823      	ldr	r3, [r4, #0]
 8013e88:	b103      	cbz	r3, 8013e8c <_fstat_r+0x1c>
 8013e8a:	602b      	str	r3, [r5, #0]
 8013e8c:	bd38      	pop	{r3, r4, r5, pc}
 8013e8e:	bf00      	nop
 8013e90:	20002a08 	.word	0x20002a08

08013e94 <_isatty_r>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4c06      	ldr	r4, [pc, #24]	; (8013eb0 <_isatty_r+0x1c>)
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	4608      	mov	r0, r1
 8013e9e:	6023      	str	r3, [r4, #0]
 8013ea0:	f7f4 fc6d 	bl	800877e <_isatty>
 8013ea4:	1c43      	adds	r3, r0, #1
 8013ea6:	d102      	bne.n	8013eae <_isatty_r+0x1a>
 8013ea8:	6823      	ldr	r3, [r4, #0]
 8013eaa:	b103      	cbz	r3, 8013eae <_isatty_r+0x1a>
 8013eac:	602b      	str	r3, [r5, #0]
 8013eae:	bd38      	pop	{r3, r4, r5, pc}
 8013eb0:	20002a08 	.word	0x20002a08

08013eb4 <_lseek_r>:
 8013eb4:	b538      	push	{r3, r4, r5, lr}
 8013eb6:	4c07      	ldr	r4, [pc, #28]	; (8013ed4 <_lseek_r+0x20>)
 8013eb8:	4605      	mov	r5, r0
 8013eba:	4608      	mov	r0, r1
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	6022      	str	r2, [r4, #0]
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	f7f4 fc66 	bl	8008794 <_lseek>
 8013ec8:	1c43      	adds	r3, r0, #1
 8013eca:	d102      	bne.n	8013ed2 <_lseek_r+0x1e>
 8013ecc:	6823      	ldr	r3, [r4, #0]
 8013ece:	b103      	cbz	r3, 8013ed2 <_lseek_r+0x1e>
 8013ed0:	602b      	str	r3, [r5, #0]
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}
 8013ed4:	20002a08 	.word	0x20002a08

08013ed8 <__ascii_mbtowc>:
 8013ed8:	b082      	sub	sp, #8
 8013eda:	b901      	cbnz	r1, 8013ede <__ascii_mbtowc+0x6>
 8013edc:	a901      	add	r1, sp, #4
 8013ede:	b142      	cbz	r2, 8013ef2 <__ascii_mbtowc+0x1a>
 8013ee0:	b14b      	cbz	r3, 8013ef6 <__ascii_mbtowc+0x1e>
 8013ee2:	7813      	ldrb	r3, [r2, #0]
 8013ee4:	600b      	str	r3, [r1, #0]
 8013ee6:	7812      	ldrb	r2, [r2, #0]
 8013ee8:	1c10      	adds	r0, r2, #0
 8013eea:	bf18      	it	ne
 8013eec:	2001      	movne	r0, #1
 8013eee:	b002      	add	sp, #8
 8013ef0:	4770      	bx	lr
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	e7fb      	b.n	8013eee <__ascii_mbtowc+0x16>
 8013ef6:	f06f 0001 	mvn.w	r0, #1
 8013efa:	e7f8      	b.n	8013eee <__ascii_mbtowc+0x16>

08013efc <memmove>:
 8013efc:	4288      	cmp	r0, r1
 8013efe:	b510      	push	{r4, lr}
 8013f00:	eb01 0302 	add.w	r3, r1, r2
 8013f04:	d807      	bhi.n	8013f16 <memmove+0x1a>
 8013f06:	1e42      	subs	r2, r0, #1
 8013f08:	4299      	cmp	r1, r3
 8013f0a:	d00a      	beq.n	8013f22 <memmove+0x26>
 8013f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f10:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f14:	e7f8      	b.n	8013f08 <memmove+0xc>
 8013f16:	4283      	cmp	r3, r0
 8013f18:	d9f5      	bls.n	8013f06 <memmove+0xa>
 8013f1a:	1881      	adds	r1, r0, r2
 8013f1c:	1ad2      	subs	r2, r2, r3
 8013f1e:	42d3      	cmn	r3, r2
 8013f20:	d100      	bne.n	8013f24 <memmove+0x28>
 8013f22:	bd10      	pop	{r4, pc}
 8013f24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013f2c:	e7f7      	b.n	8013f1e <memmove+0x22>

08013f2e <__malloc_lock>:
 8013f2e:	4770      	bx	lr

08013f30 <__malloc_unlock>:
 8013f30:	4770      	bx	lr

08013f32 <_realloc_r>:
 8013f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f34:	4607      	mov	r7, r0
 8013f36:	4614      	mov	r4, r2
 8013f38:	460e      	mov	r6, r1
 8013f3a:	b921      	cbnz	r1, 8013f46 <_realloc_r+0x14>
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f42:	f7ff bc33 	b.w	80137ac <_malloc_r>
 8013f46:	b922      	cbnz	r2, 8013f52 <_realloc_r+0x20>
 8013f48:	f7ff fbe2 	bl	8013710 <_free_r>
 8013f4c:	4625      	mov	r5, r4
 8013f4e:	4628      	mov	r0, r5
 8013f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f52:	f000 f834 	bl	8013fbe <_malloc_usable_size_r>
 8013f56:	42a0      	cmp	r0, r4
 8013f58:	d20f      	bcs.n	8013f7a <_realloc_r+0x48>
 8013f5a:	4621      	mov	r1, r4
 8013f5c:	4638      	mov	r0, r7
 8013f5e:	f7ff fc25 	bl	80137ac <_malloc_r>
 8013f62:	4605      	mov	r5, r0
 8013f64:	2800      	cmp	r0, #0
 8013f66:	d0f2      	beq.n	8013f4e <_realloc_r+0x1c>
 8013f68:	4631      	mov	r1, r6
 8013f6a:	4622      	mov	r2, r4
 8013f6c:	f7ff f8dc 	bl	8013128 <memcpy>
 8013f70:	4631      	mov	r1, r6
 8013f72:	4638      	mov	r0, r7
 8013f74:	f7ff fbcc 	bl	8013710 <_free_r>
 8013f78:	e7e9      	b.n	8013f4e <_realloc_r+0x1c>
 8013f7a:	4635      	mov	r5, r6
 8013f7c:	e7e7      	b.n	8013f4e <_realloc_r+0x1c>
	...

08013f80 <_read_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	4c07      	ldr	r4, [pc, #28]	; (8013fa0 <_read_r+0x20>)
 8013f84:	4605      	mov	r5, r0
 8013f86:	4608      	mov	r0, r1
 8013f88:	4611      	mov	r1, r2
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	6022      	str	r2, [r4, #0]
 8013f8e:	461a      	mov	r2, r3
 8013f90:	f7f4 fbbc 	bl	800870c <_read>
 8013f94:	1c43      	adds	r3, r0, #1
 8013f96:	d102      	bne.n	8013f9e <_read_r+0x1e>
 8013f98:	6823      	ldr	r3, [r4, #0]
 8013f9a:	b103      	cbz	r3, 8013f9e <_read_r+0x1e>
 8013f9c:	602b      	str	r3, [r5, #0]
 8013f9e:	bd38      	pop	{r3, r4, r5, pc}
 8013fa0:	20002a08 	.word	0x20002a08

08013fa4 <__ascii_wctomb>:
 8013fa4:	b149      	cbz	r1, 8013fba <__ascii_wctomb+0x16>
 8013fa6:	2aff      	cmp	r2, #255	; 0xff
 8013fa8:	bf85      	ittet	hi
 8013faa:	238a      	movhi	r3, #138	; 0x8a
 8013fac:	6003      	strhi	r3, [r0, #0]
 8013fae:	700a      	strbls	r2, [r1, #0]
 8013fb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013fb4:	bf98      	it	ls
 8013fb6:	2001      	movls	r0, #1
 8013fb8:	4770      	bx	lr
 8013fba:	4608      	mov	r0, r1
 8013fbc:	4770      	bx	lr

08013fbe <_malloc_usable_size_r>:
 8013fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fc2:	1f18      	subs	r0, r3, #4
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	bfbc      	itt	lt
 8013fc8:	580b      	ldrlt	r3, [r1, r0]
 8013fca:	18c0      	addlt	r0, r0, r3
 8013fcc:	4770      	bx	lr
	...

08013fd0 <log10>:
 8013fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fd2:	ed2d 8b02 	vpush	{d8}
 8013fd6:	b08b      	sub	sp, #44	; 0x2c
 8013fd8:	ec55 4b10 	vmov	r4, r5, d0
 8013fdc:	f000 f9e8 	bl	80143b0 <__ieee754_log10>
 8013fe0:	4b36      	ldr	r3, [pc, #216]	; (80140bc <log10+0xec>)
 8013fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8013fe6:	eef0 8a60 	vmov.f32	s17, s1
 8013fea:	f993 6000 	ldrsb.w	r6, [r3]
 8013fee:	1c73      	adds	r3, r6, #1
 8013ff0:	d05c      	beq.n	80140ac <log10+0xdc>
 8013ff2:	4622      	mov	r2, r4
 8013ff4:	462b      	mov	r3, r5
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	4629      	mov	r1, r5
 8013ffa:	f7ec fdbf 	bl	8000b7c <__aeabi_dcmpun>
 8013ffe:	4607      	mov	r7, r0
 8014000:	2800      	cmp	r0, #0
 8014002:	d153      	bne.n	80140ac <log10+0xdc>
 8014004:	2200      	movs	r2, #0
 8014006:	2300      	movs	r3, #0
 8014008:	4620      	mov	r0, r4
 801400a:	4629      	mov	r1, r5
 801400c:	f7ec fd98 	bl	8000b40 <__aeabi_dcmple>
 8014010:	2800      	cmp	r0, #0
 8014012:	d04b      	beq.n	80140ac <log10+0xdc>
 8014014:	4b2a      	ldr	r3, [pc, #168]	; (80140c0 <log10+0xf0>)
 8014016:	9301      	str	r3, [sp, #4]
 8014018:	9708      	str	r7, [sp, #32]
 801401a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801401e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014022:	b9a6      	cbnz	r6, 801404e <log10+0x7e>
 8014024:	4b27      	ldr	r3, [pc, #156]	; (80140c4 <log10+0xf4>)
 8014026:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801402a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801402e:	4620      	mov	r0, r4
 8014030:	2200      	movs	r2, #0
 8014032:	2300      	movs	r3, #0
 8014034:	4629      	mov	r1, r5
 8014036:	f7ec fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 801403a:	bb40      	cbnz	r0, 801408e <log10+0xbe>
 801403c:	2301      	movs	r3, #1
 801403e:	2e02      	cmp	r6, #2
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	d119      	bne.n	8014078 <log10+0xa8>
 8014044:	f7fd fa28 	bl	8011498 <__errno>
 8014048:	2321      	movs	r3, #33	; 0x21
 801404a:	6003      	str	r3, [r0, #0]
 801404c:	e019      	b.n	8014082 <log10+0xb2>
 801404e:	4b1e      	ldr	r3, [pc, #120]	; (80140c8 <log10+0xf8>)
 8014050:	2200      	movs	r2, #0
 8014052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014056:	4620      	mov	r0, r4
 8014058:	2200      	movs	r2, #0
 801405a:	2300      	movs	r3, #0
 801405c:	4629      	mov	r1, r5
 801405e:	f7ec fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 8014062:	2800      	cmp	r0, #0
 8014064:	d0ea      	beq.n	801403c <log10+0x6c>
 8014066:	2302      	movs	r3, #2
 8014068:	429e      	cmp	r6, r3
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	d111      	bne.n	8014092 <log10+0xc2>
 801406e:	f7fd fa13 	bl	8011498 <__errno>
 8014072:	2322      	movs	r3, #34	; 0x22
 8014074:	6003      	str	r3, [r0, #0]
 8014076:	e011      	b.n	801409c <log10+0xcc>
 8014078:	4668      	mov	r0, sp
 801407a:	f000 fff4 	bl	8015066 <matherr>
 801407e:	2800      	cmp	r0, #0
 8014080:	d0e0      	beq.n	8014044 <log10+0x74>
 8014082:	4812      	ldr	r0, [pc, #72]	; (80140cc <log10+0xfc>)
 8014084:	f000 fff4 	bl	8015070 <nan>
 8014088:	ed8d 0b06 	vstr	d0, [sp, #24]
 801408c:	e006      	b.n	801409c <log10+0xcc>
 801408e:	2302      	movs	r3, #2
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	4668      	mov	r0, sp
 8014094:	f000 ffe7 	bl	8015066 <matherr>
 8014098:	2800      	cmp	r0, #0
 801409a:	d0e8      	beq.n	801406e <log10+0x9e>
 801409c:	9b08      	ldr	r3, [sp, #32]
 801409e:	b11b      	cbz	r3, 80140a8 <log10+0xd8>
 80140a0:	f7fd f9fa 	bl	8011498 <__errno>
 80140a4:	9b08      	ldr	r3, [sp, #32]
 80140a6:	6003      	str	r3, [r0, #0]
 80140a8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80140ac:	eeb0 0a48 	vmov.f32	s0, s16
 80140b0:	eef0 0a68 	vmov.f32	s1, s17
 80140b4:	b00b      	add	sp, #44	; 0x2c
 80140b6:	ecbd 8b02 	vpop	{d8}
 80140ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140bc:	20001e08 	.word	0x20001e08
 80140c0:	08016a48 	.word	0x08016a48
 80140c4:	c7efffff 	.word	0xc7efffff
 80140c8:	fff00000 	.word	0xfff00000
 80140cc:	08016931 	.word	0x08016931

080140d0 <pow>:
 80140d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	ed2d 8b04 	vpush	{d8-d9}
 80140d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80143ac <pow+0x2dc>
 80140dc:	b08d      	sub	sp, #52	; 0x34
 80140de:	ec57 6b10 	vmov	r6, r7, d0
 80140e2:	ec55 4b11 	vmov	r4, r5, d1
 80140e6:	f000 f9ef 	bl	80144c8 <__ieee754_pow>
 80140ea:	f999 3000 	ldrsb.w	r3, [r9]
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	3301      	adds	r3, #1
 80140f2:	eeb0 8a40 	vmov.f32	s16, s0
 80140f6:	eef0 8a60 	vmov.f32	s17, s1
 80140fa:	46c8      	mov	r8, r9
 80140fc:	d05f      	beq.n	80141be <pow+0xee>
 80140fe:	4622      	mov	r2, r4
 8014100:	462b      	mov	r3, r5
 8014102:	4620      	mov	r0, r4
 8014104:	4629      	mov	r1, r5
 8014106:	f7ec fd39 	bl	8000b7c <__aeabi_dcmpun>
 801410a:	4683      	mov	fp, r0
 801410c:	2800      	cmp	r0, #0
 801410e:	d156      	bne.n	80141be <pow+0xee>
 8014110:	4632      	mov	r2, r6
 8014112:	463b      	mov	r3, r7
 8014114:	4630      	mov	r0, r6
 8014116:	4639      	mov	r1, r7
 8014118:	f7ec fd30 	bl	8000b7c <__aeabi_dcmpun>
 801411c:	9001      	str	r0, [sp, #4]
 801411e:	b1e8      	cbz	r0, 801415c <pow+0x8c>
 8014120:	2200      	movs	r2, #0
 8014122:	2300      	movs	r3, #0
 8014124:	4620      	mov	r0, r4
 8014126:	4629      	mov	r1, r5
 8014128:	f7ec fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 801412c:	2800      	cmp	r0, #0
 801412e:	d046      	beq.n	80141be <pow+0xee>
 8014130:	2301      	movs	r3, #1
 8014132:	9302      	str	r3, [sp, #8]
 8014134:	4b96      	ldr	r3, [pc, #600]	; (8014390 <pow+0x2c0>)
 8014136:	9303      	str	r3, [sp, #12]
 8014138:	4b96      	ldr	r3, [pc, #600]	; (8014394 <pow+0x2c4>)
 801413a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801413e:	2200      	movs	r2, #0
 8014140:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014144:	9b00      	ldr	r3, [sp, #0]
 8014146:	2b02      	cmp	r3, #2
 8014148:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801414c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014150:	d033      	beq.n	80141ba <pow+0xea>
 8014152:	a802      	add	r0, sp, #8
 8014154:	f000 ff87 	bl	8015066 <matherr>
 8014158:	bb48      	cbnz	r0, 80141ae <pow+0xde>
 801415a:	e05d      	b.n	8014218 <pow+0x148>
 801415c:	f04f 0a00 	mov.w	sl, #0
 8014160:	f04f 0b00 	mov.w	fp, #0
 8014164:	4652      	mov	r2, sl
 8014166:	465b      	mov	r3, fp
 8014168:	4630      	mov	r0, r6
 801416a:	4639      	mov	r1, r7
 801416c:	f7ec fcd4 	bl	8000b18 <__aeabi_dcmpeq>
 8014170:	ec4b ab19 	vmov	d9, sl, fp
 8014174:	2800      	cmp	r0, #0
 8014176:	d054      	beq.n	8014222 <pow+0x152>
 8014178:	4652      	mov	r2, sl
 801417a:	465b      	mov	r3, fp
 801417c:	4620      	mov	r0, r4
 801417e:	4629      	mov	r1, r5
 8014180:	f7ec fcca 	bl	8000b18 <__aeabi_dcmpeq>
 8014184:	4680      	mov	r8, r0
 8014186:	b318      	cbz	r0, 80141d0 <pow+0x100>
 8014188:	2301      	movs	r3, #1
 801418a:	9302      	str	r3, [sp, #8]
 801418c:	4b80      	ldr	r3, [pc, #512]	; (8014390 <pow+0x2c0>)
 801418e:	9303      	str	r3, [sp, #12]
 8014190:	9b01      	ldr	r3, [sp, #4]
 8014192:	930a      	str	r3, [sp, #40]	; 0x28
 8014194:	9b00      	ldr	r3, [sp, #0]
 8014196:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801419a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801419e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d0d5      	beq.n	8014152 <pow+0x82>
 80141a6:	4b7b      	ldr	r3, [pc, #492]	; (8014394 <pow+0x2c4>)
 80141a8:	2200      	movs	r2, #0
 80141aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80141ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b0:	b11b      	cbz	r3, 80141ba <pow+0xea>
 80141b2:	f7fd f971 	bl	8011498 <__errno>
 80141b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b8:	6003      	str	r3, [r0, #0]
 80141ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 80141be:	eeb0 0a48 	vmov.f32	s0, s16
 80141c2:	eef0 0a68 	vmov.f32	s1, s17
 80141c6:	b00d      	add	sp, #52	; 0x34
 80141c8:	ecbd 8b04 	vpop	{d8-d9}
 80141cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d0:	ec45 4b10 	vmov	d0, r4, r5
 80141d4:	f000 ff3f 	bl	8015056 <finite>
 80141d8:	2800      	cmp	r0, #0
 80141da:	d0f0      	beq.n	80141be <pow+0xee>
 80141dc:	4652      	mov	r2, sl
 80141de:	465b      	mov	r3, fp
 80141e0:	4620      	mov	r0, r4
 80141e2:	4629      	mov	r1, r5
 80141e4:	f7ec fca2 	bl	8000b2c <__aeabi_dcmplt>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d0e8      	beq.n	80141be <pow+0xee>
 80141ec:	2301      	movs	r3, #1
 80141ee:	9302      	str	r3, [sp, #8]
 80141f0:	4b67      	ldr	r3, [pc, #412]	; (8014390 <pow+0x2c0>)
 80141f2:	9303      	str	r3, [sp, #12]
 80141f4:	f999 3000 	ldrsb.w	r3, [r9]
 80141f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80141fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014200:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014204:	b913      	cbnz	r3, 801420c <pow+0x13c>
 8014206:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801420a:	e7a2      	b.n	8014152 <pow+0x82>
 801420c:	4962      	ldr	r1, [pc, #392]	; (8014398 <pow+0x2c8>)
 801420e:	2000      	movs	r0, #0
 8014210:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014214:	2b02      	cmp	r3, #2
 8014216:	d19c      	bne.n	8014152 <pow+0x82>
 8014218:	f7fd f93e 	bl	8011498 <__errno>
 801421c:	2321      	movs	r3, #33	; 0x21
 801421e:	6003      	str	r3, [r0, #0]
 8014220:	e7c5      	b.n	80141ae <pow+0xde>
 8014222:	eeb0 0a48 	vmov.f32	s0, s16
 8014226:	eef0 0a68 	vmov.f32	s1, s17
 801422a:	f000 ff14 	bl	8015056 <finite>
 801422e:	9000      	str	r0, [sp, #0]
 8014230:	2800      	cmp	r0, #0
 8014232:	f040 8081 	bne.w	8014338 <pow+0x268>
 8014236:	ec47 6b10 	vmov	d0, r6, r7
 801423a:	f000 ff0c 	bl	8015056 <finite>
 801423e:	2800      	cmp	r0, #0
 8014240:	d07a      	beq.n	8014338 <pow+0x268>
 8014242:	ec45 4b10 	vmov	d0, r4, r5
 8014246:	f000 ff06 	bl	8015056 <finite>
 801424a:	2800      	cmp	r0, #0
 801424c:	d074      	beq.n	8014338 <pow+0x268>
 801424e:	ec53 2b18 	vmov	r2, r3, d8
 8014252:	ee18 0a10 	vmov	r0, s16
 8014256:	4619      	mov	r1, r3
 8014258:	f7ec fc90 	bl	8000b7c <__aeabi_dcmpun>
 801425c:	f999 9000 	ldrsb.w	r9, [r9]
 8014260:	4b4b      	ldr	r3, [pc, #300]	; (8014390 <pow+0x2c0>)
 8014262:	b1b0      	cbz	r0, 8014292 <pow+0x1c2>
 8014264:	2201      	movs	r2, #1
 8014266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801426a:	9b00      	ldr	r3, [sp, #0]
 801426c:	930a      	str	r3, [sp, #40]	; 0x28
 801426e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014272:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014276:	f1b9 0f00 	cmp.w	r9, #0
 801427a:	d0c4      	beq.n	8014206 <pow+0x136>
 801427c:	4652      	mov	r2, sl
 801427e:	465b      	mov	r3, fp
 8014280:	4650      	mov	r0, sl
 8014282:	4659      	mov	r1, fp
 8014284:	f7ec fb0a 	bl	800089c <__aeabi_ddiv>
 8014288:	f1b9 0f02 	cmp.w	r9, #2
 801428c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014290:	e7c1      	b.n	8014216 <pow+0x146>
 8014292:	2203      	movs	r2, #3
 8014294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014298:	900a      	str	r0, [sp, #40]	; 0x28
 801429a:	4629      	mov	r1, r5
 801429c:	4620      	mov	r0, r4
 801429e:	2200      	movs	r2, #0
 80142a0:	4b3e      	ldr	r3, [pc, #248]	; (801439c <pow+0x2cc>)
 80142a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80142a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80142aa:	f7ec f9cd 	bl	8000648 <__aeabi_dmul>
 80142ae:	4604      	mov	r4, r0
 80142b0:	460d      	mov	r5, r1
 80142b2:	f1b9 0f00 	cmp.w	r9, #0
 80142b6:	d124      	bne.n	8014302 <pow+0x232>
 80142b8:	4b39      	ldr	r3, [pc, #228]	; (80143a0 <pow+0x2d0>)
 80142ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142c2:	4630      	mov	r0, r6
 80142c4:	4652      	mov	r2, sl
 80142c6:	465b      	mov	r3, fp
 80142c8:	4639      	mov	r1, r7
 80142ca:	f7ec fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d056      	beq.n	8014380 <pow+0x2b0>
 80142d2:	ec45 4b10 	vmov	d0, r4, r5
 80142d6:	f000 fed3 	bl	8015080 <rint>
 80142da:	4622      	mov	r2, r4
 80142dc:	462b      	mov	r3, r5
 80142de:	ec51 0b10 	vmov	r0, r1, d0
 80142e2:	f7ec fc19 	bl	8000b18 <__aeabi_dcmpeq>
 80142e6:	b920      	cbnz	r0, 80142f2 <pow+0x222>
 80142e8:	4b2e      	ldr	r3, [pc, #184]	; (80143a4 <pow+0x2d4>)
 80142ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142f2:	f998 3000 	ldrsb.w	r3, [r8]
 80142f6:	2b02      	cmp	r3, #2
 80142f8:	d142      	bne.n	8014380 <pow+0x2b0>
 80142fa:	f7fd f8cd 	bl	8011498 <__errno>
 80142fe:	2322      	movs	r3, #34	; 0x22
 8014300:	e78d      	b.n	801421e <pow+0x14e>
 8014302:	4b29      	ldr	r3, [pc, #164]	; (80143a8 <pow+0x2d8>)
 8014304:	2200      	movs	r2, #0
 8014306:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801430a:	4630      	mov	r0, r6
 801430c:	4652      	mov	r2, sl
 801430e:	465b      	mov	r3, fp
 8014310:	4639      	mov	r1, r7
 8014312:	f7ec fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8014316:	2800      	cmp	r0, #0
 8014318:	d0eb      	beq.n	80142f2 <pow+0x222>
 801431a:	ec45 4b10 	vmov	d0, r4, r5
 801431e:	f000 feaf 	bl	8015080 <rint>
 8014322:	4622      	mov	r2, r4
 8014324:	462b      	mov	r3, r5
 8014326:	ec51 0b10 	vmov	r0, r1, d0
 801432a:	f7ec fbf5 	bl	8000b18 <__aeabi_dcmpeq>
 801432e:	2800      	cmp	r0, #0
 8014330:	d1df      	bne.n	80142f2 <pow+0x222>
 8014332:	2200      	movs	r2, #0
 8014334:	4b18      	ldr	r3, [pc, #96]	; (8014398 <pow+0x2c8>)
 8014336:	e7da      	b.n	80142ee <pow+0x21e>
 8014338:	2200      	movs	r2, #0
 801433a:	2300      	movs	r3, #0
 801433c:	ec51 0b18 	vmov	r0, r1, d8
 8014340:	f7ec fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8014344:	2800      	cmp	r0, #0
 8014346:	f43f af3a 	beq.w	80141be <pow+0xee>
 801434a:	ec47 6b10 	vmov	d0, r6, r7
 801434e:	f000 fe82 	bl	8015056 <finite>
 8014352:	2800      	cmp	r0, #0
 8014354:	f43f af33 	beq.w	80141be <pow+0xee>
 8014358:	ec45 4b10 	vmov	d0, r4, r5
 801435c:	f000 fe7b 	bl	8015056 <finite>
 8014360:	2800      	cmp	r0, #0
 8014362:	f43f af2c 	beq.w	80141be <pow+0xee>
 8014366:	2304      	movs	r3, #4
 8014368:	9302      	str	r3, [sp, #8]
 801436a:	4b09      	ldr	r3, [pc, #36]	; (8014390 <pow+0x2c0>)
 801436c:	9303      	str	r3, [sp, #12]
 801436e:	2300      	movs	r3, #0
 8014370:	930a      	str	r3, [sp, #40]	; 0x28
 8014372:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014376:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801437a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801437e:	e7b8      	b.n	80142f2 <pow+0x222>
 8014380:	a802      	add	r0, sp, #8
 8014382:	f000 fe70 	bl	8015066 <matherr>
 8014386:	2800      	cmp	r0, #0
 8014388:	f47f af11 	bne.w	80141ae <pow+0xde>
 801438c:	e7b5      	b.n	80142fa <pow+0x22a>
 801438e:	bf00      	nop
 8014390:	08016a4e 	.word	0x08016a4e
 8014394:	3ff00000 	.word	0x3ff00000
 8014398:	fff00000 	.word	0xfff00000
 801439c:	3fe00000 	.word	0x3fe00000
 80143a0:	47efffff 	.word	0x47efffff
 80143a4:	c7efffff 	.word	0xc7efffff
 80143a8:	7ff00000 	.word	0x7ff00000
 80143ac:	20001e08 	.word	0x20001e08

080143b0 <__ieee754_log10>:
 80143b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143b4:	ec55 4b10 	vmov	r4, r5, d0
 80143b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80143bc:	462b      	mov	r3, r5
 80143be:	da2f      	bge.n	8014420 <__ieee754_log10+0x70>
 80143c0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80143c4:	4322      	orrs	r2, r4
 80143c6:	d10a      	bne.n	80143de <__ieee754_log10+0x2e>
 80143c8:	493b      	ldr	r1, [pc, #236]	; (80144b8 <__ieee754_log10+0x108>)
 80143ca:	2200      	movs	r2, #0
 80143cc:	2300      	movs	r3, #0
 80143ce:	2000      	movs	r0, #0
 80143d0:	f7ec fa64 	bl	800089c <__aeabi_ddiv>
 80143d4:	ec41 0b10 	vmov	d0, r0, r1
 80143d8:	b003      	add	sp, #12
 80143da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143de:	2d00      	cmp	r5, #0
 80143e0:	da08      	bge.n	80143f4 <__ieee754_log10+0x44>
 80143e2:	ee10 2a10 	vmov	r2, s0
 80143e6:	4620      	mov	r0, r4
 80143e8:	4629      	mov	r1, r5
 80143ea:	f7eb ff75 	bl	80002d8 <__aeabi_dsub>
 80143ee:	2200      	movs	r2, #0
 80143f0:	2300      	movs	r3, #0
 80143f2:	e7ed      	b.n	80143d0 <__ieee754_log10+0x20>
 80143f4:	2200      	movs	r2, #0
 80143f6:	4b31      	ldr	r3, [pc, #196]	; (80144bc <__ieee754_log10+0x10c>)
 80143f8:	4629      	mov	r1, r5
 80143fa:	ee10 0a10 	vmov	r0, s0
 80143fe:	f7ec f923 	bl	8000648 <__aeabi_dmul>
 8014402:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8014406:	4604      	mov	r4, r0
 8014408:	460d      	mov	r5, r1
 801440a:	460b      	mov	r3, r1
 801440c:	492c      	ldr	r1, [pc, #176]	; (80144c0 <__ieee754_log10+0x110>)
 801440e:	428b      	cmp	r3, r1
 8014410:	dd08      	ble.n	8014424 <__ieee754_log10+0x74>
 8014412:	4622      	mov	r2, r4
 8014414:	462b      	mov	r3, r5
 8014416:	4620      	mov	r0, r4
 8014418:	4629      	mov	r1, r5
 801441a:	f7eb ff5f 	bl	80002dc <__adddf3>
 801441e:	e7d9      	b.n	80143d4 <__ieee754_log10+0x24>
 8014420:	2200      	movs	r2, #0
 8014422:	e7f3      	b.n	801440c <__ieee754_log10+0x5c>
 8014424:	1518      	asrs	r0, r3, #20
 8014426:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801442a:	4410      	add	r0, r2
 801442c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014430:	4448      	add	r0, r9
 8014432:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8014436:	f7ec f89d 	bl	8000574 <__aeabi_i2d>
 801443a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801443e:	3303      	adds	r3, #3
 8014440:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8014444:	ec45 4b10 	vmov	d0, r4, r5
 8014448:	4606      	mov	r6, r0
 801444a:	460f      	mov	r7, r1
 801444c:	f000 ff14 	bl	8015278 <__ieee754_log>
 8014450:	a313      	add	r3, pc, #76	; (adr r3, 80144a0 <__ieee754_log10+0xf0>)
 8014452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014456:	4630      	mov	r0, r6
 8014458:	4639      	mov	r1, r7
 801445a:	ed8d 0b00 	vstr	d0, [sp]
 801445e:	f7ec f8f3 	bl	8000648 <__aeabi_dmul>
 8014462:	ed9d 0b00 	vldr	d0, [sp]
 8014466:	4604      	mov	r4, r0
 8014468:	460d      	mov	r5, r1
 801446a:	a30f      	add	r3, pc, #60	; (adr r3, 80144a8 <__ieee754_log10+0xf8>)
 801446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014470:	ec51 0b10 	vmov	r0, r1, d0
 8014474:	f7ec f8e8 	bl	8000648 <__aeabi_dmul>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	4620      	mov	r0, r4
 801447e:	4629      	mov	r1, r5
 8014480:	f7eb ff2c 	bl	80002dc <__adddf3>
 8014484:	a30a      	add	r3, pc, #40	; (adr r3, 80144b0 <__ieee754_log10+0x100>)
 8014486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448a:	4604      	mov	r4, r0
 801448c:	460d      	mov	r5, r1
 801448e:	4630      	mov	r0, r6
 8014490:	4639      	mov	r1, r7
 8014492:	f7ec f8d9 	bl	8000648 <__aeabi_dmul>
 8014496:	4602      	mov	r2, r0
 8014498:	460b      	mov	r3, r1
 801449a:	4620      	mov	r0, r4
 801449c:	4629      	mov	r1, r5
 801449e:	e7bc      	b.n	801441a <__ieee754_log10+0x6a>
 80144a0:	11f12b36 	.word	0x11f12b36
 80144a4:	3d59fef3 	.word	0x3d59fef3
 80144a8:	1526e50e 	.word	0x1526e50e
 80144ac:	3fdbcb7b 	.word	0x3fdbcb7b
 80144b0:	509f6000 	.word	0x509f6000
 80144b4:	3fd34413 	.word	0x3fd34413
 80144b8:	c3500000 	.word	0xc3500000
 80144bc:	43500000 	.word	0x43500000
 80144c0:	7fefffff 	.word	0x7fefffff
 80144c4:	00000000 	.word	0x00000000

080144c8 <__ieee754_pow>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	b091      	sub	sp, #68	; 0x44
 80144ce:	ed8d 1b00 	vstr	d1, [sp]
 80144d2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80144d6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80144da:	ea58 0302 	orrs.w	r3, r8, r2
 80144de:	ec57 6b10 	vmov	r6, r7, d0
 80144e2:	f000 84be 	beq.w	8014e62 <__ieee754_pow+0x99a>
 80144e6:	4b7a      	ldr	r3, [pc, #488]	; (80146d0 <__ieee754_pow+0x208>)
 80144e8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80144ec:	429c      	cmp	r4, r3
 80144ee:	463d      	mov	r5, r7
 80144f0:	ee10 aa10 	vmov	sl, s0
 80144f4:	dc09      	bgt.n	801450a <__ieee754_pow+0x42>
 80144f6:	d103      	bne.n	8014500 <__ieee754_pow+0x38>
 80144f8:	b93e      	cbnz	r6, 801450a <__ieee754_pow+0x42>
 80144fa:	45a0      	cmp	r8, r4
 80144fc:	dc0d      	bgt.n	801451a <__ieee754_pow+0x52>
 80144fe:	e001      	b.n	8014504 <__ieee754_pow+0x3c>
 8014500:	4598      	cmp	r8, r3
 8014502:	dc02      	bgt.n	801450a <__ieee754_pow+0x42>
 8014504:	4598      	cmp	r8, r3
 8014506:	d10e      	bne.n	8014526 <__ieee754_pow+0x5e>
 8014508:	b16a      	cbz	r2, 8014526 <__ieee754_pow+0x5e>
 801450a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801450e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014512:	ea54 030a 	orrs.w	r3, r4, sl
 8014516:	f000 84a4 	beq.w	8014e62 <__ieee754_pow+0x99a>
 801451a:	486e      	ldr	r0, [pc, #440]	; (80146d4 <__ieee754_pow+0x20c>)
 801451c:	b011      	add	sp, #68	; 0x44
 801451e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014522:	f000 bda5 	b.w	8015070 <nan>
 8014526:	2d00      	cmp	r5, #0
 8014528:	da53      	bge.n	80145d2 <__ieee754_pow+0x10a>
 801452a:	4b6b      	ldr	r3, [pc, #428]	; (80146d8 <__ieee754_pow+0x210>)
 801452c:	4598      	cmp	r8, r3
 801452e:	dc4d      	bgt.n	80145cc <__ieee754_pow+0x104>
 8014530:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014534:	4598      	cmp	r8, r3
 8014536:	dd4c      	ble.n	80145d2 <__ieee754_pow+0x10a>
 8014538:	ea4f 5328 	mov.w	r3, r8, asr #20
 801453c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014540:	2b14      	cmp	r3, #20
 8014542:	dd26      	ble.n	8014592 <__ieee754_pow+0xca>
 8014544:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014548:	fa22 f103 	lsr.w	r1, r2, r3
 801454c:	fa01 f303 	lsl.w	r3, r1, r3
 8014550:	4293      	cmp	r3, r2
 8014552:	d13e      	bne.n	80145d2 <__ieee754_pow+0x10a>
 8014554:	f001 0101 	and.w	r1, r1, #1
 8014558:	f1c1 0b02 	rsb	fp, r1, #2
 801455c:	2a00      	cmp	r2, #0
 801455e:	d15b      	bne.n	8014618 <__ieee754_pow+0x150>
 8014560:	4b5b      	ldr	r3, [pc, #364]	; (80146d0 <__ieee754_pow+0x208>)
 8014562:	4598      	cmp	r8, r3
 8014564:	d124      	bne.n	80145b0 <__ieee754_pow+0xe8>
 8014566:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801456a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801456e:	ea53 030a 	orrs.w	r3, r3, sl
 8014572:	f000 8476 	beq.w	8014e62 <__ieee754_pow+0x99a>
 8014576:	4b59      	ldr	r3, [pc, #356]	; (80146dc <__ieee754_pow+0x214>)
 8014578:	429c      	cmp	r4, r3
 801457a:	dd2d      	ble.n	80145d8 <__ieee754_pow+0x110>
 801457c:	f1b9 0f00 	cmp.w	r9, #0
 8014580:	f280 8473 	bge.w	8014e6a <__ieee754_pow+0x9a2>
 8014584:	2000      	movs	r0, #0
 8014586:	2100      	movs	r1, #0
 8014588:	ec41 0b10 	vmov	d0, r0, r1
 801458c:	b011      	add	sp, #68	; 0x44
 801458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014592:	2a00      	cmp	r2, #0
 8014594:	d13e      	bne.n	8014614 <__ieee754_pow+0x14c>
 8014596:	f1c3 0314 	rsb	r3, r3, #20
 801459a:	fa48 f103 	asr.w	r1, r8, r3
 801459e:	fa01 f303 	lsl.w	r3, r1, r3
 80145a2:	4543      	cmp	r3, r8
 80145a4:	f040 8469 	bne.w	8014e7a <__ieee754_pow+0x9b2>
 80145a8:	f001 0101 	and.w	r1, r1, #1
 80145ac:	f1c1 0b02 	rsb	fp, r1, #2
 80145b0:	4b4b      	ldr	r3, [pc, #300]	; (80146e0 <__ieee754_pow+0x218>)
 80145b2:	4598      	cmp	r8, r3
 80145b4:	d118      	bne.n	80145e8 <__ieee754_pow+0x120>
 80145b6:	f1b9 0f00 	cmp.w	r9, #0
 80145ba:	f280 845a 	bge.w	8014e72 <__ieee754_pow+0x9aa>
 80145be:	4948      	ldr	r1, [pc, #288]	; (80146e0 <__ieee754_pow+0x218>)
 80145c0:	4632      	mov	r2, r6
 80145c2:	463b      	mov	r3, r7
 80145c4:	2000      	movs	r0, #0
 80145c6:	f7ec f969 	bl	800089c <__aeabi_ddiv>
 80145ca:	e7dd      	b.n	8014588 <__ieee754_pow+0xc0>
 80145cc:	f04f 0b02 	mov.w	fp, #2
 80145d0:	e7c4      	b.n	801455c <__ieee754_pow+0x94>
 80145d2:	f04f 0b00 	mov.w	fp, #0
 80145d6:	e7c1      	b.n	801455c <__ieee754_pow+0x94>
 80145d8:	f1b9 0f00 	cmp.w	r9, #0
 80145dc:	dad2      	bge.n	8014584 <__ieee754_pow+0xbc>
 80145de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80145e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80145e6:	e7cf      	b.n	8014588 <__ieee754_pow+0xc0>
 80145e8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80145ec:	d106      	bne.n	80145fc <__ieee754_pow+0x134>
 80145ee:	4632      	mov	r2, r6
 80145f0:	463b      	mov	r3, r7
 80145f2:	4610      	mov	r0, r2
 80145f4:	4619      	mov	r1, r3
 80145f6:	f7ec f827 	bl	8000648 <__aeabi_dmul>
 80145fa:	e7c5      	b.n	8014588 <__ieee754_pow+0xc0>
 80145fc:	4b39      	ldr	r3, [pc, #228]	; (80146e4 <__ieee754_pow+0x21c>)
 80145fe:	4599      	cmp	r9, r3
 8014600:	d10a      	bne.n	8014618 <__ieee754_pow+0x150>
 8014602:	2d00      	cmp	r5, #0
 8014604:	db08      	blt.n	8014618 <__ieee754_pow+0x150>
 8014606:	ec47 6b10 	vmov	d0, r6, r7
 801460a:	b011      	add	sp, #68	; 0x44
 801460c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014610:	f000 bc68 	b.w	8014ee4 <__ieee754_sqrt>
 8014614:	f04f 0b00 	mov.w	fp, #0
 8014618:	ec47 6b10 	vmov	d0, r6, r7
 801461c:	f000 fd12 	bl	8015044 <fabs>
 8014620:	ec51 0b10 	vmov	r0, r1, d0
 8014624:	f1ba 0f00 	cmp.w	sl, #0
 8014628:	d127      	bne.n	801467a <__ieee754_pow+0x1b2>
 801462a:	b124      	cbz	r4, 8014636 <__ieee754_pow+0x16e>
 801462c:	4b2c      	ldr	r3, [pc, #176]	; (80146e0 <__ieee754_pow+0x218>)
 801462e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014632:	429a      	cmp	r2, r3
 8014634:	d121      	bne.n	801467a <__ieee754_pow+0x1b2>
 8014636:	f1b9 0f00 	cmp.w	r9, #0
 801463a:	da05      	bge.n	8014648 <__ieee754_pow+0x180>
 801463c:	4602      	mov	r2, r0
 801463e:	460b      	mov	r3, r1
 8014640:	2000      	movs	r0, #0
 8014642:	4927      	ldr	r1, [pc, #156]	; (80146e0 <__ieee754_pow+0x218>)
 8014644:	f7ec f92a 	bl	800089c <__aeabi_ddiv>
 8014648:	2d00      	cmp	r5, #0
 801464a:	da9d      	bge.n	8014588 <__ieee754_pow+0xc0>
 801464c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014650:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014654:	ea54 030b 	orrs.w	r3, r4, fp
 8014658:	d108      	bne.n	801466c <__ieee754_pow+0x1a4>
 801465a:	4602      	mov	r2, r0
 801465c:	460b      	mov	r3, r1
 801465e:	4610      	mov	r0, r2
 8014660:	4619      	mov	r1, r3
 8014662:	f7eb fe39 	bl	80002d8 <__aeabi_dsub>
 8014666:	4602      	mov	r2, r0
 8014668:	460b      	mov	r3, r1
 801466a:	e7ac      	b.n	80145c6 <__ieee754_pow+0xfe>
 801466c:	f1bb 0f01 	cmp.w	fp, #1
 8014670:	d18a      	bne.n	8014588 <__ieee754_pow+0xc0>
 8014672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014676:	4619      	mov	r1, r3
 8014678:	e786      	b.n	8014588 <__ieee754_pow+0xc0>
 801467a:	0fed      	lsrs	r5, r5, #31
 801467c:	1e6b      	subs	r3, r5, #1
 801467e:	930d      	str	r3, [sp, #52]	; 0x34
 8014680:	ea5b 0303 	orrs.w	r3, fp, r3
 8014684:	d102      	bne.n	801468c <__ieee754_pow+0x1c4>
 8014686:	4632      	mov	r2, r6
 8014688:	463b      	mov	r3, r7
 801468a:	e7e8      	b.n	801465e <__ieee754_pow+0x196>
 801468c:	4b16      	ldr	r3, [pc, #88]	; (80146e8 <__ieee754_pow+0x220>)
 801468e:	4598      	cmp	r8, r3
 8014690:	f340 80fe 	ble.w	8014890 <__ieee754_pow+0x3c8>
 8014694:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014698:	4598      	cmp	r8, r3
 801469a:	dd0a      	ble.n	80146b2 <__ieee754_pow+0x1ea>
 801469c:	4b0f      	ldr	r3, [pc, #60]	; (80146dc <__ieee754_pow+0x214>)
 801469e:	429c      	cmp	r4, r3
 80146a0:	dc0d      	bgt.n	80146be <__ieee754_pow+0x1f6>
 80146a2:	f1b9 0f00 	cmp.w	r9, #0
 80146a6:	f6bf af6d 	bge.w	8014584 <__ieee754_pow+0xbc>
 80146aa:	a307      	add	r3, pc, #28	; (adr r3, 80146c8 <__ieee754_pow+0x200>)
 80146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b0:	e79f      	b.n	80145f2 <__ieee754_pow+0x12a>
 80146b2:	4b0e      	ldr	r3, [pc, #56]	; (80146ec <__ieee754_pow+0x224>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	ddf4      	ble.n	80146a2 <__ieee754_pow+0x1da>
 80146b8:	4b09      	ldr	r3, [pc, #36]	; (80146e0 <__ieee754_pow+0x218>)
 80146ba:	429c      	cmp	r4, r3
 80146bc:	dd18      	ble.n	80146f0 <__ieee754_pow+0x228>
 80146be:	f1b9 0f00 	cmp.w	r9, #0
 80146c2:	dcf2      	bgt.n	80146aa <__ieee754_pow+0x1e2>
 80146c4:	e75e      	b.n	8014584 <__ieee754_pow+0xbc>
 80146c6:	bf00      	nop
 80146c8:	8800759c 	.word	0x8800759c
 80146cc:	7e37e43c 	.word	0x7e37e43c
 80146d0:	7ff00000 	.word	0x7ff00000
 80146d4:	08016931 	.word	0x08016931
 80146d8:	433fffff 	.word	0x433fffff
 80146dc:	3fefffff 	.word	0x3fefffff
 80146e0:	3ff00000 	.word	0x3ff00000
 80146e4:	3fe00000 	.word	0x3fe00000
 80146e8:	41e00000 	.word	0x41e00000
 80146ec:	3feffffe 	.word	0x3feffffe
 80146f0:	2200      	movs	r2, #0
 80146f2:	4b63      	ldr	r3, [pc, #396]	; (8014880 <__ieee754_pow+0x3b8>)
 80146f4:	f7eb fdf0 	bl	80002d8 <__aeabi_dsub>
 80146f8:	a355      	add	r3, pc, #340	; (adr r3, 8014850 <__ieee754_pow+0x388>)
 80146fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fe:	4604      	mov	r4, r0
 8014700:	460d      	mov	r5, r1
 8014702:	f7eb ffa1 	bl	8000648 <__aeabi_dmul>
 8014706:	a354      	add	r3, pc, #336	; (adr r3, 8014858 <__ieee754_pow+0x390>)
 8014708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470c:	4606      	mov	r6, r0
 801470e:	460f      	mov	r7, r1
 8014710:	4620      	mov	r0, r4
 8014712:	4629      	mov	r1, r5
 8014714:	f7eb ff98 	bl	8000648 <__aeabi_dmul>
 8014718:	2200      	movs	r2, #0
 801471a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801471e:	4b59      	ldr	r3, [pc, #356]	; (8014884 <__ieee754_pow+0x3bc>)
 8014720:	4620      	mov	r0, r4
 8014722:	4629      	mov	r1, r5
 8014724:	f7eb ff90 	bl	8000648 <__aeabi_dmul>
 8014728:	4602      	mov	r2, r0
 801472a:	460b      	mov	r3, r1
 801472c:	a14c      	add	r1, pc, #304	; (adr r1, 8014860 <__ieee754_pow+0x398>)
 801472e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014732:	f7eb fdd1 	bl	80002d8 <__aeabi_dsub>
 8014736:	4622      	mov	r2, r4
 8014738:	462b      	mov	r3, r5
 801473a:	f7eb ff85 	bl	8000648 <__aeabi_dmul>
 801473e:	4602      	mov	r2, r0
 8014740:	460b      	mov	r3, r1
 8014742:	2000      	movs	r0, #0
 8014744:	4950      	ldr	r1, [pc, #320]	; (8014888 <__ieee754_pow+0x3c0>)
 8014746:	f7eb fdc7 	bl	80002d8 <__aeabi_dsub>
 801474a:	4622      	mov	r2, r4
 801474c:	462b      	mov	r3, r5
 801474e:	4680      	mov	r8, r0
 8014750:	4689      	mov	r9, r1
 8014752:	4620      	mov	r0, r4
 8014754:	4629      	mov	r1, r5
 8014756:	f7eb ff77 	bl	8000648 <__aeabi_dmul>
 801475a:	4602      	mov	r2, r0
 801475c:	460b      	mov	r3, r1
 801475e:	4640      	mov	r0, r8
 8014760:	4649      	mov	r1, r9
 8014762:	f7eb ff71 	bl	8000648 <__aeabi_dmul>
 8014766:	a340      	add	r3, pc, #256	; (adr r3, 8014868 <__ieee754_pow+0x3a0>)
 8014768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476c:	f7eb ff6c 	bl	8000648 <__aeabi_dmul>
 8014770:	4602      	mov	r2, r0
 8014772:	460b      	mov	r3, r1
 8014774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014778:	f7eb fdae 	bl	80002d8 <__aeabi_dsub>
 801477c:	4602      	mov	r2, r0
 801477e:	460b      	mov	r3, r1
 8014780:	4604      	mov	r4, r0
 8014782:	460d      	mov	r5, r1
 8014784:	4630      	mov	r0, r6
 8014786:	4639      	mov	r1, r7
 8014788:	f7eb fda8 	bl	80002dc <__adddf3>
 801478c:	2000      	movs	r0, #0
 801478e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014792:	4632      	mov	r2, r6
 8014794:	463b      	mov	r3, r7
 8014796:	f7eb fd9f 	bl	80002d8 <__aeabi_dsub>
 801479a:	4602      	mov	r2, r0
 801479c:	460b      	mov	r3, r1
 801479e:	4620      	mov	r0, r4
 80147a0:	4629      	mov	r1, r5
 80147a2:	f7eb fd99 	bl	80002d8 <__aeabi_dsub>
 80147a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80147ac:	4313      	orrs	r3, r2
 80147ae:	4606      	mov	r6, r0
 80147b0:	460f      	mov	r7, r1
 80147b2:	f040 81eb 	bne.w	8014b8c <__ieee754_pow+0x6c4>
 80147b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014870 <__ieee754_pow+0x3a8>
 80147ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80147be:	2400      	movs	r4, #0
 80147c0:	4622      	mov	r2, r4
 80147c2:	462b      	mov	r3, r5
 80147c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80147cc:	f7eb fd84 	bl	80002d8 <__aeabi_dsub>
 80147d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147d4:	f7eb ff38 	bl	8000648 <__aeabi_dmul>
 80147d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147dc:	4680      	mov	r8, r0
 80147de:	4689      	mov	r9, r1
 80147e0:	4630      	mov	r0, r6
 80147e2:	4639      	mov	r1, r7
 80147e4:	f7eb ff30 	bl	8000648 <__aeabi_dmul>
 80147e8:	4602      	mov	r2, r0
 80147ea:	460b      	mov	r3, r1
 80147ec:	4640      	mov	r0, r8
 80147ee:	4649      	mov	r1, r9
 80147f0:	f7eb fd74 	bl	80002dc <__adddf3>
 80147f4:	4622      	mov	r2, r4
 80147f6:	462b      	mov	r3, r5
 80147f8:	4680      	mov	r8, r0
 80147fa:	4689      	mov	r9, r1
 80147fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014800:	f7eb ff22 	bl	8000648 <__aeabi_dmul>
 8014804:	460b      	mov	r3, r1
 8014806:	4604      	mov	r4, r0
 8014808:	460d      	mov	r5, r1
 801480a:	4602      	mov	r2, r0
 801480c:	4649      	mov	r1, r9
 801480e:	4640      	mov	r0, r8
 8014810:	e9cd 4500 	strd	r4, r5, [sp]
 8014814:	f7eb fd62 	bl	80002dc <__adddf3>
 8014818:	4b1c      	ldr	r3, [pc, #112]	; (801488c <__ieee754_pow+0x3c4>)
 801481a:	4299      	cmp	r1, r3
 801481c:	4606      	mov	r6, r0
 801481e:	460f      	mov	r7, r1
 8014820:	468b      	mov	fp, r1
 8014822:	f340 82f7 	ble.w	8014e14 <__ieee754_pow+0x94c>
 8014826:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801482a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801482e:	4303      	orrs	r3, r0
 8014830:	f000 81ea 	beq.w	8014c08 <__ieee754_pow+0x740>
 8014834:	a310      	add	r3, pc, #64	; (adr r3, 8014878 <__ieee754_pow+0x3b0>)
 8014836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801483e:	f7eb ff03 	bl	8000648 <__aeabi_dmul>
 8014842:	a30d      	add	r3, pc, #52	; (adr r3, 8014878 <__ieee754_pow+0x3b0>)
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	e6d5      	b.n	80145f6 <__ieee754_pow+0x12e>
 801484a:	bf00      	nop
 801484c:	f3af 8000 	nop.w
 8014850:	60000000 	.word	0x60000000
 8014854:	3ff71547 	.word	0x3ff71547
 8014858:	f85ddf44 	.word	0xf85ddf44
 801485c:	3e54ae0b 	.word	0x3e54ae0b
 8014860:	55555555 	.word	0x55555555
 8014864:	3fd55555 	.word	0x3fd55555
 8014868:	652b82fe 	.word	0x652b82fe
 801486c:	3ff71547 	.word	0x3ff71547
 8014870:	00000000 	.word	0x00000000
 8014874:	bff00000 	.word	0xbff00000
 8014878:	8800759c 	.word	0x8800759c
 801487c:	7e37e43c 	.word	0x7e37e43c
 8014880:	3ff00000 	.word	0x3ff00000
 8014884:	3fd00000 	.word	0x3fd00000
 8014888:	3fe00000 	.word	0x3fe00000
 801488c:	408fffff 	.word	0x408fffff
 8014890:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014894:	f04f 0200 	mov.w	r2, #0
 8014898:	da05      	bge.n	80148a6 <__ieee754_pow+0x3de>
 801489a:	4bd3      	ldr	r3, [pc, #844]	; (8014be8 <__ieee754_pow+0x720>)
 801489c:	f7eb fed4 	bl	8000648 <__aeabi_dmul>
 80148a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80148a4:	460c      	mov	r4, r1
 80148a6:	1523      	asrs	r3, r4, #20
 80148a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80148ac:	4413      	add	r3, r2
 80148ae:	9309      	str	r3, [sp, #36]	; 0x24
 80148b0:	4bce      	ldr	r3, [pc, #824]	; (8014bec <__ieee754_pow+0x724>)
 80148b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80148b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80148ba:	429c      	cmp	r4, r3
 80148bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80148c0:	dd08      	ble.n	80148d4 <__ieee754_pow+0x40c>
 80148c2:	4bcb      	ldr	r3, [pc, #812]	; (8014bf0 <__ieee754_pow+0x728>)
 80148c4:	429c      	cmp	r4, r3
 80148c6:	f340 815e 	ble.w	8014b86 <__ieee754_pow+0x6be>
 80148ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148cc:	3301      	adds	r3, #1
 80148ce:	9309      	str	r3, [sp, #36]	; 0x24
 80148d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80148d4:	f04f 0a00 	mov.w	sl, #0
 80148d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80148dc:	930c      	str	r3, [sp, #48]	; 0x30
 80148de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148e0:	4bc4      	ldr	r3, [pc, #784]	; (8014bf4 <__ieee754_pow+0x72c>)
 80148e2:	4413      	add	r3, r2
 80148e4:	ed93 7b00 	vldr	d7, [r3]
 80148e8:	4629      	mov	r1, r5
 80148ea:	ec53 2b17 	vmov	r2, r3, d7
 80148ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80148f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80148f6:	f7eb fcef 	bl	80002d8 <__aeabi_dsub>
 80148fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80148fe:	4606      	mov	r6, r0
 8014900:	460f      	mov	r7, r1
 8014902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014906:	f7eb fce9 	bl	80002dc <__adddf3>
 801490a:	4602      	mov	r2, r0
 801490c:	460b      	mov	r3, r1
 801490e:	2000      	movs	r0, #0
 8014910:	49b9      	ldr	r1, [pc, #740]	; (8014bf8 <__ieee754_pow+0x730>)
 8014912:	f7eb ffc3 	bl	800089c <__aeabi_ddiv>
 8014916:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801491a:	4602      	mov	r2, r0
 801491c:	460b      	mov	r3, r1
 801491e:	4630      	mov	r0, r6
 8014920:	4639      	mov	r1, r7
 8014922:	f7eb fe91 	bl	8000648 <__aeabi_dmul>
 8014926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801492a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801492e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014932:	2300      	movs	r3, #0
 8014934:	9302      	str	r3, [sp, #8]
 8014936:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801493a:	106d      	asrs	r5, r5, #1
 801493c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014940:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014944:	2200      	movs	r2, #0
 8014946:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801494a:	4640      	mov	r0, r8
 801494c:	4649      	mov	r1, r9
 801494e:	4614      	mov	r4, r2
 8014950:	461d      	mov	r5, r3
 8014952:	f7eb fe79 	bl	8000648 <__aeabi_dmul>
 8014956:	4602      	mov	r2, r0
 8014958:	460b      	mov	r3, r1
 801495a:	4630      	mov	r0, r6
 801495c:	4639      	mov	r1, r7
 801495e:	f7eb fcbb 	bl	80002d8 <__aeabi_dsub>
 8014962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014966:	4606      	mov	r6, r0
 8014968:	460f      	mov	r7, r1
 801496a:	4620      	mov	r0, r4
 801496c:	4629      	mov	r1, r5
 801496e:	f7eb fcb3 	bl	80002d8 <__aeabi_dsub>
 8014972:	4602      	mov	r2, r0
 8014974:	460b      	mov	r3, r1
 8014976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801497a:	f7eb fcad 	bl	80002d8 <__aeabi_dsub>
 801497e:	4642      	mov	r2, r8
 8014980:	464b      	mov	r3, r9
 8014982:	f7eb fe61 	bl	8000648 <__aeabi_dmul>
 8014986:	4602      	mov	r2, r0
 8014988:	460b      	mov	r3, r1
 801498a:	4630      	mov	r0, r6
 801498c:	4639      	mov	r1, r7
 801498e:	f7eb fca3 	bl	80002d8 <__aeabi_dsub>
 8014992:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014996:	f7eb fe57 	bl	8000648 <__aeabi_dmul>
 801499a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801499e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80149a2:	4610      	mov	r0, r2
 80149a4:	4619      	mov	r1, r3
 80149a6:	f7eb fe4f 	bl	8000648 <__aeabi_dmul>
 80149aa:	a37b      	add	r3, pc, #492	; (adr r3, 8014b98 <__ieee754_pow+0x6d0>)
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	4604      	mov	r4, r0
 80149b2:	460d      	mov	r5, r1
 80149b4:	f7eb fe48 	bl	8000648 <__aeabi_dmul>
 80149b8:	a379      	add	r3, pc, #484	; (adr r3, 8014ba0 <__ieee754_pow+0x6d8>)
 80149ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149be:	f7eb fc8d 	bl	80002dc <__adddf3>
 80149c2:	4622      	mov	r2, r4
 80149c4:	462b      	mov	r3, r5
 80149c6:	f7eb fe3f 	bl	8000648 <__aeabi_dmul>
 80149ca:	a377      	add	r3, pc, #476	; (adr r3, 8014ba8 <__ieee754_pow+0x6e0>)
 80149cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d0:	f7eb fc84 	bl	80002dc <__adddf3>
 80149d4:	4622      	mov	r2, r4
 80149d6:	462b      	mov	r3, r5
 80149d8:	f7eb fe36 	bl	8000648 <__aeabi_dmul>
 80149dc:	a374      	add	r3, pc, #464	; (adr r3, 8014bb0 <__ieee754_pow+0x6e8>)
 80149de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e2:	f7eb fc7b 	bl	80002dc <__adddf3>
 80149e6:	4622      	mov	r2, r4
 80149e8:	462b      	mov	r3, r5
 80149ea:	f7eb fe2d 	bl	8000648 <__aeabi_dmul>
 80149ee:	a372      	add	r3, pc, #456	; (adr r3, 8014bb8 <__ieee754_pow+0x6f0>)
 80149f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f4:	f7eb fc72 	bl	80002dc <__adddf3>
 80149f8:	4622      	mov	r2, r4
 80149fa:	462b      	mov	r3, r5
 80149fc:	f7eb fe24 	bl	8000648 <__aeabi_dmul>
 8014a00:	a36f      	add	r3, pc, #444	; (adr r3, 8014bc0 <__ieee754_pow+0x6f8>)
 8014a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a06:	f7eb fc69 	bl	80002dc <__adddf3>
 8014a0a:	4622      	mov	r2, r4
 8014a0c:	4606      	mov	r6, r0
 8014a0e:	460f      	mov	r7, r1
 8014a10:	462b      	mov	r3, r5
 8014a12:	4620      	mov	r0, r4
 8014a14:	4629      	mov	r1, r5
 8014a16:	f7eb fe17 	bl	8000648 <__aeabi_dmul>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	4630      	mov	r0, r6
 8014a20:	4639      	mov	r1, r7
 8014a22:	f7eb fe11 	bl	8000648 <__aeabi_dmul>
 8014a26:	4642      	mov	r2, r8
 8014a28:	4604      	mov	r4, r0
 8014a2a:	460d      	mov	r5, r1
 8014a2c:	464b      	mov	r3, r9
 8014a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a32:	f7eb fc53 	bl	80002dc <__adddf3>
 8014a36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a3a:	f7eb fe05 	bl	8000648 <__aeabi_dmul>
 8014a3e:	4622      	mov	r2, r4
 8014a40:	462b      	mov	r3, r5
 8014a42:	f7eb fc4b 	bl	80002dc <__adddf3>
 8014a46:	4642      	mov	r2, r8
 8014a48:	4606      	mov	r6, r0
 8014a4a:	460f      	mov	r7, r1
 8014a4c:	464b      	mov	r3, r9
 8014a4e:	4640      	mov	r0, r8
 8014a50:	4649      	mov	r1, r9
 8014a52:	f7eb fdf9 	bl	8000648 <__aeabi_dmul>
 8014a56:	2200      	movs	r2, #0
 8014a58:	4b68      	ldr	r3, [pc, #416]	; (8014bfc <__ieee754_pow+0x734>)
 8014a5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014a5e:	f7eb fc3d 	bl	80002dc <__adddf3>
 8014a62:	4632      	mov	r2, r6
 8014a64:	463b      	mov	r3, r7
 8014a66:	f7eb fc39 	bl	80002dc <__adddf3>
 8014a6a:	9802      	ldr	r0, [sp, #8]
 8014a6c:	460d      	mov	r5, r1
 8014a6e:	4604      	mov	r4, r0
 8014a70:	4602      	mov	r2, r0
 8014a72:	460b      	mov	r3, r1
 8014a74:	4640      	mov	r0, r8
 8014a76:	4649      	mov	r1, r9
 8014a78:	f7eb fde6 	bl	8000648 <__aeabi_dmul>
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	4680      	mov	r8, r0
 8014a80:	4689      	mov	r9, r1
 8014a82:	4b5e      	ldr	r3, [pc, #376]	; (8014bfc <__ieee754_pow+0x734>)
 8014a84:	4620      	mov	r0, r4
 8014a86:	4629      	mov	r1, r5
 8014a88:	f7eb fc26 	bl	80002d8 <__aeabi_dsub>
 8014a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a90:	f7eb fc22 	bl	80002d8 <__aeabi_dsub>
 8014a94:	4602      	mov	r2, r0
 8014a96:	460b      	mov	r3, r1
 8014a98:	4630      	mov	r0, r6
 8014a9a:	4639      	mov	r1, r7
 8014a9c:	f7eb fc1c 	bl	80002d8 <__aeabi_dsub>
 8014aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014aa4:	f7eb fdd0 	bl	8000648 <__aeabi_dmul>
 8014aa8:	4622      	mov	r2, r4
 8014aaa:	4606      	mov	r6, r0
 8014aac:	460f      	mov	r7, r1
 8014aae:	462b      	mov	r3, r5
 8014ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ab4:	f7eb fdc8 	bl	8000648 <__aeabi_dmul>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	4630      	mov	r0, r6
 8014abe:	4639      	mov	r1, r7
 8014ac0:	f7eb fc0c 	bl	80002dc <__adddf3>
 8014ac4:	4606      	mov	r6, r0
 8014ac6:	460f      	mov	r7, r1
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	4640      	mov	r0, r8
 8014ace:	4649      	mov	r1, r9
 8014ad0:	f7eb fc04 	bl	80002dc <__adddf3>
 8014ad4:	9802      	ldr	r0, [sp, #8]
 8014ad6:	a33c      	add	r3, pc, #240	; (adr r3, 8014bc8 <__ieee754_pow+0x700>)
 8014ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014adc:	4604      	mov	r4, r0
 8014ade:	460d      	mov	r5, r1
 8014ae0:	f7eb fdb2 	bl	8000648 <__aeabi_dmul>
 8014ae4:	4642      	mov	r2, r8
 8014ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014aea:	464b      	mov	r3, r9
 8014aec:	4620      	mov	r0, r4
 8014aee:	4629      	mov	r1, r5
 8014af0:	f7eb fbf2 	bl	80002d8 <__aeabi_dsub>
 8014af4:	4602      	mov	r2, r0
 8014af6:	460b      	mov	r3, r1
 8014af8:	4630      	mov	r0, r6
 8014afa:	4639      	mov	r1, r7
 8014afc:	f7eb fbec 	bl	80002d8 <__aeabi_dsub>
 8014b00:	a333      	add	r3, pc, #204	; (adr r3, 8014bd0 <__ieee754_pow+0x708>)
 8014b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b06:	f7eb fd9f 	bl	8000648 <__aeabi_dmul>
 8014b0a:	a333      	add	r3, pc, #204	; (adr r3, 8014bd8 <__ieee754_pow+0x710>)
 8014b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b10:	4606      	mov	r6, r0
 8014b12:	460f      	mov	r7, r1
 8014b14:	4620      	mov	r0, r4
 8014b16:	4629      	mov	r1, r5
 8014b18:	f7eb fd96 	bl	8000648 <__aeabi_dmul>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	460b      	mov	r3, r1
 8014b20:	4630      	mov	r0, r6
 8014b22:	4639      	mov	r1, r7
 8014b24:	f7eb fbda 	bl	80002dc <__adddf3>
 8014b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b2a:	4b35      	ldr	r3, [pc, #212]	; (8014c00 <__ieee754_pow+0x738>)
 8014b2c:	4413      	add	r3, r2
 8014b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b32:	f7eb fbd3 	bl	80002dc <__adddf3>
 8014b36:	4604      	mov	r4, r0
 8014b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b3a:	460d      	mov	r5, r1
 8014b3c:	f7eb fd1a 	bl	8000574 <__aeabi_i2d>
 8014b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b42:	4b30      	ldr	r3, [pc, #192]	; (8014c04 <__ieee754_pow+0x73c>)
 8014b44:	4413      	add	r3, r2
 8014b46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b4a:	4606      	mov	r6, r0
 8014b4c:	460f      	mov	r7, r1
 8014b4e:	4622      	mov	r2, r4
 8014b50:	462b      	mov	r3, r5
 8014b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b56:	f7eb fbc1 	bl	80002dc <__adddf3>
 8014b5a:	4642      	mov	r2, r8
 8014b5c:	464b      	mov	r3, r9
 8014b5e:	f7eb fbbd 	bl	80002dc <__adddf3>
 8014b62:	4632      	mov	r2, r6
 8014b64:	463b      	mov	r3, r7
 8014b66:	f7eb fbb9 	bl	80002dc <__adddf3>
 8014b6a:	9802      	ldr	r0, [sp, #8]
 8014b6c:	4632      	mov	r2, r6
 8014b6e:	463b      	mov	r3, r7
 8014b70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b74:	f7eb fbb0 	bl	80002d8 <__aeabi_dsub>
 8014b78:	4642      	mov	r2, r8
 8014b7a:	464b      	mov	r3, r9
 8014b7c:	f7eb fbac 	bl	80002d8 <__aeabi_dsub>
 8014b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b84:	e607      	b.n	8014796 <__ieee754_pow+0x2ce>
 8014b86:	f04f 0a01 	mov.w	sl, #1
 8014b8a:	e6a5      	b.n	80148d8 <__ieee754_pow+0x410>
 8014b8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014be0 <__ieee754_pow+0x718>
 8014b90:	e613      	b.n	80147ba <__ieee754_pow+0x2f2>
 8014b92:	bf00      	nop
 8014b94:	f3af 8000 	nop.w
 8014b98:	4a454eef 	.word	0x4a454eef
 8014b9c:	3fca7e28 	.word	0x3fca7e28
 8014ba0:	93c9db65 	.word	0x93c9db65
 8014ba4:	3fcd864a 	.word	0x3fcd864a
 8014ba8:	a91d4101 	.word	0xa91d4101
 8014bac:	3fd17460 	.word	0x3fd17460
 8014bb0:	518f264d 	.word	0x518f264d
 8014bb4:	3fd55555 	.word	0x3fd55555
 8014bb8:	db6fabff 	.word	0xdb6fabff
 8014bbc:	3fdb6db6 	.word	0x3fdb6db6
 8014bc0:	33333303 	.word	0x33333303
 8014bc4:	3fe33333 	.word	0x3fe33333
 8014bc8:	e0000000 	.word	0xe0000000
 8014bcc:	3feec709 	.word	0x3feec709
 8014bd0:	dc3a03fd 	.word	0xdc3a03fd
 8014bd4:	3feec709 	.word	0x3feec709
 8014bd8:	145b01f5 	.word	0x145b01f5
 8014bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8014be0:	00000000 	.word	0x00000000
 8014be4:	3ff00000 	.word	0x3ff00000
 8014be8:	43400000 	.word	0x43400000
 8014bec:	0003988e 	.word	0x0003988e
 8014bf0:	000bb679 	.word	0x000bb679
 8014bf4:	08016a58 	.word	0x08016a58
 8014bf8:	3ff00000 	.word	0x3ff00000
 8014bfc:	40080000 	.word	0x40080000
 8014c00:	08016a78 	.word	0x08016a78
 8014c04:	08016a68 	.word	0x08016a68
 8014c08:	a3b4      	add	r3, pc, #720	; (adr r3, 8014edc <__ieee754_pow+0xa14>)
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	4640      	mov	r0, r8
 8014c10:	4649      	mov	r1, r9
 8014c12:	f7eb fb63 	bl	80002dc <__adddf3>
 8014c16:	4622      	mov	r2, r4
 8014c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c1c:	462b      	mov	r3, r5
 8014c1e:	4630      	mov	r0, r6
 8014c20:	4639      	mov	r1, r7
 8014c22:	f7eb fb59 	bl	80002d8 <__aeabi_dsub>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c2e:	f7eb ff9b 	bl	8000b68 <__aeabi_dcmpgt>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	f47f adfe 	bne.w	8014834 <__ieee754_pow+0x36c>
 8014c38:	4aa3      	ldr	r2, [pc, #652]	; (8014ec8 <__ieee754_pow+0xa00>)
 8014c3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	f340 810a 	ble.w	8014e58 <__ieee754_pow+0x990>
 8014c44:	151b      	asrs	r3, r3, #20
 8014c46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014c4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014c4e:	fa4a f303 	asr.w	r3, sl, r3
 8014c52:	445b      	add	r3, fp
 8014c54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014c58:	4e9c      	ldr	r6, [pc, #624]	; (8014ecc <__ieee754_pow+0xa04>)
 8014c5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014c5e:	4116      	asrs	r6, r2
 8014c60:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014c64:	2000      	movs	r0, #0
 8014c66:	ea23 0106 	bic.w	r1, r3, r6
 8014c6a:	f1c2 0214 	rsb	r2, r2, #20
 8014c6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014c72:	fa4a fa02 	asr.w	sl, sl, r2
 8014c76:	f1bb 0f00 	cmp.w	fp, #0
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	4620      	mov	r0, r4
 8014c80:	4629      	mov	r1, r5
 8014c82:	bfb8      	it	lt
 8014c84:	f1ca 0a00 	rsblt	sl, sl, #0
 8014c88:	f7eb fb26 	bl	80002d8 <__aeabi_dsub>
 8014c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8014c90:	4642      	mov	r2, r8
 8014c92:	464b      	mov	r3, r9
 8014c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c98:	f7eb fb20 	bl	80002dc <__adddf3>
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	a378      	add	r3, pc, #480	; (adr r3, 8014e80 <__ieee754_pow+0x9b8>)
 8014ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca4:	4604      	mov	r4, r0
 8014ca6:	460d      	mov	r5, r1
 8014ca8:	f7eb fcce 	bl	8000648 <__aeabi_dmul>
 8014cac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	4629      	mov	r1, r5
 8014cb8:	f7eb fb0e 	bl	80002d8 <__aeabi_dsub>
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	4640      	mov	r0, r8
 8014cc2:	4649      	mov	r1, r9
 8014cc4:	f7eb fb08 	bl	80002d8 <__aeabi_dsub>
 8014cc8:	a36f      	add	r3, pc, #444	; (adr r3, 8014e88 <__ieee754_pow+0x9c0>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	f7eb fcbb 	bl	8000648 <__aeabi_dmul>
 8014cd2:	a36f      	add	r3, pc, #444	; (adr r3, 8014e90 <__ieee754_pow+0x9c8>)
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	4680      	mov	r8, r0
 8014cda:	4689      	mov	r9, r1
 8014cdc:	4620      	mov	r0, r4
 8014cde:	4629      	mov	r1, r5
 8014ce0:	f7eb fcb2 	bl	8000648 <__aeabi_dmul>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	4640      	mov	r0, r8
 8014cea:	4649      	mov	r1, r9
 8014cec:	f7eb faf6 	bl	80002dc <__adddf3>
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	460d      	mov	r5, r1
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	4639      	mov	r1, r7
 8014cfc:	f7eb faee 	bl	80002dc <__adddf3>
 8014d00:	4632      	mov	r2, r6
 8014d02:	463b      	mov	r3, r7
 8014d04:	4680      	mov	r8, r0
 8014d06:	4689      	mov	r9, r1
 8014d08:	f7eb fae6 	bl	80002d8 <__aeabi_dsub>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	460b      	mov	r3, r1
 8014d10:	4620      	mov	r0, r4
 8014d12:	4629      	mov	r1, r5
 8014d14:	f7eb fae0 	bl	80002d8 <__aeabi_dsub>
 8014d18:	4642      	mov	r2, r8
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	460f      	mov	r7, r1
 8014d1e:	464b      	mov	r3, r9
 8014d20:	4640      	mov	r0, r8
 8014d22:	4649      	mov	r1, r9
 8014d24:	f7eb fc90 	bl	8000648 <__aeabi_dmul>
 8014d28:	a35b      	add	r3, pc, #364	; (adr r3, 8014e98 <__ieee754_pow+0x9d0>)
 8014d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2e:	4604      	mov	r4, r0
 8014d30:	460d      	mov	r5, r1
 8014d32:	f7eb fc89 	bl	8000648 <__aeabi_dmul>
 8014d36:	a35a      	add	r3, pc, #360	; (adr r3, 8014ea0 <__ieee754_pow+0x9d8>)
 8014d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3c:	f7eb facc 	bl	80002d8 <__aeabi_dsub>
 8014d40:	4622      	mov	r2, r4
 8014d42:	462b      	mov	r3, r5
 8014d44:	f7eb fc80 	bl	8000648 <__aeabi_dmul>
 8014d48:	a357      	add	r3, pc, #348	; (adr r3, 8014ea8 <__ieee754_pow+0x9e0>)
 8014d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4e:	f7eb fac5 	bl	80002dc <__adddf3>
 8014d52:	4622      	mov	r2, r4
 8014d54:	462b      	mov	r3, r5
 8014d56:	f7eb fc77 	bl	8000648 <__aeabi_dmul>
 8014d5a:	a355      	add	r3, pc, #340	; (adr r3, 8014eb0 <__ieee754_pow+0x9e8>)
 8014d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d60:	f7eb faba 	bl	80002d8 <__aeabi_dsub>
 8014d64:	4622      	mov	r2, r4
 8014d66:	462b      	mov	r3, r5
 8014d68:	f7eb fc6e 	bl	8000648 <__aeabi_dmul>
 8014d6c:	a352      	add	r3, pc, #328	; (adr r3, 8014eb8 <__ieee754_pow+0x9f0>)
 8014d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d72:	f7eb fab3 	bl	80002dc <__adddf3>
 8014d76:	4622      	mov	r2, r4
 8014d78:	462b      	mov	r3, r5
 8014d7a:	f7eb fc65 	bl	8000648 <__aeabi_dmul>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	460b      	mov	r3, r1
 8014d82:	4640      	mov	r0, r8
 8014d84:	4649      	mov	r1, r9
 8014d86:	f7eb faa7 	bl	80002d8 <__aeabi_dsub>
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	460d      	mov	r5, r1
 8014d8e:	4602      	mov	r2, r0
 8014d90:	460b      	mov	r3, r1
 8014d92:	4640      	mov	r0, r8
 8014d94:	4649      	mov	r1, r9
 8014d96:	f7eb fc57 	bl	8000648 <__aeabi_dmul>
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8014da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014da4:	4620      	mov	r0, r4
 8014da6:	4629      	mov	r1, r5
 8014da8:	f7eb fa96 	bl	80002d8 <__aeabi_dsub>
 8014dac:	4602      	mov	r2, r0
 8014dae:	460b      	mov	r3, r1
 8014db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014db4:	f7eb fd72 	bl	800089c <__aeabi_ddiv>
 8014db8:	4632      	mov	r2, r6
 8014dba:	4604      	mov	r4, r0
 8014dbc:	460d      	mov	r5, r1
 8014dbe:	463b      	mov	r3, r7
 8014dc0:	4640      	mov	r0, r8
 8014dc2:	4649      	mov	r1, r9
 8014dc4:	f7eb fc40 	bl	8000648 <__aeabi_dmul>
 8014dc8:	4632      	mov	r2, r6
 8014dca:	463b      	mov	r3, r7
 8014dcc:	f7eb fa86 	bl	80002dc <__adddf3>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	460b      	mov	r3, r1
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	4629      	mov	r1, r5
 8014dd8:	f7eb fa7e 	bl	80002d8 <__aeabi_dsub>
 8014ddc:	4642      	mov	r2, r8
 8014dde:	464b      	mov	r3, r9
 8014de0:	f7eb fa7a 	bl	80002d8 <__aeabi_dsub>
 8014de4:	4602      	mov	r2, r0
 8014de6:	460b      	mov	r3, r1
 8014de8:	2000      	movs	r0, #0
 8014dea:	4939      	ldr	r1, [pc, #228]	; (8014ed0 <__ieee754_pow+0xa08>)
 8014dec:	f7eb fa74 	bl	80002d8 <__aeabi_dsub>
 8014df0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014df4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014df8:	4602      	mov	r2, r0
 8014dfa:	460b      	mov	r3, r1
 8014dfc:	da2f      	bge.n	8014e5e <__ieee754_pow+0x996>
 8014dfe:	4650      	mov	r0, sl
 8014e00:	ec43 2b10 	vmov	d0, r2, r3
 8014e04:	f000 f9c0 	bl	8015188 <scalbn>
 8014e08:	ec51 0b10 	vmov	r0, r1, d0
 8014e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e10:	f7ff bbf1 	b.w	80145f6 <__ieee754_pow+0x12e>
 8014e14:	4b2f      	ldr	r3, [pc, #188]	; (8014ed4 <__ieee754_pow+0xa0c>)
 8014e16:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014e1a:	429e      	cmp	r6, r3
 8014e1c:	f77f af0c 	ble.w	8014c38 <__ieee754_pow+0x770>
 8014e20:	4b2d      	ldr	r3, [pc, #180]	; (8014ed8 <__ieee754_pow+0xa10>)
 8014e22:	440b      	add	r3, r1
 8014e24:	4303      	orrs	r3, r0
 8014e26:	d00b      	beq.n	8014e40 <__ieee754_pow+0x978>
 8014e28:	a325      	add	r3, pc, #148	; (adr r3, 8014ec0 <__ieee754_pow+0x9f8>)
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e32:	f7eb fc09 	bl	8000648 <__aeabi_dmul>
 8014e36:	a322      	add	r3, pc, #136	; (adr r3, 8014ec0 <__ieee754_pow+0x9f8>)
 8014e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3c:	f7ff bbdb 	b.w	80145f6 <__ieee754_pow+0x12e>
 8014e40:	4622      	mov	r2, r4
 8014e42:	462b      	mov	r3, r5
 8014e44:	f7eb fa48 	bl	80002d8 <__aeabi_dsub>
 8014e48:	4642      	mov	r2, r8
 8014e4a:	464b      	mov	r3, r9
 8014e4c:	f7eb fe82 	bl	8000b54 <__aeabi_dcmpge>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	f43f aef1 	beq.w	8014c38 <__ieee754_pow+0x770>
 8014e56:	e7e7      	b.n	8014e28 <__ieee754_pow+0x960>
 8014e58:	f04f 0a00 	mov.w	sl, #0
 8014e5c:	e718      	b.n	8014c90 <__ieee754_pow+0x7c8>
 8014e5e:	4621      	mov	r1, r4
 8014e60:	e7d4      	b.n	8014e0c <__ieee754_pow+0x944>
 8014e62:	2000      	movs	r0, #0
 8014e64:	491a      	ldr	r1, [pc, #104]	; (8014ed0 <__ieee754_pow+0xa08>)
 8014e66:	f7ff bb8f 	b.w	8014588 <__ieee754_pow+0xc0>
 8014e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e6e:	f7ff bb8b 	b.w	8014588 <__ieee754_pow+0xc0>
 8014e72:	4630      	mov	r0, r6
 8014e74:	4639      	mov	r1, r7
 8014e76:	f7ff bb87 	b.w	8014588 <__ieee754_pow+0xc0>
 8014e7a:	4693      	mov	fp, r2
 8014e7c:	f7ff bb98 	b.w	80145b0 <__ieee754_pow+0xe8>
 8014e80:	00000000 	.word	0x00000000
 8014e84:	3fe62e43 	.word	0x3fe62e43
 8014e88:	fefa39ef 	.word	0xfefa39ef
 8014e8c:	3fe62e42 	.word	0x3fe62e42
 8014e90:	0ca86c39 	.word	0x0ca86c39
 8014e94:	be205c61 	.word	0xbe205c61
 8014e98:	72bea4d0 	.word	0x72bea4d0
 8014e9c:	3e663769 	.word	0x3e663769
 8014ea0:	c5d26bf1 	.word	0xc5d26bf1
 8014ea4:	3ebbbd41 	.word	0x3ebbbd41
 8014ea8:	af25de2c 	.word	0xaf25de2c
 8014eac:	3f11566a 	.word	0x3f11566a
 8014eb0:	16bebd93 	.word	0x16bebd93
 8014eb4:	3f66c16c 	.word	0x3f66c16c
 8014eb8:	5555553e 	.word	0x5555553e
 8014ebc:	3fc55555 	.word	0x3fc55555
 8014ec0:	c2f8f359 	.word	0xc2f8f359
 8014ec4:	01a56e1f 	.word	0x01a56e1f
 8014ec8:	3fe00000 	.word	0x3fe00000
 8014ecc:	000fffff 	.word	0x000fffff
 8014ed0:	3ff00000 	.word	0x3ff00000
 8014ed4:	4090cbff 	.word	0x4090cbff
 8014ed8:	3f6f3400 	.word	0x3f6f3400
 8014edc:	652b82fe 	.word	0x652b82fe
 8014ee0:	3c971547 	.word	0x3c971547

08014ee4 <__ieee754_sqrt>:
 8014ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee8:	4955      	ldr	r1, [pc, #340]	; (8015040 <__ieee754_sqrt+0x15c>)
 8014eea:	ec55 4b10 	vmov	r4, r5, d0
 8014eee:	43a9      	bics	r1, r5
 8014ef0:	462b      	mov	r3, r5
 8014ef2:	462a      	mov	r2, r5
 8014ef4:	d112      	bne.n	8014f1c <__ieee754_sqrt+0x38>
 8014ef6:	ee10 2a10 	vmov	r2, s0
 8014efa:	ee10 0a10 	vmov	r0, s0
 8014efe:	4629      	mov	r1, r5
 8014f00:	f7eb fba2 	bl	8000648 <__aeabi_dmul>
 8014f04:	4602      	mov	r2, r0
 8014f06:	460b      	mov	r3, r1
 8014f08:	4620      	mov	r0, r4
 8014f0a:	4629      	mov	r1, r5
 8014f0c:	f7eb f9e6 	bl	80002dc <__adddf3>
 8014f10:	4604      	mov	r4, r0
 8014f12:	460d      	mov	r5, r1
 8014f14:	ec45 4b10 	vmov	d0, r4, r5
 8014f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1c:	2d00      	cmp	r5, #0
 8014f1e:	ee10 0a10 	vmov	r0, s0
 8014f22:	4621      	mov	r1, r4
 8014f24:	dc0f      	bgt.n	8014f46 <__ieee754_sqrt+0x62>
 8014f26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014f2a:	4330      	orrs	r0, r6
 8014f2c:	d0f2      	beq.n	8014f14 <__ieee754_sqrt+0x30>
 8014f2e:	b155      	cbz	r5, 8014f46 <__ieee754_sqrt+0x62>
 8014f30:	ee10 2a10 	vmov	r2, s0
 8014f34:	4620      	mov	r0, r4
 8014f36:	4629      	mov	r1, r5
 8014f38:	f7eb f9ce 	bl	80002d8 <__aeabi_dsub>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	460b      	mov	r3, r1
 8014f40:	f7eb fcac 	bl	800089c <__aeabi_ddiv>
 8014f44:	e7e4      	b.n	8014f10 <__ieee754_sqrt+0x2c>
 8014f46:	151b      	asrs	r3, r3, #20
 8014f48:	d073      	beq.n	8015032 <__ieee754_sqrt+0x14e>
 8014f4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f4e:	07dd      	lsls	r5, r3, #31
 8014f50:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014f54:	bf48      	it	mi
 8014f56:	0fc8      	lsrmi	r0, r1, #31
 8014f58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014f5c:	bf44      	itt	mi
 8014f5e:	0049      	lslmi	r1, r1, #1
 8014f60:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014f64:	2500      	movs	r5, #0
 8014f66:	1058      	asrs	r0, r3, #1
 8014f68:	0fcb      	lsrs	r3, r1, #31
 8014f6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014f6e:	0049      	lsls	r1, r1, #1
 8014f70:	2316      	movs	r3, #22
 8014f72:	462c      	mov	r4, r5
 8014f74:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014f78:	19a7      	adds	r7, r4, r6
 8014f7a:	4297      	cmp	r7, r2
 8014f7c:	bfde      	ittt	le
 8014f7e:	19bc      	addle	r4, r7, r6
 8014f80:	1bd2      	suble	r2, r2, r7
 8014f82:	19ad      	addle	r5, r5, r6
 8014f84:	0fcf      	lsrs	r7, r1, #31
 8014f86:	3b01      	subs	r3, #1
 8014f88:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014f8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014f90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014f94:	d1f0      	bne.n	8014f78 <__ieee754_sqrt+0x94>
 8014f96:	f04f 0c20 	mov.w	ip, #32
 8014f9a:	469e      	mov	lr, r3
 8014f9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014fa0:	42a2      	cmp	r2, r4
 8014fa2:	eb06 070e 	add.w	r7, r6, lr
 8014fa6:	dc02      	bgt.n	8014fae <__ieee754_sqrt+0xca>
 8014fa8:	d112      	bne.n	8014fd0 <__ieee754_sqrt+0xec>
 8014faa:	428f      	cmp	r7, r1
 8014fac:	d810      	bhi.n	8014fd0 <__ieee754_sqrt+0xec>
 8014fae:	2f00      	cmp	r7, #0
 8014fb0:	eb07 0e06 	add.w	lr, r7, r6
 8014fb4:	da42      	bge.n	801503c <__ieee754_sqrt+0x158>
 8014fb6:	f1be 0f00 	cmp.w	lr, #0
 8014fba:	db3f      	blt.n	801503c <__ieee754_sqrt+0x158>
 8014fbc:	f104 0801 	add.w	r8, r4, #1
 8014fc0:	1b12      	subs	r2, r2, r4
 8014fc2:	428f      	cmp	r7, r1
 8014fc4:	bf88      	it	hi
 8014fc6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8014fca:	1bc9      	subs	r1, r1, r7
 8014fcc:	4433      	add	r3, r6
 8014fce:	4644      	mov	r4, r8
 8014fd0:	0052      	lsls	r2, r2, #1
 8014fd2:	f1bc 0c01 	subs.w	ip, ip, #1
 8014fd6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014fda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014fde:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014fe2:	d1dd      	bne.n	8014fa0 <__ieee754_sqrt+0xbc>
 8014fe4:	430a      	orrs	r2, r1
 8014fe6:	d006      	beq.n	8014ff6 <__ieee754_sqrt+0x112>
 8014fe8:	1c5c      	adds	r4, r3, #1
 8014fea:	bf13      	iteet	ne
 8014fec:	3301      	addne	r3, #1
 8014fee:	3501      	addeq	r5, #1
 8014ff0:	4663      	moveq	r3, ip
 8014ff2:	f023 0301 	bicne.w	r3, r3, #1
 8014ff6:	106a      	asrs	r2, r5, #1
 8014ff8:	085b      	lsrs	r3, r3, #1
 8014ffa:	07e9      	lsls	r1, r5, #31
 8014ffc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015000:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015004:	bf48      	it	mi
 8015006:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801500a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801500e:	461c      	mov	r4, r3
 8015010:	e780      	b.n	8014f14 <__ieee754_sqrt+0x30>
 8015012:	0aca      	lsrs	r2, r1, #11
 8015014:	3815      	subs	r0, #21
 8015016:	0549      	lsls	r1, r1, #21
 8015018:	2a00      	cmp	r2, #0
 801501a:	d0fa      	beq.n	8015012 <__ieee754_sqrt+0x12e>
 801501c:	02d6      	lsls	r6, r2, #11
 801501e:	d50a      	bpl.n	8015036 <__ieee754_sqrt+0x152>
 8015020:	f1c3 0420 	rsb	r4, r3, #32
 8015024:	fa21 f404 	lsr.w	r4, r1, r4
 8015028:	1e5d      	subs	r5, r3, #1
 801502a:	4099      	lsls	r1, r3
 801502c:	4322      	orrs	r2, r4
 801502e:	1b43      	subs	r3, r0, r5
 8015030:	e78b      	b.n	8014f4a <__ieee754_sqrt+0x66>
 8015032:	4618      	mov	r0, r3
 8015034:	e7f0      	b.n	8015018 <__ieee754_sqrt+0x134>
 8015036:	0052      	lsls	r2, r2, #1
 8015038:	3301      	adds	r3, #1
 801503a:	e7ef      	b.n	801501c <__ieee754_sqrt+0x138>
 801503c:	46a0      	mov	r8, r4
 801503e:	e7bf      	b.n	8014fc0 <__ieee754_sqrt+0xdc>
 8015040:	7ff00000 	.word	0x7ff00000

08015044 <fabs>:
 8015044:	ec51 0b10 	vmov	r0, r1, d0
 8015048:	ee10 2a10 	vmov	r2, s0
 801504c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015050:	ec43 2b10 	vmov	d0, r2, r3
 8015054:	4770      	bx	lr

08015056 <finite>:
 8015056:	ee10 3a90 	vmov	r3, s1
 801505a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801505e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015062:	0fc0      	lsrs	r0, r0, #31
 8015064:	4770      	bx	lr

08015066 <matherr>:
 8015066:	2000      	movs	r0, #0
 8015068:	4770      	bx	lr
 801506a:	0000      	movs	r0, r0
 801506c:	0000      	movs	r0, r0
	...

08015070 <nan>:
 8015070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015078 <nan+0x8>
 8015074:	4770      	bx	lr
 8015076:	bf00      	nop
 8015078:	00000000 	.word	0x00000000
 801507c:	7ff80000 	.word	0x7ff80000

08015080 <rint>:
 8015080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015082:	ec51 0b10 	vmov	r0, r1, d0
 8015086:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801508a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801508e:	2e13      	cmp	r6, #19
 8015090:	460b      	mov	r3, r1
 8015092:	ee10 4a10 	vmov	r4, s0
 8015096:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801509a:	dc56      	bgt.n	801514a <rint+0xca>
 801509c:	2e00      	cmp	r6, #0
 801509e:	da2b      	bge.n	80150f8 <rint+0x78>
 80150a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80150a4:	4302      	orrs	r2, r0
 80150a6:	d023      	beq.n	80150f0 <rint+0x70>
 80150a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80150ac:	4302      	orrs	r2, r0
 80150ae:	4254      	negs	r4, r2
 80150b0:	4314      	orrs	r4, r2
 80150b2:	0c4b      	lsrs	r3, r1, #17
 80150b4:	0b24      	lsrs	r4, r4, #12
 80150b6:	045b      	lsls	r3, r3, #17
 80150b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80150bc:	ea44 0103 	orr.w	r1, r4, r3
 80150c0:	460b      	mov	r3, r1
 80150c2:	492f      	ldr	r1, [pc, #188]	; (8015180 <rint+0x100>)
 80150c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80150c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80150cc:	4602      	mov	r2, r0
 80150ce:	4639      	mov	r1, r7
 80150d0:	4630      	mov	r0, r6
 80150d2:	f7eb f903 	bl	80002dc <__adddf3>
 80150d6:	e9cd 0100 	strd	r0, r1, [sp]
 80150da:	463b      	mov	r3, r7
 80150dc:	4632      	mov	r2, r6
 80150de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150e2:	f7eb f8f9 	bl	80002d8 <__aeabi_dsub>
 80150e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80150ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80150ee:	4639      	mov	r1, r7
 80150f0:	ec41 0b10 	vmov	d0, r0, r1
 80150f4:	b003      	add	sp, #12
 80150f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150f8:	4a22      	ldr	r2, [pc, #136]	; (8015184 <rint+0x104>)
 80150fa:	4132      	asrs	r2, r6
 80150fc:	ea01 0702 	and.w	r7, r1, r2
 8015100:	4307      	orrs	r7, r0
 8015102:	d0f5      	beq.n	80150f0 <rint+0x70>
 8015104:	0852      	lsrs	r2, r2, #1
 8015106:	4011      	ands	r1, r2
 8015108:	430c      	orrs	r4, r1
 801510a:	d00b      	beq.n	8015124 <rint+0xa4>
 801510c:	ea23 0202 	bic.w	r2, r3, r2
 8015110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015114:	2e13      	cmp	r6, #19
 8015116:	fa43 f306 	asr.w	r3, r3, r6
 801511a:	bf0c      	ite	eq
 801511c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015120:	2400      	movne	r4, #0
 8015122:	4313      	orrs	r3, r2
 8015124:	4916      	ldr	r1, [pc, #88]	; (8015180 <rint+0x100>)
 8015126:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801512a:	4622      	mov	r2, r4
 801512c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015130:	4620      	mov	r0, r4
 8015132:	4629      	mov	r1, r5
 8015134:	f7eb f8d2 	bl	80002dc <__adddf3>
 8015138:	e9cd 0100 	strd	r0, r1, [sp]
 801513c:	4622      	mov	r2, r4
 801513e:	462b      	mov	r3, r5
 8015140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015144:	f7eb f8c8 	bl	80002d8 <__aeabi_dsub>
 8015148:	e7d2      	b.n	80150f0 <rint+0x70>
 801514a:	2e33      	cmp	r6, #51	; 0x33
 801514c:	dd07      	ble.n	801515e <rint+0xde>
 801514e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015152:	d1cd      	bne.n	80150f0 <rint+0x70>
 8015154:	ee10 2a10 	vmov	r2, s0
 8015158:	f7eb f8c0 	bl	80002dc <__adddf3>
 801515c:	e7c8      	b.n	80150f0 <rint+0x70>
 801515e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8015162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015166:	40f2      	lsrs	r2, r6
 8015168:	4210      	tst	r0, r2
 801516a:	d0c1      	beq.n	80150f0 <rint+0x70>
 801516c:	0852      	lsrs	r2, r2, #1
 801516e:	4210      	tst	r0, r2
 8015170:	bf1f      	itttt	ne
 8015172:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015176:	ea20 0202 	bicne.w	r2, r0, r2
 801517a:	4134      	asrne	r4, r6
 801517c:	4314      	orrne	r4, r2
 801517e:	e7d1      	b.n	8015124 <rint+0xa4>
 8015180:	08016a88 	.word	0x08016a88
 8015184:	000fffff 	.word	0x000fffff

08015188 <scalbn>:
 8015188:	b570      	push	{r4, r5, r6, lr}
 801518a:	ec55 4b10 	vmov	r4, r5, d0
 801518e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015192:	4606      	mov	r6, r0
 8015194:	462b      	mov	r3, r5
 8015196:	b9aa      	cbnz	r2, 80151c4 <scalbn+0x3c>
 8015198:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801519c:	4323      	orrs	r3, r4
 801519e:	d03b      	beq.n	8015218 <scalbn+0x90>
 80151a0:	4b31      	ldr	r3, [pc, #196]	; (8015268 <scalbn+0xe0>)
 80151a2:	4629      	mov	r1, r5
 80151a4:	2200      	movs	r2, #0
 80151a6:	ee10 0a10 	vmov	r0, s0
 80151aa:	f7eb fa4d 	bl	8000648 <__aeabi_dmul>
 80151ae:	4b2f      	ldr	r3, [pc, #188]	; (801526c <scalbn+0xe4>)
 80151b0:	429e      	cmp	r6, r3
 80151b2:	4604      	mov	r4, r0
 80151b4:	460d      	mov	r5, r1
 80151b6:	da12      	bge.n	80151de <scalbn+0x56>
 80151b8:	a327      	add	r3, pc, #156	; (adr r3, 8015258 <scalbn+0xd0>)
 80151ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151be:	f7eb fa43 	bl	8000648 <__aeabi_dmul>
 80151c2:	e009      	b.n	80151d8 <scalbn+0x50>
 80151c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80151c8:	428a      	cmp	r2, r1
 80151ca:	d10c      	bne.n	80151e6 <scalbn+0x5e>
 80151cc:	ee10 2a10 	vmov	r2, s0
 80151d0:	4620      	mov	r0, r4
 80151d2:	4629      	mov	r1, r5
 80151d4:	f7eb f882 	bl	80002dc <__adddf3>
 80151d8:	4604      	mov	r4, r0
 80151da:	460d      	mov	r5, r1
 80151dc:	e01c      	b.n	8015218 <scalbn+0x90>
 80151de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80151e2:	460b      	mov	r3, r1
 80151e4:	3a36      	subs	r2, #54	; 0x36
 80151e6:	4432      	add	r2, r6
 80151e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80151ec:	428a      	cmp	r2, r1
 80151ee:	dd0b      	ble.n	8015208 <scalbn+0x80>
 80151f0:	ec45 4b11 	vmov	d1, r4, r5
 80151f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015260 <scalbn+0xd8>
 80151f8:	f000 f9f0 	bl	80155dc <copysign>
 80151fc:	a318      	add	r3, pc, #96	; (adr r3, 8015260 <scalbn+0xd8>)
 80151fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015202:	ec51 0b10 	vmov	r0, r1, d0
 8015206:	e7da      	b.n	80151be <scalbn+0x36>
 8015208:	2a00      	cmp	r2, #0
 801520a:	dd08      	ble.n	801521e <scalbn+0x96>
 801520c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015210:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015214:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015218:	ec45 4b10 	vmov	d0, r4, r5
 801521c:	bd70      	pop	{r4, r5, r6, pc}
 801521e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015222:	da0d      	bge.n	8015240 <scalbn+0xb8>
 8015224:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015228:	429e      	cmp	r6, r3
 801522a:	ec45 4b11 	vmov	d1, r4, r5
 801522e:	dce1      	bgt.n	80151f4 <scalbn+0x6c>
 8015230:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015258 <scalbn+0xd0>
 8015234:	f000 f9d2 	bl	80155dc <copysign>
 8015238:	a307      	add	r3, pc, #28	; (adr r3, 8015258 <scalbn+0xd0>)
 801523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801523e:	e7e0      	b.n	8015202 <scalbn+0x7a>
 8015240:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015244:	3236      	adds	r2, #54	; 0x36
 8015246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801524a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801524e:	4620      	mov	r0, r4
 8015250:	4629      	mov	r1, r5
 8015252:	2200      	movs	r2, #0
 8015254:	4b06      	ldr	r3, [pc, #24]	; (8015270 <scalbn+0xe8>)
 8015256:	e7b2      	b.n	80151be <scalbn+0x36>
 8015258:	c2f8f359 	.word	0xc2f8f359
 801525c:	01a56e1f 	.word	0x01a56e1f
 8015260:	8800759c 	.word	0x8800759c
 8015264:	7e37e43c 	.word	0x7e37e43c
 8015268:	43500000 	.word	0x43500000
 801526c:	ffff3cb0 	.word	0xffff3cb0
 8015270:	3c900000 	.word	0x3c900000
 8015274:	00000000 	.word	0x00000000

08015278 <__ieee754_log>:
 8015278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801527c:	ec51 0b10 	vmov	r0, r1, d0
 8015280:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8015284:	b087      	sub	sp, #28
 8015286:	460d      	mov	r5, r1
 8015288:	da27      	bge.n	80152da <__ieee754_log+0x62>
 801528a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801528e:	4303      	orrs	r3, r0
 8015290:	ee10 2a10 	vmov	r2, s0
 8015294:	d10a      	bne.n	80152ac <__ieee754_log+0x34>
 8015296:	49cc      	ldr	r1, [pc, #816]	; (80155c8 <__ieee754_log+0x350>)
 8015298:	2200      	movs	r2, #0
 801529a:	2300      	movs	r3, #0
 801529c:	2000      	movs	r0, #0
 801529e:	f7eb fafd 	bl	800089c <__aeabi_ddiv>
 80152a2:	ec41 0b10 	vmov	d0, r0, r1
 80152a6:	b007      	add	sp, #28
 80152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ac:	2900      	cmp	r1, #0
 80152ae:	da05      	bge.n	80152bc <__ieee754_log+0x44>
 80152b0:	460b      	mov	r3, r1
 80152b2:	f7eb f811 	bl	80002d8 <__aeabi_dsub>
 80152b6:	2200      	movs	r2, #0
 80152b8:	2300      	movs	r3, #0
 80152ba:	e7f0      	b.n	801529e <__ieee754_log+0x26>
 80152bc:	4bc3      	ldr	r3, [pc, #780]	; (80155cc <__ieee754_log+0x354>)
 80152be:	2200      	movs	r2, #0
 80152c0:	f7eb f9c2 	bl	8000648 <__aeabi_dmul>
 80152c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80152c8:	460d      	mov	r5, r1
 80152ca:	4ac1      	ldr	r2, [pc, #772]	; (80155d0 <__ieee754_log+0x358>)
 80152cc:	4295      	cmp	r5, r2
 80152ce:	dd06      	ble.n	80152de <__ieee754_log+0x66>
 80152d0:	4602      	mov	r2, r0
 80152d2:	460b      	mov	r3, r1
 80152d4:	f7eb f802 	bl	80002dc <__adddf3>
 80152d8:	e7e3      	b.n	80152a2 <__ieee754_log+0x2a>
 80152da:	2300      	movs	r3, #0
 80152dc:	e7f5      	b.n	80152ca <__ieee754_log+0x52>
 80152de:	152c      	asrs	r4, r5, #20
 80152e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80152e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80152e8:	441c      	add	r4, r3
 80152ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80152ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80152f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80152f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80152fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80152fe:	ea42 0105 	orr.w	r1, r2, r5
 8015302:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8015306:	2200      	movs	r2, #0
 8015308:	4bb2      	ldr	r3, [pc, #712]	; (80155d4 <__ieee754_log+0x35c>)
 801530a:	f7ea ffe5 	bl	80002d8 <__aeabi_dsub>
 801530e:	1cab      	adds	r3, r5, #2
 8015310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015314:	2b02      	cmp	r3, #2
 8015316:	4682      	mov	sl, r0
 8015318:	468b      	mov	fp, r1
 801531a:	f04f 0200 	mov.w	r2, #0
 801531e:	dc53      	bgt.n	80153c8 <__ieee754_log+0x150>
 8015320:	2300      	movs	r3, #0
 8015322:	f7eb fbf9 	bl	8000b18 <__aeabi_dcmpeq>
 8015326:	b1d0      	cbz	r0, 801535e <__ieee754_log+0xe6>
 8015328:	2c00      	cmp	r4, #0
 801532a:	f000 8120 	beq.w	801556e <__ieee754_log+0x2f6>
 801532e:	4620      	mov	r0, r4
 8015330:	f7eb f920 	bl	8000574 <__aeabi_i2d>
 8015334:	a390      	add	r3, pc, #576	; (adr r3, 8015578 <__ieee754_log+0x300>)
 8015336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533a:	4606      	mov	r6, r0
 801533c:	460f      	mov	r7, r1
 801533e:	f7eb f983 	bl	8000648 <__aeabi_dmul>
 8015342:	a38f      	add	r3, pc, #572	; (adr r3, 8015580 <__ieee754_log+0x308>)
 8015344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015348:	4604      	mov	r4, r0
 801534a:	460d      	mov	r5, r1
 801534c:	4630      	mov	r0, r6
 801534e:	4639      	mov	r1, r7
 8015350:	f7eb f97a 	bl	8000648 <__aeabi_dmul>
 8015354:	4602      	mov	r2, r0
 8015356:	460b      	mov	r3, r1
 8015358:	4620      	mov	r0, r4
 801535a:	4629      	mov	r1, r5
 801535c:	e7ba      	b.n	80152d4 <__ieee754_log+0x5c>
 801535e:	a38a      	add	r3, pc, #552	; (adr r3, 8015588 <__ieee754_log+0x310>)
 8015360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015364:	4650      	mov	r0, sl
 8015366:	4659      	mov	r1, fp
 8015368:	f7eb f96e 	bl	8000648 <__aeabi_dmul>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	2000      	movs	r0, #0
 8015372:	4999      	ldr	r1, [pc, #612]	; (80155d8 <__ieee754_log+0x360>)
 8015374:	f7ea ffb0 	bl	80002d8 <__aeabi_dsub>
 8015378:	4652      	mov	r2, sl
 801537a:	4606      	mov	r6, r0
 801537c:	460f      	mov	r7, r1
 801537e:	465b      	mov	r3, fp
 8015380:	4650      	mov	r0, sl
 8015382:	4659      	mov	r1, fp
 8015384:	f7eb f960 	bl	8000648 <__aeabi_dmul>
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
 801538c:	4630      	mov	r0, r6
 801538e:	4639      	mov	r1, r7
 8015390:	f7eb f95a 	bl	8000648 <__aeabi_dmul>
 8015394:	4606      	mov	r6, r0
 8015396:	460f      	mov	r7, r1
 8015398:	b914      	cbnz	r4, 80153a0 <__ieee754_log+0x128>
 801539a:	4632      	mov	r2, r6
 801539c:	463b      	mov	r3, r7
 801539e:	e0a0      	b.n	80154e2 <__ieee754_log+0x26a>
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7eb f8e7 	bl	8000574 <__aeabi_i2d>
 80153a6:	a374      	add	r3, pc, #464	; (adr r3, 8015578 <__ieee754_log+0x300>)
 80153a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ac:	4680      	mov	r8, r0
 80153ae:	4689      	mov	r9, r1
 80153b0:	f7eb f94a 	bl	8000648 <__aeabi_dmul>
 80153b4:	a372      	add	r3, pc, #456	; (adr r3, 8015580 <__ieee754_log+0x308>)
 80153b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ba:	4604      	mov	r4, r0
 80153bc:	460d      	mov	r5, r1
 80153be:	4640      	mov	r0, r8
 80153c0:	4649      	mov	r1, r9
 80153c2:	f7eb f941 	bl	8000648 <__aeabi_dmul>
 80153c6:	e0a5      	b.n	8015514 <__ieee754_log+0x29c>
 80153c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153cc:	f7ea ff86 	bl	80002dc <__adddf3>
 80153d0:	4602      	mov	r2, r0
 80153d2:	460b      	mov	r3, r1
 80153d4:	4650      	mov	r0, sl
 80153d6:	4659      	mov	r1, fp
 80153d8:	f7eb fa60 	bl	800089c <__aeabi_ddiv>
 80153dc:	e9cd 0100 	strd	r0, r1, [sp]
 80153e0:	4620      	mov	r0, r4
 80153e2:	f7eb f8c7 	bl	8000574 <__aeabi_i2d>
 80153e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153ee:	4610      	mov	r0, r2
 80153f0:	4619      	mov	r1, r3
 80153f2:	f7eb f929 	bl	8000648 <__aeabi_dmul>
 80153f6:	4602      	mov	r2, r0
 80153f8:	460b      	mov	r3, r1
 80153fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153fe:	f7eb f923 	bl	8000648 <__aeabi_dmul>
 8015402:	a363      	add	r3, pc, #396	; (adr r3, 8015590 <__ieee754_log+0x318>)
 8015404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015408:	4680      	mov	r8, r0
 801540a:	4689      	mov	r9, r1
 801540c:	f7eb f91c 	bl	8000648 <__aeabi_dmul>
 8015410:	a361      	add	r3, pc, #388	; (adr r3, 8015598 <__ieee754_log+0x320>)
 8015412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015416:	f7ea ff61 	bl	80002dc <__adddf3>
 801541a:	4642      	mov	r2, r8
 801541c:	464b      	mov	r3, r9
 801541e:	f7eb f913 	bl	8000648 <__aeabi_dmul>
 8015422:	a35f      	add	r3, pc, #380	; (adr r3, 80155a0 <__ieee754_log+0x328>)
 8015424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015428:	f7ea ff58 	bl	80002dc <__adddf3>
 801542c:	4642      	mov	r2, r8
 801542e:	464b      	mov	r3, r9
 8015430:	f7eb f90a 	bl	8000648 <__aeabi_dmul>
 8015434:	a35c      	add	r3, pc, #368	; (adr r3, 80155a8 <__ieee754_log+0x330>)
 8015436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543a:	f7ea ff4f 	bl	80002dc <__adddf3>
 801543e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015442:	f7eb f901 	bl	8000648 <__aeabi_dmul>
 8015446:	a35a      	add	r3, pc, #360	; (adr r3, 80155b0 <__ieee754_log+0x338>)
 8015448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015450:	4640      	mov	r0, r8
 8015452:	4649      	mov	r1, r9
 8015454:	f7eb f8f8 	bl	8000648 <__aeabi_dmul>
 8015458:	a357      	add	r3, pc, #348	; (adr r3, 80155b8 <__ieee754_log+0x340>)
 801545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545e:	f7ea ff3d 	bl	80002dc <__adddf3>
 8015462:	4642      	mov	r2, r8
 8015464:	464b      	mov	r3, r9
 8015466:	f7eb f8ef 	bl	8000648 <__aeabi_dmul>
 801546a:	a355      	add	r3, pc, #340	; (adr r3, 80155c0 <__ieee754_log+0x348>)
 801546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015470:	f7ea ff34 	bl	80002dc <__adddf3>
 8015474:	4642      	mov	r2, r8
 8015476:	464b      	mov	r3, r9
 8015478:	f7eb f8e6 	bl	8000648 <__aeabi_dmul>
 801547c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8015480:	4602      	mov	r2, r0
 8015482:	460b      	mov	r3, r1
 8015484:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8015488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801548c:	f7ea ff26 	bl	80002dc <__adddf3>
 8015490:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8015494:	3551      	adds	r5, #81	; 0x51
 8015496:	4335      	orrs	r5, r6
 8015498:	2d00      	cmp	r5, #0
 801549a:	4680      	mov	r8, r0
 801549c:	4689      	mov	r9, r1
 801549e:	dd48      	ble.n	8015532 <__ieee754_log+0x2ba>
 80154a0:	2200      	movs	r2, #0
 80154a2:	4b4d      	ldr	r3, [pc, #308]	; (80155d8 <__ieee754_log+0x360>)
 80154a4:	4650      	mov	r0, sl
 80154a6:	4659      	mov	r1, fp
 80154a8:	f7eb f8ce 	bl	8000648 <__aeabi_dmul>
 80154ac:	4652      	mov	r2, sl
 80154ae:	465b      	mov	r3, fp
 80154b0:	f7eb f8ca 	bl	8000648 <__aeabi_dmul>
 80154b4:	4602      	mov	r2, r0
 80154b6:	460b      	mov	r3, r1
 80154b8:	4606      	mov	r6, r0
 80154ba:	460f      	mov	r7, r1
 80154bc:	4640      	mov	r0, r8
 80154be:	4649      	mov	r1, r9
 80154c0:	f7ea ff0c 	bl	80002dc <__adddf3>
 80154c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154c8:	f7eb f8be 	bl	8000648 <__aeabi_dmul>
 80154cc:	4680      	mov	r8, r0
 80154ce:	4689      	mov	r9, r1
 80154d0:	b964      	cbnz	r4, 80154ec <__ieee754_log+0x274>
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	4630      	mov	r0, r6
 80154d8:	4639      	mov	r1, r7
 80154da:	f7ea fefd 	bl	80002d8 <__aeabi_dsub>
 80154de:	4602      	mov	r2, r0
 80154e0:	460b      	mov	r3, r1
 80154e2:	4650      	mov	r0, sl
 80154e4:	4659      	mov	r1, fp
 80154e6:	f7ea fef7 	bl	80002d8 <__aeabi_dsub>
 80154ea:	e6da      	b.n	80152a2 <__ieee754_log+0x2a>
 80154ec:	a322      	add	r3, pc, #136	; (adr r3, 8015578 <__ieee754_log+0x300>)
 80154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154f6:	f7eb f8a7 	bl	8000648 <__aeabi_dmul>
 80154fa:	a321      	add	r3, pc, #132	; (adr r3, 8015580 <__ieee754_log+0x308>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	4604      	mov	r4, r0
 8015502:	460d      	mov	r5, r1
 8015504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015508:	f7eb f89e 	bl	8000648 <__aeabi_dmul>
 801550c:	4642      	mov	r2, r8
 801550e:	464b      	mov	r3, r9
 8015510:	f7ea fee4 	bl	80002dc <__adddf3>
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	4630      	mov	r0, r6
 801551a:	4639      	mov	r1, r7
 801551c:	f7ea fedc 	bl	80002d8 <__aeabi_dsub>
 8015520:	4652      	mov	r2, sl
 8015522:	465b      	mov	r3, fp
 8015524:	f7ea fed8 	bl	80002d8 <__aeabi_dsub>
 8015528:	4602      	mov	r2, r0
 801552a:	460b      	mov	r3, r1
 801552c:	4620      	mov	r0, r4
 801552e:	4629      	mov	r1, r5
 8015530:	e7d9      	b.n	80154e6 <__ieee754_log+0x26e>
 8015532:	4602      	mov	r2, r0
 8015534:	460b      	mov	r3, r1
 8015536:	4650      	mov	r0, sl
 8015538:	4659      	mov	r1, fp
 801553a:	f7ea fecd 	bl	80002d8 <__aeabi_dsub>
 801553e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015542:	f7eb f881 	bl	8000648 <__aeabi_dmul>
 8015546:	4606      	mov	r6, r0
 8015548:	460f      	mov	r7, r1
 801554a:	2c00      	cmp	r4, #0
 801554c:	f43f af25 	beq.w	801539a <__ieee754_log+0x122>
 8015550:	a309      	add	r3, pc, #36	; (adr r3, 8015578 <__ieee754_log+0x300>)
 8015552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801555a:	f7eb f875 	bl	8000648 <__aeabi_dmul>
 801555e:	a308      	add	r3, pc, #32	; (adr r3, 8015580 <__ieee754_log+0x308>)
 8015560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015564:	4604      	mov	r4, r0
 8015566:	460d      	mov	r5, r1
 8015568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801556c:	e729      	b.n	80153c2 <__ieee754_log+0x14a>
 801556e:	2000      	movs	r0, #0
 8015570:	2100      	movs	r1, #0
 8015572:	e696      	b.n	80152a2 <__ieee754_log+0x2a>
 8015574:	f3af 8000 	nop.w
 8015578:	fee00000 	.word	0xfee00000
 801557c:	3fe62e42 	.word	0x3fe62e42
 8015580:	35793c76 	.word	0x35793c76
 8015584:	3dea39ef 	.word	0x3dea39ef
 8015588:	55555555 	.word	0x55555555
 801558c:	3fd55555 	.word	0x3fd55555
 8015590:	df3e5244 	.word	0xdf3e5244
 8015594:	3fc2f112 	.word	0x3fc2f112
 8015598:	96cb03de 	.word	0x96cb03de
 801559c:	3fc74664 	.word	0x3fc74664
 80155a0:	94229359 	.word	0x94229359
 80155a4:	3fd24924 	.word	0x3fd24924
 80155a8:	55555593 	.word	0x55555593
 80155ac:	3fe55555 	.word	0x3fe55555
 80155b0:	d078c69f 	.word	0xd078c69f
 80155b4:	3fc39a09 	.word	0x3fc39a09
 80155b8:	1d8e78af 	.word	0x1d8e78af
 80155bc:	3fcc71c5 	.word	0x3fcc71c5
 80155c0:	9997fa04 	.word	0x9997fa04
 80155c4:	3fd99999 	.word	0x3fd99999
 80155c8:	c3500000 	.word	0xc3500000
 80155cc:	43500000 	.word	0x43500000
 80155d0:	7fefffff 	.word	0x7fefffff
 80155d4:	3ff00000 	.word	0x3ff00000
 80155d8:	3fe00000 	.word	0x3fe00000

080155dc <copysign>:
 80155dc:	ec51 0b10 	vmov	r0, r1, d0
 80155e0:	ee11 0a90 	vmov	r0, s3
 80155e4:	ee10 2a10 	vmov	r2, s0
 80155e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80155ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80155f0:	ea41 0300 	orr.w	r3, r1, r0
 80155f4:	ec43 2b10 	vmov	d0, r2, r3
 80155f8:	4770      	bx	lr
	...

080155fc <_init>:
 80155fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155fe:	bf00      	nop
 8015600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015602:	bc08      	pop	{r3}
 8015604:	469e      	mov	lr, r3
 8015606:	4770      	bx	lr

08015608 <_fini>:
 8015608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560a:	bf00      	nop
 801560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801560e:	bc08      	pop	{r3}
 8015610:	469e      	mov	lr, r3
 8015612:	4770      	bx	lr
