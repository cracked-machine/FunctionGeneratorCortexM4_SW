
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a074  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a8  0800a7a8  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7a8  0800a7a8  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7a8  0800a7a8  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a8  0800a7a8  0001a7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc8  0800b378  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800b378  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270d1  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005236  00000000  00000000  00047cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d30  00000000  00000000  0004cf00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a18  00000000  00000000  0004ec30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fdfa  00000000  00000000  00050648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ef95  00000000  00000000  00080442  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012408c  00000000  00000000  0009f3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c3463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d40  00000000  00000000  001c34e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a23c 	.word	0x0800a23c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a23c 	.word	0x0800a23c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fbf0 	bl	8008aa8 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fb8f 	bl	80089ec <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fd9f 	bl	8008e14 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fa7a 	bl	80087ec <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fd68 	bl	8002dd0 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb16 	bl	8000930 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f82d 	bl	8009364 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a254 	.word	0x0800a254
 8000314:	0800a264 	.word	0x0800a264

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	482e      	ldr	r0, [pc, #184]	; (80003e8 <DM_UpdateDisplay+0xd0>)
 8000330:	f008 fa5c 	bl	80087ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <DM_UpdateDisplay+0xd4>)
 8000346:	f008 fa51 	bl	80087ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4825      	ldr	r0, [pc, #148]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 800035c:	f008 fa46 	bl	80087ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	4820      	ldr	r0, [pc, #128]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 8000374:	f008 fa3a 	bl	80087ec <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f856 	bl	8000430 <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <DM_UpdateDisplay+0xe4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 fa1a 	bl	80007c4 <_DrawGainSelectMenu>

	if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <DM_UpdateDisplay+0xe8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <DM_UpdateDisplay+0x84>
		_DrawFreqSelectMenu();
 8000398:	f000 fa56 	bl	8000848 <_DrawFreqSelectMenu>

	if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <DM_UpdateDisplay+0xec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <DM_UpdateDisplay+0x90>
		_DrawBiasSelectMenu();
 80003a4:	f000 fa92 	bl	80008cc <_DrawBiasSelectMenu>

#ifdef ENCODER_DEBUG
	char tim1tmp[11] = "";
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(tim1tmp, sizeof(tim1tmp), "%lu", TIM1->CNT);
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <DM_UpdateDisplay+0xf0>)
 80003ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003bc:	1d38      	adds	r0, r7, #4
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <DM_UpdateDisplay+0xf4>)
 80003c0:	210b      	movs	r1, #11
 80003c2:	f008 ffd7 	bl	8009374 <sniprintf>
	ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003c6:	1d38      	adds	r0, r7, #4
 80003c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2302      	movs	r3, #2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2232      	movs	r2, #50	; 0x32
 80003d6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003da:	f008 fa07 	bl	80087ec <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800a274 	.word	0x0800a274
 80003ec:	0800a27c 	.word	0x0800a27c
 80003f0:	0800a284 	.word	0x0800a284
 80003f4:	0800a28c 	.word	0x0800a28c
 80003f8:	20000be4 	.word	0x20000be4
 80003fc:	20000be5 	.word	0x20000be5
 8000400:	20000be6 	.word	0x20000be6
 8000404:	20000be7 	.word	0x20000be7
 8000408:	40012c00 	.word	0x40012c00
 800040c:	0800a294 	.word	0x0800a294

08000410 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <DM_ShowFuncSelectMenu+0x1c>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	7013      	strb	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000be4 	.word	0x20000be4

08000430 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 8000436:	f000 fda3 	bl	8000f80 <FuncO_GetOutputMode>
 800043a:	4603      	mov	r3, r0
 800043c:	2b05      	cmp	r3, #5
 800043e:	f200 81a1 	bhi.w	8000784 <_DrawFuncSelectMenu+0x354>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <_DrawFuncSelectMenu+0x18>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000461 	.word	0x08000461
 800044c:	080004e7 	.word	0x080004e7
 8000450:	0800056d 	.word	0x0800056d
 8000454:	080005f3 	.word	0x080005f3
 8000458:	08000679 	.word	0x08000679
 800045c:	080006ff 	.word	0x080006ff
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000460:	2300      	movs	r3, #0
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2302      	movs	r3, #2
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046c:	221e      	movs	r2, #30
 800046e:	210a      	movs	r1, #10
 8000470:	48c6      	ldr	r0, [pc, #792]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000472:	f008 f9bb 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	2302      	movs	r3, #2
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	2232      	movs	r2, #50	; 0x32
 8000484:	210a      	movs	r1, #10
 8000486:	48c2      	ldr	r0, [pc, #776]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000488:	f008 f9b0 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800048c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2246      	movs	r2, #70	; 0x46
 800049a:	210a      	movs	r1, #10
 800049c:	48bd      	ldr	r0, [pc, #756]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800049e:	f008 f9a5 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	2302      	movs	r3, #2
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2300      	movs	r3, #0
 80004ae:	225a      	movs	r2, #90	; 0x5a
 80004b0:	210a      	movs	r1, #10
 80004b2:	48b9      	ldr	r0, [pc, #740]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80004b4:	f008 f99a 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2302      	movs	r3, #2
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	226e      	movs	r2, #110	; 0x6e
 80004c6:	210a      	movs	r1, #10
 80004c8:	48b4      	ldr	r0, [pc, #720]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80004ca:	f008 f98f 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2302      	movs	r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2300      	movs	r3, #0
 80004da:	2282      	movs	r2, #130	; 0x82
 80004dc:	210a      	movs	r1, #10
 80004de:	48b0      	ldr	r0, [pc, #704]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80004e0:	f008 f984 	bl	80087ec <ILI9341_Draw_Text>
			break;
 80004e4:	e14e      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2300      	movs	r3, #0
 80004f2:	221e      	movs	r2, #30
 80004f4:	210a      	movs	r1, #10
 80004f6:	48a5      	ldr	r0, [pc, #660]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 80004f8:	f008 f978 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2302      	movs	r3, #2
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000508:	2232      	movs	r2, #50	; 0x32
 800050a:	210a      	movs	r1, #10
 800050c:	48a0      	ldr	r0, [pc, #640]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800050e:	f008 f96d 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2246      	movs	r2, #70	; 0x46
 8000520:	210a      	movs	r1, #10
 8000522:	489c      	ldr	r0, [pc, #624]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000524:	f008 f962 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2302      	movs	r3, #2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	225a      	movs	r2, #90	; 0x5a
 8000536:	210a      	movs	r1, #10
 8000538:	4897      	ldr	r0, [pc, #604]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 800053a:	f008 f957 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800053e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2302      	movs	r3, #2
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	226e      	movs	r2, #110	; 0x6e
 800054c:	210a      	movs	r1, #10
 800054e:	4893      	ldr	r0, [pc, #588]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000550:	f008 f94c 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2302      	movs	r3, #2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2282      	movs	r2, #130	; 0x82
 8000562:	210a      	movs	r1, #10
 8000564:	488e      	ldr	r0, [pc, #568]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000566:	f008 f941 	bl	80087ec <ILI9341_Draw_Text>
			break;
 800056a:	e10b      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800056c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2302      	movs	r3, #2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	221e      	movs	r2, #30
 800057a:	210a      	movs	r1, #10
 800057c:	4883      	ldr	r0, [pc, #524]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800057e:	f008 f935 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	210a      	movs	r1, #10
 8000592:	487f      	ldr	r0, [pc, #508]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000594:	f008 f92a 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a4:	2246      	movs	r2, #70	; 0x46
 80005a6:	210a      	movs	r1, #10
 80005a8:	487a      	ldr	r0, [pc, #488]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80005aa:	f008 f91f 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	225a      	movs	r2, #90	; 0x5a
 80005bc:	210a      	movs	r1, #10
 80005be:	4876      	ldr	r0, [pc, #472]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80005c0:	f008 f914 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	226e      	movs	r2, #110	; 0x6e
 80005d2:	210a      	movs	r1, #10
 80005d4:	4871      	ldr	r0, [pc, #452]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80005d6:	f008 f909 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2302      	movs	r3, #2
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2282      	movs	r2, #130	; 0x82
 80005e8:	210a      	movs	r1, #10
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80005ec:	f008 f8fe 	bl	80087ec <ILI9341_Draw_Text>
			break;
 80005f0:	e0c8      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	221e      	movs	r2, #30
 8000600:	210a      	movs	r1, #10
 8000602:	4862      	ldr	r0, [pc, #392]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000604:	f008 f8f2 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2232      	movs	r2, #50	; 0x32
 8000616:	210a      	movs	r1, #10
 8000618:	485d      	ldr	r0, [pc, #372]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800061a:	f008 f8e7 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2302      	movs	r3, #2
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2246      	movs	r2, #70	; 0x46
 800062c:	210a      	movs	r1, #10
 800062e:	4859      	ldr	r0, [pc, #356]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000630:	f008 f8dc 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000640:	225a      	movs	r2, #90	; 0x5a
 8000642:	210a      	movs	r1, #10
 8000644:	4854      	ldr	r0, [pc, #336]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000646:	f008 f8d1 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800064a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2302      	movs	r3, #2
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	226e      	movs	r2, #110	; 0x6e
 8000658:	210a      	movs	r1, #10
 800065a:	4850      	ldr	r0, [pc, #320]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 800065c:	f008 f8c6 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	210a      	movs	r1, #10
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000672:	f008 f8bb 	bl	80087ec <ILI9341_Draw_Text>
			break;
 8000676:	e085      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	221e      	movs	r2, #30
 8000686:	210a      	movs	r1, #10
 8000688:	4840      	ldr	r0, [pc, #256]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800068a:	f008 f8af 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2302      	movs	r3, #2
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	210a      	movs	r1, #10
 800069e:	483c      	ldr	r0, [pc, #240]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 80006a0:	f008 f8a4 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2246      	movs	r2, #70	; 0x46
 80006b2:	210a      	movs	r1, #10
 80006b4:	4837      	ldr	r0, [pc, #220]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80006b6:	f008 f899 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	225a      	movs	r2, #90	; 0x5a
 80006c8:	210a      	movs	r1, #10
 80006ca:	4833      	ldr	r0, [pc, #204]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80006cc:	f008 f88e 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006dc:	226e      	movs	r2, #110	; 0x6e
 80006de:	210a      	movs	r1, #10
 80006e0:	482e      	ldr	r0, [pc, #184]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80006e2:	f008 f883 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2302      	movs	r3, #2
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	2282      	movs	r2, #130	; 0x82
 80006f4:	210a      	movs	r1, #10
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80006f8:	f008 f878 	bl	80087ec <ILI9341_Draw_Text>
			break;
 80006fc:	e042      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2302      	movs	r3, #2
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	221e      	movs	r2, #30
 800070c:	210a      	movs	r1, #10
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000710:	f008 f86c 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	210a      	movs	r1, #10
 8000724:	481a      	ldr	r0, [pc, #104]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000726:	f008 f861 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2302      	movs	r3, #2
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	2246      	movs	r2, #70	; 0x46
 8000738:	210a      	movs	r1, #10
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800073c:	f008 f856 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2302      	movs	r3, #2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	225a      	movs	r2, #90	; 0x5a
 800074e:	210a      	movs	r1, #10
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000752:	f008 f84b 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2302      	movs	r3, #2
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	226e      	movs	r2, #110	; 0x6e
 8000764:	210a      	movs	r1, #10
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000768:	f008 f840 	bl	80087ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 800076c:	2300      	movs	r3, #0
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000778:	2282      	movs	r2, #130	; 0x82
 800077a:	210a      	movs	r1, #10
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 800077e:	f008 f835 	bl	80087ec <ILI9341_Draw_Text>
			break;
 8000782:	bf00      	nop

	}

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800a298 	.word	0x0800a298
 8000790:	0800a2a0 	.word	0x0800a2a0
 8000794:	0800a2ac 	.word	0x0800a2ac
 8000798:	0800a2b4 	.word	0x0800a2b4
 800079c:	0800a2c0 	.word	0x0800a2c0
 80007a0:	0800a2cc 	.word	0x0800a2cc

080007a4 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <DM_ShowGainSelectMenu+0x1c>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	20000be5 	.word	0x20000be5

080007c4 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2302      	movs	r3, #2
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2278      	movs	r2, #120	; 0x78
 80007d8:	210a      	movs	r1, #10
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <_DrawGainSelectMenu+0x5c>)
 80007dc:	f008 f806 	bl	80087ec <ILI9341_Draw_Text>

	char gain[11] = "";
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
 80007f0:	f000 fcbe 	bl	8001170 <GO_GetOutputGain>
 80007f4:	4603      	mov	r3, r0
 80007f6:	1d38      	adds	r0, r7, #4
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <_DrawGainSelectMenu+0x60>)
 80007fa:	210b      	movs	r1, #11
 80007fc:	f008 fdba 	bl	8009374 <sniprintf>
	ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000800:	1d38      	adds	r0, r7, #4
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	2278      	movs	r2, #120	; 0x78
 8000810:	21fa      	movs	r1, #250	; 0xfa
 8000812:	f007 ffeb 	bl	80087ec <ILI9341_Draw_Text>

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	0800a2d4 	.word	0x0800a2d4
 8000824:	0800a2ec 	.word	0x0800a2ec

08000828 <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <DM_ShowFreqSelectMenu+0x1c>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	7013      	strb	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000be6 	.word	0x20000be6

08000848 <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	2278      	movs	r2, #120	; 0x78
 800085c:	210a      	movs	r1, #10
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <_DrawFreqSelectMenu+0x5c>)
 8000860:	f007 ffc4 	bl	80087ec <ILI9341_Draw_Text>

	char freq[11] = "";
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
 8000874:	f000 fac6 	bl	8000e04 <FreqO_GetOutputFreq>
 8000878:	4603      	mov	r3, r0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	1d38      	adds	r0, r7, #4
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <_DrawFreqSelectMenu+0x60>)
 8000880:	210b      	movs	r1, #11
 8000882:	f008 fd77 	bl	8009374 <sniprintf>
	ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	2300      	movs	r3, #0
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2302      	movs	r3, #2
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000894:	2278      	movs	r2, #120	; 0x78
 8000896:	21fa      	movs	r1, #250	; 0xfa
 8000898:	f007 ffa8 	bl	80087ec <ILI9341_Draw_Text>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800a2f0 	.word	0x0800a2f0
 80008a8:	0800a2ec 	.word	0x0800a2ec

080008ac <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <DM_ShowBiasSelectMenu+0x1c>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	7013      	strb	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000be7 	.word	0x20000be7

080008cc <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2302      	movs	r3, #2
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2278      	movs	r2, #120	; 0x78
 80008e0:	210a      	movs	r1, #10
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <_DrawBiasSelectMenu+0x5c>)
 80008e4:	f007 ff82 	bl	80087ec <ILI9341_Draw_Text>

	char bias[11] = "";
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
 80008f8:	f000 fa68 	bl	8000dcc <BO_GetOutputBias>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	1d38      	adds	r0, r7, #4
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <_DrawBiasSelectMenu+0x60>)
 8000904:	210b      	movs	r1, #11
 8000906:	f008 fd35 	bl	8009374 <sniprintf>
	ILI9341_Draw_Text(bias, 250, 120, WHITE, 2, BLACK);
 800090a:	1d38      	adds	r0, r7, #4
 800090c:	2300      	movs	r3, #0
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	2302      	movs	r3, #2
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	2278      	movs	r2, #120	; 0x78
 800091a:	21fa      	movs	r1, #250	; 0xfa
 800091c:	f007 ff66 	bl	80087ec <ILI9341_Draw_Text>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	0800a308 	.word	0x0800a308
 800092c:	0800a2ec 	.word	0x0800a2ec

08000930 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000936:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800093a:	f008 fa6b 	bl	8008e14 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000940:	8818      	ldrh	r0, [r3, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2302      	movs	r3, #2
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	2250      	movs	r2, #80	; 0x50
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f007 fddf 	bl	8008518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 800095c:	8858      	ldrh	r0, [r3, #2]
 800095e:	2300      	movs	r3, #0
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2302      	movs	r3, #2
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2332      	movs	r3, #50	; 0x32
 800096e:	2250      	movs	r2, #80	; 0x50
 8000970:	21c8      	movs	r1, #200	; 0xc8
 8000972:	f007 fdd1 	bl	8008518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000978:	8898      	ldrh	r0, [r3, #4]
 800097a:	2300      	movs	r3, #0
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2302      	movs	r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	2250      	movs	r2, #80	; 0x50
 800098c:	21c8      	movs	r1, #200	; 0xc8
 800098e:	f007 fdc3 	bl	8008518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000994:	88d8      	ldrh	r0, [r3, #6]
 8000996:	2300      	movs	r3, #0
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2302      	movs	r3, #2
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2332      	movs	r3, #50	; 0x32
 80009a6:	2250      	movs	r2, #80	; 0x50
 80009a8:	21c8      	movs	r1, #200	; 0xc8
 80009aa:	f007 fdb5 	bl	8008518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

	switch(eNextState)
 80009bc:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	f200 808a 	bhi.w	8000ada <EM_ProcessEvent+0x122>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <EM_ProcessEvent+0x14>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009e1 	.word	0x080009e1
 80009d0:	08000a33 	.word	0x08000a33
 80009d4:	08000a5d 	.word	0x08000a5d
 80009d8:	08000a87 	.word	0x08000a87
 80009dc:	08000ab1 	.word	0x08000ab1
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 80009e0:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 80009e8:	f000 f888 	bl	8000afc <_FuncMenuHandler>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009f2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d105      	bne.n	8000a08 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 80009fc:	f000 f956 	bl	8000cac <_FreqMenuHandler>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d105      	bne.n	8000a1c <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000a10:	f000 f8ba 	bl	8000b88 <_GainMenuHandler>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d15c      	bne.n	8000ade <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000a24:	f000 f8f6 	bl	8000c14 <_BiasMenuHandler>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a30:	e055      	b.n	8000ade <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	d105      	bne.n	8000a46 <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000a3a:	f000 f871 	bl	8000b20 <_FuncSetHandler>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d149      	bne.n	8000ae2 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000a4e:	f000 f879 	bl	8000b44 <_ExitFuncMenuHandler>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a5a:	e042      	b.n	8000ae2 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d105      	bne.n	8000a70 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000a64:	f000 f8a2 	bl	8000bac <_GainSetHandler>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a6e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d136      	bne.n	8000ae6 <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000a78:	f000 f8aa 	bl	8000bd0 <_ExitGainMenuHandler>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a82:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a84:	e02f      	b.n	8000ae6 <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	d105      	bne.n	8000a9a <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000a8e:	f000 f921 	bl	8000cd4 <_FreqSetHandler>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d123      	bne.n	8000aea <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000aa2:	f000 f929 	bl	8000cf8 <_ExitFreqMenuHandler>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000aac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000aae:	e01c      	b.n	8000aea <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b05      	cmp	r3, #5
 8000ab6:	d105      	bne.n	8000ac4 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000ab8:	f000 f8c4 	bl	8000c44 <_BiasSetHandler>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ac2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d110      	bne.n	8000aee <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000acc:	f000 f8cc 	bl	8000c68 <_ExitBiasMenuHandler>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ad6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ad8:	e009      	b.n	8000aee <EM_ProcessEvent+0x136>

		default:
			break;
 8000ada:	bf00      	nop
 8000adc:	e008      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e006      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e004      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae6:	bf00      	nop
 8000ae8:	e002      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aee:	bf00      	nop
	}

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000be8 	.word	0x20000be8
 8000af8:	20000be9 	.word	0x20000be9

08000afc <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <_FuncMenuHandler+0x1c>)
 8000b02:	f008 fc2f 	bl	8009364 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fc82 	bl	8000410 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 20;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <_FuncMenuHandler+0x20>)
 8000b0e:	2214      	movs	r2, #20
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	0800a380 	.word	0x0800a380
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <_FuncSetHandler+0x1c>)
 8000b26:	f008 fc1d 	bl	8009364 <puts>
#endif

	FuncO_ModifyOutput();
 8000b2a:	f000 f977 	bl	8000e1c <FuncO_ModifyOutput>
	eNewEvent = evFuncMenu;
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <_FuncSetHandler+0x20>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	0800a39c 	.word	0x0800a39c
 8000b40:	20000be9 	.word	0x20000be9

08000b44 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <_ExitFuncMenuHandler+0x34>)
 8000b4a:	f008 fc0b 	bl	8009364 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fc5e 	bl	8000410 <DM_ShowFuncSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <_ExitFuncMenuHandler+0x38>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <_ExitFuncMenuHandler+0x3c>)
 8000b5e:	f006 fa03 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000b62:	f7ff fee5 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <_ExitFuncMenuHandler+0x3c>)
 8000b68:	f006 f9c8 	bl	8006efc <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <_ExitFuncMenuHandler+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	0800a3bc 	.word	0x0800a3bc
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	20000e98 	.word	0x20000e98
 8000b84:	20000be9 	.word	0x20000be9

08000b88 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <_GainMenuHandler+0x1c>)
 8000b8e:	f008 fbe9 	bl	8009364 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fe06 	bl	80007a4 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 32;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <_GainMenuHandler+0x20>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000b9e:	2302      	movs	r3, #2
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800a3d8 	.word	0x0800a3d8
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <_GainSetHandler+0x1c>)
 8000bb2:	f008 fbd7 	bl	8009364 <puts>
#endif

	GO_ModifyOutput();
 8000bb6:	f000 f9ef 	bl	8000f98 <GO_ModifyOutput>

	eNewEvent = evGainMenu;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <_GainSetHandler+0x20>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000bc0:	2302      	movs	r3, #2
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	0800a3f0 	.word	0x0800a3f0
 8000bcc:	20000be9 	.word	0x20000be9

08000bd0 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <_ExitGainMenuHandler+0x34>)
 8000bd6:	f008 fbc5 	bl	8009364 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fde2 	bl	80007a4 <DM_ShowGainSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_ExitGainMenuHandler+0x38>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <_ExitGainMenuHandler+0x3c>)
 8000bea:	f006 f9bd 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000bee:	f7ff fe9f 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <_ExitGainMenuHandler+0x3c>)
 8000bf4:	f006 f982 	bl	8006efc <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <_ExitGainMenuHandler+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	0800a408 	.word	0x0800a408
 8000c08:	40012c00 	.word	0x40012c00
 8000c0c:	20000e98 	.word	0x20000e98
 8000c10:	20000be9 	.word	0x20000be9

08000c14 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <_BiasMenuHandler+0x28>)
 8000c1a:	f008 fba3 	bl	8009364 <puts>
#endif
	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fe44 	bl	80008ac <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	TIM1->ARR = BIAS_MAX;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <_BiasMenuHandler+0x2c>)
 8000c26:	f240 3229 	movw	r2, #809	; 0x329
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CNT = BIAS_CENTER;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <_BiasMenuHandler+0x2c>)
 8000c2e:	f240 1299 	movw	r2, #409	; 0x199
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000c34:	2304      	movs	r3, #4
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0800a424 	.word	0x0800a424
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <_BiasSetHandler+0x1c>)
 8000c4a:	f008 fb8b 	bl	8009364 <puts>
#endif

	BO_ModifyOutput();
 8000c4e:	f000 f885 	bl	8000d5c <BO_ModifyOutput>

	eNewEvent = evBiasMenu;
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <_BiasSetHandler+0x20>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000c58:	2304      	movs	r3, #4
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800a43c 	.word	0x0800a43c
 8000c64:	20000be9 	.word	0x20000be9

08000c68 <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <_ExitBiasMenuHandler+0x34>)
 8000c6e:	f008 fb79 	bl	8009364 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fe1a 	bl	80008ac <DM_ShowBiasSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <_ExitBiasMenuHandler+0x38>)
 8000c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <_ExitBiasMenuHandler+0x3c>)
 8000c82:	f006 f971 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000c86:	f7ff fe53 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <_ExitBiasMenuHandler+0x3c>)
 8000c8c:	f006 f936 	bl	8006efc <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <_ExitBiasMenuHandler+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	0800a454 	.word	0x0800a454
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	20000e98 	.word	0x20000e98
 8000ca8:	20000be9 	.word	0x20000be9

08000cac <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <_FreqMenuHandler+0x20>)
 8000cb2:	f008 fb57 	bl	8009364 <puts>
#endif
	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fdb6 	bl	8000828 <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 1024;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <_FreqMenuHandler+0x24>)
 8000cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000cc4:	2303      	movs	r3, #3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800a470 	.word	0x0800a470
 8000cd0:	40012c00 	.word	0x40012c00

08000cd4 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <_FreqSetHandler+0x1c>)
 8000cda:	f008 fb43 	bl	8009364 <puts>
#endif

	FreqO_ModifyOutput();
 8000cde:	f000 f881 	bl	8000de4 <FreqO_ModifyOutput>

	eNewEvent = evFreqMenu;
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <_FreqSetHandler+0x20>)
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8000ce8:	2303      	movs	r3, #3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	0800a488 	.word	0x0800a488
 8000cf4:	20000be9 	.word	0x20000be9

08000cf8 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <_ExitFreqMenuHandler+0x34>)
 8000cfe:	f008 fb31 	bl	8009364 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fd90 	bl	8000828 <DM_ShowFreqSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <_ExitFreqMenuHandler+0x38>)
 8000d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <_ExitFreqMenuHandler+0x3c>)
 8000d12:	f006 f929 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d16:	f7ff fe0b 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <_ExitFreqMenuHandler+0x3c>)
 8000d1c:	f006 f8ee 	bl	8006efc <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <_ExitFreqMenuHandler+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800a4a0 	.word	0x0800a4a0
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	20000e98 	.word	0x20000e98
 8000d38:	20000be9 	.word	0x20000be9

08000d3c <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <EM_SetNewEvent+0x1c>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	7013      	strb	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20000be9 	.word	0x20000be9

08000d5c <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(TIM1->CNT < 400) {
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <BO_ModifyOutput+0x68>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d68:	d212      	bcs.n	8000d90 <BO_ModifyOutput+0x34>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (BIAS_CENTER-TIM1->CNT)*BIAS_MAG);
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <BO_ModifyOutput+0x68>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f06f 0209 	mvn.w	r2, #9
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	f603 73fa 	addw	r3, r3, #4090	; 0xffa
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <BO_ModifyOutput+0x6c>)
 8000d80:	f003 fe24 	bl	80049cc <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f004 fd0c 	bl	80057a8 <HAL_GPIO_WritePin>
	}
	// apply positive dc bias
	if(TIM1->CNT >= 400) {
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <BO_ModifyOutput+0x68>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d98:	d312      	bcc.n	8000dc0 <BO_ModifyOutput+0x64>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (TIM1->CNT-BIAS_CENTER)*BIAS_MAG);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <BO_ModifyOutput+0x68>)
 8000d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	f6a3 73fa 	subw	r3, r3, #4090	; 0xffa
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <BO_ModifyOutput+0x6c>)
 8000db0:	f003 fe0c 	bl	80049cc <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2108      	movs	r1, #8
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f004 fcf4 	bl	80057a8 <HAL_GPIO_WritePin>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	20000d14 	.word	0x20000d14

08000dcc <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <BO_GetOutputBias+0x14>)
 8000dd4:	f003 fe36 	bl	8004a44 <HAL_DAC_GetValue>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000d14 	.word	0x20000d14

08000de4 <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	TIM8->ARR = TIM1->CNT;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <FreqO_ModifyOutput+0x18>)
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <FreqO_ModifyOutput+0x1c>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	40013400 	.word	0x40013400

08000e04 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <FreqO_GetOutputFreq+0x14>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40013400 	.word	0x40013400

08000e1c <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af02      	add	r7, sp, #8


	switch(TIM1->CNT)
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <FuncO_ModifyOutput+0x140>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	2b17      	cmp	r3, #23
 8000e28:	f200 8094 	bhi.w	8000f54 <FuncO_ModifyOutput+0x138>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <FuncO_ModifyOutput+0x18>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e95 	.word	0x08000e95
 8000e38:	08000e95 	.word	0x08000e95
 8000e3c:	08000e95 	.word	0x08000e95
 8000e40:	08000eb5 	.word	0x08000eb5
 8000e44:	08000eb5 	.word	0x08000eb5
 8000e48:	08000eb5 	.word	0x08000eb5
 8000e4c:	08000eb5 	.word	0x08000eb5
 8000e50:	08000ed5 	.word	0x08000ed5
 8000e54:	08000ed5 	.word	0x08000ed5
 8000e58:	08000ed5 	.word	0x08000ed5
 8000e5c:	08000ed5 	.word	0x08000ed5
 8000e60:	08000ef5 	.word	0x08000ef5
 8000e64:	08000ef5 	.word	0x08000ef5
 8000e68:	08000ef5 	.word	0x08000ef5
 8000e6c:	08000ef5 	.word	0x08000ef5
 8000e70:	08000f15 	.word	0x08000f15
 8000e74:	08000f15 	.word	0x08000f15
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f15 	.word	0x08000f15
 8000e80:	08000f35 	.word	0x08000f35
 8000e84:	08000f35 	.word	0x08000f35
 8000e88:	08000f35 	.word	0x08000f35
 8000e8c:	08000f35 	.word	0x08000f35
 8000e90:	08000f35 	.word	0x08000f35
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4831      	ldr	r0, [pc, #196]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000e9e:	f003 fd3f 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2378      	movs	r3, #120	; 0x78
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <FuncO_ModifyOutput+0x14c>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000eae:	f003 fc75 	bl	800479c <HAL_DAC_Start_DMA>
			break;
 8000eb2:	e04f      	b.n	8000f54 <FuncO_ModifyOutput+0x138>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4829      	ldr	r0, [pc, #164]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000ebe:	f003 fd2f 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2378      	movs	r3, #120	; 0x78
 8000ec8:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <FuncO_ModifyOutput+0x150>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000ece:	f003 fc65 	bl	800479c <HAL_DAC_Start_DMA>

			break;
 8000ed2:	e03f      	b.n	8000f54 <FuncO_ModifyOutput+0x138>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000ede:	f003 fd1f 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2378      	movs	r3, #120	; 0x78
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <FuncO_ModifyOutput+0x154>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	481d      	ldr	r0, [pc, #116]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000eee:	f003 fc55 	bl	800479c <HAL_DAC_Start_DMA>
			break;
 8000ef2:	e02f      	b.n	8000f54 <FuncO_ModifyOutput+0x138>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000efe:	f003 fd0f 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2378      	movs	r3, #120	; 0x78
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <FuncO_ModifyOutput+0x158>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000f0e:	f003 fc45 	bl	800479c <HAL_DAC_Start_DMA>
			break;
 8000f12:	e01f      	b.n	8000f54 <FuncO_ModifyOutput+0x138>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000f1e:	f003 fcff 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2378      	movs	r3, #120	; 0x78
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <FuncO_ModifyOutput+0x15c>)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000f2e:	f003 fc35 	bl	800479c <HAL_DAC_Start_DMA>
			break;
 8000f32:	e00f      	b.n	8000f54 <FuncO_ModifyOutput+0x138>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <FuncO_ModifyOutput+0x144>)
 8000f36:	2205      	movs	r2, #5
 8000f38:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000f3e:	f003 fcef 	bl	8004920 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2378      	movs	r3, #120	; 0x78
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <FuncO_ModifyOutput+0x160>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <FuncO_ModifyOutput+0x148>)
 8000f4e:	f003 fc25 	bl	800479c <HAL_DAC_Start_DMA>
			break;
 8000f52:	bf00      	nop
	}
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	20000bea 	.word	0x20000bea
 8000f64:	20000d14 	.word	0x20000d14
 8000f68:	200003e4 	.word	0x200003e4
 8000f6c:	200005c4 	.word	0x200005c4
 8000f70:	20000024 	.word	0x20000024
 8000f74:	20000204 	.word	0x20000204
 8000f78:	200007a4 	.word	0x200007a4
 8000f7c:	20000984 	.word	0x20000984

08000f80 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	return eNewOutMode;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <FuncO_GetOutputMode+0x14>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000bea 	.word	0x20000bea

08000f98 <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(TIM1->CNT)
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <GO_ModifyOutput+0x1c8>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b1f      	cmp	r3, #31
 8000fa2:	f200 80db 	bhi.w	800115c <GO_ModifyOutput+0x1c4>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <GO_ModifyOutput+0x14>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	0800102d 	.word	0x0800102d
 8000fb0:	0800102d 	.word	0x0800102d
 8000fb4:	0800102d 	.word	0x0800102d
 8000fb8:	0800102d 	.word	0x0800102d
 8000fbc:	08001053 	.word	0x08001053
 8000fc0:	08001053 	.word	0x08001053
 8000fc4:	08001053 	.word	0x08001053
 8000fc8:	08001053 	.word	0x08001053
 8000fcc:	08001079 	.word	0x08001079
 8000fd0:	08001079 	.word	0x08001079
 8000fd4:	08001079 	.word	0x08001079
 8000fd8:	08001079 	.word	0x08001079
 8000fdc:	0800109f 	.word	0x0800109f
 8000fe0:	0800109f 	.word	0x0800109f
 8000fe4:	0800109f 	.word	0x0800109f
 8000fe8:	0800109f 	.word	0x0800109f
 8000fec:	080010c5 	.word	0x080010c5
 8000ff0:	080010c5 	.word	0x080010c5
 8000ff4:	080010c5 	.word	0x080010c5
 8000ff8:	080010c5 	.word	0x080010c5
 8000ffc:	080010eb 	.word	0x080010eb
 8001000:	080010eb 	.word	0x080010eb
 8001004:	080010eb 	.word	0x080010eb
 8001008:	080010eb 	.word	0x080010eb
 800100c:	08001111 	.word	0x08001111
 8001010:	08001111 	.word	0x08001111
 8001014:	08001111 	.word	0x08001111
 8001018:	08001111 	.word	0x08001111
 800101c:	08001137 	.word	0x08001137
 8001020:	08001137 	.word	0x08001137
 8001024:	08001137 	.word	0x08001137
 8001028:	08001137 	.word	0x08001137
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	484c      	ldr	r0, [pc, #304]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001032:	f004 fbb9 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	484b      	ldr	r0, [pc, #300]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800103c:	f004 fbb4 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4848      	ldr	r0, [pc, #288]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001046:	f004 fbaf 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 800104a:	4b48      	ldr	r3, [pc, #288]	; (800116c <GO_ModifyOutput+0x1d4>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e084      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4843      	ldr	r0, [pc, #268]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001058:	f004 fba6 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2120      	movs	r1, #32
 8001060:	4841      	ldr	r0, [pc, #260]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001062:	f004 fba1 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	483f      	ldr	r0, [pc, #252]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800106c:	f004 fb9c 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
			break;
 8001076:	e071      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	4839      	ldr	r0, [pc, #228]	; (8001164 <GO_ModifyOutput+0x1cc>)
 800107e:	f004 fb93 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	4838      	ldr	r0, [pc, #224]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001088:	f004 fb8e 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4835      	ldr	r0, [pc, #212]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001092:	f004 fb89 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001098:	2202      	movs	r2, #2
 800109a:	701a      	strb	r2, [r3, #0]
			break;
 800109c:	e05e      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2101      	movs	r1, #1
 80010a2:	4830      	ldr	r0, [pc, #192]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010a4:	f004 fb80 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010ae:	f004 fb7b 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	482c      	ldr	r0, [pc, #176]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010b8:	f004 fb76 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <GO_ModifyOutput+0x1d4>)
 80010be:	2203      	movs	r2, #3
 80010c0:	701a      	strb	r2, [r3, #0]
			break;
 80010c2:	e04b      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	4826      	ldr	r0, [pc, #152]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010ca:	f004 fb6d 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010d4:	f004 fb68 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2110      	movs	r1, #16
 80010dc:	4822      	ldr	r0, [pc, #136]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010de:	f004 fb63 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <GO_ModifyOutput+0x1d4>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	701a      	strb	r2, [r3, #0]
			break;
 80010e8:	e038      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	481d      	ldr	r0, [pc, #116]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010f0:	f004 fb5a 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010fa:	f004 fb55 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2110      	movs	r1, #16
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001104:	f004 fb50 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <GO_ModifyOutput+0x1d4>)
 800110a:	2205      	movs	r2, #5
 800110c:	701a      	strb	r2, [r3, #0]
			break;
 800110e:	e025      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001116:	f004 fb47 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2120      	movs	r1, #32
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001120:	f004 fb42 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800112a:	f004 fb3d 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001130:	2206      	movs	r2, #6
 8001132:	701a      	strb	r2, [r3, #0]
			break;
 8001134:	e012      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2101      	movs	r1, #1
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <GO_ModifyOutput+0x1cc>)
 800113c:	f004 fb34 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2120      	movs	r1, #32
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001146:	f004 fb2f 	bl	80057a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001150:	f004 fb2a 	bl	80057a8 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001156:	2207      	movs	r2, #7
 8001158:	701a      	strb	r2, [r3, #0]
			break;
 800115a:	bf00      	nop
	}

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40012c00 	.word	0x40012c00
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	20000008 	.word	0x20000008

08001170 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <GO_GetOutputGain+0x14>)
 8001176:	781b      	ldrb	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2220      	movs	r2, #32
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 f87b 	bl	800929c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011ce:	2204      	movs	r2, #4
 80011d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC1_Init+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	4817      	ldr	r0, [pc, #92]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001212:	f001 ffc1 	bl	8003198 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800121c:	f000 ff3a 	bl	8002094 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_ADC1_Init+0xe8>)
 800122c:	f002 fd4a 	bl	8003cc4 <HAL_ADCEx_MultiModeConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001236:	f000 ff2d 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ADC1_Init+0xec>)
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	237f      	movs	r3, #127	; 0x7f
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124a:	2304      	movs	r3, #4
 800124c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001258:	f002 f95e 	bl	8003518 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001262:	f000 ff17 	bl	8002094 <Error_Handler>
  }

}
 8001266:	bf00      	nop
 8001268:	3730      	adds	r7, #48	; 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000c10 	.word	0x20000c10
 8001274:	0c900008 	.word	0x0c900008

08001278 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d14f      	bne.n	800133a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f004 f8c8 	bl	8005474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_ADC_MspInit+0xd4>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012ec:	2205      	movs	r2, #5
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 800130c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001310:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001314:	2220      	movs	r2, #32
 8001316:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131e:	480a      	ldr	r0, [pc, #40]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001320:	f003 fddc 	bl	8004edc <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800132a:	f000 feb3 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	20000c7c 	.word	0x20000c7c
 800134c:	40020008 	.word	0x40020008

08001350 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_COMP1_Init+0x44>)
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MX_COMP1_Init+0x48>)
 8001358:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_COMP1_Init+0x44>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_COMP1_Init+0x44>)
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <MX_COMP1_Init+0x4c>)
 8001364:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_COMP1_Init+0x44>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_COMP1_Init+0x44>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_COMP1_Init+0x44>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_COMP1_Init+0x44>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_COMP1_Init+0x44>)
 8001380:	f002 fef4 	bl	800416c <HAL_COMP_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800138a:	f000 fe83 	bl	8002094 <Error_Handler>
  }

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000cdc 	.word	0x20000cdc
 8001398:	40010200 	.word	0x40010200
 800139c:	00800030 	.word	0x00800030

080013a0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_COMP_MspInit+0x5c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d118      	bne.n	80013f4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f004 f840 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40010200 	.word	0x40010200
 8001400:	40021000 	.word	0x40021000

08001404 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f007 ff43 	bl	800929c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_DAC1_Init+0x8c>)
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <MX_DAC1_Init+0x90>)
 800141a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <MX_DAC1_Init+0x8c>)
 800141e:	f003 f948 	bl	80046b2 <HAL_DAC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001428:	f000 fe34 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800142c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800143e:	2306      	movs	r3, #6
 8001440:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_DAC1_Init+0x8c>)
 800145a:	f003 fb09 	bl	8004a70 <HAL_DAC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8001464:	f000 fe16 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	2210      	movs	r2, #16
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_DAC1_Init+0x8c>)
 8001478:	f003 fafa 	bl	8004a70 <HAL_DAC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8001482:	f000 fe07 	bl	8002094 <Error_Handler>
  }

}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	; 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000d14 	.word	0x20000d14
 8001494:	50000800 	.word	0x50000800

08001498 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 fef9 	bl	800929c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014ac:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_DAC2_Init+0x70>)
 80014ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014b2:	f003 f8fe 	bl	80046b2 <HAL_DAC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80014bc:	f000 fdea 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80014c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014c4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80014d2:	2306      	movs	r3, #6
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014ee:	f003 fabf 	bl	8004a70 <HAL_DAC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80014f8:	f000 fdcc 	bl	8002094 <Error_Handler>
  }

}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000d00 	.word	0x20000d00
 8001508:	50000c00 	.word	0x50000c00

0800150c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a56      	ldr	r2, [pc, #344]	; (8001684 <HAL_DAC_MspInit+0x178>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d150      	bne.n	80015d0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f003 ff7e 	bl	8005474 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_DAC_MspInit+0x180>)
 800157a:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_DAC_MspInit+0x184>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001580:	2206      	movs	r2, #6
 8001582:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001586:	2210      	movs	r2, #16
 8001588:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_DAC_MspInit+0x180>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80015b2:	4836      	ldr	r0, [pc, #216]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015b4:	f003 fc92 	bl	8004edc <HAL_DMA_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80015be:	f000 fd69 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015ce:	e054      	b.n	800167a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_DAC_MspInit+0x188>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d14f      	bne.n	800167a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f003 ff28 	bl	8005474 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_DAC_MspInit+0x190>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800162c:	2229      	movs	r2, #41	; 0x29
 800162e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001632:	2210      	movs	r2, #16
 8001634:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001660:	f003 fc3c 	bl	8004edc <HAL_DMA_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800166a:	f000 fd13 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6293      	str	r3, [r2, #40]	; 0x28
}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	50000800 	.word	0x50000800
 8001688:	40021000 	.word	0x40021000
 800168c:	20000d28 	.word	0x20000d28
 8001690:	4002001c 	.word	0x4002001c
 8001694:	50000c00 	.word	0x50000c00
 8001698:	20000d88 	.word	0x20000d88
 800169c:	40020030 	.word	0x40020030

080016a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_DMA_Init+0x70>)
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <MX_DMA_Init+0x70>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6493      	str	r3, [r2, #72]	; 0x48
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_DMA_Init+0x70>)
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_DMA_Init+0x70>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_DMA_Init+0x70>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6493      	str	r3, [r2, #72]	; 0x48
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_DMA_Init+0x70>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2101      	movs	r1, #1
 80016da:	200b      	movs	r0, #11
 80016dc:	f002 ffb5 	bl	800464a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e0:	200b      	movs	r0, #11
 80016e2:	f002 ffcc 	bl	800467e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	200c      	movs	r0, #12
 80016ec:	f002 ffad 	bl	800464a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f0:	200c      	movs	r0, #12
 80016f2:	f002 ffc4 	bl	800467e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	200d      	movs	r0, #13
 80016fc:	f002 ffa5 	bl	800464a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001700:	200d      	movs	r0, #13
 8001702:	f002 ffbc 	bl	800467e <HAL_NVIC_EnableIRQ>

}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <update_dc_bias_sweep+0x88>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <update_dc_bias_sweep+0x1a>
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e005      	b.n	800173a <update_dc_bias_sweep+0x26>
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001738:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <update_dc_bias_sweep+0x3e>
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <update_dc_bias_sweep+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e002      	b.n	8001758 <update_dc_bias_sweep+0x44>
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <update_dc_bias_sweep+0x52>
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <update_dc_bias_sweep+0x88>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176e:	d302      	bcc.n	8001776 <update_dc_bias_sweep+0x62>
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <update_dc_bias_sweep+0x88>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2108      	movs	r1, #8
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f004 f810 	bl	80057a8 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <update_dc_bias_sweep+0x94>)
 8001792:	f003 f91b 	bl	80049cc <HAL_DAC_SetValue>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000bec 	.word	0x20000bec
 80017a4:	20000bf0 	.word	0x20000bf0
 80017a8:	20000d14 	.word	0x20000d14

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <LL_SYSCFG_SetEXTISource+0x5c>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	43db      	mvns	r3, r3
 80018de:	ea02 0103 	and.w	r1, r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	409a      	lsls	r2, r3
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <LL_SYSCFG_SetEXTISource+0x5c>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	430a      	orrs	r2, r1
 800190a:	3302      	adds	r3, #2
 800190c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40010000 	.word	0x40010000

08001920 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	613b      	str	r3, [r7, #16]
  return result;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2103      	movs	r1, #3
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	401a      	ands	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	61bb      	str	r3, [r7, #24]
  return result;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800197e:	b480      	push	{r7}
 8001980:	b089      	sub	sp, #36	; 0x24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	613b      	str	r3, [r7, #16]
  return result;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2103      	movs	r1, #3
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	61bb      	str	r3, [r7, #24]
  return result;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	60da      	str	r2, [r3, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3724      	adds	r7, #36	; 0x24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000

08001a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f7ff ffd4 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001a50:	2020      	movs	r0, #32
 8001a52:	f7ff ffd1 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff ffce 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff ffcb 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001a62:	2108      	movs	r1, #8
 8001a64:	48d3      	ldr	r0, [pc, #844]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a66:	f7ff ffb9 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f7ff ffb4 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001a74:	2110      	movs	r1, #16
 8001a76:	48cf      	ldr	r0, [pc, #828]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a78:	f7ff ffb0 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	48cd      	ldr	r0, [pc, #820]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a80:	f7ff ffac 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001a84:	2101      	movs	r1, #1
 8001a86:	48cc      	ldr	r0, [pc, #816]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001a88:	f7ff ffa8 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	48c8      	ldr	r0, [pc, #800]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a92:	f7ff ffa3 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9a:	48c6      	ldr	r0, [pc, #792]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a9c:	f7ff ff9e 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	48c5      	ldr	r0, [pc, #788]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001aa4:	f7ff ff9a 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	48c3      	ldr	r0, [pc, #780]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001aac:	f7ff ff96 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab4:	48c0      	ldr	r0, [pc, #768]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001ab6:	f7ff ff91 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001aba:	49c0      	ldr	r1, [pc, #768]	; (8001dbc <MX_GPIO_Init+0x394>)
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff feff 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001ac2:	49bf      	ldr	r1, [pc, #764]	; (8001dc0 <MX_GPIO_Init+0x398>)
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7ff fefb 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001aca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f7ff fef6 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001ad4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001ad8:	2005      	movs	r0, #5
 8001ada:	f7ff fef1 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001ade:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7ff feec 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f006 faa5 	bl	8008054 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fa94 	bl	8008054 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 fa84 	bl	8008054 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fa74 	bl	8008054 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fa64 	bl	8008054 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b92:	4888      	ldr	r0, [pc, #544]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001b94:	f7ff fef3 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	4885      	ldr	r0, [pc, #532]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001ba0:	f7ff feed 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4886      	ldr	r0, [pc, #536]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001baa:	f7ff fee8 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4884      	ldr	r0, [pc, #528]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001bb4:	f7ff fee3 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2104      	movs	r1, #4
 8001bbc:	487d      	ldr	r0, [pc, #500]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bbe:	f7ff fede 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc8:	487a      	ldr	r0, [pc, #488]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bca:	f7ff fea9 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd4:	4877      	ldr	r0, [pc, #476]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bd6:	f7ff fea3 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4879      	ldr	r0, [pc, #484]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001be0:	f7ff fe9e 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	4876      	ldr	r0, [pc, #472]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001bea:	f7ff fe99 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4870      	ldr	r0, [pc, #448]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bf4:	f7ff fe94 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4868      	ldr	r0, [pc, #416]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c12:	f006 fc12 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001c16:	2308      	movs	r3, #8
 8001c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f006 fc02 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001c36:	2310      	movs	r3, #16
 8001c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4859      	ldr	r0, [pc, #356]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c50:	f006 fbf3 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001c54:	2320      	movs	r3, #32
 8001c56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4851      	ldr	r0, [pc, #324]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c6e:	f006 fbe4 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001c72:	2301      	movs	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c76:	2301      	movs	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	484b      	ldr	r0, [pc, #300]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001c8c:	f006 fbd5 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c96:	2301      	movs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4842      	ldr	r0, [pc, #264]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001cac:	f006 fbc5 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483a      	ldr	r0, [pc, #232]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001ccc:	f006 fbb5 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4833      	ldr	r0, [pc, #204]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001cea:	f006 fba6 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	482c      	ldr	r0, [pc, #176]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001d08:	f006 fb97 	bl	800843a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001d28:	f006 fb87 	bl	800843a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d2c:	f7ff fd3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fd8e 	bl	8001858 <NVIC_EncodePriority>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2006      	movs	r0, #6
 8001d42:	f7ff fd5f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f7ff fd3e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d4c:	f7ff fd2e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fd7e 	bl	8001858 <NVIC_EncodePriority>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2007      	movs	r0, #7
 8001d62:	f7ff fd4f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001d66:	2007      	movs	r0, #7
 8001d68:	f7ff fd2e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d6c:	f7ff fd1e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fd6e 	bl	8001858 <NVIC_EncodePriority>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff fd3f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001d86:	2008      	movs	r0, #8
 8001d88:	f7ff fd1e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d8c:	f7ff fd0e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd5e 	bl	8001858 <NVIC_EncodePriority>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	2028      	movs	r0, #40	; 0x28
 8001da2:	f7ff fd2f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001da6:	2028      	movs	r0, #40	; 0x28
 8001da8:	f7ff fd0e 	bl	80017c8 <__NVIC_EnableIRQ>

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e009      	b.n	8001dc8 <MX_GPIO_Init+0x3a0>
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	0f000003 	.word	0x0f000003
 8001dc0:	f0000003 	.word	0xf0000003
 8001dc4:	48001400 	.word	0x48001400
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001de8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001dec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001df4:	e000      	b.n	8001df8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001df6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f9      	beq.n	8001df6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffc7 	bl	8001dcc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x16>
  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	// do something
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e72:	f000 ff3c 	bl	8002cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e76:	f000 f89f 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7a:	f7ff fdd5 	bl	8001a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e7e:	f7ff fc0f 	bl	80016a0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001e82:	f7ff fabf 	bl	8001404 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001e86:	f7ff fb07 	bl	8001498 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001e8a:	f7ff f97d 	bl	8001188 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001e8e:	f7ff fa5f 	bl	8001350 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001e92:	f000 fc23 	bl	80026dc <MX_TIM2_Init>
  MX_TIM17_Init();
 8001e96:	f000 fdbb 	bl	8002a10 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001e9a:	f000 f939 	bl	8002110 <MX_SPI3_Init>
  MX_RNG_Init();
 8001e9e:	f000 f929 	bl	80020f4 <MX_RNG_Init>
  MX_TIM1_Init();
 8001ea2:	f000 fbab 	bl	80025fc <MX_TIM1_Init>
  MX_TIM8_Init();
 8001ea6:	f000 fcd3 	bl	8002850 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001eaa:	f000 fd8b 	bl	80029c4 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001eae:	f000 fd37 	bl	8002920 <MX_TIM15_Init>
  MX_TIM5_Init();
 8001eb2:	f000 fc7d 	bl	80027b0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2378      	movs	r3, #120	; 0x78
 8001ebc:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <main+0x11c>)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4832      	ldr	r0, [pc, #200]	; (8001f8c <main+0x120>)
 8001ec2:	f002 fc6b 	bl	800479c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	4830      	ldr	r0, [pc, #192]	; (8001f8c <main+0x120>)
 8001eca:	f002 fc14 	bl	80046f6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2378      	movs	r3, #120	; 0x78
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <main+0x124>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	482e      	ldr	r0, [pc, #184]	; (8001f94 <main+0x128>)
 8001eda:	f002 fc5f 	bl	800479c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001ede:	482e      	ldr	r0, [pc, #184]	; (8001f98 <main+0x12c>)
 8001ee0:	f004 ffde 	bl	8006ea0 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f003 fc5c 	bl	80057a8 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4829      	ldr	r0, [pc, #164]	; (8001f9c <main+0x130>)
 8001ef6:	f003 fc57 	bl	80057a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2120      	movs	r1, #32
 8001efe:	4828      	ldr	r0, [pc, #160]	; (8001fa0 <main+0x134>)
 8001f00:	f003 fc52 	bl	80057a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2110      	movs	r1, #16
 8001f08:	4825      	ldr	r0, [pc, #148]	; (8001fa0 <main+0x134>)
 8001f0a:	f003 fc4d 	bl	80057a8 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <main+0x134>)
 8001f16:	f003 fc47 	bl	80057a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <main+0x134>)
 8001f22:	f003 fc41 	bl	80057a8 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2108      	movs	r1, #8
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <main+0x134>)
 8001f2c:	f003 fc3c 	bl	80057a8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4a:	f043 0305 	orr.w	r3, r3, #5
 8001f4e:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001f50:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <main+0x138>)
 8001f52:	f004 ffd3 	bl	8006efc <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <main+0x13c>)
 8001f58:	f004 ffa2 	bl	8006ea0 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <main+0x140>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <main+0x140>)
 8001f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001f6c:	f7fe f9a8 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8001f70:	f7fe f9b4 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8001f74:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <main+0x144>)
 8001f76:	f004 ffc1 	bl	8006efc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <main+0x148>)
 8001f7c:	f004 ff90 	bl	8006ea0 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8001f80:	f7fe fd1a 	bl	80009b8 <EM_ProcessEvent>
 8001f84:	e7fc      	b.n	8001f80 <main+0x114>
 8001f86:	bf00      	nop
 8001f88:	200003e4 	.word	0x200003e4
 8001f8c:	20000d14 	.word	0x20000d14
 8001f90:	200007a4 	.word	0x200007a4
 8001f94:	20000d00 	.word	0x20000d00
 8001f98:	20000e4c 	.word	0x20000e4c
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	20000fc8 	.word	0x20000fc8
 8001fa8:	20000f7c 	.word	0x20000f7c
 8001fac:	40001000 	.word	0x40001000
 8001fb0:	20000e98 	.word	0x20000e98
 8001fb4:	20000f30 	.word	0x20000f30

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a8      	sub	sp, #160	; 0xa0
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 f968 	bl	800929c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2254      	movs	r2, #84	; 0x54
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 f95a 	bl	800929c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f003 fbf5 	bl	80057d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001fee:	2322      	movs	r3, #34	; 0x22
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002002:	2302      	movs	r3, #2
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8002014:	232a      	movs	r3, #42	; 0x2a
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8002020:	2304      	movs	r3, #4
 8002022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fc75 	bl	8005920 <HAL_RCC_OscConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800203c:	f000 f82a 	bl	8002094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002040:	230f      	movs	r3, #15
 8002042:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002044:	2303      	movs	r3, #3
 8002046:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8002054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002058:	2108      	movs	r1, #8
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff78 	bl	8005f50 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002066:	f000 f815 	bl	8002094 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800206a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800206e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002074:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	463b      	mov	r3, r7
 800207c:	4618      	mov	r0, r3
 800207e:	f004 f957 	bl	8006330 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002088:	f000 f804 	bl	8002094 <Error_Handler>
  }
}
 800208c:	bf00      	nop
 800208e:	37a0      	adds	r7, #160	; 0xa0
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_AHB2_GRP1_EnableClock>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000

080020f4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80020f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020fc:	f7ff ffe2 	bl	80020c4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <MX_RNG_Init+0x18>)
 8002102:	f7ff ffce 	bl	80020a2 <LL_RNG_Enable>

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	50060800 	.word	0x50060800

08002110 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_SPI3_Init+0x74>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <MX_SPI3_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_SPI3_Init+0x74>)
 800211c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002120:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_SPI3_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_SPI3_Init+0x74>)
 800212a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800212e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_SPI3_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_SPI3_Init+0x74>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_SPI3_Init+0x74>)
 800213e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002142:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_SPI3_Init+0x74>)
 8002146:	2210      	movs	r2, #16
 8002148:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_SPI3_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_SPI3_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_SPI3_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_SPI3_Init+0x74>)
 800215e:	2207      	movs	r2, #7
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_SPI3_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_SPI3_Init+0x74>)
 800216a:	2208      	movs	r2, #8
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_SPI3_Init+0x74>)
 8002170:	f004 fb2a 	bl	80067c8 <HAL_SPI_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800217a:	f7ff ff8b 	bl	8002094 <Error_Handler>
  }

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000de8 	.word	0x20000de8
 8002188:	40003c00 	.word	0x40003c00

0800218c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_SPI_MspInit+0x7c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d128      	bne.n	8002200 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f0:	2306      	movs	r3, #6
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_SPI_MspInit+0x84>)
 80021fc:	f003 f93a 	bl	8005474 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40003c00 	.word	0x40003c00
 800220c:	40021000 	.word	0x40021000
 8002210:	48000800 	.word	0x48000800

08002214 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002222:	6093      	str	r3, [r2, #8]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x44>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_MspInit+0x44>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6613      	str	r3, [r2, #96]	; 0x60
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_MspInit+0x44>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x44>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x44>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x44>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800226a:	f7ff ffd3 	bl	8002214 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000

0800227c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d101      	bne.n	8002296 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40010400 	.word	0x40010400

080022a8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6153      	str	r3, [r2, #20]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010400 	.word	0x40010400

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <MemManage_Handler+0x4>

080022e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <UsageFault_Handler+0x4>

080022ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f000 fd3a 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 8002328:	2004      	movs	r0, #4
 800232a:	f7fe fd07 	bl	8000d3c <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ffa4 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ffb4 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 8002348:	2002      	movs	r0, #2
 800234a:	f7fe fcf7 	bl	8000d3c <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff ff94 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff ffa4 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8002368:	2006      	movs	r0, #6
 800236a:	f7fe fce7 	bl	8000d3c <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800236e:	2004      	movs	r0, #4
 8002370:	f7ff ff84 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800237a:	2004      	movs	r0, #4
 800237c:	f7ff ff94 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel1_IRQHandler+0x10>)
 800238a:	f002 ff23 	bl	80051d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000c7c 	.word	0x20000c7c

08002398 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA1_Channel2_IRQHandler+0x10>)
 800239e:	f002 ff19 	bl	80051d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000d28 	.word	0x20000d28

080023ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel3_IRQHandler+0x10>)
 80023b2:	f002 ff0f 	bl	80051d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000d88 	.word	0x20000d88

080023c0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 80023c4:	f7fd ffa8 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d305      	bcc.n	80023e0 <TIM1_BRK_TIM15_IRQHandler+0x20>
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80023da:	8812      	ldrh	r2, [r2, #0]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d902      	bls.n	80023e6 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 80023e0:	2005      	movs	r0, #5
 80023e2:	f7fe fcab 	bl	8000d3c <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80023ee:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f0:	4805      	ldr	r0, [pc, #20]	; (8002408 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80023f2:	f004 fe8e 	bl	8007112 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023f8:	f004 fe8b 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40012c00 	.word	0x40012c00
 8002404:	20000bf4 	.word	0x20000bf4
 8002408:	20000f7c 	.word	0x20000f7c
 800240c:	20000e98 	.word	0x20000e98

08002410 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8002414:	4a05      	ldr	r2, [pc, #20]	; (800242c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4805      	ldr	r0, [pc, #20]	; (8002434 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800241e:	f004 fe78 	bl	8007112 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002424:	f004 fe75 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000c04 	.word	0x20000c04
 8002430:	0800a4bc 	.word	0x0800a4bc
 8002434:	20000f7c 	.word	0x20000f7c
 8002438:	20001014 	.word	0x20001014

0800243c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8002440:	f7ff f968 	bl	8001714 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002446:	f004 fe64 	bl	8007112 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800244c:	f004 fe61 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000f7c 	.word	0x20000f7c
 8002458:	20000ee4 	.word	0x20000ee4

0800245c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <TIM2_IRQHandler+0x10>)
 8002462:	f004 fe56 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000fc8 	.word	0x20000fc8

08002470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	4815      	ldr	r0, [pc, #84]	; (80024d0 <EXTI15_10_IRQHandler+0x60>)
 800247a:	f003 f97d 	bl	8005778 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002484:	2003      	movs	r0, #3
 8002486:	f7fe fc59 	bl	8000d3c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800248a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248e:	4810      	ldr	r0, [pc, #64]	; (80024d0 <EXTI15_10_IRQHandler+0x60>)
 8002490:	f003 f972 	bl	8005778 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 800249a:	2001      	movs	r0, #1
 800249c:	f7fe fc4e 	bl	8000d3c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80024a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a4:	f7ff feea 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80024ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024b2:	f7ff fef9 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80024b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024ba:	f7ff fedf 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80024c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024c8:	f7ff feee 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	48000800 	.word	0x48000800

080024d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00a      	b.n	80024fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024e6:	f3af 8000 	nop.w
 80024ea:	4601      	mov	r1, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf0      	blt.n	80024e6 <_read+0x12>
	}

return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:
	}
	return len;
}

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
	return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002536:	605a      	str	r2, [r3, #4]
	return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
	return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x50>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x16>
		heap_end = &end;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <_sbrk+0x50>)
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <_sbrk+0x54>)
 800258c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <_sbrk+0x50>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <_sbrk+0x50>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	466a      	mov	r2, sp
 800259e:	4293      	cmp	r3, r2
 80025a0:	d907      	bls.n	80025b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025a2:	f006 fe51 	bl	8009248 <__errno>
 80025a6:	4602      	mov	r2, r0
 80025a8:	230c      	movs	r3, #12
 80025aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b0:	e006      	b.n	80025c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <_sbrk+0x50>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <_sbrk+0x50>)
 80025bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000bf8 	.word	0x20000bf8
 80025cc:	20001068 	.word	0x20001068

080025d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <SystemInit+0x28>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <SystemInit+0x28>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SystemInit+0x28>)
 80025e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ea:	609a      	str	r2, [r3, #8]
#endif
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b09a      	sub	sp, #104	; 0x68
 8002600:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002602:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f006 fe46 	bl	800929c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2234      	movs	r2, #52	; 0x34
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f006 fe3a 	bl	800929c <memset>

  htim1.Instance = TIM1;
 8002628:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <MX_TIM1_Init+0xd8>)
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <MX_TIM1_Init+0xdc>)
 800262c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <MX_TIM1_Init+0xd8>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <MX_TIM1_Init+0xd8>)
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <MX_TIM1_Init+0xd8>)
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002640:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <MX_TIM1_Init+0xd8>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MX_TIM1_Init+0xd8>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <MX_TIM1_Init+0xd8>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002654:	2303      	movs	r3, #3
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002658:	2300      	movs	r3, #0
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800265c:	2301      	movs	r3, #1
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002660:	2300      	movs	r3, #0
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002668:	2300      	movs	r3, #0
 800266a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800266c:	2301      	movs	r3, #1
 800266e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002678:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800267c:	4619      	mov	r1, r3
 800267e:	4815      	ldr	r0, [pc, #84]	; (80026d4 <MX_TIM1_Init+0xd8>)
 8002680:	f004 fca1 	bl	8006fc6 <HAL_TIM_Encoder_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800268a:	f7ff fd03 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800269a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <MX_TIM1_Init+0xd8>)
 80026a2:	f005 fa19 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80026ac:	f7ff fcf2 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026b4:	2300      	movs	r3, #0
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_TIM1_Init+0xd8>)
 80026be:	f005 faa1 	bl	8007c04 <HAL_TIMEx_ConfigBreakDeadTime>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80026c8:	f7ff fce4 	bl	8002094 <Error_Handler>
  }

}
 80026cc:	bf00      	nop
 80026ce:	3768      	adds	r7, #104	; 0x68
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000f7c 	.word	0x20000f7c
 80026d8:	40012c00 	.word	0x40012c00

080026dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <MX_TIM2_Init+0xd0>)
 800270c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002714:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <MX_TIM2_Init+0xd0>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <MX_TIM2_Init+0xd0>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002734:	481d      	ldr	r0, [pc, #116]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002736:	f004 fb5c 	bl	8006df2 <HAL_TIM_Base_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002740:	f7ff fca8 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002748:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800274a:	f107 0320 	add.w	r3, r7, #32
 800274e:	4619      	mov	r1, r3
 8002750:	4816      	ldr	r0, [pc, #88]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002752:	f004 fe5d 	bl	8007410 <HAL_TIM_ConfigClockSource>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800275c:	f7ff fc9a 	bl	8002094 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002760:	2305      	movs	r3, #5
 8002762:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002764:	2350      	movs	r3, #80	; 0x50
 8002766:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	4619      	mov	r1, r3
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002778:	f004 ff3a 	bl	80075f0 <HAL_TIM_SlaveConfigSynchro>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002782:	f7ff fc87 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800278e:	463b      	mov	r3, r7
 8002790:	4619      	mov	r1, r3
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <MX_TIM2_Init+0xd0>)
 8002794:	f005 f9a0 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800279e:	f7ff fc79 	bl	8002094 <Error_Handler>
  }

}
 80027a2:	bf00      	nop
 80027a4:	3730      	adds	r7, #48	; 0x30
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000fc8 	.word	0x20000fc8

080027b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MX_TIM5_Init+0x98>)
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <MX_TIM5_Init+0x9c>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_TIM5_Init+0x98>)
 80027d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_TIM5_Init+0x98>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <MX_TIM5_Init+0x98>)
 80027e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <MX_TIM5_Init+0x98>)
 80027ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_TIM5_Init+0x98>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027f8:	4813      	ldr	r0, [pc, #76]	; (8002848 <MX_TIM5_Init+0x98>)
 80027fa:	f004 fafa 	bl	8006df2 <HAL_TIM_Base_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002804:	f7ff fc46 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <MX_TIM5_Init+0x98>)
 8002816:	f004 fdfb 	bl	8007410 <HAL_TIM_ConfigClockSource>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002820:	f7ff fc38 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <MX_TIM5_Init+0x98>)
 8002832:	f005 f951 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800283c:	f7ff fc2a 	bl	8002094 <Error_Handler>
  }

}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000f30 	.word	0x20000f30
 800284c:	40000c00 	.word	0x40000c00

08002850 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b094      	sub	sp, #80	; 0x50
 8002854:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002870:	463b      	mov	r3, r7
 8002872:	2234      	movs	r2, #52	; 0x34
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f006 fd10 	bl	800929c <memset>

  htim8.Instance = TIM8;
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <MX_TIM8_Init+0xc8>)
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <MX_TIM8_Init+0xcc>)
 8002880:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002882:	4b25      	ldr	r3, [pc, #148]	; (8002918 <MX_TIM8_Init+0xc8>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <MX_TIM8_Init+0xc8>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <MX_TIM8_Init+0xc8>)
 8002890:	2201      	movs	r2, #1
 8002892:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <MX_TIM8_Init+0xc8>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <MX_TIM8_Init+0xc8>)
 800289c:	2200      	movs	r2, #0
 800289e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <MX_TIM8_Init+0xc8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <MX_TIM8_Init+0xc8>)
 80028a8:	f004 faa3 	bl	8006df2 <HAL_TIM_Base_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80028b2:	f7ff fbef 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80028bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028c0:	4619      	mov	r1, r3
 80028c2:	4815      	ldr	r0, [pc, #84]	; (8002918 <MX_TIM8_Init+0xc8>)
 80028c4:	f004 fda4 	bl	8007410 <HAL_TIM_ConfigClockSource>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80028ce:	f7ff fbe1 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d2:	2320      	movs	r3, #32
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_TIM8_Init+0xc8>)
 80028e6:	f005 f8f7 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80028f0:	f7ff fbd0 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_TIM8_Init+0xc8>)
 8002902:	f005 f97f 	bl	8007c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800290c:	f7ff fbc2 	bl	8002094 <Error_Handler>
  }

}
 8002910:	bf00      	nop
 8002912:	3750      	adds	r7, #80	; 0x50
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000e4c 	.word	0x20000e4c
 800291c:	40013400 	.word	0x40013400

08002920 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <MX_TIM15_Init+0x9c>)
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <MX_TIM15_Init+0xa0>)
 8002942:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <MX_TIM15_Init+0x9c>)
 8002946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <MX_TIM15_Init+0x9c>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <MX_TIM15_Init+0x9c>)
 8002954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002958:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <MX_TIM15_Init+0x9c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <MX_TIM15_Init+0x9c>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <MX_TIM15_Init+0x9c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <MX_TIM15_Init+0x9c>)
 800296e:	f004 fa40 	bl	8006df2 <HAL_TIM_Base_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002978:	f7ff fb8c 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4619      	mov	r1, r3
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <MX_TIM15_Init+0x9c>)
 800298a:	f004 fd41 	bl	8007410 <HAL_TIM_ConfigClockSource>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002994:	f7ff fb7e 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_TIM15_Init+0x9c>)
 80029a6:	f005 f897 	bl	8007ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80029b0:	f7ff fb70 	bl	8002094 <Error_Handler>
  }

}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000e98 	.word	0x20000e98
 80029c0:	40014000 	.word	0x40014000

080029c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <MX_TIM16_Init+0x48>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80029e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <MX_TIM16_Init+0x44>)
 80029f6:	f004 f9fc 	bl	8006df2 <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a00:	f7ff fb48 	bl	8002094 <Error_Handler>
  }

}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20001014 	.word	0x20001014
 8002a0c:	40014400 	.word	0x40014400

08002a10 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <MX_TIM17_Init+0x48>)
 8002a18:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002a20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a40:	4804      	ldr	r0, [pc, #16]	; (8002a54 <MX_TIM17_Init+0x44>)
 8002a42:	f004 f9d6 	bl	8006df2 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002a4c:	f7ff fb22 	bl	8002094 <Error_Handler>
  }

}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000ee4 	.word	0x20000ee4
 8002a58:	40014800 	.word	0x40014800

08002a5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <HAL_TIM_Encoder_MspInit+0xac>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d13f      	bne.n	8002afe <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a88:	6613      	str	r3, [r2, #96]	; 0x60
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xb0>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4811      	ldr	r0, [pc, #68]	; (8002b10 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002aca:	f002 fcd3 	bl	8005474 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2018      	movs	r0, #24
 8002ad4:	f001 fdb9 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ad8:	2018      	movs	r0, #24
 8002ada:	f001 fdd0 	bl	800467e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	2019      	movs	r0, #25
 8002ae4:	f001 fdb1 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ae8:	2019      	movs	r0, #25
 8002aea:	f001 fdc8 	bl	800467e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2101      	movs	r1, #1
 8002af2:	201a      	movs	r0, #26
 8002af4:	f001 fda9 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002af8:	201a      	movs	r0, #26
 8002afa:	f001 fdc0 	bl	800467e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	48000800 	.word	0x48000800

08002b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d131      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b36:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b66:	2301      	movs	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b76:	2301      	movs	r3, #1
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f002 fc76 	bl	8005474 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	201c      	movs	r0, #28
 8002b8e:	f001 fd5c 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b92:	201c      	movs	r0, #28
 8002b94:	f001 fd73 	bl	800467e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002b98:	e070      	b.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3a      	ldr	r2, [pc, #232]	; (8002c88 <HAL_TIM_Base_MspInit+0x174>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10c      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	69bb      	ldr	r3, [r7, #24]
}
 8002bbc:	e05e      	b.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <HAL_TIM_Base_MspInit+0x178>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10c      	bne.n	8002be2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
}
 8002be0:	e04c      	b.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <HAL_TIM_Base_MspInit+0x17c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d114      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	2018      	movs	r0, #24
 8002c0a:	f001 fd1e 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c0e:	2018      	movs	r0, #24
 8002c10:	f001 fd35 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8002c14:	e032      	b.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_TIM_Base_MspInit+0x180>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d114      	bne.n	8002c4a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2019      	movs	r0, #25
 8002c3e:	f001 fd04 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c42:	2019      	movs	r0, #25
 8002c44:	f001 fd1b 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8002c48:	e018      	b.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_Base_MspInit+0x184>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d113      	bne.n	8002c7c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_TIM_Base_MspInit+0x170>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2101      	movs	r1, #1
 8002c70:	201a      	movs	r0, #26
 8002c72:	f001 fcea 	bl	800464a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c76:	201a      	movs	r0, #26
 8002c78:	f001 fd01 	bl	800467e <HAL_NVIC_EnableIRQ>
}
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40013400 	.word	0x40013400
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800

08002c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca2:	490e      	ldr	r1, [pc, #56]	; (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ca8:	e002      	b.n	8002cb0 <LoopCopyDataInit>

08002caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cae:	3304      	adds	r3, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb4:	d3f9      	bcc.n	8002caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cb8:	4c0b      	ldr	r4, [pc, #44]	; (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cbc:	e001      	b.n	8002cc2 <LoopFillZerobss>

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc0:	3204      	adds	r2, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cc6:	f7ff fc83 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cca:	f006 fac3 	bl	8009254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7ff f8cd 	bl	8001e6c <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
  ldr   r0, =_estack
 8002cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002ce0:	0800a7b0 	.word	0x0800a7b0
  ldr r2, =_sbss
 8002ce4:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002ce8:	20001068 	.word	0x20001068

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>

08002cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f001 fc9b 	bl	8004634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f000 f80e 	bl	8002d20 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	e001      	b.n	8002d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d10:	f7ff fa90 	bl	8002234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d14:	79fb      	ldrb	r3, [r7, #7]

}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_InitTick+0x68>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_InitTick+0x6c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_InitTick+0x68>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fca6 	bl	800469a <HAL_SYSTICK_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d809      	bhi.n	8002d6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d62:	f001 fc72 	bl	800464a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_InitTick+0x70>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e007      	b.n	8002d7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e004      	b.n	8002d7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000018 	.word	0x20000018
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	20000014 	.word	0x20000014

08002d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_IncTick+0x1c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_IncTick+0x20>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <HAL_IncTick+0x1c>)
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	20001060 	.word	0x20001060
 8002db4:	20000018 	.word	0x20000018

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20001060 	.word	0x20001060

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d004      	beq.n	8002df4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_Delay+0x40>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df4:	bf00      	nop
 8002df6:	f7ff ffdf 	bl	8002db8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d8f7      	bhi.n	8002df6 <HAL_Delay+0x26>
  {
  }
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000018 	.word	0x20000018

08002e14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e7c:	b490      	push	{r4, r7}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3360      	adds	r3, #96	; 0x60
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <LL_ADC_SetOffset+0x40>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eae:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	03fff000 	.word	0x03fff000

08002ec0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ec0:	b490      	push	{r4, r7}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	461a      	mov	r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc90      	pop	{r4, r7}
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ee8:	b490      	push	{r4, r7}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc90      	pop	{r4, r7}
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f18:	b490      	push	{r4, r7}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc90      	pop	{r4, r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f48:	b490      	push	{r4, r7}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc90      	pop	{r4, r7}
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	615a      	str	r2, [r3, #20]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f9e:	b490      	push	{r4, r7}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3330      	adds	r3, #48	; 0x30
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	4413      	add	r3, r2
 8002fbc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	211f      	movs	r1, #31
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	f003 011f 	and.w	r1, r3, #31
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc90      	pop	{r4, r7}
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ff0:	b490      	push	{r4, r7}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3314      	adds	r3, #20
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0e5b      	lsrs	r3, r3, #25
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0d1b      	lsrs	r3, r3, #20
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2107      	movs	r1, #7
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0d1b      	lsrs	r3, r3, #20
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	4313      	orrs	r3, r2
 8003034:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bc90      	pop	{r4, r7}
 800303e:	4770      	bx	lr

08003040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0318 	and.w	r3, r3, #24
 8003062:	4908      	ldr	r1, [pc, #32]	; (8003084 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003064:	40d9      	lsrs	r1, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	400b      	ands	r3, r1
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	0007ffff 	.word	0x0007ffff

08003088 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6093      	str	r3, [r2, #8]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003110:	d101      	bne.n	8003116 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <LL_ADC_IsEnabled+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_IsEnabled+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d101      	bne.n	8003162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d101      	bne.n	8003188 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1ad      	b.n	800350e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe f859 	bl	8001278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff67 	bl	80030ac <LL_ADC_IsDeepPowerDownEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff4d 	bl	8003088 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff82 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff66 	bl	80030d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003208:	4b9e      	ldr	r3, [pc, #632]	; (8003484 <HAL_ADC_Init+0x2ec>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	4a9e      	ldr	r2, [pc, #632]	; (8003488 <HAL_ADC_Init+0x2f0>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003218:	e002      	b.n	8003220 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	3b01      	subs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f9      	bne.n	800321a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff66 	bl	80030fc <LL_ADC_IsInternalRegulatorEnabled>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff77 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 800325c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 8148 	bne.w	80034fc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 8144 	bne.w	80034fc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800327c:	f043 0202 	orr.w	r2, r3, #2
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff4b 	bl	8003124 <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d141      	bne.n	8003318 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_Init+0x110>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_ADC_Init+0x2f4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10f      	bne.n	80032c8 <HAL_ADC_Init+0x130>
 80032a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032ac:	f7ff ff3a 	bl	8003124 <LL_ADC_IsEnabled>
 80032b0:	4604      	mov	r4, r0
 80032b2:	4876      	ldr	r0, [pc, #472]	; (800348c <HAL_ADC_Init+0x2f4>)
 80032b4:	f7ff ff36 	bl	8003124 <LL_ADC_IsEnabled>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4323      	orrs	r3, r4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e012      	b.n	80032ee <HAL_ADC_Init+0x156>
 80032c8:	4871      	ldr	r0, [pc, #452]	; (8003490 <HAL_ADC_Init+0x2f8>)
 80032ca:	f7ff ff2b 	bl	8003124 <LL_ADC_IsEnabled>
 80032ce:	4604      	mov	r4, r0
 80032d0:	4870      	ldr	r0, [pc, #448]	; (8003494 <HAL_ADC_Init+0x2fc>)
 80032d2:	f7ff ff27 	bl	8003124 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	431c      	orrs	r4, r3
 80032da:	486f      	ldr	r0, [pc, #444]	; (8003498 <HAL_ADC_Init+0x300>)
 80032dc:	f7ff ff22 	bl	8003124 <LL_ADC_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4323      	orrs	r3, r4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_Init+0x16e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a62      	ldr	r2, [pc, #392]	; (800348c <HAL_ADC_Init+0x2f4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_ADC_Init+0x172>
 8003306:	4a65      	ldr	r2, [pc, #404]	; (800349c <HAL_ADC_Init+0x304>)
 8003308:	e000      	b.n	800330c <HAL_ADC_Init+0x174>
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_ADC_Init+0x308>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7ff fd7e 	bl	8002e14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7f5b      	ldrb	r3, [r3, #29]
 800331c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003322:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003328:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800332e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003336:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003342:	2b01      	cmp	r3, #1
 8003344:	d106      	bne.n	8003354 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	045b      	lsls	r3, r3, #17
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_ADC_Init+0x30c>)
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	430b      	orrs	r3, r1
 8003382:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fed3 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 80033a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fee0 	bl	8003170 <LL_ADC_INJ_IsConversionOngoing>
 80033b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d17f      	bne.n	80034b8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d17c      	bne.n	80034b8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033c2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033da:	f023 0302 	bic.w	r3, r3, #2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d017      	beq.n	8003420 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003408:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800340c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6911      	ldr	r1, [r2, #16]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	430b      	orrs	r3, r1
 800341a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800341e:	e013      	b.n	8003448 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800342e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003444:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d12a      	bne.n	80034a8 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800345c:	f023 0304 	bic.w	r3, r3, #4
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003474:	430a      	orrs	r2, r1
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	e019      	b.n	80034b8 <HAL_ADC_Init+0x320>
 8003484:	20000010 	.word	0x20000010
 8003488:	053e2d63 	.word	0x053e2d63
 800348c:	50000100 	.word	0x50000100
 8003490:	50000400 	.word	0x50000400
 8003494:	50000500 	.word	0x50000500
 8003498:	50000600 	.word	0x50000600
 800349c:	50000300 	.word	0x50000300
 80034a0:	50000700 	.word	0x50000700
 80034a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10c      	bne.n	80034da <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f023 010f 	bic.w	r1, r3, #15
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	e007      	b.n	80034ea <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 020f 	bic.w	r2, r2, #15
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034fa:	e007      	b.n	800350c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f043 0210 	orr.w	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800350c:	7ffb      	ldrb	r3, [r7, #31]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop

08003518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0a6      	sub	sp, #152	; 0x98
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x22>
 8003536:	2302      	movs	r3, #2
 8003538:	e38e      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x740>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fdff 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 836f 	bne.w	8003c32 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f7ff fd1c 	bl	8002f9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fded 	bl	800314a <LL_ADC_REG_IsConversionOngoing>
 8003570:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fdf9 	bl	8003170 <LL_ADC_INJ_IsConversionOngoing>
 800357e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 817b 	bne.w	8003882 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800358c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 8176 	bne.w	8003882 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800359e:	d10f      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7ff fd20 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fcdd 	bl	8002f78 <LL_ADC_SetSamplingTimeCommonConfig>
 80035be:	e00e      	b.n	80035de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f7ff fd0f 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fccd 	bl	8002f78 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d022      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6919      	ldr	r1, [r3, #16]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003610:	f7ff fc34 	bl	8002e7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	461a      	mov	r2, r3
 8003622:	f7ff fc79 	bl	8002f18 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6919      	ldr	r1, [r3, #16]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7f1b      	ldrb	r3, [r3, #28]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d102      	bne.n	800363c <HAL_ADC_ConfigChannel+0x124>
 8003636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363a:	e000      	b.n	800363e <HAL_ADC_ConfigChannel+0x126>
 800363c:	2300      	movs	r3, #0
 800363e:	461a      	mov	r2, r3
 8003640:	f7ff fc82 	bl	8002f48 <LL_ADC_SetOffsetSaturation>
 8003644:	e11d      	b.n	8003882 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fc37 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x15a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fc2c 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	e012      	b.n	8003698 <HAL_ADC_ConfigChannel+0x180>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fc21 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 800367e:	4603      	mov	r3, r0
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800368e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x198>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	e00a      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x1ae>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80036be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d106      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fc08 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fbee 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1ec>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fbe3 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	f003 021f 	and.w	r2, r3, #31
 8003702:	e010      	b.n	8003726 <HAL_ADC_ConfigChannel+0x20e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fbd8 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800371c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_ADC_ConfigChannel+0x226>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	0e9b      	lsrs	r3, r3, #26
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	e00a      	b.n	8003754 <HAL_ADC_ConfigChannel+0x23c>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800374c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	429a      	cmp	r2, r3
 8003756:	d106      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fbc1 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2102      	movs	r1, #2
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fba7 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x27a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2102      	movs	r1, #2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fb9c 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	e010      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x29c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fb91 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x2b4>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	e00a      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x2ca>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d106      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fb7a 	bl	8002ee8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2103      	movs	r1, #3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb60 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x308>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2103      	movs	r1, #3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb55 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	f003 021f 	and.w	r2, r3, #31
 800381e:	e010      	b.n	8003842 <HAL_ADC_ConfigChannel+0x32a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2103      	movs	r1, #3
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb4a 	bl	8002ec0 <LL_ADC_GetOffsetChannel>
 800382c:	4603      	mov	r3, r0
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <HAL_ADC_ConfigChannel+0x342>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0e9b      	lsrs	r3, r3, #26
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	e00a      	b.n	8003870 <HAL_ADC_ConfigChannel+0x358>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	429a      	cmp	r2, r3
 8003872:	d106      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	2103      	movs	r1, #3
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fb33 	bl	8002ee8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fc4c 	bl	8003124 <LL_ADC_IsEnabled>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 810c 	bne.w	8003aac <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6819      	ldr	r1, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f7ff fbcd 	bl	8003040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4aaf      	ldr	r2, [pc, #700]	; (8003b68 <HAL_ADC_ConfigChannel+0x650>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	f040 80fd 	bne.w	8003aac <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_ADC_ConfigChannel+0x3c2>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2b09      	cmp	r3, #9
 80038d0:	bf94      	ite	ls
 80038d2:	2301      	movls	r3, #1
 80038d4:	2300      	movhi	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e012      	b.n	8003900 <HAL_ADC_ConfigChannel+0x3e8>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	bf94      	ite	ls
 80038fa:	2301      	movls	r3, #1
 80038fc:	2300      	movhi	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003900:	2b00      	cmp	r3, #0
 8003902:	d064      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x408>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	3301      	adds	r3, #1
 8003918:	069b      	lsls	r3, r3, #26
 800391a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391e:	e00e      	b.n	800393e <HAL_ADC_ConfigChannel+0x426>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	069b      	lsls	r3, r3, #26
 800393a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_ADC_ConfigChannel+0x446>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	e010      	b.n	8003980 <HAL_ADC_ConfigChannel+0x468>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	ea42 0103 	orr.w	r1, r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x48e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	3301      	adds	r3, #1
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	e011      	b.n	80039ca <HAL_ADC_ConfigChannel+0x4b2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f003 021f 	and.w	r2, r3, #31
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ca:	430b      	orrs	r3, r1
 80039cc:	e069      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x4d2>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0e9b      	lsrs	r3, r3, #26
 80039e0:	3301      	adds	r3, #1
 80039e2:	069b      	lsls	r3, r3, #26
 80039e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e8:	e00e      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x4f0>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
  return result;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	069b      	lsls	r3, r3, #26
 8003a04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x510>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	e010      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x532>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	617b      	str	r3, [r7, #20]
  return result;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	ea42 0103 	orr.w	r1, r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x55e>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	3301      	adds	r3, #1
 8003a62:	f003 021f 	and.w	r2, r3, #31
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b1e      	subs	r3, #30
 8003a6e:	051b      	lsls	r3, r3, #20
 8003a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a74:	e014      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x588>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  return result;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 021f 	and.w	r2, r3, #31
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	3b1e      	subs	r3, #30
 8003a9a:	051b      	lsls	r3, r3, #20
 8003a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	6892      	ldr	r2, [r2, #8]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f7ff faa2 	bl	8002ff0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <HAL_ADC_ConfigChannel+0x654>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80c9 	beq.w	8003c4c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac2:	d004      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x5b6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_ADC_ConfigChannel+0x658>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x5ba>
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_ADC_ConfigChannel+0x65c>)
 8003ad0:	e000      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x5bc>
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_ADC_ConfigChannel+0x660>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f9c3 	bl	8002e60 <LL_ADC_GetCommonPathInternalCh>
 8003ada:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_ADC_ConfigChannel+0x664>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x5da>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_ADC_ConfigChannel+0x668>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d14e      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d148      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b06:	d005      	beq.n	8003b14 <HAL_ADC_ConfigChannel+0x5fc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_ADC_ConfigChannel+0x66c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	f040 8099 	bne.w	8003c46 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x610>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_ADC_ConfigChannel+0x658>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x614>
 8003b28:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_ADC_ConfigChannel+0x65c>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x616>
 8003b2c:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <HAL_ADC_ConfigChannel+0x660>)
 8003b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7ff f97e 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_ADC_ConfigChannel+0x670>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_ADC_ConfigChannel+0x674>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	099a      	lsrs	r2, r3, #6
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b56:	e002      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f9      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b64:	e06f      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x72e>
 8003b66:	bf00      	nop
 8003b68:	407f0000 	.word	0x407f0000
 8003b6c:	80080000 	.word	0x80080000
 8003b70:	50000100 	.word	0x50000100
 8003b74:	50000300 	.word	0x50000300
 8003b78:	50000700 	.word	0x50000700
 8003b7c:	c3210000 	.word	0xc3210000
 8003b80:	90c00010 	.word	0x90c00010
 8003b84:	50000600 	.word	0x50000600
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <HAL_ADC_ConfigChannel+0x748>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d125      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x6ce>
 8003b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11f      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_ADC_ConfigChannel+0x74c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d104      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x6a2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <HAL_ADC_ConfigChannel+0x750>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d047      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc2:	d004      	beq.n	8003bce <HAL_ADC_ConfigChannel+0x6b6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_ADC_ConfigChannel+0x74c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x6ba>
 8003bce:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <HAL_ADC_ConfigChannel+0x754>)
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x6bc>
 8003bd2:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <HAL_ADC_ConfigChannel+0x758>)
 8003bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7ff f92b 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003be4:	e031      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <HAL_ADC_ConfigChannel+0x75c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d12d      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d127      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <HAL_ADC_ConfigChannel+0x74c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0e:	d004      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x702>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <HAL_ADC_ConfigChannel+0x74c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x706>
 8003c1a:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_ADC_ConfigChannel+0x754>)
 8003c1c:	e000      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x708>
 8003c1e:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <HAL_ADC_ConfigChannel+0x758>)
 8003c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7ff f905 	bl	8002e3a <LL_ADC_SetCommonPathInternalCh>
 8003c30:	e00c      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003c44:	e002      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3798      	adds	r7, #152	; 0x98
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	c7520000 	.word	0xc7520000
 8003c64:	50000100 	.word	0x50000100
 8003c68:	50000500 	.word	0x50000500
 8003c6c:	50000300 	.word	0x50000300
 8003c70:	50000700 	.word	0x50000700
 8003c74:	cb840000 	.word	0xcb840000

08003c78 <LL_ADC_IsEnabled>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_IsEnabled+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_IsEnabled+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d101      	bne.n	8003cb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b0a1      	sub	sp, #132	; 0x84
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0e3      	b.n	8003eaa <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf2:	d102      	bne.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	e009      	b.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d102      	bne.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003d04:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	e001      	b.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0be      	b.n	8003eaa <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffb5 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d34:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ffaf 	bl	8003c9e <LL_ADC_REG_IsConversionOngoing>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 80a0 	bne.w	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 809c 	bne.w	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d58:	d004      	beq.n	8003d64 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a55      	ldr	r2, [pc, #340]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003d64:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d66:	e000      	b.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d04b      	beq.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d86:	035b      	lsls	r3, r3, #13
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d004      	beq.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10f      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003da4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003da8:	f7ff ff66 	bl	8003c78 <LL_ADC_IsEnabled>
 8003dac:	4604      	mov	r4, r0
 8003dae:	4841      	ldr	r0, [pc, #260]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003db0:	f7ff ff62 	bl	8003c78 <LL_ADC_IsEnabled>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4323      	orrs	r3, r4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e012      	b.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dc4:	483c      	ldr	r0, [pc, #240]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003dc6:	f7ff ff57 	bl	8003c78 <LL_ADC_IsEnabled>
 8003dca:	4604      	mov	r4, r0
 8003dcc:	483b      	ldr	r0, [pc, #236]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dce:	f7ff ff53 	bl	8003c78 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	431c      	orrs	r4, r3
 8003dd6:	483c      	ldr	r0, [pc, #240]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dd8:	f7ff ff4e 	bl	8003c78 <LL_ADC_IsEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4323      	orrs	r3, r4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d056      	beq.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df6:	f023 030f 	bic.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6811      	ldr	r1, [r2, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e0a:	e047      	b.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e20:	d004      	beq.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10f      	bne.n	8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003e2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e30:	f7ff ff22 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e34:	4604      	mov	r4, r0
 8003e36:	481f      	ldr	r0, [pc, #124]	; (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e38:	f7ff ff1e 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e012      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003e4c:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003e4e:	f7ff ff13 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e52:	4604      	mov	r4, r0
 8003e54:	4819      	ldr	r0, [pc, #100]	; (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e56:	f7ff ff0f 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	431c      	orrs	r4, r3
 8003e5e:	481a      	ldr	r0, [pc, #104]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e60:	f7ff ff0a 	bl	8003c78 <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e7e:	f023 030f 	bic.w	r3, r3, #15
 8003e82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e86:	e009      	b.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e9a:	e000      	b.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ea6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3784      	adds	r7, #132	; 0x84
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	50000100 	.word	0x50000100
 8003eb8:	50000400 	.word	0x50000400
 8003ebc:	50000500 	.word	0x50000500
 8003ec0:	50000300 	.word	0x50000300
 8003ec4:	50000700 	.word	0x50000700
 8003ec8:	50000600 	.word	0x50000600

08003ecc <LL_EXTI_EnableIT_0_31>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <LL_EXTI_EnableIT_0_31+0x20>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <LL_EXTI_EnableIT_0_31+0x20>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40010400 	.word	0x40010400

08003ef0 <LL_EXTI_EnableIT_32_63>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <LL_EXTI_EnableIT_32_63+0x20>)
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	4904      	ldr	r1, [pc, #16]	; (8003f10 <LL_EXTI_EnableIT_32_63+0x20>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	620b      	str	r3, [r1, #32]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010400 	.word	0x40010400

08003f14 <LL_EXTI_DisableIT_0_31>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010400 	.word	0x40010400

08003f3c <LL_EXTI_DisableIT_32_63>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <LL_EXTI_DisableIT_32_63+0x24>)
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	4904      	ldr	r1, [pc, #16]	; (8003f60 <LL_EXTI_DisableIT_32_63+0x24>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	620b      	str	r3, [r1, #32]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010400 	.word	0x40010400

08003f64 <LL_EXTI_EnableEvent_0_31>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	4904      	ldr	r1, [pc, #16]	; (8003f84 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40010400 	.word	0x40010400

08003f88 <LL_EXTI_EnableEvent_32_63>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f94:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010400 	.word	0x40010400

08003fac <LL_EXTI_DisableEvent_0_31>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <LL_EXTI_DisableEvent_32_63>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010400 	.word	0x40010400

08003ffc <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4904      	ldr	r1, [pc, #16]	; (800401c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40010400 	.word	0x40010400

08004020 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800402a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4313      	orrs	r3, r2
 8004032:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40010400 	.word	0x40010400

08004044 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	43db      	mvns	r3, r3
 8004054:	4904      	ldr	r1, [pc, #16]	; (8004068 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004056:	4013      	ands	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010400 	.word	0x40010400

0800406c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	43db      	mvns	r3, r3
 800407c:	4904      	ldr	r1, [pc, #16]	; (8004090 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800407e:	4013      	ands	r3, r2
 8004080:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010400 	.word	0x40010400

08004094 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4904      	ldr	r1, [pc, #16]	; (80040b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010400 	.word	0x40010400

080040b8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010400 	.word	0x40010400

080040dc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	4904      	ldr	r1, [pc, #16]	; (8004100 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010400 	.word	0x40010400

08004104 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	43db      	mvns	r3, r3
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004116:	4013      	ands	r3, r2
 8004118:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010400 	.word	0x40010400

0800412c <LL_EXTI_ClearFlag_0_31>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6153      	str	r3, [r2, #20]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010400 	.word	0x40010400

0800414c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6353      	str	r3, [r2, #52]	; 0x34
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e180      	b.n	800448a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004196:	d102      	bne.n	800419e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e175      	b.n	800448a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f5b      	ldrb	r3, [r3, #29]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fd f8f3 	bl	80013a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b98      	ldr	r3, [pc, #608]	; (800444c <HAL_COMP_Init+0x2e0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d015      	beq.n	8004232 <HAL_COMP_Init+0xc6>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d112      	bne.n	8004232 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800420c:	4b90      	ldr	r3, [pc, #576]	; (8004450 <HAL_COMP_Init+0x2e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	4a90      	ldr	r2, [pc, #576]	; (8004454 <HAL_COMP_Init+0x2e8>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	099a      	lsrs	r2, r3, #6
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004224:	e002      	b.n	800422c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b01      	subs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f9      	bne.n	8004226 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a88      	ldr	r2, [pc, #544]	; (8004458 <HAL_COMP_Init+0x2ec>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d028      	beq.n	800428e <HAL_COMP_Init+0x122>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a86      	ldr	r2, [pc, #536]	; (800445c <HAL_COMP_Init+0x2f0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d020      	beq.n	8004288 <HAL_COMP_Init+0x11c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a85      	ldr	r2, [pc, #532]	; (8004460 <HAL_COMP_Init+0x2f4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_COMP_Init+0x116>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a83      	ldr	r2, [pc, #524]	; (8004464 <HAL_COMP_Init+0x2f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d010      	beq.n	800427c <HAL_COMP_Init+0x110>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a82      	ldr	r2, [pc, #520]	; (8004468 <HAL_COMP_Init+0x2fc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d008      	beq.n	8004276 <HAL_COMP_Init+0x10a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a80      	ldr	r2, [pc, #512]	; (800446c <HAL_COMP_Init+0x300>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_COMP_Init+0x106>
 800426e:	2301      	movs	r3, #1
 8004270:	e00f      	b.n	8004292 <HAL_COMP_Init+0x126>
 8004272:	2302      	movs	r3, #2
 8004274:	e00d      	b.n	8004292 <HAL_COMP_Init+0x126>
 8004276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800427a:	e00a      	b.n	8004292 <HAL_COMP_Init+0x126>
 800427c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004280:	e007      	b.n	8004292 <HAL_COMP_Init+0x126>
 8004282:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004286:	e004      	b.n	8004292 <HAL_COMP_Init+0x126>
 8004288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800428c:	e001      	b.n	8004292 <HAL_COMP_Init+0x126>
 800428e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004292:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80b6 	beq.w	800440e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6e      	ldr	r2, [pc, #440]	; (800446c <HAL_COMP_Init+0x300>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_COMP_Init+0x156>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6c      	ldr	r2, [pc, #432]	; (8004470 <HAL_COMP_Init+0x304>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d103      	bne.n	80042ca <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80042c2:	6938      	ldr	r0, [r7, #16]
 80042c4:	f7ff feac 	bl	8004020 <LL_EXTI_EnableRisingTrig_32_63>
 80042c8:	e014      	b.n	80042f4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80042ca:	6938      	ldr	r0, [r7, #16]
 80042cc:	f7ff fe96 	bl	8003ffc <LL_EXTI_EnableRisingTrig_0_31>
 80042d0:	e010      	b.n	80042f4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a65      	ldr	r2, [pc, #404]	; (800446c <HAL_COMP_Init+0x300>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_COMP_Init+0x17a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a63      	ldr	r2, [pc, #396]	; (8004470 <HAL_COMP_Init+0x304>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d103      	bne.n	80042ee <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80042e6:	6938      	ldr	r0, [r7, #16]
 80042e8:	f7ff fec0 	bl	800406c <LL_EXTI_DisableRisingTrig_32_63>
 80042ec:	e002      	b.n	80042f4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80042ee:	6938      	ldr	r0, [r7, #16]
 80042f0:	f7ff fea8 	bl	8004044 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a59      	ldr	r2, [pc, #356]	; (800446c <HAL_COMP_Init+0x300>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_COMP_Init+0x1a8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a58      	ldr	r2, [pc, #352]	; (8004470 <HAL_COMP_Init+0x304>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004314:	6938      	ldr	r0, [r7, #16]
 8004316:	f7ff fecf 	bl	80040b8 <LL_EXTI_EnableFallingTrig_32_63>
 800431a:	e014      	b.n	8004346 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800431c:	6938      	ldr	r0, [r7, #16]
 800431e:	f7ff feb9 	bl	8004094 <LL_EXTI_EnableFallingTrig_0_31>
 8004322:	e010      	b.n	8004346 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a50      	ldr	r2, [pc, #320]	; (800446c <HAL_COMP_Init+0x300>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_COMP_Init+0x1cc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a4f      	ldr	r2, [pc, #316]	; (8004470 <HAL_COMP_Init+0x304>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d103      	bne.n	8004340 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004338:	6938      	ldr	r0, [r7, #16]
 800433a:	f7ff fee3 	bl	8004104 <LL_EXTI_DisableFallingTrig_32_63>
 800433e:	e002      	b.n	8004346 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004340:	6938      	ldr	r0, [r7, #16]
 8004342:	f7ff fecb 	bl	80040dc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a48      	ldr	r2, [pc, #288]	; (800446c <HAL_COMP_Init+0x300>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_COMP_Init+0x1ee>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a46      	ldr	r2, [pc, #280]	; (8004470 <HAL_COMP_Init+0x304>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d103      	bne.n	8004362 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800435a:	6938      	ldr	r0, [r7, #16]
 800435c:	f7ff fef6 	bl	800414c <LL_EXTI_ClearFlag_32_63>
 8004360:	e002      	b.n	8004368 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004362:	6938      	ldr	r0, [r7, #16]
 8004364:	f7ff fee2 	bl	800412c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d011      	beq.n	8004398 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3c      	ldr	r2, [pc, #240]	; (800446c <HAL_COMP_Init+0x300>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_COMP_Init+0x21c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3b      	ldr	r2, [pc, #236]	; (8004470 <HAL_COMP_Init+0x304>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004388:	6938      	ldr	r0, [r7, #16]
 800438a:	f7ff fdfd 	bl	8003f88 <LL_EXTI_EnableEvent_32_63>
 800438e:	e014      	b.n	80043ba <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004390:	6938      	ldr	r0, [r7, #16]
 8004392:	f7ff fde7 	bl	8003f64 <LL_EXTI_EnableEvent_0_31>
 8004396:	e010      	b.n	80043ba <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a33      	ldr	r2, [pc, #204]	; (800446c <HAL_COMP_Init+0x300>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_COMP_Init+0x240>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a32      	ldr	r2, [pc, #200]	; (8004470 <HAL_COMP_Init+0x304>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d103      	bne.n	80043b4 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80043ac:	6938      	ldr	r0, [r7, #16]
 80043ae:	f7ff fe11 	bl	8003fd4 <LL_EXTI_DisableEvent_32_63>
 80043b2:	e002      	b.n	80043ba <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80043b4:	6938      	ldr	r0, [r7, #16]
 80043b6:	f7ff fdf9 	bl	8003fac <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a28      	ldr	r2, [pc, #160]	; (800446c <HAL_COMP_Init+0x300>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_COMP_Init+0x26e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a26      	ldr	r2, [pc, #152]	; (8004470 <HAL_COMP_Init+0x304>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d103      	bne.n	80043e2 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7ff fd88 	bl	8003ef0 <LL_EXTI_EnableIT_32_63>
 80043e0:	e04b      	b.n	800447a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80043e2:	6938      	ldr	r0, [r7, #16]
 80043e4:	f7ff fd72 	bl	8003ecc <LL_EXTI_EnableIT_0_31>
 80043e8:	e047      	b.n	800447a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <HAL_COMP_Init+0x300>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_COMP_Init+0x292>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_COMP_Init+0x304>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d103      	bne.n	8004406 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80043fe:	6938      	ldr	r0, [r7, #16]
 8004400:	f7ff fd9c 	bl	8003f3c <LL_EXTI_DisableIT_32_63>
 8004404:	e039      	b.n	800447a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004406:	6938      	ldr	r0, [r7, #16]
 8004408:	f7ff fd84 	bl	8003f14 <LL_EXTI_DisableIT_0_31>
 800440c:	e035      	b.n	800447a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a16      	ldr	r2, [pc, #88]	; (800446c <HAL_COMP_Init+0x300>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_COMP_Init+0x2b6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <HAL_COMP_Init+0x304>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d103      	bne.n	800442a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8004422:	6938      	ldr	r0, [r7, #16]
 8004424:	f7ff fdd6 	bl	8003fd4 <LL_EXTI_DisableEvent_32_63>
 8004428:	e002      	b.n	8004430 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f7ff fdbe 	bl	8003fac <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <HAL_COMP_Init+0x300>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_COMP_Init+0x2d8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a0c      	ldr	r2, [pc, #48]	; (8004470 <HAL_COMP_Init+0x304>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d117      	bne.n	8004474 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004444:	6938      	ldr	r0, [r7, #16]
 8004446:	f7ff fd79 	bl	8003f3c <LL_EXTI_DisableIT_32_63>
 800444a:	e016      	b.n	800447a <HAL_COMP_Init+0x30e>
 800444c:	ff007e0f 	.word	0xff007e0f
 8004450:	20000010 	.word	0x20000010
 8004454:	053e2d63 	.word	0x053e2d63
 8004458:	40010200 	.word	0x40010200
 800445c:	40010204 	.word	0x40010204
 8004460:	40010208 	.word	0x40010208
 8004464:	4001020c 	.word	0x4001020c
 8004468:	40010210 	.word	0x40010210
 800446c:	40010214 	.word	0x40010214
 8004470:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004474:	6938      	ldr	r0, [r7, #16]
 8004476:	f7ff fd4d 	bl	8003f14 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7f5b      	ldrb	r3, [r3, #29]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800448a:	7ffb      	ldrb	r3, [r7, #31]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <__NVIC_SetPriorityGrouping>:
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b0:	4013      	ands	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	60d3      	str	r3, [r2, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_GetPriorityGrouping>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <__NVIC_GetPriorityGrouping+0x18>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 0307 	and.w	r3, r3, #7
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <__NVIC_EnableIRQ>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	2b00      	cmp	r3, #0
 8004508:	db0b      	blt.n	8004522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	f003 021f 	and.w	r2, r3, #31
 8004510:	4907      	ldr	r1, [pc, #28]	; (8004530 <__NVIC_EnableIRQ+0x38>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2001      	movs	r0, #1
 800451a:	fa00 f202 	lsl.w	r2, r0, r2
 800451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_SetPriority>:
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db0a      	blt.n	800455e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <__NVIC_SetPriority+0x4c>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800455c:	e00a      	b.n	8004574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <__NVIC_SetPriority+0x50>)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3b04      	subs	r3, #4
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	440b      	add	r3, r1
 8004572:	761a      	strb	r2, [r3, #24]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000e100 	.word	0xe000e100
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <NVIC_EncodePriority>:
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf28      	it	cs
 80045a6:	2304      	movcs	r3, #4
 80045a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d902      	bls.n	80045b8 <NVIC_EncodePriority+0x30>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3b03      	subs	r3, #3
 80045b6:	e000      	b.n	80045ba <NVIC_EncodePriority+0x32>
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43d9      	mvns	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	4313      	orrs	r3, r2
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <SysTick_Config>:
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004600:	d301      	bcc.n	8004606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004602:	2301      	movs	r3, #1
 8004604:	e00f      	b.n	8004626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <SysTick_Config+0x40>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800460e:	210f      	movs	r1, #15
 8004610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004614:	f7ff ff8e 	bl	8004534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <SysTick_Config+0x40>)
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <SysTick_Config+0x40>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010

08004634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff29 	bl	8004494 <__NVIC_SetPriorityGrouping>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004658:	f7ff ff40 	bl	80044dc <__NVIC_GetPriorityGrouping>
 800465c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff90 	bl	8004588 <NVIC_EncodePriority>
 8004668:	4602      	mov	r2, r0
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff5f 	bl	8004534 <__NVIC_SetPriority>
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff33 	bl	80044f8 <__NVIC_EnableIRQ>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff ffa4 	bl	80045f0 <SysTick_Config>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e014      	b.n	80046ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	791b      	ldrb	r3, [r3, #4]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc ff19 	bl	800150c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	795b      	ldrb	r3, [r3, #5]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_DAC_Start+0x16>
 8004708:	2302      	movs	r3, #2
 800470a:	e043      	b.n	8004794 <HAL_DAC_Start+0x9e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004730:	2001      	movs	r0, #1
 8004732:	f7fe fb4d 	bl	8002dd0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004746:	2b02      	cmp	r3, #2
 8004748:	d11d      	bne.n	8004786 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e014      	b.n	8004786 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2102      	movs	r1, #2
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	429a      	cmp	r2, r3
 8004774:	d107      	bne.n	8004786 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0202 	orr.w	r2, r2, #2
 8004784:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	795b      	ldrb	r3, [r3, #5]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_DAC_Start_DMA+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0a1      	b.n	80048fe <HAL_DAC_Start_DMA+0x162>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2202      	movs	r2, #2
 80047c4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d12a      	bne.n	8004822 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a4d      	ldr	r2, [pc, #308]	; (8004908 <HAL_DAC_Start_DMA+0x16c>)
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a4c      	ldr	r2, [pc, #304]	; (800490c <HAL_DAC_Start_DMA+0x170>)
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a4b      	ldr	r2, [pc, #300]	; (8004910 <HAL_DAC_Start_DMA+0x174>)
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d009      	beq.n	800480e <HAL_DAC_Start_DMA+0x72>
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d00c      	beq.n	8004818 <HAL_DAC_Start_DMA+0x7c>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d000      	beq.n	8004804 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004802:	e039      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	613b      	str	r3, [r7, #16]
        break;
 800480c:	e034      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	613b      	str	r3, [r7, #16]
        break;
 8004816:	e02f      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3310      	adds	r3, #16
 800481e:	613b      	str	r3, [r7, #16]
        break;
 8004820:	e02a      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <HAL_DAC_Start_DMA+0x178>)
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	4a3a      	ldr	r2, [pc, #232]	; (8004918 <HAL_DAC_Start_DMA+0x17c>)
 8004830:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4a39      	ldr	r2, [pc, #228]	; (800491c <HAL_DAC_Start_DMA+0x180>)
 8004838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004848:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d009      	beq.n	8004864 <HAL_DAC_Start_DMA+0xc8>
 8004850:	2b08      	cmp	r3, #8
 8004852:	d00c      	beq.n	800486e <HAL_DAC_Start_DMA+0xd2>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d000      	beq.n	800485a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004858:	e00e      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	613b      	str	r3, [r7, #16]
        break;
 8004862:	e009      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3318      	adds	r3, #24
 800486a:	613b      	str	r3, [r7, #16]
        break;
 800486c:	e004      	b.n	8004878 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	331c      	adds	r3, #28
 8004874:	613b      	str	r3, [r7, #16]
        break;
 8004876:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d111      	bne.n	80048a2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6898      	ldr	r0, [r3, #8]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	f000 fbc8 	bl	800502c <HAL_DMA_Start_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]
 80048a0:	e010      	b.n	80048c4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68d8      	ldr	r0, [r3, #12]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	f000 fbb6 	bl	800502c <HAL_DMA_Start_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10f      	bne.n	80048f0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fe fa71 	bl	8002dd0 <HAL_Delay>
 80048ee:	e005      	b.n	80048fc <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	08004dc9 	.word	0x08004dc9
 800490c:	08004deb 	.word	0x08004deb
 8004910:	08004e07 	.word	0x08004e07
 8004914:	08004e71 	.word	0x08004e71
 8004918:	08004e93 	.word	0x08004e93
 800491c:	08004eaf 	.word	0x08004eaf

08004920 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	400a      	ands	r2, r1
 8004946:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2201      	movs	r2, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	400a      	ands	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004964:	2001      	movs	r0, #1
 8004966:	f7fe fa33 	bl	8002dd0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10f      	bne.n	8004990 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fbd4 	bl	8005122 <HAL_DMA_Abort>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e00e      	b.n	80049ae <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fbc4 	bl	8005122 <HAL_DMA_Abort>
 800499a:	4603      	mov	r3, r0
 800499c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2204      	movs	r2, #4
 80049b8:	711a      	strb	r2, [r3, #4]
 80049ba:	e002      	b.n	80049c2 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3308      	adds	r3, #8
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e004      	b.n	8004a06 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3314      	adds	r3, #20
 8004a04:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d103      	bne.n	8004a5c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	e002      	b.n	8004a62 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	795b      	ldrb	r3, [r3, #5]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_DAC_ConfigChannel+0x1c>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e194      	b.n	8004db6 <HAL_DAC_ConfigChannel+0x346>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2202      	movs	r2, #2
 8004a96:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d174      	bne.n	8004b8a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d137      	bne.n	8004b16 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe f987 	bl	8002db8 <HAL_GetTick>
 8004aaa:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004aac:	e011      	b.n	8004ad2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004aae:	f7fe f983 	bl	8002db8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d90a      	bls.n	8004ad2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f043 0208 	orr.w	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2203      	movs	r2, #3
 8004acc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e171      	b.n	8004db6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e6      	bne.n	8004aae <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fe f975 	bl	8002dd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
 8004af0:	e01e      	b.n	8004b30 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004af2:	f7fe f961 	bl	8002db8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d90a      	bls.n	8004b16 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f043 0208 	orr.w	r2, r3, #8
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e14f      	b.n	8004db6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dbe8      	blt.n	8004af2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f7fe f955 	bl	8002dd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	ea02 0103 	and.w	r1, r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	409a      	lsls	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	21ff      	movs	r1, #255	; 0xff
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	ea02 0103 	and.w	r1, r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	409a      	lsls	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d11d      	bne.n	8004bce <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	221f      	movs	r2, #31
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	4013      	ands	r3, r2
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2207      	movs	r2, #7
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	4013      	ands	r3, r2
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	e011      	b.n	8004c20 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	e008      	b.n	8004c20 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c16:	2301      	movs	r3, #1
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	e001      	b.n	8004c20 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	6a3a      	ldr	r2, [r7, #32]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	4013      	ands	r3, r2
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	791b      	ldrb	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d102      	bne.n	8004c54 <HAL_DAC_ConfigChannel+0x1e4>
 8004c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c52:	e000      	b.n	8004c56 <HAL_DAC_ConfigChannel+0x1e6>
 8004c54:	2300      	movs	r3, #0
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	4013      	ands	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	795b      	ldrb	r3, [r3, #5]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d102      	bne.n	8004c80 <HAL_DAC_ConfigChannel+0x210>
 8004c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c7e:	e000      	b.n	8004c82 <HAL_DAC_ConfigChannel+0x212>
 8004c80:	2300      	movs	r3, #0
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d114      	bne.n	8004cc2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004c98:	f001 faf8 	bl	800628c <HAL_RCC_GetHCLKFreq>
 8004c9c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4a47      	ldr	r2, [pc, #284]	; (8004dc0 <HAL_DAC_ConfigChannel+0x350>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d904      	bls.n	8004cb0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	e00d      	b.n	8004ccc <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4a44      	ldr	r2, [pc, #272]	; (8004dc4 <HAL_DAC_ConfigChannel+0x354>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d909      	bls.n	8004ccc <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc0:	e004      	b.n	8004ccc <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	400a      	ands	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	4013      	ands	r3, r2
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	4313      	orrs	r3, r2
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	22c0      	movs	r2, #192	; 0xc0
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43da      	mvns	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	ea02 0103 	and.w	r1, r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	09896800 	.word	0x09896800
 8004dc4:	04c4b400 	.word	0x04c4b400

08004dc8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fe20 	bl	8004a1c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	711a      	strb	r2, [r3, #4]
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fe19 	bl	8004a30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7fd f818 	bl	8001e56 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	711a      	strb	r2, [r3, #4]
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ffd8 	bl	8004e34 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	711a      	strb	r2, [r3, #4]
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff ffd1 	bl	8004e48 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f043 0204 	orr.w	r2, r3, #4
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff ffc7 	bl	8004e5c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	711a      	strb	r2, [r3, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e08d      	b.n	800500a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_DMA_Init+0x138>)
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d80f      	bhi.n	8004f1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b45      	ldr	r3, [pc, #276]	; (8005018 <HAL_DMA_Init+0x13c>)
 8004f02:	4413      	add	r3, r2
 8004f04:	4a45      	ldr	r2, [pc, #276]	; (800501c <HAL_DMA_Init+0x140>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	009a      	lsls	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a42      	ldr	r2, [pc, #264]	; (8005020 <HAL_DMA_Init+0x144>)
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
 8004f18:	e00e      	b.n	8004f38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b40      	ldr	r3, [pc, #256]	; (8005024 <HAL_DMA_Init+0x148>)
 8004f22:	4413      	add	r3, r2
 8004f24:	4a3d      	ldr	r2, [pc, #244]	; (800501c <HAL_DMA_Init+0x140>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a3c      	ldr	r2, [pc, #240]	; (8005028 <HAL_DMA_Init+0x14c>)
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa10 	bl	80053b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f98:	d102      	bne.n	8004fa0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_DMA_Init+0x104>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d80c      	bhi.n	8004fe0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa30 	bl	800542c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e008      	b.n	8004ff2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40020407 	.word	0x40020407
 8005018:	bffdfff8 	.word	0xbffdfff8
 800501c:	cccccccd 	.word	0xcccccccd
 8005020:	40020000 	.word	0x40020000
 8005024:	bffdfbf8 	.word	0xbffdfbf8
 8005028:	40020400 	.word	0x40020400

0800502c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_DMA_Start_IT+0x20>
 8005048:	2302      	movs	r3, #2
 800504a:	e066      	b.n	800511a <HAL_DMA_Start_IT+0xee>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d155      	bne.n	800510c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f954 	bl	8005332 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 020e 	orr.w	r2, r2, #14
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e00f      	b.n	80050c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0204 	bic.w	r2, r2, #4
 80050b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 020a 	orr.w	r2, r2, #10
 80050c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e005      	b.n	8005118 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005114:	2302      	movs	r3, #2
 8005116:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d005      	beq.n	8005146 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2204      	movs	r2, #4
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e037      	b.n	80051b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 020e 	bic.w	r2, r2, #14
 8005154:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005164:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	f003 021f 	and.w	r2, r3, #31
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2101      	movs	r1, #1
 8005184:	fa01 f202 	lsl.w	r2, r1, r2
 8005188:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005192:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2204      	movs	r2, #4
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d026      	beq.n	800524e <HAL_DMA_IRQHandler+0x7a>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d021      	beq.n	800524e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522c:	f003 021f 	and.w	r2, r3, #31
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	2104      	movs	r1, #4
 8005236:	fa01 f202 	lsl.w	r2, r1, r2
 800523a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2b00      	cmp	r3, #0
 8005242:	d071      	beq.n	8005328 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800524c:	e06c      	b.n	8005328 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2202      	movs	r2, #2
 8005258:	409a      	lsls	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02e      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d029      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 020a 	bic.w	r2, r2, #10
 8005288:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	f003 021f 	and.w	r2, r3, #31
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2102      	movs	r1, #2
 80052a0:	fa01 f202 	lsl.w	r2, r1, r2
 80052a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d038      	beq.n	8005328 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052be:	e033      	b.n	8005328 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2208      	movs	r2, #8
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02a      	beq.n	800532a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d025      	beq.n	800532a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 020e 	bic.w	r2, r2, #14
 80052ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f003 021f 	and.w	r2, r3, #31
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005300:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005328:	bf00      	nop
 800532a:	bf00      	nop
}
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005348:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800535a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2101      	movs	r1, #1
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b10      	cmp	r3, #16
 800537e:	d108      	bne.n	8005392 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005390:	e007      	b.n	80053a2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b16      	ldr	r3, [pc, #88]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d802      	bhi.n	80053ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053c4:	4b15      	ldr	r3, [pc, #84]	; (800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e001      	b.n	80053ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	3b08      	subs	r3, #8
 80053da:	4a12      	ldr	r2, [pc, #72]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	009a      	lsls	r2, r3, #2
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	409a      	lsls	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	651a      	str	r2, [r3, #80]	; 0x50
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40020407 	.word	0x40020407
 800541c:	40020800 	.word	0x40020800
 8005420:	40020820 	.word	0x40020820
 8005424:	cccccccd 	.word	0xcccccccd
 8005428:	40020880 	.word	0x40020880

0800542c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800544e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	2201      	movs	r2, #1
 800545a:	409a      	lsls	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	1000823f 	.word	0x1000823f
 8005470:	40020940 	.word	0x40020940

08005474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005482:	e15a      	b.n	800573a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 814c 	beq.w	8005734 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d00b      	beq.n	80054bc <HAL_GPIO_Init+0x48>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d007      	beq.n	80054bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054b0:	2b11      	cmp	r3, #17
 80054b2:	d003      	beq.n	80054bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b12      	cmp	r3, #18
 80054ba:	d130      	bne.n	800551e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	2203      	movs	r2, #3
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4013      	ands	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054f2:	2201      	movs	r2, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	f003 0201 	and.w	r2, r3, #1
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	2203      	movs	r2, #3
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0xea>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b12      	cmp	r3, #18
 800555c:	d123      	bne.n	80055a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	220f      	movs	r2, #15
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	08da      	lsrs	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3208      	adds	r2, #8
 80055a0:	6939      	ldr	r1, [r7, #16]
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	2203      	movs	r2, #3
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0203 	and.w	r2, r3, #3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80a6 	beq.w	8005734 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e8:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	4a5a      	ldr	r2, [pc, #360]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6613      	str	r3, [r2, #96]	; 0x60
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005600:	4a56      	ldr	r2, [pc, #344]	; (800575c <HAL_GPIO_Init+0x2e8>)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	3302      	adds	r3, #2
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	220f      	movs	r2, #15
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800562a:	d01f      	beq.n	800566c <HAL_GPIO_Init+0x1f8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a4c      	ldr	r2, [pc, #304]	; (8005760 <HAL_GPIO_Init+0x2ec>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d019      	beq.n	8005668 <HAL_GPIO_Init+0x1f4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a4b      	ldr	r2, [pc, #300]	; (8005764 <HAL_GPIO_Init+0x2f0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_GPIO_Init+0x1f0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a4a      	ldr	r2, [pc, #296]	; (8005768 <HAL_GPIO_Init+0x2f4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00d      	beq.n	8005660 <HAL_GPIO_Init+0x1ec>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a49      	ldr	r2, [pc, #292]	; (800576c <HAL_GPIO_Init+0x2f8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d007      	beq.n	800565c <HAL_GPIO_Init+0x1e8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a48      	ldr	r2, [pc, #288]	; (8005770 <HAL_GPIO_Init+0x2fc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_GPIO_Init+0x1e4>
 8005654:	2305      	movs	r3, #5
 8005656:	e00a      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005658:	2306      	movs	r3, #6
 800565a:	e008      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 800565c:	2304      	movs	r3, #4
 800565e:	e006      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005660:	2303      	movs	r3, #3
 8005662:	e004      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005664:	2302      	movs	r3, #2
 8005666:	e002      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 800566c:	2300      	movs	r3, #0
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	f002 0203 	and.w	r2, r2, #3
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4093      	lsls	r3, r2
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800567e:	4937      	ldr	r1, [pc, #220]	; (800575c <HAL_GPIO_Init+0x2e8>)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	089b      	lsrs	r3, r3, #2
 8005684:	3302      	adds	r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800568c:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_GPIO_Init+0x300>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056b0:	4a30      	ldr	r2, [pc, #192]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056da:	4a26      	ldr	r2, [pc, #152]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_GPIO_Init+0x300>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_GPIO_Init+0x300>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800572e:	4a11      	ldr	r2, [pc, #68]	; (8005774 <HAL_GPIO_Init+0x300>)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3301      	adds	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f ae9d 	bne.w	8005484 <HAL_GPIO_Init+0x10>
  }
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000
 800575c:	40010000 	.word	0x40010000
 8005760:	48000400 	.word	0x48000400
 8005764:	48000800 	.word	0x48000800
 8005768:	48000c00 	.word	0x48000c00
 800576c:	48001000 	.word	0x48001000
 8005770:	48001400 	.word	0x48001400
 8005774:	40010400 	.word	0x40010400

08005778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e001      	b.n	800579a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
 80057b4:	4613      	mov	r3, r2
 80057b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057b8:	787b      	ldrb	r3, [r7, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057c4:	e002      	b.n	80057cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057c6:	887a      	ldrh	r2, [r7, #2]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d141      	bne.n	800586a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057e6:	4b4b      	ldr	r3, [pc, #300]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f2:	d131      	bne.n	8005858 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057f4:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057fa:	4a46      	ldr	r2, [pc, #280]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005804:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800580c:	4a41      	ldr	r2, [pc, #260]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800580e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005814:	4b40      	ldr	r3, [pc, #256]	; (8005918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2232      	movs	r2, #50	; 0x32
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	4a3f      	ldr	r2, [pc, #252]	; (800591c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	0c9b      	lsrs	r3, r3, #18
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800582a:	e002      	b.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3b01      	subs	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005832:	4b38      	ldr	r3, [pc, #224]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d102      	bne.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f2      	bne.n	800582c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d158      	bne.n	8005906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e057      	b.n	8005908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005858:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800585e:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005868:	e04d      	b.n	8005906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d141      	bne.n	80058f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d131      	bne.n	80058e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005880:	4b24      	ldr	r3, [pc, #144]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005886:	4a23      	ldr	r2, [pc, #140]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005890:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005898:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800589e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058a0:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2232      	movs	r2, #50	; 0x32
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	0c9b      	lsrs	r3, r3, #18
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058b6:	e002      	b.n	80058be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ca:	d102      	bne.n	80058d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f2      	bne.n	80058b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058de:	d112      	bne.n	8005906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e011      	b.n	8005908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ea:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058f4:	e007      	b.n	8005906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005904:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40007000 	.word	0x40007000
 8005918:	20000010 	.word	0x20000010
 800591c:	431bde83 	.word	0x431bde83

08005920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e308      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d075      	beq.n	8005a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593e:	4ba3      	ldr	r3, [pc, #652]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005948:	4ba0      	ldr	r3, [pc, #640]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b0c      	cmp	r3, #12
 8005956:	d102      	bne.n	800595e <HAL_RCC_OscConfig+0x3e>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d002      	beq.n	8005964 <HAL_RCC_OscConfig+0x44>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10b      	bne.n	800597c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	4b99      	ldr	r3, [pc, #612]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05b      	beq.n	8005a28 <HAL_RCC_OscConfig+0x108>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d157      	bne.n	8005a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e2e3      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d106      	bne.n	8005994 <HAL_RCC_OscConfig+0x74>
 8005986:	4b91      	ldr	r3, [pc, #580]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a90      	ldr	r2, [pc, #576]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e01d      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800599c:	d10c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x98>
 800599e:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a8a      	ldr	r2, [pc, #552]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b88      	ldr	r3, [pc, #544]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a87      	ldr	r2, [pc, #540]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e00b      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 80059b8:	4b84      	ldr	r3, [pc, #528]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a83      	ldr	r2, [pc, #524]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	4b81      	ldr	r3, [pc, #516]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a80      	ldr	r2, [pc, #512]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fd f9ee 	bl	8002db8 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fd f9ea 	bl	8002db8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e2a8      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f2:	4b76      	ldr	r3, [pc, #472]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0xc0>
 80059fe:	e014      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd f9da 	bl	8002db8 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a08:	f7fd f9d6 	bl	8002db8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	; 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e294      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a1a:	4b6c      	ldr	r3, [pc, #432]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0xe8>
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d075      	beq.n	8005b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a36:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a40:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d102      	bne.n	8005a56 <HAL_RCC_OscConfig+0x136>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d002      	beq.n	8005a5c <HAL_RCC_OscConfig+0x13c>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d11f      	bne.n	8005a9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a5c:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_OscConfig+0x154>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e267      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a74:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	4952      	ldr	r1, [pc, #328]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a88:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCC_OscConfig+0x2b0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd f947 	bl	8002d20 <HAL_InitTick>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d043      	beq.n	8005b20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e253      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d023      	beq.n	8005aec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa4:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a48      	ldr	r2, [pc, #288]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd f982 	bl	8002db8 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab8:	f7fd f97e 	bl	8002db8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e23c      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aca:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	4939      	ldr	r1, [pc, #228]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	604b      	str	r3, [r1, #4]
 8005aea:	e01a      	b.n	8005b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aec:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a36      	ldr	r2, [pc, #216]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd f95e 	bl	8002db8 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b00:	f7fd f95a 	bl	8002db8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e218      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x1e0>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d03c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01c      	beq.n	8005b70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b36:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3c:	4a23      	ldr	r2, [pc, #140]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b46:	f7fd f937 	bl	8002db8 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4e:	f7fd f933 	bl	8002db8 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1f1      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0ef      	beq.n	8005b4e <HAL_RCC_OscConfig+0x22e>
 8005b6e:	e01b      	b.n	8005ba8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b70:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b80:	f7fd f91a 	bl	8002db8 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b88:	f7fd f916 	bl	8002db8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e1d4      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ef      	bne.n	8005b88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80ab 	beq.w	8005d0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_RCC_OscConfig+0x2ac>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x2b4>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e005      	b.n	8005bd6 <HAL_RCC_OscConfig+0x2b6>
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	20000014 	.word	0x20000014
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bda:	4baf      	ldr	r3, [pc, #700]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4aae      	ldr	r2, [pc, #696]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
 8005be6:	4bac      	ldr	r3, [pc, #688]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf6:	4ba9      	ldr	r3, [pc, #676]	; (8005e9c <HAL_RCC_OscConfig+0x57c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d118      	bne.n	8005c34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c02:	4ba6      	ldr	r3, [pc, #664]	; (8005e9c <HAL_RCC_OscConfig+0x57c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4aa5      	ldr	r2, [pc, #660]	; (8005e9c <HAL_RCC_OscConfig+0x57c>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0e:	f7fd f8d3 	bl	8002db8 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fd f8cf 	bl	8002db8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e18d      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c28:	4b9c      	ldr	r3, [pc, #624]	; (8005e9c <HAL_RCC_OscConfig+0x57c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d108      	bne.n	8005c4e <HAL_RCC_OscConfig+0x32e>
 8005c3c:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a95      	ldr	r2, [pc, #596]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c4c:	e024      	b.n	8005c98 <HAL_RCC_OscConfig+0x378>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b05      	cmp	r3, #5
 8005c54:	d110      	bne.n	8005c78 <HAL_RCC_OscConfig+0x358>
 8005c56:	4b90      	ldr	r3, [pc, #576]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	4a8e      	ldr	r2, [pc, #568]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c5e:	f043 0304 	orr.w	r3, r3, #4
 8005c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c66:	4b8c      	ldr	r3, [pc, #560]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	4a8a      	ldr	r2, [pc, #552]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c76:	e00f      	b.n	8005c98 <HAL_RCC_OscConfig+0x378>
 8005c78:	4b87      	ldr	r3, [pc, #540]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a86      	ldr	r2, [pc, #536]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c88:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a82      	ldr	r2, [pc, #520]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005c90:	f023 0304 	bic.w	r3, r3, #4
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d016      	beq.n	8005cce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fd f88a 	bl	8002db8 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca8:	f7fd f886 	bl	8002db8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e142      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cbe:	4b76      	ldr	r3, [pc, #472]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ed      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x388>
 8005ccc:	e015      	b.n	8005cfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fd f873 	bl	8002db8 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fd f86f 	bl	8002db8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e12b      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cec:	4b6a      	ldr	r3, [pc, #424]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ed      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cfa:	7ffb      	ldrb	r3, [r7, #31]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	4a64      	ldr	r2, [pc, #400]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d03c      	beq.n	8005d92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01c      	beq.n	8005d5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d20:	4b5d      	ldr	r3, [pc, #372]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d26:	4a5c      	ldr	r2, [pc, #368]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fd f842 	bl	8002db8 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d38:	f7fd f83e 	bl	8002db8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0fc      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d4a:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ef      	beq.n	8005d38 <HAL_RCC_OscConfig+0x418>
 8005d58:	e01b      	b.n	8005d92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d5a:	4b4f      	ldr	r3, [pc, #316]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d60:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6a:	f7fd f825 	bl	8002db8 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d72:	f7fd f821 	bl	8002db8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e0df      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1ef      	bne.n	8005d72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80d3 	beq.w	8005f42 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 030c 	and.w	r3, r3, #12
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f000 808d 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d15a      	bne.n	8005e68 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a38      	ldr	r2, [pc, #224]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fc fffb 	bl	8002db8 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc6:	f7fc fff7 	bl	8002db8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e0b5      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f0      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005de4:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x580>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6a11      	ldr	r1, [r2, #32]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005df4:	3a01      	subs	r2, #1
 8005df6:	0112      	lsls	r2, r2, #4
 8005df8:	4311      	orrs	r1, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005dfe:	0212      	lsls	r2, r2, #8
 8005e00:	4311      	orrs	r1, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e06:	0852      	lsrs	r2, r2, #1
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	0552      	lsls	r2, r2, #21
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e12:	0852      	lsrs	r2, r2, #1
 8005e14:	3a01      	subs	r2, #1
 8005e16:	0652      	lsls	r2, r2, #25
 8005e18:	4311      	orrs	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e1e:	06d2      	lsls	r2, r2, #27
 8005e20:	430a      	orrs	r2, r1
 8005e22:	491d      	ldr	r1, [pc, #116]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fc ffba 	bl	8002db8 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fc ffb6 	bl	8002db8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e074      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x528>
 8005e66:	e06c      	b.n	8005f42 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_RCC_OscConfig+0x578>)
 8005e86:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fc ff92 	bl	8002db8 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e96:	e00e      	b.n	8005eb6 <HAL_RCC_OscConfig+0x596>
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40007000 	.word	0x40007000
 8005ea0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea4:	f7fc ff88 	bl	8002db8 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e046      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb6:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <HAL_RCC_OscConfig+0x62c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x584>
 8005ec2:	e03e      	b.n	8005f42 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e039      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCC_OscConfig+0x62c>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0203 	and.w	r2, r3, #3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d12c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d123      	bne.n	8005f3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d11b      	bne.n	8005f3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d113      	bne.n	8005f3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	3b01      	subs	r3, #1
 8005f24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d109      	bne.n	8005f3e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	3b01      	subs	r3, #1
 8005f38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000

08005f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e11e      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d910      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b8e      	ldr	r3, [pc, #568]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 020f 	bic.w	r2, r3, #15
 8005f7e:	498c      	ldr	r1, [pc, #560]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b8a      	ldr	r3, [pc, #552]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e106      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d073      	beq.n	800608c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d129      	bne.n	8006000 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fac:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0f4      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fbc:	f000 f972 	bl	80062a4 <RCC_GetSysClockFreqFromPLLSource>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4a7c      	ldr	r2, [pc, #496]	; (80061b8 <HAL_RCC_ClockConfig+0x268>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d93f      	bls.n	800604a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fca:	4b7a      	ldr	r3, [pc, #488]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d033      	beq.n	800604a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d12f      	bne.n	800604a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fea:	4b72      	ldr	r3, [pc, #456]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff2:	4a70      	ldr	r2, [pc, #448]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e024      	b.n	800604a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d107      	bne.n	8006018 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006008:	4b6a      	ldr	r3, [pc, #424]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0c6      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0be      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006028:	f000 f8ce 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800602c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4a61      	ldr	r2, [pc, #388]	; (80061b8 <HAL_RCC_ClockConfig+0x268>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d909      	bls.n	800604a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006036:	4b5f      	ldr	r3, [pc, #380]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800603e:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4957      	ldr	r1, [pc, #348]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006058:	4313      	orrs	r3, r2
 800605a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605c:	f7fc feac 	bl	8002db8 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fc fea8 	bl	8002db8 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e095      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d023      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a4:	4b43      	ldr	r3, [pc, #268]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	4a42      	ldr	r2, [pc, #264]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060bc:	4b3d      	ldr	r3, [pc, #244]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060c4:	4a3b      	ldr	r2, [pc, #236]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060cc:	4b39      	ldr	r3, [pc, #228]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4936      	ldr	r1, [pc, #216]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
 80060de:	e008      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d105      	bne.n	80060f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060e6:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4a32      	ldr	r2, [pc, #200]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 80060ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d21d      	bcs.n	800613c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 020f 	bic.w	r2, r3, #15
 8006108:	4929      	ldr	r1, [pc, #164]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006110:	f7fc fe52 	bl	8002db8 <HAL_GetTick>
 8006114:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006116:	e00a      	b.n	800612e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006118:	f7fc fe4e 	bl	8002db8 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	; 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e03b      	b.n	80061a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <HAL_RCC_ClockConfig+0x260>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d1ed      	bne.n	8006118 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006148:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4917      	ldr	r1, [pc, #92]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006166:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	490f      	ldr	r1, [pc, #60]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006176:	4313      	orrs	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800617a:	f000 f825 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800617e:	4601      	mov	r1, r0
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <HAL_RCC_ClockConfig+0x264>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <HAL_RCC_ClockConfig+0x26c>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	fa21 f303 	lsr.w	r3, r1, r3
 8006196:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <HAL_RCC_ClockConfig+0x270>)
 8006198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x274>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc fdbe 	bl	8002d20 <HAL_InitTick>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40021000 	.word	0x40021000
 80061b8:	04c4b400 	.word	0x04c4b400
 80061bc:	0800a4c0 	.word	0x0800a4c0
 80061c0:	20000010 	.word	0x20000010
 80061c4:	20000014 	.word	0x20000014

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061ce:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d102      	bne.n	80061e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e047      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061ec:	4b26      	ldr	r3, [pc, #152]	; (8006288 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e03e      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061f2:	4b23      	ldr	r3, [pc, #140]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d136      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fe:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	3301      	adds	r3, #1
 8006214:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d10c      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800621c:	4a1a      	ldr	r2, [pc, #104]	; (8006288 <HAL_RCC_GetSysClockFreq+0xc0>)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	4a16      	ldr	r2, [pc, #88]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	0a12      	lsrs	r2, r2, #8
 800622a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	617b      	str	r3, [r7, #20]
      break;
 8006234:	e00c      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	4a10      	ldr	r2, [pc, #64]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	0a12      	lsrs	r2, r2, #8
 8006244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
      break;
 800624e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0e5b      	lsrs	r3, r3, #25
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e001      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006270:	693b      	ldr	r3, [r7, #16]
}
 8006272:	4618      	mov	r0, r3
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	00f42400 	.word	0x00f42400
 8006288:	007a1200 	.word	0x007a1200

0800628c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000010 	.word	0x20000010

080062a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062b4:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d10c      	bne.n	80062e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062c8:	4a17      	ldr	r2, [pc, #92]	; (8006328 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	4a14      	ldr	r2, [pc, #80]	; (8006324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062d2:	68d2      	ldr	r2, [r2, #12]
 80062d4:	0a12      	lsrs	r2, r2, #8
 80062d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
    break;
 80062e0:	e00c      	b.n	80062fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062e2:	4a12      	ldr	r2, [pc, #72]	; (800632c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ec:	68d2      	ldr	r2, [r2, #12]
 80062ee:	0a12      	lsrs	r2, r2, #8
 80062f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	617b      	str	r3, [r7, #20]
    break;
 80062fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	0e5b      	lsrs	r3, r3, #25
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	3301      	adds	r3, #1
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	fbb2 f3f3 	udiv	r3, r2, r3
 8006314:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006316:	687b      	ldr	r3, [r7, #4]
}
 8006318:	4618      	mov	r0, r3
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40021000 	.word	0x40021000
 8006328:	007a1200 	.word	0x007a1200
 800632c:	00f42400 	.word	0x00f42400

08006330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006338:	2300      	movs	r3, #0
 800633a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800633c:	2300      	movs	r3, #0
 800633e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8098 	beq.w	800647e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634e:	2300      	movs	r3, #0
 8006350:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006352:	4b43      	ldr	r3, [pc, #268]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635e:	4b40      	ldr	r3, [pc, #256]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006362:	4a3f      	ldr	r2, [pc, #252]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6593      	str	r3, [r2, #88]	; 0x58
 800636a:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006376:	2301      	movs	r3, #1
 8006378:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800637a:	4b3a      	ldr	r3, [pc, #232]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a39      	ldr	r2, [pc, #228]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006386:	f7fc fd17 	bl	8002db8 <HAL_GetTick>
 800638a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638c:	e009      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fc fd13 	bl	8002db8 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d902      	bls.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	74fb      	strb	r3, [r7, #19]
        break;
 80063a0:	e005      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a2:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0ef      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063ae:	7cfb      	ldrb	r3, [r7, #19]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d159      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063b4:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01e      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d019      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063d0:	4b23      	ldr	r3, [pc, #140]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	4a1b      	ldr	r2, [pc, #108]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fc fcd3 	bl	8002db8 <HAL_GetTick>
 8006412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006414:	e00b      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006416:	f7fc fccf 	bl	8002db8 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f241 3288 	movw	r2, #5000	; 0x1388
 8006424:	4293      	cmp	r3, r2
 8006426:	d902      	bls.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	74fb      	strb	r3, [r7, #19]
            break;
 800642c:	e006      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642e:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0ec      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006450:	4903      	ldr	r1, [pc, #12]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006458:	e008      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
 800645e:	e005      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006460:	40021000 	.word	0x40021000
 8006464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646c:	7c7b      	ldrb	r3, [r7, #17]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006472:	4baf      	ldr	r3, [pc, #700]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006476:	4aae      	ldr	r2, [pc, #696]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800648a:	4ba9      	ldr	r3, [pc, #676]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f023 0203 	bic.w	r2, r3, #3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	49a5      	ldr	r1, [pc, #660]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ac:	4ba0      	ldr	r3, [pc, #640]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f023 020c 	bic.w	r2, r3, #12
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	499d      	ldr	r1, [pc, #628]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ce:	4b98      	ldr	r3, [pc, #608]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4994      	ldr	r1, [pc, #592]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064f0:	4b8f      	ldr	r3, [pc, #572]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	498c      	ldr	r1, [pc, #560]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006512:	4b87      	ldr	r3, [pc, #540]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	4983      	ldr	r1, [pc, #524]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006534:	4b7e      	ldr	r3, [pc, #504]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	497b      	ldr	r1, [pc, #492]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006556:	4b76      	ldr	r3, [pc, #472]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4972      	ldr	r1, [pc, #456]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006578:	4b6d      	ldr	r3, [pc, #436]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	496a      	ldr	r1, [pc, #424]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800659a:	4b65      	ldr	r3, [pc, #404]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	4961      	ldr	r1, [pc, #388]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065bc:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c2:	f023 0203 	bic.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	4959      	ldr	r1, [pc, #356]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065de:	4b54      	ldr	r3, [pc, #336]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4950      	ldr	r1, [pc, #320]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006600:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	4948      	ldr	r1, [pc, #288]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800661e:	d105      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006620:	4b43      	ldr	r3, [pc, #268]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a42      	ldr	r2, [pc, #264]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800662a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006638:	4b3d      	ldr	r3, [pc, #244]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	493a      	ldr	r1, [pc, #232]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006656:	d105      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4a34      	ldr	r2, [pc, #208]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006662:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d015      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006670:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	492c      	ldr	r1, [pc, #176]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800668e:	d105      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a26      	ldr	r2, [pc, #152]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d015      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066a8:	4b21      	ldr	r3, [pc, #132]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	491e      	ldr	r1, [pc, #120]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c6:	d105      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c8:	4b19      	ldr	r3, [pc, #100]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e0:	4b13      	ldr	r3, [pc, #76]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	4910      	ldr	r1, [pc, #64]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066fe:	d105      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	4a0a      	ldr	r2, [pc, #40]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	4902      	ldr	r1, [pc, #8]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800672e:	e001      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006730:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800673c:	d105      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800673e:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4a20      	ldr	r2, [pc, #128]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006748:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d015      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006764:	4917      	ldr	r1, [pc, #92]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d105      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006780:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d015      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	4909      	ldr	r1, [pc, #36]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ac:	d105      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000

080067c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e084      	b.n	80068e4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fb fcc9 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800681a:	d902      	bls.n	8006822 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e002      	b.n	8006828 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006826:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006830:	d007      	beq.n	8006842 <HAL_SPI_Init+0x7a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683a:	d002      	beq.n	8006842 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006852:	d903      	bls.n	800685c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
 800685a:	e002      	b.n	8006862 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	f003 0204 	and.w	r2, r3, #4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	ea42 0103 	orr.w	r1, r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_SPI_Transmit+0x22>
 800690a:	2302      	movs	r3, #2
 800690c:	e150      	b.n	8006bb0 <HAL_SPI_Transmit+0x2c4>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006916:	f7fc fa4f 	bl	8002db8 <HAL_GetTick>
 800691a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d002      	beq.n	8006932 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800692c:	2302      	movs	r3, #2
 800692e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006930:	e135      	b.n	8006b9e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_Transmit+0x52>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006942:	e12c      	b.n	8006b9e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2203      	movs	r2, #3
 8006948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698e:	d107      	bne.n	80069a0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800699e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d007      	beq.n	80069be <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069c6:	d94b      	bls.n	8006a60 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_SPI_Transmit+0xea>
 80069d0:	8afb      	ldrh	r3, [r7, #22]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d13e      	bne.n	8006a54 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069fa:	e02b      	b.n	8006a54 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d112      	bne.n	8006a30 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	1c9a      	adds	r2, r3, #2
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a2e:	e011      	b.n	8006a54 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a30:	f7fc f9c2 	bl	8002db8 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d803      	bhi.n	8006a48 <HAL_SPI_Transmit+0x15c>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a46:	d102      	bne.n	8006a4e <HAL_SPI_Transmit+0x162>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a52:	e0a4      	b.n	8006b9e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ce      	bne.n	80069fc <HAL_SPI_Transmit+0x110>
 8006a5e:	e07c      	b.n	8006b5a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_SPI_Transmit+0x182>
 8006a68:	8afb      	ldrh	r3, [r7, #22]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d170      	bne.n	8006b50 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d912      	bls.n	8006a9e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b02      	subs	r3, #2
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a9c:	e058      	b.n	8006b50 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ac4:	e044      	b.n	8006b50 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d12b      	bne.n	8006b2c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d912      	bls.n	8006b04 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	1c9a      	adds	r2, r3, #2
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b02      	subs	r3, #2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b02:	e025      	b.n	8006b50 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b2a:	e011      	b.n	8006b50 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b2c:	f7fc f944 	bl	8002db8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d803      	bhi.n	8006b44 <HAL_SPI_Transmit+0x258>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b42:	d102      	bne.n	8006b4a <HAL_SPI_Transmit+0x25e>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b4e:	e026      	b.n	8006b9e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1b5      	bne.n	8006ac6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f901 	bl	8006d66 <SPI_EndRxTxTransaction>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e000      	b.n	8006b9e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bae:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bc8:	e04c      	b.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd0:	d048      	beq.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006bd2:	f7fc f8f1 	bl	8002db8 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d902      	bls.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d13d      	bne.n	8006c64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c00:	d111      	bne.n	8006c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0a:	d004      	beq.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	d107      	bne.n	8006c26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2e:	d10f      	bne.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e00f      	b.n	8006c84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d1a3      	bne.n	8006bca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c9a:	e057      	b.n	8006d4c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ca2:	d106      	bne.n	8006cb2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb8:	d048      	beq.n	8006d4c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006cba:	f7fc f87d 	bl	8002db8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d902      	bls.n	8006cd0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d13d      	bne.n	8006d4c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce8:	d111      	bne.n	8006d0e <SPI_WaitFifoStateUntilTimeout+0x82>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf2:	d004      	beq.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d107      	bne.n	8006d0e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d16:	d10f      	bne.n	8006d38 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e008      	b.n	8006d5e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4013      	ands	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d19f      	bne.n	8006c9c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af02      	add	r7, sp, #8
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff ff84 	bl	8006c8c <SPI_WaitFifoStateUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e027      	b.n	8006dea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff ff07 	bl	8006bb8 <SPI_WaitFlagStateUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e014      	b.n	8006dea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff5d 	bl	8006c8c <SPI_WaitFifoStateUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e000      	b.n	8006dea <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e049      	b.n	8006e98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fb fe7b 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f000 fc51 	bl	80076d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d001      	beq.n	8006eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e019      	b.n	8006eec <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <HAL_TIM_Base_Start+0x58>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d00b      	beq.n	8006eea <HAL_TIM_Base_Start+0x4a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed8:	d007      	beq.n	8006eea <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	00010007 	.word	0x00010007

08006efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d001      	beq.n	8006f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e021      	b.n	8006f58 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <HAL_TIM_Base_Start_IT+0x68>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	d00b      	beq.n	8006f56 <HAL_TIM_Base_Start_IT+0x5a>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d007      	beq.n	8006f56 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	00010007 	.word	0x00010007

08006f68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	f244 4344 	movw	r3, #17476	; 0x4444
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e097      	b.n	800710a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fb fd34 	bl	8002a5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f000 fb5c 	bl	80076d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007048:	f023 0303 	bic.w	r3, r3, #3
 800704c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	4313      	orrs	r3, r2
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007066:	f023 030c 	bic.w	r3, r3, #12
 800706a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	4313      	orrs	r3, r2
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	011a      	lsls	r2, r3, #4
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	4313      	orrs	r3, r2
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80070ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	4313      	orrs	r3, r2
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b02      	cmp	r3, #2
 8007126:	d122      	bne.n	800716e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b02      	cmp	r3, #2
 8007134:	d11b      	bne.n	800716e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f06f 0202 	mvn.w	r2, #2
 800713e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 faa1 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 800715a:	e005      	b.n	8007168 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa93 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 faa4 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b04      	cmp	r3, #4
 800717a:	d122      	bne.n	80071c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b04      	cmp	r3, #4
 8007188:	d11b      	bne.n	80071c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f06f 0204 	mvn.w	r2, #4
 8007192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa77 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 80071ae:	e005      	b.n	80071bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa69 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa7a 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d122      	bne.n	8007216 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d11b      	bne.n	8007216 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f06f 0208 	mvn.w	r2, #8
 80071e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2204      	movs	r2, #4
 80071ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa4d 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 8007202:	e005      	b.n	8007210 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fa3f 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa50 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b10      	cmp	r3, #16
 8007222:	d122      	bne.n	800726a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d11b      	bne.n	800726a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f06f 0210 	mvn.w	r2, #16
 800723a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2208      	movs	r2, #8
 8007240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa23 	bl	800769c <HAL_TIM_IC_CaptureCallback>
 8007256:	e005      	b.n	8007264 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fa15 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa26 	bl	80076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10e      	bne.n	8007296 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	d107      	bne.n	8007296 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f06f 0201 	mvn.w	r2, #1
 800728e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f9ef 	bl	8007674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	d10e      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	2b80      	cmp	r3, #128	; 0x80
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fd5d 	bl	8007d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d0:	d10e      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d107      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fd50 	bl	8007d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d10e      	bne.n	800731c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d107      	bne.n	800731c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9d4 	bl	80076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b20      	cmp	r3, #32
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b20      	cmp	r3, #32
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0220 	mvn.w	r2, #32
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fd10 	bl	8007d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d10f      	bne.n	8007378 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fd16 	bl	8007da4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007386:	d10f      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007396:	d107      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80073a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fd08 	bl	8007db8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b6:	d10f      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c6:	d107      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80073d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fcfa 	bl	8007dcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073e6:	d10f      	bne.n	8007408 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fcec 	bl	8007de0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_TIM_ConfigClockSource+0x18>
 8007424:	2302      	movs	r3, #2
 8007426:	e0d2      	b.n	80075ce <HAL_TIM_ConfigClockSource+0x1be>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800744a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007464:	f000 80a9 	beq.w	80075ba <HAL_TIM_ConfigClockSource+0x1aa>
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746c:	d81a      	bhi.n	80074a4 <HAL_TIM_ConfigClockSource+0x94>
 800746e:	2b30      	cmp	r3, #48	; 0x30
 8007470:	f000 809a 	beq.w	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 8007474:	2b30      	cmp	r3, #48	; 0x30
 8007476:	d809      	bhi.n	800748c <HAL_TIM_ConfigClockSource+0x7c>
 8007478:	2b10      	cmp	r3, #16
 800747a:	f000 8095 	beq.w	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 800747e:	2b20      	cmp	r3, #32
 8007480:	f000 8092 	beq.w	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 808f 	beq.w	80075a8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800748a:	e097      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800748c:	2b50      	cmp	r3, #80	; 0x50
 800748e:	d05b      	beq.n	8007548 <HAL_TIM_ConfigClockSource+0x138>
 8007490:	2b50      	cmp	r3, #80	; 0x50
 8007492:	d802      	bhi.n	800749a <HAL_TIM_ConfigClockSource+0x8a>
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d077      	beq.n	8007588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007498:	e090      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800749a:	2b60      	cmp	r3, #96	; 0x60
 800749c:	d064      	beq.n	8007568 <HAL_TIM_ConfigClockSource+0x158>
 800749e:	2b70      	cmp	r3, #112	; 0x70
 80074a0:	d028      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80074a2:	e08b      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074a4:	4a4c      	ldr	r2, [pc, #304]	; (80075d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d07e      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 80074aa:	4a4b      	ldr	r2, [pc, #300]	; (80075d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d810      	bhi.n	80074d2 <HAL_TIM_ConfigClockSource+0xc2>
 80074b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b4:	d078      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 80074b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ba:	d803      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0xb4>
 80074bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c0:	d02f      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x112>
      break;
 80074c2:	e07b      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074c8:	d06e      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 80074ca:	4a44      	ldr	r2, [pc, #272]	; (80075dc <HAL_TIM_ConfigClockSource+0x1cc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d06b      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074d0:	e074      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074d2:	4a43      	ldr	r2, [pc, #268]	; (80075e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d067      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 80074d8:	4a41      	ldr	r2, [pc, #260]	; (80075e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d803      	bhi.n	80074e6 <HAL_TIM_ConfigClockSource+0xd6>
 80074de:	4a41      	ldr	r2, [pc, #260]	; (80075e4 <HAL_TIM_ConfigClockSource+0x1d4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d061      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074e4:	e06a      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074e6:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <HAL_TIM_ConfigClockSource+0x1d8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d05d      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
 80074ec:	4a3f      	ldr	r2, [pc, #252]	; (80075ec <HAL_TIM_ConfigClockSource+0x1dc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d05a      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074f2:	e063      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f000 fac8 	bl	8007a98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007516:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	609a      	str	r2, [r3, #8]
      break;
 8007520:	e04c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6899      	ldr	r1, [r3, #8]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f000 fab1 	bl	8007a98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007544:	609a      	str	r2, [r3, #8]
      break;
 8007546:	e039      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	461a      	mov	r2, r3
 8007556:	f000 fa23 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2150      	movs	r1, #80	; 0x50
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fa7c 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 8007566:	e029      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	461a      	mov	r2, r3
 8007576:	f000 fa42 	bl	80079fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2160      	movs	r1, #96	; 0x60
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fa6c 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 8007586:	e019      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	6859      	ldr	r1, [r3, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	461a      	mov	r2, r3
 8007596:	f000 fa03 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2140      	movs	r1, #64	; 0x40
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fa5c 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 80075a6:	e009      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f000 fa53 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 80075b8:	e000      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80075ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	00100030 	.word	0x00100030
 80075dc:	00100020 	.word	0x00100020
 80075e0:	00100050 	.word	0x00100050
 80075e4:	00100040 	.word	0x00100040
 80075e8:	00100060 	.word	0x00100060
 80075ec:	00100070 	.word	0x00100070

080075f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007604:	2302      	movs	r3, #2
 8007606:	e031      	b.n	800766c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f904 	bl	8007828 <TIM_SlaveTimer_SetConfig>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e018      	b.n	800766c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007648:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007658:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a46      	ldr	r2, [pc, #280]	; (8007804 <TIM_Base_SetConfig+0x12c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d017      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d013      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a43      	ldr	r2, [pc, #268]	; (8007808 <TIM_Base_SetConfig+0x130>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00f      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a42      	ldr	r2, [pc, #264]	; (800780c <TIM_Base_SetConfig+0x134>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00b      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a41      	ldr	r2, [pc, #260]	; (8007810 <TIM_Base_SetConfig+0x138>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d007      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a40      	ldr	r2, [pc, #256]	; (8007814 <TIM_Base_SetConfig+0x13c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_Base_SetConfig+0x48>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3f      	ldr	r2, [pc, #252]	; (8007818 <TIM_Base_SetConfig+0x140>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d108      	bne.n	8007732 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a33      	ldr	r2, [pc, #204]	; (8007804 <TIM_Base_SetConfig+0x12c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d023      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d01f      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a30      	ldr	r2, [pc, #192]	; (8007808 <TIM_Base_SetConfig+0x130>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01b      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2f      	ldr	r2, [pc, #188]	; (800780c <TIM_Base_SetConfig+0x134>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d017      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2e      	ldr	r2, [pc, #184]	; (8007810 <TIM_Base_SetConfig+0x138>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2d      	ldr	r2, [pc, #180]	; (8007814 <TIM_Base_SetConfig+0x13c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00f      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2d      	ldr	r2, [pc, #180]	; (800781c <TIM_Base_SetConfig+0x144>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00b      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2c      	ldr	r2, [pc, #176]	; (8007820 <TIM_Base_SetConfig+0x148>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2b      	ldr	r2, [pc, #172]	; (8007824 <TIM_Base_SetConfig+0x14c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_Base_SetConfig+0xaa>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a26      	ldr	r2, [pc, #152]	; (8007818 <TIM_Base_SetConfig+0x140>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d108      	bne.n	8007794 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a12      	ldr	r2, [pc, #72]	; (8007804 <TIM_Base_SetConfig+0x12c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <TIM_Base_SetConfig+0x110>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a14      	ldr	r2, [pc, #80]	; (8007814 <TIM_Base_SetConfig+0x13c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00f      	beq.n	80077e8 <TIM_Base_SetConfig+0x110>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a14      	ldr	r2, [pc, #80]	; (800781c <TIM_Base_SetConfig+0x144>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_Base_SetConfig+0x110>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a13      	ldr	r2, [pc, #76]	; (8007820 <TIM_Base_SetConfig+0x148>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_Base_SetConfig+0x110>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a12      	ldr	r2, [pc, #72]	; (8007824 <TIM_Base_SetConfig+0x14c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0x110>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <TIM_Base_SetConfig+0x140>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40013400 	.word	0x40013400
 8007818:	40015000 	.word	0x40015000
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007844:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007856:	f023 0307 	bic.w	r3, r3, #7
 800785a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b70      	cmp	r3, #112	; 0x70
 8007874:	d034      	beq.n	80078e0 <TIM_SlaveTimer_SetConfig+0xb8>
 8007876:	2b70      	cmp	r3, #112	; 0x70
 8007878:	d811      	bhi.n	800789e <TIM_SlaveTimer_SetConfig+0x76>
 800787a:	2b30      	cmp	r3, #48	; 0x30
 800787c:	d07d      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 800787e:	2b30      	cmp	r3, #48	; 0x30
 8007880:	d806      	bhi.n	8007890 <TIM_SlaveTimer_SetConfig+0x68>
 8007882:	2b10      	cmp	r3, #16
 8007884:	d079      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 8007886:	2b20      	cmp	r3, #32
 8007888:	d077      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d075      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800788e:	e075      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007890:	2b50      	cmp	r3, #80	; 0x50
 8007892:	d05e      	beq.n	8007952 <TIM_SlaveTimer_SetConfig+0x12a>
 8007894:	2b60      	cmp	r3, #96	; 0x60
 8007896:	d066      	beq.n	8007966 <TIM_SlaveTimer_SetConfig+0x13e>
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d02c      	beq.n	80078f6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800789c:	e06e      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800789e:	4a3a      	ldr	r2, [pc, #232]	; (8007988 <TIM_SlaveTimer_SetConfig+0x160>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d06a      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 80078a4:	4a38      	ldr	r2, [pc, #224]	; (8007988 <TIM_SlaveTimer_SetConfig+0x160>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d809      	bhi.n	80078be <TIM_SlaveTimer_SetConfig+0x96>
 80078aa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078ae:	d064      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 80078b0:	4a36      	ldr	r2, [pc, #216]	; (800798c <TIM_SlaveTimer_SetConfig+0x164>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d061      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 80078b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ba:	d05e      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078bc:	e05e      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078be:	4a34      	ldr	r2, [pc, #208]	; (8007990 <TIM_SlaveTimer_SetConfig+0x168>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d05a      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 80078c4:	4a32      	ldr	r2, [pc, #200]	; (8007990 <TIM_SlaveTimer_SetConfig+0x168>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d803      	bhi.n	80078d2 <TIM_SlaveTimer_SetConfig+0xaa>
 80078ca:	4a32      	ldr	r2, [pc, #200]	; (8007994 <TIM_SlaveTimer_SetConfig+0x16c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d054      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078d0:	e054      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078d2:	4a31      	ldr	r2, [pc, #196]	; (8007998 <TIM_SlaveTimer_SetConfig+0x170>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d050      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
 80078d8:	4a30      	ldr	r2, [pc, #192]	; (800799c <TIM_SlaveTimer_SetConfig+0x174>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d04d      	beq.n	800797a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078de:	e04d      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68d9      	ldr	r1, [r3, #12]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f000 f8d2 	bl	8007a98 <TIM_ETR_SetConfig>
      break;
 80078f4:	e042      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d004      	beq.n	8007908 <TIM_SlaveTimer_SetConfig+0xe0>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007906:	d101      	bne.n	800790c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e038      	b.n	800797e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0201 	bic.w	r2, r2, #1
 8007922:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007932:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	621a      	str	r2, [r3, #32]
      break;
 8007950:	e014      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6899      	ldr	r1, [r3, #8]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 f81e 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      break;
 8007964:	e00a      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 f843 	bl	80079fe <TIM_TI2_ConfigInputStage>
      break;
 8007978:	e000      	b.n	800797c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800797a:	bf00      	nop
  }
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	00100030 	.word	0x00100030
 800798c:	00100020 	.word	0x00100020
 8007990:	00100050 	.word	0x00100050
 8007994:	00100040 	.word	0x00100040
 8007998:	00100060 	.word	0x00100060
 800799c:	00100070 	.word	0x00100070

080079a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 030a 	bic.w	r3, r3, #10
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f023 0210 	bic.w	r2, r3, #16
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f043 0307 	orr.w	r3, r3, #7
 8007a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	021a      	lsls	r2, r3, #8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	609a      	str	r2, [r3, #8]
}
 8007acc:	bf00      	nop
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e074      	b.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a33      	ldr	r2, [pc, #204]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a31      	ldr	r2, [pc, #196]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d108      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d022      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b70:	d01d      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d018      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10c      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40015000 	.word	0x40015000
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	40014000 	.word	0x40014000

08007c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e096      	b.n	8007d4e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2d      	ldr	r2, [pc, #180]	; (8007d60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d106      	bne.n	8007cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a24      	ldr	r2, [pc, #144]	; (8007d5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d12b      	bne.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	051b      	lsls	r3, r3, #20
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d009      	beq.n	8007d2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d004      	beq.n	8007d2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d106      	bne.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	40012c00 	.word	0x40012c00
 8007d60:	40013400 	.word	0x40013400
 8007d64:	40015000 	.word	0x40015000

08007d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <LL_EXTI_EnableIT_0_31>:
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <LL_EXTI_EnableIT_0_31+0x20>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	4904      	ldr	r1, [pc, #16]	; (8007e14 <LL_EXTI_EnableIT_0_31+0x20>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	600b      	str	r3, [r1, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	40010400 	.word	0x40010400

08007e18 <LL_EXTI_EnableIT_32_63>:
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e22:	6a1a      	ldr	r2, [r3, #32]
 8007e24:	4904      	ldr	r1, [pc, #16]	; (8007e38 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	620b      	str	r3, [r1, #32]
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	40010400 	.word	0x40010400

08007e3c <LL_EXTI_DisableIT_0_31>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007e44:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <LL_EXTI_DisableIT_0_31+0x24>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	4904      	ldr	r1, [pc, #16]	; (8007e60 <LL_EXTI_DisableIT_0_31+0x24>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40010400 	.word	0x40010400

08007e64 <LL_EXTI_DisableIT_32_63>:
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	4904      	ldr	r1, [pc, #16]	; (8007e88 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	620b      	str	r3, [r1, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40010400 	.word	0x40010400

08007e8c <LL_EXTI_EnableEvent_0_31>:
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <LL_EXTI_EnableEvent_0_31+0x20>)
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	4904      	ldr	r1, [pc, #16]	; (8007eac <LL_EXTI_EnableEvent_0_31+0x20>)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	604b      	str	r3, [r1, #4]
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40010400 	.word	0x40010400

08007eb0 <LL_EXTI_EnableEvent_32_63>:
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ebc:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	40010400 	.word	0x40010400

08007ed4 <LL_EXTI_DisableEvent_0_31>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	604b      	str	r3, [r1, #4]
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010400 	.word	0x40010400

08007efc <LL_EXTI_DisableEvent_32_63>:
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	4904      	ldr	r1, [pc, #16]	; (8007f20 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010400 	.word	0x40010400

08007f24 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	4904      	ldr	r1, [pc, #16]	; (8007f44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	608b      	str	r3, [r1, #8]
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40010400 	.word	0x40010400

08007f48 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f54:	4904      	ldr	r1, [pc, #16]	; (8007f68 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010400 	.word	0x40010400

08007f6c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007f74:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	4904      	ldr	r1, [pc, #16]	; (8007f90 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	608b      	str	r3, [r1, #8]
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40010400 	.word	0x40010400

08007f94 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	4904      	ldr	r1, [pc, #16]	; (8007fb8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010400 	.word	0x40010400

08007fbc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	4904      	ldr	r1, [pc, #16]	; (8007fdc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60cb      	str	r3, [r1, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	40010400 	.word	0x40010400

08007fe0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4904      	ldr	r1, [pc, #16]	; (8008000 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	40010400 	.word	0x40010400

08008004 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	43db      	mvns	r3, r3
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008016:	4013      	ands	r3, r2
 8008018:	60cb      	str	r3, [r1, #12]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010400 	.word	0x40010400

0800802c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	43db      	mvns	r3, r3
 800803c:	4904      	ldr	r1, [pc, #16]	; (8008050 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800803e:	4013      	ands	r3, r2
 8008040:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40010400 	.word	0x40010400

08008054 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7a1b      	ldrb	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 80c8 	beq.w	80081fa <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d05d      	beq.n	800812e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7a5b      	ldrb	r3, [r3, #9]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d00e      	beq.n	8008098 <LL_EXTI_Init+0x44>
 800807a:	2b02      	cmp	r3, #2
 800807c:	d017      	beq.n	80080ae <LL_EXTI_Init+0x5a>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d120      	bne.n	80080c4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff ff24 	bl	8007ed4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff feaf 	bl	8007df4 <LL_EXTI_EnableIT_0_31>
          break;
 8008096:	e018      	b.n	80080ca <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff fecd 	bl	8007e3c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fef0 	bl	8007e8c <LL_EXTI_EnableEvent_0_31>
          break;
 80080ac:	e00d      	b.n	80080ca <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fe9e 	bl	8007df4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fee5 	bl	8007e8c <LL_EXTI_EnableEvent_0_31>
          break;
 80080c2:	e002      	b.n	80080ca <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80080c4:	2301      	movs	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
          break;
 80080c8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7a9b      	ldrb	r3, [r3, #10]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d02d      	beq.n	800812e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7a9b      	ldrb	r3, [r3, #10]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d00e      	beq.n	80080f8 <LL_EXTI_Init+0xa4>
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d017      	beq.n	800810e <LL_EXTI_Init+0xba>
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d120      	bne.n	8008124 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff ff8c 	bl	8008004 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff17 	bl	8007f24 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80080f6:	e01b      	b.n	8008130 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff35 	bl	8007f6c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff ff58 	bl	8007fbc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800810c:	e010      	b.n	8008130 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff ff06 	bl	8007f24 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff ff4d 	bl	8007fbc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008122:	e005      	b.n	8008130 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f043 0302 	orr.w	r3, r3, #2
 800812a:	60fb      	str	r3, [r7, #12]
            break;
 800812c:	e000      	b.n	8008130 <LL_EXTI_Init+0xdc>
        }
      }
 800812e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d075      	beq.n	8008224 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7a5b      	ldrb	r3, [r3, #9]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d00e      	beq.n	800815e <LL_EXTI_Init+0x10a>
 8008140:	2b02      	cmp	r3, #2
 8008142:	d017      	beq.n	8008174 <LL_EXTI_Init+0x120>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d120      	bne.n	800818a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff fed5 	bl	8007efc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff fe5e 	bl	8007e18 <LL_EXTI_EnableIT_32_63>
          break;
 800815c:	e01a      	b.n	8008194 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fe7e 	bl	8007e64 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff fe9f 	bl	8007eb0 <LL_EXTI_EnableEvent_32_63>
          break;
 8008172:	e00f      	b.n	8008194 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fe4d 	bl	8007e18 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff fe94 	bl	8007eb0 <LL_EXTI_EnableEvent_32_63>
          break;
 8008188:	e004      	b.n	8008194 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f043 0304 	orr.w	r3, r3, #4
 8008190:	60fb      	str	r3, [r7, #12]
          break;
 8008192:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	7a9b      	ldrb	r3, [r3, #10]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d043      	beq.n	8008224 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7a9b      	ldrb	r3, [r3, #10]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d00e      	beq.n	80081c2 <LL_EXTI_Init+0x16e>
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d017      	beq.n	80081d8 <LL_EXTI_Init+0x184>
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d120      	bne.n	80081ee <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ff3b 	bl	800802c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff fec4 	bl	8007f48 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80081c0:	e031      	b.n	8008226 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fee4 	bl	8007f94 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff ff05 	bl	8007fe0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081d6:	e026      	b.n	8008226 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff feb3 	bl	8007f48 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fefa 	bl	8007fe0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081ec:	e01b      	b.n	8008226 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f043 0305 	orr.w	r3, r3, #5
 80081f4:	60fb      	str	r3, [r7, #12]
            break;
 80081f6:	bf00      	nop
 80081f8:	e015      	b.n	8008226 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fe1c 	bl	8007e3c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff fe63 	bl	8007ed4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fe26 	bl	8007e64 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fe6d 	bl	8007efc <LL_EXTI_DisableEvent_32_63>
 8008222:	e000      	b.n	8008226 <LL_EXTI_Init+0x1d2>
      }
 8008224:	bf00      	nop
  }

  return status;
 8008226:	68fb      	ldr	r3, [r7, #12]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <LL_GPIO_SetPinMode>:
{
 8008230:	b480      	push	{r7}
 8008232:	b089      	sub	sp, #36	; 0x24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	fa93 f3a3 	rbit	r3, r3
 800824a:	613b      	str	r3, [r7, #16]
  return result;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	fab3 f383 	clz	r3, r3
 8008252:	b2db      	uxtb	r3, r3
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	2103      	movs	r1, #3
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	43db      	mvns	r3, r3
 800825e:	401a      	ands	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	fa93 f3a3 	rbit	r3, r3
 800826a:	61bb      	str	r3, [r7, #24]
  return result;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	fab3 f383 	clz	r3, r3
 8008272:	b2db      	uxtb	r3, r3
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	fa01 f303 	lsl.w	r3, r1, r3
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]
}
 8008282:	bf00      	nop
 8008284:	3724      	adds	r7, #36	; 0x24
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <LL_GPIO_SetPinOutputType>:
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	43db      	mvns	r3, r3
 80082a2:	401a      	ands	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	605a      	str	r2, [r3, #4]
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_GPIO_SetPinSpeed>:
{
 80082be:	b480      	push	{r7}
 80082c0:	b089      	sub	sp, #36	; 0x24
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	fa93 f3a3 	rbit	r3, r3
 80082d8:	613b      	str	r3, [r7, #16]
  return result;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	fab3 f383 	clz	r3, r3
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	2103      	movs	r1, #3
 80082e6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ea:	43db      	mvns	r3, r3
 80082ec:	401a      	ands	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	fa93 f3a3 	rbit	r3, r3
 80082f8:	61bb      	str	r3, [r7, #24]
  return result;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	fab3 f383 	clz	r3, r3
 8008300:	b2db      	uxtb	r3, r3
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	431a      	orrs	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	609a      	str	r2, [r3, #8]
}
 8008310:	bf00      	nop
 8008312:	3724      	adds	r7, #36	; 0x24
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <LL_GPIO_SetPinPull>:
{
 800831c:	b480      	push	{r7}
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	fa93 f3a3 	rbit	r3, r3
 8008336:	613b      	str	r3, [r7, #16]
  return result;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	fab3 f383 	clz	r3, r3
 800833e:	b2db      	uxtb	r3, r3
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	2103      	movs	r1, #3
 8008344:	fa01 f303 	lsl.w	r3, r1, r3
 8008348:	43db      	mvns	r3, r3
 800834a:	401a      	ands	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	fa93 f3a3 	rbit	r3, r3
 8008356:	61bb      	str	r3, [r7, #24]
  return result;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	fab3 f383 	clz	r3, r3
 800835e:	b2db      	uxtb	r3, r3
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	fa01 f303 	lsl.w	r3, r1, r3
 8008368:	431a      	orrs	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	60da      	str	r2, [r3, #12]
}
 800836e:	bf00      	nop
 8008370:	3724      	adds	r7, #36	; 0x24
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <LL_GPIO_SetAFPin_0_7>:
{
 800837a:	b480      	push	{r7}
 800837c:	b089      	sub	sp, #36	; 0x24
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1a      	ldr	r2, [r3, #32]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	fa93 f3a3 	rbit	r3, r3
 8008394:	613b      	str	r3, [r7, #16]
  return result;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	fab3 f383 	clz	r3, r3
 800839c:	b2db      	uxtb	r3, r3
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	210f      	movs	r1, #15
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	43db      	mvns	r3, r3
 80083a8:	401a      	ands	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	fa93 f3a3 	rbit	r3, r3
 80083b4:	61bb      	str	r3, [r7, #24]
  return result;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	fab3 f383 	clz	r3, r3
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	fa01 f303 	lsl.w	r3, r1, r3
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	621a      	str	r2, [r3, #32]
}
 80083cc:	bf00      	nop
 80083ce:	3724      	adds	r7, #36	; 0x24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <LL_GPIO_SetAFPin_8_15>:
{
 80083d8:	b480      	push	{r7}
 80083da:	b089      	sub	sp, #36	; 0x24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	fa93 f3a3 	rbit	r3, r3
 80083f4:	613b      	str	r3, [r7, #16]
  return result;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	fab3 f383 	clz	r3, r3
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	210f      	movs	r1, #15
 8008402:	fa01 f303 	lsl.w	r3, r1, r3
 8008406:	43db      	mvns	r3, r3
 8008408:	401a      	ands	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	0a1b      	lsrs	r3, r3, #8
 800840e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	fa93 f3a3 	rbit	r3, r3
 8008416:	61bb      	str	r3, [r7, #24]
  return result;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	fab3 f383 	clz	r3, r3
 800841e:	b2db      	uxtb	r3, r3
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	fa01 f303 	lsl.w	r3, r1, r3
 8008428:	431a      	orrs	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800842e:	bf00      	nop
 8008430:	3724      	adds	r7, #36	; 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	fa93 f3a3 	rbit	r3, r3
 8008450:	60bb      	str	r3, [r7, #8]
  return result;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	fab3 f383 	clz	r3, r3
 8008458:	b2db      	uxtb	r3, r3
 800845a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800845c:	e040      	b.n	80084e0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	2101      	movs	r1, #1
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	4013      	ands	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d032      	beq.n	80084da <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	461a      	mov	r2, r3
 800847a:	6939      	ldr	r1, [r7, #16]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff fed7 	bl	8008230 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d003      	beq.n	8008492 <LL_GPIO_Init+0x58>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d106      	bne.n	80084a0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	461a      	mov	r2, r3
 8008498:	6939      	ldr	r1, [r7, #16]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ff0f 	bl	80082be <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	461a      	mov	r2, r3
 80084a6:	6939      	ldr	r1, [r7, #16]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ff37 	bl	800831c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d111      	bne.n	80084da <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2bff      	cmp	r3, #255	; 0xff
 80084ba:	d807      	bhi.n	80084cc <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6939      	ldr	r1, [r7, #16]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff ff58 	bl	800837a <LL_GPIO_SetAFPin_0_7>
 80084ca:	e006      	b.n	80084da <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6939      	ldr	r1, [r7, #16]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ff7f 	bl	80083d8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	3301      	adds	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1b7      	bne.n	800845e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d003      	beq.n	80084fe <LL_GPIO_Init+0xc4>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d107      	bne.n	800850e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6819      	ldr	r1, [r3, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	461a      	mov	r2, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fec0 	bl	800828e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b087      	sub	sp, #28
 800851c:	af02      	add	r7, sp, #8
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	4611      	mov	r1, r2
 8008524:	461a      	mov	r2, r3
 8008526:	4623      	mov	r3, r4
 8008528:	80fb      	strh	r3, [r7, #6]
 800852a:	4603      	mov	r3, r0
 800852c:	80bb      	strh	r3, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	807b      	strh	r3, [r7, #2]
 8008532:	4613      	mov	r3, r2
 8008534:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800853a:	7bfa      	ldrb	r2, [r7, #15]
 800853c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008540:	429a      	cmp	r2, r3
 8008542:	d93a      	bls.n	80085ba <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8008544:	88ba      	ldrh	r2, [r7, #4]
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	441a      	add	r2, r3
 800854a:	88b9      	ldrh	r1, [r7, #4]
 800854c:	883b      	ldrh	r3, [r7, #0]
 800854e:	4419      	add	r1, r3
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	1acb      	subs	r3, r1, r3
 8008554:	429a      	cmp	r2, r3
 8008556:	f000 8090 	beq.w	800867a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800855a:	88fa      	ldrh	r2, [r7, #6]
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	441a      	add	r2, r3
 8008560:	88f9      	ldrh	r1, [r7, #6]
 8008562:	887b      	ldrh	r3, [r7, #2]
 8008564:	4419      	add	r1, r3
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	1acb      	subs	r3, r1, r3
 800856a:	429a      	cmp	r2, r3
 800856c:	f000 8085 	beq.w	800867a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	b29a      	uxth	r2, r3
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	4413      	add	r3, r2
 8008578:	b298      	uxth	r0, r3
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	b29a      	uxth	r2, r3
 800857e:	88bb      	ldrh	r3, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	b299      	uxth	r1, r3
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	b29b      	uxth	r3, r3
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	b29b      	uxth	r3, r3
 800858c:	887a      	ldrh	r2, [r7, #2]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	b29b      	uxth	r3, r3
 8008592:	3301      	adds	r3, #1
 8008594:	b29c      	uxth	r4, r3
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	b29b      	uxth	r3, r3
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	b29b      	uxth	r3, r3
 800859e:	883a      	ldrh	r2, [r7, #0]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3301      	adds	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	2304      	movs	r3, #4
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	8c3b      	ldrh	r3, [r7, #32]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	4622      	mov	r2, r4
 80085b4:	f000 fd32 	bl	800901c <ILI9341_Draw_Rectangle>
				goto finish;
 80085b8:	e060      	b.n	800867c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	b29a      	uxth	r2, r3
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	4413      	add	r3, r2
 80085c2:	b298      	uxth	r0, r3
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	88bb      	ldrh	r3, [r7, #4]
 80085ca:	4413      	add	r3, r2
 80085cc:	b299      	uxth	r1, r3
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	887a      	ldrh	r2, [r7, #2]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	b29a      	uxth	r2, r3
 80085dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f000 fda1 	bl	8009128 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	4413      	add	r3, r2
 80085ee:	b298      	uxth	r0, r3
										(y + h) - b,
 80085f0:	88ba      	ldrh	r2, [r7, #4]
 80085f2:	883b      	ldrh	r3, [r7, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	b299      	uxth	r1, r3
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	b29b      	uxth	r3, r3
 8008604:	887a      	ldrh	r2, [r7, #2]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	b29a      	uxth	r2, r3
 800860a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800860e:	b29b      	uxth	r3, r3
 8008610:	f000 fd8a 	bl	8009128 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	b29a      	uxth	r2, r3
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	4413      	add	r3, r2
 800861c:	b298      	uxth	r0, r3
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	b29a      	uxth	r2, r3
 8008622:	88bb      	ldrh	r3, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	b299      	uxth	r1, r3
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	b29b      	uxth	r3, r3
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	b29b      	uxth	r3, r3
 8008630:	883a      	ldrh	r2, [r7, #0]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	b29a      	uxth	r2, r3
 8008636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800863a:	b29b      	uxth	r3, r3
 800863c:	f000 fdbc 	bl	80091b8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	4413      	add	r3, r2
 8008646:	b29a      	uxth	r2, r3
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	b29b      	uxth	r3, r3
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	b298      	uxth	r0, r3
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	b29a      	uxth	r2, r3
 8008654:	88bb      	ldrh	r3, [r7, #4]
 8008656:	4413      	add	r3, r2
 8008658:	b299      	uxth	r1, r3
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	b29b      	uxth	r3, r3
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	b29b      	uxth	r3, r3
 8008662:	883a      	ldrh	r2, [r7, #0]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b29a      	uxth	r2, r3
 8008668:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800866c:	b29b      	uxth	r3, r3
 800866e:	f000 fda3 	bl	80091b8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	3301      	adds	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8008678:	e75f      	b.n	800853a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800867a:	bf00      	nop
	// done
	return;
 800867c:	bf00      	nop
}
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}

08008684 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b089      	sub	sp, #36	; 0x24
 8008688:	af02      	add	r7, sp, #8
 800868a:	4604      	mov	r4, r0
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	4623      	mov	r3, r4
 8008694:	71fb      	strb	r3, [r7, #7]
 8008696:	4603      	mov	r3, r0
 8008698:	80bb      	strh	r3, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	807b      	strh	r3, [r7, #2]
 800869e:	4613      	mov	r3, r2
 80086a0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b1f      	cmp	r3, #31
 80086aa:	d802      	bhi.n	80086b2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	71fb      	strb	r3, [r7, #7]
 80086b0:	e002      	b.n	80086b8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	3b20      	subs	r3, #32
 80086b6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086b8:	2300      	movs	r3, #0
 80086ba:	753b      	strb	r3, [r7, #20]
 80086bc:	e012      	b.n	80086e4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80086be:	7dfa      	ldrb	r2, [r7, #23]
 80086c0:	7d38      	ldrb	r0, [r7, #20]
 80086c2:	7d39      	ldrb	r1, [r7, #20]
 80086c4:	4c48      	ldr	r4, [pc, #288]	; (80087e8 <ILI9341_Draw_Char+0x164>)
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4423      	add	r3, r4
 80086d0:	4403      	add	r3, r0
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	f107 0318 	add.w	r3, r7, #24
 80086d8:	440b      	add	r3, r1
 80086da:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086de:	7d3b      	ldrb	r3, [r7, #20]
 80086e0:	3301      	adds	r3, #1
 80086e2:	753b      	strb	r3, [r7, #20]
 80086e4:	7d3b      	ldrb	r3, [r7, #20]
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	d9e9      	bls.n	80086be <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80086ea:	2300      	movs	r3, #0
 80086ec:	757b      	strb	r3, [r7, #21]
 80086ee:	e074      	b.n	80087da <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80086f0:	2300      	movs	r3, #0
 80086f2:	75bb      	strb	r3, [r7, #22]
 80086f4:	e06b      	b.n	80087ce <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80086f6:	7d7b      	ldrb	r3, [r7, #21]
 80086f8:	f107 0218 	add.w	r2, r7, #24
 80086fc:	4413      	add	r3, r2
 80086fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008702:	461a      	mov	r2, r3
 8008704:	7dbb      	ldrb	r3, [r7, #22]
 8008706:	fa42 f303 	asr.w	r3, r2, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d02d      	beq.n	800876e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008714:	2b01      	cmp	r3, #1
 8008716:	d10e      	bne.n	8008736 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008718:	7d7b      	ldrb	r3, [r7, #21]
 800871a:	b29a      	uxth	r2, r3
 800871c:	88bb      	ldrh	r3, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	b298      	uxth	r0, r3
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	b29a      	uxth	r2, r3
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	4413      	add	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	883a      	ldrh	r2, [r7, #0]
 800872e:	4619      	mov	r1, r3
 8008730:	f000 fb9a 	bl	8008e68 <ILI9341_Draw_Pixel>
 8008734:	e048      	b.n	80087c8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008736:	7d7b      	ldrb	r3, [r7, #21]
 8008738:	b29b      	uxth	r3, r3
 800873a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800873c:	fb12 f303 	smulbb	r3, r2, r3
 8008740:	b29a      	uxth	r2, r3
 8008742:	88bb      	ldrh	r3, [r7, #4]
 8008744:	4413      	add	r3, r2
 8008746:	b298      	uxth	r0, r3
 8008748:	7dbb      	ldrb	r3, [r7, #22]
 800874a:	b29b      	uxth	r3, r3
 800874c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800874e:	fb12 f303 	smulbb	r3, r2, r3
 8008752:	b29a      	uxth	r2, r3
 8008754:	887b      	ldrh	r3, [r7, #2]
 8008756:	4413      	add	r3, r2
 8008758:	b299      	uxth	r1, r3
 800875a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800875c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800875e:	2301      	movs	r3, #1
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	883b      	ldrh	r3, [r7, #0]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	4623      	mov	r3, r4
 8008768:	f000 fc58 	bl	800901c <ILI9341_Draw_Rectangle>
 800876c:	e02c      	b.n	80087c8 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800876e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008770:	2b01      	cmp	r3, #1
 8008772:	d10e      	bne.n	8008792 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008774:	7d7b      	ldrb	r3, [r7, #21]
 8008776:	b29a      	uxth	r2, r3
 8008778:	88bb      	ldrh	r3, [r7, #4]
 800877a:	4413      	add	r3, r2
 800877c:	b298      	uxth	r0, r3
 800877e:	7dbb      	ldrb	r3, [r7, #22]
 8008780:	b29a      	uxth	r2, r3
 8008782:	887b      	ldrh	r3, [r7, #2]
 8008784:	4413      	add	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800878a:	4619      	mov	r1, r3
 800878c:	f000 fb6c 	bl	8008e68 <ILI9341_Draw_Pixel>
 8008790:	e01a      	b.n	80087c8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008792:	7d7b      	ldrb	r3, [r7, #21]
 8008794:	b29b      	uxth	r3, r3
 8008796:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008798:	fb12 f303 	smulbb	r3, r2, r3
 800879c:	b29a      	uxth	r2, r3
 800879e:	88bb      	ldrh	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	b298      	uxth	r0, r3
 80087a4:	7dbb      	ldrb	r3, [r7, #22]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087aa:	fb12 f303 	smulbb	r3, r2, r3
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	887b      	ldrh	r3, [r7, #2]
 80087b2:	4413      	add	r3, r2
 80087b4:	b299      	uxth	r1, r3
 80087b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80087b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087ba:	2301      	movs	r3, #1
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4623      	mov	r3, r4
 80087c4:	f000 fc2a 	bl	800901c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80087c8:	7dbb      	ldrb	r3, [r7, #22]
 80087ca:	3301      	adds	r3, #1
 80087cc:	75bb      	strb	r3, [r7, #22]
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d990      	bls.n	80086f6 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80087d4:	7d7b      	ldrb	r3, [r7, #21]
 80087d6:	3301      	adds	r3, #1
 80087d8:	757b      	strb	r3, [r7, #21]
 80087da:	7d7b      	ldrb	r3, [r7, #21]
 80087dc:	2b05      	cmp	r3, #5
 80087de:	d987      	bls.n	80086f0 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd90      	pop	{r4, r7, pc}
 80087e8:	0800a4d0 	.word	0x0800a4d0

080087ec <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	817b      	strh	r3, [r7, #10]
 80087fe:	460b      	mov	r3, r1
 8008800:	813b      	strh	r3, [r7, #8]
 8008802:	4613      	mov	r3, r2
 8008804:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008806:	e016      	b.n	8008836 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	60fa      	str	r2, [r7, #12]
 800880e:	7818      	ldrb	r0, [r3, #0]
 8008810:	88fc      	ldrh	r4, [r7, #6]
 8008812:	893a      	ldrh	r2, [r7, #8]
 8008814:	8979      	ldrh	r1, [r7, #10]
 8008816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	8c3b      	ldrh	r3, [r7, #32]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4623      	mov	r3, r4
 8008820:	f7ff ff30 	bl	8008684 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008824:	8c3b      	ldrh	r3, [r7, #32]
 8008826:	461a      	mov	r2, r3
 8008828:	0052      	lsls	r2, r2, #1
 800882a:	4413      	add	r3, r2
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	897b      	ldrh	r3, [r7, #10]
 8008832:	4413      	add	r3, r2
 8008834:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e4      	bne.n	8008808 <ILI9341_Draw_Text+0x1c>
    }


}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
	...

08008848 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <ILI9341_SPI_Init+0x1c>)
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	4a04      	ldr	r2, [pc, #16]	; (8008864 <ILI9341_SPI_Init+0x1c>)
 8008852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008856:	6153      	str	r3, [r2, #20]
}
 8008858:	bf00      	nop
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	48000400 	.word	0x48000400

08008868 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8008872:	1df9      	adds	r1, r7, #7
 8008874:	2301      	movs	r3, #1
 8008876:	2201      	movs	r2, #1
 8008878:	4804      	ldr	r0, [pc, #16]	; (800888c <ILI9341_SPI_Send+0x24>)
 800887a:	f7fe f837 	bl	80068ec <HAL_SPI_Transmit>
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000de8 	.word	0x20000de8

08008890 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <ILI9341_Write_Command+0x40>)
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <ILI9341_Write_Command+0x40>)
 80088a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088a4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <ILI9341_Write_Command+0x40>)
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	4a09      	ldr	r2, [pc, #36]	; (80088d0 <ILI9341_Write_Command+0x40>)
 80088ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff ffd7 	bl	8008868 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80088ba:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <ILI9341_Write_Command+0x40>)
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	4a04      	ldr	r2, [pc, #16]	; (80088d0 <ILI9341_Write_Command+0x40>)
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	6153      	str	r3, [r2, #20]
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	48000400 	.word	0x48000400

080088d4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <ILI9341_Write_Data+0x40>)
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	4a0c      	ldr	r2, [pc, #48]	; (8008914 <ILI9341_Write_Data+0x40>)
 80088e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <ILI9341_Write_Data+0x40>)
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	4a09      	ldr	r2, [pc, #36]	; (8008914 <ILI9341_Write_Data+0x40>)
 80088f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f4:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff ffb5 	bl	8008868 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <ILI9341_Write_Data+0x40>)
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	4a04      	ldr	r2, [pc, #16]	; (8008914 <ILI9341_Write_Data+0x40>)
 8008904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008908:	6153      	str	r3, [r2, #20]
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	48000400 	.word	0x48000400

08008918 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	461a      	mov	r2, r3
 8008926:	4623      	mov	r3, r4
 8008928:	80fb      	strh	r3, [r7, #6]
 800892a:	4603      	mov	r3, r0
 800892c:	80bb      	strh	r3, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	807b      	strh	r3, [r7, #2]
 8008932:	4613      	mov	r3, r2
 8008934:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008936:	202a      	movs	r0, #42	; 0x2a
 8008938:	f7ff ffaa 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	b29b      	uxth	r3, r3
 8008942:	b2db      	uxtb	r3, r3
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff ffc5 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff ffc0 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008954:	887b      	ldrh	r3, [r7, #2]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b29b      	uxth	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff ffb9 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8008962:	887b      	ldrh	r3, [r7, #2]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff ffb4 	bl	80088d4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 800896c:	202b      	movs	r0, #43	; 0x2b
 800896e:	f7ff ff8f 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8008972:	88bb      	ldrh	r3, [r7, #4]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	b29b      	uxth	r3, r3
 8008978:	b2db      	uxtb	r3, r3
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff ffaa 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008980:	88bb      	ldrh	r3, [r7, #4]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff ffa5 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 800898a:	883b      	ldrh	r3, [r7, #0]
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	b29b      	uxth	r3, r3
 8008990:	b2db      	uxtb	r3, r3
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ff9e 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008998:	883b      	ldrh	r3, [r7, #0]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff ff99 	bl	80088d4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80089a2:	202c      	movs	r0, #44	; 0x2c
 80089a4:	f7ff ff74 	bl	8008890 <ILI9341_Write_Command>
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}

080089b0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <ILI9341_Reset+0x38>)
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	4a0b      	ldr	r2, [pc, #44]	; (80089e8 <ILI9341_Reset+0x38>)
 80089ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089be:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089c0:	20c8      	movs	r0, #200	; 0xc8
 80089c2:	f7fa fa05 	bl	8002dd0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089c6:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <ILI9341_Reset+0x38>)
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <ILI9341_Reset+0x38>)
 80089cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089d2:	20c8      	movs	r0, #200	; 0xc8
 80089d4:	f7fa f9fc 	bl	8002dd0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80089d8:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <ILI9341_Reset+0x38>)
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	4a02      	ldr	r2, [pc, #8]	; (80089e8 <ILI9341_Reset+0x38>)
 80089de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089e2:	6153      	str	r3, [r2, #20]
}
 80089e4:	bf00      	nop
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	48000400 	.word	0x48000400

080089ec <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 80089fa:	2036      	movs	r0, #54	; 0x36
 80089fc:	f7ff ff48 	bl	8008890 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d836      	bhi.n	8008a74 <ILI9341_Set_Rotation+0x88>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <ILI9341_Set_Rotation+0x20>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a33 	.word	0x08008a33
 8008a14:	08008a49 	.word	0x08008a49
 8008a18:	08008a5f 	.word	0x08008a5f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008a1c:	2048      	movs	r0, #72	; 0x48
 8008a1e:	f7ff ff59 	bl	80088d4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <ILI9341_Set_Rotation+0x94>)
 8008a24:	22f0      	movs	r2, #240	; 0xf0
 8008a26:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a28:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <ILI9341_Set_Rotation+0x98>)
 8008a2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a2e:	801a      	strh	r2, [r3, #0]
			break;
 8008a30:	e021      	b.n	8008a76 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008a32:	2028      	movs	r0, #40	; 0x28
 8008a34:	f7ff ff4e 	bl	80088d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a38:	4b11      	ldr	r3, [pc, #68]	; (8008a80 <ILI9341_Set_Rotation+0x94>)
 8008a3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a3e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <ILI9341_Set_Rotation+0x98>)
 8008a42:	22f0      	movs	r2, #240	; 0xf0
 8008a44:	801a      	strh	r2, [r3, #0]
			break;
 8008a46:	e016      	b.n	8008a76 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008a48:	2088      	movs	r0, #136	; 0x88
 8008a4a:	f7ff ff43 	bl	80088d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <ILI9341_Set_Rotation+0x94>)
 8008a50:	22f0      	movs	r2, #240	; 0xf0
 8008a52:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a54:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <ILI9341_Set_Rotation+0x98>)
 8008a56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a5a:	801a      	strh	r2, [r3, #0]
			break;
 8008a5c:	e00b      	b.n	8008a76 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008a5e:	20e8      	movs	r0, #232	; 0xe8
 8008a60:	f7ff ff38 	bl	80088d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <ILI9341_Set_Rotation+0x94>)
 8008a66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <ILI9341_Set_Rotation+0x98>)
 8008a6e:	22f0      	movs	r2, #240	; 0xf0
 8008a70:	801a      	strh	r2, [r3, #0]
			break;
 8008a72:	e000      	b.n	8008a76 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008a74:	bf00      	nop
	}
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	2000001e 	.word	0x2000001e
 8008a84:	2000001c 	.word	0x2000001c

08008a88 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <ILI9341_Enable+0x1c>)
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <ILI9341_Enable+0x1c>)
 8008a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a96:	6153      	str	r3, [r2, #20]
}
 8008a98:	bf00      	nop
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	48000400 	.word	0x48000400

08008aa8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008aac:	f7ff ffec 	bl	8008a88 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008ab0:	f7ff feca 	bl	8008848 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008ab4:	f7ff ff7c 	bl	80089b0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f7ff fee9 	bl	8008890 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008abe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ac2:	f7fa f985 	bl	8002dd0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008ac6:	20cb      	movs	r0, #203	; 0xcb
 8008ac8:	f7ff fee2 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008acc:	2039      	movs	r0, #57	; 0x39
 8008ace:	f7ff ff01 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008ad2:	202c      	movs	r0, #44	; 0x2c
 8008ad4:	f7ff fefe 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f7ff fefb 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008ade:	2034      	movs	r0, #52	; 0x34
 8008ae0:	f7ff fef8 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008ae4:	2002      	movs	r0, #2
 8008ae6:	f7ff fef5 	bl	80088d4 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008aea:	20cf      	movs	r0, #207	; 0xcf
 8008aec:	f7ff fed0 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008af0:	2000      	movs	r0, #0
 8008af2:	f7ff feef 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008af6:	20c1      	movs	r0, #193	; 0xc1
 8008af8:	f7ff feec 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008afc:	2030      	movs	r0, #48	; 0x30
 8008afe:	f7ff fee9 	bl	80088d4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008b02:	20e8      	movs	r0, #232	; 0xe8
 8008b04:	f7ff fec4 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008b08:	2085      	movs	r0, #133	; 0x85
 8008b0a:	f7ff fee3 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f7ff fee0 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008b14:	2078      	movs	r0, #120	; 0x78
 8008b16:	f7ff fedd 	bl	80088d4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008b1a:	20ea      	movs	r0, #234	; 0xea
 8008b1c:	f7ff feb8 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008b20:	2000      	movs	r0, #0
 8008b22:	f7ff fed7 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008b26:	2000      	movs	r0, #0
 8008b28:	f7ff fed4 	bl	80088d4 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008b2c:	20ed      	movs	r0, #237	; 0xed
 8008b2e:	f7ff feaf 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008b32:	2064      	movs	r0, #100	; 0x64
 8008b34:	f7ff fece 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008b38:	2003      	movs	r0, #3
 8008b3a:	f7ff fecb 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008b3e:	2012      	movs	r0, #18
 8008b40:	f7ff fec8 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008b44:	2081      	movs	r0, #129	; 0x81
 8008b46:	f7ff fec5 	bl	80088d4 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008b4a:	20f7      	movs	r0, #247	; 0xf7
 8008b4c:	f7ff fea0 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008b50:	2020      	movs	r0, #32
 8008b52:	f7ff febf 	bl	80088d4 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008b56:	20c0      	movs	r0, #192	; 0xc0
 8008b58:	f7ff fe9a 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008b5c:	2023      	movs	r0, #35	; 0x23
 8008b5e:	f7ff feb9 	bl	80088d4 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008b62:	20c1      	movs	r0, #193	; 0xc1
 8008b64:	f7ff fe94 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008b68:	2010      	movs	r0, #16
 8008b6a:	f7ff feb3 	bl	80088d4 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008b6e:	20c5      	movs	r0, #197	; 0xc5
 8008b70:	f7ff fe8e 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008b74:	203e      	movs	r0, #62	; 0x3e
 8008b76:	f7ff fead 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008b7a:	2028      	movs	r0, #40	; 0x28
 8008b7c:	f7ff feaa 	bl	80088d4 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008b80:	20c7      	movs	r0, #199	; 0xc7
 8008b82:	f7ff fe85 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008b86:	2086      	movs	r0, #134	; 0x86
 8008b88:	f7ff fea4 	bl	80088d4 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008b8c:	2036      	movs	r0, #54	; 0x36
 8008b8e:	f7ff fe7f 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008b92:	2048      	movs	r0, #72	; 0x48
 8008b94:	f7ff fe9e 	bl	80088d4 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008b98:	203a      	movs	r0, #58	; 0x3a
 8008b9a:	f7ff fe79 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008b9e:	2055      	movs	r0, #85	; 0x55
 8008ba0:	f7ff fe98 	bl	80088d4 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008ba4:	20b1      	movs	r0, #177	; 0xb1
 8008ba6:	f7ff fe73 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008baa:	2000      	movs	r0, #0
 8008bac:	f7ff fe92 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008bb0:	2018      	movs	r0, #24
 8008bb2:	f7ff fe8f 	bl	80088d4 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008bb6:	20b6      	movs	r0, #182	; 0xb6
 8008bb8:	f7ff fe6a 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008bbc:	2008      	movs	r0, #8
 8008bbe:	f7ff fe89 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008bc2:	2082      	movs	r0, #130	; 0x82
 8008bc4:	f7ff fe86 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008bc8:	2027      	movs	r0, #39	; 0x27
 8008bca:	f7ff fe83 	bl	80088d4 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008bce:	20f2      	movs	r0, #242	; 0xf2
 8008bd0:	f7ff fe5e 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f7ff fe7d 	bl	80088d4 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008bda:	2026      	movs	r0, #38	; 0x26
 8008bdc:	f7ff fe58 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008be0:	2001      	movs	r0, #1
 8008be2:	f7ff fe77 	bl	80088d4 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008be6:	20e0      	movs	r0, #224	; 0xe0
 8008be8:	f7ff fe52 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008bec:	200f      	movs	r0, #15
 8008bee:	f7ff fe71 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008bf2:	2031      	movs	r0, #49	; 0x31
 8008bf4:	f7ff fe6e 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008bf8:	202b      	movs	r0, #43	; 0x2b
 8008bfa:	f7ff fe6b 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008bfe:	200c      	movs	r0, #12
 8008c00:	f7ff fe68 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c04:	200e      	movs	r0, #14
 8008c06:	f7ff fe65 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008c0a:	2008      	movs	r0, #8
 8008c0c:	f7ff fe62 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008c10:	204e      	movs	r0, #78	; 0x4e
 8008c12:	f7ff fe5f 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008c16:	20f1      	movs	r0, #241	; 0xf1
 8008c18:	f7ff fe5c 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008c1c:	2037      	movs	r0, #55	; 0x37
 8008c1e:	f7ff fe59 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c22:	2007      	movs	r0, #7
 8008c24:	f7ff fe56 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008c28:	2010      	movs	r0, #16
 8008c2a:	f7ff fe53 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c2e:	2003      	movs	r0, #3
 8008c30:	f7ff fe50 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c34:	200e      	movs	r0, #14
 8008c36:	f7ff fe4d 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008c3a:	2009      	movs	r0, #9
 8008c3c:	f7ff fe4a 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c40:	2000      	movs	r0, #0
 8008c42:	f7ff fe47 	bl	80088d4 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008c46:	20e1      	movs	r0, #225	; 0xe1
 8008c48:	f7ff fe22 	bl	8008890 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7ff fe41 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c52:	200e      	movs	r0, #14
 8008c54:	f7ff fe3e 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008c58:	2014      	movs	r0, #20
 8008c5a:	f7ff fe3b 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c5e:	2003      	movs	r0, #3
 8008c60:	f7ff fe38 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008c64:	2011      	movs	r0, #17
 8008c66:	f7ff fe35 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c6a:	2007      	movs	r0, #7
 8008c6c:	f7ff fe32 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008c70:	2031      	movs	r0, #49	; 0x31
 8008c72:	f7ff fe2f 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008c76:	20c1      	movs	r0, #193	; 0xc1
 8008c78:	f7ff fe2c 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008c7c:	2048      	movs	r0, #72	; 0x48
 8008c7e:	f7ff fe29 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008c82:	2008      	movs	r0, #8
 8008c84:	f7ff fe26 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008c88:	200f      	movs	r0, #15
 8008c8a:	f7ff fe23 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008c8e:	200c      	movs	r0, #12
 8008c90:	f7ff fe20 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008c94:	2031      	movs	r0, #49	; 0x31
 8008c96:	f7ff fe1d 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008c9a:	2036      	movs	r0, #54	; 0x36
 8008c9c:	f7ff fe1a 	bl	80088d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008ca0:	200f      	movs	r0, #15
 8008ca2:	f7ff fe17 	bl	80088d4 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008ca6:	2011      	movs	r0, #17
 8008ca8:	f7ff fdf2 	bl	8008890 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008cac:	20f0      	movs	r0, #240	; 0xf0
 8008cae:	f7fa f88f 	bl	8002dd0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008cb2:	2029      	movs	r0, #41	; 0x29
 8008cb4:	f7ff fdec 	bl	8008890 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f7ff fe97 	bl	80089ec <ILI9341_Set_Rotation>
}
 8008cbe:	bf00      	nop
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008cc4:	b5b0      	push	{r4, r5, r7, lr}
 8008cc6:	b08e      	sub	sp, #56	; 0x38
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	607b      	str	r3, [r7, #4]
 8008ccc:	4603      	mov	r3, r0
 8008cce:	81fb      	strh	r3, [r7, #14]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	81bb      	strh	r3, [r7, #12]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	817b      	strh	r3, [r7, #10]
 8008cd8:	466b      	mov	r3, sp
 8008cda:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	4a48      	ldr	r2, [pc, #288]	; (8008e08 <ILI9341_Draw_colour_Burst+0x144>)
 8008ce6:	8812      	ldrh	r2, [r2, #0]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d202      	bcs.n	8008cf2 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cf0:	e002      	b.n	8008cf8 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008cf2:	4b45      	ldr	r3, [pc, #276]	; (8008e08 <ILI9341_Draw_colour_Burst+0x144>)
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008d02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d04:	4603      	mov	r3, r0
 8008d06:	3b01      	subs	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	f04f 0400 	mov.w	r4, #0
 8008d18:	00d4      	lsls	r4, r2, #3
 8008d1a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d1e:	00cb      	lsls	r3, r1, #3
 8008d20:	4601      	mov	r1, r0
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	f04f 0400 	mov.w	r4, #0
 8008d2e:	00d4      	lsls	r4, r2, #3
 8008d30:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d34:	00cb      	lsls	r3, r1, #3
 8008d36:	1dc3      	adds	r3, r0, #7
 8008d38:	08db      	lsrs	r3, r3, #3
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8008d40:	466b      	mov	r3, sp
 8008d42:	3300      	adds	r3, #0
 8008d44:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d46:	2300      	movs	r3, #0
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30
 8008d4a:	e00e      	b.n	8008d6a <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	4413      	add	r3, r2
 8008d52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008d56:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	897a      	ldrh	r2, [r7, #10]
 8008d5e:	b2d1      	uxtb	r1, r2
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	3302      	adds	r3, #2
 8008d68:	633b      	str	r3, [r7, #48]	; 0x30
 8008d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3ec      	bcc.n	8008d4c <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00d      	beq.n	8008da2 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d94:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d9a:	fb01 f202 	mul.w	r2, r1, r2
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008da2:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	4a19      	ldr	r2, [pc, #100]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008dae:	4b17      	ldr	r3, [pc, #92]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	4a16      	ldr	r2, [pc, #88]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db8:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d010      	beq.n	8008de2 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc4:	e009      	b.n	8008dda <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008dc6:	69b9      	ldr	r1, [r7, #24]
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	2302      	movs	r3, #2
 8008dce:	4810      	ldr	r0, [pc, #64]	; (8008e10 <ILI9341_Draw_colour_Burst+0x14c>)
 8008dd0:	f7fd fd8c 	bl	80068ec <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d3f1      	bcc.n	8008dc6 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008de2:	69b9      	ldr	r1, [r7, #24]
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	2302      	movs	r3, #2
 8008dea:	4809      	ldr	r0, [pc, #36]	; (8008e10 <ILI9341_Draw_colour_Burst+0x14c>)
 8008dec:	f7fd fd7e 	bl	80068ec <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	4a05      	ldr	r2, [pc, #20]	; (8008e0c <ILI9341_Draw_colour_Burst+0x148>)
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	6153      	str	r3, [r2, #20]
 8008dfc:	46ad      	mov	sp, r5


}
 8008dfe:	bf00      	nop
 8008e00:	3738      	adds	r7, #56	; 0x38
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bdb0      	pop	{r4, r5, r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000020 	.word	0x20000020
 8008e0c:	48000400 	.word	0x48000400
 8008e10:	20000de8 	.word	0x20000de8

08008e14 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008e1e:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <ILI9341_Fill_Screen+0x4c>)
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <ILI9341_Fill_Screen+0x50>)
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	f7ff fd73 	bl	8008918 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008e32:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <ILI9341_Fill_Screen+0x4c>)
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <ILI9341_Fill_Screen+0x50>)
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	fb03 f302 	mul.w	r3, r3, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	2304      	movs	r3, #4
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	2100      	movs	r1, #0
 8008e50:	2000      	movs	r0, #0
 8008e52:	f7ff ff37 	bl	8008cc4 <ILI9341_Draw_colour_Burst>
}
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	2000001e 	.word	0x2000001e
 8008e64:	2000001c 	.word	0x2000001c

08008e68 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	80fb      	strh	r3, [r7, #6]
 8008e72:	460b      	mov	r3, r1
 8008e74:	80bb      	strh	r3, [r7, #4]
 8008e76:	4613      	mov	r3, r2
 8008e78:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008e7a:	4b64      	ldr	r3, [pc, #400]	; (800900c <ILI9341_Draw_Pixel+0x1a4>)
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	88fa      	ldrh	r2, [r7, #6]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	f080 80be 	bcs.w	8009004 <ILI9341_Draw_Pixel+0x19c>
 8008e88:	4b61      	ldr	r3, [pc, #388]	; (8009010 <ILI9341_Draw_Pixel+0x1a8>)
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	88ba      	ldrh	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	f080 80b7 	bcs.w	8009004 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008e96:	4b5f      	ldr	r3, [pc, #380]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	4a5e      	ldr	r2, [pc, #376]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008ea2:	4b5c      	ldr	r3, [pc, #368]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4a5b      	ldr	r2, [pc, #364]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eac:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008eae:	202a      	movs	r0, #42	; 0x2a
 8008eb0:	f7ff fcda 	bl	8008868 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008eb4:	4b57      	ldr	r3, [pc, #348]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	4a56      	ldr	r2, [pc, #344]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebe:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008ec0:	4b54      	ldr	r3, [pc, #336]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	4a53      	ldr	r2, [pc, #332]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eca:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008ecc:	4b51      	ldr	r3, [pc, #324]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	4a50      	ldr	r2, [pc, #320]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	753b      	strb	r3, [r7, #20]
 8008ee2:	88fb      	ldrh	r3, [r7, #6]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	757b      	strb	r3, [r7, #21]
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	3301      	adds	r3, #1
 8008eec:	121b      	asrs	r3, r3, #8
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	75bb      	strb	r3, [r7, #22]
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008efc:	f107 0114 	add.w	r1, r7, #20
 8008f00:	2301      	movs	r3, #1
 8008f02:	2204      	movs	r2, #4
 8008f04:	4844      	ldr	r0, [pc, #272]	; (8009018 <ILI9341_Draw_Pixel+0x1b0>)
 8008f06:	f7fd fcf1 	bl	80068ec <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f0a:	4b42      	ldr	r3, [pc, #264]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4a41      	ldr	r2, [pc, #260]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f14:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008f16:	4b3f      	ldr	r3, [pc, #252]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	4a3e      	ldr	r2, [pc, #248]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f20:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f22:	4b3c      	ldr	r3, [pc, #240]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	4a3b      	ldr	r2, [pc, #236]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f2c:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008f2e:	202b      	movs	r0, #43	; 0x2b
 8008f30:	f7ff fc9a 	bl	8008868 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008f34:	4b37      	ldr	r3, [pc, #220]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	4a36      	ldr	r2, [pc, #216]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f40:	4b34      	ldr	r3, [pc, #208]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	4a33      	ldr	r2, [pc, #204]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4a:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	4a30      	ldr	r2, [pc, #192]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f56:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008f58:	88bb      	ldrh	r3, [r7, #4]
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	743b      	strb	r3, [r7, #16]
 8008f62:	88bb      	ldrh	r3, [r7, #4]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	747b      	strb	r3, [r7, #17]
 8008f68:	88bb      	ldrh	r3, [r7, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	121b      	asrs	r3, r3, #8
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	74bb      	strb	r3, [r7, #18]
 8008f72:	88bb      	ldrh	r3, [r7, #4]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	3301      	adds	r3, #1
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008f7c:	f107 0110 	add.w	r1, r7, #16
 8008f80:	2301      	movs	r3, #1
 8008f82:	2204      	movs	r2, #4
 8008f84:	4824      	ldr	r0, [pc, #144]	; (8009018 <ILI9341_Draw_Pixel+0x1b0>)
 8008f86:	f7fd fcb1 	bl	80068ec <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	4a21      	ldr	r2, [pc, #132]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008f96:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008fa2:	4b1c      	ldr	r3, [pc, #112]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4a1b      	ldr	r2, [pc, #108]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fac:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008fae:	202c      	movs	r0, #44	; 0x2c
 8008fb0:	f7ff fc5a 	bl	8008868 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008fb4:	4b17      	ldr	r3, [pc, #92]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	4a16      	ldr	r2, [pc, #88]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbe:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008fc0:	4b14      	ldr	r3, [pc, #80]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	4a13      	ldr	r2, [pc, #76]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fca:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008fcc:	4b11      	ldr	r3, [pc, #68]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	4a10      	ldr	r2, [pc, #64]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008fd8:	887b      	ldrh	r3, [r7, #2]
 8008fda:	0a1b      	lsrs	r3, r3, #8
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	733b      	strb	r3, [r7, #12]
 8008fe2:	887b      	ldrh	r3, [r7, #2]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008fe8:	f107 010c 	add.w	r1, r7, #12
 8008fec:	2301      	movs	r3, #1
 8008fee:	2202      	movs	r2, #2
 8008ff0:	4809      	ldr	r0, [pc, #36]	; (8009018 <ILI9341_Draw_Pixel+0x1b0>)
 8008ff2:	f7fd fc7b 	bl	80068ec <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	4a06      	ldr	r2, [pc, #24]	; (8009014 <ILI9341_Draw_Pixel+0x1ac>)
 8008ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009000:	6153      	str	r3, [r2, #20]
 8009002:	e000      	b.n	8009006 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8009004:	bf00      	nop

	
}
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	2000001e 	.word	0x2000001e
 8009010:	2000001c 	.word	0x2000001c
 8009014:	48000400 	.word	0x48000400
 8009018:	20000de8 	.word	0x20000de8

0800901c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b087      	sub	sp, #28
 8009020:	af02      	add	r7, sp, #8
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	4611      	mov	r1, r2
 8009028:	461a      	mov	r2, r3
 800902a:	4623      	mov	r3, r4
 800902c:	80fb      	strh	r3, [r7, #6]
 800902e:	4603      	mov	r3, r0
 8009030:	80bb      	strh	r3, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	807b      	strh	r3, [r7, #2]
 8009036:	4613      	mov	r3, r2
 8009038:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800903a:	4b39      	ldr	r3, [pc, #228]	; (8009120 <ILI9341_Draw_Rectangle+0x104>)
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29b      	uxth	r3, r3
 8009040:	88fa      	ldrh	r2, [r7, #6]
 8009042:	429a      	cmp	r2, r3
 8009044:	d268      	bcs.n	8009118 <ILI9341_Draw_Rectangle+0xfc>
 8009046:	4b37      	ldr	r3, [pc, #220]	; (8009124 <ILI9341_Draw_Rectangle+0x108>)
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	88ba      	ldrh	r2, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d262      	bcs.n	8009118 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8009052:	88fa      	ldrh	r2, [r7, #6]
 8009054:	887b      	ldrh	r3, [r7, #2]
 8009056:	4413      	add	r3, r2
 8009058:	3b01      	subs	r3, #1
 800905a:	4a31      	ldr	r2, [pc, #196]	; (8009120 <ILI9341_Draw_Rectangle+0x104>)
 800905c:	8812      	ldrh	r2, [r2, #0]
 800905e:	b292      	uxth	r2, r2
 8009060:	4293      	cmp	r3, r2
 8009062:	db05      	blt.n	8009070 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009064:	4b2e      	ldr	r3, [pc, #184]	; (8009120 <ILI9341_Draw_Rectangle+0x104>)
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29a      	uxth	r2, r3
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8009070:	88ba      	ldrh	r2, [r7, #4]
 8009072:	883b      	ldrh	r3, [r7, #0]
 8009074:	4413      	add	r3, r2
 8009076:	3b01      	subs	r3, #1
 8009078:	4a2a      	ldr	r2, [pc, #168]	; (8009124 <ILI9341_Draw_Rectangle+0x108>)
 800907a:	8812      	ldrh	r2, [r2, #0]
 800907c:	b292      	uxth	r2, r2
 800907e:	4293      	cmp	r3, r2
 8009080:	db05      	blt.n	800908e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8009082:	4b28      	ldr	r3, [pc, #160]	; (8009124 <ILI9341_Draw_Rectangle+0x108>)
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29a      	uxth	r2, r3
 8009088:	88bb      	ldrh	r3, [r7, #4]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800908e:	88fa      	ldrh	r2, [r7, #6]
 8009090:	887b      	ldrh	r3, [r7, #2]
 8009092:	4413      	add	r3, r2
 8009094:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8009096:	3b01      	subs	r3, #1
 8009098:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800909a:	88ba      	ldrh	r2, [r7, #4]
 800909c:	883b      	ldrh	r3, [r7, #0]
 800909e:	4413      	add	r3, r2
 80090a0:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	88b9      	ldrh	r1, [r7, #4]
 80090a8:	88f8      	ldrh	r0, [r7, #6]
 80090aa:	4622      	mov	r2, r4
 80090ac:	f7ff fc34 	bl	8008918 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80090b0:	883a      	ldrh	r2, [r7, #0]
 80090b2:	887b      	ldrh	r3, [r7, #2]
 80090b4:	fb12 f303 	smulbb	r3, r2, r3
 80090b8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80090be:	89fb      	ldrh	r3, [r7, #14]
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d009      	beq.n	80090dc <ILI9341_Draw_Rectangle+0xc0>
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d906      	bls.n	80090dc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80090ce:	2301      	movs	r3, #1
 80090d0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80090d2:	89fb      	ldrh	r3, [r7, #14]
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80090dc:	89fc      	ldrh	r4, [r7, #14]
 80090de:	8c3a      	ldrh	r2, [r7, #32]
 80090e0:	88b9      	ldrh	r1, [r7, #4]
 80090e2:	88f8      	ldrh	r0, [r7, #6]
 80090e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4623      	mov	r3, r4
 80090ec:	f7ff fdea 	bl	8008cc4 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80090f0:	7b7b      	ldrb	r3, [r7, #13]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d011      	beq.n	800911a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	887b      	ldrh	r3, [r7, #2]
 80090fa:	4413      	add	r3, r2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8009102:	88ba      	ldrh	r2, [r7, #4]
 8009104:	883b      	ldrh	r3, [r7, #0]
 8009106:	4413      	add	r3, r2
 8009108:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800910a:	3b01      	subs	r3, #1
 800910c:	b29b      	uxth	r3, r3
 800910e:	8c3a      	ldrh	r2, [r7, #32]
 8009110:	4619      	mov	r1, r3
 8009112:	f7ff fea9 	bl	8008e68 <ILI9341_Draw_Pixel>
 8009116:	e000      	b.n	800911a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009118:	bf00      	nop
							colour);
	}
}
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	bd90      	pop	{r4, r7, pc}
 8009120:	2000001e 	.word	0x2000001e
 8009124:	2000001c 	.word	0x2000001c

08009128 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b085      	sub	sp, #20
 800912c:	af02      	add	r7, sp, #8
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	4623      	mov	r3, r4
 8009138:	80fb      	strh	r3, [r7, #6]
 800913a:	4603      	mov	r3, r0
 800913c:	80bb      	strh	r3, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	807b      	strh	r3, [r7, #2]
 8009142:	4613      	mov	r3, r2
 8009144:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	429a      	cmp	r2, r3
 8009150:	d229      	bcs.n	80091a6 <ILI9341_Draw_Horizontal_Line+0x7e>
 8009152:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	88ba      	ldrh	r2, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d223      	bcs.n	80091a6 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800915e:	88fa      	ldrh	r2, [r7, #6]
 8009160:	887b      	ldrh	r3, [r7, #2]
 8009162:	4413      	add	r3, r2
 8009164:	3b01      	subs	r3, #1
 8009166:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009168:	8812      	ldrh	r2, [r2, #0]
 800916a:	b292      	uxth	r2, r2
 800916c:	4293      	cmp	r3, r2
 800916e:	db05      	blt.n	800917c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29a      	uxth	r2, r3
 8009176:	88fb      	ldrh	r3, [r7, #6]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	887b      	ldrh	r3, [r7, #2]
 8009180:	4413      	add	r3, r2
 8009182:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8009184:	3b01      	subs	r3, #1
 8009186:	b29a      	uxth	r2, r3
 8009188:	88bb      	ldrh	r3, [r7, #4]
 800918a:	88b9      	ldrh	r1, [r7, #4]
 800918c:	88f8      	ldrh	r0, [r7, #6]
 800918e:	f7ff fbc3 	bl	8008918 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8009192:	887c      	ldrh	r4, [r7, #2]
 8009194:	883a      	ldrh	r2, [r7, #0]
 8009196:	88b9      	ldrh	r1, [r7, #4]
 8009198:	88f8      	ldrh	r0, [r7, #6]
 800919a:	2303      	movs	r3, #3
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	4623      	mov	r3, r4
 80091a0:	f7ff fd90 	bl	8008cc4 <ILI9341_Draw_colour_Burst>
 80091a4:	e000      	b.n	80091a8 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80091a6:	bf00      	nop
}
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd90      	pop	{r4, r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000001e 	.word	0x2000001e
 80091b4:	2000001c 	.word	0x2000001c

080091b8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 80091b8:	b590      	push	{r4, r7, lr}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af02      	add	r7, sp, #8
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4623      	mov	r3, r4
 80091c8:	80fb      	strh	r3, [r7, #6]
 80091ca:	4603      	mov	r3, r0
 80091cc:	80bb      	strh	r3, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	807b      	strh	r3, [r7, #2]
 80091d2:	4613      	mov	r3, r2
 80091d4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <ILI9341_Draw_Vertical_Line+0x88>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d229      	bcs.n	8009236 <ILI9341_Draw_Vertical_Line+0x7e>
 80091e2:	4b18      	ldr	r3, [pc, #96]	; (8009244 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	88ba      	ldrh	r2, [r7, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d223      	bcs.n	8009236 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80091ee:	88ba      	ldrh	r2, [r7, #4]
 80091f0:	887b      	ldrh	r3, [r7, #2]
 80091f2:	4413      	add	r3, r2
 80091f4:	3b01      	subs	r3, #1
 80091f6:	4a13      	ldr	r2, [pc, #76]	; (8009244 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091f8:	8812      	ldrh	r2, [r2, #0]
 80091fa:	b292      	uxth	r2, r2
 80091fc:	4293      	cmp	r3, r2
 80091fe:	db05      	blt.n	800920c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8009200:	4b10      	ldr	r3, [pc, #64]	; (8009244 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29a      	uxth	r2, r3
 8009206:	88bb      	ldrh	r3, [r7, #4]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 800920c:	88ba      	ldrh	r2, [r7, #4]
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	4413      	add	r3, r2
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29b      	uxth	r3, r3
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	88b9      	ldrh	r1, [r7, #4]
 800921c:	88f8      	ldrh	r0, [r7, #6]
 800921e:	f7ff fb7b 	bl	8008918 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8009222:	887c      	ldrh	r4, [r7, #2]
 8009224:	883a      	ldrh	r2, [r7, #0]
 8009226:	88b9      	ldrh	r1, [r7, #4]
 8009228:	88f8      	ldrh	r0, [r7, #6]
 800922a:	2303      	movs	r3, #3
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	4623      	mov	r3, r4
 8009230:	f7ff fd48 	bl	8008cc4 <ILI9341_Draw_colour_Burst>
 8009234:	e000      	b.n	8009238 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009236:	bf00      	nop
}
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	bd90      	pop	{r4, r7, pc}
 800923e:	bf00      	nop
 8009240:	2000001e 	.word	0x2000001e
 8009244:	2000001c 	.word	0x2000001c

08009248 <__errno>:
 8009248:	4b01      	ldr	r3, [pc, #4]	; (8009250 <__errno+0x8>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000b64 	.word	0x20000b64

08009254 <__libc_init_array>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0d      	ldr	r6, [pc, #52]	; (800928c <__libc_init_array+0x38>)
 8009258:	4c0d      	ldr	r4, [pc, #52]	; (8009290 <__libc_init_array+0x3c>)
 800925a:	1ba4      	subs	r4, r4, r6
 800925c:	10a4      	asrs	r4, r4, #2
 800925e:	2500      	movs	r5, #0
 8009260:	42a5      	cmp	r5, r4
 8009262:	d109      	bne.n	8009278 <__libc_init_array+0x24>
 8009264:	4e0b      	ldr	r6, [pc, #44]	; (8009294 <__libc_init_array+0x40>)
 8009266:	4c0c      	ldr	r4, [pc, #48]	; (8009298 <__libc_init_array+0x44>)
 8009268:	f000 ffe8 	bl	800a23c <_init>
 800926c:	1ba4      	subs	r4, r4, r6
 800926e:	10a4      	asrs	r4, r4, #2
 8009270:	2500      	movs	r5, #0
 8009272:	42a5      	cmp	r5, r4
 8009274:	d105      	bne.n	8009282 <__libc_init_array+0x2e>
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800927c:	4798      	blx	r3
 800927e:	3501      	adds	r5, #1
 8009280:	e7ee      	b.n	8009260 <__libc_init_array+0xc>
 8009282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009286:	4798      	blx	r3
 8009288:	3501      	adds	r5, #1
 800928a:	e7f2      	b.n	8009272 <__libc_init_array+0x1e>
 800928c:	0800a7a8 	.word	0x0800a7a8
 8009290:	0800a7a8 	.word	0x0800a7a8
 8009294:	0800a7a8 	.word	0x0800a7a8
 8009298:	0800a7ac 	.word	0x0800a7ac

0800929c <memset>:
 800929c:	4402      	add	r2, r0
 800929e:	4603      	mov	r3, r0
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d100      	bne.n	80092a6 <memset+0xa>
 80092a4:	4770      	bx	lr
 80092a6:	f803 1b01 	strb.w	r1, [r3], #1
 80092aa:	e7f9      	b.n	80092a0 <memset+0x4>

080092ac <_puts_r>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	460e      	mov	r6, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	b118      	cbz	r0, 80092bc <_puts_r+0x10>
 80092b4:	6983      	ldr	r3, [r0, #24]
 80092b6:	b90b      	cbnz	r3, 80092bc <_puts_r+0x10>
 80092b8:	f000 fa40 	bl	800973c <__sinit>
 80092bc:	69ab      	ldr	r3, [r5, #24]
 80092be:	68ac      	ldr	r4, [r5, #8]
 80092c0:	b913      	cbnz	r3, 80092c8 <_puts_r+0x1c>
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 fa3a 	bl	800973c <__sinit>
 80092c8:	4b23      	ldr	r3, [pc, #140]	; (8009358 <_puts_r+0xac>)
 80092ca:	429c      	cmp	r4, r3
 80092cc:	d117      	bne.n	80092fe <_puts_r+0x52>
 80092ce:	686c      	ldr	r4, [r5, #4]
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	071b      	lsls	r3, r3, #28
 80092d4:	d51d      	bpl.n	8009312 <_puts_r+0x66>
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	b1db      	cbz	r3, 8009312 <_puts_r+0x66>
 80092da:	3e01      	subs	r6, #1
 80092dc:	68a3      	ldr	r3, [r4, #8]
 80092de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092e2:	3b01      	subs	r3, #1
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	b9e9      	cbnz	r1, 8009324 <_puts_r+0x78>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da2e      	bge.n	800934a <_puts_r+0x9e>
 80092ec:	4622      	mov	r2, r4
 80092ee:	210a      	movs	r1, #10
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f873 	bl	80093dc <__swbuf_r>
 80092f6:	3001      	adds	r0, #1
 80092f8:	d011      	beq.n	800931e <_puts_r+0x72>
 80092fa:	200a      	movs	r0, #10
 80092fc:	e011      	b.n	8009322 <_puts_r+0x76>
 80092fe:	4b17      	ldr	r3, [pc, #92]	; (800935c <_puts_r+0xb0>)
 8009300:	429c      	cmp	r4, r3
 8009302:	d101      	bne.n	8009308 <_puts_r+0x5c>
 8009304:	68ac      	ldr	r4, [r5, #8]
 8009306:	e7e3      	b.n	80092d0 <_puts_r+0x24>
 8009308:	4b15      	ldr	r3, [pc, #84]	; (8009360 <_puts_r+0xb4>)
 800930a:	429c      	cmp	r4, r3
 800930c:	bf08      	it	eq
 800930e:	68ec      	ldreq	r4, [r5, #12]
 8009310:	e7de      	b.n	80092d0 <_puts_r+0x24>
 8009312:	4621      	mov	r1, r4
 8009314:	4628      	mov	r0, r5
 8009316:	f000 f8b3 	bl	8009480 <__swsetup_r>
 800931a:	2800      	cmp	r0, #0
 800931c:	d0dd      	beq.n	80092da <_puts_r+0x2e>
 800931e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	2b00      	cmp	r3, #0
 8009326:	da04      	bge.n	8009332 <_puts_r+0x86>
 8009328:	69a2      	ldr	r2, [r4, #24]
 800932a:	429a      	cmp	r2, r3
 800932c:	dc06      	bgt.n	800933c <_puts_r+0x90>
 800932e:	290a      	cmp	r1, #10
 8009330:	d004      	beq.n	800933c <_puts_r+0x90>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	7019      	strb	r1, [r3, #0]
 800933a:	e7cf      	b.n	80092dc <_puts_r+0x30>
 800933c:	4622      	mov	r2, r4
 800933e:	4628      	mov	r0, r5
 8009340:	f000 f84c 	bl	80093dc <__swbuf_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d1c9      	bne.n	80092dc <_puts_r+0x30>
 8009348:	e7e9      	b.n	800931e <_puts_r+0x72>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	200a      	movs	r0, #10
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	6022      	str	r2, [r4, #0]
 8009352:	7018      	strb	r0, [r3, #0]
 8009354:	e7e5      	b.n	8009322 <_puts_r+0x76>
 8009356:	bf00      	nop
 8009358:	0800a734 	.word	0x0800a734
 800935c:	0800a754 	.word	0x0800a754
 8009360:	0800a714 	.word	0x0800a714

08009364 <puts>:
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <puts+0xc>)
 8009366:	4601      	mov	r1, r0
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	f7ff bf9f 	b.w	80092ac <_puts_r>
 800936e:	bf00      	nop
 8009370:	20000b64 	.word	0x20000b64

08009374 <sniprintf>:
 8009374:	b40c      	push	{r2, r3}
 8009376:	b530      	push	{r4, r5, lr}
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <sniprintf+0x64>)
 800937a:	1e0c      	subs	r4, r1, #0
 800937c:	b09d      	sub	sp, #116	; 0x74
 800937e:	681d      	ldr	r5, [r3, #0]
 8009380:	da08      	bge.n	8009394 <sniprintf+0x20>
 8009382:	238b      	movs	r3, #139	; 0x8b
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800938a:	b01d      	add	sp, #116	; 0x74
 800938c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009390:	b002      	add	sp, #8
 8009392:	4770      	bx	lr
 8009394:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009398:	f8ad 3014 	strh.w	r3, [sp, #20]
 800939c:	bf14      	ite	ne
 800939e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80093a2:	4623      	moveq	r3, r4
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	9307      	str	r3, [sp, #28]
 80093a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093ac:	9002      	str	r0, [sp, #8]
 80093ae:	9006      	str	r0, [sp, #24]
 80093b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093b6:	ab21      	add	r3, sp, #132	; 0x84
 80093b8:	a902      	add	r1, sp, #8
 80093ba:	4628      	mov	r0, r5
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	f000 fbad 	bl	8009b1c <_svfiprintf_r>
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	bfbc      	itt	lt
 80093c6:	238b      	movlt	r3, #139	; 0x8b
 80093c8:	602b      	strlt	r3, [r5, #0]
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	d0dd      	beq.n	800938a <sniprintf+0x16>
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
 80093d4:	e7d9      	b.n	800938a <sniprintf+0x16>
 80093d6:	bf00      	nop
 80093d8:	20000b64 	.word	0x20000b64

080093dc <__swbuf_r>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	460e      	mov	r6, r1
 80093e0:	4614      	mov	r4, r2
 80093e2:	4605      	mov	r5, r0
 80093e4:	b118      	cbz	r0, 80093ee <__swbuf_r+0x12>
 80093e6:	6983      	ldr	r3, [r0, #24]
 80093e8:	b90b      	cbnz	r3, 80093ee <__swbuf_r+0x12>
 80093ea:	f000 f9a7 	bl	800973c <__sinit>
 80093ee:	4b21      	ldr	r3, [pc, #132]	; (8009474 <__swbuf_r+0x98>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	d12a      	bne.n	800944a <__swbuf_r+0x6e>
 80093f4:	686c      	ldr	r4, [r5, #4]
 80093f6:	69a3      	ldr	r3, [r4, #24]
 80093f8:	60a3      	str	r3, [r4, #8]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	071a      	lsls	r2, r3, #28
 80093fe:	d52e      	bpl.n	800945e <__swbuf_r+0x82>
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	b363      	cbz	r3, 800945e <__swbuf_r+0x82>
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	6820      	ldr	r0, [r4, #0]
 8009408:	1ac0      	subs	r0, r0, r3
 800940a:	6963      	ldr	r3, [r4, #20]
 800940c:	b2f6      	uxtb	r6, r6
 800940e:	4283      	cmp	r3, r0
 8009410:	4637      	mov	r7, r6
 8009412:	dc04      	bgt.n	800941e <__swbuf_r+0x42>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f926 	bl	8009668 <_fflush_r>
 800941c:	bb28      	cbnz	r0, 800946a <__swbuf_r+0x8e>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	6022      	str	r2, [r4, #0]
 800942a:	701e      	strb	r6, [r3, #0]
 800942c:	6963      	ldr	r3, [r4, #20]
 800942e:	3001      	adds	r0, #1
 8009430:	4283      	cmp	r3, r0
 8009432:	d004      	beq.n	800943e <__swbuf_r+0x62>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d519      	bpl.n	800946e <__swbuf_r+0x92>
 800943a:	2e0a      	cmp	r6, #10
 800943c:	d117      	bne.n	800946e <__swbuf_r+0x92>
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f000 f911 	bl	8009668 <_fflush_r>
 8009446:	b190      	cbz	r0, 800946e <__swbuf_r+0x92>
 8009448:	e00f      	b.n	800946a <__swbuf_r+0x8e>
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <__swbuf_r+0x9c>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d101      	bne.n	8009454 <__swbuf_r+0x78>
 8009450:	68ac      	ldr	r4, [r5, #8]
 8009452:	e7d0      	b.n	80093f6 <__swbuf_r+0x1a>
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <__swbuf_r+0xa0>)
 8009456:	429c      	cmp	r4, r3
 8009458:	bf08      	it	eq
 800945a:	68ec      	ldreq	r4, [r5, #12]
 800945c:	e7cb      	b.n	80093f6 <__swbuf_r+0x1a>
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f80d 	bl	8009480 <__swsetup_r>
 8009466:	2800      	cmp	r0, #0
 8009468:	d0cc      	beq.n	8009404 <__swbuf_r+0x28>
 800946a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800946e:	4638      	mov	r0, r7
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009472:	bf00      	nop
 8009474:	0800a734 	.word	0x0800a734
 8009478:	0800a754 	.word	0x0800a754
 800947c:	0800a714 	.word	0x0800a714

08009480 <__swsetup_r>:
 8009480:	4b32      	ldr	r3, [pc, #200]	; (800954c <__swsetup_r+0xcc>)
 8009482:	b570      	push	{r4, r5, r6, lr}
 8009484:	681d      	ldr	r5, [r3, #0]
 8009486:	4606      	mov	r6, r0
 8009488:	460c      	mov	r4, r1
 800948a:	b125      	cbz	r5, 8009496 <__swsetup_r+0x16>
 800948c:	69ab      	ldr	r3, [r5, #24]
 800948e:	b913      	cbnz	r3, 8009496 <__swsetup_r+0x16>
 8009490:	4628      	mov	r0, r5
 8009492:	f000 f953 	bl	800973c <__sinit>
 8009496:	4b2e      	ldr	r3, [pc, #184]	; (8009550 <__swsetup_r+0xd0>)
 8009498:	429c      	cmp	r4, r3
 800949a:	d10f      	bne.n	80094bc <__swsetup_r+0x3c>
 800949c:	686c      	ldr	r4, [r5, #4]
 800949e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	0715      	lsls	r5, r2, #28
 80094a6:	d42c      	bmi.n	8009502 <__swsetup_r+0x82>
 80094a8:	06d0      	lsls	r0, r2, #27
 80094aa:	d411      	bmi.n	80094d0 <__swsetup_r+0x50>
 80094ac:	2209      	movs	r2, #9
 80094ae:	6032      	str	r2, [r6, #0]
 80094b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ba:	e03e      	b.n	800953a <__swsetup_r+0xba>
 80094bc:	4b25      	ldr	r3, [pc, #148]	; (8009554 <__swsetup_r+0xd4>)
 80094be:	429c      	cmp	r4, r3
 80094c0:	d101      	bne.n	80094c6 <__swsetup_r+0x46>
 80094c2:	68ac      	ldr	r4, [r5, #8]
 80094c4:	e7eb      	b.n	800949e <__swsetup_r+0x1e>
 80094c6:	4b24      	ldr	r3, [pc, #144]	; (8009558 <__swsetup_r+0xd8>)
 80094c8:	429c      	cmp	r4, r3
 80094ca:	bf08      	it	eq
 80094cc:	68ec      	ldreq	r4, [r5, #12]
 80094ce:	e7e6      	b.n	800949e <__swsetup_r+0x1e>
 80094d0:	0751      	lsls	r1, r2, #29
 80094d2:	d512      	bpl.n	80094fa <__swsetup_r+0x7a>
 80094d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d6:	b141      	cbz	r1, 80094ea <__swsetup_r+0x6a>
 80094d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094dc:	4299      	cmp	r1, r3
 80094de:	d002      	beq.n	80094e6 <__swsetup_r+0x66>
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 fa19 	bl	8009918 <_free_r>
 80094e6:	2300      	movs	r3, #0
 80094e8:	6363      	str	r3, [r4, #52]	; 0x34
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	2300      	movs	r3, #0
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f043 0308 	orr.w	r3, r3, #8
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	b94b      	cbnz	r3, 800951a <__swsetup_r+0x9a>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800950c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009510:	d003      	beq.n	800951a <__swsetup_r+0x9a>
 8009512:	4621      	mov	r1, r4
 8009514:	4630      	mov	r0, r6
 8009516:	f000 f9bf 	bl	8009898 <__smakebuf_r>
 800951a:	89a2      	ldrh	r2, [r4, #12]
 800951c:	f012 0301 	ands.w	r3, r2, #1
 8009520:	d00c      	beq.n	800953c <__swsetup_r+0xbc>
 8009522:	2300      	movs	r3, #0
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	6963      	ldr	r3, [r4, #20]
 8009528:	425b      	negs	r3, r3
 800952a:	61a3      	str	r3, [r4, #24]
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	b953      	cbnz	r3, 8009546 <__swsetup_r+0xc6>
 8009530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009534:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009538:	d1ba      	bne.n	80094b0 <__swsetup_r+0x30>
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	0792      	lsls	r2, r2, #30
 800953e:	bf58      	it	pl
 8009540:	6963      	ldrpl	r3, [r4, #20]
 8009542:	60a3      	str	r3, [r4, #8]
 8009544:	e7f2      	b.n	800952c <__swsetup_r+0xac>
 8009546:	2000      	movs	r0, #0
 8009548:	e7f7      	b.n	800953a <__swsetup_r+0xba>
 800954a:	bf00      	nop
 800954c:	20000b64 	.word	0x20000b64
 8009550:	0800a734 	.word	0x0800a734
 8009554:	0800a754 	.word	0x0800a754
 8009558:	0800a714 	.word	0x0800a714

0800955c <__sflush_r>:
 800955c:	898a      	ldrh	r2, [r1, #12]
 800955e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009562:	4605      	mov	r5, r0
 8009564:	0710      	lsls	r0, r2, #28
 8009566:	460c      	mov	r4, r1
 8009568:	d458      	bmi.n	800961c <__sflush_r+0xc0>
 800956a:	684b      	ldr	r3, [r1, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dc05      	bgt.n	800957c <__sflush_r+0x20>
 8009570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc02      	bgt.n	800957c <__sflush_r+0x20>
 8009576:	2000      	movs	r0, #0
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957e:	2e00      	cmp	r6, #0
 8009580:	d0f9      	beq.n	8009576 <__sflush_r+0x1a>
 8009582:	2300      	movs	r3, #0
 8009584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009588:	682f      	ldr	r7, [r5, #0]
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	d032      	beq.n	80095f6 <__sflush_r+0x9a>
 8009590:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	075a      	lsls	r2, r3, #29
 8009596:	d505      	bpl.n	80095a4 <__sflush_r+0x48>
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	1ac0      	subs	r0, r0, r3
 800959c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800959e:	b10b      	cbz	r3, 80095a4 <__sflush_r+0x48>
 80095a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095a2:	1ac0      	subs	r0, r0, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	4602      	mov	r2, r0
 80095a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095aa:	6a21      	ldr	r1, [r4, #32]
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b0      	blx	r6
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	d106      	bne.n	80095c4 <__sflush_r+0x68>
 80095b6:	6829      	ldr	r1, [r5, #0]
 80095b8:	291d      	cmp	r1, #29
 80095ba:	d848      	bhi.n	800964e <__sflush_r+0xf2>
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <__sflush_r+0x108>)
 80095be:	40ca      	lsrs	r2, r1
 80095c0:	07d6      	lsls	r6, r2, #31
 80095c2:	d544      	bpl.n	800964e <__sflush_r+0xf2>
 80095c4:	2200      	movs	r2, #0
 80095c6:	6062      	str	r2, [r4, #4]
 80095c8:	04d9      	lsls	r1, r3, #19
 80095ca:	6922      	ldr	r2, [r4, #16]
 80095cc:	6022      	str	r2, [r4, #0]
 80095ce:	d504      	bpl.n	80095da <__sflush_r+0x7e>
 80095d0:	1c42      	adds	r2, r0, #1
 80095d2:	d101      	bne.n	80095d8 <__sflush_r+0x7c>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b903      	cbnz	r3, 80095da <__sflush_r+0x7e>
 80095d8:	6560      	str	r0, [r4, #84]	; 0x54
 80095da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095dc:	602f      	str	r7, [r5, #0]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d0c9      	beq.n	8009576 <__sflush_r+0x1a>
 80095e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d002      	beq.n	80095f0 <__sflush_r+0x94>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f994 	bl	8009918 <_free_r>
 80095f0:	2000      	movs	r0, #0
 80095f2:	6360      	str	r0, [r4, #52]	; 0x34
 80095f4:	e7c0      	b.n	8009578 <__sflush_r+0x1c>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b0      	blx	r6
 80095fc:	1c41      	adds	r1, r0, #1
 80095fe:	d1c8      	bne.n	8009592 <__sflush_r+0x36>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0c5      	beq.n	8009592 <__sflush_r+0x36>
 8009606:	2b1d      	cmp	r3, #29
 8009608:	d001      	beq.n	800960e <__sflush_r+0xb2>
 800960a:	2b16      	cmp	r3, #22
 800960c:	d101      	bne.n	8009612 <__sflush_r+0xb6>
 800960e:	602f      	str	r7, [r5, #0]
 8009610:	e7b1      	b.n	8009576 <__sflush_r+0x1a>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7ad      	b.n	8009578 <__sflush_r+0x1c>
 800961c:	690f      	ldr	r7, [r1, #16]
 800961e:	2f00      	cmp	r7, #0
 8009620:	d0a9      	beq.n	8009576 <__sflush_r+0x1a>
 8009622:	0793      	lsls	r3, r2, #30
 8009624:	680e      	ldr	r6, [r1, #0]
 8009626:	bf08      	it	eq
 8009628:	694b      	ldreq	r3, [r1, #20]
 800962a:	600f      	str	r7, [r1, #0]
 800962c:	bf18      	it	ne
 800962e:	2300      	movne	r3, #0
 8009630:	eba6 0807 	sub.w	r8, r6, r7
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	f1b8 0f00 	cmp.w	r8, #0
 800963a:	dd9c      	ble.n	8009576 <__sflush_r+0x1a>
 800963c:	4643      	mov	r3, r8
 800963e:	463a      	mov	r2, r7
 8009640:	6a21      	ldr	r1, [r4, #32]
 8009642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009644:	4628      	mov	r0, r5
 8009646:	47b0      	blx	r6
 8009648:	2800      	cmp	r0, #0
 800964a:	dc06      	bgt.n	800965a <__sflush_r+0xfe>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009658:	e78e      	b.n	8009578 <__sflush_r+0x1c>
 800965a:	4407      	add	r7, r0
 800965c:	eba8 0800 	sub.w	r8, r8, r0
 8009660:	e7e9      	b.n	8009636 <__sflush_r+0xda>
 8009662:	bf00      	nop
 8009664:	20400001 	.word	0x20400001

08009668 <_fflush_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	690b      	ldr	r3, [r1, #16]
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b1db      	cbz	r3, 80096aa <_fflush_r+0x42>
 8009672:	b118      	cbz	r0, 800967c <_fflush_r+0x14>
 8009674:	6983      	ldr	r3, [r0, #24]
 8009676:	b90b      	cbnz	r3, 800967c <_fflush_r+0x14>
 8009678:	f000 f860 	bl	800973c <__sinit>
 800967c:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <_fflush_r+0x48>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d109      	bne.n	8009696 <_fflush_r+0x2e>
 8009682:	686c      	ldr	r4, [r5, #4]
 8009684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009688:	b17b      	cbz	r3, 80096aa <_fflush_r+0x42>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009692:	f7ff bf63 	b.w	800955c <__sflush_r>
 8009696:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <_fflush_r+0x4c>)
 8009698:	429c      	cmp	r4, r3
 800969a:	d101      	bne.n	80096a0 <_fflush_r+0x38>
 800969c:	68ac      	ldr	r4, [r5, #8]
 800969e:	e7f1      	b.n	8009684 <_fflush_r+0x1c>
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <_fflush_r+0x50>)
 80096a2:	429c      	cmp	r4, r3
 80096a4:	bf08      	it	eq
 80096a6:	68ec      	ldreq	r4, [r5, #12]
 80096a8:	e7ec      	b.n	8009684 <_fflush_r+0x1c>
 80096aa:	2000      	movs	r0, #0
 80096ac:	bd38      	pop	{r3, r4, r5, pc}
 80096ae:	bf00      	nop
 80096b0:	0800a734 	.word	0x0800a734
 80096b4:	0800a754 	.word	0x0800a754
 80096b8:	0800a714 	.word	0x0800a714

080096bc <std>:
 80096bc:	2300      	movs	r3, #0
 80096be:	b510      	push	{r4, lr}
 80096c0:	4604      	mov	r4, r0
 80096c2:	e9c0 3300 	strd	r3, r3, [r0]
 80096c6:	6083      	str	r3, [r0, #8]
 80096c8:	8181      	strh	r1, [r0, #12]
 80096ca:	6643      	str	r3, [r0, #100]	; 0x64
 80096cc:	81c2      	strh	r2, [r0, #14]
 80096ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096d2:	6183      	str	r3, [r0, #24]
 80096d4:	4619      	mov	r1, r3
 80096d6:	2208      	movs	r2, #8
 80096d8:	305c      	adds	r0, #92	; 0x5c
 80096da:	f7ff fddf 	bl	800929c <memset>
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x38>)
 80096e0:	6263      	str	r3, [r4, #36]	; 0x24
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x3c>)
 80096e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x40>)
 80096e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x44>)
 80096ec:	6224      	str	r4, [r4, #32]
 80096ee:	6323      	str	r3, [r4, #48]	; 0x30
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	bf00      	nop
 80096f4:	0800a03d 	.word	0x0800a03d
 80096f8:	0800a05f 	.word	0x0800a05f
 80096fc:	0800a097 	.word	0x0800a097
 8009700:	0800a0bb 	.word	0x0800a0bb

08009704 <_cleanup_r>:
 8009704:	4901      	ldr	r1, [pc, #4]	; (800970c <_cleanup_r+0x8>)
 8009706:	f000 b885 	b.w	8009814 <_fwalk_reent>
 800970a:	bf00      	nop
 800970c:	08009669 	.word	0x08009669

08009710 <__sfmoreglue>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	1e4a      	subs	r2, r1, #1
 8009714:	2568      	movs	r5, #104	; 0x68
 8009716:	4355      	muls	r5, r2
 8009718:	460e      	mov	r6, r1
 800971a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800971e:	f000 f949 	bl	80099b4 <_malloc_r>
 8009722:	4604      	mov	r4, r0
 8009724:	b140      	cbz	r0, 8009738 <__sfmoreglue+0x28>
 8009726:	2100      	movs	r1, #0
 8009728:	e9c0 1600 	strd	r1, r6, [r0]
 800972c:	300c      	adds	r0, #12
 800972e:	60a0      	str	r0, [r4, #8]
 8009730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009734:	f7ff fdb2 	bl	800929c <memset>
 8009738:	4620      	mov	r0, r4
 800973a:	bd70      	pop	{r4, r5, r6, pc}

0800973c <__sinit>:
 800973c:	6983      	ldr	r3, [r0, #24]
 800973e:	b510      	push	{r4, lr}
 8009740:	4604      	mov	r4, r0
 8009742:	bb33      	cbnz	r3, 8009792 <__sinit+0x56>
 8009744:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009748:	6503      	str	r3, [r0, #80]	; 0x50
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <__sinit+0x58>)
 800974c:	4a12      	ldr	r2, [pc, #72]	; (8009798 <__sinit+0x5c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6282      	str	r2, [r0, #40]	; 0x28
 8009752:	4298      	cmp	r0, r3
 8009754:	bf04      	itt	eq
 8009756:	2301      	moveq	r3, #1
 8009758:	6183      	streq	r3, [r0, #24]
 800975a:	f000 f81f 	bl	800979c <__sfp>
 800975e:	6060      	str	r0, [r4, #4]
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f81b 	bl	800979c <__sfp>
 8009766:	60a0      	str	r0, [r4, #8]
 8009768:	4620      	mov	r0, r4
 800976a:	f000 f817 	bl	800979c <__sfp>
 800976e:	2200      	movs	r2, #0
 8009770:	60e0      	str	r0, [r4, #12]
 8009772:	2104      	movs	r1, #4
 8009774:	6860      	ldr	r0, [r4, #4]
 8009776:	f7ff ffa1 	bl	80096bc <std>
 800977a:	2201      	movs	r2, #1
 800977c:	2109      	movs	r1, #9
 800977e:	68a0      	ldr	r0, [r4, #8]
 8009780:	f7ff ff9c 	bl	80096bc <std>
 8009784:	2202      	movs	r2, #2
 8009786:	2112      	movs	r1, #18
 8009788:	68e0      	ldr	r0, [r4, #12]
 800978a:	f7ff ff97 	bl	80096bc <std>
 800978e:	2301      	movs	r3, #1
 8009790:	61a3      	str	r3, [r4, #24]
 8009792:	bd10      	pop	{r4, pc}
 8009794:	0800a710 	.word	0x0800a710
 8009798:	08009705 	.word	0x08009705

0800979c <__sfp>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	4b1b      	ldr	r3, [pc, #108]	; (800980c <__sfp+0x70>)
 80097a0:	681e      	ldr	r6, [r3, #0]
 80097a2:	69b3      	ldr	r3, [r6, #24]
 80097a4:	4607      	mov	r7, r0
 80097a6:	b913      	cbnz	r3, 80097ae <__sfp+0x12>
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff ffc7 	bl	800973c <__sinit>
 80097ae:	3648      	adds	r6, #72	; 0x48
 80097b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	d503      	bpl.n	80097c0 <__sfp+0x24>
 80097b8:	6833      	ldr	r3, [r6, #0]
 80097ba:	b133      	cbz	r3, 80097ca <__sfp+0x2e>
 80097bc:	6836      	ldr	r6, [r6, #0]
 80097be:	e7f7      	b.n	80097b0 <__sfp+0x14>
 80097c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097c4:	b16d      	cbz	r5, 80097e2 <__sfp+0x46>
 80097c6:	3468      	adds	r4, #104	; 0x68
 80097c8:	e7f4      	b.n	80097b4 <__sfp+0x18>
 80097ca:	2104      	movs	r1, #4
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff ff9f 	bl	8009710 <__sfmoreglue>
 80097d2:	6030      	str	r0, [r6, #0]
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1f1      	bne.n	80097bc <__sfp+0x20>
 80097d8:	230c      	movs	r3, #12
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	4604      	mov	r4, r0
 80097de:	4620      	mov	r0, r4
 80097e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e2:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <__sfp+0x74>)
 80097e4:	6665      	str	r5, [r4, #100]	; 0x64
 80097e6:	e9c4 5500 	strd	r5, r5, [r4]
 80097ea:	60a5      	str	r5, [r4, #8]
 80097ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80097f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80097f4:	2208      	movs	r2, #8
 80097f6:	4629      	mov	r1, r5
 80097f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097fc:	f7ff fd4e 	bl	800929c <memset>
 8009800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009808:	e7e9      	b.n	80097de <__sfp+0x42>
 800980a:	bf00      	nop
 800980c:	0800a710 	.word	0x0800a710
 8009810:	ffff0001 	.word	0xffff0001

08009814 <_fwalk_reent>:
 8009814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009818:	4680      	mov	r8, r0
 800981a:	4689      	mov	r9, r1
 800981c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009820:	2600      	movs	r6, #0
 8009822:	b914      	cbnz	r4, 800982a <_fwalk_reent+0x16>
 8009824:	4630      	mov	r0, r6
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800982e:	3f01      	subs	r7, #1
 8009830:	d501      	bpl.n	8009836 <_fwalk_reent+0x22>
 8009832:	6824      	ldr	r4, [r4, #0]
 8009834:	e7f5      	b.n	8009822 <_fwalk_reent+0xe>
 8009836:	89ab      	ldrh	r3, [r5, #12]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d907      	bls.n	800984c <_fwalk_reent+0x38>
 800983c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009840:	3301      	adds	r3, #1
 8009842:	d003      	beq.n	800984c <_fwalk_reent+0x38>
 8009844:	4629      	mov	r1, r5
 8009846:	4640      	mov	r0, r8
 8009848:	47c8      	blx	r9
 800984a:	4306      	orrs	r6, r0
 800984c:	3568      	adds	r5, #104	; 0x68
 800984e:	e7ee      	b.n	800982e <_fwalk_reent+0x1a>

08009850 <__swhatbuf_r>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	460e      	mov	r6, r1
 8009854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009858:	2900      	cmp	r1, #0
 800985a:	b096      	sub	sp, #88	; 0x58
 800985c:	4614      	mov	r4, r2
 800985e:	461d      	mov	r5, r3
 8009860:	da07      	bge.n	8009872 <__swhatbuf_r+0x22>
 8009862:	2300      	movs	r3, #0
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	89b3      	ldrh	r3, [r6, #12]
 8009868:	061a      	lsls	r2, r3, #24
 800986a:	d410      	bmi.n	800988e <__swhatbuf_r+0x3e>
 800986c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009870:	e00e      	b.n	8009890 <__swhatbuf_r+0x40>
 8009872:	466a      	mov	r2, sp
 8009874:	f000 fc48 	bl	800a108 <_fstat_r>
 8009878:	2800      	cmp	r0, #0
 800987a:	dbf2      	blt.n	8009862 <__swhatbuf_r+0x12>
 800987c:	9a01      	ldr	r2, [sp, #4]
 800987e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009886:	425a      	negs	r2, r3
 8009888:	415a      	adcs	r2, r3
 800988a:	602a      	str	r2, [r5, #0]
 800988c:	e7ee      	b.n	800986c <__swhatbuf_r+0x1c>
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	2000      	movs	r0, #0
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	b016      	add	sp, #88	; 0x58
 8009896:	bd70      	pop	{r4, r5, r6, pc}

08009898 <__smakebuf_r>:
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800989c:	079d      	lsls	r5, r3, #30
 800989e:	4606      	mov	r6, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	d507      	bpl.n	80098b4 <__smakebuf_r+0x1c>
 80098a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	2301      	movs	r3, #1
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	b002      	add	sp, #8
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	ab01      	add	r3, sp, #4
 80098b6:	466a      	mov	r2, sp
 80098b8:	f7ff ffca 	bl	8009850 <__swhatbuf_r>
 80098bc:	9900      	ldr	r1, [sp, #0]
 80098be:	4605      	mov	r5, r0
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f877 	bl	80099b4 <_malloc_r>
 80098c6:	b948      	cbnz	r0, 80098dc <__smakebuf_r+0x44>
 80098c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098cc:	059a      	lsls	r2, r3, #22
 80098ce:	d4ef      	bmi.n	80098b0 <__smakebuf_r+0x18>
 80098d0:	f023 0303 	bic.w	r3, r3, #3
 80098d4:	f043 0302 	orr.w	r3, r3, #2
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	e7e3      	b.n	80098a4 <__smakebuf_r+0xc>
 80098dc:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <__smakebuf_r+0x7c>)
 80098de:	62b3      	str	r3, [r6, #40]	; 0x28
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	6020      	str	r0, [r4, #0]
 80098e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	9b00      	ldr	r3, [sp, #0]
 80098ec:	6163      	str	r3, [r4, #20]
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	6120      	str	r0, [r4, #16]
 80098f2:	b15b      	cbz	r3, 800990c <__smakebuf_r+0x74>
 80098f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 fc17 	bl	800a12c <_isatty_r>
 80098fe:	b128      	cbz	r0, 800990c <__smakebuf_r+0x74>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f023 0303 	bic.w	r3, r3, #3
 8009906:	f043 0301 	orr.w	r3, r3, #1
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	431d      	orrs	r5, r3
 8009910:	81a5      	strh	r5, [r4, #12]
 8009912:	e7cd      	b.n	80098b0 <__smakebuf_r+0x18>
 8009914:	08009705 	.word	0x08009705

08009918 <_free_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4605      	mov	r5, r0
 800991c:	2900      	cmp	r1, #0
 800991e:	d045      	beq.n	80099ac <_free_r+0x94>
 8009920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009924:	1f0c      	subs	r4, r1, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfb8      	it	lt
 800992a:	18e4      	addlt	r4, r4, r3
 800992c:	f000 fc44 	bl	800a1b8 <__malloc_lock>
 8009930:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <_free_r+0x98>)
 8009932:	6813      	ldr	r3, [r2, #0]
 8009934:	4610      	mov	r0, r2
 8009936:	b933      	cbnz	r3, 8009946 <_free_r+0x2e>
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	6014      	str	r4, [r2, #0]
 800993c:	4628      	mov	r0, r5
 800993e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009942:	f000 bc3a 	b.w	800a1ba <__malloc_unlock>
 8009946:	42a3      	cmp	r3, r4
 8009948:	d90c      	bls.n	8009964 <_free_r+0x4c>
 800994a:	6821      	ldr	r1, [r4, #0]
 800994c:	1862      	adds	r2, r4, r1
 800994e:	4293      	cmp	r3, r2
 8009950:	bf04      	itt	eq
 8009952:	681a      	ldreq	r2, [r3, #0]
 8009954:	685b      	ldreq	r3, [r3, #4]
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	bf04      	itt	eq
 800995a:	1852      	addeq	r2, r2, r1
 800995c:	6022      	streq	r2, [r4, #0]
 800995e:	6004      	str	r4, [r0, #0]
 8009960:	e7ec      	b.n	800993c <_free_r+0x24>
 8009962:	4613      	mov	r3, r2
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	b10a      	cbz	r2, 800996c <_free_r+0x54>
 8009968:	42a2      	cmp	r2, r4
 800996a:	d9fa      	bls.n	8009962 <_free_r+0x4a>
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	1858      	adds	r0, r3, r1
 8009970:	42a0      	cmp	r0, r4
 8009972:	d10b      	bne.n	800998c <_free_r+0x74>
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	4401      	add	r1, r0
 8009978:	1858      	adds	r0, r3, r1
 800997a:	4282      	cmp	r2, r0
 800997c:	6019      	str	r1, [r3, #0]
 800997e:	d1dd      	bne.n	800993c <_free_r+0x24>
 8009980:	6810      	ldr	r0, [r2, #0]
 8009982:	6852      	ldr	r2, [r2, #4]
 8009984:	605a      	str	r2, [r3, #4]
 8009986:	4401      	add	r1, r0
 8009988:	6019      	str	r1, [r3, #0]
 800998a:	e7d7      	b.n	800993c <_free_r+0x24>
 800998c:	d902      	bls.n	8009994 <_free_r+0x7c>
 800998e:	230c      	movs	r3, #12
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	e7d3      	b.n	800993c <_free_r+0x24>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	1821      	adds	r1, r4, r0
 8009998:	428a      	cmp	r2, r1
 800999a:	bf04      	itt	eq
 800999c:	6811      	ldreq	r1, [r2, #0]
 800999e:	6852      	ldreq	r2, [r2, #4]
 80099a0:	6062      	str	r2, [r4, #4]
 80099a2:	bf04      	itt	eq
 80099a4:	1809      	addeq	r1, r1, r0
 80099a6:	6021      	streq	r1, [r4, #0]
 80099a8:	605c      	str	r4, [r3, #4]
 80099aa:	e7c7      	b.n	800993c <_free_r+0x24>
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	20000bfc 	.word	0x20000bfc

080099b4 <_malloc_r>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	1ccd      	adds	r5, r1, #3
 80099b8:	f025 0503 	bic.w	r5, r5, #3
 80099bc:	3508      	adds	r5, #8
 80099be:	2d0c      	cmp	r5, #12
 80099c0:	bf38      	it	cc
 80099c2:	250c      	movcc	r5, #12
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	4606      	mov	r6, r0
 80099c8:	db01      	blt.n	80099ce <_malloc_r+0x1a>
 80099ca:	42a9      	cmp	r1, r5
 80099cc:	d903      	bls.n	80099d6 <_malloc_r+0x22>
 80099ce:	230c      	movs	r3, #12
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	2000      	movs	r0, #0
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	f000 fbef 	bl	800a1b8 <__malloc_lock>
 80099da:	4a21      	ldr	r2, [pc, #132]	; (8009a60 <_malloc_r+0xac>)
 80099dc:	6814      	ldr	r4, [r2, #0]
 80099de:	4621      	mov	r1, r4
 80099e0:	b991      	cbnz	r1, 8009a08 <_malloc_r+0x54>
 80099e2:	4c20      	ldr	r4, [pc, #128]	; (8009a64 <_malloc_r+0xb0>)
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	b91b      	cbnz	r3, 80099f0 <_malloc_r+0x3c>
 80099e8:	4630      	mov	r0, r6
 80099ea:	f000 fb17 	bl	800a01c <_sbrk_r>
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 fb12 	bl	800a01c <_sbrk_r>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d124      	bne.n	8009a46 <_malloc_r+0x92>
 80099fc:	230c      	movs	r3, #12
 80099fe:	6033      	str	r3, [r6, #0]
 8009a00:	4630      	mov	r0, r6
 8009a02:	f000 fbda 	bl	800a1ba <__malloc_unlock>
 8009a06:	e7e4      	b.n	80099d2 <_malloc_r+0x1e>
 8009a08:	680b      	ldr	r3, [r1, #0]
 8009a0a:	1b5b      	subs	r3, r3, r5
 8009a0c:	d418      	bmi.n	8009a40 <_malloc_r+0x8c>
 8009a0e:	2b0b      	cmp	r3, #11
 8009a10:	d90f      	bls.n	8009a32 <_malloc_r+0x7e>
 8009a12:	600b      	str	r3, [r1, #0]
 8009a14:	50cd      	str	r5, [r1, r3]
 8009a16:	18cc      	adds	r4, r1, r3
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 fbce 	bl	800a1ba <__malloc_unlock>
 8009a1e:	f104 000b 	add.w	r0, r4, #11
 8009a22:	1d23      	adds	r3, r4, #4
 8009a24:	f020 0007 	bic.w	r0, r0, #7
 8009a28:	1ac3      	subs	r3, r0, r3
 8009a2a:	d0d3      	beq.n	80099d4 <_malloc_r+0x20>
 8009a2c:	425a      	negs	r2, r3
 8009a2e:	50e2      	str	r2, [r4, r3]
 8009a30:	e7d0      	b.n	80099d4 <_malloc_r+0x20>
 8009a32:	428c      	cmp	r4, r1
 8009a34:	684b      	ldr	r3, [r1, #4]
 8009a36:	bf16      	itet	ne
 8009a38:	6063      	strne	r3, [r4, #4]
 8009a3a:	6013      	streq	r3, [r2, #0]
 8009a3c:	460c      	movne	r4, r1
 8009a3e:	e7eb      	b.n	8009a18 <_malloc_r+0x64>
 8009a40:	460c      	mov	r4, r1
 8009a42:	6849      	ldr	r1, [r1, #4]
 8009a44:	e7cc      	b.n	80099e0 <_malloc_r+0x2c>
 8009a46:	1cc4      	adds	r4, r0, #3
 8009a48:	f024 0403 	bic.w	r4, r4, #3
 8009a4c:	42a0      	cmp	r0, r4
 8009a4e:	d005      	beq.n	8009a5c <_malloc_r+0xa8>
 8009a50:	1a21      	subs	r1, r4, r0
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 fae2 	bl	800a01c <_sbrk_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d0cf      	beq.n	80099fc <_malloc_r+0x48>
 8009a5c:	6025      	str	r5, [r4, #0]
 8009a5e:	e7db      	b.n	8009a18 <_malloc_r+0x64>
 8009a60:	20000bfc 	.word	0x20000bfc
 8009a64:	20000c00 	.word	0x20000c00

08009a68 <__ssputs_r>:
 8009a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6c:	688e      	ldr	r6, [r1, #8]
 8009a6e:	429e      	cmp	r6, r3
 8009a70:	4682      	mov	sl, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4690      	mov	r8, r2
 8009a76:	4699      	mov	r9, r3
 8009a78:	d837      	bhi.n	8009aea <__ssputs_r+0x82>
 8009a7a:	898a      	ldrh	r2, [r1, #12]
 8009a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a80:	d031      	beq.n	8009ae6 <__ssputs_r+0x7e>
 8009a82:	6825      	ldr	r5, [r4, #0]
 8009a84:	6909      	ldr	r1, [r1, #16]
 8009a86:	1a6f      	subs	r7, r5, r1
 8009a88:	6965      	ldr	r5, [r4, #20]
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a90:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a94:	f109 0301 	add.w	r3, r9, #1
 8009a98:	443b      	add	r3, r7
 8009a9a:	429d      	cmp	r5, r3
 8009a9c:	bf38      	it	cc
 8009a9e:	461d      	movcc	r5, r3
 8009aa0:	0553      	lsls	r3, r2, #21
 8009aa2:	d530      	bpl.n	8009b06 <__ssputs_r+0x9e>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7ff ff85 	bl	80099b4 <_malloc_r>
 8009aaa:	4606      	mov	r6, r0
 8009aac:	b950      	cbnz	r0, 8009ac4 <__ssputs_r+0x5c>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	f8ca 3000 	str.w	r3, [sl]
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	6921      	ldr	r1, [r4, #16]
 8009ac8:	f000 fb52 	bl	800a170 <memcpy>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	6126      	str	r6, [r4, #16]
 8009ada:	6165      	str	r5, [r4, #20]
 8009adc:	443e      	add	r6, r7
 8009ade:	1bed      	subs	r5, r5, r7
 8009ae0:	6026      	str	r6, [r4, #0]
 8009ae2:	60a5      	str	r5, [r4, #8]
 8009ae4:	464e      	mov	r6, r9
 8009ae6:	454e      	cmp	r6, r9
 8009ae8:	d900      	bls.n	8009aec <__ssputs_r+0x84>
 8009aea:	464e      	mov	r6, r9
 8009aec:	4632      	mov	r2, r6
 8009aee:	4641      	mov	r1, r8
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	f000 fb48 	bl	800a186 <memmove>
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	1b9b      	subs	r3, r3, r6
 8009afa:	60a3      	str	r3, [r4, #8]
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	441e      	add	r6, r3
 8009b00:	6026      	str	r6, [r4, #0]
 8009b02:	2000      	movs	r0, #0
 8009b04:	e7dc      	b.n	8009ac0 <__ssputs_r+0x58>
 8009b06:	462a      	mov	r2, r5
 8009b08:	f000 fb58 	bl	800a1bc <_realloc_r>
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d1e2      	bne.n	8009ad8 <__ssputs_r+0x70>
 8009b12:	6921      	ldr	r1, [r4, #16]
 8009b14:	4650      	mov	r0, sl
 8009b16:	f7ff feff 	bl	8009918 <_free_r>
 8009b1a:	e7c8      	b.n	8009aae <__ssputs_r+0x46>

08009b1c <_svfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	461d      	mov	r5, r3
 8009b22:	898b      	ldrh	r3, [r1, #12]
 8009b24:	061f      	lsls	r7, r3, #24
 8009b26:	b09d      	sub	sp, #116	; 0x74
 8009b28:	4680      	mov	r8, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	d50f      	bpl.n	8009b50 <_svfiprintf_r+0x34>
 8009b30:	690b      	ldr	r3, [r1, #16]
 8009b32:	b96b      	cbnz	r3, 8009b50 <_svfiprintf_r+0x34>
 8009b34:	2140      	movs	r1, #64	; 0x40
 8009b36:	f7ff ff3d 	bl	80099b4 <_malloc_r>
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	6120      	str	r0, [r4, #16]
 8009b3e:	b928      	cbnz	r0, 8009b4c <_svfiprintf_r+0x30>
 8009b40:	230c      	movs	r3, #12
 8009b42:	f8c8 3000 	str.w	r3, [r8]
 8009b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b4a:	e0c8      	b.n	8009cde <_svfiprintf_r+0x1c2>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	6163      	str	r3, [r4, #20]
 8009b50:	2300      	movs	r3, #0
 8009b52:	9309      	str	r3, [sp, #36]	; 0x24
 8009b54:	2320      	movs	r3, #32
 8009b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b5a:	2330      	movs	r3, #48	; 0x30
 8009b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b60:	9503      	str	r5, [sp, #12]
 8009b62:	f04f 0b01 	mov.w	fp, #1
 8009b66:	4637      	mov	r7, r6
 8009b68:	463d      	mov	r5, r7
 8009b6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b6e:	b10b      	cbz	r3, 8009b74 <_svfiprintf_r+0x58>
 8009b70:	2b25      	cmp	r3, #37	; 0x25
 8009b72:	d13e      	bne.n	8009bf2 <_svfiprintf_r+0xd6>
 8009b74:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b78:	d00b      	beq.n	8009b92 <_svfiprintf_r+0x76>
 8009b7a:	4653      	mov	r3, sl
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4640      	mov	r0, r8
 8009b82:	f7ff ff71 	bl	8009a68 <__ssputs_r>
 8009b86:	3001      	adds	r0, #1
 8009b88:	f000 80a4 	beq.w	8009cd4 <_svfiprintf_r+0x1b8>
 8009b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8e:	4453      	add	r3, sl
 8009b90:	9309      	str	r3, [sp, #36]	; 0x24
 8009b92:	783b      	ldrb	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 809d 	beq.w	8009cd4 <_svfiprintf_r+0x1b8>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bac:	931a      	str	r3, [sp, #104]	; 0x68
 8009bae:	462f      	mov	r7, r5
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009bb6:	4850      	ldr	r0, [pc, #320]	; (8009cf8 <_svfiprintf_r+0x1dc>)
 8009bb8:	f7f6 fb32 	bl	8000220 <memchr>
 8009bbc:	9b04      	ldr	r3, [sp, #16]
 8009bbe:	b9d0      	cbnz	r0, 8009bf6 <_svfiprintf_r+0xda>
 8009bc0:	06d9      	lsls	r1, r3, #27
 8009bc2:	bf44      	itt	mi
 8009bc4:	2220      	movmi	r2, #32
 8009bc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bca:	071a      	lsls	r2, r3, #28
 8009bcc:	bf44      	itt	mi
 8009bce:	222b      	movmi	r2, #43	; 0x2b
 8009bd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bd4:	782a      	ldrb	r2, [r5, #0]
 8009bd6:	2a2a      	cmp	r2, #42	; 0x2a
 8009bd8:	d015      	beq.n	8009c06 <_svfiprintf_r+0xea>
 8009bda:	9a07      	ldr	r2, [sp, #28]
 8009bdc:	462f      	mov	r7, r5
 8009bde:	2000      	movs	r0, #0
 8009be0:	250a      	movs	r5, #10
 8009be2:	4639      	mov	r1, r7
 8009be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be8:	3b30      	subs	r3, #48	; 0x30
 8009bea:	2b09      	cmp	r3, #9
 8009bec:	d94d      	bls.n	8009c8a <_svfiprintf_r+0x16e>
 8009bee:	b1b8      	cbz	r0, 8009c20 <_svfiprintf_r+0x104>
 8009bf0:	e00f      	b.n	8009c12 <_svfiprintf_r+0xf6>
 8009bf2:	462f      	mov	r7, r5
 8009bf4:	e7b8      	b.n	8009b68 <_svfiprintf_r+0x4c>
 8009bf6:	4a40      	ldr	r2, [pc, #256]	; (8009cf8 <_svfiprintf_r+0x1dc>)
 8009bf8:	1a80      	subs	r0, r0, r2
 8009bfa:	fa0b f000 	lsl.w	r0, fp, r0
 8009bfe:	4318      	orrs	r0, r3
 8009c00:	9004      	str	r0, [sp, #16]
 8009c02:	463d      	mov	r5, r7
 8009c04:	e7d3      	b.n	8009bae <_svfiprintf_r+0x92>
 8009c06:	9a03      	ldr	r2, [sp, #12]
 8009c08:	1d11      	adds	r1, r2, #4
 8009c0a:	6812      	ldr	r2, [r2, #0]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	db01      	blt.n	8009c16 <_svfiprintf_r+0xfa>
 8009c12:	9207      	str	r2, [sp, #28]
 8009c14:	e004      	b.n	8009c20 <_svfiprintf_r+0x104>
 8009c16:	4252      	negs	r2, r2
 8009c18:	f043 0302 	orr.w	r3, r3, #2
 8009c1c:	9207      	str	r2, [sp, #28]
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	783b      	ldrb	r3, [r7, #0]
 8009c22:	2b2e      	cmp	r3, #46	; 0x2e
 8009c24:	d10c      	bne.n	8009c40 <_svfiprintf_r+0x124>
 8009c26:	787b      	ldrb	r3, [r7, #1]
 8009c28:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2a:	d133      	bne.n	8009c94 <_svfiprintf_r+0x178>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	1d1a      	adds	r2, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	9203      	str	r2, [sp, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bfb8      	it	lt
 8009c38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c3c:	3702      	adds	r7, #2
 8009c3e:	9305      	str	r3, [sp, #20]
 8009c40:	4d2e      	ldr	r5, [pc, #184]	; (8009cfc <_svfiprintf_r+0x1e0>)
 8009c42:	7839      	ldrb	r1, [r7, #0]
 8009c44:	2203      	movs	r2, #3
 8009c46:	4628      	mov	r0, r5
 8009c48:	f7f6 faea 	bl	8000220 <memchr>
 8009c4c:	b138      	cbz	r0, 8009c5e <_svfiprintf_r+0x142>
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	1b40      	subs	r0, r0, r5
 8009c52:	fa03 f000 	lsl.w	r0, r3, r0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	4303      	orrs	r3, r0
 8009c5a:	3701      	adds	r7, #1
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	7839      	ldrb	r1, [r7, #0]
 8009c60:	4827      	ldr	r0, [pc, #156]	; (8009d00 <_svfiprintf_r+0x1e4>)
 8009c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c66:	2206      	movs	r2, #6
 8009c68:	1c7e      	adds	r6, r7, #1
 8009c6a:	f7f6 fad9 	bl	8000220 <memchr>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d038      	beq.n	8009ce4 <_svfiprintf_r+0x1c8>
 8009c72:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <_svfiprintf_r+0x1e8>)
 8009c74:	bb13      	cbnz	r3, 8009cbc <_svfiprintf_r+0x1a0>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	3307      	adds	r3, #7
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	444b      	add	r3, r9
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	e76d      	b.n	8009b66 <_svfiprintf_r+0x4a>
 8009c8a:	fb05 3202 	mla	r2, r5, r2, r3
 8009c8e:	2001      	movs	r0, #1
 8009c90:	460f      	mov	r7, r1
 8009c92:	e7a6      	b.n	8009be2 <_svfiprintf_r+0xc6>
 8009c94:	2300      	movs	r3, #0
 8009c96:	3701      	adds	r7, #1
 8009c98:	9305      	str	r3, [sp, #20]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	250a      	movs	r5, #10
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca4:	3a30      	subs	r2, #48	; 0x30
 8009ca6:	2a09      	cmp	r2, #9
 8009ca8:	d903      	bls.n	8009cb2 <_svfiprintf_r+0x196>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c8      	beq.n	8009c40 <_svfiprintf_r+0x124>
 8009cae:	9105      	str	r1, [sp, #20]
 8009cb0:	e7c6      	b.n	8009c40 <_svfiprintf_r+0x124>
 8009cb2:	fb05 2101 	mla	r1, r5, r1, r2
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4607      	mov	r7, r0
 8009cba:	e7f0      	b.n	8009c9e <_svfiprintf_r+0x182>
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <_svfiprintf_r+0x1ec>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	f3af 8000 	nop.w
 8009ccc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	d1d6      	bne.n	8009c82 <_svfiprintf_r+0x166>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	065b      	lsls	r3, r3, #25
 8009cd8:	f53f af35 	bmi.w	8009b46 <_svfiprintf_r+0x2a>
 8009cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cde:	b01d      	add	sp, #116	; 0x74
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <_svfiprintf_r+0x1ec>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f000 f882 	bl	8009df8 <_printf_i>
 8009cf4:	e7ea      	b.n	8009ccc <_svfiprintf_r+0x1b0>
 8009cf6:	bf00      	nop
 8009cf8:	0800a774 	.word	0x0800a774
 8009cfc:	0800a77a 	.word	0x0800a77a
 8009d00:	0800a77e 	.word	0x0800a77e
 8009d04:	00000000 	.word	0x00000000
 8009d08:	08009a69 	.word	0x08009a69

08009d0c <_printf_common>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	4691      	mov	r9, r2
 8009d12:	461f      	mov	r7, r3
 8009d14:	688a      	ldr	r2, [r1, #8]
 8009d16:	690b      	ldr	r3, [r1, #16]
 8009d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	bfb8      	it	lt
 8009d20:	4613      	movlt	r3, r2
 8009d22:	f8c9 3000 	str.w	r3, [r9]
 8009d26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	b112      	cbz	r2, 8009d36 <_printf_common+0x2a>
 8009d30:	3301      	adds	r3, #1
 8009d32:	f8c9 3000 	str.w	r3, [r9]
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	0699      	lsls	r1, r3, #26
 8009d3a:	bf42      	ittt	mi
 8009d3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d40:	3302      	addmi	r3, #2
 8009d42:	f8c9 3000 	strmi.w	r3, [r9]
 8009d46:	6825      	ldr	r5, [r4, #0]
 8009d48:	f015 0506 	ands.w	r5, r5, #6
 8009d4c:	d107      	bne.n	8009d5e <_printf_common+0x52>
 8009d4e:	f104 0a19 	add.w	sl, r4, #25
 8009d52:	68e3      	ldr	r3, [r4, #12]
 8009d54:	f8d9 2000 	ldr.w	r2, [r9]
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	42ab      	cmp	r3, r5
 8009d5c:	dc28      	bgt.n	8009db0 <_printf_common+0xa4>
 8009d5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	3300      	adds	r3, #0
 8009d66:	bf18      	it	ne
 8009d68:	2301      	movne	r3, #1
 8009d6a:	0692      	lsls	r2, r2, #26
 8009d6c:	d42d      	bmi.n	8009dca <_printf_common+0xbe>
 8009d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d72:	4639      	mov	r1, r7
 8009d74:	4630      	mov	r0, r6
 8009d76:	47c0      	blx	r8
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d020      	beq.n	8009dbe <_printf_common+0xb2>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	68e5      	ldr	r5, [r4, #12]
 8009d80:	f8d9 2000 	ldr.w	r2, [r9]
 8009d84:	f003 0306 	and.w	r3, r3, #6
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	bf08      	it	eq
 8009d8c:	1aad      	subeq	r5, r5, r2
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	bf0c      	ite	eq
 8009d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d98:	2500      	movne	r5, #0
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	bfc4      	itt	gt
 8009d9e:	1a9b      	subgt	r3, r3, r2
 8009da0:	18ed      	addgt	r5, r5, r3
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	341a      	adds	r4, #26
 8009da8:	454d      	cmp	r5, r9
 8009daa:	d11a      	bne.n	8009de2 <_printf_common+0xd6>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e008      	b.n	8009dc2 <_printf_common+0xb6>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4652      	mov	r2, sl
 8009db4:	4639      	mov	r1, r7
 8009db6:	4630      	mov	r0, r6
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d103      	bne.n	8009dc6 <_printf_common+0xba>
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	3501      	adds	r5, #1
 8009dc8:	e7c3      	b.n	8009d52 <_printf_common+0x46>
 8009dca:	18e1      	adds	r1, r4, r3
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	2030      	movs	r0, #48	; 0x30
 8009dd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dd4:	4422      	add	r2, r4
 8009dd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dde:	3302      	adds	r3, #2
 8009de0:	e7c5      	b.n	8009d6e <_printf_common+0x62>
 8009de2:	2301      	movs	r3, #1
 8009de4:	4622      	mov	r2, r4
 8009de6:	4639      	mov	r1, r7
 8009de8:	4630      	mov	r0, r6
 8009dea:	47c0      	blx	r8
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0e6      	beq.n	8009dbe <_printf_common+0xb2>
 8009df0:	f109 0901 	add.w	r9, r9, #1
 8009df4:	e7d8      	b.n	8009da8 <_printf_common+0x9c>
	...

08009df8 <_printf_i>:
 8009df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e00:	460c      	mov	r4, r1
 8009e02:	7e09      	ldrb	r1, [r1, #24]
 8009e04:	b085      	sub	sp, #20
 8009e06:	296e      	cmp	r1, #110	; 0x6e
 8009e08:	4617      	mov	r7, r2
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e10:	f000 80b3 	beq.w	8009f7a <_printf_i+0x182>
 8009e14:	d822      	bhi.n	8009e5c <_printf_i+0x64>
 8009e16:	2963      	cmp	r1, #99	; 0x63
 8009e18:	d036      	beq.n	8009e88 <_printf_i+0x90>
 8009e1a:	d80a      	bhi.n	8009e32 <_printf_i+0x3a>
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	f000 80b9 	beq.w	8009f94 <_printf_i+0x19c>
 8009e22:	2958      	cmp	r1, #88	; 0x58
 8009e24:	f000 8083 	beq.w	8009f2e <_printf_i+0x136>
 8009e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e30:	e032      	b.n	8009e98 <_printf_i+0xa0>
 8009e32:	2964      	cmp	r1, #100	; 0x64
 8009e34:	d001      	beq.n	8009e3a <_printf_i+0x42>
 8009e36:	2969      	cmp	r1, #105	; 0x69
 8009e38:	d1f6      	bne.n	8009e28 <_printf_i+0x30>
 8009e3a:	6820      	ldr	r0, [r4, #0]
 8009e3c:	6813      	ldr	r3, [r2, #0]
 8009e3e:	0605      	lsls	r5, r0, #24
 8009e40:	f103 0104 	add.w	r1, r3, #4
 8009e44:	d52a      	bpl.n	8009e9c <_printf_i+0xa4>
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6011      	str	r1, [r2, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da03      	bge.n	8009e56 <_printf_i+0x5e>
 8009e4e:	222d      	movs	r2, #45	; 0x2d
 8009e50:	425b      	negs	r3, r3
 8009e52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e56:	486f      	ldr	r0, [pc, #444]	; (800a014 <_printf_i+0x21c>)
 8009e58:	220a      	movs	r2, #10
 8009e5a:	e039      	b.n	8009ed0 <_printf_i+0xd8>
 8009e5c:	2973      	cmp	r1, #115	; 0x73
 8009e5e:	f000 809d 	beq.w	8009f9c <_printf_i+0x1a4>
 8009e62:	d808      	bhi.n	8009e76 <_printf_i+0x7e>
 8009e64:	296f      	cmp	r1, #111	; 0x6f
 8009e66:	d020      	beq.n	8009eaa <_printf_i+0xb2>
 8009e68:	2970      	cmp	r1, #112	; 0x70
 8009e6a:	d1dd      	bne.n	8009e28 <_printf_i+0x30>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	f043 0320 	orr.w	r3, r3, #32
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	e003      	b.n	8009e7e <_printf_i+0x86>
 8009e76:	2975      	cmp	r1, #117	; 0x75
 8009e78:	d017      	beq.n	8009eaa <_printf_i+0xb2>
 8009e7a:	2978      	cmp	r1, #120	; 0x78
 8009e7c:	d1d4      	bne.n	8009e28 <_printf_i+0x30>
 8009e7e:	2378      	movs	r3, #120	; 0x78
 8009e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e84:	4864      	ldr	r0, [pc, #400]	; (800a018 <_printf_i+0x220>)
 8009e86:	e055      	b.n	8009f34 <_printf_i+0x13c>
 8009e88:	6813      	ldr	r3, [r2, #0]
 8009e8a:	1d19      	adds	r1, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6011      	str	r1, [r2, #0]
 8009e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e08c      	b.n	8009fb6 <_printf_i+0x1be>
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6011      	str	r1, [r2, #0]
 8009ea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ea4:	bf18      	it	ne
 8009ea6:	b21b      	sxthne	r3, r3
 8009ea8:	e7cf      	b.n	8009e4a <_printf_i+0x52>
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	6825      	ldr	r5, [r4, #0]
 8009eae:	1d18      	adds	r0, r3, #4
 8009eb0:	6010      	str	r0, [r2, #0]
 8009eb2:	0628      	lsls	r0, r5, #24
 8009eb4:	d501      	bpl.n	8009eba <_printf_i+0xc2>
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	e002      	b.n	8009ec0 <_printf_i+0xc8>
 8009eba:	0668      	lsls	r0, r5, #25
 8009ebc:	d5fb      	bpl.n	8009eb6 <_printf_i+0xbe>
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	4854      	ldr	r0, [pc, #336]	; (800a014 <_printf_i+0x21c>)
 8009ec2:	296f      	cmp	r1, #111	; 0x6f
 8009ec4:	bf14      	ite	ne
 8009ec6:	220a      	movne	r2, #10
 8009ec8:	2208      	moveq	r2, #8
 8009eca:	2100      	movs	r1, #0
 8009ecc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ed0:	6865      	ldr	r5, [r4, #4]
 8009ed2:	60a5      	str	r5, [r4, #8]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	f2c0 8095 	blt.w	800a004 <_printf_i+0x20c>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	f021 0104 	bic.w	r1, r1, #4
 8009ee0:	6021      	str	r1, [r4, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d13d      	bne.n	8009f62 <_printf_i+0x16a>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	f040 808e 	bne.w	800a008 <_printf_i+0x210>
 8009eec:	4665      	mov	r5, ip
 8009eee:	2a08      	cmp	r2, #8
 8009ef0:	d10b      	bne.n	8009f0a <_printf_i+0x112>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	07db      	lsls	r3, r3, #31
 8009ef6:	d508      	bpl.n	8009f0a <_printf_i+0x112>
 8009ef8:	6923      	ldr	r3, [r4, #16]
 8009efa:	6862      	ldr	r2, [r4, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	bfde      	ittt	le
 8009f00:	2330      	movle	r3, #48	; 0x30
 8009f02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f06:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f0a:	ebac 0305 	sub.w	r3, ip, r5
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	f8cd 8000 	str.w	r8, [sp]
 8009f14:	463b      	mov	r3, r7
 8009f16:	aa03      	add	r2, sp, #12
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff fef6 	bl	8009d0c <_printf_common>
 8009f20:	3001      	adds	r0, #1
 8009f22:	d14d      	bne.n	8009fc0 <_printf_i+0x1c8>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f28:	b005      	add	sp, #20
 8009f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	4839      	ldr	r0, [pc, #228]	; (800a014 <_printf_i+0x21c>)
 8009f30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f34:	6813      	ldr	r3, [r2, #0]
 8009f36:	6821      	ldr	r1, [r4, #0]
 8009f38:	1d1d      	adds	r5, r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6015      	str	r5, [r2, #0]
 8009f3e:	060a      	lsls	r2, r1, #24
 8009f40:	d50b      	bpl.n	8009f5a <_printf_i+0x162>
 8009f42:	07ca      	lsls	r2, r1, #31
 8009f44:	bf44      	itt	mi
 8009f46:	f041 0120 	orrmi.w	r1, r1, #32
 8009f4a:	6021      	strmi	r1, [r4, #0]
 8009f4c:	b91b      	cbnz	r3, 8009f56 <_printf_i+0x15e>
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	f022 0220 	bic.w	r2, r2, #32
 8009f54:	6022      	str	r2, [r4, #0]
 8009f56:	2210      	movs	r2, #16
 8009f58:	e7b7      	b.n	8009eca <_printf_i+0xd2>
 8009f5a:	064d      	lsls	r5, r1, #25
 8009f5c:	bf48      	it	mi
 8009f5e:	b29b      	uxthmi	r3, r3
 8009f60:	e7ef      	b.n	8009f42 <_printf_i+0x14a>
 8009f62:	4665      	mov	r5, ip
 8009f64:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f68:	fb02 3311 	mls	r3, r2, r1, r3
 8009f6c:	5cc3      	ldrb	r3, [r0, r3]
 8009f6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f72:	460b      	mov	r3, r1
 8009f74:	2900      	cmp	r1, #0
 8009f76:	d1f5      	bne.n	8009f64 <_printf_i+0x16c>
 8009f78:	e7b9      	b.n	8009eee <_printf_i+0xf6>
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	6825      	ldr	r5, [r4, #0]
 8009f7e:	6961      	ldr	r1, [r4, #20]
 8009f80:	1d18      	adds	r0, r3, #4
 8009f82:	6010      	str	r0, [r2, #0]
 8009f84:	0628      	lsls	r0, r5, #24
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	d501      	bpl.n	8009f8e <_printf_i+0x196>
 8009f8a:	6019      	str	r1, [r3, #0]
 8009f8c:	e002      	b.n	8009f94 <_printf_i+0x19c>
 8009f8e:	066a      	lsls	r2, r5, #25
 8009f90:	d5fb      	bpl.n	8009f8a <_printf_i+0x192>
 8009f92:	8019      	strh	r1, [r3, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	4665      	mov	r5, ip
 8009f9a:	e7b9      	b.n	8009f10 <_printf_i+0x118>
 8009f9c:	6813      	ldr	r3, [r2, #0]
 8009f9e:	1d19      	adds	r1, r3, #4
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	681d      	ldr	r5, [r3, #0]
 8009fa4:	6862      	ldr	r2, [r4, #4]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7f6 f939 	bl	8000220 <memchr>
 8009fae:	b108      	cbz	r0, 8009fb4 <_printf_i+0x1bc>
 8009fb0:	1b40      	subs	r0, r0, r5
 8009fb2:	6060      	str	r0, [r4, #4]
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fbe:	e7a7      	b.n	8009f10 <_printf_i+0x118>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	462a      	mov	r2, r5
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	47c0      	blx	r8
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d0aa      	beq.n	8009f24 <_printf_i+0x12c>
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	079b      	lsls	r3, r3, #30
 8009fd2:	d413      	bmi.n	8009ffc <_printf_i+0x204>
 8009fd4:	68e0      	ldr	r0, [r4, #12]
 8009fd6:	9b03      	ldr	r3, [sp, #12]
 8009fd8:	4298      	cmp	r0, r3
 8009fda:	bfb8      	it	lt
 8009fdc:	4618      	movlt	r0, r3
 8009fde:	e7a3      	b.n	8009f28 <_printf_i+0x130>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	464a      	mov	r2, r9
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	47c0      	blx	r8
 8009fea:	3001      	adds	r0, #1
 8009fec:	d09a      	beq.n	8009f24 <_printf_i+0x12c>
 8009fee:	3501      	adds	r5, #1
 8009ff0:	68e3      	ldr	r3, [r4, #12]
 8009ff2:	9a03      	ldr	r2, [sp, #12]
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	42ab      	cmp	r3, r5
 8009ff8:	dcf2      	bgt.n	8009fe0 <_printf_i+0x1e8>
 8009ffa:	e7eb      	b.n	8009fd4 <_printf_i+0x1dc>
 8009ffc:	2500      	movs	r5, #0
 8009ffe:	f104 0919 	add.w	r9, r4, #25
 800a002:	e7f5      	b.n	8009ff0 <_printf_i+0x1f8>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1ac      	bne.n	8009f62 <_printf_i+0x16a>
 800a008:	7803      	ldrb	r3, [r0, #0]
 800a00a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a00e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a012:	e76c      	b.n	8009eee <_printf_i+0xf6>
 800a014:	0800a785 	.word	0x0800a785
 800a018:	0800a796 	.word	0x0800a796

0800a01c <_sbrk_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4c06      	ldr	r4, [pc, #24]	; (800a038 <_sbrk_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4605      	mov	r5, r0
 800a024:	4608      	mov	r0, r1
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	f7f8 faa6 	bl	8002578 <_sbrk>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_sbrk_r+0x1a>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	b103      	cbz	r3, 800a036 <_sbrk_r+0x1a>
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20001064 	.word	0x20001064

0800a03c <__sread>:
 800a03c:	b510      	push	{r4, lr}
 800a03e:	460c      	mov	r4, r1
 800a040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a044:	f000 f8e0 	bl	800a208 <_read_r>
 800a048:	2800      	cmp	r0, #0
 800a04a:	bfab      	itete	ge
 800a04c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a04e:	89a3      	ldrhlt	r3, [r4, #12]
 800a050:	181b      	addge	r3, r3, r0
 800a052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a056:	bfac      	ite	ge
 800a058:	6563      	strge	r3, [r4, #84]	; 0x54
 800a05a:	81a3      	strhlt	r3, [r4, #12]
 800a05c:	bd10      	pop	{r4, pc}

0800a05e <__swrite>:
 800a05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a062:	461f      	mov	r7, r3
 800a064:	898b      	ldrh	r3, [r1, #12]
 800a066:	05db      	lsls	r3, r3, #23
 800a068:	4605      	mov	r5, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	4616      	mov	r6, r2
 800a06e:	d505      	bpl.n	800a07c <__swrite+0x1e>
 800a070:	2302      	movs	r3, #2
 800a072:	2200      	movs	r2, #0
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	f000 f868 	bl	800a14c <_lseek_r>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	4632      	mov	r2, r6
 800a08a:	463b      	mov	r3, r7
 800a08c:	4628      	mov	r0, r5
 800a08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	f000 b817 	b.w	800a0c4 <_write_r>

0800a096 <__sseek>:
 800a096:	b510      	push	{r4, lr}
 800a098:	460c      	mov	r4, r1
 800a09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09e:	f000 f855 	bl	800a14c <_lseek_r>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	bf15      	itete	ne
 800a0a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0b2:	81a3      	strheq	r3, [r4, #12]
 800a0b4:	bf18      	it	ne
 800a0b6:	81a3      	strhne	r3, [r4, #12]
 800a0b8:	bd10      	pop	{r4, pc}

0800a0ba <__sclose>:
 800a0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0be:	f000 b813 	b.w	800a0e8 <_close_r>
	...

0800a0c4 <_write_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4c07      	ldr	r4, [pc, #28]	; (800a0e4 <_write_r+0x20>)
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6022      	str	r2, [r4, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f7f7 fea1 	bl	8001e1a <_write>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_write_r+0x1e>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_write_r+0x1e>
 800a0e0:	602b      	str	r3, [r5, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20001064 	.word	0x20001064

0800a0e8 <_close_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4c06      	ldr	r4, [pc, #24]	; (800a104 <_close_r+0x1c>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	f7f8 fa0b 	bl	800250e <_close>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_close_r+0x1a>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_close_r+0x1a>
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20001064 	.word	0x20001064

0800a108 <_fstat_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4c07      	ldr	r4, [pc, #28]	; (800a128 <_fstat_r+0x20>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4605      	mov	r5, r0
 800a110:	4608      	mov	r0, r1
 800a112:	4611      	mov	r1, r2
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	f7f8 fa06 	bl	8002526 <_fstat>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	d102      	bne.n	800a124 <_fstat_r+0x1c>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	b103      	cbz	r3, 800a124 <_fstat_r+0x1c>
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	bd38      	pop	{r3, r4, r5, pc}
 800a126:	bf00      	nop
 800a128:	20001064 	.word	0x20001064

0800a12c <_isatty_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4c06      	ldr	r4, [pc, #24]	; (800a148 <_isatty_r+0x1c>)
 800a130:	2300      	movs	r3, #0
 800a132:	4605      	mov	r5, r0
 800a134:	4608      	mov	r0, r1
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	f7f8 fa05 	bl	8002546 <_isatty>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d102      	bne.n	800a146 <_isatty_r+0x1a>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	b103      	cbz	r3, 800a146 <_isatty_r+0x1a>
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	20001064 	.word	0x20001064

0800a14c <_lseek_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4c07      	ldr	r4, [pc, #28]	; (800a16c <_lseek_r+0x20>)
 800a150:	4605      	mov	r5, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	2200      	movs	r2, #0
 800a158:	6022      	str	r2, [r4, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f7f8 f9fe 	bl	800255c <_lseek>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_lseek_r+0x1e>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	b103      	cbz	r3, 800a16a <_lseek_r+0x1e>
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20001064 	.word	0x20001064

0800a170 <memcpy>:
 800a170:	b510      	push	{r4, lr}
 800a172:	1e43      	subs	r3, r0, #1
 800a174:	440a      	add	r2, r1
 800a176:	4291      	cmp	r1, r2
 800a178:	d100      	bne.n	800a17c <memcpy+0xc>
 800a17a:	bd10      	pop	{r4, pc}
 800a17c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a184:	e7f7      	b.n	800a176 <memcpy+0x6>

0800a186 <memmove>:
 800a186:	4288      	cmp	r0, r1
 800a188:	b510      	push	{r4, lr}
 800a18a:	eb01 0302 	add.w	r3, r1, r2
 800a18e:	d807      	bhi.n	800a1a0 <memmove+0x1a>
 800a190:	1e42      	subs	r2, r0, #1
 800a192:	4299      	cmp	r1, r3
 800a194:	d00a      	beq.n	800a1ac <memmove+0x26>
 800a196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a19e:	e7f8      	b.n	800a192 <memmove+0xc>
 800a1a0:	4283      	cmp	r3, r0
 800a1a2:	d9f5      	bls.n	800a190 <memmove+0xa>
 800a1a4:	1881      	adds	r1, r0, r2
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	42d3      	cmn	r3, r2
 800a1aa:	d100      	bne.n	800a1ae <memmove+0x28>
 800a1ac:	bd10      	pop	{r4, pc}
 800a1ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1b6:	e7f7      	b.n	800a1a8 <memmove+0x22>

0800a1b8 <__malloc_lock>:
 800a1b8:	4770      	bx	lr

0800a1ba <__malloc_unlock>:
 800a1ba:	4770      	bx	lr

0800a1bc <_realloc_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	b921      	cbnz	r1, 800a1d0 <_realloc_r+0x14>
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1cc:	f7ff bbf2 	b.w	80099b4 <_malloc_r>
 800a1d0:	b922      	cbnz	r2, 800a1dc <_realloc_r+0x20>
 800a1d2:	f7ff fba1 	bl	8009918 <_free_r>
 800a1d6:	4625      	mov	r5, r4
 800a1d8:	4628      	mov	r0, r5
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1dc:	f000 f826 	bl	800a22c <_malloc_usable_size_r>
 800a1e0:	42a0      	cmp	r0, r4
 800a1e2:	d20f      	bcs.n	800a204 <_realloc_r+0x48>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f7ff fbe4 	bl	80099b4 <_malloc_r>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d0f2      	beq.n	800a1d8 <_realloc_r+0x1c>
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	f7ff ffbb 	bl	800a170 <memcpy>
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f7ff fb8b 	bl	8009918 <_free_r>
 800a202:	e7e9      	b.n	800a1d8 <_realloc_r+0x1c>
 800a204:	4635      	mov	r5, r6
 800a206:	e7e7      	b.n	800a1d8 <_realloc_r+0x1c>

0800a208 <_read_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4c07      	ldr	r4, [pc, #28]	; (800a228 <_read_r+0x20>)
 800a20c:	4605      	mov	r5, r0
 800a20e:	4608      	mov	r0, r1
 800a210:	4611      	mov	r1, r2
 800a212:	2200      	movs	r2, #0
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	f7f8 f95c 	bl	80024d4 <_read>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_read_r+0x1e>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	b103      	cbz	r3, 800a226 <_read_r+0x1e>
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20001064 	.word	0x20001064

0800a22c <_malloc_usable_size_r>:
 800a22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a230:	1f18      	subs	r0, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	bfbc      	itt	lt
 800a236:	580b      	ldrlt	r3, [r1, r0]
 800a238:	18c0      	addlt	r0, r0, r3
 800a23a:	4770      	bx	lr

0800a23c <_init>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr

0800a248 <_fini>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr
