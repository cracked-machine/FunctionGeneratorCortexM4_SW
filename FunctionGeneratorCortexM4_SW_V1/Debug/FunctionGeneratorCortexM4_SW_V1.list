
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001254c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  08012730  08012730  00022730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bb8  08013bb8  000319c8  2**0
                  CONTENTS
  4 .ARM          00000000  08013bb8  08013bb8  000319c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013bb8  08013bb8  000319c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bb8  08013bb8  00023bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bbc  08013bbc  00023bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019c8  20000000  08013bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  200019c8  08015588  000319c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002464  08015588  00032464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000319c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000400c4  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000072c0  00000000  00000000  00071abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002158  00000000  00000000  00078d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  0007aed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000340ca  00000000  00000000  0007cc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bc8a  00000000  00000000  000b0d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126043  00000000  00000000  000dc9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002029f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094a0  00000000  00000000  00202a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200019c8 	.word	0x200019c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012714 	.word	0x08012714

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200019cc 	.word	0x200019cc
 800021c:	08012714 	.word	0x08012714

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00c fef6 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f936 	bl	8000f84 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012730 	.word	0x08012730

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00c ff2b 	bl	800db82 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fb81 	bl	800e434 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d f963 	bl	800e000 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00c fed2 	bl	800db00 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fca6 	bl	80086b0 <HAL_Delay>

	  DM_RefreshScreen();
 8000d64:	f000 faa0 	bl	80012a8 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fa65 	bl	800f238 <puts>
#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	0801273c 	.word	0x0801273c
 8000d78:	0801274c 	.word	0x0801274c

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	; 0x70
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fc03 	bl	800458c <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4872      	ldr	r0, [pc, #456]	; (8000f58 <DM_UpdateDisplay+0x1dc>)
 8000d8e:	f00e fa53 	bl	800f238 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fbfb 	bl	800458c <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fb06 	bl	80033b8 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fb02 	bl	80033b8 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fafe 	bl	80033b8 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 f9e5 	bl	800418c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4863      	ldr	r0, [pc, #396]	; (8000f58 <DM_UpdateDisplay+0x1dc>)
 8000dca:	f00e fa35 	bl	800f238 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 f9dd 	bl	800418c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f814 	bl	8002e10 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f810 	bl	8002e10 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f80c 	bl	8002e10 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fac9 	bl	8004390 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4855      	ldr	r0, [pc, #340]	; (8000f5c <DM_UpdateDisplay+0x1e0>)
 8000e06:	f00e fa17 	bl	800f238 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fac1 	bl	8004390 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fa3c 	bl	800329c <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fa38 	bl	800329c <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fa34 	bl	800329c <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 f99d 	bl	8004174 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4847      	ldr	r0, [pc, #284]	; (8000f60 <DM_UpdateDisplay+0x1e4>)
 8000e42:	f00e f9f9 	bl	800f238 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 f995 	bl	8004174 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fa7b 	bl	8001364 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fa77 	bl	8001364 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fa73 	bl	8001364 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fa6f 	bl	8001364 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fb50 	bl	800352c <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4834      	ldr	r0, [pc, #208]	; (8000f64 <DM_UpdateDisplay+0x1e8>)
 8000e94:	f00e f9d0 	bl	800f238 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	482d      	ldr	r0, [pc, #180]	; (8000f68 <DM_UpdateDisplay+0x1ec>)
 8000eb2:	f00c fe25 	bl	800db00 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop

	/*
	 * 	Debug messages
	 */
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec2:	222e      	movs	r2, #46	; 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00d fcf6 	bl	800e8b8 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <DM_UpdateDisplay+0x1f0>)
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000ed6:	2132      	movs	r1, #50	; 0x32
 8000ed8:	f00e f9b6 	bl	800f248 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 10, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000edc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ee0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	22b4      	movs	r2, #180	; 0xb4
 8000eee:	210a      	movs	r1, #10
 8000ef0:	f00c fe06 	bl	800db00 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	222e      	movs	r2, #46	; 0x2e
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00d fcda 	bl	800e8b8 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <DM_UpdateDisplay+0x1f8>)
 8000f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <DM_UpdateDisplay+0x1fc>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <DM_UpdateDisplay+0x200>)
 8000f14:	2132      	movs	r1, #50	; 0x32
 8000f16:	f00e f997 	bl	800f248 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	22be      	movs	r2, #190	; 0xbe
 8000f2a:	210a      	movs	r1, #10
 8000f2c:	f00c fde8 	bl	800db00 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <DM_UpdateDisplay+0x204>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00a      	beq.n	8000f4e <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f38:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2300      	movs	r3, #0
 8000f44:	22be      	movs	r2, #190	; 0xbe
 8000f46:	210a      	movs	r1, #10
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <DM_UpdateDisplay+0x204>)
 8000f4a:	f00c fdd9 	bl	800db00 <ILI9341_Draw_Text>

}
 8000f4e:	bf00      	nop
 8000f50:	3768      	adds	r7, #104	; 0x68
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	0801275c 	.word	0x0801275c
 8000f5c:	08012770 	.word	0x08012770
 8000f60:	08012784 	.word	0x08012784
 8000f64:	08012798 	.word	0x08012798
 8000f68:	080127ac 	.word	0x080127ac
 8000f6c:	40013400 	.word	0x40013400
 8000f70:	080127d0 	.word	0x080127d0
 8000f74:	40000c00 	.word	0x40000c00
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	080127e8 	.word	0x080127e8
 8000f80:	200019e4 	.word	0x200019e4

08000f84 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b09d      	sub	sp, #116	; 0x74
 8000f88:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f90:	2300      	movs	r3, #0
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
 8000f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000fa2:	238c      	movs	r3, #140	; 0x8c
 8000fa4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000fa8:	2328      	movs	r3, #40	; 0x28
 8000faa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000fc0:	23af      	movs	r3, #175	; 0xaf
 8000fc2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000fc6:	2346      	movs	r3, #70	; 0x46
 8000fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000fde:	238a      	movs	r3, #138	; 0x8a
 8000fe0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000fea:	4ba3      	ldr	r3, [pc, #652]	; (8001278 <DM_DisplayFormattedOutput+0x2f4>)
 8000fec:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000ffc:	23a1      	movs	r3, #161	; 0xa1
 8000ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8001002:	2382      	movs	r3, #130	; 0x82
 8001004:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001008:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800100c:	b299      	uxth	r1, r3
 800100e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001012:	b29b      	uxth	r3, r3
 8001014:	2200      	movs	r2, #0
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800101e:	460a      	mov	r2, r1
 8001020:	2103      	movs	r1, #3
 8001022:	4896      	ldr	r0, [pc, #600]	; (800127c <DM_DisplayFormattedOutput+0x2f8>)
 8001024:	f00c fd6c 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800102c:	b299      	uxth	r1, r3
 800102e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001032:	b29b      	uxth	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	460a      	mov	r2, r1
 8001040:	2103      	movs	r1, #3
 8001042:	488f      	ldr	r0, [pc, #572]	; (8001280 <DM_DisplayFormattedOutput+0x2fc>)
 8001044:	f00c fd5c 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001048:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800104c:	b299      	uxth	r1, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	2200      	movs	r2, #0
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800105e:	460a      	mov	r2, r1
 8001060:	2103      	movs	r1, #3
 8001062:	4888      	ldr	r0, [pc, #544]	; (8001284 <DM_DisplayFormattedOutput+0x300>)
 8001064:	f00c fd4c 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001068:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800106c:	b299      	uxth	r1, r3
 800106e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001072:	b29b      	uxth	r3, r3
 8001074:	2200      	movs	r2, #0
 8001076:	9201      	str	r2, [sp, #4]
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800107e:	460a      	mov	r2, r1
 8001080:	2103      	movs	r1, #3
 8001082:	4881      	ldr	r0, [pc, #516]	; (8001288 <DM_DisplayFormattedOutput+0x304>)
 8001084:	f00c fd3c 	bl	800db00 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001088:	f004 fab6 	bl	80055f8 <SM_GetOutputInHertz>
 800108c:	ee10 3a10 	vmov	r3, s0
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa81 	bl	8000598 <__aeabi_f2d>
 8001096:	4603      	mov	r3, r0
 8001098:	460c      	mov	r4, r1
 800109a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800109e:	e9cd 3400 	strd	r3, r4, [sp]
 80010a2:	4a7a      	ldr	r2, [pc, #488]	; (800128c <DM_DisplayFormattedOutput+0x308>)
 80010a4:	210f      	movs	r1, #15
 80010a6:	f00e f8cf 	bl	800f248 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010aa:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80010ae:	b299      	uxth	r1, r3
 80010b0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010b4:	b29c      	uxth	r4, r3
 80010b6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80010c0:	2200      	movs	r2, #0
 80010c2:	9201      	str	r2, [sp, #4]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010ca:	4622      	mov	r2, r4
 80010cc:	f00c fd18 	bl	800db00 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80010d0:	2000      	movs	r0, #0
 80010d2:	f004 fa5f 	bl	8005594 <SM_GetOutputChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 80010de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01d      	beq.n	8001120 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80010e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa55 	bl	8000598 <__aeabi_f2d>
 80010ee:	4603      	mov	r3, r0
 80010f0:	460c      	mov	r4, r1
 80010f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010f6:	e9cd 3400 	strd	r3, r4, [sp]
 80010fa:	4a65      	ldr	r2, [pc, #404]	; (8001290 <DM_DisplayFormattedOutput+0x30c>)
 80010fc:	2112      	movs	r1, #18
 80010fe:	f00e f8a3 	bl	800f248 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa46 	bl	8000598 <__aeabi_f2d>
 800110c:	4603      	mov	r3, r0
 800110e:	460c      	mov	r4, r1
 8001110:	f107 0018 	add.w	r0, r7, #24
 8001114:	e9cd 3400 	strd	r3, r4, [sp]
 8001118:	4a5e      	ldr	r2, [pc, #376]	; (8001294 <DM_DisplayFormattedOutput+0x310>)
 800111a:	2114      	movs	r1, #20
 800111c:	f00e f894 	bl	800f248 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001120:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001124:	b299      	uxth	r1, r3
 8001126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800112a:	b29c      	uxth	r4, r3
 800112c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001130:	b29b      	uxth	r3, r3
 8001132:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001136:	2200      	movs	r2, #0
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001140:	4622      	mov	r2, r4
 8001142:	f00c fcdd 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001146:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800114a:	b299      	uxth	r1, r3
 800114c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001150:	b29c      	uxth	r4, r3
 8001152:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001156:	b29b      	uxth	r3, r3
 8001158:	f107 0018 	add.w	r0, r7, #24
 800115c:	2200      	movs	r2, #0
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001166:	4622      	mov	r2, r4
 8001168:	f00c fcca 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800116c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001170:	b29b      	uxth	r3, r3
 8001172:	3380      	adds	r3, #128	; 0x80
 8001174:	b299      	uxth	r1, r3
 8001176:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800117a:	b298      	uxth	r0, r3
 800117c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001180:	b29b      	uxth	r3, r3
 8001182:	2200      	movs	r2, #0
 8001184:	9201      	str	r2, [sp, #4]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800118c:	4602      	mov	r2, r0
 800118e:	4842      	ldr	r0, [pc, #264]	; (8001298 <DM_DisplayFormattedOutput+0x314>)
 8001190:	f00c fcb6 	bl	800db00 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001194:	f003 fc2a 	bl	80049ec <BO_GetOutputBias>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <DM_DisplayFormattedOutput+0x222>
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
 80011a4:	e00b      	b.n	80011be <DM_DisplayFormattedOutput+0x23a>
 80011a6:	f003 fc21 	bl	80049ec <BO_GetOutputBias>
 80011aa:	ee07 0a90 	vmov	s15, r0
 80011ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80011be:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011c0:	f7ff f9ea 	bl	8000598 <__aeabi_f2d>
 80011c4:	4603      	mov	r3, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	f107 000c 	add.w	r0, r7, #12
 80011cc:	e9cd 3400 	strd	r3, r4, [sp]
 80011d0:	4a32      	ldr	r2, [pc, #200]	; (800129c <DM_DisplayFormattedOutput+0x318>)
 80011d2:	210c      	movs	r1, #12
 80011d4:	f00e f838 	bl	800f248 <sniprintf>
	if(BO_GetBiasPolarity())
 80011d8:	f003 fba8 	bl	800492c <BO_GetBiasPolarity>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d024      	beq.n	800122c <DM_DisplayFormattedOutput+0x2a8>
	{
		char symbol[3] = "+\0";
 80011e2:	4a2f      	ldr	r2, [pc, #188]	; (80012a0 <DM_DisplayFormattedOutput+0x31c>)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
 80011ec:	8019      	strh	r1, [r3, #0]
 80011ee:	3302      	adds	r3, #2
 80011f0:	0c12      	lsrs	r2, r2, #16
 80011f2:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f00e f856 	bl	800f2b0 <strcat>
 8001204:	4604      	mov	r4, r0
 8001206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800120a:	b299      	uxth	r1, r3
 800120c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001210:	b298      	uxth	r0, r3
 8001212:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001216:	b29b      	uxth	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001222:	4602      	mov	r2, r0
 8001224:	4620      	mov	r0, r4
 8001226:	f00c fc6b 	bl	800db00 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 800122a:	e021      	b.n	8001270 <DM_DisplayFormattedOutput+0x2ec>
		char symbol[3] = "-\0";
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <DM_DisplayFormattedOutput+0x320>)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4611      	mov	r1, r2
 8001234:	8019      	strh	r1, [r3, #0]
 8001236:	3302      	adds	r3, #2
 8001238:	0c12      	lsrs	r2, r2, #16
 800123a:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f00e f833 	bl	800f2b0 <strcat>
 800124a:	4604      	mov	r4, r0
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001250:	b299      	uxth	r1, r3
 8001252:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001256:	b298      	uxth	r0, r3
 8001258:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800125c:	b29b      	uxth	r3, r3
 800125e:	2200      	movs	r2, #0
 8001260:	9201      	str	r2, [sp, #4]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f00c fc48 	bl	800db00 <ILI9341_Draw_Text>
}
 8001270:	bf00      	nop
 8001272:	376c      	adds	r7, #108	; 0x6c
 8001274:	46bd      	mov	sp, r7
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	3a449ba6 	.word	0x3a449ba6
 800127c:	08012810 	.word	0x08012810
 8001280:	08012820 	.word	0x08012820
 8001284:	08012830 	.word	0x08012830
 8001288:	08012840 	.word	0x08012840
 800128c:	08012850 	.word	0x08012850
 8001290:	08012860 	.word	0x08012860
 8001294:	0801286c 	.word	0x0801286c
 8001298:	08012878 	.word	0x08012878
 800129c:	08012880 	.word	0x08012880
 80012a0:	0801288c 	.word	0x0801288c
 80012a4:	08012890 	.word	0x08012890

080012a8 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <DM_RefreshScreen+0x94>)
 80012b0:	f00b f862 	bl	800c378 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f00c fea3 	bl	800e000 <ILI9341_Fill_Screen>
	//ILI9341_FillScreenGradient();
//ILI9341_Draw_Hollow_Circle(100,  100,  50, RED);
ILI9341_Draw_Filled_Circle(100,  50,  50, RED);
 80012ba:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	2132      	movs	r1, #50	; 0x32
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f00c fa32 	bl	800d72c <ILI9341_Draw_Filled_Circle>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80012c8:	2300      	movs	r3, #0
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2302      	movs	r3, #2
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2328      	movs	r3, #40	; 0x28
 80012d8:	2250      	movs	r2, #80	; 0x50
 80012da:	21c8      	movs	r1, #200	; 0xc8
 80012dc:	2000      	movs	r0, #0
 80012de:	f00c faac 	bl	800d83a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80012e2:	2300      	movs	r3, #0
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2302      	movs	r3, #2
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2328      	movs	r3, #40	; 0x28
 80012f2:	2250      	movs	r2, #80	; 0x50
 80012f4:	21c8      	movs	r1, #200	; 0xc8
 80012f6:	2050      	movs	r0, #80	; 0x50
 80012f8:	f00c fa9f 	bl	800d83a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80012fc:	2300      	movs	r3, #0
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2302      	movs	r3, #2
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2328      	movs	r3, #40	; 0x28
 800130c:	2250      	movs	r2, #80	; 0x50
 800130e:	21c8      	movs	r1, #200	; 0xc8
 8001310:	20a0      	movs	r0, #160	; 0xa0
 8001312:	f00c fa92 	bl	800d83a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001316:	2300      	movs	r3, #0
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2302      	movs	r3, #2
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2328      	movs	r3, #40	; 0x28
 8001326:	2250      	movs	r2, #80	; 0x50
 8001328:	21c8      	movs	r1, #200	; 0xc8
 800132a:	20f0      	movs	r0, #240	; 0xf0
 800132c:	f00c fa85 	bl	800d83a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DM_RefreshScreen+0x94>)
 8001332:	f00a ffeb 	bl	800c30c <HAL_TIM_Base_Start_IT>


}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20002294 	.word	0x20002294

08001340 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <DM_SetErrorDebugMsg+0x1c>)
 800134c:	212d      	movs	r1, #45	; 0x2d
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <DM_SetErrorDebugMsg+0x20>)
 8001350:	f00d ff7a 	bl	800f248 <sniprintf>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08012910 	.word	0x08012910
 8001360:	200019e4 	.word	0x200019e4

08001364 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	3b01      	subs	r3, #1
 8001372:	2b03      	cmp	r3, #3
 8001374:	d816      	bhi.n	80013a4 <FreqMenu_DrawMenu+0x40>
 8001376:	a201      	add	r2, pc, #4	; (adr r2, 800137c <FreqMenu_DrawMenu+0x18>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	0800138d 	.word	0x0800138d
 8001380:	08001393 	.word	0x08001393
 8001384:	08001399 	.word	0x08001399
 8001388:	0800139f 	.word	0x0800139f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800138c:	f000 f810 	bl	80013b0 <FreqMenu_DrawMainMenu>
			break;
 8001390:	e009      	b.n	80013a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001392:	f000 f849 	bl	8001428 <FreqMenu_DrawPresetMenu>
			break;
 8001396:	e006      	b.n	80013a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001398:	f001 faf4 	bl	8002984 <FreqMenu_DrawAdjustMenu>
			break;
 800139c:	e003      	b.n	80013a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800139e:	f001 fb07 	bl	80029b0 <FreqMenu_DrawSweepMenu>
			break;
 80013a2:	e000      	b.n	80013a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80013a4:	bf00      	nop

	}
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop

080013b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80013b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2302      	movs	r3, #2
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	220a      	movs	r2, #10
 80013c4:	2105      	movs	r1, #5
 80013c6:	4814      	ldr	r0, [pc, #80]	; (8001418 <FreqMenu_DrawMainMenu+0x68>)
 80013c8:	f00c fb9a 	bl	800db00 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80013cc:	f7ff fdda 	bl	8000f84 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80013d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2302      	movs	r3, #2
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	22d2      	movs	r2, #210	; 0xd2
 80013de:	2105      	movs	r1, #5
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <FreqMenu_DrawMainMenu+0x6c>)
 80013e2:	f00c fb8d 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80013e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	22d2      	movs	r2, #210	; 0xd2
 80013f4:	2157      	movs	r1, #87	; 0x57
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <FreqMenu_DrawMainMenu+0x70>)
 80013f8:	f00c fb82 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80013fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2302      	movs	r3, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	22d2      	movs	r2, #210	; 0xd2
 800140a:	21ae      	movs	r1, #174	; 0xae
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <FreqMenu_DrawMainMenu+0x74>)
 800140e:	f00c fb77 	bl	800db00 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	08012914 	.word	0x08012914
 800141c:	08012920 	.word	0x08012920
 8001420:	08012928 	.word	0x08012928
 8001424:	08012930 	.word	0x08012930

08001428 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800142e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	2302      	movs	r3, #2
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	220a      	movs	r2, #10
 800143c:	2105      	movs	r1, #5
 800143e:	4886      	ldr	r0, [pc, #536]	; (8001658 <FreqMenu_DrawPresetMenu+0x230>)
 8001440:	f00c fb5e 	bl	800db00 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001444:	2328      	movs	r3, #40	; 0x28
 8001446:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001448:	233c      	movs	r3, #60	; 0x3c
 800144a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800144c:	2350      	movs	r3, #80	; 0x50
 800144e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001450:	2364      	movs	r3, #100	; 0x64
 8001452:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001454:	2378      	movs	r3, #120	; 0x78
 8001456:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001458:	238c      	movs	r3, #140	; 0x8c
 800145a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001460:	f003 fc7a 	bl	8004d58 <FreqO_GetFPresetObject>
 8001464:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f001 825d 	beq.w	8002928 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001476:	4293      	cmp	r3, r2
 8001478:	f000 849a 	beq.w	8001db0 <FreqMenu_DrawPresetMenu+0x988>
 800147c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001480:	4293      	cmp	r3, r2
 8001482:	d817      	bhi.n	80014b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001484:	2b32      	cmp	r3, #50	; 0x32
 8001486:	f000 81b3 	beq.w	80017f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800148a:	2b32      	cmp	r3, #50	; 0x32
 800148c:	d806      	bhi.n	800149c <FreqMenu_DrawPresetMenu+0x74>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d038      	beq.n	8001504 <FreqMenu_DrawPresetMenu+0xdc>
 8001492:	2b0a      	cmp	r3, #10
 8001494:	f000 8102 	beq.w	800169c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001498:	f001 ba52 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800149c:	2bfa      	cmp	r3, #250	; 0xfa
 800149e:	f000 8317 	beq.w	8001ad0 <FreqMenu_DrawPresetMenu+0x6a8>
 80014a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a6:	f000 83d9 	beq.w	8001c5c <FreqMenu_DrawPresetMenu+0x834>
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	f000 8266 	beq.w	800197c <FreqMenu_DrawPresetMenu+0x554>
}
 80014b0:	f001 ba46 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80014b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f000 8758 	beq.w	800236e <FreqMenu_DrawPresetMenu+0xf46>
 80014be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d80f      	bhi.n	80014e6 <FreqMenu_DrawPresetMenu+0xbe>
 80014c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f000 85e0 	beq.w	8002090 <FreqMenu_DrawPresetMenu+0xc68>
 80014d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f000 86a1 	beq.w	800221c <FreqMenu_DrawPresetMenu+0xdf4>
 80014da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014de:	f000 852d 	beq.w	8001f3c <FreqMenu_DrawPresetMenu+0xb14>
}
 80014e2:	f001 ba2d 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80014e6:	4a5d      	ldr	r2, [pc, #372]	; (800165c <FreqMenu_DrawPresetMenu+0x234>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	f001 80ae 	beq.w	800264a <FreqMenu_DrawPresetMenu+0x1222>
 80014ee:	4a5c      	ldr	r2, [pc, #368]	; (8001660 <FreqMenu_DrawPresetMenu+0x238>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	f001 816f 	beq.w	80027d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80014f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f000 87fc 	beq.w	80024f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001500:	f001 ba1e 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	b29a      	uxth	r2, r3
 8001508:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	2302      	movs	r3, #2
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	2105      	movs	r1, #5
 8001516:	4853      	ldr	r0, [pc, #332]	; (8001664 <FreqMenu_DrawPresetMenu+0x23c>)
 8001518:	f00c faf2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2302      	movs	r3, #2
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800152c:	2105      	movs	r1, #5
 800152e:	484e      	ldr	r0, [pc, #312]	; (8001668 <FreqMenu_DrawPresetMenu+0x240>)
 8001530:	f00c fae6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001534:	7b7b      	ldrb	r3, [r7, #13]
 8001536:	b29a      	uxth	r2, r3
 8001538:	2300      	movs	r3, #0
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2302      	movs	r3, #2
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001544:	2105      	movs	r1, #5
 8001546:	4849      	ldr	r0, [pc, #292]	; (800166c <FreqMenu_DrawPresetMenu+0x244>)
 8001548:	f00c fada 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800154c:	7b3b      	ldrb	r3, [r7, #12]
 800154e:	b29a      	uxth	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2302      	movs	r3, #2
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800155c:	2105      	movs	r1, #5
 800155e:	4844      	ldr	r0, [pc, #272]	; (8001670 <FreqMenu_DrawPresetMenu+0x248>)
 8001560:	f00c face 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	b29a      	uxth	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001574:	2105      	movs	r1, #5
 8001576:	483f      	ldr	r0, [pc, #252]	; (8001674 <FreqMenu_DrawPresetMenu+0x24c>)
 8001578:	f00c fac2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800157c:	7abb      	ldrb	r3, [r7, #10]
 800157e:	b29a      	uxth	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2302      	movs	r3, #2
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800158c:	2105      	movs	r1, #5
 800158e:	483a      	ldr	r0, [pc, #232]	; (8001678 <FreqMenu_DrawPresetMenu+0x250>)
 8001590:	f00c fab6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	b29a      	uxth	r2, r3
 8001598:	2300      	movs	r3, #0
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2302      	movs	r3, #2
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015a4:	2105      	movs	r1, #5
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <FreqMenu_DrawPresetMenu+0x254>)
 80015a8:	f00c faaa 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	2300      	movs	r3, #0
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2302      	movs	r3, #2
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015bc:	2178      	movs	r1, #120	; 0x78
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <FreqMenu_DrawPresetMenu+0x258>)
 80015c0:	f00c fa9e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	2302      	movs	r3, #2
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015d4:	2178      	movs	r1, #120	; 0x78
 80015d6:	482b      	ldr	r0, [pc, #172]	; (8001684 <FreqMenu_DrawPresetMenu+0x25c>)
 80015d8:	f00c fa92 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2302      	movs	r3, #2
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015ec:	2178      	movs	r1, #120	; 0x78
 80015ee:	4826      	ldr	r0, [pc, #152]	; (8001688 <FreqMenu_DrawPresetMenu+0x260>)
 80015f0:	f00c fa86 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015f4:	7b3b      	ldrb	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	2300      	movs	r3, #0
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001604:	2178      	movs	r1, #120	; 0x78
 8001606:	4821      	ldr	r0, [pc, #132]	; (800168c <FreqMenu_DrawPresetMenu+0x264>)
 8001608:	f00c fa7a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	b29a      	uxth	r2, r3
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2302      	movs	r3, #2
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800161c:	2178      	movs	r1, #120	; 0x78
 800161e:	481c      	ldr	r0, [pc, #112]	; (8001690 <FreqMenu_DrawPresetMenu+0x268>)
 8001620:	f00c fa6e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001624:	7abb      	ldrb	r3, [r7, #10]
 8001626:	b29a      	uxth	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001634:	2178      	movs	r1, #120	; 0x78
 8001636:	4817      	ldr	r0, [pc, #92]	; (8001694 <FreqMenu_DrawPresetMenu+0x26c>)
 8001638:	f00c fa62 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800163c:	7a7b      	ldrb	r3, [r7, #9]
 800163e:	b29a      	uxth	r2, r3
 8001640:	2300      	movs	r3, #0
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2302      	movs	r3, #2
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800164c:	2178      	movs	r1, #120	; 0x78
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <FreqMenu_DrawPresetMenu+0x270>)
 8001650:	f00c fa56 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001654:	f001 b974 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 8001658:	08012938 	.word	0x08012938
 800165c:	000124f8 	.word	0x000124f8
 8001660:	000186a0 	.word	0x000186a0
 8001664:	0801294c 	.word	0x0801294c
 8001668:	08012954 	.word	0x08012954
 800166c:	0801295c 	.word	0x0801295c
 8001670:	08012964 	.word	0x08012964
 8001674:	0801296c 	.word	0x0801296c
 8001678:	08012974 	.word	0x08012974
 800167c:	0801297c 	.word	0x0801297c
 8001680:	08012984 	.word	0x08012984
 8001684:	0801298c 	.word	0x0801298c
 8001688:	08012994 	.word	0x08012994
 800168c:	0801299c 	.word	0x0801299c
 8001690:	080129a4 	.word	0x080129a4
 8001694:	080129ac 	.word	0x080129ac
 8001698:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016ac:	2105      	movs	r1, #5
 80016ae:	48a5      	ldr	r0, [pc, #660]	; (8001944 <FreqMenu_DrawPresetMenu+0x51c>)
 80016b0:	f00c fa26 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2302      	movs	r3, #2
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2300      	movs	r3, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	48a0      	ldr	r0, [pc, #640]	; (8001948 <FreqMenu_DrawPresetMenu+0x520>)
 80016c8:	f00c fa1a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016cc:	7b7b      	ldrb	r3, [r7, #13]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2302      	movs	r3, #2
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016dc:	2105      	movs	r1, #5
 80016de:	489b      	ldr	r0, [pc, #620]	; (800194c <FreqMenu_DrawPresetMenu+0x524>)
 80016e0:	f00c fa0e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2302      	movs	r3, #2
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f4:	2105      	movs	r1, #5
 80016f6:	4896      	ldr	r0, [pc, #600]	; (8001950 <FreqMenu_DrawPresetMenu+0x528>)
 80016f8:	f00c fa02 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800170c:	2105      	movs	r1, #5
 800170e:	4891      	ldr	r0, [pc, #580]	; (8001954 <FreqMenu_DrawPresetMenu+0x52c>)
 8001710:	f00c f9f6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001714:	7abb      	ldrb	r3, [r7, #10]
 8001716:	b29a      	uxth	r2, r3
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2302      	movs	r3, #2
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001724:	2105      	movs	r1, #5
 8001726:	488c      	ldr	r0, [pc, #560]	; (8001958 <FreqMenu_DrawPresetMenu+0x530>)
 8001728:	f00c f9ea 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800172c:	7a7b      	ldrb	r3, [r7, #9]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2300      	movs	r3, #0
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	2302      	movs	r3, #2
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800173c:	2105      	movs	r1, #5
 800173e:	4887      	ldr	r0, [pc, #540]	; (800195c <FreqMenu_DrawPresetMenu+0x534>)
 8001740:	f00c f9de 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b29a      	uxth	r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	2302      	movs	r3, #2
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001754:	2178      	movs	r1, #120	; 0x78
 8001756:	4882      	ldr	r0, [pc, #520]	; (8001960 <FreqMenu_DrawPresetMenu+0x538>)
 8001758:	f00c f9d2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2302      	movs	r3, #2
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800176c:	2178      	movs	r1, #120	; 0x78
 800176e:	487d      	ldr	r0, [pc, #500]	; (8001964 <FreqMenu_DrawPresetMenu+0x53c>)
 8001770:	f00c f9c6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001784:	2178      	movs	r1, #120	; 0x78
 8001786:	4878      	ldr	r0, [pc, #480]	; (8001968 <FreqMenu_DrawPresetMenu+0x540>)
 8001788:	f00c f9ba 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2302      	movs	r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800179c:	2178      	movs	r1, #120	; 0x78
 800179e:	4873      	ldr	r0, [pc, #460]	; (800196c <FreqMenu_DrawPresetMenu+0x544>)
 80017a0:	f00c f9ae 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2302      	movs	r3, #2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b4:	2178      	movs	r1, #120	; 0x78
 80017b6:	486e      	ldr	r0, [pc, #440]	; (8001970 <FreqMenu_DrawPresetMenu+0x548>)
 80017b8:	f00c f9a2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017bc:	7abb      	ldrb	r3, [r7, #10]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	4869      	ldr	r0, [pc, #420]	; (8001974 <FreqMenu_DrawPresetMenu+0x54c>)
 80017d0:	f00c f996 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e4:	2178      	movs	r1, #120	; 0x78
 80017e6:	4864      	ldr	r0, [pc, #400]	; (8001978 <FreqMenu_DrawPresetMenu+0x550>)
 80017e8:	f00c f98a 	bl	800db00 <ILI9341_Draw_Text>
				break;
 80017ec:	f001 b8a8 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2302      	movs	r3, #2
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001800:	2105      	movs	r1, #5
 8001802:	4850      	ldr	r0, [pc, #320]	; (8001944 <FreqMenu_DrawPresetMenu+0x51c>)
 8001804:	f00c f97c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	b29a      	uxth	r2, r3
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001818:	2105      	movs	r1, #5
 800181a:	484b      	ldr	r0, [pc, #300]	; (8001948 <FreqMenu_DrawPresetMenu+0x520>)
 800181c:	f00c f970 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b29a      	uxth	r2, r3
 8001824:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	2302      	movs	r3, #2
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2300      	movs	r3, #0
 8001830:	2105      	movs	r1, #5
 8001832:	4846      	ldr	r0, [pc, #280]	; (800194c <FreqMenu_DrawPresetMenu+0x524>)
 8001834:	f00c f964 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	b29a      	uxth	r2, r3
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2302      	movs	r3, #2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001848:	2105      	movs	r1, #5
 800184a:	4841      	ldr	r0, [pc, #260]	; (8001950 <FreqMenu_DrawPresetMenu+0x528>)
 800184c:	f00c f958 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001850:	7afb      	ldrb	r3, [r7, #11]
 8001852:	b29a      	uxth	r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2302      	movs	r3, #2
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001860:	2105      	movs	r1, #5
 8001862:	483c      	ldr	r0, [pc, #240]	; (8001954 <FreqMenu_DrawPresetMenu+0x52c>)
 8001864:	f00c f94c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001868:	7abb      	ldrb	r3, [r7, #10]
 800186a:	b29a      	uxth	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2302      	movs	r3, #2
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001878:	2105      	movs	r1, #5
 800187a:	4837      	ldr	r0, [pc, #220]	; (8001958 <FreqMenu_DrawPresetMenu+0x530>)
 800187c:	f00c f940 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001880:	7a7b      	ldrb	r3, [r7, #9]
 8001882:	b29a      	uxth	r2, r3
 8001884:	2300      	movs	r3, #0
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2302      	movs	r3, #2
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001890:	2105      	movs	r1, #5
 8001892:	4832      	ldr	r0, [pc, #200]	; (800195c <FreqMenu_DrawPresetMenu+0x534>)
 8001894:	f00c f934 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	b29a      	uxth	r2, r3
 800189c:	2300      	movs	r3, #0
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2302      	movs	r3, #2
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a8:	2178      	movs	r1, #120	; 0x78
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <FreqMenu_DrawPresetMenu+0x538>)
 80018ac:	f00c f928 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	2302      	movs	r3, #2
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018c0:	2178      	movs	r1, #120	; 0x78
 80018c2:	4828      	ldr	r0, [pc, #160]	; (8001964 <FreqMenu_DrawPresetMenu+0x53c>)
 80018c4:	f00c f91c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2302      	movs	r3, #2
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d8:	2178      	movs	r1, #120	; 0x78
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <FreqMenu_DrawPresetMenu+0x540>)
 80018dc:	f00c f910 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f0:	2178      	movs	r1, #120	; 0x78
 80018f2:	481e      	ldr	r0, [pc, #120]	; (800196c <FreqMenu_DrawPresetMenu+0x544>)
 80018f4:	f00c f904 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f8:	7afb      	ldrb	r3, [r7, #11]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2302      	movs	r3, #2
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001908:	2178      	movs	r1, #120	; 0x78
 800190a:	4819      	ldr	r0, [pc, #100]	; (8001970 <FreqMenu_DrawPresetMenu+0x548>)
 800190c:	f00c f8f8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001910:	7abb      	ldrb	r3, [r7, #10]
 8001912:	b29a      	uxth	r2, r3
 8001914:	2300      	movs	r3, #0
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2302      	movs	r3, #2
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001920:	2178      	movs	r1, #120	; 0x78
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <FreqMenu_DrawPresetMenu+0x54c>)
 8001924:	f00c f8ec 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001928:	7a7b      	ldrb	r3, [r7, #9]
 800192a:	b29a      	uxth	r2, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2302      	movs	r3, #2
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001938:	2178      	movs	r1, #120	; 0x78
 800193a:	480f      	ldr	r0, [pc, #60]	; (8001978 <FreqMenu_DrawPresetMenu+0x550>)
 800193c:	f00c f8e0 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001940:	f000 bffe 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 8001944:	0801294c 	.word	0x0801294c
 8001948:	08012954 	.word	0x08012954
 800194c:	0801295c 	.word	0x0801295c
 8001950:	08012964 	.word	0x08012964
 8001954:	0801296c 	.word	0x0801296c
 8001958:	08012974 	.word	0x08012974
 800195c:	0801297c 	.word	0x0801297c
 8001960:	08012984 	.word	0x08012984
 8001964:	0801298c 	.word	0x0801298c
 8001968:	08012994 	.word	0x08012994
 800196c:	0801299c 	.word	0x0801299c
 8001970:	080129a4 	.word	0x080129a4
 8001974:	080129ac 	.word	0x080129ac
 8001978:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	b29a      	uxth	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2302      	movs	r3, #2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800198c:	2105      	movs	r1, #5
 800198e:	48a5      	ldr	r0, [pc, #660]	; (8001c24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001990:	f00c f8b6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2105      	movs	r1, #5
 80019a6:	48a0      	ldr	r0, [pc, #640]	; (8001c28 <FreqMenu_DrawPresetMenu+0x800>)
 80019a8:	f00c f8aa 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019ac:	7b7b      	ldrb	r3, [r7, #13]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2302      	movs	r3, #2
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019bc:	2105      	movs	r1, #5
 80019be:	489b      	ldr	r0, [pc, #620]	; (8001c2c <FreqMenu_DrawPresetMenu+0x804>)
 80019c0:	f00c f89e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	4896      	ldr	r0, [pc, #600]	; (8001c30 <FreqMenu_DrawPresetMenu+0x808>)
 80019d8:	f00c f892 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2105      	movs	r1, #5
 80019ee:	4891      	ldr	r0, [pc, #580]	; (8001c34 <FreqMenu_DrawPresetMenu+0x80c>)
 80019f0:	f00c f886 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7abb      	ldrb	r3, [r7, #10]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2105      	movs	r1, #5
 8001a06:	488c      	ldr	r0, [pc, #560]	; (8001c38 <FreqMenu_DrawPresetMenu+0x810>)
 8001a08:	f00c f87a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a0c:	7a7b      	ldrb	r3, [r7, #9]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	4887      	ldr	r0, [pc, #540]	; (8001c3c <FreqMenu_DrawPresetMenu+0x814>)
 8001a20:	f00c f86e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a34:	2178      	movs	r1, #120	; 0x78
 8001a36:	4882      	ldr	r0, [pc, #520]	; (8001c40 <FreqMenu_DrawPresetMenu+0x818>)
 8001a38:	f00c f862 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a4c:	2178      	movs	r1, #120	; 0x78
 8001a4e:	487d      	ldr	r0, [pc, #500]	; (8001c44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001a50:	f00c f856 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a54:	7b7b      	ldrb	r3, [r7, #13]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a64:	2178      	movs	r1, #120	; 0x78
 8001a66:	4878      	ldr	r0, [pc, #480]	; (8001c48 <FreqMenu_DrawPresetMenu+0x820>)
 8001a68:	f00c f84a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a7c:	2178      	movs	r1, #120	; 0x78
 8001a7e:	4873      	ldr	r0, [pc, #460]	; (8001c4c <FreqMenu_DrawPresetMenu+0x824>)
 8001a80:	f00c f83e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	486e      	ldr	r0, [pc, #440]	; (8001c50 <FreqMenu_DrawPresetMenu+0x828>)
 8001a98:	f00c f832 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a9c:	7abb      	ldrb	r3, [r7, #10]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	4869      	ldr	r0, [pc, #420]	; (8001c54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ab0:	f00c f826 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab4:	7a7b      	ldrb	r3, [r7, #9]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4864      	ldr	r0, [pc, #400]	; (8001c58 <FreqMenu_DrawPresetMenu+0x830>)
 8001ac8:	f00c f81a 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001acc:	f000 bf38 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	4850      	ldr	r0, [pc, #320]	; (8001c24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ae4:	f00c f80c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2105      	movs	r1, #5
 8001afa:	484b      	ldr	r0, [pc, #300]	; (8001c28 <FreqMenu_DrawPresetMenu+0x800>)
 8001afc:	f00c f800 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7b7b      	ldrb	r3, [r7, #13]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2105      	movs	r1, #5
 8001b12:	4846      	ldr	r0, [pc, #280]	; (8001c2c <FreqMenu_DrawPresetMenu+0x804>)
 8001b14:	f00b fff4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2302      	movs	r3, #2
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4841      	ldr	r0, [pc, #260]	; (8001c30 <FreqMenu_DrawPresetMenu+0x808>)
 8001b2c:	f00b ffe8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2105      	movs	r1, #5
 8001b42:	483c      	ldr	r0, [pc, #240]	; (8001c34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001b44:	f00b ffdc 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7abb      	ldrb	r3, [r7, #10]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <FreqMenu_DrawPresetMenu+0x810>)
 8001b5c:	f00b ffd0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b60:	7a7b      	ldrb	r3, [r7, #9]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b70:	2105      	movs	r1, #5
 8001b72:	4832      	ldr	r0, [pc, #200]	; (8001c3c <FreqMenu_DrawPresetMenu+0x814>)
 8001b74:	f00b ffc4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2302      	movs	r3, #2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b88:	2178      	movs	r1, #120	; 0x78
 8001b8a:	482d      	ldr	r0, [pc, #180]	; (8001c40 <FreqMenu_DrawPresetMenu+0x818>)
 8001b8c:	f00b ffb8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	4828      	ldr	r0, [pc, #160]	; (8001c44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001ba4:	f00b ffac 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb8:	2178      	movs	r1, #120	; 0x78
 8001bba:	4823      	ldr	r0, [pc, #140]	; (8001c48 <FreqMenu_DrawPresetMenu+0x820>)
 8001bbc:	f00b ffa0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd0:	2178      	movs	r1, #120	; 0x78
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <FreqMenu_DrawPresetMenu+0x824>)
 8001bd4:	f00b ff94 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be8:	2178      	movs	r1, #120	; 0x78
 8001bea:	4819      	ldr	r0, [pc, #100]	; (8001c50 <FreqMenu_DrawPresetMenu+0x828>)
 8001bec:	f00b ff88 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c04:	f00b ff7c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c08:	7a7b      	ldrb	r3, [r7, #9]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2302      	movs	r3, #2
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	480f      	ldr	r0, [pc, #60]	; (8001c58 <FreqMenu_DrawPresetMenu+0x830>)
 8001c1c:	f00b ff70 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001c20:	f000 be8e 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 8001c24:	0801294c 	.word	0x0801294c
 8001c28:	08012954 	.word	0x08012954
 8001c2c:	0801295c 	.word	0x0801295c
 8001c30:	08012964 	.word	0x08012964
 8001c34:	0801296c 	.word	0x0801296c
 8001c38:	08012974 	.word	0x08012974
 8001c3c:	0801297c 	.word	0x0801297c
 8001c40:	08012984 	.word	0x08012984
 8001c44:	0801298c 	.word	0x0801298c
 8001c48:	08012994 	.word	0x08012994
 8001c4c:	0801299c 	.word	0x0801299c
 8001c50:	080129a4 	.word	0x080129a4
 8001c54:	080129ac 	.word	0x080129ac
 8001c58:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2302      	movs	r3, #2
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	48a5      	ldr	r0, [pc, #660]	; (8001f04 <FreqMenu_DrawPresetMenu+0xadc>)
 8001c70:	f00b ff46 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2105      	movs	r1, #5
 8001c86:	48a0      	ldr	r0, [pc, #640]	; (8001f08 <FreqMenu_DrawPresetMenu+0xae0>)
 8001c88:	f00b ff3a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	489b      	ldr	r0, [pc, #620]	; (8001f0c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ca0:	f00b ff2e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7b3b      	ldrb	r3, [r7, #12]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	4896      	ldr	r0, [pc, #600]	; (8001f10 <FreqMenu_DrawPresetMenu+0xae8>)
 8001cb8:	f00b ff22 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4891      	ldr	r0, [pc, #580]	; (8001f14 <FreqMenu_DrawPresetMenu+0xaec>)
 8001cd0:	f00b ff16 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cd4:	7abb      	ldrb	r3, [r7, #10]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	488c      	ldr	r0, [pc, #560]	; (8001f18 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ce8:	f00b ff0a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cec:	7a7b      	ldrb	r3, [r7, #9]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	4887      	ldr	r0, [pc, #540]	; (8001f1c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001d00:	f00b fefe 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d14:	2178      	movs	r1, #120	; 0x78
 8001d16:	4882      	ldr	r0, [pc, #520]	; (8001f20 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001d18:	f00b fef2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d1c:	7bbb      	ldrb	r3, [r7, #14]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	487d      	ldr	r0, [pc, #500]	; (8001f24 <FreqMenu_DrawPresetMenu+0xafc>)
 8001d30:	f00b fee6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d34:	7b7b      	ldrb	r3, [r7, #13]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	4878      	ldr	r0, [pc, #480]	; (8001f28 <FreqMenu_DrawPresetMenu+0xb00>)
 8001d48:	f00b feda 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d4c:	7b3b      	ldrb	r3, [r7, #12]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4873      	ldr	r0, [pc, #460]	; (8001f2c <FreqMenu_DrawPresetMenu+0xb04>)
 8001d60:	f00b fece 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d74:	2178      	movs	r1, #120	; 0x78
 8001d76:	486e      	ldr	r0, [pc, #440]	; (8001f30 <FreqMenu_DrawPresetMenu+0xb08>)
 8001d78:	f00b fec2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d7c:	7abb      	ldrb	r3, [r7, #10]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2302      	movs	r3, #2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	4869      	ldr	r0, [pc, #420]	; (8001f34 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001d90:	f00b feb6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d94:	7a7b      	ldrb	r3, [r7, #9]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	4864      	ldr	r0, [pc, #400]	; (8001f38 <FreqMenu_DrawPresetMenu+0xb10>)
 8001da8:	f00b feaa 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001dac:	f000 bdc8 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	4850      	ldr	r0, [pc, #320]	; (8001f04 <FreqMenu_DrawPresetMenu+0xadc>)
 8001dc4:	f00b fe9c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2105      	movs	r1, #5
 8001dda:	484b      	ldr	r0, [pc, #300]	; (8001f08 <FreqMenu_DrawPresetMenu+0xae0>)
 8001ddc:	f00b fe90 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2105      	movs	r1, #5
 8001df2:	4846      	ldr	r0, [pc, #280]	; (8001f0c <FreqMenu_DrawPresetMenu+0xae4>)
 8001df4:	f00b fe84 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2105      	movs	r1, #5
 8001e0a:	4841      	ldr	r0, [pc, #260]	; (8001f10 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e0c:	f00b fe78 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2105      	movs	r1, #5
 8001e22:	483c      	ldr	r0, [pc, #240]	; (8001f14 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e24:	f00b fe6c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e28:	7abb      	ldrb	r3, [r7, #10]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2302      	movs	r3, #2
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	4837      	ldr	r0, [pc, #220]	; (8001f18 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001e3c:	f00b fe60 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e40:	7a7b      	ldrb	r3, [r7, #9]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2105      	movs	r1, #5
 8001e52:	4832      	ldr	r0, [pc, #200]	; (8001f1c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001e54:	f00b fe54 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2302      	movs	r3, #2
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e68:	2178      	movs	r1, #120	; 0x78
 8001e6a:	482d      	ldr	r0, [pc, #180]	; (8001f20 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001e6c:	f00b fe48 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	4828      	ldr	r0, [pc, #160]	; (8001f24 <FreqMenu_DrawPresetMenu+0xafc>)
 8001e84:	f00b fe3c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e88:	7b7b      	ldrb	r3, [r7, #13]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2302      	movs	r3, #2
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e98:	2178      	movs	r1, #120	; 0x78
 8001e9a:	4823      	ldr	r0, [pc, #140]	; (8001f28 <FreqMenu_DrawPresetMenu+0xb00>)
 8001e9c:	f00b fe30 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb0:	2178      	movs	r1, #120	; 0x78
 8001eb2:	481e      	ldr	r0, [pc, #120]	; (8001f2c <FreqMenu_DrawPresetMenu+0xb04>)
 8001eb4:	f00b fe24 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec8:	2178      	movs	r1, #120	; 0x78
 8001eca:	4819      	ldr	r0, [pc, #100]	; (8001f30 <FreqMenu_DrawPresetMenu+0xb08>)
 8001ecc:	f00b fe18 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed0:	7abb      	ldrb	r3, [r7, #10]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	4814      	ldr	r0, [pc, #80]	; (8001f34 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001ee4:	f00b fe0c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee8:	7a7b      	ldrb	r3, [r7, #9]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	480f      	ldr	r0, [pc, #60]	; (8001f38 <FreqMenu_DrawPresetMenu+0xb10>)
 8001efc:	f00b fe00 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8001f00:	f000 bd1e 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 8001f04:	0801294c 	.word	0x0801294c
 8001f08:	08012954 	.word	0x08012954
 8001f0c:	0801295c 	.word	0x0801295c
 8001f10:	08012964 	.word	0x08012964
 8001f14:	0801296c 	.word	0x0801296c
 8001f18:	08012974 	.word	0x08012974
 8001f1c:	0801297c 	.word	0x0801297c
 8001f20:	08012984 	.word	0x08012984
 8001f24:	0801298c 	.word	0x0801298c
 8001f28:	08012994 	.word	0x08012994
 8001f2c:	0801299c 	.word	0x0801299c
 8001f30:	080129a4 	.word	0x080129a4
 8001f34:	080129ac 	.word	0x080129ac
 8001f38:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2302      	movs	r3, #2
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f4c:	2105      	movs	r1, #5
 8001f4e:	48a5      	ldr	r0, [pc, #660]	; (80021e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001f50:	f00b fdd6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2105      	movs	r1, #5
 8001f66:	48a0      	ldr	r0, [pc, #640]	; (80021e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001f68:	f00b fdca 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	489b      	ldr	r0, [pc, #620]	; (80021ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8001f80:	f00b fdbe 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7b3b      	ldrb	r3, [r7, #12]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2105      	movs	r1, #5
 8001f96:	4896      	ldr	r0, [pc, #600]	; (80021f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001f98:	f00b fdb2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2105      	movs	r1, #5
 8001fae:	4891      	ldr	r0, [pc, #580]	; (80021f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001fb0:	f00b fda6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7abb      	ldrb	r3, [r7, #10]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	488c      	ldr	r0, [pc, #560]	; (80021f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001fc8:	f00b fd9a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fcc:	7a7b      	ldrb	r3, [r7, #9]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	4887      	ldr	r0, [pc, #540]	; (80021fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8001fe0:	f00b fd8e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2178      	movs	r1, #120	; 0x78
 8001ff6:	4882      	ldr	r0, [pc, #520]	; (8002200 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001ff8:	f00b fd82 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	2302      	movs	r3, #2
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	487d      	ldr	r0, [pc, #500]	; (8002204 <FreqMenu_DrawPresetMenu+0xddc>)
 8002010:	f00b fd76 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002014:	7b7b      	ldrb	r3, [r7, #13]
 8002016:	b29a      	uxth	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2302      	movs	r3, #2
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	4878      	ldr	r0, [pc, #480]	; (8002208 <FreqMenu_DrawPresetMenu+0xde0>)
 8002028:	f00b fd6a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800202c:	7b3b      	ldrb	r3, [r7, #12]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4873      	ldr	r0, [pc, #460]	; (800220c <FreqMenu_DrawPresetMenu+0xde4>)
 8002040:	f00b fd5e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	486e      	ldr	r0, [pc, #440]	; (8002210 <FreqMenu_DrawPresetMenu+0xde8>)
 8002058:	f00b fd52 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800205c:	7abb      	ldrb	r3, [r7, #10]
 800205e:	b29a      	uxth	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	4869      	ldr	r0, [pc, #420]	; (8002214 <FreqMenu_DrawPresetMenu+0xdec>)
 8002070:	f00b fd46 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002074:	7a7b      	ldrb	r3, [r7, #9]
 8002076:	b29a      	uxth	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2302      	movs	r3, #2
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	4864      	ldr	r0, [pc, #400]	; (8002218 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002088:	f00b fd3a 	bl	800db00 <ILI9341_Draw_Text>
				break;
 800208c:	f000 bc58 	b.w	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	b29a      	uxth	r2, r3
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	2302      	movs	r3, #2
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a0:	2105      	movs	r1, #5
 80020a2:	4850      	ldr	r0, [pc, #320]	; (80021e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80020a4:	f00b fd2c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2105      	movs	r1, #5
 80020ba:	484b      	ldr	r0, [pc, #300]	; (80021e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80020bc:	f00b fd20 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7b7b      	ldrb	r3, [r7, #13]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2105      	movs	r1, #5
 80020d2:	4846      	ldr	r0, [pc, #280]	; (80021ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80020d4:	f00b fd14 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7b3b      	ldrb	r3, [r7, #12]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2105      	movs	r1, #5
 80020ea:	4841      	ldr	r0, [pc, #260]	; (80021f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80020ec:	f00b fd08 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2105      	movs	r1, #5
 8002102:	483c      	ldr	r0, [pc, #240]	; (80021f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002104:	f00b fcfc 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7abb      	ldrb	r3, [r7, #10]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2105      	movs	r1, #5
 800211a:	4837      	ldr	r0, [pc, #220]	; (80021f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800211c:	f00b fcf0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002120:	7a7b      	ldrb	r3, [r7, #9]
 8002122:	b29a      	uxth	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2302      	movs	r3, #2
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002130:	2105      	movs	r1, #5
 8002132:	4832      	ldr	r0, [pc, #200]	; (80021fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002134:	f00b fce4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b29a      	uxth	r2, r3
 800213c:	2300      	movs	r3, #0
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	2302      	movs	r3, #2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002148:	2178      	movs	r1, #120	; 0x78
 800214a:	482d      	ldr	r0, [pc, #180]	; (8002200 <FreqMenu_DrawPresetMenu+0xdd8>)
 800214c:	f00b fcd8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	b29a      	uxth	r2, r3
 8002154:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2302      	movs	r3, #2
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	2178      	movs	r1, #120	; 0x78
 8002162:	4828      	ldr	r0, [pc, #160]	; (8002204 <FreqMenu_DrawPresetMenu+0xddc>)
 8002164:	f00b fccc 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	b29a      	uxth	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2302      	movs	r3, #2
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002178:	2178      	movs	r1, #120	; 0x78
 800217a:	4823      	ldr	r0, [pc, #140]	; (8002208 <FreqMenu_DrawPresetMenu+0xde0>)
 800217c:	f00b fcc0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	b29a      	uxth	r2, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2302      	movs	r3, #2
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002190:	2178      	movs	r1, #120	; 0x78
 8002192:	481e      	ldr	r0, [pc, #120]	; (800220c <FreqMenu_DrawPresetMenu+0xde4>)
 8002194:	f00b fcb4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	b29a      	uxth	r2, r3
 800219c:	2300      	movs	r3, #0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a8:	2178      	movs	r1, #120	; 0x78
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <FreqMenu_DrawPresetMenu+0xde8>)
 80021ac:	f00b fca8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b0:	7abb      	ldrb	r3, [r7, #10]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	4814      	ldr	r0, [pc, #80]	; (8002214 <FreqMenu_DrawPresetMenu+0xdec>)
 80021c4:	f00b fc9c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c8:	7a7b      	ldrb	r3, [r7, #9]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2302      	movs	r3, #2
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	480f      	ldr	r0, [pc, #60]	; (8002218 <FreqMenu_DrawPresetMenu+0xdf0>)
 80021dc:	f00b fc90 	bl	800db00 <ILI9341_Draw_Text>
				break;
 80021e0:	e3ae      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 80021e2:	bf00      	nop
 80021e4:	0801294c 	.word	0x0801294c
 80021e8:	08012954 	.word	0x08012954
 80021ec:	0801295c 	.word	0x0801295c
 80021f0:	08012964 	.word	0x08012964
 80021f4:	0801296c 	.word	0x0801296c
 80021f8:	08012974 	.word	0x08012974
 80021fc:	0801297c 	.word	0x0801297c
 8002200:	08012984 	.word	0x08012984
 8002204:	0801298c 	.word	0x0801298c
 8002208:	08012994 	.word	0x08012994
 800220c:	0801299c 	.word	0x0801299c
 8002210:	080129a4 	.word	0x080129a4
 8002214:	080129ac 	.word	0x080129ac
 8002218:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	b29a      	uxth	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800222c:	2105      	movs	r1, #5
 800222e:	48a4      	ldr	r0, [pc, #656]	; (80024c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002230:	f00b fc66 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	b29a      	uxth	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002244:	2105      	movs	r1, #5
 8002246:	489f      	ldr	r0, [pc, #636]	; (80024c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002248:	f00b fc5a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7b7b      	ldrb	r3, [r7, #13]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2105      	movs	r1, #5
 800225e:	489a      	ldr	r0, [pc, #616]	; (80024c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002260:	f00b fc4e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7b3b      	ldrb	r3, [r7, #12]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2105      	movs	r1, #5
 8002276:	4895      	ldr	r0, [pc, #596]	; (80024cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002278:	f00b fc42 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2105      	movs	r1, #5
 800228e:	4890      	ldr	r0, [pc, #576]	; (80024d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002290:	f00b fc36 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7abb      	ldrb	r3, [r7, #10]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2105      	movs	r1, #5
 80022a6:	488b      	ldr	r0, [pc, #556]	; (80024d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80022a8:	f00b fc2a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ac:	7a7b      	ldrb	r3, [r7, #9]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022bc:	2105      	movs	r1, #5
 80022be:	4886      	ldr	r0, [pc, #536]	; (80024d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80022c0:	f00b fc1e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d4:	2178      	movs	r1, #120	; 0x78
 80022d6:	4881      	ldr	r0, [pc, #516]	; (80024dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80022d8:	f00b fc12 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	2302      	movs	r3, #2
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	487c      	ldr	r0, [pc, #496]	; (80024e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80022f0:	f00b fc06 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022f4:	7b7b      	ldrb	r3, [r7, #13]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	4877      	ldr	r0, [pc, #476]	; (80024e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002308:	f00b fbfa 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230c:	7b3b      	ldrb	r3, [r7, #12]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231c:	2178      	movs	r1, #120	; 0x78
 800231e:	4872      	ldr	r0, [pc, #456]	; (80024e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002320:	f00b fbee 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002334:	2178      	movs	r1, #120	; 0x78
 8002336:	486d      	ldr	r0, [pc, #436]	; (80024ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002338:	f00b fbe2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233c:	7abb      	ldrb	r3, [r7, #10]
 800233e:	b29a      	uxth	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	4868      	ldr	r0, [pc, #416]	; (80024f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002350:	f00b fbd6 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002354:	7a7b      	ldrb	r3, [r7, #9]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	4863      	ldr	r0, [pc, #396]	; (80024f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002368:	f00b fbca 	bl	800db00 <ILI9341_Draw_Text>
				break;
 800236c:	e2e8      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	b29a      	uxth	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237e:	2105      	movs	r1, #5
 8002380:	484f      	ldr	r0, [pc, #316]	; (80024c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002382:	f00b fbbd 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	b29a      	uxth	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002396:	2105      	movs	r1, #5
 8002398:	484a      	ldr	r0, [pc, #296]	; (80024c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800239a:	f00b fbb1 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239e:	7b7b      	ldrb	r3, [r7, #13]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	2300      	movs	r3, #0
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2302      	movs	r3, #2
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ae:	2105      	movs	r1, #5
 80023b0:	4845      	ldr	r0, [pc, #276]	; (80024c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80023b2:	f00b fba5 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b6:	7b3b      	ldrb	r3, [r7, #12]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2302      	movs	r3, #2
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c6:	2105      	movs	r1, #5
 80023c8:	4840      	ldr	r0, [pc, #256]	; (80024cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80023ca:	f00b fb99 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023de:	2105      	movs	r1, #5
 80023e0:	483b      	ldr	r0, [pc, #236]	; (80024d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80023e2:	f00b fb8d 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e6:	7abb      	ldrb	r3, [r7, #10]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2302      	movs	r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f6:	2105      	movs	r1, #5
 80023f8:	4836      	ldr	r0, [pc, #216]	; (80024d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80023fa:	f00b fb81 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fe:	7a7b      	ldrb	r3, [r7, #9]
 8002400:	b29a      	uxth	r2, r3
 8002402:	2300      	movs	r3, #0
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2302      	movs	r3, #2
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240e:	2105      	movs	r1, #5
 8002410:	4831      	ldr	r0, [pc, #196]	; (80024d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002412:	f00b fb75 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	b29a      	uxth	r2, r3
 800241a:	2300      	movs	r3, #0
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	2302      	movs	r3, #2
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002426:	2178      	movs	r1, #120	; 0x78
 8002428:	482c      	ldr	r0, [pc, #176]	; (80024dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800242a:	f00b fb69 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	b29a      	uxth	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800243e:	2178      	movs	r1, #120	; 0x78
 8002440:	4827      	ldr	r0, [pc, #156]	; (80024e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002442:	f00b fb5d 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	b29a      	uxth	r2, r3
 800244a:	2300      	movs	r3, #0
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002456:	2178      	movs	r1, #120	; 0x78
 8002458:	4822      	ldr	r0, [pc, #136]	; (80024e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800245a:	f00b fb51 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800245e:	7b3b      	ldrb	r3, [r7, #12]
 8002460:	b29a      	uxth	r2, r3
 8002462:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	2178      	movs	r1, #120	; 0x78
 8002470:	481d      	ldr	r0, [pc, #116]	; (80024e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002472:	f00b fb45 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002476:	7afb      	ldrb	r3, [r7, #11]
 8002478:	b29a      	uxth	r2, r3
 800247a:	2300      	movs	r3, #0
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2302      	movs	r3, #2
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002486:	2178      	movs	r1, #120	; 0x78
 8002488:	4818      	ldr	r0, [pc, #96]	; (80024ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800248a:	f00b fb39 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248e:	7abb      	ldrb	r3, [r7, #10]
 8002490:	b29a      	uxth	r2, r3
 8002492:	2300      	movs	r3, #0
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2302      	movs	r3, #2
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249e:	2178      	movs	r1, #120	; 0x78
 80024a0:	4813      	ldr	r0, [pc, #76]	; (80024f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80024a2:	f00b fb2d 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a6:	7a7b      	ldrb	r3, [r7, #9]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	2300      	movs	r3, #0
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2302      	movs	r3, #2
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b6:	2178      	movs	r1, #120	; 0x78
 80024b8:	480e      	ldr	r0, [pc, #56]	; (80024f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80024ba:	f00b fb21 	bl	800db00 <ILI9341_Draw_Text>
				break;
 80024be:	e23f      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 80024c0:	0801294c 	.word	0x0801294c
 80024c4:	08012954 	.word	0x08012954
 80024c8:	0801295c 	.word	0x0801295c
 80024cc:	08012964 	.word	0x08012964
 80024d0:	0801296c 	.word	0x0801296c
 80024d4:	08012974 	.word	0x08012974
 80024d8:	0801297c 	.word	0x0801297c
 80024dc:	08012984 	.word	0x08012984
 80024e0:	0801298c 	.word	0x0801298c
 80024e4:	08012994 	.word	0x08012994
 80024e8:	0801299c 	.word	0x0801299c
 80024ec:	080129a4 	.word	0x080129a4
 80024f0:	080129ac 	.word	0x080129ac
 80024f4:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002508:	2105      	movs	r1, #5
 800250a:	48a4      	ldr	r0, [pc, #656]	; (800279c <FreqMenu_DrawPresetMenu+0x1374>)
 800250c:	f00b faf8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002510:	7bbb      	ldrb	r3, [r7, #14]
 8002512:	b29a      	uxth	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002520:	2105      	movs	r1, #5
 8002522:	489f      	ldr	r0, [pc, #636]	; (80027a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002524:	f00b faec 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7b7b      	ldrb	r3, [r7, #13]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2105      	movs	r1, #5
 800253a:	489a      	ldr	r0, [pc, #616]	; (80027a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800253c:	f00b fae0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002540:	7b3b      	ldrb	r3, [r7, #12]
 8002542:	b29a      	uxth	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002550:	2105      	movs	r1, #5
 8002552:	4895      	ldr	r0, [pc, #596]	; (80027a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002554:	f00b fad4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2105      	movs	r1, #5
 800256a:	4890      	ldr	r0, [pc, #576]	; (80027ac <FreqMenu_DrawPresetMenu+0x1384>)
 800256c:	f00b fac8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7abb      	ldrb	r3, [r7, #10]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2105      	movs	r1, #5
 8002582:	488b      	ldr	r0, [pc, #556]	; (80027b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002584:	f00b fabc 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002588:	7a7b      	ldrb	r3, [r7, #9]
 800258a:	b29a      	uxth	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002598:	2105      	movs	r1, #5
 800259a:	4886      	ldr	r0, [pc, #536]	; (80027b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800259c:	f00b fab0 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b0:	2178      	movs	r1, #120	; 0x78
 80025b2:	4881      	ldr	r0, [pc, #516]	; (80027b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80025b4:	f00b faa4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b8:	7bbb      	ldrb	r3, [r7, #14]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c8:	2178      	movs	r1, #120	; 0x78
 80025ca:	487c      	ldr	r0, [pc, #496]	; (80027bc <FreqMenu_DrawPresetMenu+0x1394>)
 80025cc:	f00b fa98 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d0:	7b7b      	ldrb	r3, [r7, #13]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	2300      	movs	r3, #0
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2302      	movs	r3, #2
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e0:	2178      	movs	r1, #120	; 0x78
 80025e2:	4877      	ldr	r0, [pc, #476]	; (80027c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80025e4:	f00b fa8c 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e8:	7b3b      	ldrb	r3, [r7, #12]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2302      	movs	r3, #2
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f8:	2178      	movs	r1, #120	; 0x78
 80025fa:	4872      	ldr	r0, [pc, #456]	; (80027c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80025fc:	f00b fa80 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	b29a      	uxth	r2, r3
 8002604:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	2178      	movs	r1, #120	; 0x78
 8002612:	486d      	ldr	r0, [pc, #436]	; (80027c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002614:	f00b fa74 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002618:	7abb      	ldrb	r3, [r7, #10]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4868      	ldr	r0, [pc, #416]	; (80027cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800262c:	f00b fa68 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002630:	7a7b      	ldrb	r3, [r7, #9]
 8002632:	b29a      	uxth	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2302      	movs	r3, #2
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	4863      	ldr	r0, [pc, #396]	; (80027d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002644:	f00b fa5c 	bl	800db00 <ILI9341_Draw_Text>
			break;
 8002648:	e17a      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	b29a      	uxth	r2, r3
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265a:	2105      	movs	r1, #5
 800265c:	484f      	ldr	r0, [pc, #316]	; (800279c <FreqMenu_DrawPresetMenu+0x1374>)
 800265e:	f00b fa4f 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002662:	7bbb      	ldrb	r3, [r7, #14]
 8002664:	b29a      	uxth	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002672:	2105      	movs	r1, #5
 8002674:	484a      	ldr	r0, [pc, #296]	; (80027a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002676:	f00b fa43 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	b29a      	uxth	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268a:	2105      	movs	r1, #5
 800268c:	4845      	ldr	r0, [pc, #276]	; (80027a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800268e:	f00b fa37 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002692:	7b3b      	ldrb	r3, [r7, #12]
 8002694:	b29a      	uxth	r2, r3
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a2:	2105      	movs	r1, #5
 80026a4:	4840      	ldr	r0, [pc, #256]	; (80027a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80026a6:	f00b fa2b 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2302      	movs	r3, #2
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ba:	2105      	movs	r1, #5
 80026bc:	483b      	ldr	r0, [pc, #236]	; (80027ac <FreqMenu_DrawPresetMenu+0x1384>)
 80026be:	f00b fa1f 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c2:	7abb      	ldrb	r3, [r7, #10]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	2302      	movs	r3, #2
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d2:	2105      	movs	r1, #5
 80026d4:	4836      	ldr	r0, [pc, #216]	; (80027b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80026d6:	f00b fa13 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026da:	7a7b      	ldrb	r3, [r7, #9]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	2300      	movs	r3, #0
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2302      	movs	r3, #2
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ea:	2105      	movs	r1, #5
 80026ec:	4831      	ldr	r0, [pc, #196]	; (80027b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80026ee:	f00b fa07 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2302      	movs	r3, #2
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002702:	2178      	movs	r1, #120	; 0x78
 8002704:	482c      	ldr	r0, [pc, #176]	; (80027b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002706:	f00b f9fb 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270a:	7bbb      	ldrb	r3, [r7, #14]
 800270c:	b29a      	uxth	r2, r3
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2302      	movs	r3, #2
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271a:	2178      	movs	r1, #120	; 0x78
 800271c:	4827      	ldr	r0, [pc, #156]	; (80027bc <FreqMenu_DrawPresetMenu+0x1394>)
 800271e:	f00b f9ef 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	b29a      	uxth	r2, r3
 8002726:	2300      	movs	r3, #0
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2302      	movs	r3, #2
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002732:	2178      	movs	r1, #120	; 0x78
 8002734:	4822      	ldr	r0, [pc, #136]	; (80027c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002736:	f00b f9e3 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800273a:	7b3b      	ldrb	r3, [r7, #12]
 800273c:	b29a      	uxth	r2, r3
 800273e:	2300      	movs	r3, #0
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2302      	movs	r3, #2
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800274a:	2178      	movs	r1, #120	; 0x78
 800274c:	481d      	ldr	r0, [pc, #116]	; (80027c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800274e:	f00b f9d7 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	b29a      	uxth	r2, r3
 8002756:	2300      	movs	r3, #0
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	2302      	movs	r3, #2
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002762:	2178      	movs	r1, #120	; 0x78
 8002764:	4818      	ldr	r0, [pc, #96]	; (80027c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002766:	f00b f9cb 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800276a:	7abb      	ldrb	r3, [r7, #10]
 800276c:	b29a      	uxth	r2, r3
 800276e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	2178      	movs	r1, #120	; 0x78
 800277c:	4813      	ldr	r0, [pc, #76]	; (80027cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800277e:	f00b f9bf 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002782:	7a7b      	ldrb	r3, [r7, #9]
 8002784:	b29a      	uxth	r2, r3
 8002786:	2300      	movs	r3, #0
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2302      	movs	r3, #2
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	480e      	ldr	r0, [pc, #56]	; (80027d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002796:	f00b f9b3 	bl	800db00 <ILI9341_Draw_Text>
			break;
 800279a:	e0d1      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 800279c:	0801294c 	.word	0x0801294c
 80027a0:	08012954 	.word	0x08012954
 80027a4:	0801295c 	.word	0x0801295c
 80027a8:	08012964 	.word	0x08012964
 80027ac:	0801296c 	.word	0x0801296c
 80027b0:	08012974 	.word	0x08012974
 80027b4:	0801297c 	.word	0x0801297c
 80027b8:	08012984 	.word	0x08012984
 80027bc:	0801298c 	.word	0x0801298c
 80027c0:	08012994 	.word	0x08012994
 80027c4:	0801299c 	.word	0x0801299c
 80027c8:	080129a4 	.word	0x080129a4
 80027cc:	080129ac 	.word	0x080129ac
 80027d0:	080129b4 	.word	0x080129b4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e4:	2105      	movs	r1, #5
 80027e6:	4858      	ldr	r0, [pc, #352]	; (8002948 <FreqMenu_DrawPresetMenu+0x1520>)
 80027e8:	f00b f98a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027fc:	2105      	movs	r1, #5
 80027fe:	4853      	ldr	r0, [pc, #332]	; (800294c <FreqMenu_DrawPresetMenu+0x1524>)
 8002800:	f00b f97e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	b29a      	uxth	r2, r3
 8002808:	2300      	movs	r3, #0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002814:	2105      	movs	r1, #5
 8002816:	484e      	ldr	r0, [pc, #312]	; (8002950 <FreqMenu_DrawPresetMenu+0x1528>)
 8002818:	f00b f972 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	b29a      	uxth	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800282c:	2105      	movs	r1, #5
 800282e:	4849      	ldr	r0, [pc, #292]	; (8002954 <FreqMenu_DrawPresetMenu+0x152c>)
 8002830:	f00b f966 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	b29a      	uxth	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002844:	2105      	movs	r1, #5
 8002846:	4844      	ldr	r0, [pc, #272]	; (8002958 <FreqMenu_DrawPresetMenu+0x1530>)
 8002848:	f00b f95a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284c:	7abb      	ldrb	r3, [r7, #10]
 800284e:	b29a      	uxth	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2302      	movs	r3, #2
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285c:	2105      	movs	r1, #5
 800285e:	483f      	ldr	r0, [pc, #252]	; (800295c <FreqMenu_DrawPresetMenu+0x1534>)
 8002860:	f00b f94e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002864:	7a7b      	ldrb	r3, [r7, #9]
 8002866:	b29a      	uxth	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2302      	movs	r3, #2
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002874:	2105      	movs	r1, #5
 8002876:	483a      	ldr	r0, [pc, #232]	; (8002960 <FreqMenu_DrawPresetMenu+0x1538>)
 8002878:	f00b f942 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	b29a      	uxth	r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2302      	movs	r3, #2
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288c:	2178      	movs	r1, #120	; 0x78
 800288e:	4835      	ldr	r0, [pc, #212]	; (8002964 <FreqMenu_DrawPresetMenu+0x153c>)
 8002890:	f00b f936 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	b29a      	uxth	r2, r3
 8002898:	2300      	movs	r3, #0
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2302      	movs	r3, #2
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a4:	2178      	movs	r1, #120	; 0x78
 80028a6:	4830      	ldr	r0, [pc, #192]	; (8002968 <FreqMenu_DrawPresetMenu+0x1540>)
 80028a8:	f00b f92a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ac:	7b7b      	ldrb	r3, [r7, #13]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	2300      	movs	r3, #0
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2302      	movs	r3, #2
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028bc:	2178      	movs	r1, #120	; 0x78
 80028be:	482b      	ldr	r0, [pc, #172]	; (800296c <FreqMenu_DrawPresetMenu+0x1544>)
 80028c0:	f00b f91e 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c4:	7b3b      	ldrb	r3, [r7, #12]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	2300      	movs	r3, #0
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2302      	movs	r3, #2
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d4:	2178      	movs	r1, #120	; 0x78
 80028d6:	4826      	ldr	r0, [pc, #152]	; (8002970 <FreqMenu_DrawPresetMenu+0x1548>)
 80028d8:	f00b f912 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	2302      	movs	r3, #2
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ec:	2178      	movs	r1, #120	; 0x78
 80028ee:	4821      	ldr	r0, [pc, #132]	; (8002974 <FreqMenu_DrawPresetMenu+0x154c>)
 80028f0:	f00b f906 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f4:	7abb      	ldrb	r3, [r7, #10]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2302      	movs	r3, #2
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002904:	2178      	movs	r1, #120	; 0x78
 8002906:	481c      	ldr	r0, [pc, #112]	; (8002978 <FreqMenu_DrawPresetMenu+0x1550>)
 8002908:	f00b f8fa 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800290c:	7a7b      	ldrb	r3, [r7, #9]
 800290e:	b29a      	uxth	r2, r3
 8002910:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2302      	movs	r3, #2
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2300      	movs	r3, #0
 800291c:	2178      	movs	r1, #120	; 0x78
 800291e:	4817      	ldr	r0, [pc, #92]	; (800297c <FreqMenu_DrawPresetMenu+0x1554>)
 8002920:	f00b f8ee 	bl	800db00 <ILI9341_Draw_Text>
			break;
 8002924:	bf00      	nop
 8002926:	e00b      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002928:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2301      	movs	r3, #1
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	22b4      	movs	r2, #180	; 0xb4
 8002936:	2105      	movs	r1, #5
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <FreqMenu_DrawPresetMenu+0x1558>)
 800293a:	f00b f8e1 	bl	800db00 <ILI9341_Draw_Text>
}
 800293e:	e7ff      	b.n	8002940 <FreqMenu_DrawPresetMenu+0x1518>
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	0801294c 	.word	0x0801294c
 800294c:	08012954 	.word	0x08012954
 8002950:	0801295c 	.word	0x0801295c
 8002954:	08012964 	.word	0x08012964
 8002958:	0801296c 	.word	0x0801296c
 800295c:	08012974 	.word	0x08012974
 8002960:	0801297c 	.word	0x0801297c
 8002964:	08012984 	.word	0x08012984
 8002968:	0801298c 	.word	0x0801298c
 800296c:	08012994 	.word	0x08012994
 8002970:	0801299c 	.word	0x0801299c
 8002974:	080129a4 	.word	0x080129a4
 8002978:	080129ac 	.word	0x080129ac
 800297c:	080129b4 	.word	0x080129b4
 8002980:	080129c0 	.word	0x080129c0

08002984 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2302      	movs	r3, #2
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	220a      	movs	r2, #10
 8002998:	2105      	movs	r1, #5
 800299a:	4804      	ldr	r0, [pc, #16]	; (80029ac <FreqMenu_DrawAdjustMenu+0x28>)
 800299c:	f00b f8b0 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80029a0:	f7fe faf0 	bl	8000f84 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	080129f0 	.word	0x080129f0

080029b0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b0a0      	sub	sp, #128	; 0x80
 80029b4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80029b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	220a      	movs	r2, #10
 80029c4:	2105      	movs	r1, #5
 80029c6:	48a1      	ldr	r0, [pc, #644]	; (8002c4c <FreqMenu_DrawSweepMenu+0x29c>)
 80029c8:	f00b f89a 	bl	800db00 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 80029cc:	2300      	movs	r3, #0
 80029ce:	667b      	str	r3, [r7, #100]	; 0x64
 80029d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 80029de:	4b9c      	ldr	r3, [pc, #624]	; (8002c50 <FreqMenu_DrawSweepMenu+0x2a0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d109      	bne.n	80029fe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 80029ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029ee:	4a99      	ldr	r2, [pc, #612]	; (8002c54 <FreqMenu_DrawSweepMenu+0x2a4>)
 80029f0:	461c      	mov	r4, r3
 80029f2:	4615      	mov	r5, r2
 80029f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	7023      	strb	r3, [r4, #0]
 80029fc:	e008      	b.n	8002a10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 80029fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a02:	4a95      	ldr	r2, [pc, #596]	; (8002c58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002a04:	461c      	mov	r4, r3
 8002a06:	4615      	mov	r5, r2
 8002a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a20:	2228      	movs	r2, #40	; 0x28
 8002a22:	2105      	movs	r1, #5
 8002a24:	f00b f86c 	bl	800db00 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002a3e:	f002 fddb 	bl	80055f8 <SM_GetOutputInHertz>
 8002a42:	ee10 3a10 	vmov	r3, s0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fda6 	bl	8000598 <__aeabi_f2d>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	460c      	mov	r4, r1
 8002a50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002a54:	e9cd 3400 	strd	r3, r4, [sp]
 8002a58:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002a5a:	2119      	movs	r1, #25
 8002a5c:	f00c fbf4 	bl	800f248 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002a64:	2300      	movs	r3, #0
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a70:	223c      	movs	r2, #60	; 0x3c
 8002a72:	2105      	movs	r1, #5
 8002a74:	f00b f844 	bl	800db00 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2264      	movs	r2, #100	; 0x64
 8002a86:	2105      	movs	r1, #5
 8002a88:	4875      	ldr	r0, [pc, #468]	; (8002c60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002a8a:	f00b f839 	bl	800db00 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002a8e:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d117      	bne.n	8002aca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa6:	2264      	movs	r2, #100	; 0x64
 8002aa8:	21eb      	movs	r1, #235	; 0xeb
 8002aaa:	486e      	ldr	r0, [pc, #440]	; (8002c64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002aac:	f00b f828 	bl	800db00 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ab0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2300      	movs	r3, #0
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	f240 1109 	movw	r1, #265	; 0x109
 8002ac2:	4869      	ldr	r0, [pc, #420]	; (8002c68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ac4:	f00b f81c 	bl	800db00 <ILI9341_Draw_Text>
 8002ac8:	e016      	b.n	8002af8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aca:	2300      	movs	r3, #0
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2302      	movs	r3, #2
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad6:	2264      	movs	r2, #100	; 0x64
 8002ad8:	f240 1109 	movw	r1, #265	; 0x109
 8002adc:	4862      	ldr	r0, [pc, #392]	; (8002c68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ade:	f00b f80f 	bl	800db00 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ae2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2302      	movs	r3, #2
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2264      	movs	r2, #100	; 0x64
 8002af0:	21eb      	movs	r1, #235	; 0xeb
 8002af2:	485c      	ldr	r0, [pc, #368]	; (8002c64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002af4:	f00b f804 	bl	800db00 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002af8:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2302      	movs	r3, #2
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2278      	movs	r2, #120	; 0x78
 8002b0e:	2105      	movs	r1, #5
 8002b10:	4857      	ldr	r0, [pc, #348]	; (8002c70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002b12:	f00a fff5 	bl	800db00 <ILI9341_Draw_Text>
 8002b16:	e00a      	b.n	8002b2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2278      	movs	r2, #120	; 0x78
 8002b26:	2105      	movs	r1, #5
 8002b28:	4851      	ldr	r0, [pc, #324]	; (8002c70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002b2a:	f00a ffe9 	bl	800db00 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd25 	bl	8000598 <__aeabi_f2d>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002b56:	e9cd 3400 	strd	r3, r4, [sp]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	; (8002c78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002b5c:	2119      	movs	r1, #25
 8002b5e:	f00c fb73 	bl	800f248 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002b66:	2300      	movs	r3, #0
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b72:	2278      	movs	r2, #120	; 0x78
 8002b74:	21b6      	movs	r1, #182	; 0xb6
 8002b76:	f00a ffc3 	bl	800db00 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002b7a:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10f      	bne.n	8002ba2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002b8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	228c      	movs	r2, #140	; 0x8c
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4839      	ldr	r0, [pc, #228]	; (8002c80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002b9c:	f00a ffb0 	bl	800db00 <ILI9341_Draw_Text>
 8002ba0:	e00a      	b.n	8002bb8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bae:	228c      	movs	r2, #140	; 0x8c
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	4833      	ldr	r0, [pc, #204]	; (8002c80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002bb4:	f00a ffa4 	bl	800db00 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	ee17 0a90 	vmov	r0, s15
 8002be0:	f002 fd4e 	bl	8005680 <SM_ConvertPeriodToHertz>
 8002be4:	eeb0 7a40 	vmov.f32	s14, s0
 8002be8:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002c8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002bec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bf0:	ee16 0a90 	vmov	r0, s13
 8002bf4:	f7fd fcd0 	bl	8000598 <__aeabi_f2d>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f107 0018 	add.w	r0, r7, #24
 8002c00:	e9cd 3400 	strd	r3, r4, [sp]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002c06:	2114      	movs	r1, #20
 8002c08:	f00c fb1e 	bl	800f248 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c0c:	f107 0018 	add.w	r0, r7, #24
 8002c10:	2300      	movs	r3, #0
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2302      	movs	r3, #2
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c1c:	228c      	movs	r2, #140	; 0x8c
 8002c1e:	219e      	movs	r1, #158	; 0x9e
 8002c20:	f00a ff6e 	bl	800db00 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d135      	bne.n	8002c98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d131      	bne.n	8002c98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002c34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	22a0      	movs	r2, #160	; 0xa0
 8002c42:	2105      	movs	r1, #5
 8002c44:	4813      	ldr	r0, [pc, #76]	; (8002c94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002c46:	f00a ff5b 	bl	800db00 <ILI9341_Draw_Text>
 8002c4a:	e030      	b.n	8002cae <FreqMenu_DrawSweepMenu+0x2fe>
 8002c4c:	08012a04 	.word	0x08012a04
 8002c50:	40000c00 	.word	0x40000c00
 8002c54:	08012a18 	.word	0x08012a18
 8002c58:	08012a2c 	.word	0x08012a2c
 8002c5c:	08012a40 	.word	0x08012a40
 8002c60:	08012a54 	.word	0x08012a54
 8002c64:	08012a60 	.word	0x08012a60
 8002c68:	08012a64 	.word	0x08012a64
 8002c6c:	20001a15 	.word	0x20001a15
 8002c70:	08012a6c 	.word	0x08012a6c
 8002c74:	20001a30 	.word	0x20001a30
 8002c78:	08012a7c 	.word	0x08012a7c
 8002c7c:	20001a14 	.word	0x20001a14
 8002c80:	08012a88 	.word	0x08012a88
 8002c84:	20000000 	.word	0x20000000
 8002c88:	40013400 	.word	0x40013400
 8002c8c:	42f00000 	.word	0x42f00000
 8002c90:	08012a98 	.word	0x08012a98
 8002c94:	08012aa4 	.word	0x08012aa4
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca4:	22a0      	movs	r2, #160	; 0xa0
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	484d      	ldr	r0, [pc, #308]	; (8002de0 <FreqMenu_DrawSweepMenu+0x430>)
 8002caa:	f00a ff29 	bl	800db00 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <FreqMenu_DrawSweepMenu+0x434>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <FreqMenu_DrawSweepMenu+0x438>)
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	ee17 0a90 	vmov	r0, s15
 8002cd6:	f002 fcd3 	bl	8005680 <SM_ConvertPeriodToHertz>
 8002cda:	eeb0 7a40 	vmov.f32	s14, s0
 8002cde:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002dec <FreqMenu_DrawSweepMenu+0x43c>
 8002ce2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ce6:	ee16 0a90 	vmov	r0, s13
 8002cea:	f7fd fc55 	bl	8000598 <__aeabi_f2d>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	1d38      	adds	r0, r7, #4
 8002cf4:	e9cd 3400 	strd	r3, r4, [sp]
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	; (8002df0 <FreqMenu_DrawSweepMenu+0x440>)
 8002cfa:	2114      	movs	r1, #20
 8002cfc:	f00c faa4 	bl	800f248 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d00:	1d38      	adds	r0, r7, #4
 8002d02:	2300      	movs	r3, #0
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d0e:	22a0      	movs	r2, #160	; 0xa0
 8002d10:	21aa      	movs	r1, #170	; 0xaa
 8002d12:	f00a fef5 	bl	800db00 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <FreqMenu_DrawSweepMenu+0x444>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10b      	bne.n	8002d3a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002d22:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	22d5      	movs	r2, #213	; 0xd5
 8002d30:	2106      	movs	r1, #6
 8002d32:	4831      	ldr	r0, [pc, #196]	; (8002df8 <FreqMenu_DrawSweepMenu+0x448>)
 8002d34:	f00a fee4 	bl	800db00 <ILI9341_Draw_Text>
 8002d38:	e00a      	b.n	8002d50 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002d3a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	2302      	movs	r3, #2
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2300      	movs	r3, #0
 8002d46:	22d5      	movs	r2, #213	; 0xd5
 8002d48:	2105      	movs	r1, #5
 8002d4a:	482c      	ldr	r0, [pc, #176]	; (8002dfc <FreqMenu_DrawSweepMenu+0x44c>)
 8002d4c:	f00a fed8 	bl	800db00 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002d50:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	2302      	movs	r3, #2
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	22cc      	movs	r2, #204	; 0xcc
 8002d5e:	2169      	movs	r1, #105	; 0x69
 8002d60:	4827      	ldr	r0, [pc, #156]	; (8002e00 <FreqMenu_DrawSweepMenu+0x450>)
 8002d62:	f00a fecd 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002d66:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	22de      	movs	r2, #222	; 0xde
 8002d74:	2162      	movs	r1, #98	; 0x62
 8002d76:	4823      	ldr	r0, [pc, #140]	; (8002e04 <FreqMenu_DrawSweepMenu+0x454>)
 8002d78:	f00a fec2 	bl	800db00 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002d7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2302      	movs	r3, #2
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	22cc      	movs	r2, #204	; 0xcc
 8002d8a:	21b7      	movs	r1, #183	; 0xb7
 8002d8c:	481c      	ldr	r0, [pc, #112]	; (8002e00 <FreqMenu_DrawSweepMenu+0x450>)
 8002d8e:	f00a feb7 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002d92:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	22de      	movs	r2, #222	; 0xde
 8002da0:	21ad      	movs	r1, #173	; 0xad
 8002da2:	4819      	ldr	r0, [pc, #100]	; (8002e08 <FreqMenu_DrawSweepMenu+0x458>)
 8002da4:	f00a feac 	bl	800db00 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002da8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2302      	movs	r3, #2
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	22cc      	movs	r2, #204	; 0xcc
 8002db6:	f240 1107 	movw	r1, #263	; 0x107
 8002dba:	4811      	ldr	r0, [pc, #68]	; (8002e00 <FreqMenu_DrawSweepMenu+0x450>)
 8002dbc:	f00a fea0 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002dc0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	22de      	movs	r2, #222	; 0xde
 8002dce:	21fc      	movs	r1, #252	; 0xfc
 8002dd0:	480e      	ldr	r0, [pc, #56]	; (8002e0c <FreqMenu_DrawSweepMenu+0x45c>)
 8002dd2:	f00a fe95 	bl	800db00 <ILI9341_Draw_Text>
}
 8002dd6:	bf00      	nop
 8002dd8:	3778      	adds	r7, #120	; 0x78
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	08012aa4 	.word	0x08012aa4
 8002de4:	20000004 	.word	0x20000004
 8002de8:	40013400 	.word	0x40013400
 8002dec:	42f00000 	.word	0x42f00000
 8002df0:	08012ab4 	.word	0x08012ab4
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	08012ac0 	.word	0x08012ac0
 8002dfc:	08012ac8 	.word	0x08012ac8
 8002e00:	08012ad0 	.word	0x08012ad0
 8002e04:	08012ad4 	.word	0x08012ad4
 8002e08:	08012adc 	.word	0x08012adc
 8002e0c:	08012ae4 	.word	0x08012ae4

08002e10 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d007      	beq.n	8002e30 <FuncMenu_DrawMenu+0x20>
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d009      	beq.n	8002e38 <FuncMenu_DrawMenu+0x28>
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d000      	beq.n	8002e2a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002e28:	e00a      	b.n	8002e40 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002e2a:	f000 f80d 	bl	8002e48 <FuncMenu_DrawMainMenu>
			break;
 8002e2e:	e007      	b.n	8002e40 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 f851 	bl	8002ed8 <FuncMenu_DrawOutputMenu>
			break;
 8002e36:	e003      	b.n	8002e40 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f000 f84d 	bl	8002ed8 <FuncMenu_DrawOutputMenu>
			break;
 8002e3e:	bf00      	nop

	}
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	220a      	movs	r2, #10
 8002e5c:	210a      	movs	r1, #10
 8002e5e:	481a      	ldr	r0, [pc, #104]	; (8002ec8 <FuncMenu_DrawMainMenu+0x80>)
 8002e60:	f00a fe4e 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002e64:	f7fe f88e 	bl	8000f84 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002e68:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	22d2      	movs	r2, #210	; 0xd2
 8002e76:	2105      	movs	r1, #5
 8002e78:	4814      	ldr	r0, [pc, #80]	; (8002ecc <FuncMenu_DrawMainMenu+0x84>)
 8002e7a:	f00a fe41 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002e7e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2302      	movs	r3, #2
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	22d2      	movs	r2, #210	; 0xd2
 8002e8c:	2161      	movs	r1, #97	; 0x61
 8002e8e:	4810      	ldr	r0, [pc, #64]	; (8002ed0 <FuncMenu_DrawMainMenu+0x88>)
 8002e90:	f00a fe36 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002e94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	22d2      	movs	r2, #210	; 0xd2
 8002ea2:	21af      	movs	r1, #175	; 0xaf
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <FuncMenu_DrawMainMenu+0x8c>)
 8002ea6:	f00a fe2b 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002eaa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	22d2      	movs	r2, #210	; 0xd2
 8002eb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <FuncMenu_DrawMainMenu+0x8c>)
 8002ebe:	f00a fe1f 	bl	800db00 <ILI9341_Draw_Text>
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	08012aec 	.word	0x08012aec
 8002ecc:	08012af8 	.word	0x08012af8
 8002ed0:	08012b00 	.word	0x08012b00
 8002ed4:	08012b08 	.word	0x08012b08

08002ed8 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2300      	movs	r3, #0
 8002eee:	220a      	movs	r2, #10
 8002ef0:	210a      	movs	r1, #10
 8002ef2:	48b9      	ldr	r0, [pc, #740]	; (80031d8 <FuncMenu_DrawOutputMenu+0x300>)
 8002ef4:	f00a fe04 	bl	800db00 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fb4a 	bl	8005594 <SM_GetOutputChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002f06:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 81b5 	beq.w	800327a <FuncMenu_DrawOutputMenu+0x3a2>
	{
		switch(func_profileTmp->func)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	f200 81b0 	bhi.w	800327a <FuncMenu_DrawOutputMenu+0x3a2>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <FuncMenu_DrawOutputMenu+0x48>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f39 	.word	0x08002f39
 8002f24:	08002fbf 	.word	0x08002fbf
 8002f28:	08003045 	.word	0x08003045
 8002f2c:	080030cb 	.word	0x080030cb
 8002f30:	08003151 	.word	0x08003151
 8002f34:	080031f5 	.word	0x080031f5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002f38:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2302      	movs	r3, #2
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	2232      	movs	r2, #50	; 0x32
 8002f46:	210a      	movs	r1, #10
 8002f48:	48a4      	ldr	r0, [pc, #656]	; (80031dc <FuncMenu_DrawOutputMenu+0x304>)
 8002f4a:	f00a fdd9 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2302      	movs	r3, #2
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f5a:	2246      	movs	r2, #70	; 0x46
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	48a0      	ldr	r0, [pc, #640]	; (80031e0 <FuncMenu_DrawOutputMenu+0x308>)
 8002f60:	f00a fdce 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f64:	2300      	movs	r3, #0
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f70:	225a      	movs	r2, #90	; 0x5a
 8002f72:	210a      	movs	r1, #10
 8002f74:	489b      	ldr	r0, [pc, #620]	; (80031e4 <FuncMenu_DrawOutputMenu+0x30c>)
 8002f76:	f00a fdc3 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	2302      	movs	r3, #2
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f86:	226e      	movs	r2, #110	; 0x6e
 8002f88:	210a      	movs	r1, #10
 8002f8a:	4897      	ldr	r0, [pc, #604]	; (80031e8 <FuncMenu_DrawOutputMenu+0x310>)
 8002f8c:	f00a fdb8 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f90:	2300      	movs	r3, #0
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2302      	movs	r3, #2
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f9c:	2282      	movs	r2, #130	; 0x82
 8002f9e:	210a      	movs	r1, #10
 8002fa0:	4892      	ldr	r0, [pc, #584]	; (80031ec <FuncMenu_DrawOutputMenu+0x314>)
 8002fa2:	f00a fdad 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	2302      	movs	r3, #2
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fb2:	2296      	movs	r2, #150	; 0x96
 8002fb4:	210a      	movs	r1, #10
 8002fb6:	488e      	ldr	r0, [pc, #568]	; (80031f0 <FuncMenu_DrawOutputMenu+0x318>)
 8002fb8:	f00a fda2 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8002fbc:	e15d      	b.n	800327a <FuncMenu_DrawOutputMenu+0x3a2>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fca:	2232      	movs	r2, #50	; 0x32
 8002fcc:	210a      	movs	r1, #10
 8002fce:	4883      	ldr	r0, [pc, #524]	; (80031dc <FuncMenu_DrawOutputMenu+0x304>)
 8002fd0:	f00a fd96 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002fd4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2246      	movs	r2, #70	; 0x46
 8002fe2:	210a      	movs	r1, #10
 8002fe4:	487e      	ldr	r0, [pc, #504]	; (80031e0 <FuncMenu_DrawOutputMenu+0x308>)
 8002fe6:	f00a fd8b 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ff6:	225a      	movs	r2, #90	; 0x5a
 8002ff8:	210a      	movs	r1, #10
 8002ffa:	487a      	ldr	r0, [pc, #488]	; (80031e4 <FuncMenu_DrawOutputMenu+0x30c>)
 8002ffc:	f00a fd80 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003000:	2300      	movs	r3, #0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2302      	movs	r3, #2
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800300c:	226e      	movs	r2, #110	; 0x6e
 800300e:	210a      	movs	r1, #10
 8003010:	4875      	ldr	r0, [pc, #468]	; (80031e8 <FuncMenu_DrawOutputMenu+0x310>)
 8003012:	f00a fd75 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003016:	2300      	movs	r3, #0
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2302      	movs	r3, #2
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003022:	2282      	movs	r2, #130	; 0x82
 8003024:	210a      	movs	r1, #10
 8003026:	4871      	ldr	r0, [pc, #452]	; (80031ec <FuncMenu_DrawOutputMenu+0x314>)
 8003028:	f00a fd6a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800302c:	2300      	movs	r3, #0
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2302      	movs	r3, #2
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003038:	2296      	movs	r2, #150	; 0x96
 800303a:	210a      	movs	r1, #10
 800303c:	486c      	ldr	r0, [pc, #432]	; (80031f0 <FuncMenu_DrawOutputMenu+0x318>)
 800303e:	f00a fd5f 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8003042:	e11a      	b.n	800327a <FuncMenu_DrawOutputMenu+0x3a2>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003044:	2300      	movs	r3, #0
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003050:	2232      	movs	r2, #50	; 0x32
 8003052:	210a      	movs	r1, #10
 8003054:	4861      	ldr	r0, [pc, #388]	; (80031dc <FuncMenu_DrawOutputMenu+0x304>)
 8003056:	f00a fd53 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003066:	2246      	movs	r2, #70	; 0x46
 8003068:	210a      	movs	r1, #10
 800306a:	485d      	ldr	r0, [pc, #372]	; (80031e0 <FuncMenu_DrawOutputMenu+0x308>)
 800306c:	f00a fd48 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003070:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2302      	movs	r3, #2
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	225a      	movs	r2, #90	; 0x5a
 800307e:	210a      	movs	r1, #10
 8003080:	4858      	ldr	r0, [pc, #352]	; (80031e4 <FuncMenu_DrawOutputMenu+0x30c>)
 8003082:	f00a fd3d 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003086:	2300      	movs	r3, #0
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2302      	movs	r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003092:	226e      	movs	r2, #110	; 0x6e
 8003094:	210a      	movs	r1, #10
 8003096:	4854      	ldr	r0, [pc, #336]	; (80031e8 <FuncMenu_DrawOutputMenu+0x310>)
 8003098:	f00a fd32 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800309c:	2300      	movs	r3, #0
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2302      	movs	r3, #2
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030a8:	2282      	movs	r2, #130	; 0x82
 80030aa:	210a      	movs	r1, #10
 80030ac:	484f      	ldr	r0, [pc, #316]	; (80031ec <FuncMenu_DrawOutputMenu+0x314>)
 80030ae:	f00a fd27 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030b2:	2300      	movs	r3, #0
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2302      	movs	r3, #2
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030be:	2296      	movs	r2, #150	; 0x96
 80030c0:	210a      	movs	r1, #10
 80030c2:	484b      	ldr	r0, [pc, #300]	; (80031f0 <FuncMenu_DrawOutputMenu+0x318>)
 80030c4:	f00a fd1c 	bl	800db00 <ILI9341_Draw_Text>
				break;
 80030c8:	e0d7      	b.n	800327a <FuncMenu_DrawOutputMenu+0x3a2>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ca:	2300      	movs	r3, #0
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	2302      	movs	r3, #2
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030d6:	2232      	movs	r2, #50	; 0x32
 80030d8:	210a      	movs	r1, #10
 80030da:	4840      	ldr	r0, [pc, #256]	; (80031dc <FuncMenu_DrawOutputMenu+0x304>)
 80030dc:	f00a fd10 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2302      	movs	r3, #2
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	210a      	movs	r1, #10
 80030f0:	483b      	ldr	r0, [pc, #236]	; (80031e0 <FuncMenu_DrawOutputMenu+0x308>)
 80030f2:	f00a fd05 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030f6:	2300      	movs	r3, #0
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2302      	movs	r3, #2
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003102:	225a      	movs	r2, #90	; 0x5a
 8003104:	210a      	movs	r1, #10
 8003106:	4837      	ldr	r0, [pc, #220]	; (80031e4 <FuncMenu_DrawOutputMenu+0x30c>)
 8003108:	f00a fcfa 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800310c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2302      	movs	r3, #2
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2300      	movs	r3, #0
 8003118:	226e      	movs	r2, #110	; 0x6e
 800311a:	210a      	movs	r1, #10
 800311c:	4832      	ldr	r0, [pc, #200]	; (80031e8 <FuncMenu_DrawOutputMenu+0x310>)
 800311e:	f00a fcef 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003122:	2300      	movs	r3, #0
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2302      	movs	r3, #2
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800312e:	2282      	movs	r2, #130	; 0x82
 8003130:	210a      	movs	r1, #10
 8003132:	482e      	ldr	r0, [pc, #184]	; (80031ec <FuncMenu_DrawOutputMenu+0x314>)
 8003134:	f00a fce4 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003138:	2300      	movs	r3, #0
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2302      	movs	r3, #2
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003144:	2296      	movs	r2, #150	; 0x96
 8003146:	210a      	movs	r1, #10
 8003148:	4829      	ldr	r0, [pc, #164]	; (80031f0 <FuncMenu_DrawOutputMenu+0x318>)
 800314a:	f00a fcd9 	bl	800db00 <ILI9341_Draw_Text>
				break;
 800314e:	e094      	b.n	800327a <FuncMenu_DrawOutputMenu+0x3a2>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003150:	2300      	movs	r3, #0
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	2302      	movs	r3, #2
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800315c:	2232      	movs	r2, #50	; 0x32
 800315e:	210a      	movs	r1, #10
 8003160:	481e      	ldr	r0, [pc, #120]	; (80031dc <FuncMenu_DrawOutputMenu+0x304>)
 8003162:	f00a fccd 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003166:	2300      	movs	r3, #0
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	2302      	movs	r3, #2
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003172:	2246      	movs	r2, #70	; 0x46
 8003174:	210a      	movs	r1, #10
 8003176:	481a      	ldr	r0, [pc, #104]	; (80031e0 <FuncMenu_DrawOutputMenu+0x308>)
 8003178:	f00a fcc2 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800317c:	2300      	movs	r3, #0
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003188:	225a      	movs	r2, #90	; 0x5a
 800318a:	210a      	movs	r1, #10
 800318c:	4815      	ldr	r0, [pc, #84]	; (80031e4 <FuncMenu_DrawOutputMenu+0x30c>)
 800318e:	f00a fcb7 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003192:	2300      	movs	r3, #0
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800319e:	226e      	movs	r2, #110	; 0x6e
 80031a0:	210a      	movs	r1, #10
 80031a2:	4811      	ldr	r0, [pc, #68]	; (80031e8 <FuncMenu_DrawOutputMenu+0x310>)
 80031a4:	f00a fcac 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80031a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2302      	movs	r3, #2
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	2282      	movs	r2, #130	; 0x82
 80031b6:	210a      	movs	r1, #10
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <FuncMenu_DrawOutputMenu+0x314>)
 80031ba:	f00a fca1 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031be:	2300      	movs	r3, #0
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ca:	2296      	movs	r2, #150	; 0x96
 80031cc:	210a      	movs	r1, #10
 80031ce:	4808      	ldr	r0, [pc, #32]	; (80031f0 <FuncMenu_DrawOutputMenu+0x318>)
 80031d0:	f00a fc96 	bl	800db00 <ILI9341_Draw_Text>
				break;
 80031d4:	e051      	b.n	800327a <FuncMenu_DrawOutputMenu+0x3a2>
 80031d6:	bf00      	nop
 80031d8:	08012b10 	.word	0x08012b10
 80031dc:	08012b20 	.word	0x08012b20
 80031e0:	08012b28 	.word	0x08012b28
 80031e4:	08012b34 	.word	0x08012b34
 80031e8:	08012b3c 	.word	0x08012b3c
 80031ec:	08012b48 	.word	0x08012b48
 80031f0:	08012b54 	.word	0x08012b54
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	2302      	movs	r3, #2
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003200:	2232      	movs	r2, #50	; 0x32
 8003202:	210a      	movs	r1, #10
 8003204:	481f      	ldr	r0, [pc, #124]	; (8003284 <FuncMenu_DrawOutputMenu+0x3ac>)
 8003206:	f00a fc7b 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800320a:	2300      	movs	r3, #0
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2302      	movs	r3, #2
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003216:	2246      	movs	r2, #70	; 0x46
 8003218:	210a      	movs	r1, #10
 800321a:	481b      	ldr	r0, [pc, #108]	; (8003288 <FuncMenu_DrawOutputMenu+0x3b0>)
 800321c:	f00a fc70 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322c:	225a      	movs	r2, #90	; 0x5a
 800322e:	210a      	movs	r1, #10
 8003230:	4816      	ldr	r0, [pc, #88]	; (800328c <FuncMenu_DrawOutputMenu+0x3b4>)
 8003232:	f00a fc65 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003236:	2300      	movs	r3, #0
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	2302      	movs	r3, #2
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003242:	226e      	movs	r2, #110	; 0x6e
 8003244:	210a      	movs	r1, #10
 8003246:	4812      	ldr	r0, [pc, #72]	; (8003290 <FuncMenu_DrawOutputMenu+0x3b8>)
 8003248:	f00a fc5a 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800324c:	2300      	movs	r3, #0
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	2302      	movs	r3, #2
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003258:	2282      	movs	r2, #130	; 0x82
 800325a:	210a      	movs	r1, #10
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <FuncMenu_DrawOutputMenu+0x3bc>)
 800325e:	f00a fc4f 	bl	800db00 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003262:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2296      	movs	r2, #150	; 0x96
 8003270:	210a      	movs	r1, #10
 8003272:	4809      	ldr	r0, [pc, #36]	; (8003298 <FuncMenu_DrawOutputMenu+0x3c0>)
 8003274:	f00a fc44 	bl	800db00 <ILI9341_Draw_Text>
				break;
 8003278:	bf00      	nop
		}
	}
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	08012b20 	.word	0x08012b20
 8003288:	08012b28 	.word	0x08012b28
 800328c:	08012b34 	.word	0x08012b34
 8003290:	08012b3c 	.word	0x08012b3c
 8003294:	08012b48 	.word	0x08012b48
 8003298:	08012b54 	.word	0x08012b54

0800329c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d007      	beq.n	80032bc <GainMenu_DrawMenu+0x20>
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d008      	beq.n	80032c2 <GainMenu_DrawMenu+0x26>
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d000      	beq.n	80032b6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 80032b4:	e008      	b.n	80032c8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80032b6:	f000 f80b 	bl	80032d0 <GainMenu_DrawMainMenu>
			break;
 80032ba:	e005      	b.n	80032c8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80032bc:	f000 f850 	bl	8003360 <GainMenu_DrawSignalMenu>
			break;
 80032c0:	e002      	b.n	80032c8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 80032c2:	f000 f863 	bl	800338c <GainMenu_DrawSyncMenu>
			break;
 80032c6:	bf00      	nop

	}
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	2302      	movs	r3, #2
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2300      	movs	r3, #0
 80032e2:	220a      	movs	r2, #10
 80032e4:	210a      	movs	r1, #10
 80032e6:	481a      	ldr	r0, [pc, #104]	; (8003350 <GainMenu_DrawMainMenu+0x80>)
 80032e8:	f00a fc0a 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032ec:	f7fd fe4a 	bl	8000f84 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2300      	movs	r3, #0
 80032fc:	22d2      	movs	r2, #210	; 0xd2
 80032fe:	2105      	movs	r1, #5
 8003300:	4814      	ldr	r0, [pc, #80]	; (8003354 <GainMenu_DrawMainMenu+0x84>)
 8003302:	f00a fbfd 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003306:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	2302      	movs	r3, #2
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	22d2      	movs	r2, #210	; 0xd2
 8003314:	2161      	movs	r1, #97	; 0x61
 8003316:	4810      	ldr	r0, [pc, #64]	; (8003358 <GainMenu_DrawMainMenu+0x88>)
 8003318:	f00a fbf2 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800331c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2302      	movs	r3, #2
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	22d2      	movs	r2, #210	; 0xd2
 800332a:	21af      	movs	r1, #175	; 0xaf
 800332c:	480b      	ldr	r0, [pc, #44]	; (800335c <GainMenu_DrawMainMenu+0x8c>)
 800332e:	f00a fbe7 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003332:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2302      	movs	r3, #2
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2300      	movs	r3, #0
 800333e:	22d2      	movs	r2, #210	; 0xd2
 8003340:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <GainMenu_DrawMainMenu+0x8c>)
 8003346:	f00a fbdb 	bl	800db00 <ILI9341_Draw_Text>
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	08012b5c 	.word	0x08012b5c
 8003354:	08012b68 	.word	0x08012b68
 8003358:	08012b70 	.word	0x08012b70
 800335c:	08012b78 	.word	0x08012b78

08003360 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	220a      	movs	r2, #10
 8003374:	210a      	movs	r1, #10
 8003376:	4804      	ldr	r0, [pc, #16]	; (8003388 <GainMenu_DrawSignalMenu+0x28>)
 8003378:	f00a fbc2 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800337c:	f7fd fe02 	bl	8000f84 <DM_DisplayFormattedOutput>
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08012b80 	.word	0x08012b80

0800338c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	220a      	movs	r2, #10
 80033a0:	210a      	movs	r1, #10
 80033a2:	4804      	ldr	r0, [pc, #16]	; (80033b4 <GainMenu_DrawSyncMenu+0x28>)
 80033a4:	f00a fbac 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80033a8:	f7fd fdec 	bl	8000f84 <DM_DisplayFormattedOutput>
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	08012b90 	.word	0x08012b90

080033b8 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d007      	beq.n	80033d8 <ToplevelMenu_DrawMenu+0x20>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d008      	beq.n	80033de <ToplevelMenu_DrawMenu+0x26>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d000      	beq.n	80033d2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 80033d0:	e008      	b.n	80033e4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 80033d2:	f000 f80b 	bl	80033ec <ToplevelMenu_DrawMainMenu>
			break;
 80033d6:	e005      	b.n	80033e4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 80033d8:	f000 f848 	bl	800346c <ToplevelMenu_DrawOutputMenu>
			break;
 80033dc:	e002      	b.n	80033e4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 80033de:	f000 f88f 	bl	8003500 <ToplevelMenu_DrawInputMenu>
			break;
 80033e2:	bf00      	nop

	}
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 80033f2:	481a      	ldr	r0, [pc, #104]	; (800345c <ToplevelMenu_DrawMainMenu+0x70>)
 80033f4:	f00b ff20 	bl	800f238 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 80033f8:	f7fd fdc4 	bl	8000f84 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2302      	movs	r3, #2
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2300      	movs	r3, #0
 8003408:	22d2      	movs	r2, #210	; 0xd2
 800340a:	2106      	movs	r1, #6
 800340c:	4814      	ldr	r0, [pc, #80]	; (8003460 <ToplevelMenu_DrawMainMenu+0x74>)
 800340e:	f00a fb77 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003412:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	2302      	movs	r3, #2
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	22d2      	movs	r2, #210	; 0xd2
 8003420:	215d      	movs	r1, #93	; 0x5d
 8003422:	4810      	ldr	r0, [pc, #64]	; (8003464 <ToplevelMenu_DrawMainMenu+0x78>)
 8003424:	f00a fb6c 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003428:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2302      	movs	r3, #2
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	22d2      	movs	r2, #210	; 0xd2
 8003436:	21af      	movs	r1, #175	; 0xaf
 8003438:	480b      	ldr	r0, [pc, #44]	; (8003468 <ToplevelMenu_DrawMainMenu+0x7c>)
 800343a:	f00a fb61 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800343e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2302      	movs	r3, #2
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	22d2      	movs	r2, #210	; 0xd2
 800344c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003450:	4805      	ldr	r0, [pc, #20]	; (8003468 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003452:	f00a fb55 	bl	800db00 <ILI9341_Draw_Text>


}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08012ba0 	.word	0x08012ba0
 8003460:	08012bb4 	.word	0x08012bb4
 8003464:	08012bbc 	.word	0x08012bbc
 8003468:	08012bc4 	.word	0x08012bc4

0800346c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	220a      	movs	r2, #10
 8003480:	210a      	movs	r1, #10
 8003482:	481a      	ldr	r0, [pc, #104]	; (80034ec <ToplevelMenu_DrawOutputMenu+0x80>)
 8003484:	f00a fb3c 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003488:	f7fd fd7c 	bl	8000f84 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800348c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	22d2      	movs	r2, #210	; 0xd2
 800349a:	210d      	movs	r1, #13
 800349c:	4814      	ldr	r0, [pc, #80]	; (80034f0 <ToplevelMenu_DrawOutputMenu+0x84>)
 800349e:	f00a fb2f 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034a2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	22d2      	movs	r2, #210	; 0xd2
 80034b0:	2163      	movs	r1, #99	; 0x63
 80034b2:	4810      	ldr	r0, [pc, #64]	; (80034f4 <ToplevelMenu_DrawOutputMenu+0x88>)
 80034b4:	f00a fb24 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2302      	movs	r3, #2
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	22d2      	movs	r2, #210	; 0xd2
 80034c6:	21b0      	movs	r1, #176	; 0xb0
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <ToplevelMenu_DrawOutputMenu+0x8c>)
 80034ca:	f00a fb19 	bl	800db00 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034ce:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2302      	movs	r3, #2
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	22d2      	movs	r2, #210	; 0xd2
 80034dc:	21f5      	movs	r1, #245	; 0xf5
 80034de:	4807      	ldr	r0, [pc, #28]	; (80034fc <ToplevelMenu_DrawOutputMenu+0x90>)
 80034e0:	f00a fb0e 	bl	800db00 <ILI9341_Draw_Text>
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	08012bcc 	.word	0x08012bcc
 80034f0:	08012bd4 	.word	0x08012bd4
 80034f4:	08012bdc 	.word	0x08012bdc
 80034f8:	08012be4 	.word	0x08012be4
 80034fc:	08012bec 	.word	0x08012bec

08003500 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2302      	movs	r3, #2
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	220a      	movs	r2, #10
 8003514:	210a      	movs	r1, #10
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <ToplevelMenu_DrawInputMenu+0x28>)
 8003518:	f00a faf2 	bl	800db00 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800351c:	f7fd fd32 	bl	8000f84 <DM_DisplayFormattedOutput>
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	08012bf4 	.word	0x08012bf4

0800352c <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <BiasMenu_getStatus+0x14>)
 8003532:	781b      	ldrb	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20001a11 	.word	0x20001a11

08003544 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003548:	480b      	ldr	r0, [pc, #44]	; (8003578 <BiasMenuEntryHandler+0x34>)
 800354a:	f00b fe75 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 800354e:	f7fd feab 	bl	80012a8 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <BiasMenuEntryHandler+0x38>)
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <BiasMenuEntryHandler+0x3c>)
 800355a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003560:	f001 f9f0 	bl	8004944 <BO_GetDcBiasEncoderValue>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <BiasMenuEntryHandler+0x3c>)
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <BiasMenuEntryHandler+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003572:	230e      	movs	r3, #14
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	08012bfc 	.word	0x08012bfc
 800357c:	20001a11 	.word	0x20001a11
 8003580:	40012c00 	.word	0x40012c00
 8003584:	20001a13 	.word	0x20001a13

08003588 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 800358c:	4807      	ldr	r0, [pc, #28]	; (80035ac <BiasMenuInputHandler+0x24>)
 800358e:	f00b fe53 	bl	800f238 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003592:	2001      	movs	r0, #1
 8003594:	f002 f814 	bl	80055c0 <SM_GetEncoderValue>
 8003598:	4603      	mov	r3, r0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f9de 	bl	800495c <BO_ModifyOutput>

	eNewEvent = evIdle;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <BiasMenuInputHandler+0x28>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80035a6:	230e      	movs	r3, #14
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	08012c20 	.word	0x08012c20
 80035b0:	20001a13 	.word	0x20001a13

080035b4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <BiasMenuExitHandler+0x28>)
 80035ba:	f00b fe3d 	bl	800f238 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <BiasMenuExitHandler+0x2c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80035c4:	f7fd fe70 	bl	80012a8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80035c8:	4806      	ldr	r0, [pc, #24]	; (80035e4 <BiasMenuExitHandler+0x30>)
 80035ca:	f00b fe35 	bl	800f238 <puts>
#endif

	eNewEvent = evIdle;
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <BiasMenuExitHandler+0x34>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08012c44 	.word	0x08012c44
 80035e0:	20001a11 	.word	0x20001a11
 80035e4:	08012c68 	.word	0x08012c68
 80035e8:	20001a13 	.word	0x20001a13

080035ec <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

	switch(eNextState)
 80035f0:	4bb8      	ldr	r3, [pc, #736]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b0e      	cmp	r3, #14
 80035f6:	f200 8216 	bhi.w	8003a26 <EM_ProcessEvent+0x43a>
 80035fa:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <EM_ProcessEvent+0x14>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	0800363d 	.word	0x0800363d
 8003604:	0800366f 	.word	0x0800366f
 8003608:	080036f5 	.word	0x080036f5
 800360c:	08003713 	.word	0x08003713
 8003610:	0800375f 	.word	0x0800375f
 8003614:	08003791 	.word	0x08003791
 8003618:	080037c3 	.word	0x080037c3
 800361c:	0800380f 	.word	0x0800380f
 8003620:	08003841 	.word	0x08003841
 8003624:	08003a27 	.word	0x08003a27
 8003628:	08003873 	.word	0x08003873
 800362c:	08003905 	.word	0x08003905
 8003630:	08003937 	.word	0x08003937
 8003634:	08003967 	.word	0x08003967
 8003638:	080039f1 	.word	0x080039f1
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 800363c:	48a6      	ldr	r0, [pc, #664]	; (80038d8 <EM_ProcessEvent+0x2ec>)
 800363e:	f00b fdfb 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003642:	4ba6      	ldr	r3, [pc, #664]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 800364a:	f000 ffbb 	bl	80045c4 <ToplevelOutputMenuEntryHandler>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4ba0      	ldr	r3, [pc, #640]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003654:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003656:	4ba1      	ldr	r3, [pc, #644]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b02      	cmp	r3, #2
 800365c:	f040 81e5 	bne.w	8003a2a <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003660:	f000 ffdc 	bl	800461c <ToplevelInputMenuEntryHandler>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b9a      	ldr	r3, [pc, #616]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800366a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 800366c:	e1dd      	b.n	8003a2a <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 800366e:	489c      	ldr	r0, [pc, #624]	; (80038e0 <EM_ProcessEvent+0x2f4>)
 8003670:	f00b fde2 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003674:	4b99      	ldr	r3, [pc, #612]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b06      	cmp	r3, #6
 800367a:	d105      	bne.n	8003688 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 800367c:	f000 ffb8 	bl	80045f0 <ToplevelOutputMenuExitHandler>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b93      	ldr	r3, [pc, #588]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003686:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003688:	4b94      	ldr	r3, [pc, #592]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d108      	bne.n	80036a2 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003690:	2000      	movs	r0, #0
 8003692:	f000 ff87 	bl	80045a4 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003696:	f000 fd85 	bl	80041a4 <FuncMainMenuEntryHandler>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80036a0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80036a2:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d108      	bne.n	80036bc <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f000 ff7a 	bl	80045a4 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 80036b0:	f000 fb5c 	bl	8003d6c <FreqMainMenuEntryHandler>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b86      	ldr	r3, [pc, #536]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80036bc:	4b87      	ldr	r3, [pc, #540]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d108      	bne.n	80036d6 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f000 ff6d 	bl	80045a4 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 80036ca:	f000 fe6d 	bl	80043a8 <GainMainMenuEntryHandler>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b80      	ldr	r3, [pc, #512]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80036d4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80036d6:	4b81      	ldr	r3, [pc, #516]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b04      	cmp	r3, #4
 80036dc:	f040 81a7 	bne.w	8003a2e <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80036e0:	2000      	movs	r0, #0
 80036e2:	f000 ff5f 	bl	80045a4 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 80036e6:	f7ff ff2d 	bl	8003544 <BiasMenuEntryHandler>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80036f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036f2:	e19c      	b.n	8003a2e <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 80036f4:	487b      	ldr	r0, [pc, #492]	; (80038e4 <EM_ProcessEvent+0x2f8>)
 80036f6:	f00b fd9f 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80036fa:	4b78      	ldr	r3, [pc, #480]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	f040 8197 	bne.w	8003a32 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003704:	f000 ffa0 	bl	8004648 <ToplevelInputMenuExitHandler>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b71      	ldr	r3, [pc, #452]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800370e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003710:	e18f      	b.n	8003a32 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003712:	4875      	ldr	r0, [pc, #468]	; (80038e8 <EM_ProcessEvent+0x2fc>)
 8003714:	f00b fd90 	bl	800f238 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003718:	4b70      	ldr	r3, [pc, #448]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d108      	bne.n	8003732 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 8003720:	f000 fd56 	bl	80041d0 <FuncMainMenuExitHandler>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800372a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800372c:	2002      	movs	r0, #2
 800372e:	f000 ff39 	bl	80045a4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 800373a:	f000 fd65 	bl	8004208 <FuncSignalMenuEntryHandler>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003744:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	f040 8173 	bne.w	8003a36 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003750:	f000 fdbc 	bl	80042cc <FuncSyncMenuEntryHandler>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800375a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800375c:	e16b      	b.n	8003a36 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 800375e:	4863      	ldr	r0, [pc, #396]	; (80038ec <EM_ProcessEvent+0x300>)
 8003760:	f00b fd6a 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b05      	cmp	r3, #5
 800376a:	d105      	bne.n	8003778 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 800376c:	f000 fd82 	bl	8004274 <FuncSignalMenuInputHandler>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003776:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003778:	4b58      	ldr	r3, [pc, #352]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b06      	cmp	r3, #6
 800377e:	f040 815c 	bne.w	8003a3a <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003782:	f000 fd8d 	bl	80042a0 <FuncSignalMenuExitHandler>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800378c:	701a      	strb	r2, [r3, #0]

			}

			break;
 800378e:	e154      	b.n	8003a3a <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003790:	4857      	ldr	r0, [pc, #348]	; (80038f0 <EM_ProcessEvent+0x304>)
 8003792:	f00b fd51 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003796:	4b51      	ldr	r3, [pc, #324]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b05      	cmp	r3, #5
 800379c:	d105      	bne.n	80037aa <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 800379e:	f000 fdcb 	bl	8004338 <FuncSyncMenuInputHandler>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80037a8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80037aa:	4b4c      	ldr	r3, [pc, #304]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	f040 8145 	bne.w	8003a3e <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 80037b4:	f000 fdd6 	bl	8004364 <FuncSyncMenuExitHandler>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80037be:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037c0:	e13d      	b.n	8003a3e <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 80037c2:	484c      	ldr	r0, [pc, #304]	; (80038f4 <EM_ProcessEvent+0x308>)
 80037c4:	f00b fd38 	bl	800f238 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80037c8:	4b44      	ldr	r3, [pc, #272]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b06      	cmp	r3, #6
 80037ce:	d108      	bne.n	80037e2 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 80037d0:	f000 fe00 	bl	80043d4 <GainMainMenuExitHandler>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80037da:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80037dc:	2002      	movs	r0, #2
 80037de:	f000 fee1 	bl	80045a4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 80037ea:	f000 fe0f 	bl	800440c <GainSignalMenuEntryHandler>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80037f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037f6:	4b39      	ldr	r3, [pc, #228]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	f040 8121 	bne.w	8003a42 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003800:	f000 fe64 	bl	80044cc <GainSyncMenuEntryHandler>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800380a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800380c:	e119      	b.n	8003a42 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 800380e:	483a      	ldr	r0, [pc, #232]	; (80038f8 <EM_ProcessEvent+0x30c>)
 8003810:	f00b fd12 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003814:	4b31      	ldr	r3, [pc, #196]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d105      	bne.n	8003828 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 800381c:	f000 fe2a 	bl	8004474 <GainSignalMenuInputHandler>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003826:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003828:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b06      	cmp	r3, #6
 800382e:	f040 810a 	bne.w	8003a46 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003832:	f000 fe35 	bl	80044a0 <GainSignalMenuExitHandler>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800383c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800383e:	e102      	b.n	8003a46 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003840:	482e      	ldr	r0, [pc, #184]	; (80038fc <EM_ProcessEvent+0x310>)
 8003842:	f00b fcf9 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003846:	4b25      	ldr	r3, [pc, #148]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d105      	bne.n	800385a <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 800384e:	f000 fe71 	bl	8004534 <GainSyncMenuInputHandler>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 8003858:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b06      	cmp	r3, #6
 8003860:	f040 80f3 	bne.w	8003a4a <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003864:	f000 fe7c 	bl	8004560 <GainSyncMenuExitHandler>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800386e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003870:	e0eb      	b.n	8003a4a <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003872:	4823      	ldr	r0, [pc, #140]	; (8003900 <EM_ProcessEvent+0x314>)
 8003874:	f00b fce0 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <EM_ProcessEvent+0x2f0>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b06      	cmp	r3, #6
 800387e:	d108      	bne.n	8003892 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003880:	f000 fa8a 	bl	8003d98 <FreqMainMenuExitHandler>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 800388a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800388c:	2002      	movs	r0, #2
 800388e:	f000 fe89 	bl	80045a4 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <EM_ProcessEvent+0x2f0>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 800389a:	f000 fa9f 	bl	8003ddc <FreqPresetMenuEntryHandler>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80038a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d105      	bne.n	80038ba <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80038ae:	f000 faf3 	bl	8003e98 <FreqAdjustMenuEntryHandler>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80038b8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <EM_ProcessEvent+0x2f0>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	f040 80c5 	bne.w	8003a4e <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 80038c4:	f000 f8ea 	bl	8003a9c <FreqSweepMenuEntryHandler>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <EM_ProcessEvent+0x2e8>)
 80038ce:	701a      	strb	r2, [r3, #0]
			}

			break;
 80038d0:	e0bd      	b.n	8003a4e <EM_ProcessEvent+0x462>
 80038d2:	bf00      	nop
 80038d4:	20001a12 	.word	0x20001a12
 80038d8:	08012c80 	.word	0x08012c80
 80038dc:	20001a13 	.word	0x20001a13
 80038e0:	08012c8c 	.word	0x08012c8c
 80038e4:	08012ca8 	.word	0x08012ca8
 80038e8:	08012cc4 	.word	0x08012cc4
 80038ec:	08012cdc 	.word	0x08012cdc
 80038f0:	08012cf4 	.word	0x08012cf4
 80038f4:	08012d0c 	.word	0x08012d0c
 80038f8:	08012d24 	.word	0x08012d24
 80038fc:	08012d3c 	.word	0x08012d3c
 8003900:	08012d54 	.word	0x08012d54

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003904:	4857      	ldr	r0, [pc, #348]	; (8003a64 <EM_ProcessEvent+0x478>)
 8003906:	f00b fc97 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 800390a:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <EM_ProcessEvent+0x47c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d105      	bne.n	800391e <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003912:	f000 fa95 	bl	8003e40 <FreqPresetMenuInputHandler>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <EM_ProcessEvent+0x480>)
 800391c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800391e:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <EM_ProcessEvent+0x47c>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b06      	cmp	r3, #6
 8003924:	f040 8095 	bne.w	8003a52 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003928:	f000 faa0 	bl	8003e6c <FreqPresetMenuExitHandler>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4b4e      	ldr	r3, [pc, #312]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003932:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003934:	e08d      	b.n	8003a52 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003936:	484e      	ldr	r0, [pc, #312]	; (8003a70 <EM_ProcessEvent+0x484>)
 8003938:	f00b fc7e 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <EM_ProcessEvent+0x47c>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d105      	bne.n	8003950 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003944:	f000 faca 	bl	8003edc <FreqAdjustMenuInputHandler>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <EM_ProcessEvent+0x480>)
 800394e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003950:	4b45      	ldr	r3, [pc, #276]	; (8003a68 <EM_ProcessEvent+0x47c>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d17e      	bne.n	8003a56 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003958:	f000 fad2 	bl	8003f00 <FreqAdjustMenuExitHandler>
 800395c:	4603      	mov	r3, r0
 800395e:	461a      	mov	r2, r3
 8003960:	4b42      	ldr	r3, [pc, #264]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003962:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003964:	e077      	b.n	8003a56 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003966:	4843      	ldr	r0, [pc, #268]	; (8003a74 <EM_ProcessEvent+0x488>)
 8003968:	f00b fc66 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <EM_ProcessEvent+0x47c>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003974:	2007      	movs	r0, #7
 8003976:	f000 f8ed 	bl	8003b54 <FreqSweepMenuInputHandler>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003980:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <EM_ProcessEvent+0x47c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d106      	bne.n	8003998 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800398a:	2008      	movs	r0, #8
 800398c:	f000 f8e2 	bl	8003b54 <FreqSweepMenuInputHandler>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003996:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <EM_ProcessEvent+0x47c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d106      	bne.n	80039ae <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80039a0:	2009      	movs	r0, #9
 80039a2:	f000 f8d7 	bl	8003b54 <FreqSweepMenuInputHandler>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <EM_ProcessEvent+0x480>)
 80039ac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <EM_ProcessEvent+0x47c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d106      	bne.n	80039c4 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80039b6:	200a      	movs	r0, #10
 80039b8:	f000 f8cc 	bl	8003b54 <FreqSweepMenuInputHandler>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <EM_ProcessEvent+0x480>)
 80039c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80039c4:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <EM_ProcessEvent+0x47c>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d106      	bne.n	80039da <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80039cc:	200b      	movs	r0, #11
 80039ce:	f000 f8c1 	bl	8003b54 <FreqSweepMenuInputHandler>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <EM_ProcessEvent+0x480>)
 80039d8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <EM_ProcessEvent+0x47c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d13b      	bne.n	8003a5a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 80039e2:	f000 f99f 	bl	8003d24 <FreqSweepMenuExitHandler>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <EM_ProcessEvent+0x480>)
 80039ec:	701a      	strb	r2, [r3, #0]
			}

			break;
 80039ee:	e034      	b.n	8003a5a <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 80039f0:	4821      	ldr	r0, [pc, #132]	; (8003a78 <EM_ProcessEvent+0x48c>)
 80039f2:	f00b fc21 	bl	800f238 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <EM_ProcessEvent+0x47c>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d105      	bne.n	8003a0a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 80039fe:	f7ff fdc3 	bl	8003588 <BiasMenuInputHandler>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003a08:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <EM_ProcessEvent+0x47c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d125      	bne.n	8003a5e <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003a12:	f7ff fdcf 	bl	80035b4 <BiasMenuExitHandler>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <EM_ProcessEvent+0x480>)
 8003a1c:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003a1e:	2002      	movs	r0, #2
 8003a20:	f000 fdc0 	bl	80045a4 <ToplevelMenu_setStatus>
			}

			break;
 8003a24:	e01b      	b.n	8003a5e <EM_ProcessEvent+0x472>

		default:
			break;
 8003a26:	bf00      	nop
 8003a28:	e01a      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a2a:	bf00      	nop
 8003a2c:	e018      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a2e:	bf00      	nop
 8003a30:	e016      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a32:	bf00      	nop
 8003a34:	e014      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a36:	bf00      	nop
 8003a38:	e012      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a3a:	bf00      	nop
 8003a3c:	e010      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a3e:	bf00      	nop
 8003a40:	e00e      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a42:	bf00      	nop
 8003a44:	e00c      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a46:	bf00      	nop
 8003a48:	e00a      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a4a:	bf00      	nop
 8003a4c:	e008      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a4e:	bf00      	nop
 8003a50:	e006      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a52:	bf00      	nop
 8003a54:	e004      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a56:	bf00      	nop
 8003a58:	e002      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <EM_ProcessEvent+0x474>
			break;
 8003a5e:	bf00      	nop
	}

}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08012d6c 	.word	0x08012d6c
 8003a68:	20001a13 	.word	0x20001a13
 8003a6c:	20001a12 	.word	0x20001a12
 8003a70:	08012d84 	.word	0x08012d84
 8003a74:	08012d9c 	.word	0x08012d9c
 8003a78:	08012db4 	.word	0x08012db4

08003a7c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003a86:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <EM_SetNewEvent+0x1c>)
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	7013      	strb	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20001a13 	.word	0x20001a13

08003a9c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003aa0:	4825      	ldr	r0, [pc, #148]	; (8003b38 <FreqSweepMenuEntryHandler+0x9c>)
 8003aa2:	f00b fbc9 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003aa6:	f7fd fbff 	bl	80012a8 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <FreqSweepMenuEntryHandler+0xa0>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <FreqSweepMenuEntryHandler+0xa4>)
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	d008      	beq.n	8003ad8 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <FreqSweepMenuEntryHandler+0xa0>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <FreqSweepMenuEntryHandler+0xa4>)
 8003ad4:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <FreqSweepMenuEntryHandler+0xa4>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003ae2:	eef4 7a47 	vcmp.f32	s15, s14
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	d101      	bne.n	8003af0 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003aec:	f000 fa1e 	bl	8003f2c <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f000 fa75 	bl	8003fe0 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f000 fad2 	bl	80040a0 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003afc:	f000 fb0c 	bl	8004118 <_getCalculatedSweepFrequencyInHertz>
 8003b00:	eef0 7a40 	vmov.f32	s15, s0
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <FreqSweepMenuEntryHandler+0xa8>)
 8003b06:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <FreqSweepMenuEntryHandler+0xac>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003b10:	2009      	movs	r0, #9
 8003b12:	f000 f81f 	bl	8003b54 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <FreqSweepMenuEntryHandler+0xac>)
 8003b18:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <FreqSweepMenuEntryHandler+0xac>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <FreqSweepMenuEntryHandler+0xb0>)
 8003b26:	2204      	movs	r2, #4
 8003b28:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <FreqSweepMenuEntryHandler+0xb4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003b30:	230d      	movs	r3, #13
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	08012dc4 	.word	0x08012dc4
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	20000004 	.word	0x20000004
 8003b44:	20001a30 	.word	0x20001a30
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	20001a16 	.word	0x20001a16
 8003b50:	20001a13 	.word	0x20001a13

08003b54 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003b5e:	4865      	ldr	r0, [pc, #404]	; (8003cf4 <FreqSweepMenuInputHandler+0x1a0>)
 8003b60:	f00b fb6a 	bl	800f238 <puts>
	#endif



	switch(pEvent)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	3b07      	subs	r3, #7
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	f200 80ba 	bhi.w	8003ce2 <FreqSweepMenuInputHandler+0x18e>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <FreqSweepMenuInputHandler+0x20>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003cd3 	.word	0x08003cd3
 8003b80:	08003cdb 	.word	0x08003cdb
 8003b84:	08003be9 	.word	0x08003be9
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003b88:	485b      	ldr	r0, [pc, #364]	; (8003cf8 <FreqSweepMenuInputHandler+0x1a4>)
 8003b8a:	f00b fb55 	bl	800f238 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <FreqSweepMenuInputHandler+0x1a8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <FreqSweepMenuInputHandler+0x1a8>)
 8003b94:	f083 0301 	eor.w	r3, r3, #1
 8003b98:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003b9a:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <FreqSweepMenuInputHandler+0x1a8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <FreqSweepMenuInputHandler+0x1a8>)
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
			break;
 8003ba6:	e09d      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003ba8:	4855      	ldr	r0, [pc, #340]	; (8003d00 <FreqSweepMenuInputHandler+0x1ac>)
 8003baa:	f00b fb45 	bl	800f238 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003bae:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <FreqSweepMenuInputHandler+0x1b0>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <FreqSweepMenuInputHandler+0x1b0>)
 8003bba:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003bbc:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <FreqSweepMenuInputHandler+0x1b0>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d004      	beq.n	8003bce <FreqSweepMenuInputHandler+0x7a>
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d008      	beq.n	8003bda <FreqSweepMenuInputHandler+0x86>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <FreqSweepMenuInputHandler+0x80>
 8003bcc:	e006      	b.n	8003bdc <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 8003bce:	f000 f9ad 	bl	8003f2c <_setSweepModeDown>
					break;
 8003bd2:	e003      	b.n	8003bdc <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8003bd4:	f000 f9da 	bl	8003f8c <_setSweepModeUp>
					break;
 8003bd8:	e000      	b.n	8003bdc <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8003bda:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 8003bdc:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <FreqSweepMenuInputHandler+0x1b4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f9fd 	bl	8003fe0 <_setEncoderControlMode>

			break;
 8003be6:	e07d      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003be8:	4848      	ldr	r0, [pc, #288]	; (8003d0c <FreqSweepMenuInputHandler+0x1b8>)
 8003bea:	f00b fb25 	bl	800f238 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003bee:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <FreqSweepMenuInputHandler+0x1b4>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <FreqSweepMenuInputHandler+0xa8>
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d00b      	beq.n	8003c12 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003bfa:	e073      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f000 fa4f 	bl	80040a0 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003c02:	f000 fa89 	bl	8004118 <_getCalculatedSweepFrequencyInHertz>
 8003c06:	eef0 7a40 	vmov.f32	s15, s0
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <FreqSweepMenuInputHandler+0x1bc>)
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003c10:	e05e      	b.n	8003cd0 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <FreqSweepMenuInputHandler+0x1b0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <FreqSweepMenuInputHandler+0xcc>
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d02a      	beq.n	8003c74 <FreqSweepMenuInputHandler+0x120>
							break;
 8003c1e:	e056      	b.n	8003cce <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8003c20:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d803      	bhi.n	8003c30 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003c28:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c2a:	220d      	movs	r2, #13
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c2e:	e04e      	b.n	8003cce <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <FreqSweepMenuInputHandler+0x1c4>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	dd09      	ble.n	8003c60 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <FreqSweepMenuInputHandler+0x1c4>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c58:	ee17 2a90 	vmov	r2, s15
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c5e:	e036      	b.n	8003cce <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <FreqSweepMenuInputHandler+0x1c8>)
 8003c6e:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003c72:	e02c      	b.n	8003cce <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d904      	bls.n	8003c8a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003c88:	e020      	b.n	8003ccc <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <FreqSweepMenuInputHandler+0x1c8>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d509      	bpl.n	8003cba <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <FreqSweepMenuInputHandler+0x1c8>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb2:	ee17 2a90 	vmov	r2, s15
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003cb8:	e008      	b.n	8003ccc <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <FreqSweepMenuInputHandler+0x1c0>)
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <FreqSweepMenuInputHandler+0x1c4>)
 8003cc8:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003ccc:	bf00      	nop
					break;
 8003cce:	bf00      	nop
			break;
 8003cd0:	e008      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f000 f984 	bl	8003fe0 <_setEncoderControlMode>

			break;
 8003cd8:	e004      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f000 f980 	bl	8003fe0 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8003ce0:	e000      	b.n	8003ce4 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8003ce2:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <FreqSweepMenuInputHandler+0x1cc>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003cea:	230d      	movs	r3, #13
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	08012de8 	.word	0x08012de8
 8003cf8:	08012e14 	.word	0x08012e14
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	08012e2c 	.word	0x08012e2c
 8003d04:	20001a14 	.word	0x20001a14
 8003d08:	20001a15 	.word	0x20001a15
 8003d0c:	08012e44 	.word	0x08012e44
 8003d10:	20001a30 	.word	0x20001a30
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20001a13 	.word	0x20001a13

08003d24 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003d28:	480c      	ldr	r0, [pc, #48]	; (8003d5c <FreqSweepMenuExitHandler+0x38>)
 8003d2a:	f00b fa85 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003d2e:	f7fd fabb 	bl	80012a8 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <FreqSweepMenuExitHandler+0x3c>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <FreqSweepMenuExitHandler+0x3c>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <FreqSweepMenuExitHandler+0x3c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <FreqSweepMenuExitHandler+0x3c>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <FreqSweepMenuExitHandler+0x40>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <FreqSweepMenuExitHandler+0x44>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003d56:	230a      	movs	r3, #10
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08012e5c 	.word	0x08012e5c
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	20001a16 	.word	0x20001a16
 8003d68:	20001a13 	.word	0x20001a13

08003d6c <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003d70:	4806      	ldr	r0, [pc, #24]	; (8003d8c <FreqMainMenuEntryHandler+0x20>)
 8003d72:	f00b fa61 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003d76:	f7fd fa97 	bl	80012a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <FreqMainMenuEntryHandler+0x24>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <FreqMainMenuEntryHandler+0x28>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003d86:	230a      	movs	r3, #10
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	08012e84 	.word	0x08012e84
 8003d90:	20001a16 	.word	0x20001a16
 8003d94:	20001a13 	.word	0x20001a13

08003d98 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003d9c:	480a      	ldr	r0, [pc, #40]	; (8003dc8 <FreqMainMenuExitHandler+0x30>)
 8003d9e:	f00b fa4b 	bl	800f238 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <FreqMainMenuExitHandler+0x34>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <FreqMainMenuExitHandler+0x38>)
 8003daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003db0:	f7fd fa7a 	bl	80012a8 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003db4:	4807      	ldr	r0, [pc, #28]	; (8003dd4 <FreqMainMenuExitHandler+0x3c>)
 8003db6:	f00b fa3f 	bl	800f238 <puts>
	#endif

	eNewEvent = evIdle;
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <FreqMainMenuExitHandler+0x40>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08012ed4 	.word	0x08012ed4
 8003dcc:	20001a16 	.word	0x20001a16
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	08012efc 	.word	0x08012efc
 8003dd8:	20001a13 	.word	0x20001a13

08003ddc <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003de2:	4812      	ldr	r0, [pc, #72]	; (8003e2c <FreqPresetMenuEntryHandler+0x50>)
 8003de4:	f00b fa28 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003de8:	f7fd fa5e 	bl	80012a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <FreqPresetMenuEntryHandler+0x54>)
 8003dee:	2202      	movs	r2, #2
 8003df0:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003df2:	f000 ffb1 	bl	8004d58 <FreqO_GetFPresetObject>
 8003df6:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	791a      	ldrb	r2, [r3, #4]
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <FreqPresetMenuEntryHandler+0x58>)
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003e06:	f000 ffd9 	bl	8004dbc <FreqO_GetFreqPresetEncoderRange>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <FreqPresetMenuEntryHandler+0x58>)
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e12:	e002      	b.n	8003e1a <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <FreqPresetMenuEntryHandler+0x5c>)
 8003e16:	f7fd fa93 	bl	8001340 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <FreqPresetMenuEntryHandler+0x60>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003e20:	230b      	movs	r3, #11
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08012f14 	.word	0x08012f14
 8003e30:	20001a16 	.word	0x20001a16
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	08012f40 	.word	0x08012f40
 8003e3c:	20001a13 	.word	0x20001a13

08003e40 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003e44:	4807      	ldr	r0, [pc, #28]	; (8003e64 <FreqPresetMenuInputHandler+0x24>)
 8003e46:	f00b f9f7 	bl	800f238 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f001 fbb8 	bl	80055c0 <SM_GetEncoderValue>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fe8e 	bl	8004b74 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <FreqPresetMenuInputHandler+0x28>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003e5e:	230b      	movs	r3, #11
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	08012f7c 	.word	0x08012f7c
 8003e68:	20001a13 	.word	0x20001a13

08003e6c <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003e70:	4806      	ldr	r0, [pc, #24]	; (8003e8c <FreqPresetMenuExitHandler+0x20>)
 8003e72:	f00b f9e1 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003e76:	f7fd fa17 	bl	80012a8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <FreqPresetMenuExitHandler+0x24>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <FreqPresetMenuExitHandler+0x28>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003e86:	230a      	movs	r3, #10
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08012fa8 	.word	0x08012fa8
 8003e90:	20001a16 	.word	0x20001a16
 8003e94:	20001a13 	.word	0x20001a13

08003e98 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003e9c:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <FreqAdjustMenuEntryHandler+0x30>)
 8003e9e:	f00b f9cb 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003ea2:	f7fd fa01 	bl	80012a8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <FreqAdjustMenuEntryHandler+0x34>)
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <FreqAdjustMenuEntryHandler+0x38>)
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <FreqAdjustMenuEntryHandler+0x3c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <FreqAdjustMenuEntryHandler+0x3c>)
 8003eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <FreqAdjustMenuEntryHandler+0x40>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003ec2:	230c      	movs	r3, #12
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08012fd4 	.word	0x08012fd4
 8003ecc:	20001a16 	.word	0x20001a16
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	20001a13 	.word	0x20001a13

08003edc <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <FreqAdjustMenuInputHandler+0x1c>)
 8003ee2:	f00b f9a9 	bl	800f238 <puts>
	#endif

	FreqO_AdjustFreq();
 8003ee6:	f000 fe37 	bl	8004b58 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <FreqAdjustMenuInputHandler+0x20>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003ef0:	230c      	movs	r3, #12
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08012de8 	.word	0x08012de8
 8003efc:	20001a13 	.word	0x20001a13

08003f00 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003f04:	4806      	ldr	r0, [pc, #24]	; (8003f20 <FreqAdjustMenuExitHandler+0x20>)
 8003f06:	f00b f997 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8003f0a:	f7fd f9cd 	bl	80012a8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <FreqAdjustMenuExitHandler+0x24>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <FreqAdjustMenuExitHandler+0x28>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003f1a:	230a      	movs	r3, #10
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	08013000 	.word	0x08013000
 8003f24:	20001a16 	.word	0x20001a16
 8003f28:	20001a13 	.word	0x20001a13

08003f2c <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <_setSweepModeDown+0x48>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <_setSweepModeDown+0x48>)
 8003f36:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003f3a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <_setSweepModeDown+0x48>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <_setSweepModeDown+0x48>)
 8003f42:	f043 0310 	orr.w	r3, r3, #16
 8003f46:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <_setSweepModeDown+0x4c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <_setSweepModeDown+0x50>)
 8003f56:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <_setSweepModeDown+0x54>)
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <_setSweepModeDown+0x58>)
 8003f5e:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <_setSweepModeDown+0x5c>)
 8003f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40013400 	.word	0x40013400
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	20000004 	.word	0x20000004
 8003f84:	477fff00 	.word	0x477fff00
 8003f88:	40012c00 	.word	0x40012c00

08003f8c <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <_setSweepModeUp+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <_setSweepModeUp+0x40>)
 8003f96:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003f9a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <_setSweepModeUp+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <_setSweepModeUp+0x40>)
 8003fa2:	f023 0310 	bic.w	r3, r3, #16
 8003fa6:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <_setSweepModeUp+0x44>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <_setSweepModeUp+0x48>)
 8003fb6:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <_setSweepModeUp+0x4c>)
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <_setSweepModeUp+0x50>)
 8003fbe:	601a      	str	r2, [r3, #0]


}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	41500000 	.word	0x41500000

08003fe0 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d038      	beq.n	8004062 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <_setEncoderControlMode+0xa4>)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <_setEncoderControlMode+0xa8>)
 8003ff8:	220d      	movs	r2, #13
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <_setEncoderControlMode+0xa8>)
 8003ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <_setEncoderControlMode+0xac>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <_setEncoderControlMode+0x32>
 800400c:	2b01      	cmp	r3, #1
 800400e:	d014      	beq.n	800403a <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8004010:	e031      	b.n	8004076 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <_setEncoderControlMode+0xa8>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <_setEncoderControlMode+0xb0>)
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	dc00      	bgt.n	8004030 <_setEncoderControlMode+0x50>
				break;
 800402e:	e022      	b.n	8004076 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <_setEncoderControlMode+0xb4>)
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <_setEncoderControlMode+0xa8>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004038:	e01d      	b.n	8004076 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <_setEncoderControlMode+0xa8>)
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <_setEncoderControlMode+0xb8>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d400      	bmi.n	8004058 <_setEncoderControlMode+0x78>
				break;
 8004056:	e00e      	b.n	8004076 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <_setEncoderControlMode+0xb4>)
 800405a:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <_setEncoderControlMode+0xa8>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004060:	e009      	b.n	8004076 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <_setEncoderControlMode+0xa4>)
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <_setEncoderControlMode+0xa8>)
 800406a:	2201      	movs	r2, #1
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <_setEncoderControlMode+0xa8>)
 8004070:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20001a15 	.word	0x20001a15
 8004088:	40012c00 	.word	0x40012c00
 800408c:	20001a14 	.word	0x20001a14
 8004090:	20000004 	.word	0x20000004
 8004094:	40013400 	.word	0x40013400
 8004098:	20000000 	.word	0x20000000
 800409c:	00000000 	.word	0x00000000

080040a0 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d122      	bne.n	80040f6 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa4d 	bl	8000554 <__aeabi_ui2d>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004100 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 80040c2:	ec44 3b10 	vmov	d0, r3, r4
 80040c6:	f00d f88f 	bl	80111e8 <pow>
 80040ca:	ec51 0b10 	vmov	r0, r1, d0
 80040ce:	a30e      	add	r3, pc, #56	; (adr r3, 8004108 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc f902 	bl	80002dc <__adddf3>
 80040d8:	4603      	mov	r3, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	4618      	mov	r0, r3
 80040de:	4621      	mov	r1, r4
 80040e0:	f7fc fd8a 	bl	8000bf8 <__aeabi_d2uiz>
 80040e4:	4603      	mov	r3, r0
 80040e6:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ee:	d002      	beq.n	80040f6 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	bf00      	nop
 8004100:	00000000 	.word	0x00000000
 8004104:	40080000 	.word	0x40080000
 8004108:	00000000 	.word	0x00000000
 800410c:	40d06800 	.word	0x40d06800
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000c00 	.word	0x40000c00

08004118 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <_getCalculatedSweepFrequencyInHertz+0x54>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004130:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004170 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004138:	e011      	b.n	800415e <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <_getCalculatedSweepFrequencyInHertz+0x54>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004156:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004170 <_getCalculatedSweepFrequencyInHertz+0x58>
 800415a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 800415e:	eeb0 0a67 	vmov.f32	s0, s15
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40000c00 	.word	0x40000c00
 8004170:	4d2037a0 	.word	0x4d2037a0

08004174 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <FreqMenu_getStatus+0x14>)
 800417a:	781b      	ldrb	r3, [r3, #0]
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20001a16 	.word	0x20001a16

0800418c <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <FuncMenu_getStatus+0x14>)
 8004192:	781b      	ldrb	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20001a17 	.word	0x20001a17

080041a4 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 80041a8:	4806      	ldr	r0, [pc, #24]	; (80041c4 <FuncMainMenuEntryHandler+0x20>)
 80041aa:	f00b f845 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 80041ae:	f7fd f87b 	bl	80012a8 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <FuncMainMenuEntryHandler+0x24>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <FuncMainMenuEntryHandler+0x28>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80041be:	2303      	movs	r3, #3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0801302c 	.word	0x0801302c
 80041c8:	20001a17 	.word	0x20001a17
 80041cc:	20001a13 	.word	0x20001a13

080041d0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 80041d4:	4808      	ldr	r0, [pc, #32]	; (80041f8 <FuncMainMenuExitHandler+0x28>)
 80041d6:	f00b f82f 	bl	800f238 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <FuncMainMenuExitHandler+0x2c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80041e0:	f7fd f862 	bl	80012a8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80041e4:	4806      	ldr	r0, [pc, #24]	; (8004200 <FuncMainMenuExitHandler+0x30>)
 80041e6:	f00b f827 	bl	800f238 <puts>
#endif

	eNewEvent = evIdle;
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <FuncMainMenuExitHandler+0x34>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	0801307c 	.word	0x0801307c
 80041fc:	20001a17 	.word	0x20001a17
 8004200:	080130a4 	.word	0x080130a4
 8004204:	20001a13 	.word	0x20001a13

08004208 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 800420e:	4814      	ldr	r0, [pc, #80]	; (8004260 <FuncSignalMenuEntryHandler+0x58>)
 8004210:	f00b f812 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 8004214:	f7fd f848 	bl	80012a8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <FuncSignalMenuEntryHandler+0x5c>)
 800421a:	2202      	movs	r2, #2
 800421c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800421e:	2000      	movs	r0, #0
 8004220:	f001 f9b8 	bl	8005594 <SM_GetOutputChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800422a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	785a      	ldrb	r2, [r3, #1]
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <FuncSignalMenuEntryHandler+0x60>)
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800423a:	f000 ff3d 	bl	80050b8 <FuncO_GetFuncPresetEncoderRange>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <FuncSignalMenuEntryHandler+0x60>)
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
 8004246:	e002      	b.n	800424e <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <FuncSignalMenuEntryHandler+0x64>)
 800424a:	f7fd f879 	bl	8001340 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <FuncSignalMenuEntryHandler+0x68>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004254:	2304      	movs	r3, #4
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	080130bc 	.word	0x080130bc
 8004264:	20001a17 	.word	0x20001a17
 8004268:	40012c00 	.word	0x40012c00
 800426c:	080130e8 	.word	0x080130e8
 8004270:	20001a13 	.word	0x20001a13

08004274 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8004278:	4807      	ldr	r0, [pc, #28]	; (8004298 <FuncSignalMenuInputHandler+0x24>)
 800427a:	f00a ffdd 	bl	800f238 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800427e:	2001      	movs	r0, #1
 8004280:	f001 f99e 	bl	80055c0 <SM_GetEncoderValue>
 8004284:	4603      	mov	r3, r0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fdac 	bl	8004de4 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <FuncSignalMenuInputHandler+0x28>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004292:	2304      	movs	r3, #4
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0801311c 	.word	0x0801311c
 800429c:	20001a13 	.word	0x20001a13

080042a0 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 80042a4:	4806      	ldr	r0, [pc, #24]	; (80042c0 <FuncSignalMenuExitHandler+0x20>)
 80042a6:	f00a ffc7 	bl	800f238 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <FuncSignalMenuExitHandler+0x24>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80042b0:	f7fc fffa 	bl	80012a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <FuncSignalMenuExitHandler+0x28>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80042ba:	2303      	movs	r3, #3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08013148 	.word	0x08013148
 80042c4:	20001a17 	.word	0x20001a17
 80042c8:	20001a13 	.word	0x20001a13

080042cc <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 80042d2:	4814      	ldr	r0, [pc, #80]	; (8004324 <FuncSyncMenuEntryHandler+0x58>)
 80042d4:	f00a ffb0 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 80042d8:	f7fc ffe6 	bl	80012a8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <FuncSyncMenuEntryHandler+0x5c>)
 80042de:	2203      	movs	r2, #3
 80042e0:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 80042e2:	2001      	movs	r0, #1
 80042e4:	f001 f956 	bl	8005594 <SM_GetOutputChannel>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80042ee:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	785a      	ldrb	r2, [r3, #1]
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <FuncSyncMenuEntryHandler+0x60>)
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80042fe:	f000 fedb 	bl	80050b8 <FuncO_GetFuncPresetEncoderRange>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <FuncSyncMenuEntryHandler+0x60>)
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c
 800430a:	e002      	b.n	8004312 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 800430c:	4808      	ldr	r0, [pc, #32]	; (8004330 <FuncSyncMenuEntryHandler+0x64>)
 800430e:	f7fd f817 	bl	8001340 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <FuncSyncMenuEntryHandler+0x68>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004318:	2305      	movs	r3, #5
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	08013174 	.word	0x08013174
 8004328:	20001a17 	.word	0x20001a17
 800432c:	40012c00 	.word	0x40012c00
 8004330:	080130e8 	.word	0x080130e8
 8004334:	20001a13 	.word	0x20001a13

08004338 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 800433c:	4807      	ldr	r0, [pc, #28]	; (800435c <FuncSyncMenuInputHandler+0x24>)
 800433e:	f00a ff7b 	bl	800f238 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004342:	2001      	movs	r0, #1
 8004344:	f001 f93c 	bl	80055c0 <SM_GetEncoderValue>
 8004348:	4603      	mov	r3, r0
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fda2 	bl	8004e94 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <FuncSyncMenuInputHandler+0x28>)
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004356:	2305      	movs	r3, #5
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	0801319c 	.word	0x0801319c
 8004360:	20001a13 	.word	0x20001a13

08004364 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8004368:	4806      	ldr	r0, [pc, #24]	; (8004384 <FuncSyncMenuExitHandler+0x20>)
 800436a:	f00a ff65 	bl	800f238 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <FuncSyncMenuExitHandler+0x24>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004374:	f7fc ff98 	bl	80012a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <FuncSyncMenuExitHandler+0x28>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800437e:	2303      	movs	r3, #3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	080131c4 	.word	0x080131c4
 8004388:	20001a17 	.word	0x20001a17
 800438c:	20001a13 	.word	0x20001a13

08004390 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <GainMenu_getStatus+0x14>)
 8004396:	781b      	ldrb	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20001a18 	.word	0x20001a18

080043a8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 80043ac:	4806      	ldr	r0, [pc, #24]	; (80043c8 <GainMainMenuEntryHandler+0x20>)
 80043ae:	f00a ff43 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 80043b2:	f7fc ff79 	bl	80012a8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <GainMainMenuEntryHandler+0x24>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <GainMainMenuEntryHandler+0x28>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80043c2:	2306      	movs	r3, #6
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	080131ec 	.word	0x080131ec
 80043cc:	20001a18 	.word	0x20001a18
 80043d0:	20001a13 	.word	0x20001a13

080043d4 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <GainMainMenuExitHandler+0x28>)
 80043da:	f00a ff2d 	bl	800f238 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <GainMainMenuExitHandler+0x2c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80043e4:	f7fc ff60 	bl	80012a8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80043e8:	4806      	ldr	r0, [pc, #24]	; (8004404 <GainMainMenuExitHandler+0x30>)
 80043ea:	f00a ff25 	bl	800f238 <puts>
#endif

	eNewEvent = evIdle;
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <GainMainMenuExitHandler+0x34>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80043f4:	2301      	movs	r3, #1
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	0801323c 	.word	0x0801323c
 8004400:	20001a18 	.word	0x20001a18
 8004404:	08013264 	.word	0x08013264
 8004408:	20001a13 	.word	0x20001a13

0800440c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8004412:	4813      	ldr	r0, [pc, #76]	; (8004460 <GainSignalMenuEntryHandler+0x54>)
 8004414:	f00a ff10 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 8004418:	f7fc ff46 	bl	80012a8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <GainSignalMenuEntryHandler+0x58>)
 800441e:	2202      	movs	r2, #2
 8004420:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004422:	2000      	movs	r0, #0
 8004424:	f001 f8b6 	bl	8005594 <SM_GetOutputChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800442e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8b1a      	ldrh	r2, [r3, #24]
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <GainSignalMenuEntryHandler+0x5c>)
 800443c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <GainSignalMenuEntryHandler+0x5c>)
 8004440:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
 8004446:	e002      	b.n	800444e <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004448:	4808      	ldr	r0, [pc, #32]	; (800446c <GainSignalMenuEntryHandler+0x60>)
 800444a:	f7fc ff79 	bl	8001340 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800444e:	4b08      	ldr	r3, [pc, #32]	; (8004470 <GainSignalMenuEntryHandler+0x64>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004454:	2307      	movs	r3, #7
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0801327c 	.word	0x0801327c
 8004464:	20001a18 	.word	0x20001a18
 8004468:	40012c00 	.word	0x40012c00
 800446c:	080132a8 	.word	0x080132a8
 8004470:	20001a13 	.word	0x20001a13

08004474 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8004478:	4807      	ldr	r0, [pc, #28]	; (8004498 <GainSignalMenuInputHandler+0x24>)
 800447a:	f00a fedd 	bl	800f238 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800447e:	2001      	movs	r0, #1
 8004480:	f001 f89e 	bl	80055c0 <SM_GetEncoderValue>
 8004484:	4603      	mov	r3, r0
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fa78 	bl	800597c <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <GainSignalMenuInputHandler+0x28>)
 800448e:	2203      	movs	r2, #3
 8004490:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004492:	2307      	movs	r3, #7
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	080132e0 	.word	0x080132e0
 800449c:	20001a13 	.word	0x20001a13

080044a0 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 80044a4:	4806      	ldr	r0, [pc, #24]	; (80044c0 <GainSignalMenuExitHandler+0x20>)
 80044a6:	f00a fec7 	bl	800f238 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <GainSignalMenuExitHandler+0x24>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80044b0:	f7fc fefa 	bl	80012a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <GainSignalMenuExitHandler+0x28>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80044ba:	2306      	movs	r3, #6
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	0801330c 	.word	0x0801330c
 80044c4:	20001a18 	.word	0x20001a18
 80044c8:	20001a13 	.word	0x20001a13

080044cc <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 80044d2:	4813      	ldr	r0, [pc, #76]	; (8004520 <GainSyncMenuEntryHandler+0x54>)
 80044d4:	f00a feb0 	bl	800f238 <puts>
#endif

	DM_RefreshScreen();
 80044d8:	f7fc fee6 	bl	80012a8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <GainSyncMenuEntryHandler+0x58>)
 80044de:	2203      	movs	r2, #3
 80044e0:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 80044e2:	2001      	movs	r0, #1
 80044e4:	f001 f856 	bl	8005594 <SM_GetOutputChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80044ee:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8b1a      	ldrh	r2, [r3, #24]
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <GainSyncMenuEntryHandler+0x5c>)
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <GainSyncMenuEntryHandler+0x5c>)
 8004500:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c
 8004506:	e002      	b.n	800450e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <GainSyncMenuEntryHandler+0x60>)
 800450a:	f7fc ff19 	bl	8001340 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <GainSyncMenuEntryHandler+0x64>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004514:	2308      	movs	r3, #8
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	08013338 	.word	0x08013338
 8004524:	20001a18 	.word	0x20001a18
 8004528:	40012c00 	.word	0x40012c00
 800452c:	080132a8 	.word	0x080132a8
 8004530:	20001a13 	.word	0x20001a13

08004534 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004538:	4807      	ldr	r0, [pc, #28]	; (8004558 <GainSyncMenuInputHandler+0x24>)
 800453a:	f00a fe7d 	bl	800f238 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800453e:	2001      	movs	r0, #1
 8004540:	f001 f83e 	bl	80055c0 <SM_GetEncoderValue>
 8004544:	4603      	mov	r3, r0
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fec2 	bl	80062d0 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <GainSyncMenuInputHandler+0x28>)
 800454e:	2203      	movs	r2, #3
 8004550:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004552:	2308      	movs	r3, #8
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08013360 	.word	0x08013360
 800455c:	20001a13 	.word	0x20001a13

08004560 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 8004564:	4806      	ldr	r0, [pc, #24]	; (8004580 <GainSyncMenuExitHandler+0x20>)
 8004566:	f00a fe67 	bl	800f238 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <GainSyncMenuExitHandler+0x24>)
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004570:	f7fc fe9a 	bl	80012a8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <GainSyncMenuExitHandler+0x28>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800457a:	2306      	movs	r3, #6
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	08013388 	.word	0x08013388
 8004584:	20001a18 	.word	0x20001a18
 8004588:	20001a13 	.word	0x20001a13

0800458c <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <ToplevelMenu_getStatus+0x14>)
 8004592:	781b      	ldrb	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000008 	.word	0x20000008

080045a4 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 80045ae:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <ToplevelMenu_setStatus+0x1c>)
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	7013      	strb	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000008 	.word	0x20000008

080045c4 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 80045c8:	4806      	ldr	r0, [pc, #24]	; (80045e4 <ToplevelOutputMenuEntryHandler+0x20>)
 80045ca:	f00a fe35 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 80045ce:	f7fc fe6b 	bl	80012a8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <ToplevelOutputMenuEntryHandler+0x24>)
 80045d4:	2202      	movs	r2, #2
 80045d6:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <ToplevelOutputMenuEntryHandler+0x28>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	0801344c 	.word	0x0801344c
 80045e8:	20000008 	.word	0x20000008
 80045ec:	20001a13 	.word	0x20001a13

080045f0 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 80045f4:	4806      	ldr	r0, [pc, #24]	; (8004610 <ToplevelOutputMenuExitHandler+0x20>)
 80045f6:	f00a fe1f 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 80045fa:	f7fc fe55 	bl	80012a8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <ToplevelOutputMenuExitHandler+0x24>)
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <ToplevelOutputMenuExitHandler+0x28>)
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}
 8004610:	080134ac 	.word	0x080134ac
 8004614:	20000008 	.word	0x20000008
 8004618:	20001a13 	.word	0x20001a13

0800461c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004620:	4806      	ldr	r0, [pc, #24]	; (800463c <ToplevelInputMenuEntryHandler+0x20>)
 8004622:	f00a fe09 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8004626:	f7fc fe3f 	bl	80012a8 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <ToplevelInputMenuEntryHandler+0x24>)
 800462c:	2203      	movs	r2, #3
 800462e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <ToplevelInputMenuEntryHandler+0x28>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004636:	2302      	movs	r3, #2
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	080134dc 	.word	0x080134dc
 8004640:	20000008 	.word	0x20000008
 8004644:	20001a13 	.word	0x20001a13

08004648 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 800464c:	4806      	ldr	r0, [pc, #24]	; (8004668 <ToplevelInputMenuExitHandler+0x20>)
 800464e:	f00a fdf3 	bl	800f238 <puts>
	#endif

	DM_RefreshScreen();
 8004652:	f7fc fe29 	bl	80012a8 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <ToplevelInputMenuExitHandler+0x24>)
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <ToplevelInputMenuExitHandler+0x28>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	0801353c 	.word	0x0801353c
 800466c:	20000008 	.word	0x20000008
 8004670:	20001a13 	.word	0x20001a13

08004674 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4013      	ands	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d101      	bne.n	800468e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40010400 	.word	0x40010400

080046a0 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <IM_Init+0x1c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <IM_Init+0x1c>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6013      	str	r3, [r2, #0]
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40014400 	.word	0x40014400

080046c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80046c4:	4b26      	ldr	r3, [pc, #152]	; (8004760 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d11c      	bne.n	800470a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	db09      	blt.n	8004700 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80046ec:	4b1f      	ldr	r3, [pc, #124]	; (800476c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80046ee:	edd3 7a00 	vldr	s15, [r3]
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80046f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f8:	ee17 2a90 	vmov	r2, s15
 80046fc:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80046fe:	e029      	b.n	8004754 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	3201      	adds	r2, #1
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004708:	e024      	b.n	8004754 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d104      	bne.n	800471c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800471a:	e01b      	b.n	8004754 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d809      	bhi.n	800474c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800474a:	e003      	b.n	8004754 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	3a01      	subs	r2, #1
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40013400 	.word	0x40013400
 8004768:	20000004 	.word	0x20000004
 800476c:	20000000 	.word	0x20000000

08004770 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <IM_BTN1_EXTI14_Handler+0x44>)
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <IM_BTN1_EXTI14_Handler+0x48>)
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004788:	dd0c      	ble.n	80047a4 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800478a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800478e:	f7ff ff71 	bl	8004674 <LL_EXTI_IsActiveFlag_0_31>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004798:	2001      	movs	r0, #1
 800479a:	f7ff f96f 	bl	8003a7c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800479e:	4807      	ldr	r0, [pc, #28]	; (80047bc <IM_BTN1_EXTI14_Handler+0x4c>)
 80047a0:	f00a fd4a 	bl	800f238 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <IM_BTN1_EXTI14_Handler+0x48>)
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	8013      	strh	r3, [r2, #0]


}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40014400 	.word	0x40014400
 80047b8:	20001a1a 	.word	0x20001a1a
 80047bc:	08013568 	.word	0x08013568

080047c0 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <IM_BTN2_EXTI15_Handler+0x44>)
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <IM_BTN2_EXTI15_Handler+0x48>)
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d8:	dd0c      	ble.n	80047f4 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80047da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047de:	f7ff ff49 	bl	8004674 <LL_EXTI_IsActiveFlag_0_31>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80047e8:	2003      	movs	r0, #3
 80047ea:	f7ff f947 	bl	8003a7c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80047ee:	4807      	ldr	r0, [pc, #28]	; (800480c <IM_BTN2_EXTI15_Handler+0x4c>)
 80047f0:	f00a fd22 	bl	800f238 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <IM_BTN2_EXTI15_Handler+0x48>)
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	8013      	strh	r3, [r2, #0]


}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40014400 	.word	0x40014400
 8004808:	20001a1c 	.word	0x20001a1c
 800480c:	08013580 	.word	0x08013580

08004810 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <IM_BTN3_EXTI0_Handler+0x40>)
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <IM_BTN3_EXTI0_Handler+0x44>)
 8004820:	8812      	ldrh	r2, [r2, #0]
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	dd0b      	ble.n	8004842 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800482a:	2001      	movs	r0, #1
 800482c:	f7ff ff22 	bl	8004674 <LL_EXTI_IsActiveFlag_0_31>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004836:	2004      	movs	r0, #4
 8004838:	f7ff f920 	bl	8003a7c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800483c:	4806      	ldr	r0, [pc, #24]	; (8004858 <IM_BTN3_EXTI0_Handler+0x48>)
 800483e:	f00a fcfb 	bl	800f238 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004842:	4a04      	ldr	r2, [pc, #16]	; (8004854 <IM_BTN3_EXTI0_Handler+0x44>)
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	8013      	strh	r3, [r2, #0]


}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40014400 	.word	0x40014400
 8004854:	20001a1e 	.word	0x20001a1e
 8004858:	0801359c 	.word	0x0801359c

0800485c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004862:	4b0e      	ldr	r3, [pc, #56]	; (800489c <IM_BTN4_EXTI1_Handler+0x40>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4a0d      	ldr	r2, [pc, #52]	; (80048a0 <IM_BTN4_EXTI1_Handler+0x44>)
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004874:	dd0b      	ble.n	800488e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004876:	2002      	movs	r0, #2
 8004878:	f7ff fefc 	bl	8004674 <LL_EXTI_IsActiveFlag_0_31>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004882:	2002      	movs	r0, #2
 8004884:	f7ff f8fa 	bl	8003a7c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004888:	4806      	ldr	r0, [pc, #24]	; (80048a4 <IM_BTN4_EXTI1_Handler+0x48>)
 800488a:	f00a fcd5 	bl	800f238 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <IM_BTN4_EXTI1_Handler+0x44>)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	8013      	strh	r3, [r2, #0]


}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40014400 	.word	0x40014400
 80048a0:	20001a20 	.word	0x20001a20
 80048a4:	080135b4 	.word	0x080135b4

080048a8 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <IM_ENC_EXTI2_Handler+0x40>)
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <IM_ENC_EXTI2_Handler+0x44>)
 80048b8:	8812      	ldrh	r2, [r2, #0]
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c0:	dd0b      	ble.n	80048da <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80048c2:	2004      	movs	r0, #4
 80048c4:	f7ff fed6 	bl	8004674 <LL_EXTI_IsActiveFlag_0_31>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80048ce:	2006      	movs	r0, #6
 80048d0:	f7ff f8d4 	bl	8003a7c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80048d4:	4806      	ldr	r0, [pc, #24]	; (80048f0 <IM_ENC_EXTI2_Handler+0x48>)
 80048d6:	f00a fcaf 	bl	800f238 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <IM_ENC_EXTI2_Handler+0x44>)
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	8013      	strh	r3, [r2, #0]


}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40014400 	.word	0x40014400
 80048ec:	20001a22 	.word	0x20001a22
 80048f0:	080135cc 	.word	0x080135cc

080048f4 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <IM_ENC_DIRF_Handler+0x30>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004904:	d10b      	bne.n	800491e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004906:	2005      	movs	r0, #5
 8004908:	f7ff f8b8 	bl	8003a7c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 800490c:	4806      	ldr	r0, [pc, #24]	; (8004928 <IM_ENC_DIRF_Handler+0x34>)
 800490e:	f00a fc93 	bl	800f238 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <IM_ENC_DIRF_Handler+0x30>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	4a03      	ldr	r2, [pc, #12]	; (8004924 <IM_ENC_DIRF_Handler+0x30>)
 8004918:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800491c:	6113      	str	r3, [r2, #16]

	}
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	080135e8 	.word	0x080135e8

0800492c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <BO_GetBiasPolarity+0x14>)
 8004932:	781b      	ldrb	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000009 	.word	0x20000009

08004944 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <BO_GetDcBiasEncoderValue+0x14>)
 800494a:	881b      	ldrh	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000a 	.word	0x2000000a

0800495c <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004966:	2000      	movs	r0, #0
 8004968:	f000 fe2a 	bl	80055c0 <SM_GetEncoderValue>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <BO_ModifyOutput+0x84>)
 8004972:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800497a:	d214      	bcs.n	80049a6 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <BO_ModifyOutput+0x88>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004990:	2200      	movs	r2, #0
 8004992:	2110      	movs	r1, #16
 8004994:	4814      	ldr	r0, [pc, #80]	; (80049e8 <BO_ModifyOutput+0x8c>)
 8004996:	f005 fc89 	bl	800a2ac <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800499a:	2201      	movs	r2, #1
 800499c:	2108      	movs	r1, #8
 800499e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a2:	f006 fb63 	bl	800b06c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80049ac:	d314      	bcc.n	80049d8 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <BO_ModifyOutput+0x88>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80049c2:	2200      	movs	r2, #0
 80049c4:	2110      	movs	r1, #16
 80049c6:	4808      	ldr	r0, [pc, #32]	; (80049e8 <BO_ModifyOutput+0x8c>)
 80049c8:	f005 fc70 	bl	800a2ac <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80049cc:	2200      	movs	r2, #0
 80049ce:	2108      	movs	r1, #8
 80049d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049d4:	f006 fb4a 	bl	800b06c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	2000000a 	.word	0x2000000a
 80049e4:	20000009 	.word	0x20000009
 80049e8:	20002110 	.word	0x20002110

080049ec <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80049f0:	2110      	movs	r1, #16
 80049f2:	4803      	ldr	r0, [pc, #12]	; (8004a00 <BO_GetOutputBias+0x14>)
 80049f4:	f005 fca0 	bl	800a338 <HAL_DAC_GetValue>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20002110 	.word	0x20002110

08004a04 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	e06b      	b.n	8004ae8 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004a10:	493a      	ldr	r1, [pc, #232]	; (8004afc <DT_InitRegister+0xf8>)
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3308      	adds	r3, #8
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d129      	bne.n	8004a7a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004a26:	4935      	ldr	r1, [pc, #212]	; (8004afc <DT_InitRegister+0xf8>)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a31      	ldr	r2, [pc, #196]	; (8004b00 <DT_InitRegister+0xfc>)
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a46:	492d      	ldr	r1, [pc, #180]	; (8004afc <DT_InitRegister+0xf8>)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3310      	adds	r3, #16
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a62:	ee17 0a90 	vmov	r0, s15
 8004a66:	4925      	ldr	r1, [pc, #148]	; (8004afc <DT_InitRegister+0xf8>)
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	330c      	adds	r3, #12
 8004a76:	6018      	str	r0, [r3, #0]
 8004a78:	e033      	b.n	8004ae2 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8004a7a:	4920      	ldr	r1, [pc, #128]	; (8004afc <DT_InitRegister+0xf8>)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3304      	adds	r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <DT_InitRegister+0xfc>)
 8004a8e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a92:	481a      	ldr	r0, [pc, #104]	; (8004afc <DT_InitRegister+0xf8>)
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4403      	add	r3, r0
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ab0:	4912      	ldr	r1, [pc, #72]	; (8004afc <DT_InitRegister+0xf8>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	3310      	adds	r3, #16
 8004ac0:	edd3 7a00 	vldr	s15, [r3]
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	490a      	ldr	r1, [pc, #40]	; (8004afc <DT_InitRegister+0xf8>)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b0d      	cmp	r3, #13
 8004aec:	dd90      	ble.n	8004a10 <DT_InitRegister+0xc>
	}
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	2000000c 	.word	0x2000000c
 8004b00:	00155cc0 	.word	0x00155cc0

08004b04 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e016      	b.n	8004b40 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004b12:	4910      	ldr	r1, [pc, #64]	; (8004b54 <DT_GetRegisterByEnum+0x50>)
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3304      	adds	r3, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d107      	bne.n	8004b3a <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <DT_GetRegisterByEnum+0x50>)
 8004b36:	4413      	add	r3, r2
 8004b38:	e006      	b.n	8004b48 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b0d      	cmp	r3, #13
 8004b44:	dde5      	ble.n	8004b12 <DT_GetRegisterByEnum+0xe>

	return 0;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	2000000c 	.word	0x2000000c

08004b58 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f000 fd2f 	bl	80055c0 <SM_GetEncoderValue>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <FreqO_AdjustFreq+0x18>)
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40013400 	.word	0x40013400

08004b74 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b38      	cmp	r3, #56	; 0x38
 8004b82:	f200 80b4 	bhi.w	8004cee <FreqO_ModifyOutput+0x17a>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <FreqO_ModifyOutput+0x18>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004c71 	.word	0x08004c71
 8004b90:	08004c71 	.word	0x08004c71
 8004b94:	08004c71 	.word	0x08004c71
 8004b98:	08004c71 	.word	0x08004c71
 8004b9c:	08004c79 	.word	0x08004c79
 8004ba0:	08004c79 	.word	0x08004c79
 8004ba4:	08004c79 	.word	0x08004c79
 8004ba8:	08004c79 	.word	0x08004c79
 8004bac:	08004c81 	.word	0x08004c81
 8004bb0:	08004c81 	.word	0x08004c81
 8004bb4:	08004c81 	.word	0x08004c81
 8004bb8:	08004c81 	.word	0x08004c81
 8004bbc:	08004c89 	.word	0x08004c89
 8004bc0:	08004c89 	.word	0x08004c89
 8004bc4:	08004c89 	.word	0x08004c89
 8004bc8:	08004c89 	.word	0x08004c89
 8004bcc:	08004c91 	.word	0x08004c91
 8004bd0:	08004c91 	.word	0x08004c91
 8004bd4:	08004c91 	.word	0x08004c91
 8004bd8:	08004c91 	.word	0x08004c91
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	08004c99 	.word	0x08004c99
 8004be4:	08004c99 	.word	0x08004c99
 8004be8:	08004c99 	.word	0x08004c99
 8004bec:	08004ca3 	.word	0x08004ca3
 8004bf0:	08004ca3 	.word	0x08004ca3
 8004bf4:	08004ca3 	.word	0x08004ca3
 8004bf8:	08004ca3 	.word	0x08004ca3
 8004bfc:	08004cad 	.word	0x08004cad
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004cad 	.word	0x08004cad
 8004c08:	08004cef 	.word	0x08004cef
 8004c0c:	08004cad 	.word	0x08004cad
 8004c10:	08004cb7 	.word	0x08004cb7
 8004c14:	08004cb7 	.word	0x08004cb7
 8004c18:	08004cb7 	.word	0x08004cb7
 8004c1c:	08004cb7 	.word	0x08004cb7
 8004c20:	08004cc1 	.word	0x08004cc1
 8004c24:	08004cc1 	.word	0x08004cc1
 8004c28:	08004cc1 	.word	0x08004cc1
 8004c2c:	08004cc1 	.word	0x08004cc1
 8004c30:	08004ccb 	.word	0x08004ccb
 8004c34:	08004ccb 	.word	0x08004ccb
 8004c38:	08004ccb 	.word	0x08004ccb
 8004c3c:	08004ccb 	.word	0x08004ccb
 8004c40:	08004cd5 	.word	0x08004cd5
 8004c44:	08004cd5 	.word	0x08004cd5
 8004c48:	08004cd5 	.word	0x08004cd5
 8004c4c:	08004cd5 	.word	0x08004cd5
 8004c50:	08004cdf 	.word	0x08004cdf
 8004c54:	08004cdf 	.word	0x08004cdf
 8004c58:	08004cdf 	.word	0x08004cdf
 8004c5c:	08004cdf 	.word	0x08004cdf
 8004c60:	08004ce7 	.word	0x08004ce7
 8004c64:	08004ce7 	.word	0x08004ce7
 8004c68:	08004ce7 	.word	0x08004ce7
 8004c6c:	08004ce7 	.word	0x08004ce7
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004c70:	2001      	movs	r0, #1
 8004c72:	f000 f845 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004c76:	e03a      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004c78:	200a      	movs	r0, #10
 8004c7a:	f000 f841 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004c7e:	e036      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004c80:	2032      	movs	r0, #50	; 0x32
 8004c82:	f000 f83d 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004c86:	e032      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004c88:	2064      	movs	r0, #100	; 0x64
 8004c8a:	f000 f839 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004c8e:	e02e      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004c90:	20fa      	movs	r0, #250	; 0xfa
 8004c92:	f000 f835 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004c96:	e02a      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c9c:	f000 f830 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004ca0:	e025      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004ca2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004ca6:	f000 f82b 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004caa:	e020      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cb0:	f000 f826 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cb4:	e01b      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004cb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8004cba:	f000 f821 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cbe:	e016      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004cc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8004cc4:	f000 f81c 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cc8:	e011      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004cca:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004cce:	f000 f817 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cd2:	e00c      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004cd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cd8:	f000 f812 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cdc:	e007      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004cde:	4806      	ldr	r0, [pc, #24]	; (8004cf8 <FreqO_ModifyOutput+0x184>)
 8004ce0:	f000 f80e 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004ce4:	e003      	b.n	8004cee <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004ce6:	4805      	ldr	r0, [pc, #20]	; (8004cfc <FreqO_ModifyOutput+0x188>)
 8004ce8:	f000 f80a 	bl	8004d00 <FreqO_ApplyPreset>
			break;
 8004cec:	bf00      	nop
	}

}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	000124f8 	.word	0x000124f8
 8004cfc:	000186a0 	.word	0x000186a0

08004d00 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fefb 	bl	8004b04 <DT_GetRegisterByEnum>
 8004d0e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d015      	beq.n	8004d42 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004d16:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <FreqO_ApplyPreset+0x4c>)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004d1e:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <FreqO_ApplyPreset+0x4c>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f822 	bl	8004d70 <FreqO_FindFPresetObject>
 8004d2c:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004d34:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <FreqO_ApplyPreset+0x50>)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004d3a:	e002      	b.n	8004d42 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004d3c:	4805      	ldr	r0, [pc, #20]	; (8004d54 <FreqO_ApplyPreset+0x54>)
 8004d3e:	f7fc faff 	bl	8001340 <DM_SetErrorDebugMsg>
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	20000198 	.word	0x20000198
 8004d54:	08013600 	.word	0x08013600

08004d58 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	return freq_profile;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <FreqO_GetFPresetObject+0x14>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000198 	.word	0x20000198

08004d70 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e00e      	b.n	8004d9c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <FreqO_FindFPresetObject+0x44>)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <FreqO_FindFPresetObject+0x44>)
 8004d92:	4413      	add	r3, r2
 8004d94:	e009      	b.n	8004daa <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b0d      	cmp	r3, #13
 8004da0:	dded      	ble.n	8004d7e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004da2:	4805      	ldr	r0, [pc, #20]	; (8004db8 <FreqO_FindFPresetObject+0x48>)
 8004da4:	f7fc facc 	bl	8001340 <DM_SetErrorDebugMsg>
	return 0;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000128 	.word	0x20000128
 8004db8:	08013628 	.word	0x08013628

08004dbc <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000124 	.word	0x20000124

08004dd4 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b17      	cmp	r3, #23
 8004df2:	d84b      	bhi.n	8004e8c <FuncO_ModifySignalOutput+0xa8>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <FuncO_ModifySignalOutput+0x18>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e5d 	.word	0x08004e5d
 8004e00:	08004e5d 	.word	0x08004e5d
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e65 	.word	0x08004e65
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004e6d 	.word	0x08004e6d
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e6d 	.word	0x08004e6d
 8004e28:	08004e75 	.word	0x08004e75
 8004e2c:	08004e75 	.word	0x08004e75
 8004e30:	08004e75 	.word	0x08004e75
 8004e34:	08004e75 	.word	0x08004e75
 8004e38:	08004e7d 	.word	0x08004e7d
 8004e3c:	08004e7d 	.word	0x08004e7d
 8004e40:	08004e7d 	.word	0x08004e7d
 8004e44:	08004e7d 	.word	0x08004e7d
 8004e48:	08004e85 	.word	0x08004e85
 8004e4c:	08004e85 	.word	0x08004e85
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e85 	.word	0x08004e85
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f000 f871 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e62:	e013      	b.n	8004e8c <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f000 f86d 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e6a:	e00f      	b.n	8004e8c <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f000 f869 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e72:	e00b      	b.n	8004e8c <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004e74:	2003      	movs	r0, #3
 8004e76:	f000 f865 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e7a:	e007      	b.n	8004e8c <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004e7c:	2004      	movs	r0, #4
 8004e7e:	f000 f861 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e82:	e003      	b.n	8004e8c <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004e84:	2005      	movs	r0, #5
 8004e86:	f000 f85d 	bl	8004f44 <FuncO_ApplyPresetToSignal>
			break;
 8004e8a:	bf00      	nop

	}
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b17      	cmp	r3, #23
 8004ea2:	d84b      	bhi.n	8004f3c <FuncO_ModifySyncOutput+0xa8>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <FuncO_ModifySyncOutput+0x18>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004f0d 	.word	0x08004f0d
 8004eb0:	08004f0d 	.word	0x08004f0d
 8004eb4:	08004f0d 	.word	0x08004f0d
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004f15 	.word	0x08004f15
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004f1d 	.word	0x08004f1d
 8004ed4:	08004f1d 	.word	0x08004f1d
 8004ed8:	08004f25 	.word	0x08004f25
 8004edc:	08004f25 	.word	0x08004f25
 8004ee0:	08004f25 	.word	0x08004f25
 8004ee4:	08004f25 	.word	0x08004f25
 8004ee8:	08004f2d 	.word	0x08004f2d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f35 	.word	0x08004f35
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f35 	.word	0x08004f35
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f000 f873 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f12:	e013      	b.n	8004f3c <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8004f14:	2001      	movs	r0, #1
 8004f16:	f000 f86f 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f1a:	e00f      	b.n	8004f3c <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004f1c:	2002      	movs	r0, #2
 8004f1e:	f000 f86b 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f22:	e00b      	b.n	8004f3c <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8004f24:	2003      	movs	r0, #3
 8004f26:	f000 f867 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f2a:	e007      	b.n	8004f3c <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004f2c:	2004      	movs	r0, #4
 8004f2e:	f000 f863 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f32:	e003      	b.n	8004f3c <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8004f34:	2005      	movs	r0, #5
 8004f36:	f000 f85f 	bl	8004ff8 <FuncO_ApplyPresetToSync>
			break;
 8004f3a:	bf00      	nop

	}
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004f4e:	79fc      	ldrb	r4, [r7, #7]
 8004f50:	2000      	movs	r0, #0
 8004f52:	f000 fb1f 	bl	8005594 <SM_GetOutputChannel>
 8004f56:	4601      	mov	r1, r0
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <FuncO_ApplyPresetToSignal+0xa4>)
 8004f5a:	00e3      	lsls	r3, r4, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004f62:	2000      	movs	r0, #0
 8004f64:	f000 fb16 	bl	8005594 <SM_GetOutputChannel>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fba9 	bl	80056cc <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004f7a:	79fc      	ldrb	r4, [r7, #7]
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f000 fb09 	bl	8005594 <SM_GetOutputChannel>
 8004f82:	4601      	mov	r1, r0
 8004f84:	00e3      	lsls	r3, r4, #3
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <FuncO_ApplyPresetToSignal+0xa4>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8004f8e:	4817      	ldr	r0, [pc, #92]	; (8004fec <FuncO_ApplyPresetToSignal+0xa8>)
 8004f90:	f007 f994 	bl	800c2bc <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004f94:	2100      	movs	r1, #0
 8004f96:	4816      	ldr	r0, [pc, #88]	; (8004ff0 <FuncO_ApplyPresetToSignal+0xac>)
 8004f98:	f005 f932 	bl	800a200 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f000 faf9 	bl	8005594 <SM_GetOutputChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f103 0208 	add.w	r2, r3, #8
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2378      	movs	r3, #120	; 0x78
 8004fae:	2100      	movs	r1, #0
 8004fb0:	480f      	ldr	r0, [pc, #60]	; (8004ff0 <FuncO_ApplyPresetToSignal+0xac>)
 8004fb2:	f005 f863 	bl	800a07c <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	480e      	ldr	r0, [pc, #56]	; (8004ff4 <FuncO_ApplyPresetToSignal+0xb0>)
 8004fba:	f005 f921 	bl	800a200 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f000 fae8 	bl	8005594 <SM_GetOutputChannel>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f103 0208 	add.w	r2, r3, #8
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2378      	movs	r3, #120	; 0x78
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4808      	ldr	r0, [pc, #32]	; (8004ff4 <FuncO_ApplyPresetToSignal+0xb0>)
 8004fd4:	f005 f852 	bl	800a07c <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004fd8:	4804      	ldr	r0, [pc, #16]	; (8004fec <FuncO_ApplyPresetToSignal+0xa8>)
 8004fda:	f007 f941 	bl	800c260 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd90      	pop	{r4, r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200001a0 	.word	0x200001a0
 8004fec:	20002248 	.word	0x20002248
 8004ff0:	20002110 	.word	0x20002110
 8004ff4:	200020fc 	.word	0x200020fc

08004ff8 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005002:	79fc      	ldrb	r4, [r7, #7]
 8005004:	2001      	movs	r0, #1
 8005006:	f000 fac5 	bl	8005594 <SM_GetOutputChannel>
 800500a:	4601      	mov	r1, r0
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <FuncO_ApplyPresetToSync+0xb0>)
 800500e:	00e3      	lsls	r3, r4, #3
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005016:	2001      	movs	r0, #1
 8005018:	f000 fabc 	bl	8005594 <SM_GetOutputChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fb7d 	bl	8005728 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800502e:	79fc      	ldrb	r4, [r7, #7]
 8005030:	2001      	movs	r0, #1
 8005032:	f000 faaf 	bl	8005594 <SM_GetOutputChannel>
 8005036:	4601      	mov	r1, r0
 8005038:	00e3      	lsls	r3, r4, #3
 800503a:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <FuncO_ApplyPresetToSync+0xb0>)
 800503c:	4413      	add	r3, r2
 800503e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <FuncO_ApplyPresetToSync+0xb4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a19      	ldr	r2, [pc, #100]	; (80050ac <FuncO_ApplyPresetToSync+0xb4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800504e:	2100      	movs	r1, #0
 8005050:	4817      	ldr	r0, [pc, #92]	; (80050b0 <FuncO_ApplyPresetToSync+0xb8>)
 8005052:	f005 f8d5 	bl	800a200 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005056:	2001      	movs	r0, #1
 8005058:	f000 fa9c 	bl	8005594 <SM_GetOutputChannel>
 800505c:	4603      	mov	r3, r0
 800505e:	f103 0208 	add.w	r2, r3, #8
 8005062:	2300      	movs	r3, #0
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2378      	movs	r3, #120	; 0x78
 8005068:	2100      	movs	r1, #0
 800506a:	4811      	ldr	r0, [pc, #68]	; (80050b0 <FuncO_ApplyPresetToSync+0xb8>)
 800506c:	f005 f806 	bl	800a07c <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005070:	2100      	movs	r1, #0
 8005072:	4810      	ldr	r0, [pc, #64]	; (80050b4 <FuncO_ApplyPresetToSync+0xbc>)
 8005074:	f005 f8c4 	bl	800a200 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005078:	2000      	movs	r0, #0
 800507a:	f000 fa8b 	bl	8005594 <SM_GetOutputChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	f103 0208 	add.w	r2, r3, #8
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2378      	movs	r3, #120	; 0x78
 800508a:	2100      	movs	r1, #0
 800508c:	4809      	ldr	r0, [pc, #36]	; (80050b4 <FuncO_ApplyPresetToSync+0xbc>)
 800508e:	f004 fff5 	bl	800a07c <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <FuncO_ApplyPresetToSync+0xb4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a05      	ldr	r2, [pc, #20]	; (80050ac <FuncO_ApplyPresetToSync+0xb4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6013      	str	r3, [r2, #0]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200001a0 	.word	0x200001a0
 80050ac:	40013400 	.word	0x40013400
 80050b0:	200020fc 	.word	0x200020fc
 80050b4:	20002110 	.word	0x20002110

080050b8 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <FuncO_GetFuncPresetEncoderRange+0x14>)
 80050be:	781b      	ldrb	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000019c 	.word	0x2000019c

080050d0 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80050da:	79fc      	ldrb	r4, [r7, #7]
 80050dc:	2000      	movs	r0, #0
 80050de:	f000 fa59 	bl	8005594 <SM_GetOutputChannel>
 80050e2:	4601      	mov	r1, r0
 80050e4:	4623      	mov	r3, r4
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4423      	add	r3, r4
 80050ea:	4a4f      	ldr	r2, [pc, #316]	; (8005228 <GO_ApplyPresetToSignal+0x158>)
 80050ec:	4413      	add	r3, r2
 80050ee:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b07      	cmp	r3, #7
 80050f6:	f200 8093 	bhi.w	8005220 <GO_ApplyPresetToSignal+0x150>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <GO_ApplyPresetToSignal+0x30>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005121 	.word	0x08005121
 8005104:	08005141 	.word	0x08005141
 8005108:	08005161 	.word	0x08005161
 800510c:	08005181 	.word	0x08005181
 8005110:	080051a1 	.word	0x080051a1
 8005114:	080051c1 	.word	0x080051c1
 8005118:	080051e1 	.word	0x080051e1
 800511c:	08005201 	.word	0x08005201
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005120:	2200      	movs	r2, #0
 8005122:	2101      	movs	r1, #1
 8005124:	4841      	ldr	r0, [pc, #260]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 8005126:	f005 ffa1 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800512a:	2200      	movs	r2, #0
 800512c:	2120      	movs	r1, #32
 800512e:	4840      	ldr	r0, [pc, #256]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 8005130:	f005 ff9c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005134:	2200      	movs	r2, #0
 8005136:	2110      	movs	r1, #16
 8005138:	483d      	ldr	r0, [pc, #244]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 800513a:	f005 ff97 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 800513e:	e06f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005140:	2201      	movs	r2, #1
 8005142:	2101      	movs	r1, #1
 8005144:	4839      	ldr	r0, [pc, #228]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 8005146:	f005 ff91 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800514a:	2200      	movs	r2, #0
 800514c:	2120      	movs	r1, #32
 800514e:	4838      	ldr	r0, [pc, #224]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 8005150:	f005 ff8c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005154:	2200      	movs	r2, #0
 8005156:	2110      	movs	r1, #16
 8005158:	4835      	ldr	r0, [pc, #212]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 800515a:	f005 ff87 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 800515e:	e05f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005160:	2200      	movs	r2, #0
 8005162:	2101      	movs	r1, #1
 8005164:	4831      	ldr	r0, [pc, #196]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 8005166:	f005 ff81 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800516a:	2201      	movs	r2, #1
 800516c:	2120      	movs	r1, #32
 800516e:	4830      	ldr	r0, [pc, #192]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 8005170:	f005 ff7c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	2110      	movs	r1, #16
 8005178:	482d      	ldr	r0, [pc, #180]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 800517a:	f005 ff77 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 800517e:	e04f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005180:	2201      	movs	r2, #1
 8005182:	2101      	movs	r1, #1
 8005184:	4829      	ldr	r0, [pc, #164]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 8005186:	f005 ff71 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800518a:	2201      	movs	r2, #1
 800518c:	2120      	movs	r1, #32
 800518e:	4828      	ldr	r0, [pc, #160]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 8005190:	f005 ff6c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005194:	2200      	movs	r2, #0
 8005196:	2110      	movs	r1, #16
 8005198:	4825      	ldr	r0, [pc, #148]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 800519a:	f005 ff67 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 800519e:	e03f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051a0:	2200      	movs	r2, #0
 80051a2:	2101      	movs	r1, #1
 80051a4:	4821      	ldr	r0, [pc, #132]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 80051a6:	f005 ff61 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051aa:	2200      	movs	r2, #0
 80051ac:	2120      	movs	r1, #32
 80051ae:	4820      	ldr	r0, [pc, #128]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051b0:	f005 ff5c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051b4:	2201      	movs	r2, #1
 80051b6:	2110      	movs	r1, #16
 80051b8:	481d      	ldr	r0, [pc, #116]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051ba:	f005 ff57 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80051be:	e02f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80051c0:	2201      	movs	r2, #1
 80051c2:	2101      	movs	r1, #1
 80051c4:	4819      	ldr	r0, [pc, #100]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 80051c6:	f005 ff51 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2120      	movs	r1, #32
 80051ce:	4818      	ldr	r0, [pc, #96]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051d0:	f005 ff4c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051d4:	2201      	movs	r2, #1
 80051d6:	2110      	movs	r1, #16
 80051d8:	4815      	ldr	r0, [pc, #84]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051da:	f005 ff47 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80051de:	e01f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2101      	movs	r1, #1
 80051e4:	4811      	ldr	r0, [pc, #68]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 80051e6:	f005 ff41 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80051ea:	2201      	movs	r2, #1
 80051ec:	2120      	movs	r1, #32
 80051ee:	4810      	ldr	r0, [pc, #64]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051f0:	f005 ff3c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80051f4:	2201      	movs	r2, #1
 80051f6:	2110      	movs	r1, #16
 80051f8:	480d      	ldr	r0, [pc, #52]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 80051fa:	f005 ff37 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80051fe:	e00f      	b.n	8005220 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005200:	2201      	movs	r2, #1
 8005202:	2101      	movs	r1, #1
 8005204:	4809      	ldr	r0, [pc, #36]	; (800522c <GO_ApplyPresetToSignal+0x15c>)
 8005206:	f005 ff31 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800520a:	2201      	movs	r2, #1
 800520c:	2120      	movs	r1, #32
 800520e:	4808      	ldr	r0, [pc, #32]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 8005210:	f005 ff2c 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005214:	2201      	movs	r2, #1
 8005216:	2110      	movs	r1, #16
 8005218:	4805      	ldr	r0, [pc, #20]	; (8005230 <GO_ApplyPresetToSignal+0x160>)
 800521a:	f005 ff27 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 800521e:	bf00      	nop
	}
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}
 8005228:	200001d0 	.word	0x200001d0
 800522c:	48000400 	.word	0x48000400
 8005230:	48000800 	.word	0x48000800

08005234 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800523e:	79fc      	ldrb	r4, [r7, #7]
 8005240:	2001      	movs	r0, #1
 8005242:	f000 f9a7 	bl	8005594 <SM_GetOutputChannel>
 8005246:	4601      	mov	r1, r0
 8005248:	4623      	mov	r3, r4
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4423      	add	r3, r4
 800524e:	4a4f      	ldr	r2, [pc, #316]	; (800538c <GO_ApplyPresetToSync+0x158>)
 8005250:	4413      	add	r3, r2
 8005252:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b07      	cmp	r3, #7
 800525a:	f200 8093 	bhi.w	8005384 <GO_ApplyPresetToSync+0x150>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <GO_ApplyPresetToSync+0x30>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005285 	.word	0x08005285
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052e5 	.word	0x080052e5
 8005274:	08005305 	.word	0x08005305
 8005278:	08005325 	.word	0x08005325
 800527c:	08005345 	.word	0x08005345
 8005280:	08005365 	.word	0x08005365
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	2101      	movs	r1, #1
 8005288:	4841      	ldr	r0, [pc, #260]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 800528a:	f005 feef 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800528e:	2200      	movs	r2, #0
 8005290:	2120      	movs	r1, #32
 8005292:	4840      	ldr	r0, [pc, #256]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 8005294:	f005 feea 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005298:	2200      	movs	r2, #0
 800529a:	2110      	movs	r1, #16
 800529c:	483d      	ldr	r0, [pc, #244]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 800529e:	f005 fee5 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80052a2:	e06f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052a4:	2201      	movs	r2, #1
 80052a6:	2101      	movs	r1, #1
 80052a8:	4839      	ldr	r0, [pc, #228]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 80052aa:	f005 fedf 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2120      	movs	r1, #32
 80052b2:	4838      	ldr	r0, [pc, #224]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052b4:	f005 feda 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	2110      	movs	r1, #16
 80052bc:	4835      	ldr	r0, [pc, #212]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052be:	f005 fed5 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80052c2:	e05f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80052c4:	2200      	movs	r2, #0
 80052c6:	2101      	movs	r1, #1
 80052c8:	4831      	ldr	r0, [pc, #196]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 80052ca:	f005 fecf 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052ce:	2201      	movs	r2, #1
 80052d0:	2120      	movs	r1, #32
 80052d2:	4830      	ldr	r0, [pc, #192]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052d4:	f005 feca 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052d8:	2200      	movs	r2, #0
 80052da:	2110      	movs	r1, #16
 80052dc:	482d      	ldr	r0, [pc, #180]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052de:	f005 fec5 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 80052e2:	e04f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052e4:	2201      	movs	r2, #1
 80052e6:	2101      	movs	r1, #1
 80052e8:	4829      	ldr	r0, [pc, #164]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 80052ea:	f005 febf 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052ee:	2201      	movs	r2, #1
 80052f0:	2120      	movs	r1, #32
 80052f2:	4828      	ldr	r0, [pc, #160]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052f4:	f005 feba 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2110      	movs	r1, #16
 80052fc:	4825      	ldr	r0, [pc, #148]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 80052fe:	f005 feb5 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 8005302:	e03f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005304:	2200      	movs	r2, #0
 8005306:	2101      	movs	r1, #1
 8005308:	4821      	ldr	r0, [pc, #132]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 800530a:	f005 feaf 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800530e:	2200      	movs	r2, #0
 8005310:	2120      	movs	r1, #32
 8005312:	4820      	ldr	r0, [pc, #128]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 8005314:	f005 feaa 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005318:	2201      	movs	r2, #1
 800531a:	2110      	movs	r1, #16
 800531c:	481d      	ldr	r0, [pc, #116]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 800531e:	f005 fea5 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 8005322:	e02f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005324:	2201      	movs	r2, #1
 8005326:	2101      	movs	r1, #1
 8005328:	4819      	ldr	r0, [pc, #100]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 800532a:	f005 fe9f 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800532e:	2200      	movs	r2, #0
 8005330:	2120      	movs	r1, #32
 8005332:	4818      	ldr	r0, [pc, #96]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 8005334:	f005 fe9a 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005338:	2201      	movs	r2, #1
 800533a:	2110      	movs	r1, #16
 800533c:	4815      	ldr	r0, [pc, #84]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 800533e:	f005 fe95 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 8005342:	e01f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005344:	2200      	movs	r2, #0
 8005346:	2101      	movs	r1, #1
 8005348:	4811      	ldr	r0, [pc, #68]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 800534a:	f005 fe8f 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800534e:	2201      	movs	r2, #1
 8005350:	2120      	movs	r1, #32
 8005352:	4810      	ldr	r0, [pc, #64]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 8005354:	f005 fe8a 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005358:	2201      	movs	r2, #1
 800535a:	2110      	movs	r1, #16
 800535c:	480d      	ldr	r0, [pc, #52]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 800535e:	f005 fe85 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 8005362:	e00f      	b.n	8005384 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005364:	2201      	movs	r2, #1
 8005366:	2101      	movs	r1, #1
 8005368:	4809      	ldr	r0, [pc, #36]	; (8005390 <GO_ApplyPresetToSync+0x15c>)
 800536a:	f005 fe7f 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800536e:	2201      	movs	r2, #1
 8005370:	2120      	movs	r1, #32
 8005372:	4808      	ldr	r0, [pc, #32]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 8005374:	f005 fe7a 	bl	800b06c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005378:	2201      	movs	r2, #1
 800537a:	2110      	movs	r1, #16
 800537c:	4805      	ldr	r0, [pc, #20]	; (8005394 <GO_ApplyPresetToSync+0x160>)
 800537e:	f005 fe75 	bl	800b06c <HAL_GPIO_WritePin>
			break;
 8005382:	bf00      	nop
	}
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	200001d0 	.word	0x200001d0
 8005390:	48000400 	.word	0x48000400
 8005394:	48000800 	.word	0x48000800

08005398 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 800539c:	f000 f89a 	bl	80054d4 <_InitOutputChannels>
	_InitNegGainCoefficients();
 80053a0:	f000 f850 	bl	8005444 <_InitNegGainCoefficients>
	_InitGainInDecibels();
 80053a4:	f000 f802 	bl	80053ac <_InitGainInDecibels>

}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e037      	b.n	8005428 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 80053b8:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <_InitGainInDecibels+0x8c>)
 80053ba:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 80053bc:	491f      	ldr	r1, [pc, #124]	; (800543c <_InitGainInDecibels+0x90>)
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3304      	adds	r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80053d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80053d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80053d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80053dc:	ee16 0a90 	vmov	r0, s13
 80053e0:	f7fb f8da 	bl	8000598 <__aeabi_f2d>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	ec44 3b10 	vmov	d0, r3, r4
 80053ec:	f00b fe7c 	bl	80110e8 <log10>
 80053f0:	ec51 0b10 	vmov	r0, r1, d0
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <_InitGainInDecibels+0x94>)
 80053fa:	f7fb f925 	bl	8000648 <__aeabi_dmul>
 80053fe:	4603      	mov	r3, r0
 8005400:	460c      	mov	r4, r1
 8005402:	4618      	mov	r0, r3
 8005404:	4621      	mov	r1, r4
 8005406:	f7fb fc17 	bl	8000c38 <__aeabi_d2f>
 800540a:	4603      	mov	r3, r0
 800540c:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 800540e:	490b      	ldr	r1, [pc, #44]	; (800543c <_InitGainInDecibels+0x90>)
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	330c      	adds	r3, #12
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b61      	cmp	r3, #97	; 0x61
 800542c:	ddc4      	ble.n	80053b8 <_InitGainInDecibels+0xc>

	}
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}
 8005436:	bf00      	nop
 8005438:	3a83126f 	.word	0x3a83126f
 800543c:	200001e8 	.word	0x200001e8
 8005440:	40340000 	.word	0x40340000

08005444 <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e033      	b.n	80054b8 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005450:	491e      	ldr	r1, [pc, #120]	; (80054cc <_InitNegGainCoefficients+0x88>)
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3304      	adds	r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005464:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <_InitNegGainCoefficients+0x8c>)
 8005466:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005468:	4918      	ldr	r1, [pc, #96]	; (80054cc <_InitNegGainCoefficients+0x88>)
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3308      	adds	r3, #8
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005486:	ed97 7a04 	vldr	s14, [r7, #16]
 800548a:	edd7 7a03 	vldr	s15, [r7, #12]
 800548e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005492:	ed97 7a02 	vldr	s14, [r7, #8]
 8005496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800549e:	490b      	ldr	r1, [pc, #44]	; (80054cc <_InitNegGainCoefficients+0x88>)
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4613      	mov	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3310      	adds	r3, #16
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b61      	cmp	r3, #97	; 0x61
 80054bc:	ddc8      	ble.n	8005450 <_InitNegGainCoefficients+0xc>
	}
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	200001e8 	.word	0x200001e8
 80054d0:	402ccccd 	.word	0x402ccccd

080054d4 <_InitOutputChannels>:

void _InitOutputChannels()
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80054da:	4b28      	ldr	r3, [pc, #160]	; (800557c <_InitOutputChannels+0xa8>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <_InitOutputChannels+0xac>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a25      	ldr	r2, [pc, #148]	; (800557c <_InitOutputChannels+0xa8>)
 80054e6:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80054e8:	4b24      	ldr	r3, [pc, #144]	; (800557c <_InitOutputChannels+0xa8>)
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <_InitOutputChannels+0xac>)
 80054ec:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e00b      	b.n	800550e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80054f6:	4a23      	ldr	r2, [pc, #140]	; (8005584 <_InitOutputChannels+0xb0>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054fe:	491f      	ldr	r1, [pc, #124]	; (800557c <_InitOutputChannels+0xa8>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3302      	adds	r3, #2
 8005504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3301      	adds	r3, #1
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b77      	cmp	r3, #119	; 0x77
 8005512:	ddf0      	ble.n	80054f6 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <_InitOutputChannels+0xa8>)
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <_InitOutputChannels+0xb4>)
 8005518:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800551c:	4b17      	ldr	r3, [pc, #92]	; (800557c <_InitOutputChannels+0xa8>)
 800551e:	4a1b      	ldr	r2, [pc, #108]	; (800558c <_InitOutputChannels+0xb8>)
 8005520:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <_InitOutputChannels+0xbc>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <_InitOutputChannels+0xac>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <_InitOutputChannels+0xbc>)
 8005530:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <_InitOutputChannels+0xbc>)
 8005534:	4a12      	ldr	r2, [pc, #72]	; (8005580 <_InitOutputChannels+0xac>)
 8005536:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800553a:	2300      	movs	r3, #0
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	e00b      	b.n	8005558 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005540:	4a10      	ldr	r2, [pc, #64]	; (8005584 <_InitOutputChannels+0xb0>)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005548:	4911      	ldr	r1, [pc, #68]	; (8005590 <_InitOutputChannels+0xbc>)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	3302      	adds	r3, #2
 800554e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b77      	cmp	r3, #119	; 0x77
 800555c:	ddf0      	ble.n	8005540 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <_InitOutputChannels+0xbc>)
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <_InitOutputChannels+0xb4>)
 8005562:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <_InitOutputChannels+0xbc>)
 8005568:	4a08      	ldr	r2, [pc, #32]	; (800558c <_InitOutputChannels+0xb8>)
 800556a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20001c38 	.word	0x20001c38
 8005580:	200001a0 	.word	0x200001a0
 8005584:	20001074 	.word	0x20001074
 8005588:	20000ba4 	.word	0x20000ba4
 800558c:	200001d3 	.word	0x200001d3
 8005590:	20001a44 	.word	0x20001a44

08005594 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <SM_GetOutputChannel+0x24>)
 80055a6:	e000      	b.n	80055aa <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <SM_GetOutputChannel+0x28>)
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20001c38 	.word	0x20001c38
 80055bc:	20001a44 	.word	0x20001a44

080055c0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <SM_GetEncoderValue+0x34>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <SM_GetEncoderValue+0x34>)
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	b29b      	uxth	r3, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	e002      	b.n	80055e8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <SM_GetEncoderValue+0x34>)
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	b29b      	uxth	r3, r3
	}
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00

080055f8 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <SM_GetOutputInHertz+0x7c>)
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <SM_GetOutputInHertz+0x16>
 8005606:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	e007      	b.n	800561e <SM_GetOutputInHertz+0x26>
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <SM_GetOutputInHertz+0x7c>)
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <SM_GetOutputInHertz+0x7c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <SM_GetOutputInHertz+0x36>
 8005626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	e007      	b.n	800563e <SM_GetOutputInHertz+0x46>
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <SM_GetOutputInHertz+0x7c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800563e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005642:	edd7 7a01 	vldr	s15, [r7, #4]
 8005646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800564a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005678 <SM_GetOutputInHertz+0x80>
 800564e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005652:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005656:	edd7 7a03 	vldr	s15, [r7, #12]
 800565a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800567c <SM_GetOutputInHertz+0x84>
 800565e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005662:	eef0 7a66 	vmov.f32	s15, s13
}
 8005666:	eeb0 0a67 	vmov.f32	s0, s15
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40013400 	.word	0x40013400
 8005678:	4d2037a0 	.word	0x4d2037a0
 800567c:	42f00000 	.word	0x42f00000

08005680 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <SM_ConvertPeriodToHertz+0x16>
 8005692:	2301      	movs	r3, #1
 8005694:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80056c8 <SM_ConvertPeriodToHertz+0x48>
 80056b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80056b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80056ba:	eeb0 0a67 	vmov.f32	s0, s15
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	4d2037a0 	.word	0x4d2037a0

080056cc <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a10      	ldr	r2, [pc, #64]	; (8005724 <VPP_ApplyPresetToSignal+0x58>)
 80056e2:	4413      	add	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7ff ff54 	bl	8005594 <SM_GetOutputChannel>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	7a1b      	ldrb	r3, [r3, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fce9 	bl	80050d0 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	edd3 7a04 	vldr	s15, [r3, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	ed93 7a05 	vldr	s14, [r3, #20]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8b1b      	ldrh	r3, [r3, #24]
 800570e:	4618      	mov	r0, r3
 8005710:	eef0 0a47 	vmov.f32	s1, s14
 8005714:	eeb0 0a67 	vmov.f32	s0, s15
 8005718:	f000 f834 	bl	8005784 <_ProcessSignalDataTable>


}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	200001e8 	.word	0x200001e8

08005728 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005732:	79fa      	ldrb	r2, [r7, #7]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a10      	ldr	r2, [pc, #64]	; (8005780 <VPP_ApplyPresetToSync+0x58>)
 800573e:	4413      	add	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8005742:	2001      	movs	r0, #1
 8005744:	f7ff ff26 	bl	8005594 <SM_GetOutputChannel>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	7a1b      	ldrb	r3, [r3, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fd6d 	bl	8005234 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	ed93 7a05 	vldr	s14, [r3, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8b1b      	ldrh	r3, [r3, #24]
 800576a:	4618      	mov	r0, r3
 800576c:	eef0 0a47 	vmov.f32	s1, s14
 8005770:	eeb0 0a67 	vmov.f32	s0, s15
 8005774:	f000 f884 	bl	8005880 <_ProcessSyncDataTable>



}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200001e8 	.word	0x200001e8

08005784 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	ed87 0a03 	vstr	s0, [r7, #12]
 800578e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005792:	4603      	mov	r3, r0
 8005794:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e00f      	b.n	80057bc <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 800579c:	2000      	movs	r0, #0
 800579e:	f7ff fef9 	bl	8005594 <SM_GetOutputChannel>
 80057a2:	4603      	mov	r3, r0
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4933      	ldr	r1, [pc, #204]	; (800587c <_ProcessSignalDataTable+0xf8>)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b77      	cmp	r3, #119	; 0x77
 80057c0:	ddec      	ble.n	800579c <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80057c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80057c6:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057dc:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e02e      	b.n	8005844 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80057e6:	4a25      	ldr	r2, [pc, #148]	; (800587c <_ProcessSignalDataTable+0xf8>)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80057fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 1a90 	vmov	r1, s15
 8005806:	4a1d      	ldr	r2, [pc, #116]	; (800587c <_ProcessSignalDataTable+0xf8>)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <_ProcessSignalDataTable+0xf8>)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800581e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005822:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800582a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800582e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005832:	ee17 1a90 	vmov	r1, s15
 8005836:	4a11      	ldr	r2, [pc, #68]	; (800587c <_ProcessSignalDataTable+0xf8>)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b77      	cmp	r3, #119	; 0x77
 8005848:	ddcd      	ble.n	80057e6 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e00e      	b.n	800586e <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005850:	2000      	movs	r0, #0
 8005852:	f7ff fe9f 	bl	8005594 <SM_GetOutputChannel>
 8005856:	4601      	mov	r1, r0
 8005858:	4a08      	ldr	r2, [pc, #32]	; (800587c <_ProcessSignalDataTable+0xf8>)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3302      	adds	r3, #2
 8005864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3301      	adds	r3, #1
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b77      	cmp	r3, #119	; 0x77
 8005872:	dded      	ble.n	8005850 <_ProcessSignalDataTable+0xcc>
	}
}
 8005874:	bf00      	nop
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20001e2c 	.word	0x20001e2c

08005880 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	ed87 0a03 	vstr	s0, [r7, #12]
 800588a:	edc7 0a02 	vstr	s1, [r7, #8]
 800588e:	4603      	mov	r3, r0
 8005890:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e00f      	b.n	80058b8 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005898:	2001      	movs	r0, #1
 800589a:	f7ff fe7b 	bl	8005594 <SM_GetOutputChannel>
 800589e:	4603      	mov	r3, r0
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4933      	ldr	r1, [pc, #204]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b77      	cmp	r3, #119	; 0x77
 80058bc:	ddec      	ble.n	8005898 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80058be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80058c2:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058d8:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e02e      	b.n	8005940 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80058e2:	4a25      	ldr	r2, [pc, #148]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fe:	ee17 1a90 	vmov	r1, s15
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800591a:	edd7 7a06 	vldr	s15, [r7, #24]
 800591e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005922:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800592a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592e:	ee17 1a90 	vmov	r1, s15
 8005932:	4a11      	ldr	r2, [pc, #68]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3301      	adds	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b77      	cmp	r3, #119	; 0x77
 8005944:	ddcd      	ble.n	80058e2 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	e00e      	b.n	800596a <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800594c:	2001      	movs	r0, #1
 800594e:	f7ff fe21 	bl	8005594 <SM_GetOutputChannel>
 8005952:	4601      	mov	r1, r0
 8005954:	4a08      	ldr	r2, [pc, #32]	; (8005978 <_ProcessSyncDataTable+0xf8>)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3302      	adds	r3, #2
 8005960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3301      	adds	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b77      	cmp	r3, #119	; 0x77
 800596e:	dded      	ble.n	800594c <_ProcessSyncDataTable+0xcc>
	}
}
 8005970:	bf00      	nop
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20001e2c 	.word	0x20001e2c

0800597c <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800598c:	f200 849a 	bhi.w	80062c4 <VPP_ModifySignalOutput+0x948>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <VPP_ModifySignalOutput+0x1c>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	08005fb5 	.word	0x08005fb5
 800599c:	08005fb5 	.word	0x08005fb5
 80059a0:	08005fb5 	.word	0x08005fb5
 80059a4:	08005fbd 	.word	0x08005fbd
 80059a8:	08005fbd 	.word	0x08005fbd
 80059ac:	08005fbd 	.word	0x08005fbd
 80059b0:	08005fbd 	.word	0x08005fbd
 80059b4:	08005fc5 	.word	0x08005fc5
 80059b8:	08005fc5 	.word	0x08005fc5
 80059bc:	08005fc5 	.word	0x08005fc5
 80059c0:	08005fc5 	.word	0x08005fc5
 80059c4:	08005fcd 	.word	0x08005fcd
 80059c8:	08005fcd 	.word	0x08005fcd
 80059cc:	08005fcd 	.word	0x08005fcd
 80059d0:	08005fcd 	.word	0x08005fcd
 80059d4:	08005fd5 	.word	0x08005fd5
 80059d8:	08005fd5 	.word	0x08005fd5
 80059dc:	08005fd5 	.word	0x08005fd5
 80059e0:	08005fd5 	.word	0x08005fd5
 80059e4:	08005fdd 	.word	0x08005fdd
 80059e8:	08005fdd 	.word	0x08005fdd
 80059ec:	08005fdd 	.word	0x08005fdd
 80059f0:	08005fdd 	.word	0x08005fdd
 80059f4:	08005fe5 	.word	0x08005fe5
 80059f8:	08005fe5 	.word	0x08005fe5
 80059fc:	08005fe5 	.word	0x08005fe5
 8005a00:	08005fe5 	.word	0x08005fe5
 8005a04:	08005fed 	.word	0x08005fed
 8005a08:	08005fed 	.word	0x08005fed
 8005a0c:	08005fed 	.word	0x08005fed
 8005a10:	08005fed 	.word	0x08005fed
 8005a14:	08005ff5 	.word	0x08005ff5
 8005a18:	08005ff5 	.word	0x08005ff5
 8005a1c:	08005ff5 	.word	0x08005ff5
 8005a20:	08005ff5 	.word	0x08005ff5
 8005a24:	08005ffd 	.word	0x08005ffd
 8005a28:	08005ffd 	.word	0x08005ffd
 8005a2c:	08005ffd 	.word	0x08005ffd
 8005a30:	08005ffd 	.word	0x08005ffd
 8005a34:	08006005 	.word	0x08006005
 8005a38:	08006005 	.word	0x08006005
 8005a3c:	08006005 	.word	0x08006005
 8005a40:	08006005 	.word	0x08006005
 8005a44:	0800600d 	.word	0x0800600d
 8005a48:	0800600d 	.word	0x0800600d
 8005a4c:	0800600d 	.word	0x0800600d
 8005a50:	0800600d 	.word	0x0800600d
 8005a54:	08006015 	.word	0x08006015
 8005a58:	08006015 	.word	0x08006015
 8005a5c:	08006015 	.word	0x08006015
 8005a60:	08006015 	.word	0x08006015
 8005a64:	0800601d 	.word	0x0800601d
 8005a68:	0800601d 	.word	0x0800601d
 8005a6c:	0800601d 	.word	0x0800601d
 8005a70:	0800601d 	.word	0x0800601d
 8005a74:	08006025 	.word	0x08006025
 8005a78:	08006025 	.word	0x08006025
 8005a7c:	08006025 	.word	0x08006025
 8005a80:	08006025 	.word	0x08006025
 8005a84:	0800602d 	.word	0x0800602d
 8005a88:	0800602d 	.word	0x0800602d
 8005a8c:	0800602d 	.word	0x0800602d
 8005a90:	0800602d 	.word	0x0800602d
 8005a94:	08006035 	.word	0x08006035
 8005a98:	08006035 	.word	0x08006035
 8005a9c:	08006035 	.word	0x08006035
 8005aa0:	08006035 	.word	0x08006035
 8005aa4:	0800603d 	.word	0x0800603d
 8005aa8:	0800603d 	.word	0x0800603d
 8005aac:	0800603d 	.word	0x0800603d
 8005ab0:	0800603d 	.word	0x0800603d
 8005ab4:	08006045 	.word	0x08006045
 8005ab8:	08006045 	.word	0x08006045
 8005abc:	08006045 	.word	0x08006045
 8005ac0:	08006045 	.word	0x08006045
 8005ac4:	0800604d 	.word	0x0800604d
 8005ac8:	0800604d 	.word	0x0800604d
 8005acc:	0800604d 	.word	0x0800604d
 8005ad0:	0800604d 	.word	0x0800604d
 8005ad4:	08006055 	.word	0x08006055
 8005ad8:	08006055 	.word	0x08006055
 8005adc:	08006055 	.word	0x08006055
 8005ae0:	08006055 	.word	0x08006055
 8005ae4:	0800605d 	.word	0x0800605d
 8005ae8:	0800605d 	.word	0x0800605d
 8005aec:	0800605d 	.word	0x0800605d
 8005af0:	0800605d 	.word	0x0800605d
 8005af4:	08006065 	.word	0x08006065
 8005af8:	08006065 	.word	0x08006065
 8005afc:	08006065 	.word	0x08006065
 8005b00:	08006065 	.word	0x08006065
 8005b04:	0800606d 	.word	0x0800606d
 8005b08:	0800606d 	.word	0x0800606d
 8005b0c:	0800606d 	.word	0x0800606d
 8005b10:	0800606d 	.word	0x0800606d
 8005b14:	08006075 	.word	0x08006075
 8005b18:	08006075 	.word	0x08006075
 8005b1c:	08006075 	.word	0x08006075
 8005b20:	08006075 	.word	0x08006075
 8005b24:	0800607d 	.word	0x0800607d
 8005b28:	0800607d 	.word	0x0800607d
 8005b2c:	0800607d 	.word	0x0800607d
 8005b30:	0800607d 	.word	0x0800607d
 8005b34:	08006085 	.word	0x08006085
 8005b38:	08006085 	.word	0x08006085
 8005b3c:	08006085 	.word	0x08006085
 8005b40:	08006085 	.word	0x08006085
 8005b44:	0800608d 	.word	0x0800608d
 8005b48:	0800608d 	.word	0x0800608d
 8005b4c:	0800608d 	.word	0x0800608d
 8005b50:	0800608d 	.word	0x0800608d
 8005b54:	08006095 	.word	0x08006095
 8005b58:	08006095 	.word	0x08006095
 8005b5c:	08006095 	.word	0x08006095
 8005b60:	08006095 	.word	0x08006095
 8005b64:	0800609d 	.word	0x0800609d
 8005b68:	0800609d 	.word	0x0800609d
 8005b6c:	0800609d 	.word	0x0800609d
 8005b70:	0800609d 	.word	0x0800609d
 8005b74:	080060a5 	.word	0x080060a5
 8005b78:	080060a5 	.word	0x080060a5
 8005b7c:	080060a5 	.word	0x080060a5
 8005b80:	080060a5 	.word	0x080060a5
 8005b84:	080060ad 	.word	0x080060ad
 8005b88:	080060ad 	.word	0x080060ad
 8005b8c:	080060ad 	.word	0x080060ad
 8005b90:	080060ad 	.word	0x080060ad
 8005b94:	080060b5 	.word	0x080060b5
 8005b98:	080060b5 	.word	0x080060b5
 8005b9c:	080060b5 	.word	0x080060b5
 8005ba0:	080060b5 	.word	0x080060b5
 8005ba4:	080060bd 	.word	0x080060bd
 8005ba8:	080060bd 	.word	0x080060bd
 8005bac:	080060bd 	.word	0x080060bd
 8005bb0:	080060bd 	.word	0x080060bd
 8005bb4:	080060c5 	.word	0x080060c5
 8005bb8:	080060c5 	.word	0x080060c5
 8005bbc:	080060c5 	.word	0x080060c5
 8005bc0:	080060c5 	.word	0x080060c5
 8005bc4:	080060cd 	.word	0x080060cd
 8005bc8:	080060cd 	.word	0x080060cd
 8005bcc:	080060cd 	.word	0x080060cd
 8005bd0:	080060cd 	.word	0x080060cd
 8005bd4:	080060d5 	.word	0x080060d5
 8005bd8:	080060d5 	.word	0x080060d5
 8005bdc:	080060d5 	.word	0x080060d5
 8005be0:	080060d5 	.word	0x080060d5
 8005be4:	080060dd 	.word	0x080060dd
 8005be8:	080060dd 	.word	0x080060dd
 8005bec:	080060dd 	.word	0x080060dd
 8005bf0:	080060dd 	.word	0x080060dd
 8005bf4:	080060e5 	.word	0x080060e5
 8005bf8:	080060e5 	.word	0x080060e5
 8005bfc:	080060e5 	.word	0x080060e5
 8005c00:	080060e5 	.word	0x080060e5
 8005c04:	080060ed 	.word	0x080060ed
 8005c08:	080060ed 	.word	0x080060ed
 8005c0c:	080060ed 	.word	0x080060ed
 8005c10:	080060ed 	.word	0x080060ed
 8005c14:	080060f5 	.word	0x080060f5
 8005c18:	080060f5 	.word	0x080060f5
 8005c1c:	080060f5 	.word	0x080060f5
 8005c20:	080060f5 	.word	0x080060f5
 8005c24:	080060fd 	.word	0x080060fd
 8005c28:	080060fd 	.word	0x080060fd
 8005c2c:	080060fd 	.word	0x080060fd
 8005c30:	080060fd 	.word	0x080060fd
 8005c34:	08006105 	.word	0x08006105
 8005c38:	08006105 	.word	0x08006105
 8005c3c:	08006105 	.word	0x08006105
 8005c40:	08006105 	.word	0x08006105
 8005c44:	0800610d 	.word	0x0800610d
 8005c48:	0800610d 	.word	0x0800610d
 8005c4c:	0800610d 	.word	0x0800610d
 8005c50:	0800610d 	.word	0x0800610d
 8005c54:	08006115 	.word	0x08006115
 8005c58:	08006115 	.word	0x08006115
 8005c5c:	08006115 	.word	0x08006115
 8005c60:	08006115 	.word	0x08006115
 8005c64:	0800611d 	.word	0x0800611d
 8005c68:	0800611d 	.word	0x0800611d
 8005c6c:	0800611d 	.word	0x0800611d
 8005c70:	0800611d 	.word	0x0800611d
 8005c74:	08006125 	.word	0x08006125
 8005c78:	08006125 	.word	0x08006125
 8005c7c:	08006125 	.word	0x08006125
 8005c80:	08006125 	.word	0x08006125
 8005c84:	0800612d 	.word	0x0800612d
 8005c88:	0800612d 	.word	0x0800612d
 8005c8c:	0800612d 	.word	0x0800612d
 8005c90:	0800612d 	.word	0x0800612d
 8005c94:	08006135 	.word	0x08006135
 8005c98:	08006135 	.word	0x08006135
 8005c9c:	08006135 	.word	0x08006135
 8005ca0:	08006135 	.word	0x08006135
 8005ca4:	0800613d 	.word	0x0800613d
 8005ca8:	0800613d 	.word	0x0800613d
 8005cac:	0800613d 	.word	0x0800613d
 8005cb0:	0800613d 	.word	0x0800613d
 8005cb4:	08006145 	.word	0x08006145
 8005cb8:	08006145 	.word	0x08006145
 8005cbc:	08006145 	.word	0x08006145
 8005cc0:	08006145 	.word	0x08006145
 8005cc4:	0800614d 	.word	0x0800614d
 8005cc8:	0800614d 	.word	0x0800614d
 8005ccc:	0800614d 	.word	0x0800614d
 8005cd0:	0800614d 	.word	0x0800614d
 8005cd4:	08006155 	.word	0x08006155
 8005cd8:	08006155 	.word	0x08006155
 8005cdc:	08006155 	.word	0x08006155
 8005ce0:	08006155 	.word	0x08006155
 8005ce4:	0800615d 	.word	0x0800615d
 8005ce8:	0800615d 	.word	0x0800615d
 8005cec:	0800615d 	.word	0x0800615d
 8005cf0:	0800615d 	.word	0x0800615d
 8005cf4:	08006165 	.word	0x08006165
 8005cf8:	08006165 	.word	0x08006165
 8005cfc:	08006165 	.word	0x08006165
 8005d00:	08006165 	.word	0x08006165
 8005d04:	0800616d 	.word	0x0800616d
 8005d08:	0800616d 	.word	0x0800616d
 8005d0c:	0800616d 	.word	0x0800616d
 8005d10:	0800616d 	.word	0x0800616d
 8005d14:	08006175 	.word	0x08006175
 8005d18:	08006175 	.word	0x08006175
 8005d1c:	08006175 	.word	0x08006175
 8005d20:	08006175 	.word	0x08006175
 8005d24:	0800617d 	.word	0x0800617d
 8005d28:	0800617d 	.word	0x0800617d
 8005d2c:	0800617d 	.word	0x0800617d
 8005d30:	0800617d 	.word	0x0800617d
 8005d34:	08006185 	.word	0x08006185
 8005d38:	08006185 	.word	0x08006185
 8005d3c:	08006185 	.word	0x08006185
 8005d40:	08006185 	.word	0x08006185
 8005d44:	0800618d 	.word	0x0800618d
 8005d48:	0800618d 	.word	0x0800618d
 8005d4c:	0800618d 	.word	0x0800618d
 8005d50:	0800618d 	.word	0x0800618d
 8005d54:	08006195 	.word	0x08006195
 8005d58:	08006195 	.word	0x08006195
 8005d5c:	08006195 	.word	0x08006195
 8005d60:	08006195 	.word	0x08006195
 8005d64:	0800619d 	.word	0x0800619d
 8005d68:	0800619d 	.word	0x0800619d
 8005d6c:	0800619d 	.word	0x0800619d
 8005d70:	0800619d 	.word	0x0800619d
 8005d74:	080061a5 	.word	0x080061a5
 8005d78:	080061a5 	.word	0x080061a5
 8005d7c:	080061a5 	.word	0x080061a5
 8005d80:	080061a5 	.word	0x080061a5
 8005d84:	080061ad 	.word	0x080061ad
 8005d88:	080061ad 	.word	0x080061ad
 8005d8c:	080061ad 	.word	0x080061ad
 8005d90:	080061ad 	.word	0x080061ad
 8005d94:	080061b5 	.word	0x080061b5
 8005d98:	080061b5 	.word	0x080061b5
 8005d9c:	080061b5 	.word	0x080061b5
 8005da0:	080061b5 	.word	0x080061b5
 8005da4:	080061bd 	.word	0x080061bd
 8005da8:	080061bd 	.word	0x080061bd
 8005dac:	080061bd 	.word	0x080061bd
 8005db0:	080061bd 	.word	0x080061bd
 8005db4:	080061c5 	.word	0x080061c5
 8005db8:	080061c5 	.word	0x080061c5
 8005dbc:	080061c5 	.word	0x080061c5
 8005dc0:	080061c5 	.word	0x080061c5
 8005dc4:	080061cd 	.word	0x080061cd
 8005dc8:	080061cd 	.word	0x080061cd
 8005dcc:	080061cd 	.word	0x080061cd
 8005dd0:	080061cd 	.word	0x080061cd
 8005dd4:	080061d5 	.word	0x080061d5
 8005dd8:	080061d5 	.word	0x080061d5
 8005ddc:	080061d5 	.word	0x080061d5
 8005de0:	080061d5 	.word	0x080061d5
 8005de4:	080061dd 	.word	0x080061dd
 8005de8:	080061dd 	.word	0x080061dd
 8005dec:	080061dd 	.word	0x080061dd
 8005df0:	080061dd 	.word	0x080061dd
 8005df4:	080061e5 	.word	0x080061e5
 8005df8:	080061e5 	.word	0x080061e5
 8005dfc:	080061e5 	.word	0x080061e5
 8005e00:	080061e5 	.word	0x080061e5
 8005e04:	080061ed 	.word	0x080061ed
 8005e08:	080061ed 	.word	0x080061ed
 8005e0c:	080061ed 	.word	0x080061ed
 8005e10:	080061ed 	.word	0x080061ed
 8005e14:	080061f5 	.word	0x080061f5
 8005e18:	080061f5 	.word	0x080061f5
 8005e1c:	080061f5 	.word	0x080061f5
 8005e20:	080061f5 	.word	0x080061f5
 8005e24:	080061fd 	.word	0x080061fd
 8005e28:	080061fd 	.word	0x080061fd
 8005e2c:	080061fd 	.word	0x080061fd
 8005e30:	080061fd 	.word	0x080061fd
 8005e34:	08006205 	.word	0x08006205
 8005e38:	08006205 	.word	0x08006205
 8005e3c:	08006205 	.word	0x08006205
 8005e40:	08006205 	.word	0x08006205
 8005e44:	0800620d 	.word	0x0800620d
 8005e48:	0800620d 	.word	0x0800620d
 8005e4c:	0800620d 	.word	0x0800620d
 8005e50:	0800620d 	.word	0x0800620d
 8005e54:	08006215 	.word	0x08006215
 8005e58:	08006215 	.word	0x08006215
 8005e5c:	08006215 	.word	0x08006215
 8005e60:	08006215 	.word	0x08006215
 8005e64:	0800621d 	.word	0x0800621d
 8005e68:	0800621d 	.word	0x0800621d
 8005e6c:	0800621d 	.word	0x0800621d
 8005e70:	0800621d 	.word	0x0800621d
 8005e74:	08006225 	.word	0x08006225
 8005e78:	08006225 	.word	0x08006225
 8005e7c:	08006225 	.word	0x08006225
 8005e80:	08006225 	.word	0x08006225
 8005e84:	0800622d 	.word	0x0800622d
 8005e88:	0800622d 	.word	0x0800622d
 8005e8c:	0800622d 	.word	0x0800622d
 8005e90:	0800622d 	.word	0x0800622d
 8005e94:	08006235 	.word	0x08006235
 8005e98:	08006235 	.word	0x08006235
 8005e9c:	08006235 	.word	0x08006235
 8005ea0:	08006235 	.word	0x08006235
 8005ea4:	0800623d 	.word	0x0800623d
 8005ea8:	0800623d 	.word	0x0800623d
 8005eac:	0800623d 	.word	0x0800623d
 8005eb0:	0800623d 	.word	0x0800623d
 8005eb4:	08006245 	.word	0x08006245
 8005eb8:	08006245 	.word	0x08006245
 8005ebc:	08006245 	.word	0x08006245
 8005ec0:	08006245 	.word	0x08006245
 8005ec4:	0800624d 	.word	0x0800624d
 8005ec8:	0800624d 	.word	0x0800624d
 8005ecc:	0800624d 	.word	0x0800624d
 8005ed0:	0800624d 	.word	0x0800624d
 8005ed4:	08006255 	.word	0x08006255
 8005ed8:	08006255 	.word	0x08006255
 8005edc:	08006255 	.word	0x08006255
 8005ee0:	08006255 	.word	0x08006255
 8005ee4:	0800625d 	.word	0x0800625d
 8005ee8:	0800625d 	.word	0x0800625d
 8005eec:	0800625d 	.word	0x0800625d
 8005ef0:	0800625d 	.word	0x0800625d
 8005ef4:	08006265 	.word	0x08006265
 8005ef8:	08006265 	.word	0x08006265
 8005efc:	08006265 	.word	0x08006265
 8005f00:	08006265 	.word	0x08006265
 8005f04:	0800626d 	.word	0x0800626d
 8005f08:	0800626d 	.word	0x0800626d
 8005f0c:	0800626d 	.word	0x0800626d
 8005f10:	0800626d 	.word	0x0800626d
 8005f14:	08006275 	.word	0x08006275
 8005f18:	08006275 	.word	0x08006275
 8005f1c:	08006275 	.word	0x08006275
 8005f20:	08006275 	.word	0x08006275
 8005f24:	0800627d 	.word	0x0800627d
 8005f28:	0800627d 	.word	0x0800627d
 8005f2c:	0800627d 	.word	0x0800627d
 8005f30:	0800627d 	.word	0x0800627d
 8005f34:	08006285 	.word	0x08006285
 8005f38:	08006285 	.word	0x08006285
 8005f3c:	08006285 	.word	0x08006285
 8005f40:	08006285 	.word	0x08006285
 8005f44:	0800628d 	.word	0x0800628d
 8005f48:	0800628d 	.word	0x0800628d
 8005f4c:	0800628d 	.word	0x0800628d
 8005f50:	0800628d 	.word	0x0800628d
 8005f54:	08006295 	.word	0x08006295
 8005f58:	08006295 	.word	0x08006295
 8005f5c:	08006295 	.word	0x08006295
 8005f60:	08006295 	.word	0x08006295
 8005f64:	0800629d 	.word	0x0800629d
 8005f68:	0800629d 	.word	0x0800629d
 8005f6c:	0800629d 	.word	0x0800629d
 8005f70:	0800629d 	.word	0x0800629d
 8005f74:	080062a5 	.word	0x080062a5
 8005f78:	080062a5 	.word	0x080062a5
 8005f7c:	080062a5 	.word	0x080062a5
 8005f80:	080062a5 	.word	0x080062a5
 8005f84:	080062ad 	.word	0x080062ad
 8005f88:	080062ad 	.word	0x080062ad
 8005f8c:	080062ad 	.word	0x080062ad
 8005f90:	080062ad 	.word	0x080062ad
 8005f94:	080062b5 	.word	0x080062b5
 8005f98:	080062b5 	.word	0x080062b5
 8005f9c:	080062b5 	.word	0x080062b5
 8005fa0:	080062b5 	.word	0x080062b5
 8005fa4:	080062bd 	.word	0x080062bd
 8005fa8:	080062bd 	.word	0x080062bd
 8005fac:	080062bd 	.word	0x080062bd
 8005fb0:	080062bd 	.word	0x080062bd
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7ff fb89 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fba:	e184      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	f7ff fb85 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fc2:	e180      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f7ff fb81 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fca:	e17c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f7ff fb7d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fd2:	e178      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005fd4:	2004      	movs	r0, #4
 8005fd6:	f7ff fb79 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fda:	e174      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005fdc:	2005      	movs	r0, #5
 8005fde:	f7ff fb75 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fe2:	e170      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005fe4:	2006      	movs	r0, #6
 8005fe6:	f7ff fb71 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005fea:	e16c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005fec:	2007      	movs	r0, #7
 8005fee:	f7ff fb6d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005ff2:	e168      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005ff4:	2008      	movs	r0, #8
 8005ff6:	f7ff fb69 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8005ffa:	e164      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005ffc:	2009      	movs	r0, #9
 8005ffe:	f7ff fb65 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006002:	e160      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8006004:	200a      	movs	r0, #10
 8006006:	f7ff fb61 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800600a:	e15c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 800600c:	200b      	movs	r0, #11
 800600e:	f7ff fb5d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006012:	e158      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8006014:	200c      	movs	r0, #12
 8006016:	f7ff fb59 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800601a:	e154      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 800601c:	200d      	movs	r0, #13
 800601e:	f7ff fb55 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006022:	e150      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8006024:	200e      	movs	r0, #14
 8006026:	f7ff fb51 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800602a:	e14c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 800602c:	200f      	movs	r0, #15
 800602e:	f7ff fb4d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006032:	e148      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8006034:	2010      	movs	r0, #16
 8006036:	f7ff fb49 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800603a:	e144      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 800603c:	2011      	movs	r0, #17
 800603e:	f7ff fb45 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006042:	e140      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8006044:	2012      	movs	r0, #18
 8006046:	f7ff fb41 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800604a:	e13c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 800604c:	2013      	movs	r0, #19
 800604e:	f7ff fb3d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006052:	e138      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8006054:	2014      	movs	r0, #20
 8006056:	f7ff fb39 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800605a:	e134      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 800605c:	2015      	movs	r0, #21
 800605e:	f7ff fb35 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006062:	e130      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8006064:	2016      	movs	r0, #22
 8006066:	f7ff fb31 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800606a:	e12c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 800606c:	2017      	movs	r0, #23
 800606e:	f7ff fb2d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006072:	e128      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8006074:	2018      	movs	r0, #24
 8006076:	f7ff fb29 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800607a:	e124      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 800607c:	2019      	movs	r0, #25
 800607e:	f7ff fb25 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006082:	e120      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8006084:	201a      	movs	r0, #26
 8006086:	f7ff fb21 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800608a:	e11c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 800608c:	201b      	movs	r0, #27
 800608e:	f7ff fb1d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006092:	e118      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8006094:	201c      	movs	r0, #28
 8006096:	f7ff fb19 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800609a:	e114      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 800609c:	201d      	movs	r0, #29
 800609e:	f7ff fb15 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060a2:	e110      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 80060a4:	201e      	movs	r0, #30
 80060a6:	f7ff fb11 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060aa:	e10c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 80060ac:	201f      	movs	r0, #31
 80060ae:	f7ff fb0d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060b2:	e108      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 80060b4:	2020      	movs	r0, #32
 80060b6:	f7ff fb09 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060ba:	e104      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 80060bc:	2021      	movs	r0, #33	; 0x21
 80060be:	f7ff fb05 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060c2:	e100      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 80060c4:	2022      	movs	r0, #34	; 0x22
 80060c6:	f7ff fb01 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060ca:	e0fc      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 80060cc:	2023      	movs	r0, #35	; 0x23
 80060ce:	f7ff fafd 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060d2:	e0f8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 80060d4:	2024      	movs	r0, #36	; 0x24
 80060d6:	f7ff faf9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060da:	e0f4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 80060dc:	2025      	movs	r0, #37	; 0x25
 80060de:	f7ff faf5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060e2:	e0f0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 80060e4:	2026      	movs	r0, #38	; 0x26
 80060e6:	f7ff faf1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060ea:	e0ec      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 80060ec:	2027      	movs	r0, #39	; 0x27
 80060ee:	f7ff faed 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060f2:	e0e8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 80060f4:	2028      	movs	r0, #40	; 0x28
 80060f6:	f7ff fae9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80060fa:	e0e4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 80060fc:	2029      	movs	r0, #41	; 0x29
 80060fe:	f7ff fae5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006102:	e0e0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8006104:	202a      	movs	r0, #42	; 0x2a
 8006106:	f7ff fae1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800610a:	e0dc      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 800610c:	202b      	movs	r0, #43	; 0x2b
 800610e:	f7ff fadd 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006112:	e0d8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8006114:	202c      	movs	r0, #44	; 0x2c
 8006116:	f7ff fad9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800611a:	e0d4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 800611c:	202d      	movs	r0, #45	; 0x2d
 800611e:	f7ff fad5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006122:	e0d0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8006124:	202e      	movs	r0, #46	; 0x2e
 8006126:	f7ff fad1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800612a:	e0cc      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 800612c:	202f      	movs	r0, #47	; 0x2f
 800612e:	f7ff facd 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006132:	e0c8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	f7ff fac9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800613a:	e0c4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 800613c:	2031      	movs	r0, #49	; 0x31
 800613e:	f7ff fac5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006142:	e0c0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8006144:	2032      	movs	r0, #50	; 0x32
 8006146:	f7ff fac1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800614a:	e0bc      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 800614c:	2033      	movs	r0, #51	; 0x33
 800614e:	f7ff fabd 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006152:	e0b8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8006154:	2034      	movs	r0, #52	; 0x34
 8006156:	f7ff fab9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800615a:	e0b4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 800615c:	2035      	movs	r0, #53	; 0x35
 800615e:	f7ff fab5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006162:	e0b0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8006164:	2036      	movs	r0, #54	; 0x36
 8006166:	f7ff fab1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800616a:	e0ac      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 800616c:	2037      	movs	r0, #55	; 0x37
 800616e:	f7ff faad 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006172:	e0a8      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8006174:	2038      	movs	r0, #56	; 0x38
 8006176:	f7ff faa9 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800617a:	e0a4      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 800617c:	2039      	movs	r0, #57	; 0x39
 800617e:	f7ff faa5 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006182:	e0a0      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8006184:	203a      	movs	r0, #58	; 0x3a
 8006186:	f7ff faa1 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800618a:	e09c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 800618c:	203b      	movs	r0, #59	; 0x3b
 800618e:	f7ff fa9d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006192:	e098      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8006194:	203c      	movs	r0, #60	; 0x3c
 8006196:	f7ff fa99 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800619a:	e094      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 800619c:	203d      	movs	r0, #61	; 0x3d
 800619e:	f7ff fa95 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061a2:	e090      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 80061a4:	203e      	movs	r0, #62	; 0x3e
 80061a6:	f7ff fa91 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061aa:	e08c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 80061ac:	203f      	movs	r0, #63	; 0x3f
 80061ae:	f7ff fa8d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061b2:	e088      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 80061b4:	2040      	movs	r0, #64	; 0x40
 80061b6:	f7ff fa89 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061ba:	e084      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 80061bc:	2041      	movs	r0, #65	; 0x41
 80061be:	f7ff fa85 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061c2:	e080      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 80061c4:	2042      	movs	r0, #66	; 0x42
 80061c6:	f7ff fa81 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061ca:	e07c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 80061cc:	2043      	movs	r0, #67	; 0x43
 80061ce:	f7ff fa7d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061d2:	e078      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 80061d4:	2044      	movs	r0, #68	; 0x44
 80061d6:	f7ff fa79 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061da:	e074      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 80061dc:	2045      	movs	r0, #69	; 0x45
 80061de:	f7ff fa75 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061e2:	e070      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 80061e4:	2046      	movs	r0, #70	; 0x46
 80061e6:	f7ff fa71 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061ea:	e06c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 80061ec:	2047      	movs	r0, #71	; 0x47
 80061ee:	f7ff fa6d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061f2:	e068      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 80061f4:	2048      	movs	r0, #72	; 0x48
 80061f6:	f7ff fa69 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80061fa:	e064      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 80061fc:	2049      	movs	r0, #73	; 0x49
 80061fe:	f7ff fa65 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006202:	e060      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006204:	204a      	movs	r0, #74	; 0x4a
 8006206:	f7ff fa61 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800620a:	e05c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 800620c:	204b      	movs	r0, #75	; 0x4b
 800620e:	f7ff fa5d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006212:	e058      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006214:	204c      	movs	r0, #76	; 0x4c
 8006216:	f7ff fa59 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800621a:	e054      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 800621c:	204d      	movs	r0, #77	; 0x4d
 800621e:	f7ff fa55 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006222:	e050      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006224:	204e      	movs	r0, #78	; 0x4e
 8006226:	f7ff fa51 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800622a:	e04c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 800622c:	204f      	movs	r0, #79	; 0x4f
 800622e:	f7ff fa4d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006232:	e048      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8006234:	2050      	movs	r0, #80	; 0x50
 8006236:	f7ff fa49 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800623a:	e044      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 800623c:	2051      	movs	r0, #81	; 0x51
 800623e:	f7ff fa45 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006242:	e040      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8006244:	2052      	movs	r0, #82	; 0x52
 8006246:	f7ff fa41 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800624a:	e03c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 800624c:	2053      	movs	r0, #83	; 0x53
 800624e:	f7ff fa3d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006252:	e038      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8006254:	2054      	movs	r0, #84	; 0x54
 8006256:	f7ff fa39 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800625a:	e034      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 800625c:	2055      	movs	r0, #85	; 0x55
 800625e:	f7ff fa35 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006262:	e030      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8006264:	2056      	movs	r0, #86	; 0x56
 8006266:	f7ff fa31 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800626a:	e02c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 800626c:	2057      	movs	r0, #87	; 0x57
 800626e:	f7ff fa2d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006272:	e028      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8006274:	2058      	movs	r0, #88	; 0x58
 8006276:	f7ff fa29 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800627a:	e024      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 800627c:	2059      	movs	r0, #89	; 0x59
 800627e:	f7ff fa25 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006282:	e020      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8006284:	205a      	movs	r0, #90	; 0x5a
 8006286:	f7ff fa21 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800628a:	e01c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 800628c:	205b      	movs	r0, #91	; 0x5b
 800628e:	f7ff fa1d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 8006292:	e018      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006294:	205c      	movs	r0, #92	; 0x5c
 8006296:	f7ff fa19 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 800629a:	e014      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 800629c:	205d      	movs	r0, #93	; 0x5d
 800629e:	f7ff fa15 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80062a2:	e010      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80062a4:	205e      	movs	r0, #94	; 0x5e
 80062a6:	f7ff fa11 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80062aa:	e00c      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 80062ac:	205f      	movs	r0, #95	; 0x5f
 80062ae:	f7ff fa0d 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80062b2:	e008      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 80062b4:	2060      	movs	r0, #96	; 0x60
 80062b6:	f7ff fa09 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80062ba:	e004      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80062bc:	2061      	movs	r0, #97	; 0x61
 80062be:	f7ff fa05 	bl	80056cc <VPP_ApplyPresetToSignal>
			break;
 80062c2:	e000      	b.n	80062c6 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 80062c4:	bf00      	nop
	}
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop

080062d0 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80062e0:	f200 849a 	bhi.w	8006c18 <VPP_ModifySyncOutput+0x948>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <VPP_ModifySyncOutput+0x1c>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006909 	.word	0x08006909
 80062f0:	08006909 	.word	0x08006909
 80062f4:	08006909 	.word	0x08006909
 80062f8:	08006911 	.word	0x08006911
 80062fc:	08006911 	.word	0x08006911
 8006300:	08006911 	.word	0x08006911
 8006304:	08006911 	.word	0x08006911
 8006308:	08006919 	.word	0x08006919
 800630c:	08006919 	.word	0x08006919
 8006310:	08006919 	.word	0x08006919
 8006314:	08006919 	.word	0x08006919
 8006318:	08006921 	.word	0x08006921
 800631c:	08006921 	.word	0x08006921
 8006320:	08006921 	.word	0x08006921
 8006324:	08006921 	.word	0x08006921
 8006328:	08006929 	.word	0x08006929
 800632c:	08006929 	.word	0x08006929
 8006330:	08006929 	.word	0x08006929
 8006334:	08006929 	.word	0x08006929
 8006338:	08006931 	.word	0x08006931
 800633c:	08006931 	.word	0x08006931
 8006340:	08006931 	.word	0x08006931
 8006344:	08006931 	.word	0x08006931
 8006348:	08006939 	.word	0x08006939
 800634c:	08006939 	.word	0x08006939
 8006350:	08006939 	.word	0x08006939
 8006354:	08006939 	.word	0x08006939
 8006358:	08006941 	.word	0x08006941
 800635c:	08006941 	.word	0x08006941
 8006360:	08006941 	.word	0x08006941
 8006364:	08006941 	.word	0x08006941
 8006368:	08006949 	.word	0x08006949
 800636c:	08006949 	.word	0x08006949
 8006370:	08006949 	.word	0x08006949
 8006374:	08006949 	.word	0x08006949
 8006378:	08006951 	.word	0x08006951
 800637c:	08006951 	.word	0x08006951
 8006380:	08006951 	.word	0x08006951
 8006384:	08006951 	.word	0x08006951
 8006388:	08006959 	.word	0x08006959
 800638c:	08006959 	.word	0x08006959
 8006390:	08006959 	.word	0x08006959
 8006394:	08006959 	.word	0x08006959
 8006398:	08006961 	.word	0x08006961
 800639c:	08006961 	.word	0x08006961
 80063a0:	08006961 	.word	0x08006961
 80063a4:	08006961 	.word	0x08006961
 80063a8:	08006969 	.word	0x08006969
 80063ac:	08006969 	.word	0x08006969
 80063b0:	08006969 	.word	0x08006969
 80063b4:	08006969 	.word	0x08006969
 80063b8:	08006971 	.word	0x08006971
 80063bc:	08006971 	.word	0x08006971
 80063c0:	08006971 	.word	0x08006971
 80063c4:	08006971 	.word	0x08006971
 80063c8:	08006979 	.word	0x08006979
 80063cc:	08006979 	.word	0x08006979
 80063d0:	08006979 	.word	0x08006979
 80063d4:	08006979 	.word	0x08006979
 80063d8:	08006981 	.word	0x08006981
 80063dc:	08006981 	.word	0x08006981
 80063e0:	08006981 	.word	0x08006981
 80063e4:	08006981 	.word	0x08006981
 80063e8:	08006989 	.word	0x08006989
 80063ec:	08006989 	.word	0x08006989
 80063f0:	08006989 	.word	0x08006989
 80063f4:	08006989 	.word	0x08006989
 80063f8:	08006991 	.word	0x08006991
 80063fc:	08006991 	.word	0x08006991
 8006400:	08006991 	.word	0x08006991
 8006404:	08006991 	.word	0x08006991
 8006408:	08006999 	.word	0x08006999
 800640c:	08006999 	.word	0x08006999
 8006410:	08006999 	.word	0x08006999
 8006414:	08006999 	.word	0x08006999
 8006418:	080069a1 	.word	0x080069a1
 800641c:	080069a1 	.word	0x080069a1
 8006420:	080069a1 	.word	0x080069a1
 8006424:	080069a1 	.word	0x080069a1
 8006428:	080069a9 	.word	0x080069a9
 800642c:	080069a9 	.word	0x080069a9
 8006430:	080069a9 	.word	0x080069a9
 8006434:	080069a9 	.word	0x080069a9
 8006438:	080069b1 	.word	0x080069b1
 800643c:	080069b1 	.word	0x080069b1
 8006440:	080069b1 	.word	0x080069b1
 8006444:	080069b1 	.word	0x080069b1
 8006448:	080069b9 	.word	0x080069b9
 800644c:	080069b9 	.word	0x080069b9
 8006450:	080069b9 	.word	0x080069b9
 8006454:	080069b9 	.word	0x080069b9
 8006458:	080069c1 	.word	0x080069c1
 800645c:	080069c1 	.word	0x080069c1
 8006460:	080069c1 	.word	0x080069c1
 8006464:	080069c1 	.word	0x080069c1
 8006468:	080069c9 	.word	0x080069c9
 800646c:	080069c9 	.word	0x080069c9
 8006470:	080069c9 	.word	0x080069c9
 8006474:	080069c9 	.word	0x080069c9
 8006478:	080069d1 	.word	0x080069d1
 800647c:	080069d1 	.word	0x080069d1
 8006480:	080069d1 	.word	0x080069d1
 8006484:	080069d1 	.word	0x080069d1
 8006488:	080069d9 	.word	0x080069d9
 800648c:	080069d9 	.word	0x080069d9
 8006490:	080069d9 	.word	0x080069d9
 8006494:	080069d9 	.word	0x080069d9
 8006498:	080069e1 	.word	0x080069e1
 800649c:	080069e1 	.word	0x080069e1
 80064a0:	080069e1 	.word	0x080069e1
 80064a4:	080069e1 	.word	0x080069e1
 80064a8:	080069e9 	.word	0x080069e9
 80064ac:	080069e9 	.word	0x080069e9
 80064b0:	080069e9 	.word	0x080069e9
 80064b4:	080069e9 	.word	0x080069e9
 80064b8:	080069f1 	.word	0x080069f1
 80064bc:	080069f1 	.word	0x080069f1
 80064c0:	080069f1 	.word	0x080069f1
 80064c4:	080069f1 	.word	0x080069f1
 80064c8:	080069f9 	.word	0x080069f9
 80064cc:	080069f9 	.word	0x080069f9
 80064d0:	080069f9 	.word	0x080069f9
 80064d4:	080069f9 	.word	0x080069f9
 80064d8:	08006a01 	.word	0x08006a01
 80064dc:	08006a01 	.word	0x08006a01
 80064e0:	08006a01 	.word	0x08006a01
 80064e4:	08006a01 	.word	0x08006a01
 80064e8:	08006a09 	.word	0x08006a09
 80064ec:	08006a09 	.word	0x08006a09
 80064f0:	08006a09 	.word	0x08006a09
 80064f4:	08006a09 	.word	0x08006a09
 80064f8:	08006a11 	.word	0x08006a11
 80064fc:	08006a11 	.word	0x08006a11
 8006500:	08006a11 	.word	0x08006a11
 8006504:	08006a11 	.word	0x08006a11
 8006508:	08006a19 	.word	0x08006a19
 800650c:	08006a19 	.word	0x08006a19
 8006510:	08006a19 	.word	0x08006a19
 8006514:	08006a19 	.word	0x08006a19
 8006518:	08006a21 	.word	0x08006a21
 800651c:	08006a21 	.word	0x08006a21
 8006520:	08006a21 	.word	0x08006a21
 8006524:	08006a21 	.word	0x08006a21
 8006528:	08006a29 	.word	0x08006a29
 800652c:	08006a29 	.word	0x08006a29
 8006530:	08006a29 	.word	0x08006a29
 8006534:	08006a29 	.word	0x08006a29
 8006538:	08006a31 	.word	0x08006a31
 800653c:	08006a31 	.word	0x08006a31
 8006540:	08006a31 	.word	0x08006a31
 8006544:	08006a31 	.word	0x08006a31
 8006548:	08006a39 	.word	0x08006a39
 800654c:	08006a39 	.word	0x08006a39
 8006550:	08006a39 	.word	0x08006a39
 8006554:	08006a39 	.word	0x08006a39
 8006558:	08006a41 	.word	0x08006a41
 800655c:	08006a41 	.word	0x08006a41
 8006560:	08006a41 	.word	0x08006a41
 8006564:	08006a41 	.word	0x08006a41
 8006568:	08006a49 	.word	0x08006a49
 800656c:	08006a49 	.word	0x08006a49
 8006570:	08006a49 	.word	0x08006a49
 8006574:	08006a49 	.word	0x08006a49
 8006578:	08006a51 	.word	0x08006a51
 800657c:	08006a51 	.word	0x08006a51
 8006580:	08006a51 	.word	0x08006a51
 8006584:	08006a51 	.word	0x08006a51
 8006588:	08006a59 	.word	0x08006a59
 800658c:	08006a59 	.word	0x08006a59
 8006590:	08006a59 	.word	0x08006a59
 8006594:	08006a59 	.word	0x08006a59
 8006598:	08006a61 	.word	0x08006a61
 800659c:	08006a61 	.word	0x08006a61
 80065a0:	08006a61 	.word	0x08006a61
 80065a4:	08006a61 	.word	0x08006a61
 80065a8:	08006a69 	.word	0x08006a69
 80065ac:	08006a69 	.word	0x08006a69
 80065b0:	08006a69 	.word	0x08006a69
 80065b4:	08006a69 	.word	0x08006a69
 80065b8:	08006a71 	.word	0x08006a71
 80065bc:	08006a71 	.word	0x08006a71
 80065c0:	08006a71 	.word	0x08006a71
 80065c4:	08006a71 	.word	0x08006a71
 80065c8:	08006a79 	.word	0x08006a79
 80065cc:	08006a79 	.word	0x08006a79
 80065d0:	08006a79 	.word	0x08006a79
 80065d4:	08006a79 	.word	0x08006a79
 80065d8:	08006a81 	.word	0x08006a81
 80065dc:	08006a81 	.word	0x08006a81
 80065e0:	08006a81 	.word	0x08006a81
 80065e4:	08006a81 	.word	0x08006a81
 80065e8:	08006a89 	.word	0x08006a89
 80065ec:	08006a89 	.word	0x08006a89
 80065f0:	08006a89 	.word	0x08006a89
 80065f4:	08006a89 	.word	0x08006a89
 80065f8:	08006a91 	.word	0x08006a91
 80065fc:	08006a91 	.word	0x08006a91
 8006600:	08006a91 	.word	0x08006a91
 8006604:	08006a91 	.word	0x08006a91
 8006608:	08006a99 	.word	0x08006a99
 800660c:	08006a99 	.word	0x08006a99
 8006610:	08006a99 	.word	0x08006a99
 8006614:	08006a99 	.word	0x08006a99
 8006618:	08006aa1 	.word	0x08006aa1
 800661c:	08006aa1 	.word	0x08006aa1
 8006620:	08006aa1 	.word	0x08006aa1
 8006624:	08006aa1 	.word	0x08006aa1
 8006628:	08006aa9 	.word	0x08006aa9
 800662c:	08006aa9 	.word	0x08006aa9
 8006630:	08006aa9 	.word	0x08006aa9
 8006634:	08006aa9 	.word	0x08006aa9
 8006638:	08006ab1 	.word	0x08006ab1
 800663c:	08006ab1 	.word	0x08006ab1
 8006640:	08006ab1 	.word	0x08006ab1
 8006644:	08006ab1 	.word	0x08006ab1
 8006648:	08006ab9 	.word	0x08006ab9
 800664c:	08006ab9 	.word	0x08006ab9
 8006650:	08006ab9 	.word	0x08006ab9
 8006654:	08006ab9 	.word	0x08006ab9
 8006658:	08006ac1 	.word	0x08006ac1
 800665c:	08006ac1 	.word	0x08006ac1
 8006660:	08006ac1 	.word	0x08006ac1
 8006664:	08006ac1 	.word	0x08006ac1
 8006668:	08006ac9 	.word	0x08006ac9
 800666c:	08006ac9 	.word	0x08006ac9
 8006670:	08006ac9 	.word	0x08006ac9
 8006674:	08006ac9 	.word	0x08006ac9
 8006678:	08006ad1 	.word	0x08006ad1
 800667c:	08006ad1 	.word	0x08006ad1
 8006680:	08006ad1 	.word	0x08006ad1
 8006684:	08006ad1 	.word	0x08006ad1
 8006688:	08006ad9 	.word	0x08006ad9
 800668c:	08006ad9 	.word	0x08006ad9
 8006690:	08006ad9 	.word	0x08006ad9
 8006694:	08006ad9 	.word	0x08006ad9
 8006698:	08006ae1 	.word	0x08006ae1
 800669c:	08006ae1 	.word	0x08006ae1
 80066a0:	08006ae1 	.word	0x08006ae1
 80066a4:	08006ae1 	.word	0x08006ae1
 80066a8:	08006ae9 	.word	0x08006ae9
 80066ac:	08006ae9 	.word	0x08006ae9
 80066b0:	08006ae9 	.word	0x08006ae9
 80066b4:	08006ae9 	.word	0x08006ae9
 80066b8:	08006af1 	.word	0x08006af1
 80066bc:	08006af1 	.word	0x08006af1
 80066c0:	08006af1 	.word	0x08006af1
 80066c4:	08006af1 	.word	0x08006af1
 80066c8:	08006af9 	.word	0x08006af9
 80066cc:	08006af9 	.word	0x08006af9
 80066d0:	08006af9 	.word	0x08006af9
 80066d4:	08006af9 	.word	0x08006af9
 80066d8:	08006b01 	.word	0x08006b01
 80066dc:	08006b01 	.word	0x08006b01
 80066e0:	08006b01 	.word	0x08006b01
 80066e4:	08006b01 	.word	0x08006b01
 80066e8:	08006b09 	.word	0x08006b09
 80066ec:	08006b09 	.word	0x08006b09
 80066f0:	08006b09 	.word	0x08006b09
 80066f4:	08006b09 	.word	0x08006b09
 80066f8:	08006b11 	.word	0x08006b11
 80066fc:	08006b11 	.word	0x08006b11
 8006700:	08006b11 	.word	0x08006b11
 8006704:	08006b11 	.word	0x08006b11
 8006708:	08006b19 	.word	0x08006b19
 800670c:	08006b19 	.word	0x08006b19
 8006710:	08006b19 	.word	0x08006b19
 8006714:	08006b19 	.word	0x08006b19
 8006718:	08006b21 	.word	0x08006b21
 800671c:	08006b21 	.word	0x08006b21
 8006720:	08006b21 	.word	0x08006b21
 8006724:	08006b21 	.word	0x08006b21
 8006728:	08006b29 	.word	0x08006b29
 800672c:	08006b29 	.word	0x08006b29
 8006730:	08006b29 	.word	0x08006b29
 8006734:	08006b29 	.word	0x08006b29
 8006738:	08006b31 	.word	0x08006b31
 800673c:	08006b31 	.word	0x08006b31
 8006740:	08006b31 	.word	0x08006b31
 8006744:	08006b31 	.word	0x08006b31
 8006748:	08006b39 	.word	0x08006b39
 800674c:	08006b39 	.word	0x08006b39
 8006750:	08006b39 	.word	0x08006b39
 8006754:	08006b39 	.word	0x08006b39
 8006758:	08006b41 	.word	0x08006b41
 800675c:	08006b41 	.word	0x08006b41
 8006760:	08006b41 	.word	0x08006b41
 8006764:	08006b41 	.word	0x08006b41
 8006768:	08006b49 	.word	0x08006b49
 800676c:	08006b49 	.word	0x08006b49
 8006770:	08006b49 	.word	0x08006b49
 8006774:	08006b49 	.word	0x08006b49
 8006778:	08006b51 	.word	0x08006b51
 800677c:	08006b51 	.word	0x08006b51
 8006780:	08006b51 	.word	0x08006b51
 8006784:	08006b51 	.word	0x08006b51
 8006788:	08006b59 	.word	0x08006b59
 800678c:	08006b59 	.word	0x08006b59
 8006790:	08006b59 	.word	0x08006b59
 8006794:	08006b59 	.word	0x08006b59
 8006798:	08006b61 	.word	0x08006b61
 800679c:	08006b61 	.word	0x08006b61
 80067a0:	08006b61 	.word	0x08006b61
 80067a4:	08006b61 	.word	0x08006b61
 80067a8:	08006b69 	.word	0x08006b69
 80067ac:	08006b69 	.word	0x08006b69
 80067b0:	08006b69 	.word	0x08006b69
 80067b4:	08006b69 	.word	0x08006b69
 80067b8:	08006b71 	.word	0x08006b71
 80067bc:	08006b71 	.word	0x08006b71
 80067c0:	08006b71 	.word	0x08006b71
 80067c4:	08006b71 	.word	0x08006b71
 80067c8:	08006b79 	.word	0x08006b79
 80067cc:	08006b79 	.word	0x08006b79
 80067d0:	08006b79 	.word	0x08006b79
 80067d4:	08006b79 	.word	0x08006b79
 80067d8:	08006b81 	.word	0x08006b81
 80067dc:	08006b81 	.word	0x08006b81
 80067e0:	08006b81 	.word	0x08006b81
 80067e4:	08006b81 	.word	0x08006b81
 80067e8:	08006b89 	.word	0x08006b89
 80067ec:	08006b89 	.word	0x08006b89
 80067f0:	08006b89 	.word	0x08006b89
 80067f4:	08006b89 	.word	0x08006b89
 80067f8:	08006b91 	.word	0x08006b91
 80067fc:	08006b91 	.word	0x08006b91
 8006800:	08006b91 	.word	0x08006b91
 8006804:	08006b91 	.word	0x08006b91
 8006808:	08006b99 	.word	0x08006b99
 800680c:	08006b99 	.word	0x08006b99
 8006810:	08006b99 	.word	0x08006b99
 8006814:	08006b99 	.word	0x08006b99
 8006818:	08006ba1 	.word	0x08006ba1
 800681c:	08006ba1 	.word	0x08006ba1
 8006820:	08006ba1 	.word	0x08006ba1
 8006824:	08006ba1 	.word	0x08006ba1
 8006828:	08006ba9 	.word	0x08006ba9
 800682c:	08006ba9 	.word	0x08006ba9
 8006830:	08006ba9 	.word	0x08006ba9
 8006834:	08006ba9 	.word	0x08006ba9
 8006838:	08006bb1 	.word	0x08006bb1
 800683c:	08006bb1 	.word	0x08006bb1
 8006840:	08006bb1 	.word	0x08006bb1
 8006844:	08006bb1 	.word	0x08006bb1
 8006848:	08006bb9 	.word	0x08006bb9
 800684c:	08006bb9 	.word	0x08006bb9
 8006850:	08006bb9 	.word	0x08006bb9
 8006854:	08006bb9 	.word	0x08006bb9
 8006858:	08006bc1 	.word	0x08006bc1
 800685c:	08006bc1 	.word	0x08006bc1
 8006860:	08006bc1 	.word	0x08006bc1
 8006864:	08006bc1 	.word	0x08006bc1
 8006868:	08006bc9 	.word	0x08006bc9
 800686c:	08006bc9 	.word	0x08006bc9
 8006870:	08006bc9 	.word	0x08006bc9
 8006874:	08006bc9 	.word	0x08006bc9
 8006878:	08006bd1 	.word	0x08006bd1
 800687c:	08006bd1 	.word	0x08006bd1
 8006880:	08006bd1 	.word	0x08006bd1
 8006884:	08006bd1 	.word	0x08006bd1
 8006888:	08006bd9 	.word	0x08006bd9
 800688c:	08006bd9 	.word	0x08006bd9
 8006890:	08006bd9 	.word	0x08006bd9
 8006894:	08006bd9 	.word	0x08006bd9
 8006898:	08006be1 	.word	0x08006be1
 800689c:	08006be1 	.word	0x08006be1
 80068a0:	08006be1 	.word	0x08006be1
 80068a4:	08006be1 	.word	0x08006be1
 80068a8:	08006be9 	.word	0x08006be9
 80068ac:	08006be9 	.word	0x08006be9
 80068b0:	08006be9 	.word	0x08006be9
 80068b4:	08006be9 	.word	0x08006be9
 80068b8:	08006bf1 	.word	0x08006bf1
 80068bc:	08006bf1 	.word	0x08006bf1
 80068c0:	08006bf1 	.word	0x08006bf1
 80068c4:	08006bf1 	.word	0x08006bf1
 80068c8:	08006bf9 	.word	0x08006bf9
 80068cc:	08006bf9 	.word	0x08006bf9
 80068d0:	08006bf9 	.word	0x08006bf9
 80068d4:	08006bf9 	.word	0x08006bf9
 80068d8:	08006c01 	.word	0x08006c01
 80068dc:	08006c01 	.word	0x08006c01
 80068e0:	08006c01 	.word	0x08006c01
 80068e4:	08006c01 	.word	0x08006c01
 80068e8:	08006c09 	.word	0x08006c09
 80068ec:	08006c09 	.word	0x08006c09
 80068f0:	08006c09 	.word	0x08006c09
 80068f4:	08006c09 	.word	0x08006c09
 80068f8:	08006c11 	.word	0x08006c11
 80068fc:	08006c11 	.word	0x08006c11
 8006900:	08006c11 	.word	0x08006c11
 8006904:	08006c11 	.word	0x08006c11
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006908:	2000      	movs	r0, #0
 800690a:	f7fe ff0d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800690e:	e184      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006910:	2001      	movs	r0, #1
 8006912:	f7fe ff09 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006916:	e180      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006918:	2002      	movs	r0, #2
 800691a:	f7fe ff05 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800691e:	e17c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006920:	2003      	movs	r0, #3
 8006922:	f7fe ff01 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006926:	e178      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006928:	2004      	movs	r0, #4
 800692a:	f7fe fefd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800692e:	e174      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006930:	2005      	movs	r0, #5
 8006932:	f7fe fef9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006936:	e170      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006938:	2006      	movs	r0, #6
 800693a:	f7fe fef5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800693e:	e16c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006940:	2007      	movs	r0, #7
 8006942:	f7fe fef1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006946:	e168      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006948:	2008      	movs	r0, #8
 800694a:	f7fe feed 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800694e:	e164      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006950:	2009      	movs	r0, #9
 8006952:	f7fe fee9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006956:	e160      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006958:	200a      	movs	r0, #10
 800695a:	f7fe fee5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800695e:	e15c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006960:	200b      	movs	r0, #11
 8006962:	f7fe fee1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006966:	e158      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006968:	200c      	movs	r0, #12
 800696a:	f7fe fedd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800696e:	e154      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006970:	200d      	movs	r0, #13
 8006972:	f7fe fed9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006976:	e150      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006978:	200e      	movs	r0, #14
 800697a:	f7fe fed5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800697e:	e14c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006980:	200f      	movs	r0, #15
 8006982:	f7fe fed1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006986:	e148      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006988:	2010      	movs	r0, #16
 800698a:	f7fe fecd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800698e:	e144      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006990:	2011      	movs	r0, #17
 8006992:	f7fe fec9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006996:	e140      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006998:	2012      	movs	r0, #18
 800699a:	f7fe fec5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 800699e:	e13c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 80069a0:	2013      	movs	r0, #19
 80069a2:	f7fe fec1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069a6:	e138      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 80069a8:	2014      	movs	r0, #20
 80069aa:	f7fe febd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069ae:	e134      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 80069b0:	2015      	movs	r0, #21
 80069b2:	f7fe feb9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069b6:	e130      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 80069b8:	2016      	movs	r0, #22
 80069ba:	f7fe feb5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069be:	e12c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 80069c0:	2017      	movs	r0, #23
 80069c2:	f7fe feb1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069c6:	e128      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80069c8:	2018      	movs	r0, #24
 80069ca:	f7fe fead 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069ce:	e124      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80069d0:	2019      	movs	r0, #25
 80069d2:	f7fe fea9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069d6:	e120      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80069d8:	201a      	movs	r0, #26
 80069da:	f7fe fea5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069de:	e11c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80069e0:	201b      	movs	r0, #27
 80069e2:	f7fe fea1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069e6:	e118      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80069e8:	201c      	movs	r0, #28
 80069ea:	f7fe fe9d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069ee:	e114      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 80069f0:	201d      	movs	r0, #29
 80069f2:	f7fe fe99 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069f6:	e110      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 80069f8:	201e      	movs	r0, #30
 80069fa:	f7fe fe95 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 80069fe:	e10c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006a00:	201f      	movs	r0, #31
 8006a02:	f7fe fe91 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a06:	e108      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006a08:	2020      	movs	r0, #32
 8006a0a:	f7fe fe8d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a0e:	e104      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006a10:	2021      	movs	r0, #33	; 0x21
 8006a12:	f7fe fe89 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a16:	e100      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006a18:	2022      	movs	r0, #34	; 0x22
 8006a1a:	f7fe fe85 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a1e:	e0fc      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006a20:	2023      	movs	r0, #35	; 0x23
 8006a22:	f7fe fe81 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a26:	e0f8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006a28:	2024      	movs	r0, #36	; 0x24
 8006a2a:	f7fe fe7d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a2e:	e0f4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006a30:	2025      	movs	r0, #37	; 0x25
 8006a32:	f7fe fe79 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a36:	e0f0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006a38:	2026      	movs	r0, #38	; 0x26
 8006a3a:	f7fe fe75 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a3e:	e0ec      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006a40:	2027      	movs	r0, #39	; 0x27
 8006a42:	f7fe fe71 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a46:	e0e8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006a48:	2028      	movs	r0, #40	; 0x28
 8006a4a:	f7fe fe6d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a4e:	e0e4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006a50:	2029      	movs	r0, #41	; 0x29
 8006a52:	f7fe fe69 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a56:	e0e0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006a58:	202a      	movs	r0, #42	; 0x2a
 8006a5a:	f7fe fe65 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a5e:	e0dc      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006a60:	202b      	movs	r0, #43	; 0x2b
 8006a62:	f7fe fe61 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a66:	e0d8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006a68:	202c      	movs	r0, #44	; 0x2c
 8006a6a:	f7fe fe5d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a6e:	e0d4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006a70:	202d      	movs	r0, #45	; 0x2d
 8006a72:	f7fe fe59 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a76:	e0d0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006a78:	202e      	movs	r0, #46	; 0x2e
 8006a7a:	f7fe fe55 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a7e:	e0cc      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006a80:	202f      	movs	r0, #47	; 0x2f
 8006a82:	f7fe fe51 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a86:	e0c8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006a88:	2030      	movs	r0, #48	; 0x30
 8006a8a:	f7fe fe4d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a8e:	e0c4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006a90:	2031      	movs	r0, #49	; 0x31
 8006a92:	f7fe fe49 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a96:	e0c0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006a98:	2032      	movs	r0, #50	; 0x32
 8006a9a:	f7fe fe45 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006a9e:	e0bc      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8006aa0:	2033      	movs	r0, #51	; 0x33
 8006aa2:	f7fe fe41 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006aa6:	e0b8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006aa8:	2034      	movs	r0, #52	; 0x34
 8006aaa:	f7fe fe3d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006aae:	e0b4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8006ab0:	2035      	movs	r0, #53	; 0x35
 8006ab2:	f7fe fe39 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ab6:	e0b0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006ab8:	2036      	movs	r0, #54	; 0x36
 8006aba:	f7fe fe35 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006abe:	e0ac      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8006ac0:	2037      	movs	r0, #55	; 0x37
 8006ac2:	f7fe fe31 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ac6:	e0a8      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006ac8:	2038      	movs	r0, #56	; 0x38
 8006aca:	f7fe fe2d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ace:	e0a4      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8006ad0:	2039      	movs	r0, #57	; 0x39
 8006ad2:	f7fe fe29 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ad6:	e0a0      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006ad8:	203a      	movs	r0, #58	; 0x3a
 8006ada:	f7fe fe25 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ade:	e09c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8006ae0:	203b      	movs	r0, #59	; 0x3b
 8006ae2:	f7fe fe21 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ae6:	e098      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006ae8:	203c      	movs	r0, #60	; 0x3c
 8006aea:	f7fe fe1d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006aee:	e094      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006af0:	203d      	movs	r0, #61	; 0x3d
 8006af2:	f7fe fe19 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006af6:	e090      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006af8:	203e      	movs	r0, #62	; 0x3e
 8006afa:	f7fe fe15 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006afe:	e08c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006b00:	203f      	movs	r0, #63	; 0x3f
 8006b02:	f7fe fe11 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b06:	e088      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006b08:	2040      	movs	r0, #64	; 0x40
 8006b0a:	f7fe fe0d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b0e:	e084      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006b10:	2041      	movs	r0, #65	; 0x41
 8006b12:	f7fe fe09 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b16:	e080      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006b18:	2042      	movs	r0, #66	; 0x42
 8006b1a:	f7fe fe05 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b1e:	e07c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006b20:	2043      	movs	r0, #67	; 0x43
 8006b22:	f7fe fe01 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b26:	e078      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006b28:	2044      	movs	r0, #68	; 0x44
 8006b2a:	f7fe fdfd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b2e:	e074      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006b30:	2045      	movs	r0, #69	; 0x45
 8006b32:	f7fe fdf9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b36:	e070      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006b38:	2046      	movs	r0, #70	; 0x46
 8006b3a:	f7fe fdf5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b3e:	e06c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006b40:	2047      	movs	r0, #71	; 0x47
 8006b42:	f7fe fdf1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b46:	e068      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006b48:	2048      	movs	r0, #72	; 0x48
 8006b4a:	f7fe fded 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b4e:	e064      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006b50:	2049      	movs	r0, #73	; 0x49
 8006b52:	f7fe fde9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b56:	e060      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006b58:	204a      	movs	r0, #74	; 0x4a
 8006b5a:	f7fe fde5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b5e:	e05c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006b60:	204b      	movs	r0, #75	; 0x4b
 8006b62:	f7fe fde1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b66:	e058      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006b68:	204c      	movs	r0, #76	; 0x4c
 8006b6a:	f7fe fddd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b6e:	e054      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006b70:	204d      	movs	r0, #77	; 0x4d
 8006b72:	f7fe fdd9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b76:	e050      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006b78:	204e      	movs	r0, #78	; 0x4e
 8006b7a:	f7fe fdd5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b7e:	e04c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006b80:	204f      	movs	r0, #79	; 0x4f
 8006b82:	f7fe fdd1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b86:	e048      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006b88:	2050      	movs	r0, #80	; 0x50
 8006b8a:	f7fe fdcd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b8e:	e044      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006b90:	2051      	movs	r0, #81	; 0x51
 8006b92:	f7fe fdc9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b96:	e040      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006b98:	2052      	movs	r0, #82	; 0x52
 8006b9a:	f7fe fdc5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006b9e:	e03c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8006ba0:	2053      	movs	r0, #83	; 0x53
 8006ba2:	f7fe fdc1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006ba6:	e038      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006ba8:	2054      	movs	r0, #84	; 0x54
 8006baa:	f7fe fdbd 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bae:	e034      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8006bb0:	2055      	movs	r0, #85	; 0x55
 8006bb2:	f7fe fdb9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bb6:	e030      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006bb8:	2056      	movs	r0, #86	; 0x56
 8006bba:	f7fe fdb5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bbe:	e02c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8006bc0:	2057      	movs	r0, #87	; 0x57
 8006bc2:	f7fe fdb1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bc6:	e028      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006bc8:	2058      	movs	r0, #88	; 0x58
 8006bca:	f7fe fdad 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bce:	e024      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8006bd0:	2059      	movs	r0, #89	; 0x59
 8006bd2:	f7fe fda9 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bd6:	e020      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006bd8:	205a      	movs	r0, #90	; 0x5a
 8006bda:	f7fe fda5 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bde:	e01c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8006be0:	205b      	movs	r0, #91	; 0x5b
 8006be2:	f7fe fda1 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006be6:	e018      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006be8:	205c      	movs	r0, #92	; 0x5c
 8006bea:	f7fe fd9d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bee:	e014      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006bf0:	205d      	movs	r0, #93	; 0x5d
 8006bf2:	f7fe fd99 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bf6:	e010      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006bf8:	205e      	movs	r0, #94	; 0x5e
 8006bfa:	f7fe fd95 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006bfe:	e00c      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006c00:	205f      	movs	r0, #95	; 0x5f
 8006c02:	f7fe fd91 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006c06:	e008      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006c08:	2060      	movs	r0, #96	; 0x60
 8006c0a:	f7fe fd8d 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006c0e:	e004      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006c10:	2061      	movs	r0, #97	; 0x61
 8006c12:	f7fe fd89 	bl	8005728 <VPP_ApplyPresetToSync>
			break;
 8006c16:	e000      	b.n	8006c1a <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006c18:	bf00      	nop
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	2220      	movs	r2, #32
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f007 fe3b 	bl	800e8b8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006c42:	4b32      	ldr	r3, [pc, #200]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006c4a:	4b30      	ldr	r3, [pc, #192]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c52:	4b2e      	ldr	r3, [pc, #184]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c58:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006c64:	4b29      	ldr	r3, [pc, #164]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c6a:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006c70:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006c76:	4b25      	ldr	r3, [pc, #148]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006c7c:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c82:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c8a:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c90:	4b1e      	ldr	r3, [pc, #120]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006ca6:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006cae:	4817      	ldr	r0, [pc, #92]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006cb0:	f001 fee2 	bl	8008a78 <HAL_ADC_Init>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006cba:	f000 feaf 	bl	8007a1c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4810      	ldr	r0, [pc, #64]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006cca:	f002 fc6b 	bl	80095a4 <HAL_ADCEx_MultiModeConfigChannel>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006cd4:	f000 fea2 	bl	8007a1c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <MX_ADC1_Init+0xec>)
 8006cda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cdc:	2306      	movs	r3, #6
 8006cde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006ce4:	237f      	movs	r3, #127	; 0x7f
 8006ce6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006ce8:	2304      	movs	r3, #4
 8006cea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <MX_ADC1_Init+0xe8>)
 8006cf6:	f002 f87f 	bl	8008df8 <HAL_ADC_ConfigChannel>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006d00:	f000 fe8c 	bl	8007a1c <Error_Handler>
  }

}
 8006d04:	bf00      	nop
 8006d06:	3730      	adds	r7, #48	; 0x30
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	2000200c 	.word	0x2000200c
 8006d10:	0c900008 	.word	0x0c900008

08006d14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d1c:	f107 0314 	add.w	r3, r7, #20
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	609a      	str	r2, [r3, #8]
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d34:	d14f      	bne.n	8006dd6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006d36:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d42:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <HAL_ADC_MspInit+0xcc>)
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d66:	2304      	movs	r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4619      	mov	r1, r3
 8006d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d7c:	f003 fff4 	bl	800ad68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006d80:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <HAL_ADC_MspInit+0xd4>)
 8006d84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006d86:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006d88:	2205      	movs	r2, #5
 8006d8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006d98:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006d9a:	2280      	movs	r2, #128	; 0x80
 8006d9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006db0:	2220      	movs	r2, #32
 8006db2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006db4:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006dba:	480a      	ldr	r0, [pc, #40]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006dbc:	f003 fd08 	bl	800a7d0 <HAL_DMA_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006dc6:	f000 fe29 	bl	8007a1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
 8006dd0:	4a04      	ldr	r2, [pc, #16]	; (8006de4 <HAL_ADC_MspInit+0xd0>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3728      	adds	r7, #40	; 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40021000 	.word	0x40021000
 8006de4:	20002078 	.word	0x20002078
 8006de8:	40020008 	.word	0x40020008

08006dec <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006df2:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <MX_COMP1_Init+0x48>)
 8006df4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006df6:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <MX_COMP1_Init+0x4c>)
 8006e00:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006e1a:	4805      	ldr	r0, [pc, #20]	; (8006e30 <MX_COMP1_Init+0x44>)
 8006e1c:	f002 fe16 	bl	8009a4c <HAL_COMP_Init>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006e26:	f000 fdf9 	bl	8007a1c <Error_Handler>
  }

}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200020d8 	.word	0x200020d8
 8006e34:	40010200 	.word	0x40010200
 8006e38:	00800030 	.word	0x00800030

08006e3c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	609a      	str	r2, [r3, #8]
 8006e50:	60da      	str	r2, [r3, #12]
 8006e52:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <HAL_COMP_MspInit+0x5c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d118      	bne.n	8006e90 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e5e:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <HAL_COMP_MspInit+0x60>)
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <HAL_COMP_MspInit+0x60>)
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HAL_COMP_MspInit+0x60>)
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e76:	2302      	movs	r3, #2
 8006e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	4619      	mov	r1, r3
 8006e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e8c:	f003 ff6c 	bl	800ad68 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006e90:	bf00      	nop
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40010200 	.word	0x40010200
 8006e9c:	40021000 	.word	0x40021000

08006ea0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	2230      	movs	r2, #48	; 0x30
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f007 fd03 	bl	800e8b8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006eb2:	4b1e      	ldr	r3, [pc, #120]	; (8006f2c <MX_DAC1_Init+0x8c>)
 8006eb4:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <MX_DAC1_Init+0x90>)
 8006eb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006eb8:	481c      	ldr	r0, [pc, #112]	; (8006f2c <MX_DAC1_Init+0x8c>)
 8006eba:	f003 f86a 	bl	8009f92 <HAL_DAC_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006ec4:	f000 fdaa 	bl	8007a1c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ecc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006eda:	2306      	movs	r3, #6
 8006edc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006eee:	463b      	mov	r3, r7
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	480d      	ldr	r0, [pc, #52]	; (8006f2c <MX_DAC1_Init+0x8c>)
 8006ef6:	f003 fa35 	bl	800a364 <HAL_DAC_ConfigChannel>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006f00:	f000 fd8c 	bl	8007a1c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	2210      	movs	r2, #16
 8006f10:	4619      	mov	r1, r3
 8006f12:	4806      	ldr	r0, [pc, #24]	; (8006f2c <MX_DAC1_Init+0x8c>)
 8006f14:	f003 fa26 	bl	800a364 <HAL_DAC_ConfigChannel>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006f1e:	f000 fd7d 	bl	8007a1c <Error_Handler>
  }

}
 8006f22:	bf00      	nop
 8006f24:	3730      	adds	r7, #48	; 0x30
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20002110 	.word	0x20002110
 8006f30:	50000800 	.word	0x50000800

08006f34 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08c      	sub	sp, #48	; 0x30
 8006f38:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	2230      	movs	r2, #48	; 0x30
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f007 fcb9 	bl	800e8b8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <MX_DAC2_Init+0x6c>)
 8006f48:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <MX_DAC2_Init+0x70>)
 8006f4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006f4c:	4814      	ldr	r0, [pc, #80]	; (8006fa0 <MX_DAC2_Init+0x6c>)
 8006f4e:	f003 f820 	bl	8009f92 <HAL_DAC_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006f58:	f000 fd60 	bl	8007a1c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f60:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006f6e:	2306      	movs	r3, #6
 8006f70:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006f82:	463b      	mov	r3, r7
 8006f84:	2200      	movs	r2, #0
 8006f86:	4619      	mov	r1, r3
 8006f88:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <MX_DAC2_Init+0x6c>)
 8006f8a:	f003 f9eb 	bl	800a364 <HAL_DAC_ConfigChannel>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006f94:	f000 fd42 	bl	8007a1c <Error_Handler>
  }

}
 8006f98:	bf00      	nop
 8006f9a:	3730      	adds	r7, #48	; 0x30
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	200020fc 	.word	0x200020fc
 8006fa4:	50000c00 	.word	0x50000c00

08006fa8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	; 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb0:	f107 031c 	add.w	r3, r7, #28
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a56      	ldr	r2, [pc, #344]	; (8007120 <HAL_DAC_MspInit+0x178>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d150      	bne.n	800706c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006fca:	4b56      	ldr	r3, [pc, #344]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	4a55      	ldr	r2, [pc, #340]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fd6:	4b53      	ldr	r3, [pc, #332]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe2:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	4a4f      	ldr	r2, [pc, #316]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fee:	4b4d      	ldr	r3, [pc, #308]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ffa:	2330      	movs	r3, #48	; 0x30
 8006ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ffe:	2303      	movs	r3, #3
 8007000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007006:	f107 031c 	add.w	r3, r7, #28
 800700a:	4619      	mov	r1, r3
 800700c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007010:	f003 feaa 	bl	800ad68 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007014:	4b44      	ldr	r3, [pc, #272]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007016:	4a45      	ldr	r2, [pc, #276]	; (800712c <HAL_DAC_MspInit+0x184>)
 8007018:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800701a:	4b43      	ldr	r3, [pc, #268]	; (8007128 <HAL_DAC_MspInit+0x180>)
 800701c:	2206      	movs	r2, #6
 800701e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007020:	4b41      	ldr	r3, [pc, #260]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007022:	2210      	movs	r2, #16
 8007024:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007026:	4b40      	ldr	r3, [pc, #256]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007028:	2200      	movs	r2, #0
 800702a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800702c:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <HAL_DAC_MspInit+0x180>)
 800702e:	2280      	movs	r2, #128	; 0x80
 8007030:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007032:	4b3d      	ldr	r3, [pc, #244]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007038:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_DAC_MspInit+0x180>)
 800703c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007040:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007042:	4b39      	ldr	r3, [pc, #228]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007044:	2220      	movs	r2, #32
 8007046:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007048:	4b37      	ldr	r3, [pc, #220]	; (8007128 <HAL_DAC_MspInit+0x180>)
 800704a:	2200      	movs	r2, #0
 800704c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800704e:	4836      	ldr	r0, [pc, #216]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007050:	f003 fbbe 	bl	800a7d0 <HAL_DMA_Init>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800705a:	f000 fcdf 	bl	8007a1c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a31      	ldr	r2, [pc, #196]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	4a30      	ldr	r2, [pc, #192]	; (8007128 <HAL_DAC_MspInit+0x180>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800706a:	e054      	b.n	8007116 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2f      	ldr	r2, [pc, #188]	; (8007130 <HAL_DAC_MspInit+0x188>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d14f      	bne.n	8007116 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8007076:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 800707c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007082:	4b28      	ldr	r3, [pc, #160]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	4a24      	ldr	r2, [pc, #144]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800709a:	4b22      	ldr	r3, [pc, #136]	; (8007124 <HAL_DAC_MspInit+0x17c>)
 800709c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070aa:	2303      	movs	r3, #3
 80070ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070b2:	f107 031c 	add.w	r3, r7, #28
 80070b6:	4619      	mov	r1, r3
 80070b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070bc:	f003 fe54 	bl	800ad68 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80070c0:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070c2:	4a1d      	ldr	r2, [pc, #116]	; (8007138 <HAL_DAC_MspInit+0x190>)
 80070c4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80070c6:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070c8:	2229      	movs	r2, #41	; 0x29
 80070ca:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070cc:	4b19      	ldr	r3, [pc, #100]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070ce:	2210      	movs	r2, #16
 80070d0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070d2:	4b18      	ldr	r3, [pc, #96]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80070d8:	4b16      	ldr	r3, [pc, #88]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070de:	4b15      	ldr	r3, [pc, #84]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ec:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070f0:	2220      	movs	r2, #32
 80070f2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80070fa:	480e      	ldr	r0, [pc, #56]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 80070fc:	f003 fb68 	bl	800a7d0 <HAL_DMA_Init>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007106:	f000 fc89 	bl	8007a1c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a09      	ldr	r2, [pc, #36]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	4a08      	ldr	r2, [pc, #32]	; (8007134 <HAL_DAC_MspInit+0x18c>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007116:	bf00      	nop
 8007118:	3730      	adds	r7, #48	; 0x30
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	50000800 	.word	0x50000800
 8007124:	40021000 	.word	0x40021000
 8007128:	20002124 	.word	0x20002124
 800712c:	4002001c 	.word	0x4002001c
 8007130:	50000c00 	.word	0x50000c00
 8007134:	20002184 	.word	0x20002184
 8007138:	40020030 	.word	0x40020030

0800713c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007142:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <MX_DMA_Init+0x70>)
 8007144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <MX_DMA_Init+0x70>)
 8007148:	f043 0304 	orr.w	r3, r3, #4
 800714c:	6493      	str	r3, [r2, #72]	; 0x48
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <MX_DMA_Init+0x70>)
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <MX_DMA_Init+0x70>)
 800715c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715e:	4a13      	ldr	r2, [pc, #76]	; (80071ac <MX_DMA_Init+0x70>)
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	6493      	str	r3, [r2, #72]	; 0x48
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <MX_DMA_Init+0x70>)
 8007168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007172:	2200      	movs	r2, #0
 8007174:	2101      	movs	r1, #1
 8007176:	200b      	movs	r0, #11
 8007178:	f002 fed7 	bl	8009f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800717c:	200b      	movs	r0, #11
 800717e:	f002 feee 	bl	8009f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	200c      	movs	r0, #12
 8007188:	f002 fecf 	bl	8009f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800718c:	200c      	movs	r0, #12
 800718e:	f002 fee6 	bl	8009f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007192:	2200      	movs	r2, #0
 8007194:	2100      	movs	r1, #0
 8007196:	200d      	movs	r0, #13
 8007198:	f002 fec7 	bl	8009f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800719c:	200d      	movs	r0, #13
 800719e:	f002 fede 	bl	8009f5e <HAL_NVIC_EnableIRQ>

}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000

080071b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__NVIC_GetPriorityGrouping+0x18>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f003 0307 	and.w	r3, r3, #7
}
 80071be:	4618      	mov	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	db0b      	blt.n	80071f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	f003 021f 	and.w	r2, r3, #31
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <__NVIC_EnableIRQ+0x38>)
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2001      	movs	r0, #1
 80071ee:	fa00 f202 	lsl.w	r2, r0, r2
 80071f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	e000e100 	.word	0xe000e100

08007208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007218:	2b00      	cmp	r3, #0
 800721a:	db0a      	blt.n	8007232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	490c      	ldr	r1, [pc, #48]	; (8007254 <__NVIC_SetPriority+0x4c>)
 8007222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007226:	0112      	lsls	r2, r2, #4
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	440b      	add	r3, r1
 800722c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007230:	e00a      	b.n	8007248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	4908      	ldr	r1, [pc, #32]	; (8007258 <__NVIC_SetPriority+0x50>)
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	3b04      	subs	r3, #4
 8007240:	0112      	lsls	r2, r2, #4
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	440b      	add	r3, r1
 8007246:	761a      	strb	r2, [r3, #24]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	e000e100 	.word	0xe000e100
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	2b04      	cmp	r3, #4
 8007278:	bf28      	it	cs
 800727a:	2304      	movcs	r3, #4
 800727c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3304      	adds	r3, #4
 8007282:	2b06      	cmp	r3, #6
 8007284:	d902      	bls.n	800728c <NVIC_EncodePriority+0x30>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3b03      	subs	r3, #3
 800728a:	e000      	b.n	800728e <NVIC_EncodePriority+0x32>
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	401a      	ands	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	43d9      	mvns	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072b4:	4313      	orrs	r3, r2
         );
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3724      	adds	r7, #36	; 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80072ce:	4a14      	ldr	r2, [pc, #80]	; (8007320 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	3302      	adds	r3, #2
 80072d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	43db      	mvns	r3, r3
 80072e2:	ea02 0103 	and.w	r1, r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	fa93 f3a3 	rbit	r3, r3
 80072f2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	fab3 f383 	clz	r3, r3
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	409a      	lsls	r2, r3
 8007304:	4806      	ldr	r0, [pc, #24]	; (8007320 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	430a      	orrs	r2, r1
 800730e:	3302      	adds	r3, #2
 8007310:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40010000 	.word	0x40010000

08007324 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	fa93 f3a3 	rbit	r3, r3
 800733e:	613b      	str	r3, [r7, #16]
  return result;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	fab3 f383 	clz	r3, r3
 8007346:	b2db      	uxtb	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	2103      	movs	r1, #3
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	fa93 f3a3 	rbit	r3, r3
 800735e:	61bb      	str	r3, [r7, #24]
  return result;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	fab3 f383 	clz	r3, r3
 8007366:	b2db      	uxtb	r3, r3
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	fa01 f303 	lsl.w	r3, r1, r3
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	601a      	str	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	3724      	adds	r7, #36	; 0x24
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007382:	b480      	push	{r7}
 8007384:	b089      	sub	sp, #36	; 0x24
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	fa93 f3a3 	rbit	r3, r3
 800739c:	613b      	str	r3, [r7, #16]
  return result;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	2103      	movs	r1, #3
 80073aa:	fa01 f303 	lsl.w	r3, r1, r3
 80073ae:	43db      	mvns	r3, r3
 80073b0:	401a      	ands	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	fa93 f3a3 	rbit	r3, r3
 80073bc:	61bb      	str	r3, [r7, #24]
  return result;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	fab3 f383 	clz	r3, r3
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	fa01 f303 	lsl.w	r3, r1, r3
 80073ce:	431a      	orrs	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	60da      	str	r2, [r3, #12]
}
 80073d4:	bf00      	nop
 80073d6:	3724      	adds	r7, #36	; 0x24
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4313      	orrs	r3, r2
 800740e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4013      	ands	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	40021000 	.word	0x40021000

0800742c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007432:	f107 031c 	add.w	r3, r7, #28
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	605a      	str	r2, [r3, #4]
 800743c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	611a      	str	r2, [r3, #16]
 800744c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800744e:	2004      	movs	r0, #4
 8007450:	f7ff ffd4 	bl	80073fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007454:	2020      	movs	r0, #32
 8007456:	f7ff ffd1 	bl	80073fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800745a:	2001      	movs	r0, #1
 800745c:	f7ff ffce 	bl	80073fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007460:	2002      	movs	r0, #2
 8007462:	f7ff ffcb 	bl	80073fc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007466:	2108      	movs	r1, #8
 8007468:	48d3      	ldr	r0, [pc, #844]	; (80077b8 <MX_GPIO_Init+0x38c>)
 800746a:	f7ff ffb9 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800746e:	2108      	movs	r1, #8
 8007470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007474:	f7ff ffb4 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8007478:	2110      	movs	r1, #16
 800747a:	48cf      	ldr	r0, [pc, #828]	; (80077b8 <MX_GPIO_Init+0x38c>)
 800747c:	f7ff ffb0 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007480:	2120      	movs	r1, #32
 8007482:	48cd      	ldr	r0, [pc, #820]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007484:	f7ff ffac 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8007488:	2101      	movs	r1, #1
 800748a:	48cc      	ldr	r0, [pc, #816]	; (80077bc <MX_GPIO_Init+0x390>)
 800748c:	f7ff ffa8 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007494:	48c8      	ldr	r0, [pc, #800]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007496:	f7ff ffa3 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800749a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800749e:	48c6      	ldr	r0, [pc, #792]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80074a0:	f7ff ff9e 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	48c5      	ldr	r0, [pc, #788]	; (80077bc <MX_GPIO_Init+0x390>)
 80074a8:	f7ff ff9a 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	48c3      	ldr	r0, [pc, #780]	; (80077bc <MX_GPIO_Init+0x390>)
 80074b0:	f7ff ff96 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80074b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074b8:	48c0      	ldr	r0, [pc, #768]	; (80077bc <MX_GPIO_Init+0x390>)
 80074ba:	f7ff ff91 	bl	80073e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80074be:	49c0      	ldr	r1, [pc, #768]	; (80077c0 <MX_GPIO_Init+0x394>)
 80074c0:	2002      	movs	r0, #2
 80074c2:	f7ff feff 	bl	80072c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80074c6:	49bf      	ldr	r1, [pc, #764]	; (80077c4 <MX_GPIO_Init+0x398>)
 80074c8:	2002      	movs	r0, #2
 80074ca:	f7ff fefb 	bl	80072c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80074ce:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80074d2:	2005      	movs	r0, #5
 80074d4:	f7ff fef6 	bl	80072c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80074d8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80074dc:	2005      	movs	r0, #5
 80074de:	f7ff fef1 	bl	80072c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80074e2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80074e6:	2002      	movs	r0, #2
 80074e8:	f7ff feec 	bl	80072c4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80074ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074f0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074fe:	2302      	movs	r3, #2
 8007500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007504:	f107 031c 	add.w	r3, r7, #28
 8007508:	4618      	mov	r0, r3
 800750a:	f005 fead 	bl	800d268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800750e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007512:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800751a:	2300      	movs	r3, #0
 800751c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007520:	2302      	movs	r3, #2
 8007522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007526:	f107 031c 	add.w	r3, r7, #28
 800752a:	4618      	mov	r0, r3
 800752c:	f005 fe9c 	bl	800d268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007530:	2301      	movs	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800753a:	2300      	movs	r3, #0
 800753c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007540:	2302      	movs	r3, #2
 8007542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007546:	f107 031c 	add.w	r3, r7, #28
 800754a:	4618      	mov	r0, r3
 800754c:	f005 fe8c 	bl	800d268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007550:	2302      	movs	r3, #2
 8007552:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007560:	2302      	movs	r3, #2
 8007562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007566:	f107 031c 	add.w	r3, r7, #28
 800756a:	4618      	mov	r0, r3
 800756c:	f005 fe7c 	bl	800d268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007570:	2304      	movs	r3, #4
 8007572:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800757a:	2300      	movs	r3, #0
 800757c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007580:	2302      	movs	r3, #2
 8007582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007586:	f107 031c 	add.w	r3, r7, #28
 800758a:	4618      	mov	r0, r3
 800758c:	f005 fe6c 	bl	800d268 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007590:	2201      	movs	r2, #1
 8007592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007596:	4888      	ldr	r0, [pc, #544]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007598:	f7ff fef3 	bl	8007382 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800759c:	2201      	movs	r2, #1
 800759e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075a2:	4885      	ldr	r0, [pc, #532]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80075a4:	f7ff feed 	bl	8007382 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80075a8:	2201      	movs	r2, #1
 80075aa:	2101      	movs	r1, #1
 80075ac:	4886      	ldr	r0, [pc, #536]	; (80077c8 <MX_GPIO_Init+0x39c>)
 80075ae:	f7ff fee8 	bl	8007382 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80075b2:	2201      	movs	r2, #1
 80075b4:	2102      	movs	r1, #2
 80075b6:	4884      	ldr	r0, [pc, #528]	; (80077c8 <MX_GPIO_Init+0x39c>)
 80075b8:	f7ff fee3 	bl	8007382 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80075bc:	2201      	movs	r2, #1
 80075be:	2104      	movs	r1, #4
 80075c0:	487d      	ldr	r0, [pc, #500]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80075c2:	f7ff fede 	bl	8007382 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80075c6:	2200      	movs	r2, #0
 80075c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075cc:	487a      	ldr	r0, [pc, #488]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80075ce:	f7ff fea9 	bl	8007324 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80075d2:	2200      	movs	r2, #0
 80075d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075d8:	4877      	ldr	r0, [pc, #476]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80075da:	f7ff fea3 	bl	8007324 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80075de:	2200      	movs	r2, #0
 80075e0:	2101      	movs	r1, #1
 80075e2:	4879      	ldr	r0, [pc, #484]	; (80077c8 <MX_GPIO_Init+0x39c>)
 80075e4:	f7ff fe9e 	bl	8007324 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80075e8:	2200      	movs	r2, #0
 80075ea:	2102      	movs	r1, #2
 80075ec:	4876      	ldr	r0, [pc, #472]	; (80077c8 <MX_GPIO_Init+0x39c>)
 80075ee:	f7ff fe99 	bl	8007324 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80075f2:	2200      	movs	r2, #0
 80075f4:	2104      	movs	r1, #4
 80075f6:	4870      	ldr	r0, [pc, #448]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80075f8:	f7ff fe94 	bl	8007324 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80075fc:	2308      	movs	r3, #8
 80075fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007600:	2301      	movs	r3, #1
 8007602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800760c:	2302      	movs	r3, #2
 800760e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	4619      	mov	r1, r3
 8007614:	4868      	ldr	r0, [pc, #416]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007616:	f006 f81a 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800761a:	2308      	movs	r3, #8
 800761c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800761e:	2301      	movs	r3, #1
 8007620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007622:	2300      	movs	r3, #0
 8007624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800762e:	1d3b      	adds	r3, r7, #4
 8007630:	4619      	mov	r1, r3
 8007632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007636:	f006 f80a 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800763a:	2310      	movs	r3, #16
 800763c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800763e:	2301      	movs	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800764e:	1d3b      	adds	r3, r7, #4
 8007650:	4619      	mov	r1, r3
 8007652:	4859      	ldr	r0, [pc, #356]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007654:	f005 fffb 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007658:	2320      	movs	r3, #32
 800765a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800765c:	2301      	movs	r3, #1
 800765e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800766c:	1d3b      	adds	r3, r7, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4851      	ldr	r0, [pc, #324]	; (80077b8 <MX_GPIO_Init+0x38c>)
 8007672:	f005 ffec 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8007676:	2301      	movs	r3, #1
 8007678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800767a:	2301      	movs	r3, #1
 800767c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	4619      	mov	r1, r3
 800768e:	484b      	ldr	r0, [pc, #300]	; (80077bc <MX_GPIO_Init+0x390>)
 8007690:	f005 ffdd 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800769a:	2301      	movs	r3, #1
 800769c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80076aa:	1d3b      	adds	r3, r7, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4842      	ldr	r0, [pc, #264]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80076b0:	f005 ffcd 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80076b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ba:	2301      	movs	r3, #1
 80076bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80076ca:	1d3b      	adds	r3, r7, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	483a      	ldr	r0, [pc, #232]	; (80077b8 <MX_GPIO_Init+0x38c>)
 80076d0:	f005 ffbd 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80076d4:	2340      	movs	r3, #64	; 0x40
 80076d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076d8:	2301      	movs	r3, #1
 80076da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076dc:	2303      	movs	r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4833      	ldr	r0, [pc, #204]	; (80077bc <MX_GPIO_Init+0x390>)
 80076ee:	f005 ffae 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80076f2:	2380      	movs	r3, #128	; 0x80
 80076f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076f6:	2301      	movs	r3, #1
 80076f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076fa:	2303      	movs	r3, #3
 80076fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	4619      	mov	r1, r3
 800770a:	482c      	ldr	r0, [pc, #176]	; (80077bc <MX_GPIO_Init+0x390>)
 800770c:	f005 ff9f 	bl	800d64e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007714:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007716:	2301      	movs	r3, #1
 8007718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800771a:	2303      	movs	r3, #3
 800771c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007726:	1d3b      	adds	r3, r7, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4824      	ldr	r0, [pc, #144]	; (80077bc <MX_GPIO_Init+0x390>)
 800772c:	f005 ff8f 	bl	800d64e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007730:	f7ff fd3e 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 8007734:	4603      	mov	r3, r0
 8007736:	2200      	movs	r2, #0
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fd8e 	bl	800725c <NVIC_EncodePriority>
 8007740:	4603      	mov	r3, r0
 8007742:	4619      	mov	r1, r3
 8007744:	2006      	movs	r0, #6
 8007746:	f7ff fd5f 	bl	8007208 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800774a:	2006      	movs	r0, #6
 800774c:	f7ff fd3e 	bl	80071cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007750:	f7ff fd2e 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 8007754:	4603      	mov	r3, r0
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fd7e 	bl	800725c <NVIC_EncodePriority>
 8007760:	4603      	mov	r3, r0
 8007762:	4619      	mov	r1, r3
 8007764:	2007      	movs	r0, #7
 8007766:	f7ff fd4f 	bl	8007208 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800776a:	2007      	movs	r0, #7
 800776c:	f7ff fd2e 	bl	80071cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007770:	f7ff fd1e 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 8007774:	4603      	mov	r3, r0
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fd6e 	bl	800725c <NVIC_EncodePriority>
 8007780:	4603      	mov	r3, r0
 8007782:	4619      	mov	r1, r3
 8007784:	2008      	movs	r0, #8
 8007786:	f7ff fd3f 	bl	8007208 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800778a:	2008      	movs	r0, #8
 800778c:	f7ff fd1e 	bl	80071cc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007790:	f7ff fd0e 	bl	80071b0 <__NVIC_GetPriorityGrouping>
 8007794:	4603      	mov	r3, r0
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fd5e 	bl	800725c <NVIC_EncodePriority>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4619      	mov	r1, r3
 80077a4:	2028      	movs	r0, #40	; 0x28
 80077a6:	f7ff fd2f 	bl	8007208 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80077aa:	2028      	movs	r0, #40	; 0x28
 80077ac:	f7ff fd0e 	bl	80071cc <__NVIC_EnableIRQ>

}
 80077b0:	bf00      	nop
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	e009      	b.n	80077cc <MX_GPIO_Init+0x3a0>
 80077b8:	48000800 	.word	0x48000800
 80077bc:	48000400 	.word	0x48000400
 80077c0:	0f000003 	.word	0x0f000003
 80077c4:	f0000003 	.word	0xf0000003
 80077c8:	48001400 	.word	0x48001400
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80077e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80077f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80077f8:	e000      	b.n	80077fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80077fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80077fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f9      	beq.n	80077fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007806:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007810:	687b      	ldr	r3, [r7, #4]
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
  int i=0;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e009      	b.n	8007848 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	60ba      	str	r2, [r7, #8]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff ffc7 	bl	80077d0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3301      	adds	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	dbf1      	blt.n	8007834 <_write+0x16>
  return len;
 8007850:	687b      	ldr	r3, [r7, #4]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007860:	f000 feb5 	bl	80085ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007864:	f000 f86c 	bl	8007940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007868:	f7ff fde0 	bl	800742c <MX_GPIO_Init>
  MX_DMA_Init();
 800786c:	f7ff fc66 	bl	800713c <MX_DMA_Init>
  MX_DAC1_Init();
 8007870:	f7ff fb16 	bl	8006ea0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8007874:	f7ff fb5e 	bl	8006f34 <MX_DAC2_Init>
  MX_ADC1_Init();
 8007878:	f7ff f9d4 	bl	8006c24 <MX_ADC1_Init>
  MX_COMP1_Init();
 800787c:	f7ff fab6 	bl	8006dec <MX_COMP1_Init>
  MX_TIM2_Init();
 8007880:	f000 fbaa 	bl	8007fd8 <MX_TIM2_Init>
  MX_SPI3_Init();
 8007884:	f000 f908 	bl	8007a98 <MX_SPI3_Init>
  MX_RNG_Init();
 8007888:	f000 f8f8 	bl	8007a7c <MX_RNG_Init>
  MX_TIM1_Init();
 800788c:	f000 fb34 	bl	8007ef8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007890:	f000 fc8a 	bl	80081a8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007894:	f000 fd42 	bl	800831c <MX_TIM16_Init>
  MX_TIM15_Init();
 8007898:	f000 fcee 	bl	8008278 <MX_TIM15_Init>
  MX_TIM5_Init();
 800789c:	f000 fc36 	bl	800810c <MX_TIM5_Init>
  MX_TIM3_Init();
 80078a0:	f000 fbe6 	bl	8008070 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  DT_InitRegister();
 80078a4:	f7fd f8ae 	bl	8004a04 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 80078a8:	f7fd fd76 	bl	8005398 <SM_Init>
  FuncO_Init();
 80078ac:	f7fd fa92 	bl	8004dd4 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 80078b0:	2000      	movs	r0, #0
 80078b2:	f7fd fb47 	bl	8004f44 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 80078b6:	2000      	movs	r0, #0
 80078b8:	f7fd fb9e 	bl	8004ff8 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80078bc:	2110      	movs	r1, #16
 80078be:	481b      	ldr	r0, [pc, #108]	; (800792c <main+0xd0>)
 80078c0:	f002 fb89 	bl	8009fd6 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80078c4:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <main+0xd4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <main+0xd4>)
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80078d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078d4:	f7fd fa14 	bl	8004d00 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80078d8:	2201      	movs	r2, #1
 80078da:	2108      	movs	r1, #8
 80078dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078e0:	f003 fbc4 	bl	800b06c <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 80078e4:	2059      	movs	r0, #89	; 0x59
 80078e6:	f7fd fef1 	bl	80056cc <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80078ea:	2200      	movs	r2, #0
 80078ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078f0:	4810      	ldr	r0, [pc, #64]	; (8007934 <main+0xd8>)
 80078f2:	f003 fbbb 	bl	800b06c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80078f6:	2200      	movs	r2, #0
 80078f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078fc:	480d      	ldr	r0, [pc, #52]	; (8007934 <main+0xd8>)
 80078fe:	f003 fbb5 	bl	800b06c <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007902:	480d      	ldr	r0, [pc, #52]	; (8007938 <main+0xdc>)
 8007904:	f004 fcac 	bl	800c260 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <main+0xe0>)
 800790a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <main+0xe0>)
 8007912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007916:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007918:	f7f9 fa04 	bl	8000d24 <DM_Init>
  DM_PostInit();
 800791c:	f7f9 fa10 	bl	8000d40 <DM_PostInit>

  IM_Init();
 8007920:	f7fc febe 	bl	80046a0 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007924:	f7fb fe62 	bl	80035ec <EM_ProcessEvent>
 8007928:	e7fc      	b.n	8007924 <main+0xc8>
 800792a:	bf00      	nop
 800792c:	20002110 	.word	0x20002110
 8007930:	40013400 	.word	0x40013400
 8007934:	48000800 	.word	0x48000800
 8007938:	20002378 	.word	0x20002378
 800793c:	40001000 	.word	0x40001000

08007940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b0a8      	sub	sp, #160	; 0xa0
 8007944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007946:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800794a:	2238      	movs	r2, #56	; 0x38
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f006 ffb2 	bl	800e8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007954:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	605a      	str	r2, [r3, #4]
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007964:	463b      	mov	r3, r7
 8007966:	2254      	movs	r2, #84	; 0x54
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f006 ffa4 	bl	800e8b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007970:	2000      	movs	r0, #0
 8007972:	f003 fb93 	bl	800b09c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007976:	2322      	movs	r3, #34	; 0x22
 8007978:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800797a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800797e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007984:	2301      	movs	r3, #1
 8007986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800798a:	2302      	movs	r3, #2
 800798c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007990:	2302      	movs	r3, #2
 8007992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007996:	2302      	movs	r3, #2
 8007998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 800799c:	232a      	movs	r3, #42	; 0x2a
 800799e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 80079a2:	231e      	movs	r3, #30
 80079a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80079a8:	2304      	movs	r3, #4
 80079aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80079ae:	2302      	movs	r3, #2
 80079b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80079b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80079b8:	4618      	mov	r0, r3
 80079ba:	f003 fc13 	bl	800b1e4 <HAL_RCC_OscConfig>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80079c4:	f000 f82a 	bl	8007a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079c8:	230f      	movs	r3, #15
 80079ca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079cc:	2303      	movs	r3, #3
 80079ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079d0:	2300      	movs	r3, #0
 80079d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079d4:	2300      	movs	r3, #0
 80079d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079d8:	2300      	movs	r3, #0
 80079da:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80079dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079e0:	2108      	movs	r1, #8
 80079e2:	4618      	mov	r0, r3
 80079e4:	f003 ff16 	bl	800b814 <HAL_RCC_ClockConfig>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80079ee:	f000 f815 	bl	8007a1c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80079f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80079f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80079f8:	2300      	movs	r3, #0
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80079fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a02:	463b      	mov	r3, r7
 8007a04:	4618      	mov	r0, r3
 8007a06:	f004 f8f5 	bl	800bbf4 <HAL_RCCEx_PeriphCLKConfig>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007a10:	f000 f804 	bl	8007a1c <Error_Handler>
  }
}
 8007a14:	bf00      	nop
 8007a16:	37a0      	adds	r7, #160	; 0xa0
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a20:	bf00      	nop
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f043 0204 	orr.w	r2, r3, #4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <LL_AHB2_GRP1_EnableClock>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a58:	4907      	ldr	r1, [pc, #28]	; (8007a78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4013      	ands	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40021000 	.word	0x40021000

08007a7c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007a80:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007a84:	f7ff ffe2 	bl	8007a4c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007a88:	4802      	ldr	r0, [pc, #8]	; (8007a94 <MX_RNG_Init+0x18>)
 8007a8a:	f7ff ffce 	bl	8007a2a <LL_RNG_Enable>

}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	50060800 	.word	0x50060800

08007a98 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007a9c:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007a9e:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <MX_SPI3_Init+0x78>)
 8007aa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007aa2:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007aa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ab0:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ab2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ab6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ab8:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007ac4:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ace:	2210      	movs	r2, #16
 8007ad0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ad2:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ade:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007ae4:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007aea:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007af2:	2208      	movs	r2, #8
 8007af4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007af6:	4805      	ldr	r0, [pc, #20]	; (8007b0c <MX_SPI3_Init+0x74>)
 8007af8:	f004 fac8 	bl	800c08c <HAL_SPI_Init>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007b02:	f7ff ff8b 	bl	8007a1c <Error_Handler>
  }

}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200021e4 	.word	0x200021e4
 8007b10:	40003c00 	.word	0x40003c00

08007b14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	609a      	str	r2, [r3, #8]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <HAL_SPI_MspInit+0x7c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d128      	bne.n	8007b88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007b36:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b40:	6593      	str	r3, [r2, #88]	; 0x58
 8007b42:	4b14      	ldr	r3, [pc, #80]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b4e:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b52:	4a10      	ldr	r2, [pc, #64]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b54:	f043 0304 	orr.w	r3, r3, #4
 8007b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <HAL_SPI_MspInit+0x80>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	f003 0304 	and.w	r3, r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007b66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b74:	2300      	movs	r3, #0
 8007b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b78:	2306      	movs	r3, #6
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	4619      	mov	r1, r3
 8007b82:	4805      	ldr	r0, [pc, #20]	; (8007b98 <HAL_SPI_MspInit+0x84>)
 8007b84:	f003 f8f0 	bl	800ad68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3728      	adds	r7, #40	; 0x28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40003c00 	.word	0x40003c00
 8007b94:	40021000 	.word	0x40021000
 8007b98:	48000800 	.word	0x48000800

08007b9c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007baa:	6093      	str	r3, [r2, #8]
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40007000 	.word	0x40007000

08007bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <HAL_MspInit+0x44>)
 8007bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <HAL_MspInit+0x44>)
 8007bc8:	f043 0301 	orr.w	r3, r3, #1
 8007bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <HAL_MspInit+0x44>)
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bda:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <HAL_MspInit+0x44>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <HAL_MspInit+0x44>)
 8007be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6593      	str	r3, [r2, #88]	; 0x58
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <HAL_MspInit+0x44>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007bf2:	f7ff ffd3 	bl	8007b9c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000

08007c04 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007c0c:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4013      	ands	r3, r2
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d101      	bne.n	8007c1e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40010400 	.word	0x40010400

08007c30 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c38:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6153      	str	r3, [r2, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40010400 	.word	0x40010400

08007c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c54:	bf00      	nop
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c62:	e7fe      	b.n	8007c62 <HardFault_Handler+0x4>

08007c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c68:	e7fe      	b.n	8007c68 <MemManage_Handler+0x4>

08007c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c6e:	e7fe      	b.n	8007c6e <BusFault_Handler+0x4>

08007c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c74:	e7fe      	b.n	8007c74 <UsageFault_Handler+0x4>

08007c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c76:	b480      	push	{r7}
 8007c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c7a:	bf00      	nop
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c88:	bf00      	nop
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c92:	b480      	push	{r7}
 8007c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c96:	bf00      	nop
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ca4:	f000 fce6 	bl	8008674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ca8:	bf00      	nop
 8007caa:	bd80      	pop	{r7, pc}

08007cac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007cb0:	f7fc fdae 	bl	8004810 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f7ff ffa5 	bl	8007c04 <LL_EXTI_IsActiveFlag_0_31>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f7ff ffb5 	bl	8007c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007cce:	f7fc fdc5 	bl	800485c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f7ff ff96 	bl	8007c04 <LL_EXTI_IsActiveFlag_0_31>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007cde:	2002      	movs	r0, #2
 8007ce0:	f7ff ffa6 	bl	8007c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007ce4:	bf00      	nop
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007cec:	f7fc fddc 	bl	80048a8 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007cf0:	2004      	movs	r0, #4
 8007cf2:	f7ff ff87 	bl	8007c04 <LL_EXTI_IsActiveFlag_0_31>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007cfc:	2004      	movs	r0, #4
 8007cfe:	f7ff ff97 	bl	8007c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007d0c:	4802      	ldr	r0, [pc, #8]	; (8007d18 <DMA1_Channel1_IRQHandler+0x10>)
 8007d0e:	f002 fedb 	bl	800aac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20002078 	.word	0x20002078

08007d1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007d20:	4802      	ldr	r0, [pc, #8]	; (8007d2c <DMA1_Channel2_IRQHandler+0x10>)
 8007d22:	f002 fed1 	bl	800aac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007d26:	bf00      	nop
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20002124 	.word	0x20002124

08007d30 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007d34:	4802      	ldr	r0, [pc, #8]	; (8007d40 <DMA1_Channel3_IRQHandler+0x10>)
 8007d36:	f002 fec7 	bl	800aac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007d3a:	bf00      	nop
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20002184 	.word	0x20002184

08007d44 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007d48:	f7f9 f818 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007d4c:	f7fc fdd2 	bl	80048f4 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d50:	4803      	ldr	r0, [pc, #12]	; (8007d60 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007d52:	f004 fbe6 	bl	800c522 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007d56:	4803      	ldr	r0, [pc, #12]	; (8007d64 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007d58:	f004 fbe3 	bl	800c522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007d5c:	bf00      	nop
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20002378 	.word	0x20002378
 8007d64:	20002294 	.word	0x20002294

08007d68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d6c:	4802      	ldr	r0, [pc, #8]	; (8007d78 <TIM3_IRQHandler+0x10>)
 8007d6e:	f004 fbd8 	bl	800c522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000232c 	.word	0x2000232c

08007d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007d80:	f7fc fcf6 	bl	8004770 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007d84:	f7fc fd1c 	bl	80047c0 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007d88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d8c:	f7ff ff3a 	bl	8007c04 <LL_EXTI_IsActiveFlag_0_31>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007d96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d9a:	f7ff ff49 	bl	8007c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007d9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007da2:	f7ff ff2f 	bl	8007c04 <LL_EXTI_IsActiveFlag_0_31>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007dac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007db0:	f7ff ff3e 	bl	8007c30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007dbc:	f7fc fc80 	bl	80046c0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007dc0:	4802      	ldr	r0, [pc, #8]	; (8007dcc <TIM5_IRQHandler+0x14>)
 8007dc2:	f004 fbae 	bl	800c522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200022e0 	.word	0x200022e0

08007dd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	e00a      	b.n	8007df8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007de2:	f3af 8000 	nop.w
 8007de6:	4601      	mov	r1, r0
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	60ba      	str	r2, [r7, #8]
 8007dee:	b2ca      	uxtb	r2, r1
 8007df0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	3301      	adds	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	dbf0      	blt.n	8007de2 <_read+0x12>
	}

return len;
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
	return -1;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e32:	605a      	str	r2, [r3, #4]
	return 0;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <_isatty>:

int _isatty(int file)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
	return 1;
 8007e4a:	2301      	movs	r3, #1
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	return 0;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e7c:	4b11      	ldr	r3, [pc, #68]	; (8007ec4 <_sbrk+0x50>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <_sbrk+0x16>
		heap_end = &end;
 8007e84:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <_sbrk+0x50>)
 8007e86:	4a10      	ldr	r2, [pc, #64]	; (8007ec8 <_sbrk+0x54>)
 8007e88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <_sbrk+0x50>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <_sbrk+0x50>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4413      	add	r3, r2
 8007e98:	466a      	mov	r2, sp
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d907      	bls.n	8007eae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e9e:	f006 fce1 	bl	800e864 <__errno>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eac:	e006      	b.n	8007ebc <_sbrk+0x48>
	}

	heap_end += incr;
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_sbrk+0x50>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4a03      	ldr	r2, [pc, #12]	; (8007ec4 <_sbrk+0x50>)
 8007eb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007eba:	68fb      	ldr	r3, [r7, #12]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20001a24 	.word	0x20001a24
 8007ec8:	20002468 	.word	0x20002468

08007ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ed0:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <SystemInit+0x28>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <SystemInit+0x28>)
 8007ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SystemInit+0x28>)
 8007ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b09a      	sub	sp, #104	; 0x68
 8007efc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007efe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f02:	2224      	movs	r2, #36	; 0x24
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f006 fcd6 	bl	800e8b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f18:	1d3b      	adds	r3, r7, #4
 8007f1a:	2234      	movs	r2, #52	; 0x34
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f006 fcca 	bl	800e8b8 <memset>

  htim1.Instance = TIM1;
 8007f24:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f26:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <MX_TIM1_Init+0xdc>)
 8007f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007f2a:	4b29      	ldr	r3, [pc, #164]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f32:	2240      	movs	r2, #64	; 0x40
 8007f34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007f36:	4b26      	ldr	r3, [pc, #152]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f44:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f4a:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007f50:	2303      	movs	r3, #3
 8007f52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f54:	2300      	movs	r3, #0
 8007f56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f64:	2300      	movs	r3, #0
 8007f66:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007f74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4815      	ldr	r0, [pc, #84]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f7c:	f004 fa2b 	bl	800c3d6 <HAL_TIM_Encoder_Init>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007f86:	f7ff fd49 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f8a:	2320      	movs	r3, #32
 8007f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	480c      	ldr	r0, [pc, #48]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007f9e:	f004 fea5 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007fa8:	f7ff fd38 	bl	8007a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007fac:	2300      	movs	r3, #0
 8007fae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <MX_TIM1_Init+0xd8>)
 8007fba:	f004 ff2d 	bl	800ce18 <HAL_TIMEx_ConfigBreakDeadTime>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007fc4:	f7ff fd2a 	bl	8007a1c <Error_Handler>
  }

}
 8007fc8:	bf00      	nop
 8007fca:	3768      	adds	r7, #104	; 0x68
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20002378 	.word	0x20002378
 8007fd4:	40012c00 	.word	0x40012c00

08007fd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fde:	f107 0310 	add.w	r3, r7, #16
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
 8007fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fec:	1d3b      	adds	r3, r7, #4
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
 8007ff4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <MX_TIM2_Init+0x94>)
 8007ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	; (800806c <MX_TIM2_Init+0x94>)
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008004:	4b19      	ldr	r3, [pc, #100]	; (800806c <MX_TIM2_Init+0x94>)
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800800a:	4b18      	ldr	r3, [pc, #96]	; (800806c <MX_TIM2_Init+0x94>)
 800800c:	2201      	movs	r2, #1
 800800e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008010:	4b16      	ldr	r3, [pc, #88]	; (800806c <MX_TIM2_Init+0x94>)
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <MX_TIM2_Init+0x94>)
 8008018:	2280      	movs	r2, #128	; 0x80
 800801a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800801c:	4813      	ldr	r0, [pc, #76]	; (800806c <MX_TIM2_Init+0x94>)
 800801e:	f004 f8c7 	bl	800c1b0 <HAL_TIM_Base_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008028:	f7ff fcf8 	bl	8007a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800802c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008032:	f107 0310 	add.w	r3, r7, #16
 8008036:	4619      	mov	r1, r3
 8008038:	480c      	ldr	r0, [pc, #48]	; (800806c <MX_TIM2_Init+0x94>)
 800803a:	f004 fbf1 	bl	800c820 <HAL_TIM_ConfigClockSource>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008044:	f7ff fcea 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008048:	2320      	movs	r3, #32
 800804a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008050:	1d3b      	adds	r3, r7, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <MX_TIM2_Init+0x94>)
 8008056:	f004 fe49 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008060:	f7ff fcdc 	bl	8007a1c <Error_Handler>
  }

}
 8008064:	bf00      	nop
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200023c4 	.word	0x200023c4

08008070 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	605a      	str	r2, [r3, #4]
 8008080:	609a      	str	r2, [r3, #8]
 8008082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008084:	1d3b      	adds	r3, r7, #4
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <MX_TIM3_Init+0x94>)
 8008090:	4a1d      	ldr	r2, [pc, #116]	; (8008108 <MX_TIM3_Init+0x98>)
 8008092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008094:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <MX_TIM3_Init+0x94>)
 8008096:	2200      	movs	r2, #0
 8008098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800809a:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <MX_TIM3_Init+0x94>)
 800809c:	2210      	movs	r2, #16
 800809e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80080a0:	4b18      	ldr	r3, [pc, #96]	; (8008104 <MX_TIM3_Init+0x94>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80080a6:	4b17      	ldr	r3, [pc, #92]	; (8008104 <MX_TIM3_Init+0x94>)
 80080a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <MX_TIM3_Init+0x94>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80080b4:	4813      	ldr	r0, [pc, #76]	; (8008104 <MX_TIM3_Init+0x94>)
 80080b6:	f004 f87b 	bl	800c1b0 <HAL_TIM_Base_Init>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80080c0:	f7ff fcac 	bl	8007a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080ca:	f107 0310 	add.w	r3, r7, #16
 80080ce:	4619      	mov	r1, r3
 80080d0:	480c      	ldr	r0, [pc, #48]	; (8008104 <MX_TIM3_Init+0x94>)
 80080d2:	f004 fba5 	bl	800c820 <HAL_TIM_ConfigClockSource>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80080dc:	f7ff fc9e 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080e0:	2300      	movs	r3, #0
 80080e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080e8:	1d3b      	adds	r3, r7, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4805      	ldr	r0, [pc, #20]	; (8008104 <MX_TIM3_Init+0x94>)
 80080ee:	f004 fdfd 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80080f8:	f7ff fc90 	bl	8007a1c <Error_Handler>
  }

}
 80080fc:	bf00      	nop
 80080fe:	3720      	adds	r7, #32
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	2000232c 	.word	0x2000232c
 8008108:	40000400 	.word	0x40000400

0800810c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008112:	f107 0310 	add.w	r3, r7, #16
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	605a      	str	r2, [r3, #4]
 800811c:	609a      	str	r2, [r3, #8]
 800811e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008120:	1d3b      	adds	r3, r7, #4
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	605a      	str	r2, [r3, #4]
 8008128:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800812a:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <MX_TIM5_Init+0x94>)
 800812c:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <MX_TIM5_Init+0x98>)
 800812e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008130:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <MX_TIM5_Init+0x94>)
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008136:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <MX_TIM5_Init+0x94>)
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <MX_TIM5_Init+0x94>)
 800813e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008142:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008144:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <MX_TIM5_Init+0x94>)
 8008146:	2200      	movs	r2, #0
 8008148:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800814a:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <MX_TIM5_Init+0x94>)
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008150:	4813      	ldr	r0, [pc, #76]	; (80081a0 <MX_TIM5_Init+0x94>)
 8008152:	f004 f82d 	bl	800c1b0 <HAL_TIM_Base_Init>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800815c:	f7ff fc5e 	bl	8007a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4619      	mov	r1, r3
 800816c:	480c      	ldr	r0, [pc, #48]	; (80081a0 <MX_TIM5_Init+0x94>)
 800816e:	f004 fb57 	bl	800c820 <HAL_TIM_ConfigClockSource>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008178:	f7ff fc50 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800817c:	2300      	movs	r3, #0
 800817e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	4619      	mov	r1, r3
 8008188:	4805      	ldr	r0, [pc, #20]	; (80081a0 <MX_TIM5_Init+0x94>)
 800818a:	f004 fdaf 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008194:	f7ff fc42 	bl	8007a1c <Error_Handler>
  }

}
 8008198:	bf00      	nop
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200022e0 	.word	0x200022e0
 80081a4:	40000c00 	.word	0x40000c00

080081a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b094      	sub	sp, #80	; 0x50
 80081ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	609a      	str	r2, [r3, #8]
 80081ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80081c8:	463b      	mov	r3, r7
 80081ca:	2234      	movs	r2, #52	; 0x34
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f006 fb72 	bl	800e8b8 <memset>

  htim8.Instance = TIM8;
 80081d4:	4b26      	ldr	r3, [pc, #152]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081d6:	4a27      	ldr	r2, [pc, #156]	; (8008274 <MX_TIM8_Init+0xcc>)
 80081d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80081da:	4b25      	ldr	r3, [pc, #148]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081dc:	2200      	movs	r2, #0
 80081de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081e0:	4b23      	ldr	r3, [pc, #140]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80081e6:	4b22      	ldr	r3, [pc, #136]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80081f2:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <MX_TIM8_Init+0xc8>)
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80081fe:	481c      	ldr	r0, [pc, #112]	; (8008270 <MX_TIM8_Init+0xc8>)
 8008200:	f003 ffd6 	bl	800c1b0 <HAL_TIM_Base_Init>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800820a:	f7ff fc07 	bl	8007a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800820e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008212:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008218:	4619      	mov	r1, r3
 800821a:	4815      	ldr	r0, [pc, #84]	; (8008270 <MX_TIM8_Init+0xc8>)
 800821c:	f004 fb00 	bl	800c820 <HAL_TIM_ConfigClockSource>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008226:	f7ff fbf9 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800822a:	2320      	movs	r3, #32
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800822e:	2300      	movs	r3, #0
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800823a:	4619      	mov	r1, r3
 800823c:	480c      	ldr	r0, [pc, #48]	; (8008270 <MX_TIM8_Init+0xc8>)
 800823e:	f004 fd55 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008248:	f7ff fbe8 	bl	8007a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008250:	2300      	movs	r3, #0
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008254:	463b      	mov	r3, r7
 8008256:	4619      	mov	r1, r3
 8008258:	4805      	ldr	r0, [pc, #20]	; (8008270 <MX_TIM8_Init+0xc8>)
 800825a:	f004 fddd 	bl	800ce18 <HAL_TIMEx_ConfigBreakDeadTime>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008264:	f7ff fbda 	bl	8007a1c <Error_Handler>
  }

}
 8008268:	bf00      	nop
 800826a:	3750      	adds	r7, #80	; 0x50
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20002248 	.word	0x20002248
 8008274:	40013400 	.word	0x40013400

08008278 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	605a      	str	r2, [r3, #4]
 8008288:	609a      	str	r2, [r3, #8]
 800828a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800828c:	1d3b      	adds	r3, r7, #4
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	605a      	str	r2, [r3, #4]
 8008294:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008296:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <MX_TIM15_Init+0x9c>)
 8008298:	4a1f      	ldr	r2, [pc, #124]	; (8008318 <MX_TIM15_Init+0xa0>)
 800829a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800829c:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <MX_TIM15_Init+0x9c>)
 800829e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80082aa:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082b2:	4b18      	ldr	r3, [pc, #96]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082be:	4b15      	ldr	r3, [pc, #84]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80082c4:	4813      	ldr	r0, [pc, #76]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082c6:	f003 ff73 	bl	800c1b0 <HAL_TIM_Base_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80082d0:	f7ff fba4 	bl	8007a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	4619      	mov	r1, r3
 80082e0:	480c      	ldr	r0, [pc, #48]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082e2:	f004 fa9d 	bl	800c820 <HAL_TIM_ConfigClockSource>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80082ec:	f7ff fb96 	bl	8007a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082f0:	2300      	movs	r3, #0
 80082f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80082f8:	1d3b      	adds	r3, r7, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4805      	ldr	r0, [pc, #20]	; (8008314 <MX_TIM15_Init+0x9c>)
 80082fe:	f004 fcf5 	bl	800ccec <HAL_TIMEx_MasterConfigSynchronization>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008308:	f7ff fb88 	bl	8007a1c <Error_Handler>
  }

}
 800830c:	bf00      	nop
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20002294 	.word	0x20002294
 8008318:	40014000 	.word	0x40014000

0800831c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008320:	4b10      	ldr	r3, [pc, #64]	; (8008364 <MX_TIM16_Init+0x48>)
 8008322:	4a11      	ldr	r2, [pc, #68]	; (8008368 <MX_TIM16_Init+0x4c>)
 8008324:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <MX_TIM16_Init+0x48>)
 8008328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800832c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <MX_TIM16_Init+0x48>)
 8008330:	2200      	movs	r2, #0
 8008332:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <MX_TIM16_Init+0x48>)
 8008336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800833a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800833c:	4b09      	ldr	r3, [pc, #36]	; (8008364 <MX_TIM16_Init+0x48>)
 800833e:	2200      	movs	r2, #0
 8008340:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <MX_TIM16_Init+0x48>)
 8008344:	2200      	movs	r2, #0
 8008346:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008348:	4b06      	ldr	r3, [pc, #24]	; (8008364 <MX_TIM16_Init+0x48>)
 800834a:	2200      	movs	r2, #0
 800834c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800834e:	4805      	ldr	r0, [pc, #20]	; (8008364 <MX_TIM16_Init+0x48>)
 8008350:	f003 ff2e 	bl	800c1b0 <HAL_TIM_Base_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800835a:	f7ff fb5f 	bl	8007a1c <Error_Handler>
  }

}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20002410 	.word	0x20002410
 8008368:	40014400 	.word	0x40014400

0800836c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08a      	sub	sp, #40	; 0x28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	609a      	str	r2, [r3, #8]
 8008380:	60da      	str	r2, [r3, #12]
 8008382:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d12f      	bne.n	80083ee <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800838e:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 8008390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008392:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 8008394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008398:	6613      	str	r3, [r2, #96]	; 0x60
 800839a:	4b18      	ldr	r3, [pc, #96]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083a6:	4b15      	ldr	r3, [pc, #84]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 80083a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083aa:	4a14      	ldr	r2, [pc, #80]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083b2:	4b12      	ldr	r3, [pc, #72]	; (80083fc <HAL_TIM_Encoder_MspInit+0x90>)
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80083be:	2303      	movs	r3, #3
 80083c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c2:	2302      	movs	r3, #2
 80083c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ca:	2300      	movs	r3, #0
 80083cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80083ce:	2302      	movs	r3, #2
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	4619      	mov	r1, r3
 80083d8:	4809      	ldr	r0, [pc, #36]	; (8008400 <HAL_TIM_Encoder_MspInit+0x94>)
 80083da:	f002 fcc5 	bl	800ad68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	2018      	movs	r0, #24
 80083e4:	f001 fda1 	bl	8009f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80083e8:	2018      	movs	r0, #24
 80083ea:	f001 fdb8 	bl	8009f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80083ee:	bf00      	nop
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40021000 	.word	0x40021000
 8008400:	48000800 	.word	0x48000800

08008404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008424:	d10c      	bne.n	8008440 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008426:	4b4f      	ldr	r3, [pc, #316]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	4a4e      	ldr	r2, [pc, #312]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6593      	str	r3, [r2, #88]	; 0x58
 8008432:	4b4c      	ldr	r3, [pc, #304]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	623b      	str	r3, [r7, #32]
 800843c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800843e:	e08d      	b.n	800855c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a48      	ldr	r2, [pc, #288]	; (8008568 <HAL_TIM_Base_MspInit+0x164>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d114      	bne.n	8008474 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800844a:	4b46      	ldr	r3, [pc, #280]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	4a45      	ldr	r2, [pc, #276]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008450:	f043 0302 	orr.w	r3, r3, #2
 8008454:	6593      	str	r3, [r2, #88]	; 0x58
 8008456:	4b43      	ldr	r3, [pc, #268]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008462:	2200      	movs	r2, #0
 8008464:	2100      	movs	r1, #0
 8008466:	201d      	movs	r0, #29
 8008468:	f001 fd5f 	bl	8009f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800846c:	201d      	movs	r0, #29
 800846e:	f001 fd76 	bl	8009f5e <HAL_NVIC_EnableIRQ>
}
 8008472:	e073      	b.n	800855c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a3c      	ldr	r2, [pc, #240]	; (800856c <HAL_TIM_Base_MspInit+0x168>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d131      	bne.n	80084e2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800847e:	4b39      	ldr	r3, [pc, #228]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	4a38      	ldr	r2, [pc, #224]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008484:	f043 0308 	orr.w	r3, r3, #8
 8008488:	6593      	str	r3, [r2, #88]	; 0x58
 800848a:	4b36      	ldr	r3, [pc, #216]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008496:	4b33      	ldr	r3, [pc, #204]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	4a32      	ldr	r2, [pc, #200]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084a2:	4b30      	ldr	r3, [pc, #192]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80084ae:	2301      	movs	r3, #1
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b2:	2302      	movs	r3, #2
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ba:	2300      	movs	r3, #0
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80084be:	2302      	movs	r3, #2
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c6:	4619      	mov	r1, r3
 80084c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084cc:	f002 fc4c 	bl	800ad68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2102      	movs	r1, #2
 80084d4:	2032      	movs	r0, #50	; 0x32
 80084d6:	f001 fd28 	bl	8009f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80084da:	2032      	movs	r0, #50	; 0x32
 80084dc:	f001 fd3f 	bl	8009f5e <HAL_NVIC_EnableIRQ>
}
 80084e0:	e03c      	b.n	800855c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a22      	ldr	r2, [pc, #136]	; (8008570 <HAL_TIM_Base_MspInit+0x16c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d10c      	bne.n	8008506 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80084ec:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 80084ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f0:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 80084f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084f6:	6613      	str	r3, [r2, #96]	; 0x60
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 80084fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	693b      	ldr	r3, [r7, #16]
}
 8008504:	e02a      	b.n	800855c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <HAL_TIM_Base_MspInit+0x170>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d114      	bne.n	800853a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008514:	4a13      	ldr	r2, [pc, #76]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800851a:	6613      	str	r3, [r2, #96]	; 0x60
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800851e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	2018      	movs	r0, #24
 800852e:	f001 fcfc 	bl	8009f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008532:	2018      	movs	r0, #24
 8008534:	f001 fd13 	bl	8009f5e <HAL_NVIC_EnableIRQ>
}
 8008538:	e010      	b.n	800855c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <HAL_TIM_Base_MspInit+0x174>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10b      	bne.n	800855c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008544:	4b07      	ldr	r3, [pc, #28]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008548:	4a06      	ldr	r2, [pc, #24]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 800854a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854e:	6613      	str	r3, [r2, #96]	; 0x60
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <HAL_TIM_Base_MspInit+0x160>)
 8008552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
}
 800855c:	bf00      	nop
 800855e:	3738      	adds	r7, #56	; 0x38
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40021000 	.word	0x40021000
 8008568:	40000400 	.word	0x40000400
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40013400 	.word	0x40013400
 8008574:	40014000 	.word	0x40014000
 8008578:	40014400 	.word	0x40014400

0800857c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800857c:	480d      	ldr	r0, [pc, #52]	; (80085b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800857e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008580:	480d      	ldr	r0, [pc, #52]	; (80085b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8008582:	490e      	ldr	r1, [pc, #56]	; (80085bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8008584:	4a0e      	ldr	r2, [pc, #56]	; (80085c0 <LoopForever+0xe>)
  movs r3, #0
 8008586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008588:	e002      	b.n	8008590 <LoopCopyDataInit>

0800858a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800858a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800858c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800858e:	3304      	adds	r3, #4

08008590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008594:	d3f9      	bcc.n	800858a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008596:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008598:	4c0b      	ldr	r4, [pc, #44]	; (80085c8 <LoopForever+0x16>)
  movs r3, #0
 800859a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800859c:	e001      	b.n	80085a2 <LoopFillZerobss>

0800859e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800859e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085a0:	3204      	adds	r2, #4

080085a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085a4:	d3fb      	bcc.n	800859e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80085a6:	f7ff fc91 	bl	8007ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085aa:	f006 f961 	bl	800e870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80085ae:	f7ff f955 	bl	800785c <main>

080085b2 <LoopForever>:

LoopForever:
    b LoopForever
 80085b2:	e7fe      	b.n	80085b2 <LoopForever>
  ldr   r0, =_estack
 80085b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80085b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085bc:	200019c8 	.word	0x200019c8
  ldr r2, =_sidata
 80085c0:	08013bc0 	.word	0x08013bc0
  ldr r2, =_sbss
 80085c4:	200019c8 	.word	0x200019c8
  ldr r4, =_ebss
 80085c8:	20002464 	.word	0x20002464

080085cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80085cc:	e7fe      	b.n	80085cc <ADC1_2_IRQHandler>

080085ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085d8:	2003      	movs	r0, #3
 80085da:	f001 fc9b 	bl	8009f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085de:	2000      	movs	r0, #0
 80085e0:	f000 f80e 	bl	8008600 <HAL_InitTick>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	71fb      	strb	r3, [r7, #7]
 80085ee:	e001      	b.n	80085f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085f0:	f7ff fae4 	bl	8007bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085f4:	79fb      	ldrb	r3, [r7, #7]

}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_InitTick+0x68>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d022      	beq.n	800865a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <HAL_InitTick+0x6c>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	4b13      	ldr	r3, [pc, #76]	; (8008668 <HAL_InitTick+0x68>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008620:	fbb1 f3f3 	udiv	r3, r1, r3
 8008624:	fbb2 f3f3 	udiv	r3, r2, r3
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fca6 	bl	8009f7a <HAL_SYSTICK_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10f      	bne.n	8008654 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b0f      	cmp	r3, #15
 8008638:	d809      	bhi.n	800864e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800863a:	2200      	movs	r2, #0
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008642:	f001 fc72 	bl	8009f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008646:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <HAL_InitTick+0x70>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	e007      	b.n	800865e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
 8008652:	e004      	b.n	800865e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
 8008658:	e001      	b.n	800865e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000ca8 	.word	0x20000ca8
 800866c:	20000ca0 	.word	0x20000ca0
 8008670:	20000ca4 	.word	0x20000ca4

08008674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_IncTick+0x1c>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_IncTick+0x20>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4413      	add	r3, r2
 8008682:	4a03      	ldr	r2, [pc, #12]	; (8008690 <HAL_IncTick+0x1c>)
 8008684:	6013      	str	r3, [r2, #0]
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	2000245c 	.word	0x2000245c
 8008694:	20000ca8 	.word	0x20000ca8

08008698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  return uwTick;
 800869c:	4b03      	ldr	r3, [pc, #12]	; (80086ac <HAL_GetTick+0x14>)
 800869e:	681b      	ldr	r3, [r3, #0]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	2000245c 	.word	0x2000245c

080086b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80086b8:	f7ff ffee 	bl	8008698 <HAL_GetTick>
 80086bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c8:	d004      	beq.n	80086d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <HAL_Delay+0x40>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086d4:	bf00      	nop
 80086d6:	f7ff ffdf 	bl	8008698 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d8f7      	bhi.n	80086d6 <HAL_Delay+0x26>
  {
  }
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000ca8 	.word	0x20000ca8

080086f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	609a      	str	r2, [r3, #8]
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800875c:	b490      	push	{r4, r7}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3360      	adds	r3, #96	; 0x60
 800876e:	461a      	mov	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	4b08      	ldr	r3, [pc, #32]	; (800879c <LL_ADC_SetOffset+0x40>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	4313      	orrs	r3, r2
 800878a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800878e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bc90      	pop	{r4, r7}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	03fff000 	.word	0x03fff000

080087a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80087a0:	b490      	push	{r4, r7}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3360      	adds	r3, #96	; 0x60
 80087ae:	461a      	mov	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc90      	pop	{r4, r7}
 80087c6:	4770      	bx	lr

080087c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80087c8:	b490      	push	{r4, r7}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3360      	adds	r3, #96	; 0x60
 80087d8:	461a      	mov	r2, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc90      	pop	{r4, r7}
 80087f6:	4770      	bx	lr

080087f8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80087f8:	b490      	push	{r4, r7}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3360      	adds	r3, #96	; 0x60
 8008808:	461a      	mov	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4313      	orrs	r3, r2
 800881c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bc90      	pop	{r4, r7}
 8008826:	4770      	bx	lr

08008828 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008828:	b490      	push	{r4, r7}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3360      	adds	r3, #96	; 0x60
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4313      	orrs	r3, r2
 800884c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bc90      	pop	{r4, r7}
 8008856:	4770      	bx	lr

08008858 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	615a      	str	r2, [r3, #20]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800887e:	b490      	push	{r4, r7}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3330      	adds	r3, #48	; 0x30
 800888e:	461a      	mov	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	f003 030c 	and.w	r3, r3, #12
 800889a:	4413      	add	r3, r2
 800889c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f003 031f 	and.w	r3, r3, #31
 80088a6:	211f      	movs	r1, #31
 80088a8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ac:	43db      	mvns	r3, r3
 80088ae:	401a      	ands	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	0e9b      	lsrs	r3, r3, #26
 80088b4:	f003 011f 	and.w	r1, r3, #31
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	fa01 f303 	lsl.w	r3, r1, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc90      	pop	{r4, r7}
 80088ce:	4770      	bx	lr

080088d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80088d0:	b490      	push	{r4, r7}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3314      	adds	r3, #20
 80088e0:	461a      	mov	r2, r3
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	0e5b      	lsrs	r3, r3, #25
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	4413      	add	r3, r2
 80088ee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	0d1b      	lsrs	r3, r3, #20
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	2107      	movs	r1, #7
 80088fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008900:	43db      	mvns	r3, r3
 8008902:	401a      	ands	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	0d1b      	lsrs	r3, r3, #20
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	fa01 f303 	lsl.w	r3, r1, r3
 8008912:	4313      	orrs	r3, r2
 8008914:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bc90      	pop	{r4, r7}
 800891e:	4770      	bx	lr

08008920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008938:	43db      	mvns	r3, r3
 800893a:	401a      	ands	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0318 	and.w	r3, r3, #24
 8008942:	4908      	ldr	r1, [pc, #32]	; (8008964 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008944:	40d9      	lsrs	r1, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	400b      	ands	r3, r1
 800894a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800894e:	431a      	orrs	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	0007ffff 	.word	0x0007ffff

08008968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6093      	str	r3, [r2, #8]
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800899c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a0:	d101      	bne.n	80089a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80089c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80089c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f0:	d101      	bne.n	80089f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e000      	b.n	80089f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <LL_ADC_IsEnabled+0x18>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <LL_ADC_IsEnabled+0x1a>
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d101      	bne.n	8008a42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d101      	bne.n	8008a68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e000      	b.n	8008a6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008a78:	b590      	push	{r4, r7, lr}
 8008a7a:	b089      	sub	sp, #36	; 0x24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e1ad      	b.n	8008dee <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fe f937 	bl	8006d14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff ff67 	bl	800898c <LL_ADC_IsDeepPowerDownEnabled>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ff4d 	bl	8008968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff ff82 	bl	80089dc <LL_ADC_IsInternalRegulatorEnabled>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d113      	bne.n	8008b06 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff ff66 	bl	80089b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008ae8:	4b9e      	ldr	r3, [pc, #632]	; (8008d64 <HAL_ADC_Init+0x2ec>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	099b      	lsrs	r3, r3, #6
 8008aee:	4a9e      	ldr	r2, [pc, #632]	; (8008d68 <HAL_ADC_Init+0x2f0>)
 8008af0:	fba2 2303 	umull	r2, r3, r2, r3
 8008af4:	099b      	lsrs	r3, r3, #6
 8008af6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008af8:	e002      	b.n	8008b00 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f9      	bne.n	8008afa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff ff66 	bl	80089dc <LL_ADC_IsInternalRegulatorEnabled>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10d      	bne.n	8008b32 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b1a:	f043 0210 	orr.w	r2, r3, #16
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b26:	f043 0201 	orr.w	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff77 	bl	8008a2a <LL_ADC_REG_IsConversionOngoing>
 8008b3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f040 8148 	bne.w	8008ddc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 8144 	bne.w	8008ddc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008b5c:	f043 0202 	orr.w	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7ff ff4b 	bl	8008a04 <LL_ADC_IsEnabled>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d141      	bne.n	8008bf8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b7c:	d004      	beq.n	8008b88 <HAL_ADC_Init+0x110>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a7a      	ldr	r2, [pc, #488]	; (8008d6c <HAL_ADC_Init+0x2f4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d10f      	bne.n	8008ba8 <HAL_ADC_Init+0x130>
 8008b88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008b8c:	f7ff ff3a 	bl	8008a04 <LL_ADC_IsEnabled>
 8008b90:	4604      	mov	r4, r0
 8008b92:	4876      	ldr	r0, [pc, #472]	; (8008d6c <HAL_ADC_Init+0x2f4>)
 8008b94:	f7ff ff36 	bl	8008a04 <LL_ADC_IsEnabled>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4323      	orrs	r3, r4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e012      	b.n	8008bce <HAL_ADC_Init+0x156>
 8008ba8:	4871      	ldr	r0, [pc, #452]	; (8008d70 <HAL_ADC_Init+0x2f8>)
 8008baa:	f7ff ff2b 	bl	8008a04 <LL_ADC_IsEnabled>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4870      	ldr	r0, [pc, #448]	; (8008d74 <HAL_ADC_Init+0x2fc>)
 8008bb2:	f7ff ff27 	bl	8008a04 <LL_ADC_IsEnabled>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	431c      	orrs	r4, r3
 8008bba:	486f      	ldr	r0, [pc, #444]	; (8008d78 <HAL_ADC_Init+0x300>)
 8008bbc:	f7ff ff22 	bl	8008a04 <LL_ADC_IsEnabled>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4323      	orrs	r3, r4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf0c      	ite	eq
 8008bc8:	2301      	moveq	r3, #1
 8008bca:	2300      	movne	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d012      	beq.n	8008bf8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bda:	d004      	beq.n	8008be6 <HAL_ADC_Init+0x16e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a62      	ldr	r2, [pc, #392]	; (8008d6c <HAL_ADC_Init+0x2f4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d101      	bne.n	8008bea <HAL_ADC_Init+0x172>
 8008be6:	4a65      	ldr	r2, [pc, #404]	; (8008d7c <HAL_ADC_Init+0x304>)
 8008be8:	e000      	b.n	8008bec <HAL_ADC_Init+0x174>
 8008bea:	4a65      	ldr	r2, [pc, #404]	; (8008d80 <HAL_ADC_Init+0x308>)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7ff fd7e 	bl	80086f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7f5b      	ldrb	r3, [r3, #29]
 8008bfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008c08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008c0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d106      	bne.n	8008c34 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	045b      	lsls	r3, r3, #17
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	4b4b      	ldr	r3, [pc, #300]	; (8008d84 <HAL_ADC_Init+0x30c>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	69b9      	ldr	r1, [r7, #24]
 8008c60:	430b      	orrs	r3, r1
 8008c62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff fed3 	bl	8008a2a <LL_ADC_REG_IsConversionOngoing>
 8008c84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff fee0 	bl	8008a50 <LL_ADC_INJ_IsConversionOngoing>
 8008c90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d17f      	bne.n	8008d98 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d17c      	bne.n	8008d98 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008ca2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008caa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cba:	f023 0302 	bic.w	r3, r3, #2
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	69b9      	ldr	r1, [r7, #24]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d017      	beq.n	8008d00 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ce8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6911      	ldr	r1, [r2, #16]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008cfe:	e013      	b.n	8008d28 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d12a      	bne.n	8008d88 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d3c:	f023 0304 	bic.w	r3, r3, #4
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d48:	4311      	orrs	r1, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d4e:	4311      	orrs	r1, r2
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d54:	430a      	orrs	r2, r1
 8008d56:	431a      	orrs	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0201 	orr.w	r2, r2, #1
 8008d60:	611a      	str	r2, [r3, #16]
 8008d62:	e019      	b.n	8008d98 <HAL_ADC_Init+0x320>
 8008d64:	20000ca0 	.word	0x20000ca0
 8008d68:	053e2d63 	.word	0x053e2d63
 8008d6c:	50000100 	.word	0x50000100
 8008d70:	50000400 	.word	0x50000400
 8008d74:	50000500 	.word	0x50000500
 8008d78:	50000600 	.word	0x50000600
 8008d7c:	50000300 	.word	0x50000300
 8008d80:	50000700 	.word	0x50000700
 8008d84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10c      	bne.n	8008dba <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	f023 010f 	bic.w	r1, r3, #15
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	1e5a      	subs	r2, r3, #1
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
 8008db8:	e007      	b.n	8008dca <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 020f 	bic.w	r2, r2, #15
 8008dc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	f043 0201 	orr.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dda:	e007      	b.n	8008dec <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de0:	f043 0210 	orr.w	r2, r3, #16
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008dec:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3724      	adds	r7, #36	; 0x24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd90      	pop	{r4, r7, pc}
 8008df6:	bf00      	nop

08008df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b0a6      	sub	sp, #152	; 0x98
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_ADC_ConfigChannel+0x22>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e38e      	b.n	8009538 <HAL_ADC_ConfigChannel+0x740>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fdff 	bl	8008a2a <LL_ADC_REG_IsConversionOngoing>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 836f 	bne.w	8009512 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	6859      	ldr	r1, [r3, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	f7ff fd1c 	bl	800887e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fded 	bl	8008a2a <LL_ADC_REG_IsConversionOngoing>
 8008e50:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fdf9 	bl	8008a50 <LL_ADC_INJ_IsConversionOngoing>
 8008e5e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f040 817b 	bne.w	8009162 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f040 8176 	bne.w	8009162 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e7e:	d10f      	bne.n	8008ea0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f7ff fd20 	bl	80088d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fcdd 	bl	8008858 <LL_ADC_SetSamplingTimeCommonConfig>
 8008e9e:	e00e      	b.n	8008ebe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6819      	ldr	r1, [r3, #0]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f7ff fd0f 	bl	80088d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fccd 	bl	8008858 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695a      	ldr	r2, [r3, #20]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d022      	beq.n	8008f26 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	6919      	ldr	r1, [r3, #16]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ef0:	f7ff fc34 	bl	800875c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	6919      	ldr	r1, [r3, #16]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	461a      	mov	r2, r3
 8008f02:	f7ff fc79 	bl	80087f8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6919      	ldr	r1, [r3, #16]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	7f1b      	ldrb	r3, [r3, #28]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d102      	bne.n	8008f1c <HAL_ADC_ConfigChannel+0x124>
 8008f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f1a:	e000      	b.n	8008f1e <HAL_ADC_ConfigChannel+0x126>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7ff fc82 	bl	8008828 <LL_ADC_SetOffsetSaturation>
 8008f24:	e11d      	b.n	8009162 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fc37 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <HAL_ADC_ConfigChannel+0x15a>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2100      	movs	r1, #0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fc2c 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	0e9b      	lsrs	r3, r3, #26
 8008f4c:	f003 021f 	and.w	r2, r3, #31
 8008f50:	e012      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x180>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fc21 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f68:	fa93 f3a3 	rbit	r3, r3
 8008f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f70:	fab3 f383 	clz	r3, r3
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <HAL_ADC_ConfigChannel+0x198>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	0e9b      	lsrs	r3, r3, #26
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	e00a      	b.n	8008fa6 <HAL_ADC_ConfigChannel+0x1ae>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f98:	fa93 f3a3 	rbit	r3, r3
 8008f9c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fa0:	fab3 f383 	clz	r3, r3
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d106      	bne.n	8008fb8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fc08 	bl	80087c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fbee 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <HAL_ADC_ConfigChannel+0x1ec>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fbe3 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	0e9b      	lsrs	r3, r3, #26
 8008fde:	f003 021f 	and.w	r2, r3, #31
 8008fe2:	e010      	b.n	8009006 <HAL_ADC_ConfigChannel+0x20e>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fbd8 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ff6:	fa93 f3a3 	rbit	r3, r3
 8008ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffe:	fab3 f383 	clz	r3, r3
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <HAL_ADC_ConfigChannel+0x226>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	0e9b      	lsrs	r3, r3, #26
 8009018:	f003 031f 	and.w	r3, r3, #31
 800901c:	e00a      	b.n	8009034 <HAL_ADC_ConfigChannel+0x23c>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009026:	fa93 f3a3 	rbit	r3, r3
 800902a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800902c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800902e:	fab3 f383 	clz	r3, r3
 8009032:	b2db      	uxtb	r3, r3
 8009034:	429a      	cmp	r2, r3
 8009036:	d106      	bne.n	8009046 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2200      	movs	r2, #0
 800903e:	2101      	movs	r1, #1
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff fbc1 	bl	80087c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2102      	movs	r1, #2
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fba7 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8009052:	4603      	mov	r3, r0
 8009054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <HAL_ADC_ConfigChannel+0x27a>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2102      	movs	r1, #2
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fb9c 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 8009068:	4603      	mov	r3, r0
 800906a:	0e9b      	lsrs	r3, r3, #26
 800906c:	f003 021f 	and.w	r2, r3, #31
 8009070:	e010      	b.n	8009094 <HAL_ADC_ConfigChannel+0x29c>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2102      	movs	r1, #2
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff fb91 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 800907e:	4603      	mov	r3, r0
 8009080:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009084:	fa93 f3a3 	rbit	r3, r3
 8009088:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800908a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800908c:	fab3 f383 	clz	r3, r3
 8009090:	b2db      	uxtb	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x2b4>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	0e9b      	lsrs	r3, r3, #26
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	e00a      	b.n	80090c2 <HAL_ADC_ConfigChannel+0x2ca>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b4:	fa93 f3a3 	rbit	r3, r3
 80090b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80090ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090bc:	fab3 f383 	clz	r3, r3
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d106      	bne.n	80090d4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	2102      	movs	r1, #2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff fb7a 	bl	80087c8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2103      	movs	r1, #3
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff fb60 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <HAL_ADC_ConfigChannel+0x308>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2103      	movs	r1, #3
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fb55 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 80090f6:	4603      	mov	r3, r0
 80090f8:	0e9b      	lsrs	r3, r3, #26
 80090fa:	f003 021f 	and.w	r2, r3, #31
 80090fe:	e010      	b.n	8009122 <HAL_ADC_ConfigChannel+0x32a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2103      	movs	r1, #3
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fb4a 	bl	80087a0 <LL_ADC_GetOffsetChannel>
 800910c:	4603      	mov	r3, r0
 800910e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009112:	fa93 f3a3 	rbit	r3, r3
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	fab3 f383 	clz	r3, r3
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800912a:	2b00      	cmp	r3, #0
 800912c:	d105      	bne.n	800913a <HAL_ADC_ConfigChannel+0x342>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	0e9b      	lsrs	r3, r3, #26
 8009134:	f003 031f 	and.w	r3, r3, #31
 8009138:	e00a      	b.n	8009150 <HAL_ADC_ConfigChannel+0x358>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009142:	fa93 f3a3 	rbit	r3, r3
 8009146:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914a:	fab3 f383 	clz	r3, r3
 800914e:	b2db      	uxtb	r3, r3
 8009150:	429a      	cmp	r2, r3
 8009152:	d106      	bne.n	8009162 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	2103      	movs	r1, #3
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fb33 	bl	80087c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff fc4c 	bl	8008a04 <LL_ADC_IsEnabled>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	f040 810c 	bne.w	800938c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	461a      	mov	r2, r3
 8009182:	f7ff fbcd 	bl	8008920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	4aaf      	ldr	r2, [pc, #700]	; (8009448 <HAL_ADC_ConfigChannel+0x650>)
 800918c:	4293      	cmp	r3, r2
 800918e:	f040 80fd 	bne.w	800938c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <HAL_ADC_ConfigChannel+0x3c2>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	0e9b      	lsrs	r3, r3, #26
 80091a8:	3301      	adds	r3, #1
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b09      	cmp	r3, #9
 80091b0:	bf94      	ite	ls
 80091b2:	2301      	movls	r3, #1
 80091b4:	2300      	movhi	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	e012      	b.n	80091e0 <HAL_ADC_ConfigChannel+0x3e8>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	fa93 f3a3 	rbit	r3, r3
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80091c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ca:	fab3 f383 	clz	r3, r3
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	3301      	adds	r3, #1
 80091d2:	f003 031f 	and.w	r3, r3, #31
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	bf94      	ite	ls
 80091da:	2301      	movls	r3, #1
 80091dc:	2300      	movhi	r3, #0
 80091de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d064      	beq.n	80092ae <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d107      	bne.n	8009200 <HAL_ADC_ConfigChannel+0x408>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	0e9b      	lsrs	r3, r3, #26
 80091f6:	3301      	adds	r3, #1
 80091f8:	069b      	lsls	r3, r3, #26
 80091fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091fe:	e00e      	b.n	800921e <HAL_ADC_ConfigChannel+0x426>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	fa93 f3a3 	rbit	r3, r3
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	fab3 f383 	clz	r3, r3
 8009214:	b2db      	uxtb	r3, r3
 8009216:	3301      	adds	r3, #1
 8009218:	069b      	lsls	r3, r3, #26
 800921a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <HAL_ADC_ConfigChannel+0x446>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	0e9b      	lsrs	r3, r3, #26
 8009230:	3301      	adds	r3, #1
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	2101      	movs	r1, #1
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	e010      	b.n	8009260 <HAL_ADC_ConfigChannel+0x468>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	fa93 f3a3 	rbit	r3, r3
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	fab3 f383 	clz	r3, r3
 8009252:	b2db      	uxtb	r3, r3
 8009254:	3301      	adds	r3, #1
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	2101      	movs	r1, #1
 800925c:	fa01 f303 	lsl.w	r3, r1, r3
 8009260:	ea42 0103 	orr.w	r1, r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <HAL_ADC_ConfigChannel+0x48e>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	0e9b      	lsrs	r3, r3, #26
 8009276:	3301      	adds	r3, #1
 8009278:	f003 021f 	and.w	r2, r3, #31
 800927c:	4613      	mov	r3, r2
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	4413      	add	r3, r2
 8009282:	051b      	lsls	r3, r3, #20
 8009284:	e011      	b.n	80092aa <HAL_ADC_ConfigChannel+0x4b2>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	fa93 f3a3 	rbit	r3, r3
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	fab3 f383 	clz	r3, r3
 800929a:	b2db      	uxtb	r3, r3
 800929c:	3301      	adds	r3, #1
 800929e:	f003 021f 	and.w	r2, r3, #31
 80092a2:	4613      	mov	r3, r2
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4413      	add	r3, r2
 80092a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092aa:	430b      	orrs	r3, r1
 80092ac:	e069      	b.n	8009382 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d107      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x4d2>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	0e9b      	lsrs	r3, r3, #26
 80092c0:	3301      	adds	r3, #1
 80092c2:	069b      	lsls	r3, r3, #26
 80092c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092c8:	e00e      	b.n	80092e8 <HAL_ADC_ConfigChannel+0x4f0>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	fa93 f3a3 	rbit	r3, r3
 80092d6:	61fb      	str	r3, [r7, #28]
  return result;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	fab3 f383 	clz	r3, r3
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	3301      	adds	r3, #1
 80092e2:	069b      	lsls	r3, r3, #26
 80092e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <HAL_ADC_ConfigChannel+0x510>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	0e9b      	lsrs	r3, r3, #26
 80092fa:	3301      	adds	r3, #1
 80092fc:	f003 031f 	and.w	r3, r3, #31
 8009300:	2101      	movs	r1, #1
 8009302:	fa01 f303 	lsl.w	r3, r1, r3
 8009306:	e010      	b.n	800932a <HAL_ADC_ConfigChannel+0x532>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	fa93 f3a3 	rbit	r3, r3
 8009314:	617b      	str	r3, [r7, #20]
  return result;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	fab3 f383 	clz	r3, r3
 800931c:	b2db      	uxtb	r3, r3
 800931e:	3301      	adds	r3, #1
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	2101      	movs	r1, #1
 8009326:	fa01 f303 	lsl.w	r3, r1, r3
 800932a:	ea42 0103 	orr.w	r1, r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10d      	bne.n	8009356 <HAL_ADC_ConfigChannel+0x55e>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	0e9b      	lsrs	r3, r3, #26
 8009340:	3301      	adds	r3, #1
 8009342:	f003 021f 	and.w	r2, r3, #31
 8009346:	4613      	mov	r3, r2
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	4413      	add	r3, r2
 800934c:	3b1e      	subs	r3, #30
 800934e:	051b      	lsls	r3, r3, #20
 8009350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009354:	e014      	b.n	8009380 <HAL_ADC_ConfigChannel+0x588>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	fa93 f3a3 	rbit	r3, r3
 8009362:	60fb      	str	r3, [r7, #12]
  return result;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	fab3 f383 	clz	r3, r3
 800936a:	b2db      	uxtb	r3, r3
 800936c:	3301      	adds	r3, #1
 800936e:	f003 021f 	and.w	r2, r3, #31
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	3b1e      	subs	r3, #30
 800937a:	051b      	lsls	r3, r3, #20
 800937c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009380:	430b      	orrs	r3, r1
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	6892      	ldr	r2, [r2, #8]
 8009386:	4619      	mov	r1, r3
 8009388:	f7ff faa2 	bl	80088d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b2e      	ldr	r3, [pc, #184]	; (800944c <HAL_ADC_ConfigChannel+0x654>)
 8009392:	4013      	ands	r3, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80c9 	beq.w	800952c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093a2:	d004      	beq.n	80093ae <HAL_ADC_ConfigChannel+0x5b6>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a29      	ldr	r2, [pc, #164]	; (8009450 <HAL_ADC_ConfigChannel+0x658>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d101      	bne.n	80093b2 <HAL_ADC_ConfigChannel+0x5ba>
 80093ae:	4b29      	ldr	r3, [pc, #164]	; (8009454 <HAL_ADC_ConfigChannel+0x65c>)
 80093b0:	e000      	b.n	80093b4 <HAL_ADC_ConfigChannel+0x5bc>
 80093b2:	4b29      	ldr	r3, [pc, #164]	; (8009458 <HAL_ADC_ConfigChannel+0x660>)
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff f9c3 	bl	8008740 <LL_ADC_GetCommonPathInternalCh>
 80093ba:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a26      	ldr	r2, [pc, #152]	; (800945c <HAL_ADC_ConfigChannel+0x664>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d004      	beq.n	80093d2 <HAL_ADC_ConfigChannel+0x5da>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a24      	ldr	r2, [pc, #144]	; (8009460 <HAL_ADC_ConfigChannel+0x668>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d14e      	bne.n	8009470 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80093d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d148      	bne.n	8009470 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e6:	d005      	beq.n	80093f4 <HAL_ADC_ConfigChannel+0x5fc>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <HAL_ADC_ConfigChannel+0x66c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	f040 8099 	bne.w	8009526 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093fc:	d004      	beq.n	8009408 <HAL_ADC_ConfigChannel+0x610>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a13      	ldr	r2, [pc, #76]	; (8009450 <HAL_ADC_ConfigChannel+0x658>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d101      	bne.n	800940c <HAL_ADC_ConfigChannel+0x614>
 8009408:	4a12      	ldr	r2, [pc, #72]	; (8009454 <HAL_ADC_ConfigChannel+0x65c>)
 800940a:	e000      	b.n	800940e <HAL_ADC_ConfigChannel+0x616>
 800940c:	4a12      	ldr	r2, [pc, #72]	; (8009458 <HAL_ADC_ConfigChannel+0x660>)
 800940e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f7ff f97e 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <HAL_ADC_ConfigChannel+0x670>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	099b      	lsrs	r3, r3, #6
 8009424:	4a11      	ldr	r2, [pc, #68]	; (800946c <HAL_ADC_ConfigChannel+0x674>)
 8009426:	fba2 2303 	umull	r2, r3, r2, r3
 800942a:	099a      	lsrs	r2, r3, #6
 800942c:	4613      	mov	r3, r2
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009436:	e002      	b.n	800943e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3b01      	subs	r3, #1
 800943c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f9      	bne.n	8009438 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009444:	e06f      	b.n	8009526 <HAL_ADC_ConfigChannel+0x72e>
 8009446:	bf00      	nop
 8009448:	407f0000 	.word	0x407f0000
 800944c:	80080000 	.word	0x80080000
 8009450:	50000100 	.word	0x50000100
 8009454:	50000300 	.word	0x50000300
 8009458:	50000700 	.word	0x50000700
 800945c:	c3210000 	.word	0xc3210000
 8009460:	90c00010 	.word	0x90c00010
 8009464:	50000600 	.word	0x50000600
 8009468:	20000ca0 	.word	0x20000ca0
 800946c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a32      	ldr	r2, [pc, #200]	; (8009540 <HAL_ADC_ConfigChannel+0x748>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d125      	bne.n	80094c6 <HAL_ADC_ConfigChannel+0x6ce>
 800947a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800947e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11f      	bne.n	80094c6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <HAL_ADC_ConfigChannel+0x74c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d104      	bne.n	800949a <HAL_ADC_ConfigChannel+0x6a2>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a2c      	ldr	r2, [pc, #176]	; (8009548 <HAL_ADC_ConfigChannel+0x750>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d047      	beq.n	800952a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a2:	d004      	beq.n	80094ae <HAL_ADC_ConfigChannel+0x6b6>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a26      	ldr	r2, [pc, #152]	; (8009544 <HAL_ADC_ConfigChannel+0x74c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d101      	bne.n	80094b2 <HAL_ADC_ConfigChannel+0x6ba>
 80094ae:	4a27      	ldr	r2, [pc, #156]	; (800954c <HAL_ADC_ConfigChannel+0x754>)
 80094b0:	e000      	b.n	80094b4 <HAL_ADC_ConfigChannel+0x6bc>
 80094b2:	4a27      	ldr	r2, [pc, #156]	; (8009550 <HAL_ADC_ConfigChannel+0x758>)
 80094b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7ff f92b 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80094c4:	e031      	b.n	800952a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a22      	ldr	r2, [pc, #136]	; (8009554 <HAL_ADC_ConfigChannel+0x75c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d12d      	bne.n	800952c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80094d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d127      	bne.n	800952c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a18      	ldr	r2, [pc, #96]	; (8009544 <HAL_ADC_ConfigChannel+0x74c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d022      	beq.n	800952c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ee:	d004      	beq.n	80094fa <HAL_ADC_ConfigChannel+0x702>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <HAL_ADC_ConfigChannel+0x74c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d101      	bne.n	80094fe <HAL_ADC_ConfigChannel+0x706>
 80094fa:	4a14      	ldr	r2, [pc, #80]	; (800954c <HAL_ADC_ConfigChannel+0x754>)
 80094fc:	e000      	b.n	8009500 <HAL_ADC_ConfigChannel+0x708>
 80094fe:	4a14      	ldr	r2, [pc, #80]	; (8009550 <HAL_ADC_ConfigChannel+0x758>)
 8009500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7ff f905 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
 8009510:	e00c      	b.n	800952c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	f043 0220 	orr.w	r2, r3, #32
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009524:	e002      	b.n	800952c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800952a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009534:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009538:	4618      	mov	r0, r3
 800953a:	3798      	adds	r7, #152	; 0x98
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	c7520000 	.word	0xc7520000
 8009544:	50000100 	.word	0x50000100
 8009548:	50000500 	.word	0x50000500
 800954c:	50000300 	.word	0x50000300
 8009550:	50000700 	.word	0x50000700
 8009554:	cb840000 	.word	0xcb840000

08009558 <LL_ADC_IsEnabled>:
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <LL_ADC_IsEnabled+0x18>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <LL_ADC_IsEnabled+0x1a>
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <LL_ADC_REG_IsConversionOngoing>:
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b04      	cmp	r3, #4
 8009590:	d101      	bne.n	8009596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b0a1      	sub	sp, #132	; 0x84
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80095be:	2302      	movs	r3, #2
 80095c0:	e0e3      	b.n	800978a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d2:	d102      	bne.n	80095da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80095d4:	4b6f      	ldr	r3, [pc, #444]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80095d6:	60bb      	str	r3, [r7, #8]
 80095d8:	e009      	b.n	80095ee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a6e      	ldr	r2, [pc, #440]	; (8009798 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d102      	bne.n	80095ea <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80095e4:	4b6d      	ldr	r3, [pc, #436]	; (800979c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	e001      	b.n	80095ee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10b      	bne.n	800960c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f8:	f043 0220 	orr.w	r2, r3, #32
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0be      	b.n	800978a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff ffb5 	bl	800957e <LL_ADC_REG_IsConversionOngoing>
 8009614:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff ffaf 	bl	800957e <LL_ADC_REG_IsConversionOngoing>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 80a0 	bne.w	8009768 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 809c 	bne.w	8009768 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009638:	d004      	beq.n	8009644 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a55      	ldr	r2, [pc, #340]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d101      	bne.n	8009648 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009644:	4b56      	ldr	r3, [pc, #344]	; (80097a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009646:	e000      	b.n	800964a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009648:	4b56      	ldr	r3, [pc, #344]	; (80097a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800964a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d04b      	beq.n	80096ec <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6859      	ldr	r1, [r3, #4]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009666:	035b      	lsls	r3, r3, #13
 8009668:	430b      	orrs	r3, r1
 800966a:	431a      	orrs	r2, r3
 800966c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009678:	d004      	beq.n	8009684 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a45      	ldr	r2, [pc, #276]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d10f      	bne.n	80096a4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009684:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009688:	f7ff ff66 	bl	8009558 <LL_ADC_IsEnabled>
 800968c:	4604      	mov	r4, r0
 800968e:	4841      	ldr	r0, [pc, #260]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009690:	f7ff ff62 	bl	8009558 <LL_ADC_IsEnabled>
 8009694:	4603      	mov	r3, r0
 8009696:	4323      	orrs	r3, r4
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf0c      	ite	eq
 800969c:	2301      	moveq	r3, #1
 800969e:	2300      	movne	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	e012      	b.n	80096ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80096a4:	483c      	ldr	r0, [pc, #240]	; (8009798 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80096a6:	f7ff ff57 	bl	8009558 <LL_ADC_IsEnabled>
 80096aa:	4604      	mov	r4, r0
 80096ac:	483b      	ldr	r0, [pc, #236]	; (800979c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80096ae:	f7ff ff53 	bl	8009558 <LL_ADC_IsEnabled>
 80096b2:	4603      	mov	r3, r0
 80096b4:	431c      	orrs	r4, r3
 80096b6:	483c      	ldr	r0, [pc, #240]	; (80097a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80096b8:	f7ff ff4e 	bl	8009558 <LL_ADC_IsEnabled>
 80096bc:	4603      	mov	r3, r0
 80096be:	4323      	orrs	r3, r4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bf0c      	ite	eq
 80096c4:	2301      	moveq	r3, #1
 80096c6:	2300      	movne	r3, #0
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d056      	beq.n	800977c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80096ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	6811      	ldr	r1, [r2, #0]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	6892      	ldr	r2, [r2, #8]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	431a      	orrs	r2, r3
 80096e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80096ea:	e047      	b.n	800977c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80096ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009700:	d004      	beq.n	800970c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a23      	ldr	r2, [pc, #140]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d10f      	bne.n	800972c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800970c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009710:	f7ff ff22 	bl	8009558 <LL_ADC_IsEnabled>
 8009714:	4604      	mov	r4, r0
 8009716:	481f      	ldr	r0, [pc, #124]	; (8009794 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009718:	f7ff ff1e 	bl	8009558 <LL_ADC_IsEnabled>
 800971c:	4603      	mov	r3, r0
 800971e:	4323      	orrs	r3, r4
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf0c      	ite	eq
 8009724:	2301      	moveq	r3, #1
 8009726:	2300      	movne	r3, #0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	e012      	b.n	8009752 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800972c:	481a      	ldr	r0, [pc, #104]	; (8009798 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800972e:	f7ff ff13 	bl	8009558 <LL_ADC_IsEnabled>
 8009732:	4604      	mov	r4, r0
 8009734:	4819      	ldr	r0, [pc, #100]	; (800979c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009736:	f7ff ff0f 	bl	8009558 <LL_ADC_IsEnabled>
 800973a:	4603      	mov	r3, r0
 800973c:	431c      	orrs	r4, r3
 800973e:	481a      	ldr	r0, [pc, #104]	; (80097a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009740:	f7ff ff0a 	bl	8009558 <LL_ADC_IsEnabled>
 8009744:	4603      	mov	r3, r0
 8009746:	4323      	orrs	r3, r4
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf0c      	ite	eq
 800974c:	2301      	moveq	r3, #1
 800974e:	2300      	movne	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d012      	beq.n	800977c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800975e:	f023 030f 	bic.w	r3, r3, #15
 8009762:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009764:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009766:	e009      	b.n	800977c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800976c:	f043 0220 	orr.w	r2, r3, #32
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800977a:	e000      	b.n	800977e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800977c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009786:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800978a:	4618      	mov	r0, r3
 800978c:	3784      	adds	r7, #132	; 0x84
 800978e:	46bd      	mov	sp, r7
 8009790:	bd90      	pop	{r4, r7, pc}
 8009792:	bf00      	nop
 8009794:	50000100 	.word	0x50000100
 8009798:	50000400 	.word	0x50000400
 800979c:	50000500 	.word	0x50000500
 80097a0:	50000300 	.word	0x50000300
 80097a4:	50000700 	.word	0x50000700
 80097a8:	50000600 	.word	0x50000600

080097ac <LL_EXTI_EnableIT_0_31>:
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <LL_EXTI_EnableIT_0_31+0x20>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4904      	ldr	r1, [pc, #16]	; (80097cc <LL_EXTI_EnableIT_0_31+0x20>)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4313      	orrs	r3, r2
 80097be:	600b      	str	r3, [r1, #0]
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	40010400 	.word	0x40010400

080097d0 <LL_EXTI_EnableIT_32_63>:
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097d8:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <LL_EXTI_EnableIT_32_63+0x20>)
 80097da:	6a1a      	ldr	r2, [r3, #32]
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <LL_EXTI_EnableIT_32_63+0x20>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	620b      	str	r3, [r1, #32]
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40010400 	.word	0x40010400

080097f4 <LL_EXTI_DisableIT_0_31>:
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <LL_EXTI_DisableIT_0_31+0x24>)
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	43db      	mvns	r3, r3
 8009804:	4904      	ldr	r1, [pc, #16]	; (8009818 <LL_EXTI_DisableIT_0_31+0x24>)
 8009806:	4013      	ands	r3, r2
 8009808:	600b      	str	r3, [r1, #0]
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40010400 	.word	0x40010400

0800981c <LL_EXTI_DisableIT_32_63>:
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <LL_EXTI_DisableIT_32_63+0x24>)
 8009826:	6a1a      	ldr	r2, [r3, #32]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	43db      	mvns	r3, r3
 800982c:	4904      	ldr	r1, [pc, #16]	; (8009840 <LL_EXTI_DisableIT_32_63+0x24>)
 800982e:	4013      	ands	r3, r2
 8009830:	620b      	str	r3, [r1, #32]
}
 8009832:	bf00      	nop
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40010400 	.word	0x40010400

08009844 <LL_EXTI_EnableEvent_0_31>:
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <LL_EXTI_EnableEvent_0_31+0x20>)
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	4904      	ldr	r1, [pc, #16]	; (8009864 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4313      	orrs	r3, r2
 8009856:	604b      	str	r3, [r1, #4]
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	40010400 	.word	0x40010400

08009868 <LL_EXTI_EnableEvent_32_63>:
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009874:	4904      	ldr	r1, [pc, #16]	; (8009888 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4313      	orrs	r3, r2
 800987a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	40010400 	.word	0x40010400

0800988c <LL_EXTI_DisableEvent_0_31>:
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	43db      	mvns	r3, r3
 800989c:	4904      	ldr	r1, [pc, #16]	; (80098b0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800989e:	4013      	ands	r3, r2
 80098a0:	604b      	str	r3, [r1, #4]
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40010400 	.word	0x40010400

080098b4 <LL_EXTI_DisableEvent_32_63>:
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80098be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	43db      	mvns	r3, r3
 80098c4:	4904      	ldr	r1, [pc, #16]	; (80098d8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40010400 	.word	0x40010400

080098dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	4904      	ldr	r1, [pc, #16]	; (80098fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	608b      	str	r3, [r1, #8]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	40010400 	.word	0x40010400

08009900 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800990a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800990c:	4904      	ldr	r1, [pc, #16]	; (8009920 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4313      	orrs	r3, r2
 8009912:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40010400 	.word	0x40010400

08009924 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	43db      	mvns	r3, r3
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009936:	4013      	ands	r3, r2
 8009938:	608b      	str	r3, [r1, #8]
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40010400 	.word	0x40010400

0800994c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	43db      	mvns	r3, r3
 800995c:	4904      	ldr	r1, [pc, #16]	; (8009970 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800995e:	4013      	ands	r3, r2
 8009960:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40010400 	.word	0x40010400

08009974 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800997c:	4b05      	ldr	r3, [pc, #20]	; (8009994 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	4904      	ldr	r1, [pc, #16]	; (8009994 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4313      	orrs	r3, r2
 8009986:	60cb      	str	r3, [r1, #12]
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	40010400 	.word	0x40010400

08009998 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80099a0:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4904      	ldr	r1, [pc, #16]	; (80099b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	40010400 	.word	0x40010400

080099bc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80099c6:	68da      	ldr	r2, [r3, #12]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	43db      	mvns	r3, r3
 80099cc:	4904      	ldr	r1, [pc, #16]	; (80099e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	60cb      	str	r3, [r1, #12]
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	40010400 	.word	0x40010400

080099e4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	43db      	mvns	r3, r3
 80099f4:	4904      	ldr	r1, [pc, #16]	; (8009a08 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	40010400 	.word	0x40010400

08009a0c <LL_EXTI_ClearFlag_0_31>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009a14:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6153      	str	r3, [r2, #20]
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	40010400 	.word	0x40010400

08009a2c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009a34:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40010400 	.word	0x40010400

08009a4c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d102      	bne.n	8009a68 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e180      	b.n	8009d6a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a76:	d102      	bne.n	8009a7e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	77fb      	strb	r3, [r7, #31]
 8009a7c:	e175      	b.n	8009d6a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7f5b      	ldrb	r3, [r3, #29]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7fd f9d1 	bl	8006e3c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aa4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4b98      	ldr	r3, [pc, #608]	; (8009d2c <HAL_COMP_Init+0x2e0>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	6979      	ldr	r1, [r7, #20]
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d015      	beq.n	8009b12 <HAL_COMP_Init+0xc6>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d112      	bne.n	8009b12 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009aec:	4b90      	ldr	r3, [pc, #576]	; (8009d30 <HAL_COMP_Init+0x2e4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	099b      	lsrs	r3, r3, #6
 8009af2:	4a90      	ldr	r2, [pc, #576]	; (8009d34 <HAL_COMP_Init+0x2e8>)
 8009af4:	fba2 2303 	umull	r2, r3, r2, r3
 8009af8:	099a      	lsrs	r2, r3, #6
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009b04:	e002      	b.n	8009b0c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f9      	bne.n	8009b06 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a88      	ldr	r2, [pc, #544]	; (8009d38 <HAL_COMP_Init+0x2ec>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d028      	beq.n	8009b6e <HAL_COMP_Init+0x122>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a86      	ldr	r2, [pc, #536]	; (8009d3c <HAL_COMP_Init+0x2f0>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d020      	beq.n	8009b68 <HAL_COMP_Init+0x11c>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a85      	ldr	r2, [pc, #532]	; (8009d40 <HAL_COMP_Init+0x2f4>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d018      	beq.n	8009b62 <HAL_COMP_Init+0x116>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a83      	ldr	r2, [pc, #524]	; (8009d44 <HAL_COMP_Init+0x2f8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d010      	beq.n	8009b5c <HAL_COMP_Init+0x110>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a82      	ldr	r2, [pc, #520]	; (8009d48 <HAL_COMP_Init+0x2fc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d008      	beq.n	8009b56 <HAL_COMP_Init+0x10a>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a80      	ldr	r2, [pc, #512]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d101      	bne.n	8009b52 <HAL_COMP_Init+0x106>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e00f      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e00d      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b5a:	e00a      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b60:	e007      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009b66:	e004      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b6c:	e001      	b.n	8009b72 <HAL_COMP_Init+0x126>
 8009b6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b72:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 80b6 	beq.w	8009cee <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a6e      	ldr	r2, [pc, #440]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d004      	beq.n	8009ba2 <HAL_COMP_Init+0x156>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a6c      	ldr	r2, [pc, #432]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d103      	bne.n	8009baa <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009ba2:	6938      	ldr	r0, [r7, #16]
 8009ba4:	f7ff feac 	bl	8009900 <LL_EXTI_EnableRisingTrig_32_63>
 8009ba8:	e014      	b.n	8009bd4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009baa:	6938      	ldr	r0, [r7, #16]
 8009bac:	f7ff fe96 	bl	80098dc <LL_EXTI_EnableRisingTrig_0_31>
 8009bb0:	e010      	b.n	8009bd4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a65      	ldr	r2, [pc, #404]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <HAL_COMP_Init+0x17a>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a63      	ldr	r2, [pc, #396]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d103      	bne.n	8009bce <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009bc6:	6938      	ldr	r0, [r7, #16]
 8009bc8:	f7ff fec0 	bl	800994c <LL_EXTI_DisableRisingTrig_32_63>
 8009bcc:	e002      	b.n	8009bd4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009bce:	6938      	ldr	r0, [r7, #16]
 8009bd0:	f7ff fea8 	bl	8009924 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a59      	ldr	r2, [pc, #356]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_COMP_Init+0x1a8>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a58      	ldr	r2, [pc, #352]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d103      	bne.n	8009bfc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009bf4:	6938      	ldr	r0, [r7, #16]
 8009bf6:	f7ff fecf 	bl	8009998 <LL_EXTI_EnableFallingTrig_32_63>
 8009bfa:	e014      	b.n	8009c26 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009bfc:	6938      	ldr	r0, [r7, #16]
 8009bfe:	f7ff feb9 	bl	8009974 <LL_EXTI_EnableFallingTrig_0_31>
 8009c02:	e010      	b.n	8009c26 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a50      	ldr	r2, [pc, #320]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d004      	beq.n	8009c18 <HAL_COMP_Init+0x1cc>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a4f      	ldr	r2, [pc, #316]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d103      	bne.n	8009c20 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009c18:	6938      	ldr	r0, [r7, #16]
 8009c1a:	f7ff fee3 	bl	80099e4 <LL_EXTI_DisableFallingTrig_32_63>
 8009c1e:	e002      	b.n	8009c26 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009c20:	6938      	ldr	r0, [r7, #16]
 8009c22:	f7ff fecb 	bl	80099bc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a48      	ldr	r2, [pc, #288]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d004      	beq.n	8009c3a <HAL_COMP_Init+0x1ee>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a46      	ldr	r2, [pc, #280]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d103      	bne.n	8009c42 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009c3a:	6938      	ldr	r0, [r7, #16]
 8009c3c:	f7ff fef6 	bl	8009a2c <LL_EXTI_ClearFlag_32_63>
 8009c40:	e002      	b.n	8009c48 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009c42:	6938      	ldr	r0, [r7, #16]
 8009c44:	f7ff fee2 	bl	8009a0c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	f003 0302 	and.w	r3, r3, #2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d011      	beq.n	8009c78 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3c      	ldr	r2, [pc, #240]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d004      	beq.n	8009c68 <HAL_COMP_Init+0x21c>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a3b      	ldr	r2, [pc, #236]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d103      	bne.n	8009c70 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009c68:	6938      	ldr	r0, [r7, #16]
 8009c6a:	f7ff fdfd 	bl	8009868 <LL_EXTI_EnableEvent_32_63>
 8009c6e:	e014      	b.n	8009c9a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009c70:	6938      	ldr	r0, [r7, #16]
 8009c72:	f7ff fde7 	bl	8009844 <LL_EXTI_EnableEvent_0_31>
 8009c76:	e010      	b.n	8009c9a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a33      	ldr	r2, [pc, #204]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d004      	beq.n	8009c8c <HAL_COMP_Init+0x240>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a32      	ldr	r2, [pc, #200]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d103      	bne.n	8009c94 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009c8c:	6938      	ldr	r0, [r7, #16]
 8009c8e:	f7ff fe11 	bl	80098b4 <LL_EXTI_DisableEvent_32_63>
 8009c92:	e002      	b.n	8009c9a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009c94:	6938      	ldr	r0, [r7, #16]
 8009c96:	f7ff fdf9 	bl	800988c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d011      	beq.n	8009cca <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a28      	ldr	r2, [pc, #160]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_COMP_Init+0x26e>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a26      	ldr	r2, [pc, #152]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d103      	bne.n	8009cc2 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009cba:	6938      	ldr	r0, [r7, #16]
 8009cbc:	f7ff fd88 	bl	80097d0 <LL_EXTI_EnableIT_32_63>
 8009cc0:	e04b      	b.n	8009d5a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009cc2:	6938      	ldr	r0, [r7, #16]
 8009cc4:	f7ff fd72 	bl	80097ac <LL_EXTI_EnableIT_0_31>
 8009cc8:	e047      	b.n	8009d5a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a1f      	ldr	r2, [pc, #124]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d004      	beq.n	8009cde <HAL_COMP_Init+0x292>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d103      	bne.n	8009ce6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009cde:	6938      	ldr	r0, [r7, #16]
 8009ce0:	f7ff fd9c 	bl	800981c <LL_EXTI_DisableIT_32_63>
 8009ce4:	e039      	b.n	8009d5a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009ce6:	6938      	ldr	r0, [r7, #16]
 8009ce8:	f7ff fd84 	bl	80097f4 <LL_EXTI_DisableIT_0_31>
 8009cec:	e035      	b.n	8009d5a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a16      	ldr	r2, [pc, #88]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_COMP_Init+0x2b6>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a14      	ldr	r2, [pc, #80]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d103      	bne.n	8009d0a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7ff fdd6 	bl	80098b4 <LL_EXTI_DisableEvent_32_63>
 8009d08:	e002      	b.n	8009d10 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f7ff fdbe 	bl	800988c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a0d      	ldr	r2, [pc, #52]	; (8009d4c <HAL_COMP_Init+0x300>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d004      	beq.n	8009d24 <HAL_COMP_Init+0x2d8>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a0c      	ldr	r2, [pc, #48]	; (8009d50 <HAL_COMP_Init+0x304>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d117      	bne.n	8009d54 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009d24:	6938      	ldr	r0, [r7, #16]
 8009d26:	f7ff fd79 	bl	800981c <LL_EXTI_DisableIT_32_63>
 8009d2a:	e016      	b.n	8009d5a <HAL_COMP_Init+0x30e>
 8009d2c:	ff007e0f 	.word	0xff007e0f
 8009d30:	20000ca0 	.word	0x20000ca0
 8009d34:	053e2d63 	.word	0x053e2d63
 8009d38:	40010200 	.word	0x40010200
 8009d3c:	40010204 	.word	0x40010204
 8009d40:	40010208 	.word	0x40010208
 8009d44:	4001020c 	.word	0x4001020c
 8009d48:	40010210 	.word	0x40010210
 8009d4c:	40010214 	.word	0x40010214
 8009d50:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009d54:	6938      	ldr	r0, [r7, #16]
 8009d56:	f7ff fd4d 	bl	80097f4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	7f5b      	ldrb	r3, [r3, #29]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009d6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3720      	adds	r7, #32
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <__NVIC_SetPriorityGrouping>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <__NVIC_SetPriorityGrouping+0x44>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d90:	4013      	ands	r3, r2
 8009d92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009da6:	4a04      	ldr	r2, [pc, #16]	; (8009db8 <__NVIC_SetPriorityGrouping+0x44>)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	60d3      	str	r3, [r2, #12]
}
 8009dac:	bf00      	nop
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	e000ed00 	.word	0xe000ed00

08009dbc <__NVIC_GetPriorityGrouping>:
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009dc0:	4b04      	ldr	r3, [pc, #16]	; (8009dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	0a1b      	lsrs	r3, r3, #8
 8009dc6:	f003 0307 	and.w	r3, r3, #7
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	e000ed00 	.word	0xe000ed00

08009dd8 <__NVIC_EnableIRQ>:
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	db0b      	blt.n	8009e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	f003 021f 	and.w	r2, r3, #31
 8009df0:	4907      	ldr	r1, [pc, #28]	; (8009e10 <__NVIC_EnableIRQ+0x38>)
 8009df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	2001      	movs	r0, #1
 8009dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8009dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	e000e100 	.word	0xe000e100

08009e14 <__NVIC_SetPriority>:
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	db0a      	blt.n	8009e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	490c      	ldr	r1, [pc, #48]	; (8009e60 <__NVIC_SetPriority+0x4c>)
 8009e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e32:	0112      	lsls	r2, r2, #4
 8009e34:	b2d2      	uxtb	r2, r2
 8009e36:	440b      	add	r3, r1
 8009e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e3c:	e00a      	b.n	8009e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4908      	ldr	r1, [pc, #32]	; (8009e64 <__NVIC_SetPriority+0x50>)
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	0112      	lsls	r2, r2, #4
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	440b      	add	r3, r1
 8009e52:	761a      	strb	r2, [r3, #24]
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	e000e100 	.word	0xe000e100
 8009e64:	e000ed00 	.word	0xe000ed00

08009e68 <NVIC_EncodePriority>:
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b089      	sub	sp, #36	; 0x24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	f1c3 0307 	rsb	r3, r3, #7
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	bf28      	it	cs
 8009e86:	2304      	movcs	r3, #4
 8009e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	2b06      	cmp	r3, #6
 8009e90:	d902      	bls.n	8009e98 <NVIC_EncodePriority+0x30>
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	3b03      	subs	r3, #3
 8009e96:	e000      	b.n	8009e9a <NVIC_EncodePriority+0x32>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	401a      	ands	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eba:	43d9      	mvns	r1, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ec0:	4313      	orrs	r3, r2
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3724      	adds	r7, #36	; 0x24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
	...

08009ed0 <SysTick_Config>:
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ee0:	d301      	bcc.n	8009ee6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e00f      	b.n	8009f06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ee6:	4a0a      	ldr	r2, [pc, #40]	; (8009f10 <SysTick_Config+0x40>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009eee:	210f      	movs	r1, #15
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ef4:	f7ff ff8e 	bl	8009e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <SysTick_Config+0x40>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <SysTick_Config+0x40>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010

08009f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff ff29 	bl	8009d74 <__NVIC_SetPriorityGrouping>
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	4603      	mov	r3, r0
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009f38:	f7ff ff40 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 8009f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	6978      	ldr	r0, [r7, #20]
 8009f44:	f7ff ff90 	bl	8009e68 <NVIC_EncodePriority>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff ff5f 	bl	8009e14 <__NVIC_SetPriority>
}
 8009f56:	bf00      	nop
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	4603      	mov	r3, r0
 8009f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff ff33 	bl	8009dd8 <__NVIC_EnableIRQ>
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff ffa4 	bl	8009ed0 <SysTick_Config>
 8009f88:	4603      	mov	r3, r0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e014      	b.n	8009fce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	791b      	ldrb	r3, [r3, #4]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d105      	bne.n	8009fba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fc fff7 	bl	8006fa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	795b      	ldrb	r3, [r3, #5]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d101      	bne.n	8009fec <HAL_DAC_Start+0x16>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e043      	b.n	800a074 <HAL_DAC_Start+0x9e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6819      	ldr	r1, [r3, #0]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f003 0310 	and.w	r3, r3, #16
 800a004:	2201      	movs	r2, #1
 800a006:	409a      	lsls	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800a010:	2001      	movs	r0, #1
 800a012:	f7fe fb4d 	bl	80086b0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10f      	bne.n	800a03c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a026:	2b02      	cmp	r3, #2
 800a028:	d11d      	bne.n	800a066 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f042 0201 	orr.w	r2, r2, #1
 800a038:	605a      	str	r2, [r3, #4]
 800a03a:	e014      	b.n	800a066 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	f003 0310 	and.w	r3, r3, #16
 800a04c:	2102      	movs	r1, #2
 800a04e:	fa01 f303 	lsl.w	r3, r1, r3
 800a052:	429a      	cmp	r2, r3
 800a054:	d107      	bne.n	800a066 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f042 0202 	orr.w	r2, r2, #2
 800a064:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	795b      	ldrb	r3, [r3, #5]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_DAC_Start_DMA+0x1e>
 800a096:	2302      	movs	r3, #2
 800a098:	e0a1      	b.n	800a1de <HAL_DAC_Start_DMA+0x162>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2201      	movs	r2, #1
 800a09e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d12a      	bne.n	800a102 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	4a4d      	ldr	r2, [pc, #308]	; (800a1e8 <HAL_DAC_Start_DMA+0x16c>)
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	4a4c      	ldr	r2, [pc, #304]	; (800a1ec <HAL_DAC_Start_DMA+0x170>)
 800a0ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	4a4b      	ldr	r2, [pc, #300]	; (800a1f0 <HAL_DAC_Start_DMA+0x174>)
 800a0c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0d2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d009      	beq.n	800a0ee <HAL_DAC_Start_DMA+0x72>
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d00c      	beq.n	800a0f8 <HAL_DAC_Start_DMA+0x7c>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d000      	beq.n	800a0e4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a0e2:	e039      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	613b      	str	r3, [r7, #16]
        break;
 800a0ec:	e034      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	330c      	adds	r3, #12
 800a0f4:	613b      	str	r3, [r7, #16]
        break;
 800a0f6:	e02f      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	613b      	str	r3, [r7, #16]
        break;
 800a100:	e02a      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	4a3b      	ldr	r2, [pc, #236]	; (800a1f4 <HAL_DAC_Start_DMA+0x178>)
 800a108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	4a3a      	ldr	r2, [pc, #232]	; (800a1f8 <HAL_DAC_Start_DMA+0x17c>)
 800a110:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	4a39      	ldr	r2, [pc, #228]	; (800a1fc <HAL_DAC_Start_DMA+0x180>)
 800a118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a128:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d009      	beq.n	800a144 <HAL_DAC_Start_DMA+0xc8>
 800a130:	2b08      	cmp	r3, #8
 800a132:	d00c      	beq.n	800a14e <HAL_DAC_Start_DMA+0xd2>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d000      	beq.n	800a13a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a138:	e00e      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3314      	adds	r3, #20
 800a140:	613b      	str	r3, [r7, #16]
        break;
 800a142:	e009      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3318      	adds	r3, #24
 800a14a:	613b      	str	r3, [r7, #16]
        break;
 800a14c:	e004      	b.n	800a158 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	331c      	adds	r3, #28
 800a154:	613b      	str	r3, [r7, #16]
        break;
 800a156:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d111      	bne.n	800a182 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a16c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6898      	ldr	r0, [r3, #8]
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	f000 fbd2 	bl	800a920 <HAL_DMA_Start_IT>
 800a17c:	4603      	mov	r3, r0
 800a17e:	75fb      	strb	r3, [r7, #23]
 800a180:	e010      	b.n	800a1a4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a190:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68d8      	ldr	r0, [r3, #12]
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	f000 fbc0 	bl	800a920 <HAL_DMA_Start_IT>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10f      	bne.n	800a1d0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6819      	ldr	r1, [r3, #0]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2201      	movs	r2, #1
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f7fe fa71 	bl	80086b0 <HAL_Delay>
 800a1ce:	e005      	b.n	800a1dc <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	f043 0204 	orr.w	r2, r3, #4
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800a6bd 	.word	0x0800a6bd
 800a1ec:	0800a6df 	.word	0x0800a6df
 800a1f0:	0800a6fb 	.word	0x0800a6fb
 800a1f4:	0800a765 	.word	0x0800a765
 800a1f8:	0800a787 	.word	0x0800a787
 800a1fc:	0800a7a3 	.word	0x0800a7a3

0800a200 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f003 0310 	and.w	r3, r3, #16
 800a216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	43da      	mvns	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	400a      	ands	r2, r1
 800a226:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6819      	ldr	r1, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2201      	movs	r2, #1
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	43da      	mvns	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	400a      	ands	r2, r1
 800a242:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a244:	2001      	movs	r0, #1
 800a246:	f7fe fa33 	bl	80086b0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10f      	bne.n	800a270 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fbde 	bl	800aa16 <HAL_DMA_Abort>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e00e      	b.n	800a28e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fbce 	bl	800aa16 <HAL_DMA_Abort>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a28c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2204      	movs	r2, #4
 800a298:	711a      	strb	r2, [r3, #4]
 800a29a:	e002      	b.n	800a2a2 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	617b      	str	r3, [r7, #20]
 800a2da:	e004      	b.n	800a2e6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3314      	adds	r3, #20
 800a2e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	e002      	b.n	800a356 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
	...

0800a364 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08a      	sub	sp, #40	; 0x28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a370:	2300      	movs	r3, #0
 800a372:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	795b      	ldrb	r3, [r3, #5]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d101      	bne.n	800a380 <HAL_DAC_ConfigChannel+0x1c>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e194      	b.n	800a6aa <HAL_DAC_ConfigChannel+0x346>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2202      	movs	r2, #2
 800a38a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	2b04      	cmp	r3, #4
 800a392:	d174      	bne.n	800a47e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d137      	bne.n	800a40a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a39a:	f7fe f97d 	bl	8008698 <HAL_GetTick>
 800a39e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a3a0:	e011      	b.n	800a3c6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a3a2:	f7fe f979 	bl	8008698 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d90a      	bls.n	800a3c6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	f043 0208 	orr.w	r2, r3, #8
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e171      	b.n	800a6aa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e6      	bne.n	800a3a2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	f7fe f96b 	bl	80086b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3e2:	641a      	str	r2, [r3, #64]	; 0x40
 800a3e4:	e01e      	b.n	800a424 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a3e6:	f7fe f957 	bl	8008698 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d90a      	bls.n	800a40a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f043 0208 	orr.w	r2, r3, #8
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2203      	movs	r2, #3
 800a404:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e14f      	b.n	800a6aa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	2b00      	cmp	r3, #0
 800a412:	dbe8      	blt.n	800a3e6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a414:	2001      	movs	r0, #1
 800a416:	f7fe f94b 	bl	80086b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a422:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a434:	fa01 f303 	lsl.w	r3, r1, r3
 800a438:	43db      	mvns	r3, r3
 800a43a:	ea02 0103 	and.w	r1, r2, r3
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	409a      	lsls	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f003 0310 	and.w	r3, r3, #16
 800a45e:	21ff      	movs	r1, #255	; 0xff
 800a460:	fa01 f303 	lsl.w	r3, r1, r3
 800a464:	43db      	mvns	r3, r3
 800a466:	ea02 0103 	and.w	r1, r2, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	409a      	lsls	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d11d      	bne.n	800a4c2 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	221f      	movs	r2, #31
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	43db      	mvns	r3, r3
 800a49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49e:	4013      	ands	r3, r2
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f003 0310 	and.w	r3, r3, #16
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4da:	4013      	ands	r3, r2
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e011      	b.n	800a514 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	623b      	str	r3, [r7, #32]
 800a500:	e008      	b.n	800a514 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a50a:	2301      	movs	r3, #1
 800a50c:	623b      	str	r3, [r7, #32]
 800a50e:	e001      	b.n	800a514 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a510:	2300      	movs	r3, #0
 800a512:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	6a3a      	ldr	r2, [r7, #32]
 800a520:	4313      	orrs	r3, r2
 800a522:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f003 0310 	and.w	r3, r3, #16
 800a52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a52e:	fa02 f303 	lsl.w	r3, r2, r3
 800a532:	43db      	mvns	r3, r3
 800a534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a536:	4013      	ands	r3, r2
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	791b      	ldrb	r3, [r3, #4]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d102      	bne.n	800a548 <HAL_DAC_ConfigChannel+0x1e4>
 800a542:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a546:	e000      	b.n	800a54a <HAL_DAC_ConfigChannel+0x1e6>
 800a548:	2300      	movs	r3, #0
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f003 0310 	and.w	r3, r3, #16
 800a556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a55a:	fa02 f303 	lsl.w	r3, r2, r3
 800a55e:	43db      	mvns	r3, r3
 800a560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a562:	4013      	ands	r3, r2
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	795b      	ldrb	r3, [r3, #5]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d102      	bne.n	800a574 <HAL_DAC_ConfigChannel+0x210>
 800a56e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a572:	e000      	b.n	800a576 <HAL_DAC_ConfigChannel+0x212>
 800a574:	2300      	movs	r3, #0
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	4313      	orrs	r3, r2
 800a57a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d114      	bne.n	800a5b6 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a58c:	f001 fae0 	bl	800bb50 <HAL_RCC_GetHCLKFreq>
 800a590:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	4a47      	ldr	r2, [pc, #284]	; (800a6b4 <HAL_DAC_ConfigChannel+0x350>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d904      	bls.n	800a5a4 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5a2:	e00d      	b.n	800a5c0 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	4a44      	ldr	r2, [pc, #272]	; (800a6b8 <HAL_DAC_ConfigChannel+0x354>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d909      	bls.n	800a5c0 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b4:	e004      	b.n	800a5c0 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f003 0310 	and.w	r3, r3, #16
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0310 	and.w	r3, r3, #16
 800a5e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ee:	43da      	mvns	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	400a      	ands	r2, r1
 800a5f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f003 0310 	and.w	r3, r3, #16
 800a606:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a60a:	fa02 f303 	lsl.w	r3, r2, r3
 800a60e:	43db      	mvns	r3, r3
 800a610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a612:	4013      	ands	r3, r2
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f003 0310 	and.w	r3, r3, #16
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	fa02 f303 	lsl.w	r3, r2, r3
 800a628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62a:	4313      	orrs	r3, r2
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a634:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6819      	ldr	r1, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f003 0310 	and.w	r3, r3, #16
 800a642:	22c0      	movs	r2, #192	; 0xc0
 800a644:	fa02 f303 	lsl.w	r3, r2, r3
 800a648:	43da      	mvns	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	400a      	ands	r2, r1
 800a650:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	089b      	lsrs	r3, r3, #2
 800a658:	f003 030f 	and.w	r3, r3, #15
 800a65c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	089b      	lsrs	r3, r3, #2
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f003 0310 	and.w	r3, r3, #16
 800a67c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a680:	fa01 f303 	lsl.w	r3, r1, r3
 800a684:	43db      	mvns	r3, r3
 800a686:	ea02 0103 	and.w	r1, r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f003 0310 	and.w	r3, r3, #16
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	409a      	lsls	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	09896800 	.word	0x09896800
 800a6b8:	04c4b400 	.word	0x04c4b400

0800a6bc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff fe16 	bl	800a2fc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	711a      	strb	r2, [r3, #4]
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7ff fe0f 	bl	800a310 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a6f2:	bf00      	nop
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f043 0204 	orr.w	r2, r3, #4
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7ff fe05 	bl	800a324 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	711a      	strb	r2, [r3, #4]
}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a770:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff ffd8 	bl	800a728 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2201      	movs	r2, #1
 800a77c:	711a      	strb	r2, [r3, #4]
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff ffd1 	bl	800a73c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	f043 0204 	orr.w	r2, r3, #4
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff ffc7 	bl	800a750 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	711a      	strb	r2, [r3, #4]
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e08d      	b.n	800a8fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4b47      	ldr	r3, [pc, #284]	; (800a908 <HAL_DMA_Init+0x138>)
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d80f      	bhi.n	800a80e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4b45      	ldr	r3, [pc, #276]	; (800a90c <HAL_DMA_Init+0x13c>)
 800a7f6:	4413      	add	r3, r2
 800a7f8:	4a45      	ldr	r2, [pc, #276]	; (800a910 <HAL_DMA_Init+0x140>)
 800a7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fe:	091b      	lsrs	r3, r3, #4
 800a800:	009a      	lsls	r2, r3, #2
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a42      	ldr	r2, [pc, #264]	; (800a914 <HAL_DMA_Init+0x144>)
 800a80a:	641a      	str	r2, [r3, #64]	; 0x40
 800a80c:	e00e      	b.n	800a82c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	4b40      	ldr	r3, [pc, #256]	; (800a918 <HAL_DMA_Init+0x148>)
 800a816:	4413      	add	r3, r2
 800a818:	4a3d      	ldr	r2, [pc, #244]	; (800a910 <HAL_DMA_Init+0x140>)
 800a81a:	fba2 2303 	umull	r2, r3, r2, r3
 800a81e:	091b      	lsrs	r3, r3, #4
 800a820:	009a      	lsls	r2, r3, #2
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a3c      	ldr	r2, [pc, #240]	; (800a91c <HAL_DMA_Init+0x14c>)
 800a82a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a846:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a85c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fa10 	bl	800aca4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a88c:	d102      	bne.n	800a894 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89c:	b2d2      	uxtb	r2, r2
 800a89e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a8a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d010      	beq.n	800a8d4 <HAL_DMA_Init+0x104>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d80c      	bhi.n	800a8d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa30 	bl	800ad20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	e008      	b.n	800a8e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	40020407 	.word	0x40020407
 800a90c:	bffdfff8 	.word	0xbffdfff8
 800a910:	cccccccd 	.word	0xcccccccd
 800a914:	40020000 	.word	0x40020000
 800a918:	bffdfbf8 	.word	0xbffdfbf8
 800a91c:	40020400 	.word	0x40020400

0800a920 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d101      	bne.n	800a940 <HAL_DMA_Start_IT+0x20>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e066      	b.n	800aa0e <HAL_DMA_Start_IT+0xee>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b01      	cmp	r3, #1
 800a952:	d155      	bne.n	800aa00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f954 	bl	800ac26 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a982:	2b00      	cmp	r3, #0
 800a984:	d008      	beq.n	800a998 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f042 020e 	orr.w	r2, r2, #14
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	e00f      	b.n	800a9b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0204 	bic.w	r2, r2, #4
 800a9a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 020a 	orr.w	r2, r2, #10
 800a9b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0201 	orr.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	e005      	b.n	800aa0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d005      	beq.n	800aa3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2204      	movs	r2, #4
 800aa32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	73fb      	strb	r3, [r7, #15]
 800aa38:	e037      	b.n	800aaaa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f022 020e 	bic.w	r2, r2, #14
 800aa48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6e:	f003 021f 	and.w	r2, r3, #31
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	2101      	movs	r1, #1
 800aa78:	fa01 f202 	lsl.w	r2, r1, r2
 800aa7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aaa8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae4:	f003 031f 	and.w	r3, r3, #31
 800aae8:	2204      	movs	r2, #4
 800aaea:	409a      	lsls	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4013      	ands	r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d026      	beq.n	800ab42 <HAL_DMA_IRQHandler+0x7a>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d021      	beq.n	800ab42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d107      	bne.n	800ab1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0204 	bic.w	r2, r2, #4
 800ab1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	f003 021f 	and.w	r2, r3, #31
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab28:	2104      	movs	r1, #4
 800ab2a:	fa01 f202 	lsl.w	r2, r1, r2
 800ab2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d071      	beq.n	800ac1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ab40:	e06c      	b.n	800ac1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab46:	f003 031f 	and.w	r3, r3, #31
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	409a      	lsls	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d02e      	beq.n	800abb4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d029      	beq.n	800abb4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 020a 	bic.w	r2, r2, #10
 800ab7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab8a:	f003 021f 	and.w	r2, r3, #31
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	2102      	movs	r1, #2
 800ab94:	fa01 f202 	lsl.w	r2, r1, r2
 800ab98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d038      	beq.n	800ac1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800abb2:	e033      	b.n	800ac1c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb8:	f003 031f 	and.w	r3, r3, #31
 800abbc:	2208      	movs	r2, #8
 800abbe:	409a      	lsls	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d02a      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	f003 0308 	and.w	r3, r3, #8
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d025      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 020e 	bic.w	r2, r2, #14
 800abe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	f003 021f 	and.w	r2, r3, #31
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	2101      	movs	r1, #1
 800abf0:	fa01 f202 	lsl.w	r2, r1, r2
 800abf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
}
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
 800ac32:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac3c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ac4e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac54:	f003 021f 	and.w	r2, r3, #31
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	fa01 f202 	lsl.w	r2, r1, r2
 800ac62:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	2b10      	cmp	r3, #16
 800ac72:	d108      	bne.n	800ac86 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ac84:	e007      	b.n	800ac96 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	60da      	str	r2, [r3, #12]
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d802      	bhi.n	800acbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800acb8:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e001      	b.n	800acc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800acbe:	4b15      	ldr	r3, [pc, #84]	; (800ad14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800acc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	3b08      	subs	r3, #8
 800acce:	4a12      	ldr	r2, [pc, #72]	; (800ad18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	091b      	lsrs	r3, r3, #4
 800acd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acdc:	089b      	lsrs	r3, r3, #2
 800acde:	009a      	lsls	r2, r3, #2
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	4413      	add	r3, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a0b      	ldr	r2, [pc, #44]	; (800ad1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800acee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f003 031f 	and.w	r3, r3, #31
 800acf6:	2201      	movs	r2, #1
 800acf8:	409a      	lsls	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40020407 	.word	0x40020407
 800ad10:	40020800 	.word	0x40020800
 800ad14:	40020820 	.word	0x40020820
 800ad18:	cccccccd 	.word	0xcccccccd
 800ad1c:	40020880 	.word	0x40020880

0800ad20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	461a      	mov	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a08      	ldr	r2, [pc, #32]	; (800ad64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ad42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	f003 031f 	and.w	r3, r3, #31
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	409a      	lsls	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	1000823f 	.word	0x1000823f
 800ad64:	40020940 	.word	0x40020940

0800ad68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ad76:	e15a      	b.n	800b02e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	fa01 f303 	lsl.w	r3, r1, r3
 800ad84:	4013      	ands	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 814c 	beq.w	800b028 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d00b      	beq.n	800adb0 <HAL_GPIO_Init+0x48>
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d007      	beq.n	800adb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ada4:	2b11      	cmp	r3, #17
 800ada6:	d003      	beq.n	800adb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	2b12      	cmp	r3, #18
 800adae:	d130      	bne.n	800ae12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	2203      	movs	r2, #3
 800adbc:	fa02 f303 	lsl.w	r3, r2, r3
 800adc0:	43db      	mvns	r3, r3
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4013      	ands	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	fa02 f303 	lsl.w	r3, r2, r3
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	4313      	orrs	r3, r2
 800add8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ade6:	2201      	movs	r2, #1
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	43db      	mvns	r3, r3
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4013      	ands	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	091b      	lsrs	r3, r3, #4
 800adfc:	f003 0201 	and.w	r2, r3, #1
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	2203      	movs	r2, #3
 800ae1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae22:	43db      	mvns	r3, r3
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	4013      	ands	r3, r2
 800ae28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	fa02 f303 	lsl.w	r3, r2, r3
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d003      	beq.n	800ae52 <HAL_GPIO_Init+0xea>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	2b12      	cmp	r3, #18
 800ae50:	d123      	bne.n	800ae9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	08da      	lsrs	r2, r3, #3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3208      	adds	r2, #8
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	220f      	movs	r2, #15
 800ae6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6e:	43db      	mvns	r3, r3
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	4013      	ands	r3, r2
 800ae74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	691a      	ldr	r2, [r3, #16]
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f003 0307 	and.w	r3, r3, #7
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	fa02 f303 	lsl.w	r3, r2, r3
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	08da      	lsrs	r2, r3, #3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3208      	adds	r2, #8
 800ae94:	6939      	ldr	r1, [r7, #16]
 800ae96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	2203      	movs	r2, #3
 800aea6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeaa:	43db      	mvns	r3, r3
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4013      	ands	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f003 0203 	and.w	r2, r3, #3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	fa02 f303 	lsl.w	r3, r2, r3
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 80a6 	beq.w	800b028 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aedc:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <HAL_GPIO_Init+0x2e4>)
 800aede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee0:	4a5a      	ldr	r2, [pc, #360]	; (800b04c <HAL_GPIO_Init+0x2e4>)
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	6613      	str	r3, [r2, #96]	; 0x60
 800aee8:	4b58      	ldr	r3, [pc, #352]	; (800b04c <HAL_GPIO_Init+0x2e4>)
 800aeea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	60bb      	str	r3, [r7, #8]
 800aef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aef4:	4a56      	ldr	r2, [pc, #344]	; (800b050 <HAL_GPIO_Init+0x2e8>)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	089b      	lsrs	r3, r3, #2
 800aefa:	3302      	adds	r3, #2
 800aefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	220f      	movs	r2, #15
 800af0c:	fa02 f303 	lsl.w	r3, r2, r3
 800af10:	43db      	mvns	r3, r3
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4013      	ands	r3, r2
 800af16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800af1e:	d01f      	beq.n	800af60 <HAL_GPIO_Init+0x1f8>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a4c      	ldr	r2, [pc, #304]	; (800b054 <HAL_GPIO_Init+0x2ec>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d019      	beq.n	800af5c <HAL_GPIO_Init+0x1f4>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a4b      	ldr	r2, [pc, #300]	; (800b058 <HAL_GPIO_Init+0x2f0>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d013      	beq.n	800af58 <HAL_GPIO_Init+0x1f0>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a4a      	ldr	r2, [pc, #296]	; (800b05c <HAL_GPIO_Init+0x2f4>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00d      	beq.n	800af54 <HAL_GPIO_Init+0x1ec>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a49      	ldr	r2, [pc, #292]	; (800b060 <HAL_GPIO_Init+0x2f8>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d007      	beq.n	800af50 <HAL_GPIO_Init+0x1e8>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a48      	ldr	r2, [pc, #288]	; (800b064 <HAL_GPIO_Init+0x2fc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d101      	bne.n	800af4c <HAL_GPIO_Init+0x1e4>
 800af48:	2305      	movs	r3, #5
 800af4a:	e00a      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af4c:	2306      	movs	r3, #6
 800af4e:	e008      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af50:	2304      	movs	r3, #4
 800af52:	e006      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af54:	2303      	movs	r3, #3
 800af56:	e004      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af58:	2302      	movs	r3, #2
 800af5a:	e002      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e000      	b.n	800af62 <HAL_GPIO_Init+0x1fa>
 800af60:	2300      	movs	r3, #0
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	f002 0203 	and.w	r2, r2, #3
 800af68:	0092      	lsls	r2, r2, #2
 800af6a:	4093      	lsls	r3, r2
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af72:	4937      	ldr	r1, [pc, #220]	; (800b050 <HAL_GPIO_Init+0x2e8>)
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	089b      	lsrs	r3, r3, #2
 800af78:	3302      	adds	r3, #2
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800af80:	4b39      	ldr	r3, [pc, #228]	; (800b068 <HAL_GPIO_Init+0x300>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	43db      	mvns	r3, r3
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	4013      	ands	r3, r2
 800af8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800af9c:	693a      	ldr	r2, [r7, #16]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800afa4:	4a30      	ldr	r2, [pc, #192]	; (800b068 <HAL_GPIO_Init+0x300>)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800afaa:	4b2f      	ldr	r3, [pc, #188]	; (800b068 <HAL_GPIO_Init+0x300>)
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	43db      	mvns	r3, r3
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4013      	ands	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800afce:	4a26      	ldr	r2, [pc, #152]	; (800b068 <HAL_GPIO_Init+0x300>)
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800afd4:	4b24      	ldr	r3, [pc, #144]	; (800b068 <HAL_GPIO_Init+0x300>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	43db      	mvns	r3, r3
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4013      	ands	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aff8:	4a1b      	ldr	r2, [pc, #108]	; (800b068 <HAL_GPIO_Init+0x300>)
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800affe:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <HAL_GPIO_Init+0x300>)
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	43db      	mvns	r3, r3
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4013      	ands	r3, r2
 800b00c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b022:	4a11      	ldr	r2, [pc, #68]	; (800b068 <HAL_GPIO_Init+0x300>)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	3301      	adds	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	fa22 f303 	lsr.w	r3, r2, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f47f ae9d 	bne.w	800ad78 <HAL_GPIO_Init+0x10>
  }
}
 800b03e:	bf00      	nop
 800b040:	371c      	adds	r7, #28
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	40021000 	.word	0x40021000
 800b050:	40010000 	.word	0x40010000
 800b054:	48000400 	.word	0x48000400
 800b058:	48000800 	.word	0x48000800
 800b05c:	48000c00 	.word	0x48000c00
 800b060:	48001000 	.word	0x48001000
 800b064:	48001400 	.word	0x48001400
 800b068:	40010400 	.word	0x40010400

0800b06c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	807b      	strh	r3, [r7, #2]
 800b078:	4613      	mov	r3, r2
 800b07a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b07c:	787b      	ldrb	r3, [r7, #1]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b082:	887a      	ldrh	r2, [r7, #2]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b088:	e002      	b.n	800b090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b08a:	887a      	ldrh	r2, [r7, #2]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d141      	bne.n	800b12e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b0aa:	4b4b      	ldr	r3, [pc, #300]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	d131      	bne.n	800b11c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0b8:	4b47      	ldr	r3, [pc, #284]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0be:	4a46      	ldr	r2, [pc, #280]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0c8:	4b43      	ldr	r3, [pc, #268]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0d0:	4a41      	ldr	r2, [pc, #260]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0d8:	4b40      	ldr	r3, [pc, #256]	; (800b1dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2232      	movs	r2, #50	; 0x32
 800b0de:	fb02 f303 	mul.w	r3, r2, r3
 800b0e2:	4a3f      	ldr	r2, [pc, #252]	; (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e8:	0c9b      	lsrs	r3, r3, #18
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0ee:	e002      	b.n	800b0f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0f6:	4b38      	ldr	r3, [pc, #224]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b102:	d102      	bne.n	800b10a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f2      	bne.n	800b0f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b10a:	4b33      	ldr	r3, [pc, #204]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b116:	d158      	bne.n	800b1ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e057      	b.n	800b1cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b11c:	4b2e      	ldr	r3, [pc, #184]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b122:	4a2d      	ldr	r2, [pc, #180]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b12c:	e04d      	b.n	800b1ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b134:	d141      	bne.n	800b1ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b136:	4b28      	ldr	r3, [pc, #160]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b13e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b142:	d131      	bne.n	800b1a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b144:	4b24      	ldr	r3, [pc, #144]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b14a:	4a23      	ldr	r2, [pc, #140]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b154:	4b20      	ldr	r3, [pc, #128]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b15c:	4a1e      	ldr	r2, [pc, #120]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b15e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b164:	4b1d      	ldr	r3, [pc, #116]	; (800b1dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2232      	movs	r2, #50	; 0x32
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b170:	fba2 2303 	umull	r2, r3, r2, r3
 800b174:	0c9b      	lsrs	r3, r3, #18
 800b176:	3301      	adds	r3, #1
 800b178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b17a:	e002      	b.n	800b182 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3b01      	subs	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b18e:	d102      	bne.n	800b196 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1f2      	bne.n	800b17c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a2:	d112      	bne.n	800b1ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e011      	b.n	800b1cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b1a8:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ae:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b1b8:	e007      	b.n	800b1ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b1c2:	4a05      	ldr	r2, [pc, #20]	; (800b1d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	40007000 	.word	0x40007000
 800b1dc:	20000ca0 	.word	0x20000ca0
 800b1e0:	431bde83 	.word	0x431bde83

0800b1e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e308      	b.n	800b808 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d075      	beq.n	800b2ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b202:	4ba3      	ldr	r3, [pc, #652]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 030c 	and.w	r3, r3, #12
 800b20a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b20c:	4ba0      	ldr	r3, [pc, #640]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	2b0c      	cmp	r3, #12
 800b21a:	d102      	bne.n	800b222 <HAL_RCC_OscConfig+0x3e>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d002      	beq.n	800b228 <HAL_RCC_OscConfig+0x44>
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b08      	cmp	r3, #8
 800b226:	d10b      	bne.n	800b240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b228:	4b99      	ldr	r3, [pc, #612]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05b      	beq.n	800b2ec <HAL_RCC_OscConfig+0x108>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d157      	bne.n	800b2ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e2e3      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b248:	d106      	bne.n	800b258 <HAL_RCC_OscConfig+0x74>
 800b24a:	4b91      	ldr	r3, [pc, #580]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a90      	ldr	r2, [pc, #576]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	e01d      	b.n	800b294 <HAL_RCC_OscConfig+0xb0>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b260:	d10c      	bne.n	800b27c <HAL_RCC_OscConfig+0x98>
 800b262:	4b8b      	ldr	r3, [pc, #556]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a8a      	ldr	r2, [pc, #552]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	4b88      	ldr	r3, [pc, #544]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a87      	ldr	r2, [pc, #540]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	e00b      	b.n	800b294 <HAL_RCC_OscConfig+0xb0>
 800b27c:	4b84      	ldr	r3, [pc, #528]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a83      	ldr	r2, [pc, #524]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	4b81      	ldr	r3, [pc, #516]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a80      	ldr	r2, [pc, #512]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b28e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d013      	beq.n	800b2c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29c:	f7fd f9fc 	bl	8008698 <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2a4:	f7fd f9f8 	bl	8008698 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b64      	cmp	r3, #100	; 0x64
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e2a8      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2b6:	4b76      	ldr	r3, [pc, #472]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0f0      	beq.n	800b2a4 <HAL_RCC_OscConfig+0xc0>
 800b2c2:	e014      	b.n	800b2ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c4:	f7fd f9e8 	bl	8008698 <HAL_GetTick>
 800b2c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2ca:	e008      	b.n	800b2de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2cc:	f7fd f9e4 	bl	8008698 <HAL_GetTick>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	2b64      	cmp	r3, #100	; 0x64
 800b2d8:	d901      	bls.n	800b2de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e294      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2de:	4b6c      	ldr	r3, [pc, #432]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1f0      	bne.n	800b2cc <HAL_RCC_OscConfig+0xe8>
 800b2ea:	e000      	b.n	800b2ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d075      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2fa:	4b65      	ldr	r3, [pc, #404]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f003 030c 	and.w	r3, r3, #12
 800b302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b304:	4b62      	ldr	r3, [pc, #392]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0303 	and.w	r3, r3, #3
 800b30c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b0c      	cmp	r3, #12
 800b312:	d102      	bne.n	800b31a <HAL_RCC_OscConfig+0x136>
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d002      	beq.n	800b320 <HAL_RCC_OscConfig+0x13c>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d11f      	bne.n	800b360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b320:	4b5b      	ldr	r3, [pc, #364]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d005      	beq.n	800b338 <HAL_RCC_OscConfig+0x154>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e267      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b338:	4b55      	ldr	r3, [pc, #340]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	061b      	lsls	r3, r3, #24
 800b346:	4952      	ldr	r1, [pc, #328]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b34c:	4b51      	ldr	r3, [pc, #324]	; (800b494 <HAL_RCC_OscConfig+0x2b0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f7fd f955 	bl	8008600 <HAL_InitTick>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d043      	beq.n	800b3e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e253      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d023      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b368:	4b49      	ldr	r3, [pc, #292]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a48      	ldr	r2, [pc, #288]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b36e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b374:	f7fd f990 	bl	8008698 <HAL_GetTick>
 800b378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b37a:	e008      	b.n	800b38e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b37c:	f7fd f98c 	bl	8008698 <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e23c      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b38e:	4b40      	ldr	r3, [pc, #256]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0f0      	beq.n	800b37c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b39a:	4b3d      	ldr	r3, [pc, #244]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	061b      	lsls	r3, r3, #24
 800b3a8:	4939      	ldr	r1, [pc, #228]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	604b      	str	r3, [r1, #4]
 800b3ae:	e01a      	b.n	800b3e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b3b0:	4b37      	ldr	r3, [pc, #220]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a36      	ldr	r2, [pc, #216]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b3b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3bc:	f7fd f96c 	bl	8008698 <HAL_GetTick>
 800b3c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3c2:	e008      	b.n	800b3d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3c4:	f7fd f968 	bl	8008698 <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d901      	bls.n	800b3d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e218      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3d6:	4b2e      	ldr	r3, [pc, #184]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1f0      	bne.n	800b3c4 <HAL_RCC_OscConfig+0x1e0>
 800b3e2:	e000      	b.n	800b3e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0308 	and.w	r3, r3, #8
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d03c      	beq.n	800b46c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01c      	beq.n	800b434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3fa:	4b25      	ldr	r3, [pc, #148]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b3fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b400:	4a23      	ldr	r2, [pc, #140]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b402:	f043 0301 	orr.w	r3, r3, #1
 800b406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b40a:	f7fd f945 	bl	8008698 <HAL_GetTick>
 800b40e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b410:	e008      	b.n	800b424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b412:	f7fd f941 	bl	8008698 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d901      	bls.n	800b424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b420:	2303      	movs	r3, #3
 800b422:	e1f1      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b424:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b42a:	f003 0302 	and.w	r3, r3, #2
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0ef      	beq.n	800b412 <HAL_RCC_OscConfig+0x22e>
 800b432:	e01b      	b.n	800b46c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b434:	4b16      	ldr	r3, [pc, #88]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b43a:	4a15      	ldr	r2, [pc, #84]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b43c:	f023 0301 	bic.w	r3, r3, #1
 800b440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b444:	f7fd f928 	bl	8008698 <HAL_GetTick>
 800b448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b44a:	e008      	b.n	800b45e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b44c:	f7fd f924 	bl	8008698 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b02      	cmp	r3, #2
 800b458:	d901      	bls.n	800b45e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e1d4      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1ef      	bne.n	800b44c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 80ab 	beq.w	800b5d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b47a:	2300      	movs	r3, #0
 800b47c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b47e:	4b04      	ldr	r3, [pc, #16]	; (800b490 <HAL_RCC_OscConfig+0x2ac>)
 800b480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d106      	bne.n	800b498 <HAL_RCC_OscConfig+0x2b4>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e005      	b.n	800b49a <HAL_RCC_OscConfig+0x2b6>
 800b48e:	bf00      	nop
 800b490:	40021000 	.word	0x40021000
 800b494:	20000ca4 	.word	0x20000ca4
 800b498:	2300      	movs	r3, #0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00d      	beq.n	800b4ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b49e:	4baf      	ldr	r3, [pc, #700]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a2:	4aae      	ldr	r2, [pc, #696]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b4a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b4aa:	4bac      	ldr	r3, [pc, #688]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4ba:	4ba9      	ldr	r3, [pc, #676]	; (800b760 <HAL_RCC_OscConfig+0x57c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d118      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4c6:	4ba6      	ldr	r3, [pc, #664]	; (800b760 <HAL_RCC_OscConfig+0x57c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4aa5      	ldr	r2, [pc, #660]	; (800b760 <HAL_RCC_OscConfig+0x57c>)
 800b4cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4d2:	f7fd f8e1 	bl	8008698 <HAL_GetTick>
 800b4d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4d8:	e008      	b.n	800b4ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4da:	f7fd f8dd 	bl	8008698 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d901      	bls.n	800b4ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e18d      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4ec:	4b9c      	ldr	r3, [pc, #624]	; (800b760 <HAL_RCC_OscConfig+0x57c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0f0      	beq.n	800b4da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d108      	bne.n	800b512 <HAL_RCC_OscConfig+0x32e>
 800b500:	4b96      	ldr	r3, [pc, #600]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b506:	4a95      	ldr	r2, [pc, #596]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b508:	f043 0301 	orr.w	r3, r3, #1
 800b50c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b510:	e024      	b.n	800b55c <HAL_RCC_OscConfig+0x378>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2b05      	cmp	r3, #5
 800b518:	d110      	bne.n	800b53c <HAL_RCC_OscConfig+0x358>
 800b51a:	4b90      	ldr	r3, [pc, #576]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b520:	4a8e      	ldr	r2, [pc, #568]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b522:	f043 0304 	orr.w	r3, r3, #4
 800b526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b52a:	4b8c      	ldr	r3, [pc, #560]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b530:	4a8a      	ldr	r2, [pc, #552]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b532:	f043 0301 	orr.w	r3, r3, #1
 800b536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b53a:	e00f      	b.n	800b55c <HAL_RCC_OscConfig+0x378>
 800b53c:	4b87      	ldr	r3, [pc, #540]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b542:	4a86      	ldr	r2, [pc, #536]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b54c:	4b83      	ldr	r3, [pc, #524]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b552:	4a82      	ldr	r2, [pc, #520]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b554:	f023 0304 	bic.w	r3, r3, #4
 800b558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d016      	beq.n	800b592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b564:	f7fd f898 	bl	8008698 <HAL_GetTick>
 800b568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b56a:	e00a      	b.n	800b582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b56c:	f7fd f894 	bl	8008698 <HAL_GetTick>
 800b570:	4602      	mov	r2, r0
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	f241 3288 	movw	r2, #5000	; 0x1388
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d901      	bls.n	800b582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	e142      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b582:	4b76      	ldr	r3, [pc, #472]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0ed      	beq.n	800b56c <HAL_RCC_OscConfig+0x388>
 800b590:	e015      	b.n	800b5be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b592:	f7fd f881 	bl	8008698 <HAL_GetTick>
 800b596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b598:	e00a      	b.n	800b5b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b59a:	f7fd f87d 	bl	8008698 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d901      	bls.n	800b5b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e12b      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b5b0:	4b6a      	ldr	r3, [pc, #424]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1ed      	bne.n	800b59a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5be:	7ffb      	ldrb	r3, [r7, #31]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d105      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5c4:	4b65      	ldr	r3, [pc, #404]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b5c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c8:	4a64      	ldr	r2, [pc, #400]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d03c      	beq.n	800b656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01c      	beq.n	800b61e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b5e4:	4b5d      	ldr	r3, [pc, #372]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b5e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5ea:	4a5c      	ldr	r2, [pc, #368]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b5ec:	f043 0301 	orr.w	r3, r3, #1
 800b5f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5f4:	f7fd f850 	bl	8008698 <HAL_GetTick>
 800b5f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5fa:	e008      	b.n	800b60e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5fc:	f7fd f84c 	bl	8008698 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d901      	bls.n	800b60e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e0fc      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b60e:	4b53      	ldr	r3, [pc, #332]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b614:	f003 0302 	and.w	r3, r3, #2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0ef      	beq.n	800b5fc <HAL_RCC_OscConfig+0x418>
 800b61c:	e01b      	b.n	800b656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b61e:	4b4f      	ldr	r3, [pc, #316]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b624:	4a4d      	ldr	r2, [pc, #308]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b626:	f023 0301 	bic.w	r3, r3, #1
 800b62a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b62e:	f7fd f833 	bl	8008698 <HAL_GetTick>
 800b632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b634:	e008      	b.n	800b648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b636:	f7fd f82f 	bl	8008698 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d901      	bls.n	800b648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e0df      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b648:	4b44      	ldr	r3, [pc, #272]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b64a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1ef      	bne.n	800b636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69db      	ldr	r3, [r3, #28]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f000 80d3 	beq.w	800b806 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b660:	4b3e      	ldr	r3, [pc, #248]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f003 030c 	and.w	r3, r3, #12
 800b668:	2b0c      	cmp	r3, #12
 800b66a:	f000 808d 	beq.w	800b788 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	2b02      	cmp	r3, #2
 800b674:	d15a      	bne.n	800b72c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b676:	4b39      	ldr	r3, [pc, #228]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a38      	ldr	r2, [pc, #224]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b67c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b682:	f7fd f809 	bl	8008698 <HAL_GetTick>
 800b686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b688:	e008      	b.n	800b69c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b68a:	f7fd f805 	bl	8008698 <HAL_GetTick>
 800b68e:	4602      	mov	r2, r0
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2b02      	cmp	r3, #2
 800b696:	d901      	bls.n	800b69c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b698:	2303      	movs	r3, #3
 800b69a:	e0b5      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b69c:	4b2f      	ldr	r3, [pc, #188]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f0      	bne.n	800b68a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6a8:	4b2c      	ldr	r3, [pc, #176]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6aa:	68da      	ldr	r2, [r3, #12]
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <HAL_RCC_OscConfig+0x580>)
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	6a11      	ldr	r1, [r2, #32]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6b8:	3a01      	subs	r2, #1
 800b6ba:	0112      	lsls	r2, r2, #4
 800b6bc:	4311      	orrs	r1, r2
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b6c2:	0212      	lsls	r2, r2, #8
 800b6c4:	4311      	orrs	r1, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6ca:	0852      	lsrs	r2, r2, #1
 800b6cc:	3a01      	subs	r2, #1
 800b6ce:	0552      	lsls	r2, r2, #21
 800b6d0:	4311      	orrs	r1, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b6d6:	0852      	lsrs	r2, r2, #1
 800b6d8:	3a01      	subs	r2, #1
 800b6da:	0652      	lsls	r2, r2, #25
 800b6dc:	4311      	orrs	r1, r2
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6e2:	06d2      	lsls	r2, r2, #27
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	491d      	ldr	r1, [pc, #116]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6ec:	4b1b      	ldr	r3, [pc, #108]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a1a      	ldr	r2, [pc, #104]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6f8:	4b18      	ldr	r3, [pc, #96]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	4a17      	ldr	r2, [pc, #92]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b6fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b702:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b704:	f7fc ffc8 	bl	8008698 <HAL_GetTick>
 800b708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b70a:	e008      	b.n	800b71e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b70c:	f7fc ffc4 	bl	8008698 <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b02      	cmp	r3, #2
 800b718:	d901      	bls.n	800b71e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e074      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b71e:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0f0      	beq.n	800b70c <HAL_RCC_OscConfig+0x528>
 800b72a:	e06c      	b.n	800b806 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b72c:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b736:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b738:	4b08      	ldr	r3, [pc, #32]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	4a07      	ldr	r2, [pc, #28]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	4a04      	ldr	r2, [pc, #16]	; (800b75c <HAL_RCC_OscConfig+0x578>)
 800b74a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b754:	f7fc ffa0 	bl	8008698 <HAL_GetTick>
 800b758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b75a:	e00e      	b.n	800b77a <HAL_RCC_OscConfig+0x596>
 800b75c:	40021000 	.word	0x40021000
 800b760:	40007000 	.word	0x40007000
 800b764:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b768:	f7fc ff96 	bl	8008698 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e046      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b77a:	4b25      	ldr	r3, [pc, #148]	; (800b810 <HAL_RCC_OscConfig+0x62c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f0      	bne.n	800b768 <HAL_RCC_OscConfig+0x584>
 800b786:	e03e      	b.n	800b806 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e039      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b794:	4b1e      	ldr	r3, [pc, #120]	; (800b810 <HAL_RCC_OscConfig+0x62c>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f003 0203 	and.w	r2, r3, #3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d12c      	bne.n	800b802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d123      	bne.n	800b802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d11b      	bne.n	800b802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d113      	bne.n	800b802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	085b      	lsrs	r3, r3, #1
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d109      	bne.n	800b802 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f8:	085b      	lsrs	r3, r3, #1
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d001      	beq.n	800b806 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	40021000 	.word	0x40021000

0800b814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b81e:	2300      	movs	r3, #0
 800b820:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e11e      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b82c:	4b91      	ldr	r3, [pc, #580]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	429a      	cmp	r2, r3
 800b838:	d910      	bls.n	800b85c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b83a:	4b8e      	ldr	r3, [pc, #568]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f023 020f 	bic.w	r2, r3, #15
 800b842:	498c      	ldr	r1, [pc, #560]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	4313      	orrs	r3, r2
 800b848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b84a:	4b8a      	ldr	r3, [pc, #552]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	d001      	beq.n	800b85c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e106      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d073      	beq.n	800b950 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d129      	bne.n	800b8c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b870:	4b81      	ldr	r3, [pc, #516]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e0f4      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b880:	f000 f972 	bl	800bb68 <RCC_GetSysClockFreqFromPLLSource>
 800b884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	4a7c      	ldr	r2, [pc, #496]	; (800ba7c <HAL_RCC_ClockConfig+0x268>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d93f      	bls.n	800b90e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b88e:	4b7a      	ldr	r3, [pc, #488]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d009      	beq.n	800b8ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d033      	beq.n	800b90e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d12f      	bne.n	800b90e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b8ae:	4b72      	ldr	r3, [pc, #456]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8b6:	4a70      	ldr	r2, [pc, #448]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b8be:	2380      	movs	r3, #128	; 0x80
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e024      	b.n	800b90e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d107      	bne.n	800b8dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8cc:	4b6a      	ldr	r3, [pc, #424]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d109      	bne.n	800b8ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0c6      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8dc:	4b66      	ldr	r3, [pc, #408]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e0be      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b8ec:	f000 f8ce 	bl	800ba8c <HAL_RCC_GetSysClockFreq>
 800b8f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	4a61      	ldr	r2, [pc, #388]	; (800ba7c <HAL_RCC_ClockConfig+0x268>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d909      	bls.n	800b90e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b8fa:	4b5f      	ldr	r3, [pc, #380]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b902:	4a5d      	ldr	r2, [pc, #372]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b908:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b90a:	2380      	movs	r3, #128	; 0x80
 800b90c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b90e:	4b5a      	ldr	r3, [pc, #360]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f023 0203 	bic.w	r2, r3, #3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4957      	ldr	r1, [pc, #348]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b920:	f7fc feba 	bl	8008698 <HAL_GetTick>
 800b924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b926:	e00a      	b.n	800b93e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b928:	f7fc feb6 	bl	8008698 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	f241 3288 	movw	r2, #5000	; 0x1388
 800b936:	4293      	cmp	r3, r2
 800b938:	d901      	bls.n	800b93e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e095      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b93e:	4b4e      	ldr	r3, [pc, #312]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 020c 	and.w	r2, r3, #12
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d1eb      	bne.n	800b928 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0302 	and.w	r3, r3, #2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d023      	beq.n	800b9a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b968:	4b43      	ldr	r3, [pc, #268]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	4a42      	ldr	r2, [pc, #264]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b96e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b972:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0308 	and.w	r3, r3, #8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d007      	beq.n	800b990 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b980:	4b3d      	ldr	r3, [pc, #244]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b988:	4a3b      	ldr	r2, [pc, #236]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b98a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b98e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b990:	4b39      	ldr	r3, [pc, #228]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	4936      	ldr	r1, [pc, #216]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	608b      	str	r3, [r1, #8]
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b80      	cmp	r3, #128	; 0x80
 800b9a8:	d105      	bne.n	800b9b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b9aa:	4b33      	ldr	r3, [pc, #204]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	4a32      	ldr	r2, [pc, #200]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800b9b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 030f 	and.w	r3, r3, #15
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d21d      	bcs.n	800ba00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f023 020f 	bic.w	r2, r3, #15
 800b9cc:	4929      	ldr	r1, [pc, #164]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b9d4:	f7fc fe60 	bl	8008698 <HAL_GetTick>
 800b9d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9da:	e00a      	b.n	800b9f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9dc:	f7fc fe5c 	bl	8008698 <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d901      	bls.n	800b9f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e03b      	b.n	800ba6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9f2:	4b20      	ldr	r3, [pc, #128]	; (800ba74 <HAL_RCC_ClockConfig+0x260>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d1ed      	bne.n	800b9dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d008      	beq.n	800ba1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba0c:	4b1a      	ldr	r3, [pc, #104]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	4917      	ldr	r1, [pc, #92]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	490f      	ldr	r1, [pc, #60]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ba3e:	f000 f825 	bl	800ba8c <HAL_RCC_GetSysClockFreq>
 800ba42:	4601      	mov	r1, r0
 800ba44:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <HAL_RCC_ClockConfig+0x264>)
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	091b      	lsrs	r3, r3, #4
 800ba4a:	f003 030f 	and.w	r3, r3, #15
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <HAL_RCC_ClockConfig+0x26c>)
 800ba50:	5cd3      	ldrb	r3, [r2, r3]
 800ba52:	f003 031f 	and.w	r3, r3, #31
 800ba56:	fa21 f303 	lsr.w	r3, r1, r3
 800ba5a:	4a0a      	ldr	r2, [pc, #40]	; (800ba84 <HAL_RCC_ClockConfig+0x270>)
 800ba5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <HAL_RCC_ClockConfig+0x274>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc fdcc 	bl	8008600 <HAL_InitTick>
 800ba68:	4603      	mov	r3, r0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40022000 	.word	0x40022000
 800ba78:	40021000 	.word	0x40021000
 800ba7c:	04c4b400 	.word	0x04c4b400
 800ba80:	08013658 	.word	0x08013658
 800ba84:	20000ca0 	.word	0x20000ca0
 800ba88:	20000ca4 	.word	0x20000ca4

0800ba8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba92:	4b2c      	ldr	r3, [pc, #176]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	f003 030c 	and.w	r3, r3, #12
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	d102      	bne.n	800baa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba9e:	4b2a      	ldr	r3, [pc, #168]	; (800bb48 <HAL_RCC_GetSysClockFreq+0xbc>)
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	e047      	b.n	800bb34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800baa4:	4b27      	ldr	r3, [pc, #156]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f003 030c 	and.w	r3, r3, #12
 800baac:	2b08      	cmp	r3, #8
 800baae:	d102      	bne.n	800bab6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bab0:	4b26      	ldr	r3, [pc, #152]	; (800bb4c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	e03e      	b.n	800bb34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bab6:	4b23      	ldr	r3, [pc, #140]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f003 030c 	and.w	r3, r3, #12
 800babe:	2b0c      	cmp	r3, #12
 800bac0:	d136      	bne.n	800bb30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bac2:	4b20      	ldr	r3, [pc, #128]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f003 0303 	and.w	r3, r3, #3
 800baca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bacc:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	091b      	lsrs	r3, r3, #4
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	3301      	adds	r3, #1
 800bad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b03      	cmp	r3, #3
 800bade:	d10c      	bne.n	800bafa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bae0:	4a1a      	ldr	r2, [pc, #104]	; (800bb4c <HAL_RCC_GetSysClockFreq+0xc0>)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae8:	4a16      	ldr	r2, [pc, #88]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baea:	68d2      	ldr	r2, [r2, #12]
 800baec:	0a12      	lsrs	r2, r2, #8
 800baee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	617b      	str	r3, [r7, #20]
      break;
 800baf8:	e00c      	b.n	800bb14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bafa:	4a13      	ldr	r2, [pc, #76]	; (800bb48 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb02:	4a10      	ldr	r2, [pc, #64]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb04:	68d2      	ldr	r2, [r2, #12]
 800bb06:	0a12      	lsrs	r2, r2, #8
 800bb08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb0c:	fb02 f303 	mul.w	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]
      break;
 800bb12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	0e5b      	lsrs	r3, r3, #25
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	3301      	adds	r3, #1
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb2c:	613b      	str	r3, [r7, #16]
 800bb2e:	e001      	b.n	800bb34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bb34:	693b      	ldr	r3, [r7, #16]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	40021000 	.word	0x40021000
 800bb48:	00f42400 	.word	0x00f42400
 800bb4c:	007a1200 	.word	0x007a1200

0800bb50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb50:	b480      	push	{r7}
 800bb52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb54:	4b03      	ldr	r3, [pc, #12]	; (800bb64 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb56:	681b      	ldr	r3, [r3, #0]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20000ca0 	.word	0x20000ca0

0800bb68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	; (800bbe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f003 0303 	and.w	r3, r3, #3
 800bb76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb78:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	3301      	adds	r3, #1
 800bb84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d10c      	bne.n	800bba6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb8c:	4a17      	ldr	r2, [pc, #92]	; (800bbec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb94:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb96:	68d2      	ldr	r2, [r2, #12]
 800bb98:	0a12      	lsrs	r2, r2, #8
 800bb9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb9e:	fb02 f303 	mul.w	r3, r2, r3
 800bba2:	617b      	str	r3, [r7, #20]
    break;
 800bba4:	e00c      	b.n	800bbc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bba6:	4a12      	ldr	r2, [pc, #72]	; (800bbf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbae:	4a0e      	ldr	r2, [pc, #56]	; (800bbe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbb0:	68d2      	ldr	r2, [r2, #12]
 800bbb2:	0a12      	lsrs	r2, r2, #8
 800bbb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bbb8:	fb02 f303 	mul.w	r3, r2, r3
 800bbbc:	617b      	str	r3, [r7, #20]
    break;
 800bbbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbc0:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	0e5b      	lsrs	r3, r3, #25
 800bbc6:	f003 0303 	and.w	r3, r3, #3
 800bbca:	3301      	adds	r3, #1
 800bbcc:	005b      	lsls	r3, r3, #1
 800bbce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbda:	687b      	ldr	r3, [r7, #4]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	371c      	adds	r7, #28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	40021000 	.word	0x40021000
 800bbec:	007a1200 	.word	0x007a1200
 800bbf0:	00f42400 	.word	0x00f42400

0800bbf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc00:	2300      	movs	r3, #0
 800bc02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8098 	beq.w	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc12:	2300      	movs	r3, #0
 800bc14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc16:	4b43      	ldr	r3, [pc, #268]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc22:	4b40      	ldr	r3, [pc, #256]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc26:	4a3f      	ldr	r2, [pc, #252]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc2c:	6593      	str	r3, [r2, #88]	; 0x58
 800bc2e:	4b3d      	ldr	r3, [pc, #244]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc36:	60bb      	str	r3, [r7, #8]
 800bc38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc3e:	4b3a      	ldr	r3, [pc, #232]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a39      	ldr	r2, [pc, #228]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc4a:	f7fc fd25 	bl	8008698 <HAL_GetTick>
 800bc4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc50:	e009      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc52:	f7fc fd21 	bl	8008698 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d902      	bls.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	74fb      	strb	r3, [r7, #19]
        break;
 800bc64:	e005      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc66:	4b30      	ldr	r3, [pc, #192]	; (800bd28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0ef      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc72:	7cfb      	ldrb	r3, [r7, #19]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d159      	bne.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc78:	4b2a      	ldr	r3, [pc, #168]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d01e      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d019      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc94:	4b23      	ldr	r3, [pc, #140]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bca0:	4b20      	ldr	r3, [pc, #128]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca6:	4a1f      	ldr	r2, [pc, #124]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bcb0:	4b1c      	ldr	r3, [pc, #112]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb6:	4a1b      	ldr	r2, [pc, #108]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bcc0:	4a18      	ldr	r2, [pc, #96]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d016      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd2:	f7fc fce1 	bl	8008698 <HAL_GetTick>
 800bcd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcd8:	e00b      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcda:	f7fc fcdd 	bl	8008698 <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d902      	bls.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	74fb      	strb	r3, [r7, #19]
            break;
 800bcf0:	e006      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf8:	f003 0302 	and.w	r3, r3, #2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0ec      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bd00:	7cfb      	ldrb	r3, [r7, #19]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10b      	bne.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd06:	4b07      	ldr	r3, [pc, #28]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd14:	4903      	ldr	r1, [pc, #12]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd1c:	e008      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd1e:	7cfb      	ldrb	r3, [r7, #19]
 800bd20:	74bb      	strb	r3, [r7, #18]
 800bd22:	e005      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd24:	40021000 	.word	0x40021000
 800bd28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2c:	7cfb      	ldrb	r3, [r7, #19]
 800bd2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd30:	7c7b      	ldrb	r3, [r7, #17]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d105      	bne.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd36:	4baf      	ldr	r3, [pc, #700]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd3a:	4aae      	ldr	r2, [pc, #696]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00a      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd4e:	4ba9      	ldr	r3, [pc, #676]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd54:	f023 0203 	bic.w	r2, r3, #3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	49a5      	ldr	r1, [pc, #660]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0302 	and.w	r3, r3, #2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00a      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd70:	4ba0      	ldr	r3, [pc, #640]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd76:	f023 020c 	bic.w	r2, r3, #12
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	499d      	ldr	r1, [pc, #628]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd80:	4313      	orrs	r3, r2
 800bd82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd92:	4b98      	ldr	r3, [pc, #608]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	4994      	ldr	r1, [pc, #592]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0308 	and.w	r3, r3, #8
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00a      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bdb4:	4b8f      	ldr	r3, [pc, #572]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	498c      	ldr	r1, [pc, #560]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0310 	and.w	r3, r3, #16
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00a      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdd6:	4b87      	ldr	r3, [pc, #540]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	4983      	ldr	r1, [pc, #524]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde6:	4313      	orrs	r3, r2
 800bde8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0320 	and.w	r3, r3, #32
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00a      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdf8:	4b7e      	ldr	r3, [pc, #504]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	497b      	ldr	r1, [pc, #492]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be1a:	4b76      	ldr	r3, [pc, #472]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	69db      	ldr	r3, [r3, #28]
 800be28:	4972      	ldr	r1, [pc, #456]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be3c:	4b6d      	ldr	r3, [pc, #436]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	496a      	ldr	r1, [pc, #424]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be5e:	4b65      	ldr	r3, [pc, #404]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	4961      	ldr	r1, [pc, #388]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be80:	4b5c      	ldr	r3, [pc, #368]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be86:	f023 0203 	bic.w	r2, r3, #3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	4959      	ldr	r1, [pc, #356]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be90:	4313      	orrs	r3, r2
 800be92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bea2:	4b54      	ldr	r3, [pc, #336]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb0:	4950      	ldr	r1, [pc, #320]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d015      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bec4:	4b4b      	ldr	r3, [pc, #300]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	4948      	ldr	r1, [pc, #288]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bee2:	d105      	bne.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bee4:	4b43      	ldr	r3, [pc, #268]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	4a42      	ldr	r2, [pc, #264]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d015      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800befc:	4b3d      	ldr	r3, [pc, #244]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0a:	493a      	ldr	r1, [pc, #232]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf1a:	d105      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf1c:	4b35      	ldr	r3, [pc, #212]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	4a34      	ldr	r2, [pc, #208]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d015      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf34:	4b2f      	ldr	r3, [pc, #188]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf42:	492c      	ldr	r1, [pc, #176]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf52:	d105      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf54:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	4a26      	ldr	r2, [pc, #152]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d015      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf6c:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7a:	491e      	ldr	r1, [pc, #120]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf8a:	d105      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf8c:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	4a18      	ldr	r2, [pc, #96]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d015      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bfa4:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb2:	4910      	ldr	r1, [pc, #64]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfc2:	d105      	bne.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bfc4:	4b0b      	ldr	r3, [pc, #44]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	4a0a      	ldr	r2, [pc, #40]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d018      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bfdc:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfea:	4902      	ldr	r1, [pc, #8]	; (800bff4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bff2:	e001      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bff4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c000:	d105      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c002:	4b21      	ldr	r3, [pc, #132]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	4a20      	ldr	r2, [pc, #128]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c00c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c016:	2b00      	cmp	r3, #0
 800c018:	d015      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c01a:	4b1b      	ldr	r3, [pc, #108]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c020:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c028:	4917      	ldr	r1, [pc, #92]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c038:	d105      	bne.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c03a:	4b13      	ldr	r3, [pc, #76]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4a12      	ldr	r2, [pc, #72]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c044:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d015      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c052:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c054:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c060:	4909      	ldr	r1, [pc, #36]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c062:	4313      	orrs	r3, r2
 800c064:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c06c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c070:	d105      	bne.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	4a04      	ldr	r2, [pc, #16]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c07c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c07e:	7cbb      	ldrb	r3, [r7, #18]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	40021000 	.word	0x40021000

0800c08c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e084      	b.n	800c1a8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7fb fd2b 	bl	8007b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0de:	d902      	bls.n	800c0e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	e002      	b.n	800c0ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c0e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c0f4:	d007      	beq.n	800c106 <HAL_SPI_Init+0x7a>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0fe:	d002      	beq.n	800c106 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10b      	bne.n	800c126 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c116:	d903      	bls.n	800c120 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2202      	movs	r2, #2
 800c11c:	631a      	str	r2, [r3, #48]	; 0x30
 800c11e:	e002      	b.n	800c126 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c144:	431a      	orrs	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a1b      	ldr	r3, [r3, #32]
 800c150:	ea42 0103 	orr.w	r1, r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	0c1b      	lsrs	r3, r3, #16
 800c166:	f003 0204 	and.w	r2, r3, #4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16e:	431a      	orrs	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c174:	431a      	orrs	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	ea42 0103 	orr.w	r1, r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	430a      	orrs	r2, r1
 800c186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	69da      	ldr	r2, [r3, #28]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e049      	b.n	800c256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7fc f914 	bl	8008404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	f000 fc38 	bl	800ca64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	d001      	beq.n	800c278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e019      	b.n	800c2ac <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <HAL_TIM_Base_Start+0x58>)
 800c288:	4013      	ands	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b06      	cmp	r3, #6
 800c290:	d00b      	beq.n	800c2aa <HAL_TIM_Base_Start+0x4a>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c298:	d007      	beq.n	800c2aa <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0201 	orr.w	r2, r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr
 800c2b8:	00010007 	.word	0x00010007

0800c2bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6a1a      	ldr	r2, [r3, #32]
 800c2ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10f      	bne.n	800c2f4 <HAL_TIM_Base_Stop+0x38>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6a1a      	ldr	r2, [r3, #32]
 800c2da:	f244 4344 	movw	r3, #17476	; 0x4444
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d107      	bne.n	800c2f4 <HAL_TIM_Base_Stop+0x38>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f022 0201 	bic.w	r2, r2, #1
 800c2f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
	...

0800c30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d001      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e021      	b.n	800c368 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f042 0201 	orr.w	r2, r2, #1
 800c33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <HAL_TIM_Base_Start_IT+0x68>)
 800c344:	4013      	ands	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b06      	cmp	r3, #6
 800c34c:	d00b      	beq.n	800c366 <HAL_TIM_Base_Start_IT+0x5a>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c354:	d007      	beq.n	800c366 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f042 0201 	orr.w	r2, r2, #1
 800c364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	00010007 	.word	0x00010007

0800c378 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0201 	bic.w	r2, r2, #1
 800c38e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6a1a      	ldr	r2, [r3, #32]
 800c396:	f241 1311 	movw	r3, #4369	; 0x1111
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10f      	bne.n	800c3c0 <HAL_TIM_Base_Stop_IT+0x48>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6a1a      	ldr	r2, [r3, #32]
 800c3a6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d107      	bne.n	800c3c0 <HAL_TIM_Base_Stop_IT+0x48>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0201 	bic.w	r2, r2, #1
 800c3be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b086      	sub	sp, #24
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e097      	b.n	800c51a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7fb ffb4 	bl	800836c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2202      	movs	r2, #2
 800c408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3304      	adds	r3, #4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f000 fb1a 	bl	800ca64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c458:	f023 0303 	bic.w	r3, r3, #3
 800c45c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	4313      	orrs	r3, r2
 800c46a:	693a      	ldr	r2, [r7, #16]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c476:	f023 030c 	bic.w	r3, r3, #12
 800c47a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	4313      	orrs	r3, r2
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	4313      	orrs	r3, r2
 800c498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	011a      	lsls	r2, r3, #4
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	6a1b      	ldr	r3, [r3, #32]
 800c4a4:	031b      	lsls	r3, r3, #12
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c4b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c4bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	f003 0302 	and.w	r3, r3, #2
 800c534:	2b02      	cmp	r3, #2
 800c536:	d122      	bne.n	800c57e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	f003 0302 	and.w	r3, r3, #2
 800c542:	2b02      	cmp	r3, #2
 800c544:	d11b      	bne.n	800c57e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f06f 0202 	mvn.w	r2, #2
 800c54e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fa5f 	bl	800ca28 <HAL_TIM_IC_CaptureCallback>
 800c56a:	e005      	b.n	800c578 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa51 	bl	800ca14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa62 	bl	800ca3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d122      	bne.n	800c5d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	f003 0304 	and.w	r3, r3, #4
 800c596:	2b04      	cmp	r3, #4
 800c598:	d11b      	bne.n	800c5d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f06f 0204 	mvn.w	r2, #4
 800c5a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa35 	bl	800ca28 <HAL_TIM_IC_CaptureCallback>
 800c5be:	e005      	b.n	800c5cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa27 	bl	800ca14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fa38 	bl	800ca3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	f003 0308 	and.w	r3, r3, #8
 800c5dc:	2b08      	cmp	r3, #8
 800c5de:	d122      	bne.n	800c626 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	f003 0308 	and.w	r3, r3, #8
 800c5ea:	2b08      	cmp	r3, #8
 800c5ec:	d11b      	bne.n	800c626 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f06f 0208 	mvn.w	r2, #8
 800c5f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fa0b 	bl	800ca28 <HAL_TIM_IC_CaptureCallback>
 800c612:	e005      	b.n	800c620 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f9fd 	bl	800ca14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fa0e 	bl	800ca3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	f003 0310 	and.w	r3, r3, #16
 800c630:	2b10      	cmp	r3, #16
 800c632:	d122      	bne.n	800c67a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f003 0310 	and.w	r3, r3, #16
 800c63e:	2b10      	cmp	r3, #16
 800c640:	d11b      	bne.n	800c67a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f06f 0210 	mvn.w	r2, #16
 800c64a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2208      	movs	r2, #8
 800c650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f9e1 	bl	800ca28 <HAL_TIM_IC_CaptureCallback>
 800c666:	e005      	b.n	800c674 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f9d3 	bl	800ca14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f9e4 	bl	800ca3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b01      	cmp	r3, #1
 800c686:	d10e      	bne.n	800c6a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	2b01      	cmp	r3, #1
 800c694:	d107      	bne.n	800c6a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f06f 0201 	mvn.w	r2, #1
 800c69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f9ad 	bl	800ca00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6b0:	2b80      	cmp	r3, #128	; 0x80
 800c6b2:	d10e      	bne.n	800c6d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6be:	2b80      	cmp	r3, #128	; 0x80
 800c6c0:	d107      	bne.n	800c6d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fc5f 	bl	800cf90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e0:	d10e      	bne.n	800c700 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ec:	2b80      	cmp	r3, #128	; 0x80
 800c6ee:	d107      	bne.n	800c700 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fc52 	bl	800cfa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c70a:	2b40      	cmp	r3, #64	; 0x40
 800c70c:	d10e      	bne.n	800c72c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c718:	2b40      	cmp	r3, #64	; 0x40
 800c71a:	d107      	bne.n	800c72c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f992 	bl	800ca50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	f003 0320 	and.w	r3, r3, #32
 800c736:	2b20      	cmp	r3, #32
 800c738:	d10e      	bne.n	800c758 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	f003 0320 	and.w	r3, r3, #32
 800c744:	2b20      	cmp	r3, #32
 800c746:	d107      	bne.n	800c758 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f06f 0220 	mvn.w	r2, #32
 800c750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fc12 	bl	800cf7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c766:	d10f      	bne.n	800c788 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c776:	d107      	bne.n	800c788 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fc18 	bl	800cfb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c796:	d10f      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7a6:	d107      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fc0a 	bl	800cfcc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c6:	d10f      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7d6:	d107      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fbfc 	bl	800cfe0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c7f6:	d10f      	bne.n	800c818 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c802:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c806:	d107      	bne.n	800c818 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fbee 	bl	800cff4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c830:	2b01      	cmp	r3, #1
 800c832:	d101      	bne.n	800c838 <HAL_TIM_ConfigClockSource+0x18>
 800c834:	2302      	movs	r3, #2
 800c836:	e0d2      	b.n	800c9de <HAL_TIM_ConfigClockSource+0x1be>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2202      	movs	r2, #2
 800c844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c856:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c85a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c862:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c874:	f000 80a9 	beq.w	800c9ca <HAL_TIM_ConfigClockSource+0x1aa>
 800c878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c87c:	d81a      	bhi.n	800c8b4 <HAL_TIM_ConfigClockSource+0x94>
 800c87e:	2b30      	cmp	r3, #48	; 0x30
 800c880:	f000 809a 	beq.w	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c884:	2b30      	cmp	r3, #48	; 0x30
 800c886:	d809      	bhi.n	800c89c <HAL_TIM_ConfigClockSource+0x7c>
 800c888:	2b10      	cmp	r3, #16
 800c88a:	f000 8095 	beq.w	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c88e:	2b20      	cmp	r3, #32
 800c890:	f000 8092 	beq.w	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 808f 	beq.w	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c89a:	e097      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c89c:	2b50      	cmp	r3, #80	; 0x50
 800c89e:	d05b      	beq.n	800c958 <HAL_TIM_ConfigClockSource+0x138>
 800c8a0:	2b50      	cmp	r3, #80	; 0x50
 800c8a2:	d802      	bhi.n	800c8aa <HAL_TIM_ConfigClockSource+0x8a>
 800c8a4:	2b40      	cmp	r3, #64	; 0x40
 800c8a6:	d077      	beq.n	800c998 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c8a8:	e090      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8aa:	2b60      	cmp	r3, #96	; 0x60
 800c8ac:	d064      	beq.n	800c978 <HAL_TIM_ConfigClockSource+0x158>
 800c8ae:	2b70      	cmp	r3, #112	; 0x70
 800c8b0:	d028      	beq.n	800c904 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c8b2:	e08b      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8b4:	4a4c      	ldr	r2, [pc, #304]	; (800c9e8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d07e      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c8ba:	4a4b      	ldr	r2, [pc, #300]	; (800c9e8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d810      	bhi.n	800c8e2 <HAL_TIM_ConfigClockSource+0xc2>
 800c8c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8c4:	d078      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c8c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ca:	d803      	bhi.n	800c8d4 <HAL_TIM_ConfigClockSource+0xb4>
 800c8cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8d0:	d02f      	beq.n	800c932 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c8d2:	e07b      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c8d8:	d06e      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c8da:	4a44      	ldr	r2, [pc, #272]	; (800c9ec <HAL_TIM_ConfigClockSource+0x1cc>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d06b      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8e0:	e074      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8e2:	4a43      	ldr	r2, [pc, #268]	; (800c9f0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d067      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c8e8:	4a41      	ldr	r2, [pc, #260]	; (800c9f0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d803      	bhi.n	800c8f6 <HAL_TIM_ConfigClockSource+0xd6>
 800c8ee:	4a41      	ldr	r2, [pc, #260]	; (800c9f4 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d061      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c8f4:	e06a      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c8f6:	4a40      	ldr	r2, [pc, #256]	; (800c9f8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d05d      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
 800c8fc:	4a3f      	ldr	r2, [pc, #252]	; (800c9fc <HAL_TIM_ConfigClockSource+0x1dc>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d05a      	beq.n	800c9b8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c902:	e063      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	6899      	ldr	r1, [r3, #8]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	f000 f9ca 	bl	800ccac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c926:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	609a      	str	r2, [r3, #8]
      break;
 800c930:	e04c      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	6899      	ldr	r1, [r3, #8]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f000 f9b3 	bl	800ccac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	689a      	ldr	r2, [r3, #8]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c954:	609a      	str	r2, [r3, #8]
      break;
 800c956:	e039      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6818      	ldr	r0, [r3, #0]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	6859      	ldr	r1, [r3, #4]
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	461a      	mov	r2, r3
 800c966:	f000 f925 	bl	800cbb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2150      	movs	r1, #80	; 0x50
 800c970:	4618      	mov	r0, r3
 800c972:	f000 f97e 	bl	800cc72 <TIM_ITRx_SetConfig>
      break;
 800c976:	e029      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	6859      	ldr	r1, [r3, #4]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	461a      	mov	r2, r3
 800c986:	f000 f944 	bl	800cc12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2160      	movs	r1, #96	; 0x60
 800c990:	4618      	mov	r0, r3
 800c992:	f000 f96e 	bl	800cc72 <TIM_ITRx_SetConfig>
      break;
 800c996:	e019      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6818      	ldr	r0, [r3, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	6859      	ldr	r1, [r3, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	f000 f905 	bl	800cbb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2140      	movs	r1, #64	; 0x40
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 f95e 	bl	800cc72 <TIM_ITRx_SetConfig>
      break;
 800c9b6:	e009      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	f000 f955 	bl	800cc72 <TIM_ITRx_SetConfig>
      break;
 800c9c8:	e000      	b.n	800c9cc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c9ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	00100030 	.word	0x00100030
 800c9ec:	00100020 	.word	0x00100020
 800c9f0:	00100050 	.word	0x00100050
 800c9f4:	00100040 	.word	0x00100040
 800c9f8:	00100060 	.word	0x00100060
 800c9fc:	00100070 	.word	0x00100070

0800ca00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca44:	bf00      	nop
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a46      	ldr	r2, [pc, #280]	; (800cb90 <TIM_Base_SetConfig+0x12c>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d017      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca82:	d013      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a43      	ldr	r2, [pc, #268]	; (800cb94 <TIM_Base_SetConfig+0x130>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d00f      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a42      	ldr	r2, [pc, #264]	; (800cb98 <TIM_Base_SetConfig+0x134>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00b      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a41      	ldr	r2, [pc, #260]	; (800cb9c <TIM_Base_SetConfig+0x138>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d007      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a40      	ldr	r2, [pc, #256]	; (800cba0 <TIM_Base_SetConfig+0x13c>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <TIM_Base_SetConfig+0x48>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a3f      	ldr	r2, [pc, #252]	; (800cba4 <TIM_Base_SetConfig+0x140>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d108      	bne.n	800cabe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a33      	ldr	r2, [pc, #204]	; (800cb90 <TIM_Base_SetConfig+0x12c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d023      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cacc:	d01f      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a30      	ldr	r2, [pc, #192]	; (800cb94 <TIM_Base_SetConfig+0x130>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d01b      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a2f      	ldr	r2, [pc, #188]	; (800cb98 <TIM_Base_SetConfig+0x134>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d017      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a2e      	ldr	r2, [pc, #184]	; (800cb9c <TIM_Base_SetConfig+0x138>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d013      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a2d      	ldr	r2, [pc, #180]	; (800cba0 <TIM_Base_SetConfig+0x13c>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00f      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a2d      	ldr	r2, [pc, #180]	; (800cba8 <TIM_Base_SetConfig+0x144>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d00b      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a2c      	ldr	r2, [pc, #176]	; (800cbac <TIM_Base_SetConfig+0x148>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d007      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4a2b      	ldr	r2, [pc, #172]	; (800cbb0 <TIM_Base_SetConfig+0x14c>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d003      	beq.n	800cb0e <TIM_Base_SetConfig+0xaa>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a26      	ldr	r2, [pc, #152]	; (800cba4 <TIM_Base_SetConfig+0x140>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d108      	bne.n	800cb20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	695b      	ldr	r3, [r3, #20]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	689a      	ldr	r2, [r3, #8]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a12      	ldr	r2, [pc, #72]	; (800cb90 <TIM_Base_SetConfig+0x12c>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d013      	beq.n	800cb74 <TIM_Base_SetConfig+0x110>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a14      	ldr	r2, [pc, #80]	; (800cba0 <TIM_Base_SetConfig+0x13c>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00f      	beq.n	800cb74 <TIM_Base_SetConfig+0x110>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a14      	ldr	r2, [pc, #80]	; (800cba8 <TIM_Base_SetConfig+0x144>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d00b      	beq.n	800cb74 <TIM_Base_SetConfig+0x110>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a13      	ldr	r2, [pc, #76]	; (800cbac <TIM_Base_SetConfig+0x148>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d007      	beq.n	800cb74 <TIM_Base_SetConfig+0x110>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a12      	ldr	r2, [pc, #72]	; (800cbb0 <TIM_Base_SetConfig+0x14c>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d003      	beq.n	800cb74 <TIM_Base_SetConfig+0x110>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a0d      	ldr	r2, [pc, #52]	; (800cba4 <TIM_Base_SetConfig+0x140>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d103      	bne.n	800cb7c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	691a      	ldr	r2, [r3, #16]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	615a      	str	r2, [r3, #20]
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	40012c00 	.word	0x40012c00
 800cb94:	40000400 	.word	0x40000400
 800cb98:	40000800 	.word	0x40000800
 800cb9c:	40000c00 	.word	0x40000c00
 800cba0:	40013400 	.word	0x40013400
 800cba4:	40015000 	.word	0x40015000
 800cba8:	40014000 	.word	0x40014000
 800cbac:	40014400 	.word	0x40014400
 800cbb0:	40014800 	.word	0x40014800

0800cbb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	f023 0201 	bic.w	r2, r3, #1
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f023 030a 	bic.w	r3, r3, #10
 800cbf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	621a      	str	r2, [r3, #32]
}
 800cc06:	bf00      	nop
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc12:	b480      	push	{r7}
 800cc14:	b087      	sub	sp, #28
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	60f8      	str	r0, [r7, #12]
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	f023 0210 	bic.w	r2, r3, #16
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	031b      	lsls	r3, r3, #12
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	621a      	str	r2, [r3, #32]
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b085      	sub	sp, #20
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	f043 0307 	orr.w	r3, r3, #7
 800cc98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	609a      	str	r2, [r3, #8]
}
 800cca0:	bf00      	nop
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	021a      	lsls	r2, r3, #8
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	697a      	ldr	r2, [r7, #20]
 800ccde:	609a      	str	r2, [r3, #8]
}
 800cce0:	bf00      	nop
 800cce2:	371c      	adds	r7, #28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d101      	bne.n	800cd04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd00:	2302      	movs	r3, #2
 800cd02:	e074      	b.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a34      	ldr	r2, [pc, #208]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d009      	beq.n	800cd42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a33      	ldr	r2, [pc, #204]	; (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d004      	beq.n	800cd42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a31      	ldr	r2, [pc, #196]	; (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d108      	bne.n	800cd54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cd5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a21      	ldr	r2, [pc, #132]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d022      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd84:	d01d      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a1f      	ldr	r2, [pc, #124]	; (800ce08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d018      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a1d      	ldr	r2, [pc, #116]	; (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d013      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a1c      	ldr	r2, [pc, #112]	; (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d00e      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a15      	ldr	r2, [pc, #84]	; (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d009      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a18      	ldr	r2, [pc, #96]	; (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d004      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a11      	ldr	r2, [pc, #68]	; (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d10c      	bne.n	800cddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	40012c00 	.word	0x40012c00
 800ce00:	40013400 	.word	0x40013400
 800ce04:	40015000 	.word	0x40015000
 800ce08:	40000400 	.word	0x40000400
 800ce0c:	40000800 	.word	0x40000800
 800ce10:	40000c00 	.word	0x40000c00
 800ce14:	40014000 	.word	0x40014000

0800ce18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d101      	bne.n	800ce34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce30:	2302      	movs	r3, #2
 800ce32:	e096      	b.n	800cf62 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	699b      	ldr	r3, [r3, #24]
 800cea8:	041b      	lsls	r3, r3, #16
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a2f      	ldr	r2, [pc, #188]	; (800cf70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d009      	beq.n	800cecc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a2d      	ldr	r2, [pc, #180]	; (800cf74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d004      	beq.n	800cecc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a2c      	ldr	r2, [pc, #176]	; (800cf78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d106      	bne.n	800ceda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a24      	ldr	r2, [pc, #144]	; (800cf70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d009      	beq.n	800cef8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a22      	ldr	r2, [pc, #136]	; (800cf74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d004      	beq.n	800cef8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a21      	ldr	r2, [pc, #132]	; (800cf78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d12b      	bne.n	800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf02:	051b      	lsls	r3, r3, #20
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	4313      	orrs	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a11      	ldr	r2, [pc, #68]	; (800cf70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d009      	beq.n	800cf42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a10      	ldr	r2, [pc, #64]	; (800cf74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d004      	beq.n	800cf42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a0e      	ldr	r2, [pc, #56]	; (800cf78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d106      	bne.n	800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	40012c00 	.word	0x40012c00
 800cf74:	40013400 	.word	0x40013400
 800cf78:	40015000 	.word	0x40015000

0800cf7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <LL_EXTI_EnableIT_0_31>:
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <LL_EXTI_EnableIT_0_31+0x20>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	4904      	ldr	r1, [pc, #16]	; (800d028 <LL_EXTI_EnableIT_0_31+0x20>)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4313      	orrs	r3, r2
 800d01a:	600b      	str	r3, [r1, #0]
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	40010400 	.word	0x40010400

0800d02c <LL_EXTI_EnableIT_32_63>:
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d034:	4b05      	ldr	r3, [pc, #20]	; (800d04c <LL_EXTI_EnableIT_32_63+0x20>)
 800d036:	6a1a      	ldr	r2, [r3, #32]
 800d038:	4904      	ldr	r1, [pc, #16]	; (800d04c <LL_EXTI_EnableIT_32_63+0x20>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	620b      	str	r3, [r1, #32]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	40010400 	.word	0x40010400

0800d050 <LL_EXTI_DisableIT_0_31>:
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d058:	4b06      	ldr	r3, [pc, #24]	; (800d074 <LL_EXTI_DisableIT_0_31+0x24>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	43db      	mvns	r3, r3
 800d060:	4904      	ldr	r1, [pc, #16]	; (800d074 <LL_EXTI_DisableIT_0_31+0x24>)
 800d062:	4013      	ands	r3, r2
 800d064:	600b      	str	r3, [r1, #0]
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	40010400 	.word	0x40010400

0800d078 <LL_EXTI_DisableIT_32_63>:
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d080:	4b06      	ldr	r3, [pc, #24]	; (800d09c <LL_EXTI_DisableIT_32_63+0x24>)
 800d082:	6a1a      	ldr	r2, [r3, #32]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	43db      	mvns	r3, r3
 800d088:	4904      	ldr	r1, [pc, #16]	; (800d09c <LL_EXTI_DisableIT_32_63+0x24>)
 800d08a:	4013      	ands	r3, r2
 800d08c:	620b      	str	r3, [r1, #32]
}
 800d08e:	bf00      	nop
 800d090:	370c      	adds	r7, #12
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	40010400 	.word	0x40010400

0800d0a0 <LL_EXTI_EnableEvent_0_31>:
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	4904      	ldr	r1, [pc, #16]	; (800d0c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	604b      	str	r3, [r1, #4]
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	40010400 	.word	0x40010400

0800d0c4 <LL_EXTI_EnableEvent_32_63>:
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0d0:	4904      	ldr	r1, [pc, #16]	; (800d0e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	40010400 	.word	0x40010400

0800d0e8 <LL_EXTI_DisableEvent_0_31>:
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d0f0:	4b06      	ldr	r3, [pc, #24]	; (800d10c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	43db      	mvns	r3, r3
 800d0f8:	4904      	ldr	r1, [pc, #16]	; (800d10c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	604b      	str	r3, [r1, #4]
}
 800d0fe:	bf00      	nop
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	40010400 	.word	0x40010400

0800d110 <LL_EXTI_DisableEvent_32_63>:
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d118:	4b06      	ldr	r3, [pc, #24]	; (800d134 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	43db      	mvns	r3, r3
 800d120:	4904      	ldr	r1, [pc, #16]	; (800d134 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d122:	4013      	ands	r3, r2
 800d124:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d126:	bf00      	nop
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	40010400 	.word	0x40010400

0800d138 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d140:	4b05      	ldr	r3, [pc, #20]	; (800d158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	4904      	ldr	r1, [pc, #16]	; (800d158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4313      	orrs	r3, r2
 800d14a:	608b      	str	r3, [r1, #8]
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	40010400 	.word	0x40010400

0800d15c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d168:	4904      	ldr	r1, [pc, #16]	; (800d17c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	40010400 	.word	0x40010400

0800d180 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d188:	4b06      	ldr	r3, [pc, #24]	; (800d1a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d18a:	689a      	ldr	r2, [r3, #8]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	43db      	mvns	r3, r3
 800d190:	4904      	ldr	r1, [pc, #16]	; (800d1a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d192:	4013      	ands	r3, r2
 800d194:	608b      	str	r3, [r1, #8]
}
 800d196:	bf00      	nop
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40010400 	.word	0x40010400

0800d1a8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d1b0:	4b06      	ldr	r3, [pc, #24]	; (800d1cc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d1b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	43db      	mvns	r3, r3
 800d1b8:	4904      	ldr	r1, [pc, #16]	; (800d1cc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	40010400 	.word	0x40010400

0800d1d0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d1d8:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	4904      	ldr	r1, [pc, #16]	; (800d1f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	60cb      	str	r3, [r1, #12]
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	40010400 	.word	0x40010400

0800d1f4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d200:	4904      	ldr	r1, [pc, #16]	; (800d214 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4313      	orrs	r3, r2
 800d206:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d208:	bf00      	nop
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	40010400 	.word	0x40010400

0800d218 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d220:	4b06      	ldr	r3, [pc, #24]	; (800d23c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d222:	68da      	ldr	r2, [r3, #12]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	43db      	mvns	r3, r3
 800d228:	4904      	ldr	r1, [pc, #16]	; (800d23c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d22a:	4013      	ands	r3, r2
 800d22c:	60cb      	str	r3, [r1, #12]
}
 800d22e:	bf00      	nop
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	40010400 	.word	0x40010400

0800d240 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	43db      	mvns	r3, r3
 800d250:	4904      	ldr	r1, [pc, #16]	; (800d264 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d252:	4013      	ands	r3, r2
 800d254:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	40010400 	.word	0x40010400

0800d268 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7a1b      	ldrb	r3, [r3, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80c8 	beq.w	800d40e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d05d      	beq.n	800d342 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7a5b      	ldrb	r3, [r3, #9]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d00e      	beq.n	800d2ac <LL_EXTI_Init+0x44>
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d017      	beq.n	800d2c2 <LL_EXTI_Init+0x5a>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d120      	bne.n	800d2d8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff ff24 	bl	800d0e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff feaf 	bl	800d008 <LL_EXTI_EnableIT_0_31>
          break;
 800d2aa:	e018      	b.n	800d2de <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff fecd 	bl	800d050 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fef0 	bl	800d0a0 <LL_EXTI_EnableEvent_0_31>
          break;
 800d2c0:	e00d      	b.n	800d2de <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7ff fe9e 	bl	800d008 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fee5 	bl	800d0a0 <LL_EXTI_EnableEvent_0_31>
          break;
 800d2d6:	e002      	b.n	800d2de <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	60fb      	str	r3, [r7, #12]
          break;
 800d2dc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7a9b      	ldrb	r3, [r3, #10]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d02d      	beq.n	800d342 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7a9b      	ldrb	r3, [r3, #10]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d00e      	beq.n	800d30c <LL_EXTI_Init+0xa4>
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d017      	beq.n	800d322 <LL_EXTI_Init+0xba>
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d120      	bne.n	800d338 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff ff8c 	bl	800d218 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff ff17 	bl	800d138 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d30a:	e01b      	b.n	800d344 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff ff35 	bl	800d180 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7ff ff58 	bl	800d1d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d320:	e010      	b.n	800d344 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff ff06 	bl	800d138 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff ff4d 	bl	800d1d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d336:	e005      	b.n	800d344 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f043 0302 	orr.w	r3, r3, #2
 800d33e:	60fb      	str	r3, [r7, #12]
            break;
 800d340:	e000      	b.n	800d344 <LL_EXTI_Init+0xdc>
        }
      }
 800d342:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d075      	beq.n	800d438 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7a5b      	ldrb	r3, [r3, #9]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d00e      	beq.n	800d372 <LL_EXTI_Init+0x10a>
 800d354:	2b02      	cmp	r3, #2
 800d356:	d017      	beq.n	800d388 <LL_EXTI_Init+0x120>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d120      	bne.n	800d39e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff fed5 	bl	800d110 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff fe5e 	bl	800d02c <LL_EXTI_EnableIT_32_63>
          break;
 800d370:	e01a      	b.n	800d3a8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff fe7e 	bl	800d078 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff fe9f 	bl	800d0c4 <LL_EXTI_EnableEvent_32_63>
          break;
 800d386:	e00f      	b.n	800d3a8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff fe4d 	bl	800d02c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fe94 	bl	800d0c4 <LL_EXTI_EnableEvent_32_63>
          break;
 800d39c:	e004      	b.n	800d3a8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f043 0304 	orr.w	r3, r3, #4
 800d3a4:	60fb      	str	r3, [r7, #12]
          break;
 800d3a6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7a9b      	ldrb	r3, [r3, #10]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d043      	beq.n	800d438 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7a9b      	ldrb	r3, [r3, #10]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d00e      	beq.n	800d3d6 <LL_EXTI_Init+0x16e>
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d017      	beq.n	800d3ec <LL_EXTI_Init+0x184>
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d120      	bne.n	800d402 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff ff3b 	bl	800d240 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fec4 	bl	800d15c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d3d4:	e031      	b.n	800d43a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff fee4 	bl	800d1a8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff ff05 	bl	800d1f4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d3ea:	e026      	b.n	800d43a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff feb3 	bl	800d15c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fefa 	bl	800d1f4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d400:	e01b      	b.n	800d43a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f043 0305 	orr.w	r3, r3, #5
 800d408:	60fb      	str	r3, [r7, #12]
            break;
 800d40a:	bf00      	nop
 800d40c:	e015      	b.n	800d43a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fe1c 	bl	800d050 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fe63 	bl	800d0e8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	f7ff fe26 	bl	800d078 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fe6d 	bl	800d110 <LL_EXTI_DisableEvent_32_63>
 800d436:	e000      	b.n	800d43a <LL_EXTI_Init+0x1d2>
      }
 800d438:	bf00      	nop
  }

  return status;
 800d43a:	68fb      	ldr	r3, [r7, #12]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <LL_GPIO_SetPinMode>:
{
 800d444:	b480      	push	{r7}
 800d446:	b089      	sub	sp, #36	; 0x24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	fa93 f3a3 	rbit	r3, r3
 800d45e:	613b      	str	r3, [r7, #16]
  return result;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	fab3 f383 	clz	r3, r3
 800d466:	b2db      	uxtb	r3, r3
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	2103      	movs	r1, #3
 800d46c:	fa01 f303 	lsl.w	r3, r1, r3
 800d470:	43db      	mvns	r3, r3
 800d472:	401a      	ands	r2, r3
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	fa93 f3a3 	rbit	r3, r3
 800d47e:	61bb      	str	r3, [r7, #24]
  return result;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	fab3 f383 	clz	r3, r3
 800d486:	b2db      	uxtb	r3, r3
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	fa01 f303 	lsl.w	r3, r1, r3
 800d490:	431a      	orrs	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	601a      	str	r2, [r3, #0]
}
 800d496:	bf00      	nop
 800d498:	3724      	adds	r7, #36	; 0x24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <LL_GPIO_SetPinOutputType>:
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b085      	sub	sp, #20
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	43db      	mvns	r3, r3
 800d4b6:	401a      	ands	r2, r3
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	6879      	ldr	r1, [r7, #4]
 800d4bc:	fb01 f303 	mul.w	r3, r1, r3
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	605a      	str	r2, [r3, #4]
}
 800d4c6:	bf00      	nop
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <LL_GPIO_SetPinSpeed>:
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b089      	sub	sp, #36	; 0x24
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	689a      	ldr	r2, [r3, #8]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	fa93 f3a3 	rbit	r3, r3
 800d4ec:	613b      	str	r3, [r7, #16]
  return result;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	fab3 f383 	clz	r3, r3
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	2103      	movs	r1, #3
 800d4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4fe:	43db      	mvns	r3, r3
 800d500:	401a      	ands	r2, r3
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	fa93 f3a3 	rbit	r3, r3
 800d50c:	61bb      	str	r3, [r7, #24]
  return result;
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	fab3 f383 	clz	r3, r3
 800d514:	b2db      	uxtb	r3, r3
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	6879      	ldr	r1, [r7, #4]
 800d51a:	fa01 f303 	lsl.w	r3, r1, r3
 800d51e:	431a      	orrs	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	609a      	str	r2, [r3, #8]
}
 800d524:	bf00      	nop
 800d526:	3724      	adds	r7, #36	; 0x24
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <LL_GPIO_SetPinPull>:
{
 800d530:	b480      	push	{r7}
 800d532:	b089      	sub	sp, #36	; 0x24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	fa93 f3a3 	rbit	r3, r3
 800d54a:	613b      	str	r3, [r7, #16]
  return result;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	fab3 f383 	clz	r3, r3
 800d552:	b2db      	uxtb	r3, r3
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	2103      	movs	r1, #3
 800d558:	fa01 f303 	lsl.w	r3, r1, r3
 800d55c:	43db      	mvns	r3, r3
 800d55e:	401a      	ands	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	fa93 f3a3 	rbit	r3, r3
 800d56a:	61bb      	str	r3, [r7, #24]
  return result;
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	fab3 f383 	clz	r3, r3
 800d572:	b2db      	uxtb	r3, r3
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	fa01 f303 	lsl.w	r3, r1, r3
 800d57c:	431a      	orrs	r2, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	60da      	str	r2, [r3, #12]
}
 800d582:	bf00      	nop
 800d584:	3724      	adds	r7, #36	; 0x24
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <LL_GPIO_SetAFPin_0_7>:
{
 800d58e:	b480      	push	{r7}
 800d590:	b089      	sub	sp, #36	; 0x24
 800d592:	af00      	add	r7, sp, #0
 800d594:	60f8      	str	r0, [r7, #12]
 800d596:	60b9      	str	r1, [r7, #8]
 800d598:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a1a      	ldr	r2, [r3, #32]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	fa93 f3a3 	rbit	r3, r3
 800d5a8:	613b      	str	r3, [r7, #16]
  return result;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	fab3 f383 	clz	r3, r3
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	210f      	movs	r1, #15
 800d5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ba:	43db      	mvns	r3, r3
 800d5bc:	401a      	ands	r2, r3
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	fa93 f3a3 	rbit	r3, r3
 800d5c8:	61bb      	str	r3, [r7, #24]
  return result;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	fab3 f383 	clz	r3, r3
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	6879      	ldr	r1, [r7, #4]
 800d5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5da:	431a      	orrs	r2, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	621a      	str	r2, [r3, #32]
}
 800d5e0:	bf00      	nop
 800d5e2:	3724      	adds	r7, #36	; 0x24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <LL_GPIO_SetAFPin_8_15>:
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b089      	sub	sp, #36	; 0x24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	0a1b      	lsrs	r3, r3, #8
 800d600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	fa93 f3a3 	rbit	r3, r3
 800d608:	613b      	str	r3, [r7, #16]
  return result;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	fab3 f383 	clz	r3, r3
 800d610:	b2db      	uxtb	r3, r3
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	210f      	movs	r1, #15
 800d616:	fa01 f303 	lsl.w	r3, r1, r3
 800d61a:	43db      	mvns	r3, r3
 800d61c:	401a      	ands	r2, r3
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	0a1b      	lsrs	r3, r3, #8
 800d622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	fa93 f3a3 	rbit	r3, r3
 800d62a:	61bb      	str	r3, [r7, #24]
  return result;
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	fab3 f383 	clz	r3, r3
 800d632:	b2db      	uxtb	r3, r3
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	fa01 f303 	lsl.w	r3, r1, r3
 800d63c:	431a      	orrs	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d642:	bf00      	nop
 800d644:	3724      	adds	r7, #36	; 0x24
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b086      	sub	sp, #24
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	fa93 f3a3 	rbit	r3, r3
 800d664:	60bb      	str	r3, [r7, #8]
  return result;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	fab3 f383 	clz	r3, r3
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d670:	e040      	b.n	800d6f4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	2101      	movs	r1, #1
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	fa01 f303 	lsl.w	r3, r1, r3
 800d67e:	4013      	ands	r3, r2
 800d680:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d032      	beq.n	800d6ee <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6939      	ldr	r1, [r7, #16]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff fed7 	bl	800d444 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d003      	beq.n	800d6a6 <LL_GPIO_Init+0x58>
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d106      	bne.n	800d6b4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6939      	ldr	r1, [r7, #16]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff ff0f 	bl	800d4d2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	6939      	ldr	r1, [r7, #16]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff ff37 	bl	800d530 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d111      	bne.n	800d6ee <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2bff      	cmp	r3, #255	; 0xff
 800d6ce:	d807      	bhi.n	800d6e0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	6939      	ldr	r1, [r7, #16]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff ff58 	bl	800d58e <LL_GPIO_SetAFPin_0_7>
 800d6de:	e006      	b.n	800d6ee <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6939      	ldr	r1, [r7, #16]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ff7f 	bl	800d5ec <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1b7      	bne.n	800d672 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d003      	beq.n	800d712 <LL_GPIO_Init+0xc4>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d107      	bne.n	800d722 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	6819      	ldr	r1, [r3, #0]
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	461a      	mov	r2, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fec0 	bl	800d4a2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 800d72c:	b590      	push	{r4, r7, lr}
 800d72e:	b08b      	sub	sp, #44	; 0x2c
 800d730:	af00      	add	r7, sp, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	4611      	mov	r1, r2
 800d738:	461a      	mov	r2, r3
 800d73a:	4623      	mov	r3, r4
 800d73c:	80fb      	strh	r3, [r7, #6]
 800d73e:	4603      	mov	r3, r0
 800d740:	80bb      	strh	r3, [r7, #4]
 800d742:	460b      	mov	r3, r1
 800d744:	807b      	strh	r3, [r7, #2]
 800d746:	4613      	mov	r3, r2
 800d748:	803b      	strh	r3, [r7, #0]
	
	int tx = r;
 800d74a:	887b      	ldrh	r3, [r7, #2]
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 800d752:	887b      	ldrh	r3, [r7, #2]
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	f1c3 0301 	rsb	r3, r3, #1
 800d75a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 800d764:	e061      	b.n	800d82a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = x - tx; i <= x + tx; i++)
 800d766:	88fa      	ldrh	r2, [r7, #6]
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	613b      	str	r3, [r7, #16]
 800d76e:	e018      	b.n	800d7a2 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	b298      	uxth	r0, r3
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	b29a      	uxth	r2, r3
 800d778:	88bb      	ldrh	r3, [r7, #4]
 800d77a:	4413      	add	r3, r2
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	883a      	ldrh	r2, [r7, #0]
 800d780:	4619      	mov	r1, r3
 800d782:	f000 fc67 	bl	800e054 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	b298      	uxth	r0, r3
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	88ba      	ldrh	r2, [r7, #4]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	b29b      	uxth	r3, r3
 800d794:	883a      	ldrh	r2, [r7, #0]
 800d796:	4619      	mov	r1, r3
 800d798:	f000 fc5c 	bl	800e054 <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	88fa      	ldrh	r2, [r7, #6]
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	4413      	add	r3, r2
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	dde0      	ble.n	800d770 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = x - ty; i <= x + ty; i++)
 800d7ae:	88fa      	ldrh	r2, [r7, #6]
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	e018      	b.n	800d7ea <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	b298      	uxth	r0, r3
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	88bb      	ldrh	r3, [r7, #4]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	883a      	ldrh	r2, [r7, #0]
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	f000 fc43 	bl	800e054 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	b298      	uxth	r0, r3
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	88ba      	ldrh	r2, [r7, #4]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	883a      	ldrh	r2, [r7, #0]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	f000 fc38 	bl	800e054 <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	60fb      	str	r3, [r7, #12]
 800d7ea:	88fa      	ldrh	r2, [r7, #6]
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	dde0      	ble.n	800d7b8 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        ty++;
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	4413      	add	r3, r2
 800d802:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	3302      	adds	r3, #2
 800d808:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	005a      	lsls	r2, r3, #1
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	2b00      	cmp	r3, #0
 800d814:	dd09      	ble.n	800d82a <ILI9341_Draw_Filled_Circle+0xfe>
        {
        	tx--;
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	3b01      	subs	r3, #1
 800d81a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800d81c:	697a      	ldr	r2, [r7, #20]
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	4413      	add	r3, r2
 800d822:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	3302      	adds	r3, #2
 800d828:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 800d82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	429a      	cmp	r2, r3
 800d830:	da99      	bge.n	800d766 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800d832:	bf00      	nop
 800d834:	372c      	adds	r7, #44	; 0x2c
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}

0800d83a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800d83a:	b590      	push	{r4, r7, lr}
 800d83c:	b087      	sub	sp, #28
 800d83e:	af02      	add	r7, sp, #8
 800d840:	4604      	mov	r4, r0
 800d842:	4608      	mov	r0, r1
 800d844:	4611      	mov	r1, r2
 800d846:	461a      	mov	r2, r3
 800d848:	4623      	mov	r3, r4
 800d84a:	80fb      	strh	r3, [r7, #6]
 800d84c:	4603      	mov	r3, r0
 800d84e:	80bb      	strh	r3, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	807b      	strh	r3, [r7, #2]
 800d854:	4613      	mov	r3, r2
 800d856:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d85c:	7bfa      	ldrb	r2, [r7, #15]
 800d85e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d862:	429a      	cmp	r2, r3
 800d864:	d939      	bls.n	800d8da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d866:	88ba      	ldrh	r2, [r7, #4]
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	441a      	add	r2, r3
 800d86c:	88b9      	ldrh	r1, [r7, #4]
 800d86e:	883b      	ldrh	r3, [r7, #0]
 800d870:	4419      	add	r1, r3
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	1acb      	subs	r3, r1, r3
 800d876:	429a      	cmp	r2, r3
 800d878:	f000 8089 	beq.w	800d98e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800d87c:	88fa      	ldrh	r2, [r7, #6]
 800d87e:	7bfb      	ldrb	r3, [r7, #15]
 800d880:	441a      	add	r2, r3
 800d882:	88f9      	ldrh	r1, [r7, #6]
 800d884:	887b      	ldrh	r3, [r7, #2]
 800d886:	4419      	add	r1, r3
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	1acb      	subs	r3, r1, r3
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d07e      	beq.n	800d98e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	b29a      	uxth	r2, r3
 800d894:	88fb      	ldrh	r3, [r7, #6]
 800d896:	4413      	add	r3, r2
 800d898:	b298      	uxth	r0, r3
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	88bb      	ldrh	r3, [r7, #4]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	b299      	uxth	r1, r3
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	887a      	ldrh	r2, [r7, #2]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	b29c      	uxth	r4, r3
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	883a      	ldrh	r2, [r7, #0]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	2304      	movs	r3, #4
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	8c3b      	ldrh	r3, [r7, #32]
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	f000 fd18 	bl	800e308 <ILI9341_Draw_Rectangle>
				goto finish;
 800d8d8:	e05a      	b.n	800d990 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	88fb      	ldrh	r3, [r7, #6]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b298      	uxth	r0, r3
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	88bb      	ldrh	r3, [r7, #4]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	887a      	ldrh	r2, [r7, #2]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8fe:	f000 fa6b 	bl	800ddd8 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	b29a      	uxth	r2, r3
 800d906:	88fb      	ldrh	r3, [r7, #6]
 800d908:	4413      	add	r3, r2
 800d90a:	b298      	uxth	r0, r3
										(y + h) - b,
 800d90c:	88ba      	ldrh	r2, [r7, #4]
 800d90e:	883b      	ldrh	r3, [r7, #0]
 800d910:	4413      	add	r3, r2
 800d912:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	b29b      	uxth	r3, r3
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	b299      	uxth	r1, r3
										(w - b)+1,
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	887a      	ldrh	r2, [r7, #2]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d926:	3301      	adds	r3, #1
 800d928:	b29a      	uxth	r2, r3
 800d92a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d92c:	f000 fa54 	bl	800ddd8 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	b29a      	uxth	r2, r3
 800d934:	88fb      	ldrh	r3, [r7, #6]
 800d936:	4413      	add	r3, r2
 800d938:	b298      	uxth	r0, r3
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	88bb      	ldrh	r3, [r7, #4]
 800d940:	4413      	add	r3, r2
 800d942:	b299      	uxth	r1, r3
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	b29b      	uxth	r3, r3
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	883a      	ldrh	r2, [r7, #0]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	b29a      	uxth	r2, r3
 800d952:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d954:	f000 faa4 	bl	800dea0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800d958:	88fa      	ldrh	r2, [r7, #6]
 800d95a:	887b      	ldrh	r3, [r7, #2]
 800d95c:	4413      	add	r3, r2
 800d95e:	b29a      	uxth	r2, r3
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	b29b      	uxth	r3, r3
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	b298      	uxth	r0, r3
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	88bb      	ldrh	r3, [r7, #4]
 800d96e:	4413      	add	r3, r2
 800d970:	b299      	uxth	r1, r3
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	b29b      	uxth	r3, r3
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	b29b      	uxth	r3, r3
 800d97a:	883a      	ldrh	r2, [r7, #0]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	b29a      	uxth	r2, r3
 800d980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d982:	f000 fa8d 	bl	800dea0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	3301      	adds	r3, #1
 800d98a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d98c:	e766      	b.n	800d85c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d98e:	bf00      	nop
	// done
	return;
 800d990:	bf00      	nop
}
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	bd90      	pop	{r4, r7, pc}

0800d998 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b089      	sub	sp, #36	; 0x24
 800d99c:	af02      	add	r7, sp, #8
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4623      	mov	r3, r4
 800d9a8:	71fb      	strb	r3, [r7, #7]
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	80bb      	strh	r3, [r7, #4]
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	807b      	strh	r3, [r7, #2]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b1f      	cmp	r3, #31
 800d9be:	d802      	bhi.n	800d9c6 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	e002      	b.n	800d9cc <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d9c6:	7dfb      	ldrb	r3, [r7, #23]
 800d9c8:	3b20      	subs	r3, #32
 800d9ca:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	753b      	strb	r3, [r7, #20]
 800d9d0:	e012      	b.n	800d9f8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d9d2:	7dfa      	ldrb	r2, [r7, #23]
 800d9d4:	7d38      	ldrb	r0, [r7, #20]
 800d9d6:	7d39      	ldrb	r1, [r7, #20]
 800d9d8:	4c48      	ldr	r4, [pc, #288]	; (800dafc <ILI9341_Draw_Char+0x164>)
 800d9da:	4613      	mov	r3, r2
 800d9dc:	005b      	lsls	r3, r3, #1
 800d9de:	4413      	add	r3, r2
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	4423      	add	r3, r4
 800d9e4:	4403      	add	r3, r0
 800d9e6:	781a      	ldrb	r2, [r3, #0]
 800d9e8:	f107 0318 	add.w	r3, r7, #24
 800d9ec:	440b      	add	r3, r1
 800d9ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d9f2:	7d3b      	ldrb	r3, [r7, #20]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	753b      	strb	r3, [r7, #20]
 800d9f8:	7d3b      	ldrb	r3, [r7, #20]
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d9e9      	bls.n	800d9d2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d9fe:	2300      	movs	r3, #0
 800da00:	757b      	strb	r3, [r7, #21]
 800da02:	e074      	b.n	800daee <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800da04:	2300      	movs	r3, #0
 800da06:	75bb      	strb	r3, [r7, #22]
 800da08:	e06b      	b.n	800dae2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800da0a:	7d7b      	ldrb	r3, [r7, #21]
 800da0c:	f107 0218 	add.w	r2, r7, #24
 800da10:	4413      	add	r3, r2
 800da12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800da16:	461a      	mov	r2, r3
 800da18:	7dbb      	ldrb	r3, [r7, #22]
 800da1a:	fa42 f303 	asr.w	r3, r2, r3
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d02d      	beq.n	800da82 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800da26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d10e      	bne.n	800da4a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800da2c:	7d7b      	ldrb	r3, [r7, #21]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	88bb      	ldrh	r3, [r7, #4]
 800da32:	4413      	add	r3, r2
 800da34:	b298      	uxth	r0, r3
 800da36:	7dbb      	ldrb	r3, [r7, #22]
 800da38:	b29a      	uxth	r2, r3
 800da3a:	887b      	ldrh	r3, [r7, #2]
 800da3c:	4413      	add	r3, r2
 800da3e:	b29b      	uxth	r3, r3
 800da40:	883a      	ldrh	r2, [r7, #0]
 800da42:	4619      	mov	r1, r3
 800da44:	f000 fb06 	bl	800e054 <ILI9341_Draw_Pixel>
 800da48:	e048      	b.n	800dadc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800da4a:	7d7b      	ldrb	r3, [r7, #21]
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da50:	fb12 f303 	smulbb	r3, r2, r3
 800da54:	b29a      	uxth	r2, r3
 800da56:	88bb      	ldrh	r3, [r7, #4]
 800da58:	4413      	add	r3, r2
 800da5a:	b298      	uxth	r0, r3
 800da5c:	7dbb      	ldrb	r3, [r7, #22]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da62:	fb12 f303 	smulbb	r3, r2, r3
 800da66:	b29a      	uxth	r2, r3
 800da68:	887b      	ldrh	r3, [r7, #2]
 800da6a:	4413      	add	r3, r2
 800da6c:	b299      	uxth	r1, r3
 800da6e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800da70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da72:	2301      	movs	r3, #1
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	883b      	ldrh	r3, [r7, #0]
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	4623      	mov	r3, r4
 800da7c:	f000 fc44 	bl	800e308 <ILI9341_Draw_Rectangle>
 800da80:	e02c      	b.n	800dadc <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800da82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da84:	2b01      	cmp	r3, #1
 800da86:	d10e      	bne.n	800daa6 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800da88:	7d7b      	ldrb	r3, [r7, #21]
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	88bb      	ldrh	r3, [r7, #4]
 800da8e:	4413      	add	r3, r2
 800da90:	b298      	uxth	r0, r3
 800da92:	7dbb      	ldrb	r3, [r7, #22]
 800da94:	b29a      	uxth	r2, r3
 800da96:	887b      	ldrh	r3, [r7, #2]
 800da98:	4413      	add	r3, r2
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800da9e:	4619      	mov	r1, r3
 800daa0:	f000 fad8 	bl	800e054 <ILI9341_Draw_Pixel>
 800daa4:	e01a      	b.n	800dadc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800daa6:	7d7b      	ldrb	r3, [r7, #21]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800daac:	fb12 f303 	smulbb	r3, r2, r3
 800dab0:	b29a      	uxth	r2, r3
 800dab2:	88bb      	ldrh	r3, [r7, #4]
 800dab4:	4413      	add	r3, r2
 800dab6:	b298      	uxth	r0, r3
 800dab8:	7dbb      	ldrb	r3, [r7, #22]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dabe:	fb12 f303 	smulbb	r3, r2, r3
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	887b      	ldrh	r3, [r7, #2]
 800dac6:	4413      	add	r3, r2
 800dac8:	b299      	uxth	r1, r3
 800daca:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800dacc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dace:	2301      	movs	r3, #1
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	4623      	mov	r3, r4
 800dad8:	f000 fc16 	bl	800e308 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800dadc:	7dbb      	ldrb	r3, [r7, #22]
 800dade:	3301      	adds	r3, #1
 800dae0:	75bb      	strb	r3, [r7, #22]
 800dae2:	7dbb      	ldrb	r3, [r7, #22]
 800dae4:	2b07      	cmp	r3, #7
 800dae6:	d990      	bls.n	800da0a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800dae8:	7d7b      	ldrb	r3, [r7, #21]
 800daea:	3301      	adds	r3, #1
 800daec:	757b      	strb	r3, [r7, #21]
 800daee:	7d7b      	ldrb	r3, [r7, #21]
 800daf0:	2b05      	cmp	r3, #5
 800daf2:	d987      	bls.n	800da04 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800daf4:	bf00      	nop
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd90      	pop	{r4, r7, pc}
 800dafc:	08013668 	.word	0x08013668

0800db00 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800db00:	b590      	push	{r4, r7, lr}
 800db02:	b087      	sub	sp, #28
 800db04:	af02      	add	r7, sp, #8
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	4608      	mov	r0, r1
 800db0a:	4611      	mov	r1, r2
 800db0c:	461a      	mov	r2, r3
 800db0e:	4603      	mov	r3, r0
 800db10:	817b      	strh	r3, [r7, #10]
 800db12:	460b      	mov	r3, r1
 800db14:	813b      	strh	r3, [r7, #8]
 800db16:	4613      	mov	r3, r2
 800db18:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800db1a:	897b      	ldrh	r3, [r7, #10]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	b298      	uxth	r0, r3
 800db20:	8c3b      	ldrh	r3, [r7, #32]
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	b29a      	uxth	r2, r3
 800db26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db28:	8939      	ldrh	r1, [r7, #8]
 800db2a:	f000 f9b9 	bl	800dea0 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800db2e:	897b      	ldrh	r3, [r7, #10]
 800db30:	3b02      	subs	r3, #2
 800db32:	b298      	uxth	r0, r3
 800db34:	8c3b      	ldrh	r3, [r7, #32]
 800db36:	00db      	lsls	r3, r3, #3
 800db38:	b29a      	uxth	r2, r3
 800db3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db3c:	8939      	ldrh	r1, [r7, #8]
 800db3e:	f000 f9af 	bl	800dea0 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800db42:	e016      	b.n	800db72 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	60fa      	str	r2, [r7, #12]
 800db4a:	7818      	ldrb	r0, [r3, #0]
 800db4c:	88fc      	ldrh	r4, [r7, #6]
 800db4e:	893a      	ldrh	r2, [r7, #8]
 800db50:	8979      	ldrh	r1, [r7, #10]
 800db52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	8c3b      	ldrh	r3, [r7, #32]
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	4623      	mov	r3, r4
 800db5c:	f7ff ff1c 	bl	800d998 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800db60:	8c3b      	ldrh	r3, [r7, #32]
 800db62:	461a      	mov	r2, r3
 800db64:	0052      	lsls	r2, r2, #1
 800db66:	4413      	add	r3, r2
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	897b      	ldrh	r3, [r7, #10]
 800db6e:	4413      	add	r3, r2
 800db70:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1e4      	bne.n	800db44 <ILI9341_Draw_Text+0x44>
    }


}
 800db7a:	bf00      	nop
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}

0800db82 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800db86:	f000 fca3 	bl	800e4d0 <_LCD_Enable>
	ILI9341_SPI_Init();
 800db8a:	f000 f907 	bl	800dd9c <ILI9341_SPI_Init>
	_LCD_Reset();
 800db8e:	f000 fcaf 	bl	800e4f0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800db92:	2001      	movs	r0, #1
 800db94:	f000 fd7a 	bl	800e68c <_LCD_SendCommand>
	HAL_Delay(2000);
 800db98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800db9c:	f7fa fd88 	bl	80086b0 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800dba0:	20cb      	movs	r0, #203	; 0xcb
 800dba2:	f000 fd73 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800dba6:	2039      	movs	r0, #57	; 0x39
 800dba8:	f000 fda2 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800dbac:	202c      	movs	r0, #44	; 0x2c
 800dbae:	f000 fd9f 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f000 fd9c 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x34);
 800dbb8:	2034      	movs	r0, #52	; 0x34
 800dbba:	f000 fd99 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x02);
 800dbbe:	2002      	movs	r0, #2
 800dbc0:	f000 fd96 	bl	800e6f0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800dbc4:	20cf      	movs	r0, #207	; 0xcf
 800dbc6:	f000 fd61 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dbca:	2000      	movs	r0, #0
 800dbcc:	f000 fd90 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dbd0:	20c1      	movs	r0, #193	; 0xc1
 800dbd2:	f000 fd8d 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x30);
 800dbd6:	2030      	movs	r0, #48	; 0x30
 800dbd8:	f000 fd8a 	bl	800e6f0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800dbdc:	20e8      	movs	r0, #232	; 0xe8
 800dbde:	f000 fd55 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800dbe2:	2085      	movs	r0, #133	; 0x85
 800dbe4:	f000 fd84 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dbe8:	2000      	movs	r0, #0
 800dbea:	f000 fd81 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x78);
 800dbee:	2078      	movs	r0, #120	; 0x78
 800dbf0:	f000 fd7e 	bl	800e6f0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800dbf4:	20ea      	movs	r0, #234	; 0xea
 800dbf6:	f000 fd49 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	f000 fd78 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dc00:	2000      	movs	r0, #0
 800dc02:	f000 fd75 	bl	800e6f0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800dc06:	20ed      	movs	r0, #237	; 0xed
 800dc08:	f000 fd40 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800dc0c:	2064      	movs	r0, #100	; 0x64
 800dc0e:	f000 fd6f 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dc12:	2003      	movs	r0, #3
 800dc14:	f000 fd6c 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x12);
 800dc18:	2012      	movs	r0, #18
 800dc1a:	f000 fd69 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x81);
 800dc1e:	2081      	movs	r0, #129	; 0x81
 800dc20:	f000 fd66 	bl	800e6f0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800dc24:	20f7      	movs	r0, #247	; 0xf7
 800dc26:	f000 fd31 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800dc2a:	2020      	movs	r0, #32
 800dc2c:	f000 fd60 	bl	800e6f0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800dc30:	20c0      	movs	r0, #192	; 0xc0
 800dc32:	f000 fd2b 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800dc36:	2023      	movs	r0, #35	; 0x23
 800dc38:	f000 fd5a 	bl	800e6f0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800dc3c:	20c1      	movs	r0, #193	; 0xc1
 800dc3e:	f000 fd25 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800dc42:	2010      	movs	r0, #16
 800dc44:	f000 fd54 	bl	800e6f0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800dc48:	20c5      	movs	r0, #197	; 0xc5
 800dc4a:	f000 fd1f 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800dc4e:	203e      	movs	r0, #62	; 0x3e
 800dc50:	f000 fd4e 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x28);
 800dc54:	2028      	movs	r0, #40	; 0x28
 800dc56:	f000 fd4b 	bl	800e6f0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800dc5a:	20c7      	movs	r0, #199	; 0xc7
 800dc5c:	f000 fd16 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800dc60:	2086      	movs	r0, #134	; 0x86
 800dc62:	f000 fd45 	bl	800e6f0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800dc66:	2036      	movs	r0, #54	; 0x36
 800dc68:	f000 fd10 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800dc6c:	2048      	movs	r0, #72	; 0x48
 800dc6e:	f000 fd3f 	bl	800e6f0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800dc72:	203a      	movs	r0, #58	; 0x3a
 800dc74:	f000 fd0a 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800dc78:	2055      	movs	r0, #85	; 0x55
 800dc7a:	f000 fd39 	bl	800e6f0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800dc7e:	20b1      	movs	r0, #177	; 0xb1
 800dc80:	f000 fd04 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dc84:	2000      	movs	r0, #0
 800dc86:	f000 fd33 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x18);
 800dc8a:	2018      	movs	r0, #24
 800dc8c:	f000 fd30 	bl	800e6f0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800dc90:	20b6      	movs	r0, #182	; 0xb6
 800dc92:	f000 fcfb 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800dc96:	2008      	movs	r0, #8
 800dc98:	f000 fd2a 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x82);
 800dc9c:	2082      	movs	r0, #130	; 0x82
 800dc9e:	f000 fd27 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x27);
 800dca2:	2027      	movs	r0, #39	; 0x27
 800dca4:	f000 fd24 	bl	800e6f0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800dca8:	20f2      	movs	r0, #242	; 0xf2
 800dcaa:	f000 fcef 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dcae:	2000      	movs	r0, #0
 800dcb0:	f000 fd1e 	bl	800e6f0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800dcb4:	2026      	movs	r0, #38	; 0x26
 800dcb6:	f000 fce9 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800dcba:	2001      	movs	r0, #1
 800dcbc:	f000 fd18 	bl	800e6f0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800dcc0:	20e0      	movs	r0, #224	; 0xe0
 800dcc2:	f000 fce3 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800dcc6:	200f      	movs	r0, #15
 800dcc8:	f000 fd12 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dccc:	2031      	movs	r0, #49	; 0x31
 800dcce:	f000 fd0f 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800dcd2:	202b      	movs	r0, #43	; 0x2b
 800dcd4:	f000 fd0c 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dcd8:	200c      	movs	r0, #12
 800dcda:	f000 fd09 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dcde:	200e      	movs	r0, #14
 800dce0:	f000 fd06 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800dce4:	2008      	movs	r0, #8
 800dce6:	f000 fd03 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800dcea:	204e      	movs	r0, #78	; 0x4e
 800dcec:	f000 fd00 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800dcf0:	20f1      	movs	r0, #241	; 0xf1
 800dcf2:	f000 fcfd 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x37);
 800dcf6:	2037      	movs	r0, #55	; 0x37
 800dcf8:	f000 fcfa 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800dcfc:	2007      	movs	r0, #7
 800dcfe:	f000 fcf7 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x10);
 800dd02:	2010      	movs	r0, #16
 800dd04:	f000 fcf4 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dd08:	2003      	movs	r0, #3
 800dd0a:	f000 fcf1 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dd0e:	200e      	movs	r0, #14
 800dd10:	f000 fcee 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x09);
 800dd14:	2009      	movs	r0, #9
 800dd16:	f000 fceb 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	f000 fce8 	bl	800e6f0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800dd20:	20e1      	movs	r0, #225	; 0xe1
 800dd22:	f000 fcb3 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dd26:	2000      	movs	r0, #0
 800dd28:	f000 fce2 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800dd2c:	200e      	movs	r0, #14
 800dd2e:	f000 fcdf 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x14);
 800dd32:	2014      	movs	r0, #20
 800dd34:	f000 fcdc 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dd38:	2003      	movs	r0, #3
 800dd3a:	f000 fcd9 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x11);
 800dd3e:	2011      	movs	r0, #17
 800dd40:	f000 fcd6 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800dd44:	2007      	movs	r0, #7
 800dd46:	f000 fcd3 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dd4a:	2031      	movs	r0, #49	; 0x31
 800dd4c:	f000 fcd0 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dd50:	20c1      	movs	r0, #193	; 0xc1
 800dd52:	f000 fccd 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x48);
 800dd56:	2048      	movs	r0, #72	; 0x48
 800dd58:	f000 fcca 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800dd5c:	2008      	movs	r0, #8
 800dd5e:	f000 fcc7 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dd62:	200f      	movs	r0, #15
 800dd64:	f000 fcc4 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800dd68:	200c      	movs	r0, #12
 800dd6a:	f000 fcc1 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800dd6e:	2031      	movs	r0, #49	; 0x31
 800dd70:	f000 fcbe 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x36);
 800dd74:	2036      	movs	r0, #54	; 0x36
 800dd76:	f000 fcbb 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800dd7a:	200f      	movs	r0, #15
 800dd7c:	f000 fcb8 	bl	800e6f0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800dd80:	2011      	movs	r0, #17
 800dd82:	f000 fc83 	bl	800e68c <_LCD_SendCommand>
	HAL_Delay(240);
 800dd86:	20f0      	movs	r0, #240	; 0xf0
 800dd88:	f7fa fc92 	bl	80086b0 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800dd8c:	2029      	movs	r0, #41	; 0x29
 800dd8e:	f000 fc7d 	bl	800e68c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800dd92:	2000      	movs	r0, #0
 800dd94:	f000 fb4e 	bl	800e434 <ILI9341_Set_Rotation>
}
 800dd98:	bf00      	nop
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dda0:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <ILI9341_SPI_Init+0x34>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	d005      	beq.n	800ddb8 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800ddac:	4b08      	ldr	r3, [pc, #32]	; (800ddd0 <ILI9341_SPI_Init+0x34>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a07      	ldr	r2, [pc, #28]	; (800ddd0 <ILI9341_SPI_Init+0x34>)
 800ddb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddb6:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ddb8:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <ILI9341_SPI_Init+0x38>)
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	4a05      	ldr	r2, [pc, #20]	; (800ddd4 <ILI9341_SPI_Init+0x38>)
 800ddbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddc2:	6153      	str	r3, [r2, #20]
}
 800ddc4:	bf00      	nop
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	40003c00 	.word	0x40003c00
 800ddd4:	48000400 	.word	0x48000400

0800ddd8 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800ddd8:	b590      	push	{r4, r7, lr}
 800ddda:	b087      	sub	sp, #28
 800dddc:	af02      	add	r7, sp, #8
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
 800dde2:	4611      	mov	r1, r2
 800dde4:	461a      	mov	r2, r3
 800dde6:	4623      	mov	r3, r4
 800dde8:	80fb      	strh	r3, [r7, #6]
 800ddea:	4603      	mov	r3, r0
 800ddec:	80bb      	strh	r3, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	807b      	strh	r3, [r7, #2]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ddf6:	4b28      	ldr	r3, [pc, #160]	; (800de98 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	88fa      	ldrh	r2, [r7, #6]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d246      	bcs.n	800de90 <ILI9341_Draw_Horizontal_Line+0xb8>
 800de02:	4b26      	ldr	r3, [pc, #152]	; (800de9c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	b29b      	uxth	r3, r3
 800de08:	88ba      	ldrh	r2, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d240      	bcs.n	800de90 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800de0e:	88fa      	ldrh	r2, [r7, #6]
 800de10:	887b      	ldrh	r3, [r7, #2]
 800de12:	4413      	add	r3, r2
 800de14:	3b01      	subs	r3, #1
 800de16:	4a20      	ldr	r2, [pc, #128]	; (800de98 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800de18:	8812      	ldrh	r2, [r2, #0]
 800de1a:	b292      	uxth	r2, r2
 800de1c:	4293      	cmp	r3, r2
 800de1e:	db05      	blt.n	800de2c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800de20:	4b1d      	ldr	r3, [pc, #116]	; (800de98 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	b29a      	uxth	r2, r3
 800de26:	88fb      	ldrh	r3, [r7, #6]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800de2c:	88fa      	ldrh	r2, [r7, #6]
 800de2e:	887b      	ldrh	r3, [r7, #2]
 800de30:	4413      	add	r3, r2
 800de32:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800de34:	3b01      	subs	r3, #1
 800de36:	b29a      	uxth	r2, r3
 800de38:	88bb      	ldrh	r3, [r7, #4]
 800de3a:	88b9      	ldrh	r1, [r7, #4]
 800de3c:	88f8      	ldrh	r0, [r7, #6]
 800de3e:	f000 f893 	bl	800df68 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800de46:	887b      	ldrh	r3, [r7, #2]
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d009      	beq.n	800de64 <ILI9341_Draw_Horizontal_Line+0x8c>
 800de50:	887b      	ldrh	r3, [r7, #2]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d906      	bls.n	800de64 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800de56:	2301      	movs	r3, #1
 800de58:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800de5a:	887b      	ldrh	r3, [r7, #2]
 800de5c:	085b      	lsrs	r3, r3, #1
 800de5e:	b29b      	uxth	r3, r3
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800de64:	887c      	ldrh	r4, [r7, #2]
 800de66:	883a      	ldrh	r2, [r7, #0]
 800de68:	88b9      	ldrh	r1, [r7, #4]
 800de6a:	88f8      	ldrh	r0, [r7, #6]
 800de6c:	2303      	movs	r3, #3
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	4623      	mov	r3, r4
 800de72:	f000 fb5b 	bl	800e52c <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00a      	beq.n	800de92 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800de7c:	88fa      	ldrh	r2, [r7, #6]
 800de7e:	887b      	ldrh	r3, [r7, #2]
 800de80:	4413      	add	r3, r2
 800de82:	b29b      	uxth	r3, r3
 800de84:	883a      	ldrh	r2, [r7, #0]
 800de86:	88b9      	ldrh	r1, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f8e3 	bl	800e054 <ILI9341_Draw_Pixel>
 800de8e:	e000      	b.n	800de92 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800de90:	bf00      	nop
							(ypos),
							colour);
	}


}
 800de92:	3714      	adds	r7, #20
 800de94:	46bd      	mov	sp, r7
 800de96:	bd90      	pop	{r4, r7, pc}
 800de98:	20000cae 	.word	0x20000cae
 800de9c:	20000cac 	.word	0x20000cac

0800dea0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af02      	add	r7, sp, #8
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	4611      	mov	r1, r2
 800deac:	461a      	mov	r2, r3
 800deae:	4623      	mov	r3, r4
 800deb0:	80fb      	strh	r3, [r7, #6]
 800deb2:	4603      	mov	r3, r0
 800deb4:	80bb      	strh	r3, [r7, #4]
 800deb6:	460b      	mov	r3, r1
 800deb8:	807b      	strh	r3, [r7, #2]
 800deba:	4613      	mov	r3, r2
 800debc:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800debe:	4b28      	ldr	r3, [pc, #160]	; (800df60 <ILI9341_Draw_Vertical_Line+0xc0>)
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	88fa      	ldrh	r2, [r7, #6]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d246      	bcs.n	800df58 <ILI9341_Draw_Vertical_Line+0xb8>
 800deca:	4b26      	ldr	r3, [pc, #152]	; (800df64 <ILI9341_Draw_Vertical_Line+0xc4>)
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	88ba      	ldrh	r2, [r7, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d240      	bcs.n	800df58 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800ded6:	88ba      	ldrh	r2, [r7, #4]
 800ded8:	887b      	ldrh	r3, [r7, #2]
 800deda:	4413      	add	r3, r2
 800dedc:	3b01      	subs	r3, #1
 800dede:	4a21      	ldr	r2, [pc, #132]	; (800df64 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dee0:	8812      	ldrh	r2, [r2, #0]
 800dee2:	b292      	uxth	r2, r2
 800dee4:	4293      	cmp	r3, r2
 800dee6:	db05      	blt.n	800def4 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800dee8:	4b1e      	ldr	r3, [pc, #120]	; (800df64 <ILI9341_Draw_Vertical_Line+0xc4>)
 800deea:	881b      	ldrh	r3, [r3, #0]
 800deec:	b29a      	uxth	r2, r3
 800deee:	88bb      	ldrh	r3, [r7, #4]
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800def4:	88ba      	ldrh	r2, [r7, #4]
 800def6:	887b      	ldrh	r3, [r7, #2]
 800def8:	4413      	add	r3, r2
 800defa:	b29b      	uxth	r3, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	b29b      	uxth	r3, r3
 800df00:	88fa      	ldrh	r2, [r7, #6]
 800df02:	88b9      	ldrh	r1, [r7, #4]
 800df04:	88f8      	ldrh	r0, [r7, #6]
 800df06:	f000 f82f 	bl	800df68 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800df0e:	887b      	ldrh	r3, [r7, #2]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d009      	beq.n	800df2c <ILI9341_Draw_Vertical_Line+0x8c>
 800df18:	887b      	ldrh	r3, [r7, #2]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d906      	bls.n	800df2c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800df1e:	2301      	movs	r3, #1
 800df20:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800df22:	887b      	ldrh	r3, [r7, #2]
 800df24:	085b      	lsrs	r3, r3, #1
 800df26:	b29b      	uxth	r3, r3
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d008      	beq.n	800df44 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800df32:	88ba      	ldrh	r2, [r7, #4]
 800df34:	887b      	ldrh	r3, [r7, #2]
 800df36:	4413      	add	r3, r2
 800df38:	b299      	uxth	r1, r3
 800df3a:	883a      	ldrh	r2, [r7, #0]
 800df3c:	88fb      	ldrh	r3, [r7, #6]
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f888 	bl	800e054 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800df44:	887c      	ldrh	r4, [r7, #2]
 800df46:	883a      	ldrh	r2, [r7, #0]
 800df48:	88b9      	ldrh	r1, [r7, #4]
 800df4a:	88f8      	ldrh	r0, [r7, #6]
 800df4c:	2303      	movs	r3, #3
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	4623      	mov	r3, r4
 800df52:	f000 faeb 	bl	800e52c <_LCD_Write_Frame>
 800df56:	e000      	b.n	800df5a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800df58:	bf00      	nop
}
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd90      	pop	{r4, r7, pc}
 800df60:	20000cae 	.word	0x20000cae
 800df64:	20000cac 	.word	0x20000cac

0800df68 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4604      	mov	r4, r0
 800df70:	4608      	mov	r0, r1
 800df72:	4611      	mov	r1, r2
 800df74:	461a      	mov	r2, r3
 800df76:	4623      	mov	r3, r4
 800df78:	80fb      	strh	r3, [r7, #6]
 800df7a:	4603      	mov	r3, r0
 800df7c:	80bb      	strh	r3, [r7, #4]
 800df7e:	460b      	mov	r3, r1
 800df80:	807b      	strh	r3, [r7, #2]
 800df82:	4613      	mov	r3, r2
 800df84:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800df86:	202a      	movs	r0, #42	; 0x2a
 800df88:	f000 fb80 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800df8c:	88fb      	ldrh	r3, [r7, #6]
 800df8e:	0a1b      	lsrs	r3, r3, #8
 800df90:	b29b      	uxth	r3, r3
 800df92:	b2db      	uxtb	r3, r3
 800df94:	4618      	mov	r0, r3
 800df96:	f000 fbab 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(sc);
 800df9a:	88fb      	ldrh	r3, [r7, #6]
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 fba6 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800dfa4:	887b      	ldrh	r3, [r7, #2]
 800dfa6:	0a1b      	lsrs	r3, r3, #8
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	4618      	mov	r0, r3
 800dfae:	f000 fb9f 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(ec);
 800dfb2:	887b      	ldrh	r3, [r7, #2]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 fb9a 	bl	800e6f0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800dfbc:	202b      	movs	r0, #43	; 0x2b
 800dfbe:	f000 fb65 	bl	800e68c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800dfc2:	88bb      	ldrh	r3, [r7, #4]
 800dfc4:	0a1b      	lsrs	r3, r3, #8
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fb90 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(sp);
 800dfd0:	88bb      	ldrh	r3, [r7, #4]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 fb8b 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800dfda:	883b      	ldrh	r3, [r7, #0]
 800dfdc:	0a1b      	lsrs	r3, r3, #8
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 fb84 	bl	800e6f0 <_LCD_SendData>
	_LCD_SendData(ep);
 800dfe8:	883b      	ldrh	r3, [r7, #0]
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fb7f 	bl	800e6f0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800dff2:	202c      	movs	r0, #44	; 0x2c
 800dff4:	f000 fb4a 	bl	800e68c <_LCD_SendCommand>
}
 800dff8:	bf00      	nop
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd90      	pop	{r4, r7, pc}

0800e000 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af02      	add	r7, sp, #8
 800e006:	4603      	mov	r3, r0
 800e008:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e00a:	4b10      	ldr	r3, [pc, #64]	; (800e04c <ILI9341_Fill_Screen+0x4c>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b29a      	uxth	r2, r3
 800e010:	4b0f      	ldr	r3, [pc, #60]	; (800e050 <ILI9341_Fill_Screen+0x50>)
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	b29b      	uxth	r3, r3
 800e016:	2100      	movs	r1, #0
 800e018:	2000      	movs	r0, #0
 800e01a:	f7ff ffa5 	bl	800df68 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e01e:	4b0b      	ldr	r3, [pc, #44]	; (800e04c <ILI9341_Fill_Screen+0x4c>)
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	b29b      	uxth	r3, r3
 800e024:	461a      	mov	r2, r3
 800e026:	4b0a      	ldr	r3, [pc, #40]	; (800e050 <ILI9341_Fill_Screen+0x50>)
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	fb03 f302 	mul.w	r3, r3, r2
 800e030:	4619      	mov	r1, r3
 800e032:	88fa      	ldrh	r2, [r7, #6]
 800e034:	2304      	movs	r3, #4
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	460b      	mov	r3, r1
 800e03a:	2100      	movs	r1, #0
 800e03c:	2000      	movs	r0, #0
 800e03e:	f000 fa75 	bl	800e52c <_LCD_Write_Frame>
}
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	20000cae 	.word	0x20000cae
 800e050:	20000cac 	.word	0x20000cac

0800e054 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08e      	sub	sp, #56	; 0x38
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	80fb      	strh	r3, [r7, #6]
 800e05e:	460b      	mov	r3, r1
 800e060:	80bb      	strh	r3, [r7, #4]
 800e062:	4613      	mov	r3, r2
 800e064:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e066:	4b98      	ldr	r3, [pc, #608]	; (800e2c8 <ILI9341_Draw_Pixel+0x274>)
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	88fa      	ldrh	r2, [r7, #6]
 800e06e:	429a      	cmp	r2, r3
 800e070:	f080 8143 	bcs.w	800e2fa <ILI9341_Draw_Pixel+0x2a6>
 800e074:	4b95      	ldr	r3, [pc, #596]	; (800e2cc <ILI9341_Draw_Pixel+0x278>)
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	88ba      	ldrh	r2, [r7, #4]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	f080 813c 	bcs.w	800e2fa <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e082:	4b93      	ldr	r3, [pc, #588]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	4a92      	ldr	r2, [pc, #584]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e08c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e08e:	4b90      	ldr	r3, [pc, #576]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	4a8f      	ldr	r2, [pc, #572]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e098:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e09a:	220a      	movs	r2, #10
 800e09c:	2100      	movs	r1, #0
 800e09e:	202a      	movs	r0, #42	; 0x2a
 800e0a0:	f000 fb58 	bl	800e754 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e0a8:	e008      	b.n	800e0bc <ILI9341_Draw_Pixel+0x68>
 800e0aa:	4b89      	ldr	r3, [pc, #548]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0ac:	695b      	ldr	r3, [r3, #20]
 800e0ae:	4a88      	ldr	r2, [pc, #544]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0b4:	6153      	str	r3, [r2, #20]
 800e0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800e0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	ddf3      	ble.n	800e0aa <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e0c2:	4b83      	ldr	r3, [pc, #524]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	4a82      	ldr	r2, [pc, #520]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0cc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e0ce:	4b80      	ldr	r3, [pc, #512]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	4a7f      	ldr	r2, [pc, #508]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e0da:	4b7d      	ldr	r3, [pc, #500]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	4a7c      	ldr	r2, [pc, #496]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e0e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0e4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e0e6:	88fb      	ldrh	r3, [r7, #6]
 800e0e8:	0a1b      	lsrs	r3, r3, #8
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	753b      	strb	r3, [r7, #20]
 800e0f0:	88fb      	ldrh	r3, [r7, #6]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	757b      	strb	r3, [r7, #21]
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	121b      	asrs	r3, r3, #8
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	75bb      	strb	r3, [r7, #22]
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	3301      	adds	r3, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e10a:	f107 0014 	add.w	r0, r7, #20
 800e10e:	230a      	movs	r3, #10
 800e110:	2200      	movs	r2, #0
 800e112:	2104      	movs	r1, #4
 800e114:	f000 fb50 	bl	800e7b8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e118:	2300      	movs	r3, #0
 800e11a:	633b      	str	r3, [r7, #48]	; 0x30
 800e11c:	e008      	b.n	800e130 <ILI9341_Draw_Pixel+0xdc>
 800e11e:	4b6c      	ldr	r3, [pc, #432]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	4a6b      	ldr	r2, [pc, #428]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e128:	6153      	str	r3, [r2, #20]
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	3301      	adds	r3, #1
 800e12e:	633b      	str	r3, [r7, #48]	; 0x30
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	2b02      	cmp	r3, #2
 800e134:	ddf3      	ble.n	800e11e <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e136:	4b66      	ldr	r3, [pc, #408]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	4a65      	ldr	r2, [pc, #404]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e140:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e142:	4b63      	ldr	r3, [pc, #396]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	4a62      	ldr	r2, [pc, #392]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e14c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e14e:	4b60      	ldr	r3, [pc, #384]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	4a5f      	ldr	r2, [pc, #380]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e158:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e15a:	220a      	movs	r2, #10
 800e15c:	2100      	movs	r1, #0
 800e15e:	202b      	movs	r0, #43	; 0x2b
 800e160:	f000 faf8 	bl	800e754 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e164:	2300      	movs	r3, #0
 800e166:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e168:	e008      	b.n	800e17c <ILI9341_Draw_Pixel+0x128>
 800e16a:	4b59      	ldr	r3, [pc, #356]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	4a58      	ldr	r2, [pc, #352]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e174:	6153      	str	r3, [r2, #20]
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	3301      	adds	r3, #1
 800e17a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	2b02      	cmp	r3, #2
 800e180:	ddf3      	ble.n	800e16a <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e182:	4b53      	ldr	r3, [pc, #332]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	4a52      	ldr	r2, [pc, #328]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e18c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e18e:	4b50      	ldr	r3, [pc, #320]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e190:	695b      	ldr	r3, [r3, #20]
 800e192:	4a4f      	ldr	r2, [pc, #316]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e198:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e19a:	4b4d      	ldr	r3, [pc, #308]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	4a4c      	ldr	r2, [pc, #304]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e1a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e1a6:	88bb      	ldrh	r3, [r7, #4]
 800e1a8:	0a1b      	lsrs	r3, r3, #8
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	743b      	strb	r3, [r7, #16]
 800e1b0:	88bb      	ldrh	r3, [r7, #4]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	747b      	strb	r3, [r7, #17]
 800e1b6:	88bb      	ldrh	r3, [r7, #4]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	121b      	asrs	r3, r3, #8
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	74bb      	strb	r3, [r7, #18]
 800e1c0:	88bb      	ldrh	r3, [r7, #4]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e1ca:	f107 0010 	add.w	r0, r7, #16
 800e1ce:	230a      	movs	r3, #10
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2104      	movs	r1, #4
 800e1d4:	f000 faf0 	bl	800e7b8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1d8:	2300      	movs	r3, #0
 800e1da:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1dc:	e008      	b.n	800e1f0 <ILI9341_Draw_Pixel+0x19c>
 800e1de:	4b3c      	ldr	r3, [pc, #240]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e1e0:	695b      	ldr	r3, [r3, #20]
 800e1e2:	4a3b      	ldr	r2, [pc, #236]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e1e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1e8:	6153      	str	r3, [r2, #20]
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	ddf3      	ble.n	800e1de <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e1f6:	4b36      	ldr	r3, [pc, #216]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	4a35      	ldr	r2, [pc, #212]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e200:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e202:	4b33      	ldr	r3, [pc, #204]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	4a32      	ldr	r2, [pc, #200]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e20c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e20e:	4b30      	ldr	r3, [pc, #192]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	4a2f      	ldr	r2, [pc, #188]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e218:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e21a:	220a      	movs	r2, #10
 800e21c:	2100      	movs	r1, #0
 800e21e:	202c      	movs	r0, #44	; 0x2c
 800e220:	f000 fa98 	bl	800e754 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e224:	2300      	movs	r3, #0
 800e226:	627b      	str	r3, [r7, #36]	; 0x24
 800e228:	e008      	b.n	800e23c <ILI9341_Draw_Pixel+0x1e8>
 800e22a:	4b29      	ldr	r3, [pc, #164]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	4a28      	ldr	r2, [pc, #160]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e234:	6153      	str	r3, [r2, #20]
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	3301      	adds	r3, #1
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	2b02      	cmp	r3, #2
 800e240:	ddf3      	ble.n	800e22a <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e242:	4b23      	ldr	r3, [pc, #140]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	4a22      	ldr	r2, [pc, #136]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e24c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e24e:	4b20      	ldr	r3, [pc, #128]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	4a1f      	ldr	r2, [pc, #124]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e258:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e25a:	4b1d      	ldr	r3, [pc, #116]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	4a1c      	ldr	r2, [pc, #112]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e264:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e266:	887b      	ldrh	r3, [r7, #2]
 800e268:	0a1b      	lsrs	r3, r3, #8
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	733b      	strb	r3, [r7, #12]
 800e270:	887b      	ldrh	r3, [r7, #2]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e276:	f107 000c 	add.w	r0, r7, #12
 800e27a:	2301      	movs	r3, #1
 800e27c:	2200      	movs	r2, #0
 800e27e:	2102      	movs	r1, #2
 800e280:	f000 fa9a 	bl	800e7b8 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e284:	2300      	movs	r3, #0
 800e286:	623b      	str	r3, [r7, #32]
 800e288:	e008      	b.n	800e29c <ILI9341_Draw_Pixel+0x248>
 800e28a:	4b11      	ldr	r3, [pc, #68]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	4a10      	ldr	r2, [pc, #64]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e294:	6153      	str	r3, [r2, #20]
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	3301      	adds	r3, #1
 800e29a:	623b      	str	r3, [r7, #32]
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	ddf3      	ble.n	800e28a <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61fb      	str	r3, [r7, #28]
 800e2a6:	e008      	b.n	800e2ba <ILI9341_Draw_Pixel+0x266>
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e2aa:	695b      	ldr	r3, [r3, #20]
 800e2ac:	4a08      	ldr	r2, [pc, #32]	; (800e2d0 <ILI9341_Draw_Pixel+0x27c>)
 800e2ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2b2:	6153      	str	r3, [r2, #20]
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	61fb      	str	r3, [r7, #28]
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	ddf3      	ble.n	800e2a8 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61bb      	str	r3, [r7, #24]
 800e2c4:	e00f      	b.n	800e2e6 <ILI9341_Draw_Pixel+0x292>
 800e2c6:	bf00      	nop
 800e2c8:	20000cae 	.word	0x20000cae
 800e2cc:	20000cac 	.word	0x20000cac
 800e2d0:	48000400 	.word	0x48000400
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <ILI9341_Draw_Pixel+0x2b0>)
 800e2d6:	695b      	ldr	r3, [r3, #20]
 800e2d8:	4a0a      	ldr	r2, [pc, #40]	; (800e304 <ILI9341_Draw_Pixel+0x2b0>)
 800e2da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2de:	6153      	str	r3, [r2, #20]
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	61bb      	str	r3, [r7, #24]
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	ddf3      	ble.n	800e2d4 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e2ec:	4b05      	ldr	r3, [pc, #20]	; (800e304 <ILI9341_Draw_Pixel+0x2b0>)
 800e2ee:	695b      	ldr	r3, [r3, #20]
 800e2f0:	4a04      	ldr	r2, [pc, #16]	; (800e304 <ILI9341_Draw_Pixel+0x2b0>)
 800e2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f6:	6153      	str	r3, [r2, #20]
 800e2f8:	e000      	b.n	800e2fc <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e2fa:	bf00      	nop


}
 800e2fc:	3738      	adds	r7, #56	; 0x38
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	48000400 	.word	0x48000400

0800e308 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e308:	b590      	push	{r4, r7, lr}
 800e30a:	b087      	sub	sp, #28
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	4611      	mov	r1, r2
 800e314:	461a      	mov	r2, r3
 800e316:	4623      	mov	r3, r4
 800e318:	80fb      	strh	r3, [r7, #6]
 800e31a:	4603      	mov	r3, r0
 800e31c:	80bb      	strh	r3, [r7, #4]
 800e31e:	460b      	mov	r3, r1
 800e320:	807b      	strh	r3, [r7, #2]
 800e322:	4613      	mov	r3, r2
 800e324:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e326:	4b41      	ldr	r3, [pc, #260]	; (800e42c <ILI9341_Draw_Rectangle+0x124>)
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	88fa      	ldrh	r2, [r7, #6]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d278      	bcs.n	800e424 <ILI9341_Draw_Rectangle+0x11c>
 800e332:	4b3f      	ldr	r3, [pc, #252]	; (800e430 <ILI9341_Draw_Rectangle+0x128>)
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	b29b      	uxth	r3, r3
 800e338:	88ba      	ldrh	r2, [r7, #4]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d272      	bcs.n	800e424 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e33e:	88fa      	ldrh	r2, [r7, #6]
 800e340:	887b      	ldrh	r3, [r7, #2]
 800e342:	4413      	add	r3, r2
 800e344:	3b01      	subs	r3, #1
 800e346:	4a39      	ldr	r2, [pc, #228]	; (800e42c <ILI9341_Draw_Rectangle+0x124>)
 800e348:	8812      	ldrh	r2, [r2, #0]
 800e34a:	b292      	uxth	r2, r2
 800e34c:	4293      	cmp	r3, r2
 800e34e:	db05      	blt.n	800e35c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e350:	4b36      	ldr	r3, [pc, #216]	; (800e42c <ILI9341_Draw_Rectangle+0x124>)
 800e352:	881b      	ldrh	r3, [r3, #0]
 800e354:	b29a      	uxth	r2, r3
 800e356:	88fb      	ldrh	r3, [r7, #6]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e35c:	88ba      	ldrh	r2, [r7, #4]
 800e35e:	883b      	ldrh	r3, [r7, #0]
 800e360:	4413      	add	r3, r2
 800e362:	3b01      	subs	r3, #1
 800e364:	4a32      	ldr	r2, [pc, #200]	; (800e430 <ILI9341_Draw_Rectangle+0x128>)
 800e366:	8812      	ldrh	r2, [r2, #0]
 800e368:	b292      	uxth	r2, r2
 800e36a:	4293      	cmp	r3, r2
 800e36c:	db05      	blt.n	800e37a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e36e:	4b30      	ldr	r3, [pc, #192]	; (800e430 <ILI9341_Draw_Rectangle+0x128>)
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	b29a      	uxth	r2, r3
 800e374:	88bb      	ldrh	r3, [r7, #4]
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e37a:	88fa      	ldrh	r2, [r7, #6]
 800e37c:	887b      	ldrh	r3, [r7, #2]
 800e37e:	4413      	add	r3, r2
 800e380:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e382:	3b01      	subs	r3, #1
 800e384:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e386:	88ba      	ldrh	r2, [r7, #4]
 800e388:	883b      	ldrh	r3, [r7, #0]
 800e38a:	4413      	add	r3, r2
 800e38c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e38e:	3b01      	subs	r3, #1
 800e390:	b29b      	uxth	r3, r3
 800e392:	88b9      	ldrh	r1, [r7, #4]
 800e394:	88f8      	ldrh	r0, [r7, #6]
 800e396:	4622      	mov	r2, r4
 800e398:	f7ff fde6 	bl	800df68 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e39c:	883a      	ldrh	r2, [r7, #0]
 800e39e:	887b      	ldrh	r3, [r7, #2]
 800e3a0:	fb12 f303 	smulbb	r3, r2, r3
 800e3a4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e3aa:	89fb      	ldrh	r3, [r7, #14]
 800e3ac:	f003 0301 	and.w	r3, r3, #1
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d009      	beq.n	800e3c8 <ILI9341_Draw_Rectangle+0xc0>
 800e3b4:	89fb      	ldrh	r3, [r7, #14]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d906      	bls.n	800e3c8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e3be:	89fb      	ldrh	r3, [r7, #14]
 800e3c0:	085b      	lsrs	r3, r3, #1
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e3c8:	89fc      	ldrh	r4, [r7, #14]
 800e3ca:	8c3a      	ldrh	r2, [r7, #32]
 800e3cc:	88b9      	ldrh	r1, [r7, #4]
 800e3ce:	88f8      	ldrh	r0, [r7, #6]
 800e3d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	4623      	mov	r3, r4
 800e3d8:	f000 f8a8 	bl	800e52c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e3dc:	7b7b      	ldrb	r3, [r7, #13]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d021      	beq.n	800e426 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e3e2:	88fa      	ldrh	r2, [r7, #6]
 800e3e4:	887b      	ldrh	r3, [r7, #2]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3b02      	subs	r3, #2
 800e3ec:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e3ee:	88ba      	ldrh	r2, [r7, #4]
 800e3f0:	883b      	ldrh	r3, [r7, #0]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	8c3a      	ldrh	r2, [r7, #32]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	f7ff fe29 	bl	800e054 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e402:	88fa      	ldrh	r2, [r7, #6]
 800e404:	887b      	ldrh	r3, [r7, #2]
 800e406:	4413      	add	r3, r2
 800e408:	b29b      	uxth	r3, r3
 800e40a:	3b01      	subs	r3, #1
 800e40c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e40e:	88ba      	ldrh	r2, [r7, #4]
 800e410:	883b      	ldrh	r3, [r7, #0]
 800e412:	4413      	add	r3, r2
 800e414:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e416:	3b01      	subs	r3, #1
 800e418:	b29b      	uxth	r3, r3
 800e41a:	8c3a      	ldrh	r2, [r7, #32]
 800e41c:	4619      	mov	r1, r3
 800e41e:	f7ff fe19 	bl	800e054 <ILI9341_Draw_Pixel>
 800e422:	e000      	b.n	800e426 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e424:	bf00      	nop
							colour);
	}
}
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd90      	pop	{r4, r7, pc}
 800e42c:	20000cae 	.word	0x20000cae
 800e430:	20000cac 	.word	0x20000cac

0800e434 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e442:	2036      	movs	r0, #54	; 0x36
 800e444:	f000 f922 	bl	800e68c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d836      	bhi.n	800e4bc <ILI9341_Set_Rotation+0x88>
 800e44e:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <ILI9341_Set_Rotation+0x20>)
 800e450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e454:	0800e465 	.word	0x0800e465
 800e458:	0800e47b 	.word	0x0800e47b
 800e45c:	0800e491 	.word	0x0800e491
 800e460:	0800e4a7 	.word	0x0800e4a7
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e464:	2048      	movs	r0, #72	; 0x48
 800e466:	f000 f943 	bl	800e6f0 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e46a:	4b17      	ldr	r3, [pc, #92]	; (800e4c8 <ILI9341_Set_Rotation+0x94>)
 800e46c:	22f0      	movs	r2, #240	; 0xf0
 800e46e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e470:	4b16      	ldr	r3, [pc, #88]	; (800e4cc <ILI9341_Set_Rotation+0x98>)
 800e472:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e476:	801a      	strh	r2, [r3, #0]
			break;
 800e478:	e021      	b.n	800e4be <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e47a:	2028      	movs	r0, #40	; 0x28
 800e47c:	f000 f938 	bl	800e6f0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e480:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <ILI9341_Set_Rotation+0x94>)
 800e482:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e486:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e488:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <ILI9341_Set_Rotation+0x98>)
 800e48a:	22f0      	movs	r2, #240	; 0xf0
 800e48c:	801a      	strh	r2, [r3, #0]
			break;
 800e48e:	e016      	b.n	800e4be <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e490:	2088      	movs	r0, #136	; 0x88
 800e492:	f000 f92d 	bl	800e6f0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e496:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <ILI9341_Set_Rotation+0x94>)
 800e498:	22f0      	movs	r2, #240	; 0xf0
 800e49a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e49c:	4b0b      	ldr	r3, [pc, #44]	; (800e4cc <ILI9341_Set_Rotation+0x98>)
 800e49e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e4a2:	801a      	strh	r2, [r3, #0]
			break;
 800e4a4:	e00b      	b.n	800e4be <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e4a6:	20e8      	movs	r0, #232	; 0xe8
 800e4a8:	f000 f922 	bl	800e6f0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e4ac:	4b06      	ldr	r3, [pc, #24]	; (800e4c8 <ILI9341_Set_Rotation+0x94>)
 800e4ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e4b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <ILI9341_Set_Rotation+0x98>)
 800e4b6:	22f0      	movs	r2, #240	; 0xf0
 800e4b8:	801a      	strh	r2, [r3, #0]
			break;
 800e4ba:	e000      	b.n	800e4be <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e4bc:	bf00      	nop
	}
}
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20000cae 	.word	0x20000cae
 800e4cc:	20000cac 	.word	0x20000cac

0800e4d0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e4d4:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <_LCD_Enable+0x1c>)
 800e4d6:	695b      	ldr	r3, [r3, #20]
 800e4d8:	4a04      	ldr	r2, [pc, #16]	; (800e4ec <_LCD_Enable+0x1c>)
 800e4da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4de:	6153      	str	r3, [r2, #20]
}
 800e4e0:	bf00      	nop
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	48000400 	.word	0x48000400

0800e4f0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e4f4:	4b0c      	ldr	r3, [pc, #48]	; (800e528 <_LCD_Reset+0x38>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	4a0b      	ldr	r2, [pc, #44]	; (800e528 <_LCD_Reset+0x38>)
 800e4fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4fe:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e500:	20c8      	movs	r0, #200	; 0xc8
 800e502:	f7fa f8d5 	bl	80086b0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e506:	4b08      	ldr	r3, [pc, #32]	; (800e528 <_LCD_Reset+0x38>)
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	4a07      	ldr	r2, [pc, #28]	; (800e528 <_LCD_Reset+0x38>)
 800e50c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e510:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e512:	20c8      	movs	r0, #200	; 0xc8
 800e514:	f7fa f8cc 	bl	80086b0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e518:	4b03      	ldr	r3, [pc, #12]	; (800e528 <_LCD_Reset+0x38>)
 800e51a:	695b      	ldr	r3, [r3, #20]
 800e51c:	4a02      	ldr	r2, [pc, #8]	; (800e528 <_LCD_Reset+0x38>)
 800e51e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e522:	6153      	str	r3, [r2, #20]
}
 800e524:	bf00      	nop
 800e526:	bd80      	pop	{r7, pc}
 800e528:	48000400 	.word	0x48000400

0800e52c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e52c:	b5b0      	push	{r4, r5, r7, lr}
 800e52e:	b08e      	sub	sp, #56	; 0x38
 800e530:	af00      	add	r7, sp, #0
 800e532:	607b      	str	r3, [r7, #4]
 800e534:	4603      	mov	r3, r0
 800e536:	81fb      	strh	r3, [r7, #14]
 800e538:	460b      	mov	r3, r1
 800e53a:	81bb      	strh	r3, [r7, #12]
 800e53c:	4613      	mov	r3, r2
 800e53e:	817b      	strh	r3, [r7, #10]
 800e540:	466b      	mov	r3, sp
 800e542:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e544:	2300      	movs	r3, #0
 800e546:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	4a4d      	ldr	r2, [pc, #308]	; (800e684 <_LCD_Write_Frame+0x158>)
 800e54e:	8812      	ldrh	r2, [r2, #0]
 800e550:	4293      	cmp	r3, r2
 800e552:	d202      	bcs.n	800e55a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e558:	e002      	b.n	800e560 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e55a:	4b4a      	ldr	r3, [pc, #296]	; (800e684 <_LCD_Write_Frame+0x158>)
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e560:	897b      	ldrh	r3, [r7, #10]
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e56a:	4603      	mov	r3, r0
 800e56c:	3b01      	subs	r3, #1
 800e56e:	61bb      	str	r3, [r7, #24]
 800e570:	4601      	mov	r1, r0
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	f04f 0400 	mov.w	r4, #0
 800e57e:	00d4      	lsls	r4, r2, #3
 800e580:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e584:	00cb      	lsls	r3, r1, #3
 800e586:	4601      	mov	r1, r0
 800e588:	f04f 0200 	mov.w	r2, #0
 800e58c:	f04f 0300 	mov.w	r3, #0
 800e590:	f04f 0400 	mov.w	r4, #0
 800e594:	00d4      	lsls	r4, r2, #3
 800e596:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e59a:	00cb      	lsls	r3, r1, #3
 800e59c:	1dc3      	adds	r3, r0, #7
 800e59e:	08db      	lsrs	r3, r3, #3
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	ebad 0d03 	sub.w	sp, sp, r3
 800e5a6:	466b      	mov	r3, sp
 800e5a8:	3300      	adds	r3, #0
 800e5aa:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	633b      	str	r3, [r7, #48]	; 0x30
 800e5b0:	e00d      	b.n	800e5ce <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	4413      	add	r3, r2
 800e5b8:	7ffa      	ldrb	r2, [r7, #31]
 800e5ba:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5be:	3301      	adds	r3, #1
 800e5c0:	897a      	ldrh	r2, [r7, #10]
 800e5c2:	b2d1      	uxtb	r1, r2
 800e5c4:	697a      	ldr	r2, [r7, #20]
 800e5c6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d3ed      	bcc.n	800e5b2 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	005b      	lsls	r3, r3, #1
 800e5da:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00d      	beq.n	800e606 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5fe:	fb01 f202 	mul.w	r2, r1, r2
 800e602:	1a9b      	subs	r3, r3, r2
 800e604:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e606:	4b20      	ldr	r3, [pc, #128]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	4a1f      	ldr	r2, [pc, #124]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e610:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e612:	4b1d      	ldr	r3, [pc, #116]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	4a1c      	ldr	r2, [pc, #112]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e61c:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00f      	beq.n	800e644 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e624:	2300      	movs	r3, #0
 800e626:	627b      	str	r3, [r7, #36]	; 0x24
 800e628:	e008      	b.n	800e63c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e62a:	6978      	ldr	r0, [r7, #20]
 800e62c:	230a      	movs	r3, #10
 800e62e:	2200      	movs	r2, #0
 800e630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e632:	f000 f8c1 	bl	800e7b8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	3301      	adds	r3, #1
 800e63a:	627b      	str	r3, [r7, #36]	; 0x24
 800e63c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e640:	429a      	cmp	r2, r3
 800e642:	d3f2      	bcc.n	800e62a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e644:	6978      	ldr	r0, [r7, #20]
 800e646:	230a      	movs	r3, #10
 800e648:	2200      	movs	r2, #0
 800e64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e64c:	f000 f8b4 	bl	800e7b8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e650:	2300      	movs	r3, #0
 800e652:	623b      	str	r3, [r7, #32]
 800e654:	e008      	b.n	800e668 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e656:	4b0c      	ldr	r3, [pc, #48]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	4a0b      	ldr	r2, [pc, #44]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e65c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e660:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	3301      	adds	r3, #1
 800e666:	623b      	str	r3, [r7, #32]
 800e668:	6a3b      	ldr	r3, [r7, #32]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	ddf3      	ble.n	800e656 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e66e:	4b06      	ldr	r3, [pc, #24]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	4a05      	ldr	r2, [pc, #20]	; (800e688 <_LCD_Write_Frame+0x15c>)
 800e674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e678:	6153      	str	r3, [r2, #20]
 800e67a:	46ad      	mov	sp, r5

}
 800e67c:	bf00      	nop
 800e67e:	3738      	adds	r7, #56	; 0x38
 800e680:	46bd      	mov	sp, r7
 800e682:	bdb0      	pop	{r4, r5, r7, pc}
 800e684:	20000cb0 	.word	0x20000cb0
 800e688:	48000400 	.word	0x48000400

0800e68c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e696:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6a0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e6a2:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	4a11      	ldr	r2, [pc, #68]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6ac:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e6ae:	79fb      	ldrb	r3, [r7, #7]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 f84d 	bl	800e754 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e008      	b.n	800e6d2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6ca:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b02      	cmp	r3, #2
 800e6d6:	ddf3      	ble.n	800e6c0 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e6d8:	4b04      	ldr	r3, [pc, #16]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	4a03      	ldr	r2, [pc, #12]	; (800e6ec <_LCD_SendCommand+0x60>)
 800e6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e2:	6153      	str	r3, [r2, #20]
}
 800e6e4:	bf00      	nop
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	48000400 	.word	0x48000400

0800e6f0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e6fa:	4b15      	ldr	r3, [pc, #84]	; (800e750 <_LCD_SendData+0x60>)
 800e6fc:	695b      	ldr	r3, [r3, #20]
 800e6fe:	4a14      	ldr	r2, [pc, #80]	; (800e750 <_LCD_SendData+0x60>)
 800e700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e704:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e706:	4b12      	ldr	r3, [pc, #72]	; (800e750 <_LCD_SendData+0x60>)
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	4a11      	ldr	r2, [pc, #68]	; (800e750 <_LCD_SendData+0x60>)
 800e70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e710:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	2200      	movs	r2, #0
 800e716:	2100      	movs	r1, #0
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 f81b 	bl	800e754 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e71e:	2300      	movs	r3, #0
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	e008      	b.n	800e736 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e724:	4b0a      	ldr	r3, [pc, #40]	; (800e750 <_LCD_SendData+0x60>)
 800e726:	695b      	ldr	r3, [r3, #20]
 800e728:	4a09      	ldr	r2, [pc, #36]	; (800e750 <_LCD_SendData+0x60>)
 800e72a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e72e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	3301      	adds	r3, #1
 800e734:	60fb      	str	r3, [r7, #12]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2b02      	cmp	r3, #2
 800e73a:	ddf3      	ble.n	800e724 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e73c:	4b04      	ldr	r3, [pc, #16]	; (800e750 <_LCD_SendData+0x60>)
 800e73e:	695b      	ldr	r3, [r3, #20]
 800e740:	4a03      	ldr	r2, [pc, #12]	; (800e750 <_LCD_SendData+0x60>)
 800e742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e746:	6153      	str	r3, [r2, #20]
}
 800e748:	bf00      	nop
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	48000400 	.word	0x48000400

0800e754 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	4603      	mov	r3, r0
 800e75c:	71fb      	strb	r3, [r7, #7]
 800e75e:	460b      	mov	r3, r1
 800e760:	71bb      	strb	r3, [r7, #6]
 800e762:	4613      	mov	r3, r2
 800e764:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	e003      	b.n	800e774 <_SPI_SendByte+0x20>
   		asm("nop");
 800e76c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3301      	adds	r3, #1
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	79bb      	ldrb	r3, [r7, #6]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	dbf7      	blt.n	800e76c <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e77c:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <_SPI_SendByte+0x5c>)
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b02      	cmp	r3, #2
 800e786:	d102      	bne.n	800e78e <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e788:	4a0a      	ldr	r2, [pc, #40]	; (800e7b4 <_SPI_SendByte+0x60>)
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e78e:	2300      	movs	r3, #0
 800e790:	60bb      	str	r3, [r7, #8]
 800e792:	e003      	b.n	800e79c <_SPI_SendByte+0x48>
   		asm("nop");
 800e794:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3301      	adds	r3, #1
 800e79a:	60bb      	str	r3, [r7, #8]
 800e79c:	797b      	ldrb	r3, [r7, #5]
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	dbf7      	blt.n	800e794 <_SPI_SendByte+0x40>

#endif

}
 800e7a4:	bf00      	nop
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	40003c00 	.word	0x40003c00
 800e7b4:	40003c0c 	.word	0x40003c0c

0800e7b8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b089      	sub	sp, #36	; 0x24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	71fb      	strb	r3, [r7, #7]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	61fb      	str	r3, [r7, #28]
 800e7d2:	e003      	b.n	800e7dc <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e7d4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	dbf7      	blt.n	800e7d4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e7e8:	e01d      	b.n	800e826 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e7ea:	4b1c      	ldr	r3, [pc, #112]	; (800e85c <_SPI_SendByteMultiByte+0xa4>)
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f003 0302 	and.w	r3, r3, #2
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d117      	bne.n	800e826 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d90a      	bls.n	800e812 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	881a      	ldrh	r2, [r3, #0]
 800e800:	4b16      	ldr	r3, [pc, #88]	; (800e85c <_SPI_SendByteMultiByte+0xa4>)
 800e802:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	3302      	adds	r3, #2
 800e808:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	3b02      	subs	r3, #2
 800e80e:	60bb      	str	r3, [r7, #8]
 800e810:	e009      	b.n	800e826 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e812:	4a13      	ldr	r2, [pc, #76]	; (800e860 <_SPI_SendByteMultiByte+0xa8>)
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	3301      	adds	r3, #1
 800e81e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	3b01      	subs	r3, #1
 800e824:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1de      	bne.n	800e7ea <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e82c:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <_SPI_SendByteMultiByte+0xa4>)
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	4a0a      	ldr	r2, [pc, #40]	; (800e85c <_SPI_SendByteMultiByte+0xa4>)
 800e832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e836:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e838:	2300      	movs	r3, #0
 800e83a:	617b      	str	r3, [r7, #20]
 800e83c:	e003      	b.n	800e846 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e83e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	3301      	adds	r3, #1
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	79bb      	ldrb	r3, [r7, #6]
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	dbf7      	blt.n	800e83e <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e84e:	bf00      	nop
 800e850:	3724      	adds	r7, #36	; 0x24
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	40003c00 	.word	0x40003c00
 800e860:	40003c0c 	.word	0x40003c0c

0800e864 <__errno>:
 800e864:	4b01      	ldr	r3, [pc, #4]	; (800e86c <__errno+0x8>)
 800e866:	6818      	ldr	r0, [r3, #0]
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	200017f4 	.word	0x200017f4

0800e870 <__libc_init_array>:
 800e870:	b570      	push	{r4, r5, r6, lr}
 800e872:	4e0d      	ldr	r6, [pc, #52]	; (800e8a8 <__libc_init_array+0x38>)
 800e874:	4c0d      	ldr	r4, [pc, #52]	; (800e8ac <__libc_init_array+0x3c>)
 800e876:	1ba4      	subs	r4, r4, r6
 800e878:	10a4      	asrs	r4, r4, #2
 800e87a:	2500      	movs	r5, #0
 800e87c:	42a5      	cmp	r5, r4
 800e87e:	d109      	bne.n	800e894 <__libc_init_array+0x24>
 800e880:	4e0b      	ldr	r6, [pc, #44]	; (800e8b0 <__libc_init_array+0x40>)
 800e882:	4c0c      	ldr	r4, [pc, #48]	; (800e8b4 <__libc_init_array+0x44>)
 800e884:	f003 ff46 	bl	8012714 <_init>
 800e888:	1ba4      	subs	r4, r4, r6
 800e88a:	10a4      	asrs	r4, r4, #2
 800e88c:	2500      	movs	r5, #0
 800e88e:	42a5      	cmp	r5, r4
 800e890:	d105      	bne.n	800e89e <__libc_init_array+0x2e>
 800e892:	bd70      	pop	{r4, r5, r6, pc}
 800e894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e898:	4798      	blx	r3
 800e89a:	3501      	adds	r5, #1
 800e89c:	e7ee      	b.n	800e87c <__libc_init_array+0xc>
 800e89e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8a2:	4798      	blx	r3
 800e8a4:	3501      	adds	r5, #1
 800e8a6:	e7f2      	b.n	800e88e <__libc_init_array+0x1e>
 800e8a8:	08013bb8 	.word	0x08013bb8
 800e8ac:	08013bb8 	.word	0x08013bb8
 800e8b0:	08013bb8 	.word	0x08013bb8
 800e8b4:	08013bbc 	.word	0x08013bbc

0800e8b8 <memset>:
 800e8b8:	4402      	add	r2, r0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d100      	bne.n	800e8c2 <memset+0xa>
 800e8c0:	4770      	bx	lr
 800e8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e8c6:	e7f9      	b.n	800e8bc <memset+0x4>

0800e8c8 <__cvt>:
 800e8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8cc:	ec55 4b10 	vmov	r4, r5, d0
 800e8d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e8d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e8d6:	2d00      	cmp	r5, #0
 800e8d8:	460e      	mov	r6, r1
 800e8da:	4691      	mov	r9, r2
 800e8dc:	4619      	mov	r1, r3
 800e8de:	bfb8      	it	lt
 800e8e0:	4622      	movlt	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	f027 0720 	bic.w	r7, r7, #32
 800e8e8:	bfbb      	ittet	lt
 800e8ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8ee:	461d      	movlt	r5, r3
 800e8f0:	2300      	movge	r3, #0
 800e8f2:	232d      	movlt	r3, #45	; 0x2d
 800e8f4:	bfb8      	it	lt
 800e8f6:	4614      	movlt	r4, r2
 800e8f8:	2f46      	cmp	r7, #70	; 0x46
 800e8fa:	700b      	strb	r3, [r1, #0]
 800e8fc:	d004      	beq.n	800e908 <__cvt+0x40>
 800e8fe:	2f45      	cmp	r7, #69	; 0x45
 800e900:	d100      	bne.n	800e904 <__cvt+0x3c>
 800e902:	3601      	adds	r6, #1
 800e904:	2102      	movs	r1, #2
 800e906:	e000      	b.n	800e90a <__cvt+0x42>
 800e908:	2103      	movs	r1, #3
 800e90a:	ab03      	add	r3, sp, #12
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	ab02      	add	r3, sp, #8
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	4632      	mov	r2, r6
 800e914:	4653      	mov	r3, sl
 800e916:	ec45 4b10 	vmov	d0, r4, r5
 800e91a:	f000 fe25 	bl	800f568 <_dtoa_r>
 800e91e:	2f47      	cmp	r7, #71	; 0x47
 800e920:	4680      	mov	r8, r0
 800e922:	d102      	bne.n	800e92a <__cvt+0x62>
 800e924:	f019 0f01 	tst.w	r9, #1
 800e928:	d026      	beq.n	800e978 <__cvt+0xb0>
 800e92a:	2f46      	cmp	r7, #70	; 0x46
 800e92c:	eb08 0906 	add.w	r9, r8, r6
 800e930:	d111      	bne.n	800e956 <__cvt+0x8e>
 800e932:	f898 3000 	ldrb.w	r3, [r8]
 800e936:	2b30      	cmp	r3, #48	; 0x30
 800e938:	d10a      	bne.n	800e950 <__cvt+0x88>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f7f2 f8e9 	bl	8000b18 <__aeabi_dcmpeq>
 800e946:	b918      	cbnz	r0, 800e950 <__cvt+0x88>
 800e948:	f1c6 0601 	rsb	r6, r6, #1
 800e94c:	f8ca 6000 	str.w	r6, [sl]
 800e950:	f8da 3000 	ldr.w	r3, [sl]
 800e954:	4499      	add	r9, r3
 800e956:	2200      	movs	r2, #0
 800e958:	2300      	movs	r3, #0
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f2 f8db 	bl	8000b18 <__aeabi_dcmpeq>
 800e962:	b938      	cbnz	r0, 800e974 <__cvt+0xac>
 800e964:	2230      	movs	r2, #48	; 0x30
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	454b      	cmp	r3, r9
 800e96a:	d205      	bcs.n	800e978 <__cvt+0xb0>
 800e96c:	1c59      	adds	r1, r3, #1
 800e96e:	9103      	str	r1, [sp, #12]
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	e7f8      	b.n	800e966 <__cvt+0x9e>
 800e974:	f8cd 900c 	str.w	r9, [sp, #12]
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e97c:	eba3 0308 	sub.w	r3, r3, r8
 800e980:	4640      	mov	r0, r8
 800e982:	6013      	str	r3, [r2, #0]
 800e984:	b004      	add	sp, #16
 800e986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e98a <__exponent>:
 800e98a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e98c:	2900      	cmp	r1, #0
 800e98e:	4604      	mov	r4, r0
 800e990:	bfba      	itte	lt
 800e992:	4249      	neglt	r1, r1
 800e994:	232d      	movlt	r3, #45	; 0x2d
 800e996:	232b      	movge	r3, #43	; 0x2b
 800e998:	2909      	cmp	r1, #9
 800e99a:	f804 2b02 	strb.w	r2, [r4], #2
 800e99e:	7043      	strb	r3, [r0, #1]
 800e9a0:	dd20      	ble.n	800e9e4 <__exponent+0x5a>
 800e9a2:	f10d 0307 	add.w	r3, sp, #7
 800e9a6:	461f      	mov	r7, r3
 800e9a8:	260a      	movs	r6, #10
 800e9aa:	fb91 f5f6 	sdiv	r5, r1, r6
 800e9ae:	fb06 1115 	mls	r1, r6, r5, r1
 800e9b2:	3130      	adds	r1, #48	; 0x30
 800e9b4:	2d09      	cmp	r5, #9
 800e9b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9ba:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e9be:	4629      	mov	r1, r5
 800e9c0:	dc09      	bgt.n	800e9d6 <__exponent+0x4c>
 800e9c2:	3130      	adds	r1, #48	; 0x30
 800e9c4:	3b02      	subs	r3, #2
 800e9c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e9ca:	42bb      	cmp	r3, r7
 800e9cc:	4622      	mov	r2, r4
 800e9ce:	d304      	bcc.n	800e9da <__exponent+0x50>
 800e9d0:	1a10      	subs	r0, r2, r0
 800e9d2:	b003      	add	sp, #12
 800e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	e7e7      	b.n	800e9aa <__exponent+0x20>
 800e9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9de:	f804 2b01 	strb.w	r2, [r4], #1
 800e9e2:	e7f2      	b.n	800e9ca <__exponent+0x40>
 800e9e4:	2330      	movs	r3, #48	; 0x30
 800e9e6:	4419      	add	r1, r3
 800e9e8:	7083      	strb	r3, [r0, #2]
 800e9ea:	1d02      	adds	r2, r0, #4
 800e9ec:	70c1      	strb	r1, [r0, #3]
 800e9ee:	e7ef      	b.n	800e9d0 <__exponent+0x46>

0800e9f0 <_printf_float>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	b08d      	sub	sp, #52	; 0x34
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e9fc:	4616      	mov	r6, r2
 800e9fe:	461f      	mov	r7, r3
 800ea00:	4605      	mov	r5, r0
 800ea02:	f001 fce3 	bl	80103cc <_localeconv_r>
 800ea06:	6803      	ldr	r3, [r0, #0]
 800ea08:	9304      	str	r3, [sp, #16]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7f1 fc08 	bl	8000220 <strlen>
 800ea10:	2300      	movs	r3, #0
 800ea12:	930a      	str	r3, [sp, #40]	; 0x28
 800ea14:	f8d8 3000 	ldr.w	r3, [r8]
 800ea18:	9005      	str	r0, [sp, #20]
 800ea1a:	3307      	adds	r3, #7
 800ea1c:	f023 0307 	bic.w	r3, r3, #7
 800ea20:	f103 0208 	add.w	r2, r3, #8
 800ea24:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea28:	f8d4 b000 	ldr.w	fp, [r4]
 800ea2c:	f8c8 2000 	str.w	r2, [r8]
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea40:	9307      	str	r3, [sp, #28]
 800ea42:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea4a:	4ba7      	ldr	r3, [pc, #668]	; (800ece8 <_printf_float+0x2f8>)
 800ea4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea50:	f7f2 f894 	bl	8000b7c <__aeabi_dcmpun>
 800ea54:	bb70      	cbnz	r0, 800eab4 <_printf_float+0xc4>
 800ea56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea5a:	4ba3      	ldr	r3, [pc, #652]	; (800ece8 <_printf_float+0x2f8>)
 800ea5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea60:	f7f2 f86e 	bl	8000b40 <__aeabi_dcmple>
 800ea64:	bb30      	cbnz	r0, 800eab4 <_printf_float+0xc4>
 800ea66:	2200      	movs	r2, #0
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4640      	mov	r0, r8
 800ea6c:	4649      	mov	r1, r9
 800ea6e:	f7f2 f85d 	bl	8000b2c <__aeabi_dcmplt>
 800ea72:	b110      	cbz	r0, 800ea7a <_printf_float+0x8a>
 800ea74:	232d      	movs	r3, #45	; 0x2d
 800ea76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea7a:	4a9c      	ldr	r2, [pc, #624]	; (800ecec <_printf_float+0x2fc>)
 800ea7c:	4b9c      	ldr	r3, [pc, #624]	; (800ecf0 <_printf_float+0x300>)
 800ea7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ea82:	bf8c      	ite	hi
 800ea84:	4690      	movhi	r8, r2
 800ea86:	4698      	movls	r8, r3
 800ea88:	2303      	movs	r3, #3
 800ea8a:	f02b 0204 	bic.w	r2, fp, #4
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	6022      	str	r2, [r4, #0]
 800ea92:	f04f 0900 	mov.w	r9, #0
 800ea96:	9700      	str	r7, [sp, #0]
 800ea98:	4633      	mov	r3, r6
 800ea9a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f9e6 	bl	800ee70 <_printf_common>
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f040 808d 	bne.w	800ebc4 <_printf_float+0x1d4>
 800eaaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaae:	b00d      	add	sp, #52	; 0x34
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	4642      	mov	r2, r8
 800eab6:	464b      	mov	r3, r9
 800eab8:	4640      	mov	r0, r8
 800eaba:	4649      	mov	r1, r9
 800eabc:	f7f2 f85e 	bl	8000b7c <__aeabi_dcmpun>
 800eac0:	b110      	cbz	r0, 800eac8 <_printf_float+0xd8>
 800eac2:	4a8c      	ldr	r2, [pc, #560]	; (800ecf4 <_printf_float+0x304>)
 800eac4:	4b8c      	ldr	r3, [pc, #560]	; (800ecf8 <_printf_float+0x308>)
 800eac6:	e7da      	b.n	800ea7e <_printf_float+0x8e>
 800eac8:	6861      	ldr	r1, [r4, #4]
 800eaca:	1c4b      	adds	r3, r1, #1
 800eacc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ead0:	a80a      	add	r0, sp, #40	; 0x28
 800ead2:	d13e      	bne.n	800eb52 <_printf_float+0x162>
 800ead4:	2306      	movs	r3, #6
 800ead6:	6063      	str	r3, [r4, #4]
 800ead8:	2300      	movs	r3, #0
 800eada:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eade:	ab09      	add	r3, sp, #36	; 0x24
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	ec49 8b10 	vmov	d0, r8, r9
 800eae6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eaea:	6022      	str	r2, [r4, #0]
 800eaec:	f8cd a004 	str.w	sl, [sp, #4]
 800eaf0:	6861      	ldr	r1, [r4, #4]
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7ff fee8 	bl	800e8c8 <__cvt>
 800eaf8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800eafc:	2b47      	cmp	r3, #71	; 0x47
 800eafe:	4680      	mov	r8, r0
 800eb00:	d109      	bne.n	800eb16 <_printf_float+0x126>
 800eb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb04:	1cd8      	adds	r0, r3, #3
 800eb06:	db02      	blt.n	800eb0e <_printf_float+0x11e>
 800eb08:	6862      	ldr	r2, [r4, #4]
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	dd47      	ble.n	800eb9e <_printf_float+0x1ae>
 800eb0e:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb12:	fa5f fa8a 	uxtb.w	sl, sl
 800eb16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800eb1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb1c:	d824      	bhi.n	800eb68 <_printf_float+0x178>
 800eb1e:	3901      	subs	r1, #1
 800eb20:	4652      	mov	r2, sl
 800eb22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb26:	9109      	str	r1, [sp, #36]	; 0x24
 800eb28:	f7ff ff2f 	bl	800e98a <__exponent>
 800eb2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb2e:	1813      	adds	r3, r2, r0
 800eb30:	2a01      	cmp	r2, #1
 800eb32:	4681      	mov	r9, r0
 800eb34:	6123      	str	r3, [r4, #16]
 800eb36:	dc02      	bgt.n	800eb3e <_printf_float+0x14e>
 800eb38:	6822      	ldr	r2, [r4, #0]
 800eb3a:	07d1      	lsls	r1, r2, #31
 800eb3c:	d501      	bpl.n	800eb42 <_printf_float+0x152>
 800eb3e:	3301      	adds	r3, #1
 800eb40:	6123      	str	r3, [r4, #16]
 800eb42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0a5      	beq.n	800ea96 <_printf_float+0xa6>
 800eb4a:	232d      	movs	r3, #45	; 0x2d
 800eb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb50:	e7a1      	b.n	800ea96 <_printf_float+0xa6>
 800eb52:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800eb56:	f000 8177 	beq.w	800ee48 <_printf_float+0x458>
 800eb5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800eb5e:	d1bb      	bne.n	800ead8 <_printf_float+0xe8>
 800eb60:	2900      	cmp	r1, #0
 800eb62:	d1b9      	bne.n	800ead8 <_printf_float+0xe8>
 800eb64:	2301      	movs	r3, #1
 800eb66:	e7b6      	b.n	800ead6 <_printf_float+0xe6>
 800eb68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800eb6c:	d119      	bne.n	800eba2 <_printf_float+0x1b2>
 800eb6e:	2900      	cmp	r1, #0
 800eb70:	6863      	ldr	r3, [r4, #4]
 800eb72:	dd0c      	ble.n	800eb8e <_printf_float+0x19e>
 800eb74:	6121      	str	r1, [r4, #16]
 800eb76:	b913      	cbnz	r3, 800eb7e <_printf_float+0x18e>
 800eb78:	6822      	ldr	r2, [r4, #0]
 800eb7a:	07d2      	lsls	r2, r2, #31
 800eb7c:	d502      	bpl.n	800eb84 <_printf_float+0x194>
 800eb7e:	3301      	adds	r3, #1
 800eb80:	440b      	add	r3, r1
 800eb82:	6123      	str	r3, [r4, #16]
 800eb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb86:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb88:	f04f 0900 	mov.w	r9, #0
 800eb8c:	e7d9      	b.n	800eb42 <_printf_float+0x152>
 800eb8e:	b913      	cbnz	r3, 800eb96 <_printf_float+0x1a6>
 800eb90:	6822      	ldr	r2, [r4, #0]
 800eb92:	07d0      	lsls	r0, r2, #31
 800eb94:	d501      	bpl.n	800eb9a <_printf_float+0x1aa>
 800eb96:	3302      	adds	r3, #2
 800eb98:	e7f3      	b.n	800eb82 <_printf_float+0x192>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e7f1      	b.n	800eb82 <_printf_float+0x192>
 800eb9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800eba2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eba6:	4293      	cmp	r3, r2
 800eba8:	db05      	blt.n	800ebb6 <_printf_float+0x1c6>
 800ebaa:	6822      	ldr	r2, [r4, #0]
 800ebac:	6123      	str	r3, [r4, #16]
 800ebae:	07d1      	lsls	r1, r2, #31
 800ebb0:	d5e8      	bpl.n	800eb84 <_printf_float+0x194>
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	e7e5      	b.n	800eb82 <_printf_float+0x192>
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	bfd4      	ite	le
 800ebba:	f1c3 0302 	rsble	r3, r3, #2
 800ebbe:	2301      	movgt	r3, #1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	e7de      	b.n	800eb82 <_printf_float+0x192>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	055a      	lsls	r2, r3, #21
 800ebc8:	d407      	bmi.n	800ebda <_printf_float+0x1ea>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	4642      	mov	r2, r8
 800ebce:	4631      	mov	r1, r6
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	47b8      	blx	r7
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d12b      	bne.n	800ec30 <_printf_float+0x240>
 800ebd8:	e767      	b.n	800eaaa <_printf_float+0xba>
 800ebda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ebde:	f240 80dc 	bls.w	800ed9a <_printf_float+0x3aa>
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebea:	f7f1 ff95 	bl	8000b18 <__aeabi_dcmpeq>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d033      	beq.n	800ec5a <_printf_float+0x26a>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4a41      	ldr	r2, [pc, #260]	; (800ecfc <_printf_float+0x30c>)
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f af54 	beq.w	800eaaa <_printf_float+0xba>
 800ec02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec06:	429a      	cmp	r2, r3
 800ec08:	db02      	blt.n	800ec10 <_printf_float+0x220>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	07d8      	lsls	r0, r3, #31
 800ec0e:	d50f      	bpl.n	800ec30 <_printf_float+0x240>
 800ec10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec14:	4631      	mov	r1, r6
 800ec16:	4628      	mov	r0, r5
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	f43f af45 	beq.w	800eaaa <_printf_float+0xba>
 800ec20:	f04f 0800 	mov.w	r8, #0
 800ec24:	f104 091a 	add.w	r9, r4, #26
 800ec28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	4543      	cmp	r3, r8
 800ec2e:	dc09      	bgt.n	800ec44 <_printf_float+0x254>
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	079b      	lsls	r3, r3, #30
 800ec34:	f100 8103 	bmi.w	800ee3e <_printf_float+0x44e>
 800ec38:	68e0      	ldr	r0, [r4, #12]
 800ec3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec3c:	4298      	cmp	r0, r3
 800ec3e:	bfb8      	it	lt
 800ec40:	4618      	movlt	r0, r3
 800ec42:	e734      	b.n	800eaae <_printf_float+0xbe>
 800ec44:	2301      	movs	r3, #1
 800ec46:	464a      	mov	r2, r9
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f43f af2b 	beq.w	800eaaa <_printf_float+0xba>
 800ec54:	f108 0801 	add.w	r8, r8, #1
 800ec58:	e7e6      	b.n	800ec28 <_printf_float+0x238>
 800ec5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dc2b      	bgt.n	800ecb8 <_printf_float+0x2c8>
 800ec60:	2301      	movs	r3, #1
 800ec62:	4a26      	ldr	r2, [pc, #152]	; (800ecfc <_printf_float+0x30c>)
 800ec64:	4631      	mov	r1, r6
 800ec66:	4628      	mov	r0, r5
 800ec68:	47b8      	blx	r7
 800ec6a:	3001      	adds	r0, #1
 800ec6c:	f43f af1d 	beq.w	800eaaa <_printf_float+0xba>
 800ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec72:	b923      	cbnz	r3, 800ec7e <_printf_float+0x28e>
 800ec74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec76:	b913      	cbnz	r3, 800ec7e <_printf_float+0x28e>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	07d9      	lsls	r1, r3, #31
 800ec7c:	d5d8      	bpl.n	800ec30 <_printf_float+0x240>
 800ec7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec82:	4631      	mov	r1, r6
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b8      	blx	r7
 800ec88:	3001      	adds	r0, #1
 800ec8a:	f43f af0e 	beq.w	800eaaa <_printf_float+0xba>
 800ec8e:	f04f 0900 	mov.w	r9, #0
 800ec92:	f104 0a1a 	add.w	sl, r4, #26
 800ec96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec98:	425b      	negs	r3, r3
 800ec9a:	454b      	cmp	r3, r9
 800ec9c:	dc01      	bgt.n	800eca2 <_printf_float+0x2b2>
 800ec9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca0:	e794      	b.n	800ebcc <_printf_float+0x1dc>
 800eca2:	2301      	movs	r3, #1
 800eca4:	4652      	mov	r2, sl
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	f43f aefc 	beq.w	800eaaa <_printf_float+0xba>
 800ecb2:	f109 0901 	add.w	r9, r9, #1
 800ecb6:	e7ee      	b.n	800ec96 <_printf_float+0x2a6>
 800ecb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	bfa8      	it	ge
 800ecc0:	461a      	movge	r2, r3
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	4691      	mov	r9, r2
 800ecc6:	dd07      	ble.n	800ecd8 <_printf_float+0x2e8>
 800ecc8:	4613      	mov	r3, r2
 800ecca:	4631      	mov	r1, r6
 800eccc:	4642      	mov	r2, r8
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	f43f aee9 	beq.w	800eaaa <_printf_float+0xba>
 800ecd8:	f104 031a 	add.w	r3, r4, #26
 800ecdc:	f04f 0b00 	mov.w	fp, #0
 800ece0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ece4:	9306      	str	r3, [sp, #24]
 800ece6:	e015      	b.n	800ed14 <_printf_float+0x324>
 800ece8:	7fefffff 	.word	0x7fefffff
 800ecec:	080138b0 	.word	0x080138b0
 800ecf0:	080138ac 	.word	0x080138ac
 800ecf4:	080138b8 	.word	0x080138b8
 800ecf8:	080138b4 	.word	0x080138b4
 800ecfc:	08013b6c 	.word	0x08013b6c
 800ed00:	2301      	movs	r3, #1
 800ed02:	9a06      	ldr	r2, [sp, #24]
 800ed04:	4631      	mov	r1, r6
 800ed06:	4628      	mov	r0, r5
 800ed08:	47b8      	blx	r7
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	f43f aecd 	beq.w	800eaaa <_printf_float+0xba>
 800ed10:	f10b 0b01 	add.w	fp, fp, #1
 800ed14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ed18:	ebaa 0309 	sub.w	r3, sl, r9
 800ed1c:	455b      	cmp	r3, fp
 800ed1e:	dcef      	bgt.n	800ed00 <_printf_float+0x310>
 800ed20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed24:	429a      	cmp	r2, r3
 800ed26:	44d0      	add	r8, sl
 800ed28:	db15      	blt.n	800ed56 <_printf_float+0x366>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	07da      	lsls	r2, r3, #31
 800ed2e:	d412      	bmi.n	800ed56 <_printf_float+0x366>
 800ed30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed34:	eba3 020a 	sub.w	r2, r3, sl
 800ed38:	eba3 0a01 	sub.w	sl, r3, r1
 800ed3c:	4592      	cmp	sl, r2
 800ed3e:	bfa8      	it	ge
 800ed40:	4692      	movge	sl, r2
 800ed42:	f1ba 0f00 	cmp.w	sl, #0
 800ed46:	dc0e      	bgt.n	800ed66 <_printf_float+0x376>
 800ed48:	f04f 0800 	mov.w	r8, #0
 800ed4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed50:	f104 091a 	add.w	r9, r4, #26
 800ed54:	e019      	b.n	800ed8a <_printf_float+0x39a>
 800ed56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed5a:	4631      	mov	r1, r6
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	47b8      	blx	r7
 800ed60:	3001      	adds	r0, #1
 800ed62:	d1e5      	bne.n	800ed30 <_printf_float+0x340>
 800ed64:	e6a1      	b.n	800eaaa <_printf_float+0xba>
 800ed66:	4653      	mov	r3, sl
 800ed68:	4642      	mov	r2, r8
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	47b8      	blx	r7
 800ed70:	3001      	adds	r0, #1
 800ed72:	d1e9      	bne.n	800ed48 <_printf_float+0x358>
 800ed74:	e699      	b.n	800eaaa <_printf_float+0xba>
 800ed76:	2301      	movs	r3, #1
 800ed78:	464a      	mov	r2, r9
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	47b8      	blx	r7
 800ed80:	3001      	adds	r0, #1
 800ed82:	f43f ae92 	beq.w	800eaaa <_printf_float+0xba>
 800ed86:	f108 0801 	add.w	r8, r8, #1
 800ed8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed8e:	1a9b      	subs	r3, r3, r2
 800ed90:	eba3 030a 	sub.w	r3, r3, sl
 800ed94:	4543      	cmp	r3, r8
 800ed96:	dcee      	bgt.n	800ed76 <_printf_float+0x386>
 800ed98:	e74a      	b.n	800ec30 <_printf_float+0x240>
 800ed9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed9c:	2a01      	cmp	r2, #1
 800ed9e:	dc01      	bgt.n	800eda4 <_printf_float+0x3b4>
 800eda0:	07db      	lsls	r3, r3, #31
 800eda2:	d53a      	bpl.n	800ee1a <_printf_float+0x42a>
 800eda4:	2301      	movs	r3, #1
 800eda6:	4642      	mov	r2, r8
 800eda8:	4631      	mov	r1, r6
 800edaa:	4628      	mov	r0, r5
 800edac:	47b8      	blx	r7
 800edae:	3001      	adds	r0, #1
 800edb0:	f43f ae7b 	beq.w	800eaaa <_printf_float+0xba>
 800edb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edb8:	4631      	mov	r1, r6
 800edba:	4628      	mov	r0, r5
 800edbc:	47b8      	blx	r7
 800edbe:	3001      	adds	r0, #1
 800edc0:	f108 0801 	add.w	r8, r8, #1
 800edc4:	f43f ae71 	beq.w	800eaaa <_printf_float+0xba>
 800edc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edca:	2200      	movs	r2, #0
 800edcc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800edd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edd4:	2300      	movs	r3, #0
 800edd6:	f7f1 fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 800edda:	b9c8      	cbnz	r0, 800ee10 <_printf_float+0x420>
 800eddc:	4653      	mov	r3, sl
 800edde:	4642      	mov	r2, r8
 800ede0:	4631      	mov	r1, r6
 800ede2:	4628      	mov	r0, r5
 800ede4:	47b8      	blx	r7
 800ede6:	3001      	adds	r0, #1
 800ede8:	d10e      	bne.n	800ee08 <_printf_float+0x418>
 800edea:	e65e      	b.n	800eaaa <_printf_float+0xba>
 800edec:	2301      	movs	r3, #1
 800edee:	4652      	mov	r2, sl
 800edf0:	4631      	mov	r1, r6
 800edf2:	4628      	mov	r0, r5
 800edf4:	47b8      	blx	r7
 800edf6:	3001      	adds	r0, #1
 800edf8:	f43f ae57 	beq.w	800eaaa <_printf_float+0xba>
 800edfc:	f108 0801 	add.w	r8, r8, #1
 800ee00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee02:	3b01      	subs	r3, #1
 800ee04:	4543      	cmp	r3, r8
 800ee06:	dcf1      	bgt.n	800edec <_printf_float+0x3fc>
 800ee08:	464b      	mov	r3, r9
 800ee0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee0e:	e6de      	b.n	800ebce <_printf_float+0x1de>
 800ee10:	f04f 0800 	mov.w	r8, #0
 800ee14:	f104 0a1a 	add.w	sl, r4, #26
 800ee18:	e7f2      	b.n	800ee00 <_printf_float+0x410>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e7df      	b.n	800edde <_printf_float+0x3ee>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	464a      	mov	r2, r9
 800ee22:	4631      	mov	r1, r6
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f ae3e 	beq.w	800eaaa <_printf_float+0xba>
 800ee2e:	f108 0801 	add.w	r8, r8, #1
 800ee32:	68e3      	ldr	r3, [r4, #12]
 800ee34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee36:	1a9b      	subs	r3, r3, r2
 800ee38:	4543      	cmp	r3, r8
 800ee3a:	dcf0      	bgt.n	800ee1e <_printf_float+0x42e>
 800ee3c:	e6fc      	b.n	800ec38 <_printf_float+0x248>
 800ee3e:	f04f 0800 	mov.w	r8, #0
 800ee42:	f104 0919 	add.w	r9, r4, #25
 800ee46:	e7f4      	b.n	800ee32 <_printf_float+0x442>
 800ee48:	2900      	cmp	r1, #0
 800ee4a:	f43f ae8b 	beq.w	800eb64 <_printf_float+0x174>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ee54:	ab09      	add	r3, sp, #36	; 0x24
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	ec49 8b10 	vmov	d0, r8, r9
 800ee5c:	6022      	str	r2, [r4, #0]
 800ee5e:	f8cd a004 	str.w	sl, [sp, #4]
 800ee62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee66:	4628      	mov	r0, r5
 800ee68:	f7ff fd2e 	bl	800e8c8 <__cvt>
 800ee6c:	4680      	mov	r8, r0
 800ee6e:	e648      	b.n	800eb02 <_printf_float+0x112>

0800ee70 <_printf_common>:
 800ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee74:	4691      	mov	r9, r2
 800ee76:	461f      	mov	r7, r3
 800ee78:	688a      	ldr	r2, [r1, #8]
 800ee7a:	690b      	ldr	r3, [r1, #16]
 800ee7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	bfb8      	it	lt
 800ee84:	4613      	movlt	r3, r2
 800ee86:	f8c9 3000 	str.w	r3, [r9]
 800ee8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460c      	mov	r4, r1
 800ee92:	b112      	cbz	r2, 800ee9a <_printf_common+0x2a>
 800ee94:	3301      	adds	r3, #1
 800ee96:	f8c9 3000 	str.w	r3, [r9]
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	0699      	lsls	r1, r3, #26
 800ee9e:	bf42      	ittt	mi
 800eea0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eea4:	3302      	addmi	r3, #2
 800eea6:	f8c9 3000 	strmi.w	r3, [r9]
 800eeaa:	6825      	ldr	r5, [r4, #0]
 800eeac:	f015 0506 	ands.w	r5, r5, #6
 800eeb0:	d107      	bne.n	800eec2 <_printf_common+0x52>
 800eeb2:	f104 0a19 	add.w	sl, r4, #25
 800eeb6:	68e3      	ldr	r3, [r4, #12]
 800eeb8:	f8d9 2000 	ldr.w	r2, [r9]
 800eebc:	1a9b      	subs	r3, r3, r2
 800eebe:	42ab      	cmp	r3, r5
 800eec0:	dc28      	bgt.n	800ef14 <_printf_common+0xa4>
 800eec2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eec6:	6822      	ldr	r2, [r4, #0]
 800eec8:	3300      	adds	r3, #0
 800eeca:	bf18      	it	ne
 800eecc:	2301      	movne	r3, #1
 800eece:	0692      	lsls	r2, r2, #26
 800eed0:	d42d      	bmi.n	800ef2e <_printf_common+0xbe>
 800eed2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eed6:	4639      	mov	r1, r7
 800eed8:	4630      	mov	r0, r6
 800eeda:	47c0      	blx	r8
 800eedc:	3001      	adds	r0, #1
 800eede:	d020      	beq.n	800ef22 <_printf_common+0xb2>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	68e5      	ldr	r5, [r4, #12]
 800eee4:	f8d9 2000 	ldr.w	r2, [r9]
 800eee8:	f003 0306 	and.w	r3, r3, #6
 800eeec:	2b04      	cmp	r3, #4
 800eeee:	bf08      	it	eq
 800eef0:	1aad      	subeq	r5, r5, r2
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	6922      	ldr	r2, [r4, #16]
 800eef6:	bf0c      	ite	eq
 800eef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eefc:	2500      	movne	r5, #0
 800eefe:	4293      	cmp	r3, r2
 800ef00:	bfc4      	itt	gt
 800ef02:	1a9b      	subgt	r3, r3, r2
 800ef04:	18ed      	addgt	r5, r5, r3
 800ef06:	f04f 0900 	mov.w	r9, #0
 800ef0a:	341a      	adds	r4, #26
 800ef0c:	454d      	cmp	r5, r9
 800ef0e:	d11a      	bne.n	800ef46 <_printf_common+0xd6>
 800ef10:	2000      	movs	r0, #0
 800ef12:	e008      	b.n	800ef26 <_printf_common+0xb6>
 800ef14:	2301      	movs	r3, #1
 800ef16:	4652      	mov	r2, sl
 800ef18:	4639      	mov	r1, r7
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	47c0      	blx	r8
 800ef1e:	3001      	adds	r0, #1
 800ef20:	d103      	bne.n	800ef2a <_printf_common+0xba>
 800ef22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2a:	3501      	adds	r5, #1
 800ef2c:	e7c3      	b.n	800eeb6 <_printf_common+0x46>
 800ef2e:	18e1      	adds	r1, r4, r3
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	2030      	movs	r0, #48	; 0x30
 800ef34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef38:	4422      	add	r2, r4
 800ef3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef42:	3302      	adds	r3, #2
 800ef44:	e7c5      	b.n	800eed2 <_printf_common+0x62>
 800ef46:	2301      	movs	r3, #1
 800ef48:	4622      	mov	r2, r4
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	47c0      	blx	r8
 800ef50:	3001      	adds	r0, #1
 800ef52:	d0e6      	beq.n	800ef22 <_printf_common+0xb2>
 800ef54:	f109 0901 	add.w	r9, r9, #1
 800ef58:	e7d8      	b.n	800ef0c <_printf_common+0x9c>
	...

0800ef5c <_printf_i>:
 800ef5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ef64:	460c      	mov	r4, r1
 800ef66:	7e09      	ldrb	r1, [r1, #24]
 800ef68:	b085      	sub	sp, #20
 800ef6a:	296e      	cmp	r1, #110	; 0x6e
 800ef6c:	4617      	mov	r7, r2
 800ef6e:	4606      	mov	r6, r0
 800ef70:	4698      	mov	r8, r3
 800ef72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef74:	f000 80b3 	beq.w	800f0de <_printf_i+0x182>
 800ef78:	d822      	bhi.n	800efc0 <_printf_i+0x64>
 800ef7a:	2963      	cmp	r1, #99	; 0x63
 800ef7c:	d036      	beq.n	800efec <_printf_i+0x90>
 800ef7e:	d80a      	bhi.n	800ef96 <_printf_i+0x3a>
 800ef80:	2900      	cmp	r1, #0
 800ef82:	f000 80b9 	beq.w	800f0f8 <_printf_i+0x19c>
 800ef86:	2958      	cmp	r1, #88	; 0x58
 800ef88:	f000 8083 	beq.w	800f092 <_printf_i+0x136>
 800ef8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ef94:	e032      	b.n	800effc <_printf_i+0xa0>
 800ef96:	2964      	cmp	r1, #100	; 0x64
 800ef98:	d001      	beq.n	800ef9e <_printf_i+0x42>
 800ef9a:	2969      	cmp	r1, #105	; 0x69
 800ef9c:	d1f6      	bne.n	800ef8c <_printf_i+0x30>
 800ef9e:	6820      	ldr	r0, [r4, #0]
 800efa0:	6813      	ldr	r3, [r2, #0]
 800efa2:	0605      	lsls	r5, r0, #24
 800efa4:	f103 0104 	add.w	r1, r3, #4
 800efa8:	d52a      	bpl.n	800f000 <_printf_i+0xa4>
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	6011      	str	r1, [r2, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	da03      	bge.n	800efba <_printf_i+0x5e>
 800efb2:	222d      	movs	r2, #45	; 0x2d
 800efb4:	425b      	negs	r3, r3
 800efb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800efba:	486f      	ldr	r0, [pc, #444]	; (800f178 <_printf_i+0x21c>)
 800efbc:	220a      	movs	r2, #10
 800efbe:	e039      	b.n	800f034 <_printf_i+0xd8>
 800efc0:	2973      	cmp	r1, #115	; 0x73
 800efc2:	f000 809d 	beq.w	800f100 <_printf_i+0x1a4>
 800efc6:	d808      	bhi.n	800efda <_printf_i+0x7e>
 800efc8:	296f      	cmp	r1, #111	; 0x6f
 800efca:	d020      	beq.n	800f00e <_printf_i+0xb2>
 800efcc:	2970      	cmp	r1, #112	; 0x70
 800efce:	d1dd      	bne.n	800ef8c <_printf_i+0x30>
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	f043 0320 	orr.w	r3, r3, #32
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	e003      	b.n	800efe2 <_printf_i+0x86>
 800efda:	2975      	cmp	r1, #117	; 0x75
 800efdc:	d017      	beq.n	800f00e <_printf_i+0xb2>
 800efde:	2978      	cmp	r1, #120	; 0x78
 800efe0:	d1d4      	bne.n	800ef8c <_printf_i+0x30>
 800efe2:	2378      	movs	r3, #120	; 0x78
 800efe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efe8:	4864      	ldr	r0, [pc, #400]	; (800f17c <_printf_i+0x220>)
 800efea:	e055      	b.n	800f098 <_printf_i+0x13c>
 800efec:	6813      	ldr	r3, [r2, #0]
 800efee:	1d19      	adds	r1, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	6011      	str	r1, [r2, #0]
 800eff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800effc:	2301      	movs	r3, #1
 800effe:	e08c      	b.n	800f11a <_printf_i+0x1be>
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6011      	str	r1, [r2, #0]
 800f004:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f008:	bf18      	it	ne
 800f00a:	b21b      	sxthne	r3, r3
 800f00c:	e7cf      	b.n	800efae <_printf_i+0x52>
 800f00e:	6813      	ldr	r3, [r2, #0]
 800f010:	6825      	ldr	r5, [r4, #0]
 800f012:	1d18      	adds	r0, r3, #4
 800f014:	6010      	str	r0, [r2, #0]
 800f016:	0628      	lsls	r0, r5, #24
 800f018:	d501      	bpl.n	800f01e <_printf_i+0xc2>
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	e002      	b.n	800f024 <_printf_i+0xc8>
 800f01e:	0668      	lsls	r0, r5, #25
 800f020:	d5fb      	bpl.n	800f01a <_printf_i+0xbe>
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	4854      	ldr	r0, [pc, #336]	; (800f178 <_printf_i+0x21c>)
 800f026:	296f      	cmp	r1, #111	; 0x6f
 800f028:	bf14      	ite	ne
 800f02a:	220a      	movne	r2, #10
 800f02c:	2208      	moveq	r2, #8
 800f02e:	2100      	movs	r1, #0
 800f030:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f034:	6865      	ldr	r5, [r4, #4]
 800f036:	60a5      	str	r5, [r4, #8]
 800f038:	2d00      	cmp	r5, #0
 800f03a:	f2c0 8095 	blt.w	800f168 <_printf_i+0x20c>
 800f03e:	6821      	ldr	r1, [r4, #0]
 800f040:	f021 0104 	bic.w	r1, r1, #4
 800f044:	6021      	str	r1, [r4, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d13d      	bne.n	800f0c6 <_printf_i+0x16a>
 800f04a:	2d00      	cmp	r5, #0
 800f04c:	f040 808e 	bne.w	800f16c <_printf_i+0x210>
 800f050:	4665      	mov	r5, ip
 800f052:	2a08      	cmp	r2, #8
 800f054:	d10b      	bne.n	800f06e <_printf_i+0x112>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	07db      	lsls	r3, r3, #31
 800f05a:	d508      	bpl.n	800f06e <_printf_i+0x112>
 800f05c:	6923      	ldr	r3, [r4, #16]
 800f05e:	6862      	ldr	r2, [r4, #4]
 800f060:	429a      	cmp	r2, r3
 800f062:	bfde      	ittt	le
 800f064:	2330      	movle	r3, #48	; 0x30
 800f066:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f06a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f06e:	ebac 0305 	sub.w	r3, ip, r5
 800f072:	6123      	str	r3, [r4, #16]
 800f074:	f8cd 8000 	str.w	r8, [sp]
 800f078:	463b      	mov	r3, r7
 800f07a:	aa03      	add	r2, sp, #12
 800f07c:	4621      	mov	r1, r4
 800f07e:	4630      	mov	r0, r6
 800f080:	f7ff fef6 	bl	800ee70 <_printf_common>
 800f084:	3001      	adds	r0, #1
 800f086:	d14d      	bne.n	800f124 <_printf_i+0x1c8>
 800f088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f08c:	b005      	add	sp, #20
 800f08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f092:	4839      	ldr	r0, [pc, #228]	; (800f178 <_printf_i+0x21c>)
 800f094:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f098:	6813      	ldr	r3, [r2, #0]
 800f09a:	6821      	ldr	r1, [r4, #0]
 800f09c:	1d1d      	adds	r5, r3, #4
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6015      	str	r5, [r2, #0]
 800f0a2:	060a      	lsls	r2, r1, #24
 800f0a4:	d50b      	bpl.n	800f0be <_printf_i+0x162>
 800f0a6:	07ca      	lsls	r2, r1, #31
 800f0a8:	bf44      	itt	mi
 800f0aa:	f041 0120 	orrmi.w	r1, r1, #32
 800f0ae:	6021      	strmi	r1, [r4, #0]
 800f0b0:	b91b      	cbnz	r3, 800f0ba <_printf_i+0x15e>
 800f0b2:	6822      	ldr	r2, [r4, #0]
 800f0b4:	f022 0220 	bic.w	r2, r2, #32
 800f0b8:	6022      	str	r2, [r4, #0]
 800f0ba:	2210      	movs	r2, #16
 800f0bc:	e7b7      	b.n	800f02e <_printf_i+0xd2>
 800f0be:	064d      	lsls	r5, r1, #25
 800f0c0:	bf48      	it	mi
 800f0c2:	b29b      	uxthmi	r3, r3
 800f0c4:	e7ef      	b.n	800f0a6 <_printf_i+0x14a>
 800f0c6:	4665      	mov	r5, ip
 800f0c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0cc:	fb02 3311 	mls	r3, r2, r1, r3
 800f0d0:	5cc3      	ldrb	r3, [r0, r3]
 800f0d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	d1f5      	bne.n	800f0c8 <_printf_i+0x16c>
 800f0dc:	e7b9      	b.n	800f052 <_printf_i+0xf6>
 800f0de:	6813      	ldr	r3, [r2, #0]
 800f0e0:	6825      	ldr	r5, [r4, #0]
 800f0e2:	6961      	ldr	r1, [r4, #20]
 800f0e4:	1d18      	adds	r0, r3, #4
 800f0e6:	6010      	str	r0, [r2, #0]
 800f0e8:	0628      	lsls	r0, r5, #24
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	d501      	bpl.n	800f0f2 <_printf_i+0x196>
 800f0ee:	6019      	str	r1, [r3, #0]
 800f0f0:	e002      	b.n	800f0f8 <_printf_i+0x19c>
 800f0f2:	066a      	lsls	r2, r5, #25
 800f0f4:	d5fb      	bpl.n	800f0ee <_printf_i+0x192>
 800f0f6:	8019      	strh	r1, [r3, #0]
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	4665      	mov	r5, ip
 800f0fe:	e7b9      	b.n	800f074 <_printf_i+0x118>
 800f100:	6813      	ldr	r3, [r2, #0]
 800f102:	1d19      	adds	r1, r3, #4
 800f104:	6011      	str	r1, [r2, #0]
 800f106:	681d      	ldr	r5, [r3, #0]
 800f108:	6862      	ldr	r2, [r4, #4]
 800f10a:	2100      	movs	r1, #0
 800f10c:	4628      	mov	r0, r5
 800f10e:	f7f1 f88f 	bl	8000230 <memchr>
 800f112:	b108      	cbz	r0, 800f118 <_printf_i+0x1bc>
 800f114:	1b40      	subs	r0, r0, r5
 800f116:	6060      	str	r0, [r4, #4]
 800f118:	6863      	ldr	r3, [r4, #4]
 800f11a:	6123      	str	r3, [r4, #16]
 800f11c:	2300      	movs	r3, #0
 800f11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f122:	e7a7      	b.n	800f074 <_printf_i+0x118>
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	462a      	mov	r2, r5
 800f128:	4639      	mov	r1, r7
 800f12a:	4630      	mov	r0, r6
 800f12c:	47c0      	blx	r8
 800f12e:	3001      	adds	r0, #1
 800f130:	d0aa      	beq.n	800f088 <_printf_i+0x12c>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	079b      	lsls	r3, r3, #30
 800f136:	d413      	bmi.n	800f160 <_printf_i+0x204>
 800f138:	68e0      	ldr	r0, [r4, #12]
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	4298      	cmp	r0, r3
 800f13e:	bfb8      	it	lt
 800f140:	4618      	movlt	r0, r3
 800f142:	e7a3      	b.n	800f08c <_printf_i+0x130>
 800f144:	2301      	movs	r3, #1
 800f146:	464a      	mov	r2, r9
 800f148:	4639      	mov	r1, r7
 800f14a:	4630      	mov	r0, r6
 800f14c:	47c0      	blx	r8
 800f14e:	3001      	adds	r0, #1
 800f150:	d09a      	beq.n	800f088 <_printf_i+0x12c>
 800f152:	3501      	adds	r5, #1
 800f154:	68e3      	ldr	r3, [r4, #12]
 800f156:	9a03      	ldr	r2, [sp, #12]
 800f158:	1a9b      	subs	r3, r3, r2
 800f15a:	42ab      	cmp	r3, r5
 800f15c:	dcf2      	bgt.n	800f144 <_printf_i+0x1e8>
 800f15e:	e7eb      	b.n	800f138 <_printf_i+0x1dc>
 800f160:	2500      	movs	r5, #0
 800f162:	f104 0919 	add.w	r9, r4, #25
 800f166:	e7f5      	b.n	800f154 <_printf_i+0x1f8>
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1ac      	bne.n	800f0c6 <_printf_i+0x16a>
 800f16c:	7803      	ldrb	r3, [r0, #0]
 800f16e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f176:	e76c      	b.n	800f052 <_printf_i+0xf6>
 800f178:	080138bc 	.word	0x080138bc
 800f17c:	080138cd 	.word	0x080138cd

0800f180 <_puts_r>:
 800f180:	b570      	push	{r4, r5, r6, lr}
 800f182:	460e      	mov	r6, r1
 800f184:	4605      	mov	r5, r0
 800f186:	b118      	cbz	r0, 800f190 <_puts_r+0x10>
 800f188:	6983      	ldr	r3, [r0, #24]
 800f18a:	b90b      	cbnz	r3, 800f190 <_puts_r+0x10>
 800f18c:	f001 f894 	bl	80102b8 <__sinit>
 800f190:	69ab      	ldr	r3, [r5, #24]
 800f192:	68ac      	ldr	r4, [r5, #8]
 800f194:	b913      	cbnz	r3, 800f19c <_puts_r+0x1c>
 800f196:	4628      	mov	r0, r5
 800f198:	f001 f88e 	bl	80102b8 <__sinit>
 800f19c:	4b23      	ldr	r3, [pc, #140]	; (800f22c <_puts_r+0xac>)
 800f19e:	429c      	cmp	r4, r3
 800f1a0:	d117      	bne.n	800f1d2 <_puts_r+0x52>
 800f1a2:	686c      	ldr	r4, [r5, #4]
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	071b      	lsls	r3, r3, #28
 800f1a8:	d51d      	bpl.n	800f1e6 <_puts_r+0x66>
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	b1db      	cbz	r3, 800f1e6 <_puts_r+0x66>
 800f1ae:	3e01      	subs	r6, #1
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	60a3      	str	r3, [r4, #8]
 800f1ba:	b9e9      	cbnz	r1, 800f1f8 <_puts_r+0x78>
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	da2e      	bge.n	800f21e <_puts_r+0x9e>
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	210a      	movs	r1, #10
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f000 f883 	bl	800f2d0 <__swbuf_r>
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	d011      	beq.n	800f1f2 <_puts_r+0x72>
 800f1ce:	200a      	movs	r0, #10
 800f1d0:	e011      	b.n	800f1f6 <_puts_r+0x76>
 800f1d2:	4b17      	ldr	r3, [pc, #92]	; (800f230 <_puts_r+0xb0>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d101      	bne.n	800f1dc <_puts_r+0x5c>
 800f1d8:	68ac      	ldr	r4, [r5, #8]
 800f1da:	e7e3      	b.n	800f1a4 <_puts_r+0x24>
 800f1dc:	4b15      	ldr	r3, [pc, #84]	; (800f234 <_puts_r+0xb4>)
 800f1de:	429c      	cmp	r4, r3
 800f1e0:	bf08      	it	eq
 800f1e2:	68ec      	ldreq	r4, [r5, #12]
 800f1e4:	e7de      	b.n	800f1a4 <_puts_r+0x24>
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f000 f8c3 	bl	800f374 <__swsetup_r>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d0dd      	beq.n	800f1ae <_puts_r+0x2e>
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	da04      	bge.n	800f206 <_puts_r+0x86>
 800f1fc:	69a2      	ldr	r2, [r4, #24]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	dc06      	bgt.n	800f210 <_puts_r+0x90>
 800f202:	290a      	cmp	r1, #10
 800f204:	d004      	beq.n	800f210 <_puts_r+0x90>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	6022      	str	r2, [r4, #0]
 800f20c:	7019      	strb	r1, [r3, #0]
 800f20e:	e7cf      	b.n	800f1b0 <_puts_r+0x30>
 800f210:	4622      	mov	r2, r4
 800f212:	4628      	mov	r0, r5
 800f214:	f000 f85c 	bl	800f2d0 <__swbuf_r>
 800f218:	3001      	adds	r0, #1
 800f21a:	d1c9      	bne.n	800f1b0 <_puts_r+0x30>
 800f21c:	e7e9      	b.n	800f1f2 <_puts_r+0x72>
 800f21e:	6823      	ldr	r3, [r4, #0]
 800f220:	200a      	movs	r0, #10
 800f222:	1c5a      	adds	r2, r3, #1
 800f224:	6022      	str	r2, [r4, #0]
 800f226:	7018      	strb	r0, [r3, #0]
 800f228:	e7e5      	b.n	800f1f6 <_puts_r+0x76>
 800f22a:	bf00      	nop
 800f22c:	0801390c 	.word	0x0801390c
 800f230:	0801392c 	.word	0x0801392c
 800f234:	080138ec 	.word	0x080138ec

0800f238 <puts>:
 800f238:	4b02      	ldr	r3, [pc, #8]	; (800f244 <puts+0xc>)
 800f23a:	4601      	mov	r1, r0
 800f23c:	6818      	ldr	r0, [r3, #0]
 800f23e:	f7ff bf9f 	b.w	800f180 <_puts_r>
 800f242:	bf00      	nop
 800f244:	200017f4 	.word	0x200017f4

0800f248 <sniprintf>:
 800f248:	b40c      	push	{r2, r3}
 800f24a:	b530      	push	{r4, r5, lr}
 800f24c:	4b17      	ldr	r3, [pc, #92]	; (800f2ac <sniprintf+0x64>)
 800f24e:	1e0c      	subs	r4, r1, #0
 800f250:	b09d      	sub	sp, #116	; 0x74
 800f252:	681d      	ldr	r5, [r3, #0]
 800f254:	da08      	bge.n	800f268 <sniprintf+0x20>
 800f256:	238b      	movs	r3, #139	; 0x8b
 800f258:	602b      	str	r3, [r5, #0]
 800f25a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f25e:	b01d      	add	sp, #116	; 0x74
 800f260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f264:	b002      	add	sp, #8
 800f266:	4770      	bx	lr
 800f268:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f26c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f270:	bf14      	ite	ne
 800f272:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f276:	4623      	moveq	r3, r4
 800f278:	9304      	str	r3, [sp, #16]
 800f27a:	9307      	str	r3, [sp, #28]
 800f27c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f280:	9002      	str	r0, [sp, #8]
 800f282:	9006      	str	r0, [sp, #24]
 800f284:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f28a:	ab21      	add	r3, sp, #132	; 0x84
 800f28c:	a902      	add	r1, sp, #8
 800f28e:	4628      	mov	r0, r5
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	f001 fd0b 	bl	8010cac <_svfiprintf_r>
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	bfbc      	itt	lt
 800f29a:	238b      	movlt	r3, #139	; 0x8b
 800f29c:	602b      	strlt	r3, [r5, #0]
 800f29e:	2c00      	cmp	r4, #0
 800f2a0:	d0dd      	beq.n	800f25e <sniprintf+0x16>
 800f2a2:	9b02      	ldr	r3, [sp, #8]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	701a      	strb	r2, [r3, #0]
 800f2a8:	e7d9      	b.n	800f25e <sniprintf+0x16>
 800f2aa:	bf00      	nop
 800f2ac:	200017f4 	.word	0x200017f4

0800f2b0 <strcat>:
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	781a      	ldrb	r2, [r3, #0]
 800f2b6:	1c5c      	adds	r4, r3, #1
 800f2b8:	b93a      	cbnz	r2, 800f2ca <strcat+0x1a>
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2c4:	2a00      	cmp	r2, #0
 800f2c6:	d1f9      	bne.n	800f2bc <strcat+0xc>
 800f2c8:	bd10      	pop	{r4, pc}
 800f2ca:	4623      	mov	r3, r4
 800f2cc:	e7f2      	b.n	800f2b4 <strcat+0x4>
	...

0800f2d0 <__swbuf_r>:
 800f2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d2:	460e      	mov	r6, r1
 800f2d4:	4614      	mov	r4, r2
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	b118      	cbz	r0, 800f2e2 <__swbuf_r+0x12>
 800f2da:	6983      	ldr	r3, [r0, #24]
 800f2dc:	b90b      	cbnz	r3, 800f2e2 <__swbuf_r+0x12>
 800f2de:	f000 ffeb 	bl	80102b8 <__sinit>
 800f2e2:	4b21      	ldr	r3, [pc, #132]	; (800f368 <__swbuf_r+0x98>)
 800f2e4:	429c      	cmp	r4, r3
 800f2e6:	d12a      	bne.n	800f33e <__swbuf_r+0x6e>
 800f2e8:	686c      	ldr	r4, [r5, #4]
 800f2ea:	69a3      	ldr	r3, [r4, #24]
 800f2ec:	60a3      	str	r3, [r4, #8]
 800f2ee:	89a3      	ldrh	r3, [r4, #12]
 800f2f0:	071a      	lsls	r2, r3, #28
 800f2f2:	d52e      	bpl.n	800f352 <__swbuf_r+0x82>
 800f2f4:	6923      	ldr	r3, [r4, #16]
 800f2f6:	b363      	cbz	r3, 800f352 <__swbuf_r+0x82>
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	6820      	ldr	r0, [r4, #0]
 800f2fc:	1ac0      	subs	r0, r0, r3
 800f2fe:	6963      	ldr	r3, [r4, #20]
 800f300:	b2f6      	uxtb	r6, r6
 800f302:	4283      	cmp	r3, r0
 800f304:	4637      	mov	r7, r6
 800f306:	dc04      	bgt.n	800f312 <__swbuf_r+0x42>
 800f308:	4621      	mov	r1, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	f000 ff6a 	bl	80101e4 <_fflush_r>
 800f310:	bb28      	cbnz	r0, 800f35e <__swbuf_r+0x8e>
 800f312:	68a3      	ldr	r3, [r4, #8]
 800f314:	3b01      	subs	r3, #1
 800f316:	60a3      	str	r3, [r4, #8]
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	1c5a      	adds	r2, r3, #1
 800f31c:	6022      	str	r2, [r4, #0]
 800f31e:	701e      	strb	r6, [r3, #0]
 800f320:	6963      	ldr	r3, [r4, #20]
 800f322:	3001      	adds	r0, #1
 800f324:	4283      	cmp	r3, r0
 800f326:	d004      	beq.n	800f332 <__swbuf_r+0x62>
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	07db      	lsls	r3, r3, #31
 800f32c:	d519      	bpl.n	800f362 <__swbuf_r+0x92>
 800f32e:	2e0a      	cmp	r6, #10
 800f330:	d117      	bne.n	800f362 <__swbuf_r+0x92>
 800f332:	4621      	mov	r1, r4
 800f334:	4628      	mov	r0, r5
 800f336:	f000 ff55 	bl	80101e4 <_fflush_r>
 800f33a:	b190      	cbz	r0, 800f362 <__swbuf_r+0x92>
 800f33c:	e00f      	b.n	800f35e <__swbuf_r+0x8e>
 800f33e:	4b0b      	ldr	r3, [pc, #44]	; (800f36c <__swbuf_r+0x9c>)
 800f340:	429c      	cmp	r4, r3
 800f342:	d101      	bne.n	800f348 <__swbuf_r+0x78>
 800f344:	68ac      	ldr	r4, [r5, #8]
 800f346:	e7d0      	b.n	800f2ea <__swbuf_r+0x1a>
 800f348:	4b09      	ldr	r3, [pc, #36]	; (800f370 <__swbuf_r+0xa0>)
 800f34a:	429c      	cmp	r4, r3
 800f34c:	bf08      	it	eq
 800f34e:	68ec      	ldreq	r4, [r5, #12]
 800f350:	e7cb      	b.n	800f2ea <__swbuf_r+0x1a>
 800f352:	4621      	mov	r1, r4
 800f354:	4628      	mov	r0, r5
 800f356:	f000 f80d 	bl	800f374 <__swsetup_r>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d0cc      	beq.n	800f2f8 <__swbuf_r+0x28>
 800f35e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f362:	4638      	mov	r0, r7
 800f364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f366:	bf00      	nop
 800f368:	0801390c 	.word	0x0801390c
 800f36c:	0801392c 	.word	0x0801392c
 800f370:	080138ec 	.word	0x080138ec

0800f374 <__swsetup_r>:
 800f374:	4b32      	ldr	r3, [pc, #200]	; (800f440 <__swsetup_r+0xcc>)
 800f376:	b570      	push	{r4, r5, r6, lr}
 800f378:	681d      	ldr	r5, [r3, #0]
 800f37a:	4606      	mov	r6, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	b125      	cbz	r5, 800f38a <__swsetup_r+0x16>
 800f380:	69ab      	ldr	r3, [r5, #24]
 800f382:	b913      	cbnz	r3, 800f38a <__swsetup_r+0x16>
 800f384:	4628      	mov	r0, r5
 800f386:	f000 ff97 	bl	80102b8 <__sinit>
 800f38a:	4b2e      	ldr	r3, [pc, #184]	; (800f444 <__swsetup_r+0xd0>)
 800f38c:	429c      	cmp	r4, r3
 800f38e:	d10f      	bne.n	800f3b0 <__swsetup_r+0x3c>
 800f390:	686c      	ldr	r4, [r5, #4]
 800f392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f396:	b29a      	uxth	r2, r3
 800f398:	0715      	lsls	r5, r2, #28
 800f39a:	d42c      	bmi.n	800f3f6 <__swsetup_r+0x82>
 800f39c:	06d0      	lsls	r0, r2, #27
 800f39e:	d411      	bmi.n	800f3c4 <__swsetup_r+0x50>
 800f3a0:	2209      	movs	r2, #9
 800f3a2:	6032      	str	r2, [r6, #0]
 800f3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3ae:	e03e      	b.n	800f42e <__swsetup_r+0xba>
 800f3b0:	4b25      	ldr	r3, [pc, #148]	; (800f448 <__swsetup_r+0xd4>)
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	d101      	bne.n	800f3ba <__swsetup_r+0x46>
 800f3b6:	68ac      	ldr	r4, [r5, #8]
 800f3b8:	e7eb      	b.n	800f392 <__swsetup_r+0x1e>
 800f3ba:	4b24      	ldr	r3, [pc, #144]	; (800f44c <__swsetup_r+0xd8>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	bf08      	it	eq
 800f3c0:	68ec      	ldreq	r4, [r5, #12]
 800f3c2:	e7e6      	b.n	800f392 <__swsetup_r+0x1e>
 800f3c4:	0751      	lsls	r1, r2, #29
 800f3c6:	d512      	bpl.n	800f3ee <__swsetup_r+0x7a>
 800f3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ca:	b141      	cbz	r1, 800f3de <__swsetup_r+0x6a>
 800f3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3d0:	4299      	cmp	r1, r3
 800f3d2:	d002      	beq.n	800f3da <__swsetup_r+0x66>
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f001 fb67 	bl	8010aa8 <_free_r>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3e4:	81a3      	strh	r3, [r4, #12]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	6063      	str	r3, [r4, #4]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f043 0308 	orr.w	r3, r3, #8
 800f3f4:	81a3      	strh	r3, [r4, #12]
 800f3f6:	6923      	ldr	r3, [r4, #16]
 800f3f8:	b94b      	cbnz	r3, 800f40e <__swsetup_r+0x9a>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f404:	d003      	beq.n	800f40e <__swsetup_r+0x9a>
 800f406:	4621      	mov	r1, r4
 800f408:	4630      	mov	r0, r6
 800f40a:	f001 f811 	bl	8010430 <__smakebuf_r>
 800f40e:	89a2      	ldrh	r2, [r4, #12]
 800f410:	f012 0301 	ands.w	r3, r2, #1
 800f414:	d00c      	beq.n	800f430 <__swsetup_r+0xbc>
 800f416:	2300      	movs	r3, #0
 800f418:	60a3      	str	r3, [r4, #8]
 800f41a:	6963      	ldr	r3, [r4, #20]
 800f41c:	425b      	negs	r3, r3
 800f41e:	61a3      	str	r3, [r4, #24]
 800f420:	6923      	ldr	r3, [r4, #16]
 800f422:	b953      	cbnz	r3, 800f43a <__swsetup_r+0xc6>
 800f424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f428:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f42c:	d1ba      	bne.n	800f3a4 <__swsetup_r+0x30>
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	0792      	lsls	r2, r2, #30
 800f432:	bf58      	it	pl
 800f434:	6963      	ldrpl	r3, [r4, #20]
 800f436:	60a3      	str	r3, [r4, #8]
 800f438:	e7f2      	b.n	800f420 <__swsetup_r+0xac>
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7f7      	b.n	800f42e <__swsetup_r+0xba>
 800f43e:	bf00      	nop
 800f440:	200017f4 	.word	0x200017f4
 800f444:	0801390c 	.word	0x0801390c
 800f448:	0801392c 	.word	0x0801392c
 800f44c:	080138ec 	.word	0x080138ec

0800f450 <quorem>:
 800f450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f454:	6903      	ldr	r3, [r0, #16]
 800f456:	690c      	ldr	r4, [r1, #16]
 800f458:	42a3      	cmp	r3, r4
 800f45a:	4680      	mov	r8, r0
 800f45c:	f2c0 8082 	blt.w	800f564 <quorem+0x114>
 800f460:	3c01      	subs	r4, #1
 800f462:	f101 0714 	add.w	r7, r1, #20
 800f466:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f46a:	f100 0614 	add.w	r6, r0, #20
 800f46e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f472:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f476:	eb06 030c 	add.w	r3, r6, ip
 800f47a:	3501      	adds	r5, #1
 800f47c:	eb07 090c 	add.w	r9, r7, ip
 800f480:	9301      	str	r3, [sp, #4]
 800f482:	fbb0 f5f5 	udiv	r5, r0, r5
 800f486:	b395      	cbz	r5, 800f4ee <quorem+0x9e>
 800f488:	f04f 0a00 	mov.w	sl, #0
 800f48c:	4638      	mov	r0, r7
 800f48e:	46b6      	mov	lr, r6
 800f490:	46d3      	mov	fp, sl
 800f492:	f850 2b04 	ldr.w	r2, [r0], #4
 800f496:	b293      	uxth	r3, r2
 800f498:	fb05 a303 	mla	r3, r5, r3, sl
 800f49c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	ebab 0303 	sub.w	r3, fp, r3
 800f4a6:	0c12      	lsrs	r2, r2, #16
 800f4a8:	f8de b000 	ldr.w	fp, [lr]
 800f4ac:	fb05 a202 	mla	r2, r5, r2, sl
 800f4b0:	fa13 f38b 	uxtah	r3, r3, fp
 800f4b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f4b8:	fa1f fb82 	uxth.w	fp, r2
 800f4bc:	f8de 2000 	ldr.w	r2, [lr]
 800f4c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f4c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4ce:	4581      	cmp	r9, r0
 800f4d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f4d4:	f84e 3b04 	str.w	r3, [lr], #4
 800f4d8:	d2db      	bcs.n	800f492 <quorem+0x42>
 800f4da:	f856 300c 	ldr.w	r3, [r6, ip]
 800f4de:	b933      	cbnz	r3, 800f4ee <quorem+0x9e>
 800f4e0:	9b01      	ldr	r3, [sp, #4]
 800f4e2:	3b04      	subs	r3, #4
 800f4e4:	429e      	cmp	r6, r3
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	d330      	bcc.n	800f54c <quorem+0xfc>
 800f4ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	f001 fa06 	bl	8010900 <__mcmp>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	db25      	blt.n	800f544 <quorem+0xf4>
 800f4f8:	3501      	adds	r5, #1
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f04f 0c00 	mov.w	ip, #0
 800f500:	f857 2b04 	ldr.w	r2, [r7], #4
 800f504:	f8d0 e000 	ldr.w	lr, [r0]
 800f508:	b293      	uxth	r3, r2
 800f50a:	ebac 0303 	sub.w	r3, ip, r3
 800f50e:	0c12      	lsrs	r2, r2, #16
 800f510:	fa13 f38e 	uxtah	r3, r3, lr
 800f514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f522:	45b9      	cmp	r9, r7
 800f524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f528:	f840 3b04 	str.w	r3, [r0], #4
 800f52c:	d2e8      	bcs.n	800f500 <quorem+0xb0>
 800f52e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f532:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f536:	b92a      	cbnz	r2, 800f544 <quorem+0xf4>
 800f538:	3b04      	subs	r3, #4
 800f53a:	429e      	cmp	r6, r3
 800f53c:	461a      	mov	r2, r3
 800f53e:	d30b      	bcc.n	800f558 <quorem+0x108>
 800f540:	f8c8 4010 	str.w	r4, [r8, #16]
 800f544:	4628      	mov	r0, r5
 800f546:	b003      	add	sp, #12
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	6812      	ldr	r2, [r2, #0]
 800f54e:	3b04      	subs	r3, #4
 800f550:	2a00      	cmp	r2, #0
 800f552:	d1ca      	bne.n	800f4ea <quorem+0x9a>
 800f554:	3c01      	subs	r4, #1
 800f556:	e7c5      	b.n	800f4e4 <quorem+0x94>
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	3b04      	subs	r3, #4
 800f55c:	2a00      	cmp	r2, #0
 800f55e:	d1ef      	bne.n	800f540 <quorem+0xf0>
 800f560:	3c01      	subs	r4, #1
 800f562:	e7ea      	b.n	800f53a <quorem+0xea>
 800f564:	2000      	movs	r0, #0
 800f566:	e7ee      	b.n	800f546 <quorem+0xf6>

0800f568 <_dtoa_r>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	ec57 6b10 	vmov	r6, r7, d0
 800f570:	b097      	sub	sp, #92	; 0x5c
 800f572:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f574:	9106      	str	r1, [sp, #24]
 800f576:	4604      	mov	r4, r0
 800f578:	920b      	str	r2, [sp, #44]	; 0x2c
 800f57a:	9312      	str	r3, [sp, #72]	; 0x48
 800f57c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f580:	e9cd 6700 	strd	r6, r7, [sp]
 800f584:	b93d      	cbnz	r5, 800f596 <_dtoa_r+0x2e>
 800f586:	2010      	movs	r0, #16
 800f588:	f000 ff92 	bl	80104b0 <malloc>
 800f58c:	6260      	str	r0, [r4, #36]	; 0x24
 800f58e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f592:	6005      	str	r5, [r0, #0]
 800f594:	60c5      	str	r5, [r0, #12]
 800f596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f598:	6819      	ldr	r1, [r3, #0]
 800f59a:	b151      	cbz	r1, 800f5b2 <_dtoa_r+0x4a>
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	604a      	str	r2, [r1, #4]
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	4093      	lsls	r3, r2
 800f5a4:	608b      	str	r3, [r1, #8]
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f000 ffc9 	bl	801053e <_Bfree>
 800f5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	1e3b      	subs	r3, r7, #0
 800f5b4:	bfbb      	ittet	lt
 800f5b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f5ba:	9301      	strlt	r3, [sp, #4]
 800f5bc:	2300      	movge	r3, #0
 800f5be:	2201      	movlt	r2, #1
 800f5c0:	bfac      	ite	ge
 800f5c2:	f8c8 3000 	strge.w	r3, [r8]
 800f5c6:	f8c8 2000 	strlt.w	r2, [r8]
 800f5ca:	4baf      	ldr	r3, [pc, #700]	; (800f888 <_dtoa_r+0x320>)
 800f5cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f5d0:	ea33 0308 	bics.w	r3, r3, r8
 800f5d4:	d114      	bne.n	800f600 <_dtoa_r+0x98>
 800f5d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f5d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5dc:	6013      	str	r3, [r2, #0]
 800f5de:	9b00      	ldr	r3, [sp, #0]
 800f5e0:	b923      	cbnz	r3, 800f5ec <_dtoa_r+0x84>
 800f5e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f000 8542 	beq.w	8010070 <_dtoa_r+0xb08>
 800f5ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f89c <_dtoa_r+0x334>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	f000 8544 	beq.w	8010080 <_dtoa_r+0xb18>
 800f5f8:	f10b 0303 	add.w	r3, fp, #3
 800f5fc:	f000 bd3e 	b.w	801007c <_dtoa_r+0xb14>
 800f600:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f604:	2200      	movs	r2, #0
 800f606:	2300      	movs	r3, #0
 800f608:	4630      	mov	r0, r6
 800f60a:	4639      	mov	r1, r7
 800f60c:	f7f1 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 800f610:	4681      	mov	r9, r0
 800f612:	b168      	cbz	r0, 800f630 <_dtoa_r+0xc8>
 800f614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f616:	2301      	movs	r3, #1
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f000 8524 	beq.w	801006a <_dtoa_r+0xb02>
 800f622:	4b9a      	ldr	r3, [pc, #616]	; (800f88c <_dtoa_r+0x324>)
 800f624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f626:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f62a:	6013      	str	r3, [r2, #0]
 800f62c:	f000 bd28 	b.w	8010080 <_dtoa_r+0xb18>
 800f630:	aa14      	add	r2, sp, #80	; 0x50
 800f632:	a915      	add	r1, sp, #84	; 0x54
 800f634:	ec47 6b10 	vmov	d0, r6, r7
 800f638:	4620      	mov	r0, r4
 800f63a:	f001 f9d8 	bl	80109ee <__d2b>
 800f63e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f642:	9004      	str	r0, [sp, #16]
 800f644:	2d00      	cmp	r5, #0
 800f646:	d07c      	beq.n	800f742 <_dtoa_r+0x1da>
 800f648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f64c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f650:	46b2      	mov	sl, r6
 800f652:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f656:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f65a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f65e:	2200      	movs	r2, #0
 800f660:	4b8b      	ldr	r3, [pc, #556]	; (800f890 <_dtoa_r+0x328>)
 800f662:	4650      	mov	r0, sl
 800f664:	4659      	mov	r1, fp
 800f666:	f7f0 fe37 	bl	80002d8 <__aeabi_dsub>
 800f66a:	a381      	add	r3, pc, #516	; (adr r3, 800f870 <_dtoa_r+0x308>)
 800f66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f670:	f7f0 ffea 	bl	8000648 <__aeabi_dmul>
 800f674:	a380      	add	r3, pc, #512	; (adr r3, 800f878 <_dtoa_r+0x310>)
 800f676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67a:	f7f0 fe2f 	bl	80002dc <__adddf3>
 800f67e:	4606      	mov	r6, r0
 800f680:	4628      	mov	r0, r5
 800f682:	460f      	mov	r7, r1
 800f684:	f7f0 ff76 	bl	8000574 <__aeabi_i2d>
 800f688:	a37d      	add	r3, pc, #500	; (adr r3, 800f880 <_dtoa_r+0x318>)
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	f7f0 ffdb 	bl	8000648 <__aeabi_dmul>
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	4630      	mov	r0, r6
 800f698:	4639      	mov	r1, r7
 800f69a:	f7f0 fe1f 	bl	80002dc <__adddf3>
 800f69e:	4606      	mov	r6, r0
 800f6a0:	460f      	mov	r7, r1
 800f6a2:	f7f1 fa81 	bl	8000ba8 <__aeabi_d2iz>
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	f7f1 fa3c 	bl	8000b2c <__aeabi_dcmplt>
 800f6b4:	b148      	cbz	r0, 800f6ca <_dtoa_r+0x162>
 800f6b6:	4650      	mov	r0, sl
 800f6b8:	f7f0 ff5c 	bl	8000574 <__aeabi_i2d>
 800f6bc:	4632      	mov	r2, r6
 800f6be:	463b      	mov	r3, r7
 800f6c0:	f7f1 fa2a 	bl	8000b18 <__aeabi_dcmpeq>
 800f6c4:	b908      	cbnz	r0, 800f6ca <_dtoa_r+0x162>
 800f6c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f6ca:	f1ba 0f16 	cmp.w	sl, #22
 800f6ce:	d859      	bhi.n	800f784 <_dtoa_r+0x21c>
 800f6d0:	4970      	ldr	r1, [pc, #448]	; (800f894 <_dtoa_r+0x32c>)
 800f6d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f6d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6de:	f7f1 fa43 	bl	8000b68 <__aeabi_dcmpgt>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d050      	beq.n	800f788 <_dtoa_r+0x220>
 800f6e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6f0:	1b5d      	subs	r5, r3, r5
 800f6f2:	f1b5 0801 	subs.w	r8, r5, #1
 800f6f6:	bf49      	itett	mi
 800f6f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800f6fc:	2300      	movpl	r3, #0
 800f6fe:	9305      	strmi	r3, [sp, #20]
 800f700:	f04f 0800 	movmi.w	r8, #0
 800f704:	bf58      	it	pl
 800f706:	9305      	strpl	r3, [sp, #20]
 800f708:	f1ba 0f00 	cmp.w	sl, #0
 800f70c:	db3e      	blt.n	800f78c <_dtoa_r+0x224>
 800f70e:	2300      	movs	r3, #0
 800f710:	44d0      	add	r8, sl
 800f712:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f716:	9307      	str	r3, [sp, #28]
 800f718:	9b06      	ldr	r3, [sp, #24]
 800f71a:	2b09      	cmp	r3, #9
 800f71c:	f200 8090 	bhi.w	800f840 <_dtoa_r+0x2d8>
 800f720:	2b05      	cmp	r3, #5
 800f722:	bfc4      	itt	gt
 800f724:	3b04      	subgt	r3, #4
 800f726:	9306      	strgt	r3, [sp, #24]
 800f728:	9b06      	ldr	r3, [sp, #24]
 800f72a:	f1a3 0302 	sub.w	r3, r3, #2
 800f72e:	bfcc      	ite	gt
 800f730:	2500      	movgt	r5, #0
 800f732:	2501      	movle	r5, #1
 800f734:	2b03      	cmp	r3, #3
 800f736:	f200 808f 	bhi.w	800f858 <_dtoa_r+0x2f0>
 800f73a:	e8df f003 	tbb	[pc, r3]
 800f73e:	7f7d      	.short	0x7f7d
 800f740:	7131      	.short	0x7131
 800f742:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f746:	441d      	add	r5, r3
 800f748:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f74c:	2820      	cmp	r0, #32
 800f74e:	dd13      	ble.n	800f778 <_dtoa_r+0x210>
 800f750:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f754:	9b00      	ldr	r3, [sp, #0]
 800f756:	fa08 f800 	lsl.w	r8, r8, r0
 800f75a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f75e:	fa23 f000 	lsr.w	r0, r3, r0
 800f762:	ea48 0000 	orr.w	r0, r8, r0
 800f766:	f7f0 fef5 	bl	8000554 <__aeabi_ui2d>
 800f76a:	2301      	movs	r3, #1
 800f76c:	4682      	mov	sl, r0
 800f76e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f772:	3d01      	subs	r5, #1
 800f774:	9313      	str	r3, [sp, #76]	; 0x4c
 800f776:	e772      	b.n	800f65e <_dtoa_r+0xf6>
 800f778:	9b00      	ldr	r3, [sp, #0]
 800f77a:	f1c0 0020 	rsb	r0, r0, #32
 800f77e:	fa03 f000 	lsl.w	r0, r3, r0
 800f782:	e7f0      	b.n	800f766 <_dtoa_r+0x1fe>
 800f784:	2301      	movs	r3, #1
 800f786:	e7b1      	b.n	800f6ec <_dtoa_r+0x184>
 800f788:	900f      	str	r0, [sp, #60]	; 0x3c
 800f78a:	e7b0      	b.n	800f6ee <_dtoa_r+0x186>
 800f78c:	9b05      	ldr	r3, [sp, #20]
 800f78e:	eba3 030a 	sub.w	r3, r3, sl
 800f792:	9305      	str	r3, [sp, #20]
 800f794:	f1ca 0300 	rsb	r3, sl, #0
 800f798:	9307      	str	r3, [sp, #28]
 800f79a:	2300      	movs	r3, #0
 800f79c:	930e      	str	r3, [sp, #56]	; 0x38
 800f79e:	e7bb      	b.n	800f718 <_dtoa_r+0x1b0>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	dd59      	ble.n	800f85e <_dtoa_r+0x2f6>
 800f7aa:	9302      	str	r3, [sp, #8]
 800f7ac:	4699      	mov	r9, r3
 800f7ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	6072      	str	r2, [r6, #4]
 800f7b4:	2204      	movs	r2, #4
 800f7b6:	f102 0014 	add.w	r0, r2, #20
 800f7ba:	4298      	cmp	r0, r3
 800f7bc:	6871      	ldr	r1, [r6, #4]
 800f7be:	d953      	bls.n	800f868 <_dtoa_r+0x300>
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f000 fe88 	bl	80104d6 <_Balloc>
 800f7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c8:	6030      	str	r0, [r6, #0]
 800f7ca:	f1b9 0f0e 	cmp.w	r9, #14
 800f7ce:	f8d3 b000 	ldr.w	fp, [r3]
 800f7d2:	f200 80e6 	bhi.w	800f9a2 <_dtoa_r+0x43a>
 800f7d6:	2d00      	cmp	r5, #0
 800f7d8:	f000 80e3 	beq.w	800f9a2 <_dtoa_r+0x43a>
 800f7dc:	ed9d 7b00 	vldr	d7, [sp]
 800f7e0:	f1ba 0f00 	cmp.w	sl, #0
 800f7e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f7e8:	dd74      	ble.n	800f8d4 <_dtoa_r+0x36c>
 800f7ea:	4a2a      	ldr	r2, [pc, #168]	; (800f894 <_dtoa_r+0x32c>)
 800f7ec:	f00a 030f 	and.w	r3, sl, #15
 800f7f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f7f4:	ed93 7b00 	vldr	d7, [r3]
 800f7f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f7fc:	06f0      	lsls	r0, r6, #27
 800f7fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f802:	d565      	bpl.n	800f8d0 <_dtoa_r+0x368>
 800f804:	4b24      	ldr	r3, [pc, #144]	; (800f898 <_dtoa_r+0x330>)
 800f806:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f80a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f80e:	f7f1 f845 	bl	800089c <__aeabi_ddiv>
 800f812:	e9cd 0100 	strd	r0, r1, [sp]
 800f816:	f006 060f 	and.w	r6, r6, #15
 800f81a:	2503      	movs	r5, #3
 800f81c:	4f1e      	ldr	r7, [pc, #120]	; (800f898 <_dtoa_r+0x330>)
 800f81e:	e04c      	b.n	800f8ba <_dtoa_r+0x352>
 800f820:	2301      	movs	r3, #1
 800f822:	930a      	str	r3, [sp, #40]	; 0x28
 800f824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f826:	4453      	add	r3, sl
 800f828:	f103 0901 	add.w	r9, r3, #1
 800f82c:	9302      	str	r3, [sp, #8]
 800f82e:	464b      	mov	r3, r9
 800f830:	2b01      	cmp	r3, #1
 800f832:	bfb8      	it	lt
 800f834:	2301      	movlt	r3, #1
 800f836:	e7ba      	b.n	800f7ae <_dtoa_r+0x246>
 800f838:	2300      	movs	r3, #0
 800f83a:	e7b2      	b.n	800f7a2 <_dtoa_r+0x23a>
 800f83c:	2300      	movs	r3, #0
 800f83e:	e7f0      	b.n	800f822 <_dtoa_r+0x2ba>
 800f840:	2501      	movs	r5, #1
 800f842:	2300      	movs	r3, #0
 800f844:	9306      	str	r3, [sp, #24]
 800f846:	950a      	str	r5, [sp, #40]	; 0x28
 800f848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f84c:	9302      	str	r3, [sp, #8]
 800f84e:	4699      	mov	r9, r3
 800f850:	2200      	movs	r2, #0
 800f852:	2312      	movs	r3, #18
 800f854:	920b      	str	r2, [sp, #44]	; 0x2c
 800f856:	e7aa      	b.n	800f7ae <_dtoa_r+0x246>
 800f858:	2301      	movs	r3, #1
 800f85a:	930a      	str	r3, [sp, #40]	; 0x28
 800f85c:	e7f4      	b.n	800f848 <_dtoa_r+0x2e0>
 800f85e:	2301      	movs	r3, #1
 800f860:	9302      	str	r3, [sp, #8]
 800f862:	4699      	mov	r9, r3
 800f864:	461a      	mov	r2, r3
 800f866:	e7f5      	b.n	800f854 <_dtoa_r+0x2ec>
 800f868:	3101      	adds	r1, #1
 800f86a:	6071      	str	r1, [r6, #4]
 800f86c:	0052      	lsls	r2, r2, #1
 800f86e:	e7a2      	b.n	800f7b6 <_dtoa_r+0x24e>
 800f870:	636f4361 	.word	0x636f4361
 800f874:	3fd287a7 	.word	0x3fd287a7
 800f878:	8b60c8b3 	.word	0x8b60c8b3
 800f87c:	3fc68a28 	.word	0x3fc68a28
 800f880:	509f79fb 	.word	0x509f79fb
 800f884:	3fd34413 	.word	0x3fd34413
 800f888:	7ff00000 	.word	0x7ff00000
 800f88c:	08013b6d 	.word	0x08013b6d
 800f890:	3ff80000 	.word	0x3ff80000
 800f894:	08013978 	.word	0x08013978
 800f898:	08013950 	.word	0x08013950
 800f89c:	080138e7 	.word	0x080138e7
 800f8a0:	07f1      	lsls	r1, r6, #31
 800f8a2:	d508      	bpl.n	800f8b6 <_dtoa_r+0x34e>
 800f8a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8ac:	f7f0 fecc 	bl	8000648 <__aeabi_dmul>
 800f8b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8b4:	3501      	adds	r5, #1
 800f8b6:	1076      	asrs	r6, r6, #1
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	2e00      	cmp	r6, #0
 800f8bc:	d1f0      	bne.n	800f8a0 <_dtoa_r+0x338>
 800f8be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f8c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8c6:	f7f0 ffe9 	bl	800089c <__aeabi_ddiv>
 800f8ca:	e9cd 0100 	strd	r0, r1, [sp]
 800f8ce:	e01a      	b.n	800f906 <_dtoa_r+0x39e>
 800f8d0:	2502      	movs	r5, #2
 800f8d2:	e7a3      	b.n	800f81c <_dtoa_r+0x2b4>
 800f8d4:	f000 80a0 	beq.w	800fa18 <_dtoa_r+0x4b0>
 800f8d8:	f1ca 0600 	rsb	r6, sl, #0
 800f8dc:	4b9f      	ldr	r3, [pc, #636]	; (800fb5c <_dtoa_r+0x5f4>)
 800f8de:	4fa0      	ldr	r7, [pc, #640]	; (800fb60 <_dtoa_r+0x5f8>)
 800f8e0:	f006 020f 	and.w	r2, r6, #15
 800f8e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f8f0:	f7f0 feaa 	bl	8000648 <__aeabi_dmul>
 800f8f4:	e9cd 0100 	strd	r0, r1, [sp]
 800f8f8:	1136      	asrs	r6, r6, #4
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	2502      	movs	r5, #2
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	d17f      	bne.n	800fa02 <_dtoa_r+0x49a>
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1e1      	bne.n	800f8ca <_dtoa_r+0x362>
 800f906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 8087 	beq.w	800fa1c <_dtoa_r+0x4b4>
 800f90e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f912:	2200      	movs	r2, #0
 800f914:	4b93      	ldr	r3, [pc, #588]	; (800fb64 <_dtoa_r+0x5fc>)
 800f916:	4630      	mov	r0, r6
 800f918:	4639      	mov	r1, r7
 800f91a:	f7f1 f907 	bl	8000b2c <__aeabi_dcmplt>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d07c      	beq.n	800fa1c <_dtoa_r+0x4b4>
 800f922:	f1b9 0f00 	cmp.w	r9, #0
 800f926:	d079      	beq.n	800fa1c <_dtoa_r+0x4b4>
 800f928:	9b02      	ldr	r3, [sp, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd35      	ble.n	800f99a <_dtoa_r+0x432>
 800f92e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f932:	9308      	str	r3, [sp, #32]
 800f934:	4639      	mov	r1, r7
 800f936:	2200      	movs	r2, #0
 800f938:	4b8b      	ldr	r3, [pc, #556]	; (800fb68 <_dtoa_r+0x600>)
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7f0 fe84 	bl	8000648 <__aeabi_dmul>
 800f940:	e9cd 0100 	strd	r0, r1, [sp]
 800f944:	9f02      	ldr	r7, [sp, #8]
 800f946:	3501      	adds	r5, #1
 800f948:	4628      	mov	r0, r5
 800f94a:	f7f0 fe13 	bl	8000574 <__aeabi_i2d>
 800f94e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f952:	f7f0 fe79 	bl	8000648 <__aeabi_dmul>
 800f956:	2200      	movs	r2, #0
 800f958:	4b84      	ldr	r3, [pc, #528]	; (800fb6c <_dtoa_r+0x604>)
 800f95a:	f7f0 fcbf 	bl	80002dc <__adddf3>
 800f95e:	4605      	mov	r5, r0
 800f960:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f964:	2f00      	cmp	r7, #0
 800f966:	d15d      	bne.n	800fa24 <_dtoa_r+0x4bc>
 800f968:	2200      	movs	r2, #0
 800f96a:	4b81      	ldr	r3, [pc, #516]	; (800fb70 <_dtoa_r+0x608>)
 800f96c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f970:	f7f0 fcb2 	bl	80002d8 <__aeabi_dsub>
 800f974:	462a      	mov	r2, r5
 800f976:	4633      	mov	r3, r6
 800f978:	e9cd 0100 	strd	r0, r1, [sp]
 800f97c:	f7f1 f8f4 	bl	8000b68 <__aeabi_dcmpgt>
 800f980:	2800      	cmp	r0, #0
 800f982:	f040 8288 	bne.w	800fe96 <_dtoa_r+0x92e>
 800f986:	462a      	mov	r2, r5
 800f988:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f98c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f990:	f7f1 f8cc 	bl	8000b2c <__aeabi_dcmplt>
 800f994:	2800      	cmp	r0, #0
 800f996:	f040 827c 	bne.w	800fe92 <_dtoa_r+0x92a>
 800f99a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f99e:	e9cd 2300 	strd	r2, r3, [sp]
 800f9a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f2c0 8150 	blt.w	800fc4a <_dtoa_r+0x6e2>
 800f9aa:	f1ba 0f0e 	cmp.w	sl, #14
 800f9ae:	f300 814c 	bgt.w	800fc4a <_dtoa_r+0x6e2>
 800f9b2:	4b6a      	ldr	r3, [pc, #424]	; (800fb5c <_dtoa_r+0x5f4>)
 800f9b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9b8:	ed93 7b00 	vldr	d7, [r3]
 800f9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9c4:	f280 80d8 	bge.w	800fb78 <_dtoa_r+0x610>
 800f9c8:	f1b9 0f00 	cmp.w	r9, #0
 800f9cc:	f300 80d4 	bgt.w	800fb78 <_dtoa_r+0x610>
 800f9d0:	f040 825e 	bne.w	800fe90 <_dtoa_r+0x928>
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	4b66      	ldr	r3, [pc, #408]	; (800fb70 <_dtoa_r+0x608>)
 800f9d8:	ec51 0b17 	vmov	r0, r1, d7
 800f9dc:	f7f0 fe34 	bl	8000648 <__aeabi_dmul>
 800f9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9e4:	f7f1 f8b6 	bl	8000b54 <__aeabi_dcmpge>
 800f9e8:	464f      	mov	r7, r9
 800f9ea:	464e      	mov	r6, r9
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	f040 8234 	bne.w	800fe5a <_dtoa_r+0x8f2>
 800f9f2:	2331      	movs	r3, #49	; 0x31
 800f9f4:	f10b 0501 	add.w	r5, fp, #1
 800f9f8:	f88b 3000 	strb.w	r3, [fp]
 800f9fc:	f10a 0a01 	add.w	sl, sl, #1
 800fa00:	e22f      	b.n	800fe62 <_dtoa_r+0x8fa>
 800fa02:	07f2      	lsls	r2, r6, #31
 800fa04:	d505      	bpl.n	800fa12 <_dtoa_r+0x4aa>
 800fa06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa0a:	f7f0 fe1d 	bl	8000648 <__aeabi_dmul>
 800fa0e:	3501      	adds	r5, #1
 800fa10:	2301      	movs	r3, #1
 800fa12:	1076      	asrs	r6, r6, #1
 800fa14:	3708      	adds	r7, #8
 800fa16:	e772      	b.n	800f8fe <_dtoa_r+0x396>
 800fa18:	2502      	movs	r5, #2
 800fa1a:	e774      	b.n	800f906 <_dtoa_r+0x39e>
 800fa1c:	f8cd a020 	str.w	sl, [sp, #32]
 800fa20:	464f      	mov	r7, r9
 800fa22:	e791      	b.n	800f948 <_dtoa_r+0x3e0>
 800fa24:	4b4d      	ldr	r3, [pc, #308]	; (800fb5c <_dtoa_r+0x5f4>)
 800fa26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fa2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d047      	beq.n	800fac4 <_dtoa_r+0x55c>
 800fa34:	4602      	mov	r2, r0
 800fa36:	460b      	mov	r3, r1
 800fa38:	2000      	movs	r0, #0
 800fa3a:	494e      	ldr	r1, [pc, #312]	; (800fb74 <_dtoa_r+0x60c>)
 800fa3c:	f7f0 ff2e 	bl	800089c <__aeabi_ddiv>
 800fa40:	462a      	mov	r2, r5
 800fa42:	4633      	mov	r3, r6
 800fa44:	f7f0 fc48 	bl	80002d8 <__aeabi_dsub>
 800fa48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa4c:	465d      	mov	r5, fp
 800fa4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa52:	f7f1 f8a9 	bl	8000ba8 <__aeabi_d2iz>
 800fa56:	4606      	mov	r6, r0
 800fa58:	f7f0 fd8c 	bl	8000574 <__aeabi_i2d>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa64:	f7f0 fc38 	bl	80002d8 <__aeabi_dsub>
 800fa68:	3630      	adds	r6, #48	; 0x30
 800fa6a:	f805 6b01 	strb.w	r6, [r5], #1
 800fa6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa72:	e9cd 0100 	strd	r0, r1, [sp]
 800fa76:	f7f1 f859 	bl	8000b2c <__aeabi_dcmplt>
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d163      	bne.n	800fb46 <_dtoa_r+0x5de>
 800fa7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa82:	2000      	movs	r0, #0
 800fa84:	4937      	ldr	r1, [pc, #220]	; (800fb64 <_dtoa_r+0x5fc>)
 800fa86:	f7f0 fc27 	bl	80002d8 <__aeabi_dsub>
 800fa8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa8e:	f7f1 f84d 	bl	8000b2c <__aeabi_dcmplt>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	f040 80b7 	bne.w	800fc06 <_dtoa_r+0x69e>
 800fa98:	eba5 030b 	sub.w	r3, r5, fp
 800fa9c:	429f      	cmp	r7, r3
 800fa9e:	f77f af7c 	ble.w	800f99a <_dtoa_r+0x432>
 800faa2:	2200      	movs	r2, #0
 800faa4:	4b30      	ldr	r3, [pc, #192]	; (800fb68 <_dtoa_r+0x600>)
 800faa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800faaa:	f7f0 fdcd 	bl	8000648 <__aeabi_dmul>
 800faae:	2200      	movs	r2, #0
 800fab0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fab4:	4b2c      	ldr	r3, [pc, #176]	; (800fb68 <_dtoa_r+0x600>)
 800fab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faba:	f7f0 fdc5 	bl	8000648 <__aeabi_dmul>
 800fabe:	e9cd 0100 	strd	r0, r1, [sp]
 800fac2:	e7c4      	b.n	800fa4e <_dtoa_r+0x4e6>
 800fac4:	462a      	mov	r2, r5
 800fac6:	4633      	mov	r3, r6
 800fac8:	f7f0 fdbe 	bl	8000648 <__aeabi_dmul>
 800facc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fad0:	eb0b 0507 	add.w	r5, fp, r7
 800fad4:	465e      	mov	r6, fp
 800fad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fada:	f7f1 f865 	bl	8000ba8 <__aeabi_d2iz>
 800fade:	4607      	mov	r7, r0
 800fae0:	f7f0 fd48 	bl	8000574 <__aeabi_i2d>
 800fae4:	3730      	adds	r7, #48	; 0x30
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faee:	f7f0 fbf3 	bl	80002d8 <__aeabi_dsub>
 800faf2:	f806 7b01 	strb.w	r7, [r6], #1
 800faf6:	42ae      	cmp	r6, r5
 800faf8:	e9cd 0100 	strd	r0, r1, [sp]
 800fafc:	f04f 0200 	mov.w	r2, #0
 800fb00:	d126      	bne.n	800fb50 <_dtoa_r+0x5e8>
 800fb02:	4b1c      	ldr	r3, [pc, #112]	; (800fb74 <_dtoa_r+0x60c>)
 800fb04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb08:	f7f0 fbe8 	bl	80002dc <__adddf3>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb14:	f7f1 f828 	bl	8000b68 <__aeabi_dcmpgt>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d174      	bne.n	800fc06 <_dtoa_r+0x69e>
 800fb1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb20:	2000      	movs	r0, #0
 800fb22:	4914      	ldr	r1, [pc, #80]	; (800fb74 <_dtoa_r+0x60c>)
 800fb24:	f7f0 fbd8 	bl	80002d8 <__aeabi_dsub>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb30:	f7f0 fffc 	bl	8000b2c <__aeabi_dcmplt>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	f43f af30 	beq.w	800f99a <_dtoa_r+0x432>
 800fb3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb3e:	2b30      	cmp	r3, #48	; 0x30
 800fb40:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fb44:	d002      	beq.n	800fb4c <_dtoa_r+0x5e4>
 800fb46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fb4a:	e04a      	b.n	800fbe2 <_dtoa_r+0x67a>
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	e7f4      	b.n	800fb3a <_dtoa_r+0x5d2>
 800fb50:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <_dtoa_r+0x600>)
 800fb52:	f7f0 fd79 	bl	8000648 <__aeabi_dmul>
 800fb56:	e9cd 0100 	strd	r0, r1, [sp]
 800fb5a:	e7bc      	b.n	800fad6 <_dtoa_r+0x56e>
 800fb5c:	08013978 	.word	0x08013978
 800fb60:	08013950 	.word	0x08013950
 800fb64:	3ff00000 	.word	0x3ff00000
 800fb68:	40240000 	.word	0x40240000
 800fb6c:	401c0000 	.word	0x401c0000
 800fb70:	40140000 	.word	0x40140000
 800fb74:	3fe00000 	.word	0x3fe00000
 800fb78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb7c:	465d      	mov	r5, fp
 800fb7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb82:	4630      	mov	r0, r6
 800fb84:	4639      	mov	r1, r7
 800fb86:	f7f0 fe89 	bl	800089c <__aeabi_ddiv>
 800fb8a:	f7f1 f80d 	bl	8000ba8 <__aeabi_d2iz>
 800fb8e:	4680      	mov	r8, r0
 800fb90:	f7f0 fcf0 	bl	8000574 <__aeabi_i2d>
 800fb94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb98:	f7f0 fd56 	bl	8000648 <__aeabi_dmul>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4630      	mov	r0, r6
 800fba2:	4639      	mov	r1, r7
 800fba4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fba8:	f7f0 fb96 	bl	80002d8 <__aeabi_dsub>
 800fbac:	f805 6b01 	strb.w	r6, [r5], #1
 800fbb0:	eba5 060b 	sub.w	r6, r5, fp
 800fbb4:	45b1      	cmp	r9, r6
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	d139      	bne.n	800fc30 <_dtoa_r+0x6c8>
 800fbbc:	f7f0 fb8e 	bl	80002dc <__adddf3>
 800fbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbc4:	4606      	mov	r6, r0
 800fbc6:	460f      	mov	r7, r1
 800fbc8:	f7f0 ffce 	bl	8000b68 <__aeabi_dcmpgt>
 800fbcc:	b9c8      	cbnz	r0, 800fc02 <_dtoa_r+0x69a>
 800fbce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	f7f0 ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 800fbda:	b110      	cbz	r0, 800fbe2 <_dtoa_r+0x67a>
 800fbdc:	f018 0f01 	tst.w	r8, #1
 800fbe0:	d10f      	bne.n	800fc02 <_dtoa_r+0x69a>
 800fbe2:	9904      	ldr	r1, [sp, #16]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 fcaa 	bl	801053e <_Bfree>
 800fbea:	2300      	movs	r3, #0
 800fbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fbee:	702b      	strb	r3, [r5, #0]
 800fbf0:	f10a 0301 	add.w	r3, sl, #1
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 8241 	beq.w	8010080 <_dtoa_r+0xb18>
 800fbfe:	601d      	str	r5, [r3, #0]
 800fc00:	e23e      	b.n	8010080 <_dtoa_r+0xb18>
 800fc02:	f8cd a020 	str.w	sl, [sp, #32]
 800fc06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc0a:	2a39      	cmp	r2, #57	; 0x39
 800fc0c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fc10:	d108      	bne.n	800fc24 <_dtoa_r+0x6bc>
 800fc12:	459b      	cmp	fp, r3
 800fc14:	d10a      	bne.n	800fc2c <_dtoa_r+0x6c4>
 800fc16:	9b08      	ldr	r3, [sp, #32]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	9308      	str	r3, [sp, #32]
 800fc1c:	2330      	movs	r3, #48	; 0x30
 800fc1e:	f88b 3000 	strb.w	r3, [fp]
 800fc22:	465b      	mov	r3, fp
 800fc24:	781a      	ldrb	r2, [r3, #0]
 800fc26:	3201      	adds	r2, #1
 800fc28:	701a      	strb	r2, [r3, #0]
 800fc2a:	e78c      	b.n	800fb46 <_dtoa_r+0x5de>
 800fc2c:	461d      	mov	r5, r3
 800fc2e:	e7ea      	b.n	800fc06 <_dtoa_r+0x69e>
 800fc30:	2200      	movs	r2, #0
 800fc32:	4b9b      	ldr	r3, [pc, #620]	; (800fea0 <_dtoa_r+0x938>)
 800fc34:	f7f0 fd08 	bl	8000648 <__aeabi_dmul>
 800fc38:	2200      	movs	r2, #0
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	4606      	mov	r6, r0
 800fc3e:	460f      	mov	r7, r1
 800fc40:	f7f0 ff6a 	bl	8000b18 <__aeabi_dcmpeq>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d09a      	beq.n	800fb7e <_dtoa_r+0x616>
 800fc48:	e7cb      	b.n	800fbe2 <_dtoa_r+0x67a>
 800fc4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc4c:	2a00      	cmp	r2, #0
 800fc4e:	f000 808b 	beq.w	800fd68 <_dtoa_r+0x800>
 800fc52:	9a06      	ldr	r2, [sp, #24]
 800fc54:	2a01      	cmp	r2, #1
 800fc56:	dc6e      	bgt.n	800fd36 <_dtoa_r+0x7ce>
 800fc58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	d067      	beq.n	800fd2e <_dtoa_r+0x7c6>
 800fc5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc62:	9f07      	ldr	r7, [sp, #28]
 800fc64:	9d05      	ldr	r5, [sp, #20]
 800fc66:	9a05      	ldr	r2, [sp, #20]
 800fc68:	2101      	movs	r1, #1
 800fc6a:	441a      	add	r2, r3
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	9205      	str	r2, [sp, #20]
 800fc70:	4498      	add	r8, r3
 800fc72:	f000 fd04 	bl	801067e <__i2b>
 800fc76:	4606      	mov	r6, r0
 800fc78:	2d00      	cmp	r5, #0
 800fc7a:	dd0c      	ble.n	800fc96 <_dtoa_r+0x72e>
 800fc7c:	f1b8 0f00 	cmp.w	r8, #0
 800fc80:	dd09      	ble.n	800fc96 <_dtoa_r+0x72e>
 800fc82:	4545      	cmp	r5, r8
 800fc84:	9a05      	ldr	r2, [sp, #20]
 800fc86:	462b      	mov	r3, r5
 800fc88:	bfa8      	it	ge
 800fc8a:	4643      	movge	r3, r8
 800fc8c:	1ad2      	subs	r2, r2, r3
 800fc8e:	9205      	str	r2, [sp, #20]
 800fc90:	1aed      	subs	r5, r5, r3
 800fc92:	eba8 0803 	sub.w	r8, r8, r3
 800fc96:	9b07      	ldr	r3, [sp, #28]
 800fc98:	b1eb      	cbz	r3, 800fcd6 <_dtoa_r+0x76e>
 800fc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d067      	beq.n	800fd70 <_dtoa_r+0x808>
 800fca0:	b18f      	cbz	r7, 800fcc6 <_dtoa_r+0x75e>
 800fca2:	4631      	mov	r1, r6
 800fca4:	463a      	mov	r2, r7
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 fd88 	bl	80107bc <__pow5mult>
 800fcac:	9a04      	ldr	r2, [sp, #16]
 800fcae:	4601      	mov	r1, r0
 800fcb0:	4606      	mov	r6, r0
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f000 fcec 	bl	8010690 <__multiply>
 800fcb8:	9904      	ldr	r1, [sp, #16]
 800fcba:	9008      	str	r0, [sp, #32]
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f000 fc3e 	bl	801053e <_Bfree>
 800fcc2:	9b08      	ldr	r3, [sp, #32]
 800fcc4:	9304      	str	r3, [sp, #16]
 800fcc6:	9b07      	ldr	r3, [sp, #28]
 800fcc8:	1bda      	subs	r2, r3, r7
 800fcca:	d004      	beq.n	800fcd6 <_dtoa_r+0x76e>
 800fccc:	9904      	ldr	r1, [sp, #16]
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 fd74 	bl	80107bc <__pow5mult>
 800fcd4:	9004      	str	r0, [sp, #16]
 800fcd6:	2101      	movs	r1, #1
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 fcd0 	bl	801067e <__i2b>
 800fcde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fce0:	4607      	mov	r7, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f000 81d0 	beq.w	8010088 <_dtoa_r+0xb20>
 800fce8:	461a      	mov	r2, r3
 800fcea:	4601      	mov	r1, r0
 800fcec:	4620      	mov	r0, r4
 800fcee:	f000 fd65 	bl	80107bc <__pow5mult>
 800fcf2:	9b06      	ldr	r3, [sp, #24]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	dc40      	bgt.n	800fd7c <_dtoa_r+0x814>
 800fcfa:	9b00      	ldr	r3, [sp, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d139      	bne.n	800fd74 <_dtoa_r+0x80c>
 800fd00:	9b01      	ldr	r3, [sp, #4]
 800fd02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d136      	bne.n	800fd78 <_dtoa_r+0x810>
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd10:	0d1b      	lsrs	r3, r3, #20
 800fd12:	051b      	lsls	r3, r3, #20
 800fd14:	b12b      	cbz	r3, 800fd22 <_dtoa_r+0x7ba>
 800fd16:	9b05      	ldr	r3, [sp, #20]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	9305      	str	r3, [sp, #20]
 800fd1c:	f108 0801 	add.w	r8, r8, #1
 800fd20:	2301      	movs	r3, #1
 800fd22:	9307      	str	r3, [sp, #28]
 800fd24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d12a      	bne.n	800fd80 <_dtoa_r+0x818>
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e030      	b.n	800fd90 <_dtoa_r+0x828>
 800fd2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd34:	e795      	b.n	800fc62 <_dtoa_r+0x6fa>
 800fd36:	9b07      	ldr	r3, [sp, #28]
 800fd38:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fd3c:	42bb      	cmp	r3, r7
 800fd3e:	bfbf      	itttt	lt
 800fd40:	9b07      	ldrlt	r3, [sp, #28]
 800fd42:	9707      	strlt	r7, [sp, #28]
 800fd44:	1afa      	sublt	r2, r7, r3
 800fd46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fd48:	bfbb      	ittet	lt
 800fd4a:	189b      	addlt	r3, r3, r2
 800fd4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fd4e:	1bdf      	subge	r7, r3, r7
 800fd50:	2700      	movlt	r7, #0
 800fd52:	f1b9 0f00 	cmp.w	r9, #0
 800fd56:	bfb5      	itete	lt
 800fd58:	9b05      	ldrlt	r3, [sp, #20]
 800fd5a:	9d05      	ldrge	r5, [sp, #20]
 800fd5c:	eba3 0509 	sublt.w	r5, r3, r9
 800fd60:	464b      	movge	r3, r9
 800fd62:	bfb8      	it	lt
 800fd64:	2300      	movlt	r3, #0
 800fd66:	e77e      	b.n	800fc66 <_dtoa_r+0x6fe>
 800fd68:	9f07      	ldr	r7, [sp, #28]
 800fd6a:	9d05      	ldr	r5, [sp, #20]
 800fd6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd6e:	e783      	b.n	800fc78 <_dtoa_r+0x710>
 800fd70:	9a07      	ldr	r2, [sp, #28]
 800fd72:	e7ab      	b.n	800fccc <_dtoa_r+0x764>
 800fd74:	2300      	movs	r3, #0
 800fd76:	e7d4      	b.n	800fd22 <_dtoa_r+0x7ba>
 800fd78:	9b00      	ldr	r3, [sp, #0]
 800fd7a:	e7d2      	b.n	800fd22 <_dtoa_r+0x7ba>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9307      	str	r3, [sp, #28]
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fd86:	6918      	ldr	r0, [r3, #16]
 800fd88:	f000 fc2b 	bl	80105e2 <__hi0bits>
 800fd8c:	f1c0 0020 	rsb	r0, r0, #32
 800fd90:	4440      	add	r0, r8
 800fd92:	f010 001f 	ands.w	r0, r0, #31
 800fd96:	d047      	beq.n	800fe28 <_dtoa_r+0x8c0>
 800fd98:	f1c0 0320 	rsb	r3, r0, #32
 800fd9c:	2b04      	cmp	r3, #4
 800fd9e:	dd3b      	ble.n	800fe18 <_dtoa_r+0x8b0>
 800fda0:	9b05      	ldr	r3, [sp, #20]
 800fda2:	f1c0 001c 	rsb	r0, r0, #28
 800fda6:	4403      	add	r3, r0
 800fda8:	9305      	str	r3, [sp, #20]
 800fdaa:	4405      	add	r5, r0
 800fdac:	4480      	add	r8, r0
 800fdae:	9b05      	ldr	r3, [sp, #20]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	dd05      	ble.n	800fdc0 <_dtoa_r+0x858>
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	9904      	ldr	r1, [sp, #16]
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f000 fd4d 	bl	8010858 <__lshift>
 800fdbe:	9004      	str	r0, [sp, #16]
 800fdc0:	f1b8 0f00 	cmp.w	r8, #0
 800fdc4:	dd05      	ble.n	800fdd2 <_dtoa_r+0x86a>
 800fdc6:	4639      	mov	r1, r7
 800fdc8:	4642      	mov	r2, r8
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fd44 	bl	8010858 <__lshift>
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdd4:	b353      	cbz	r3, 800fe2c <_dtoa_r+0x8c4>
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	9804      	ldr	r0, [sp, #16]
 800fdda:	f000 fd91 	bl	8010900 <__mcmp>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	da24      	bge.n	800fe2c <_dtoa_r+0x8c4>
 800fde2:	2300      	movs	r3, #0
 800fde4:	220a      	movs	r2, #10
 800fde6:	9904      	ldr	r1, [sp, #16]
 800fde8:	4620      	mov	r0, r4
 800fdea:	f000 fbbf 	bl	801056c <__multadd>
 800fdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdf0:	9004      	str	r0, [sp, #16]
 800fdf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 814d 	beq.w	8010096 <_dtoa_r+0xb2e>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4631      	mov	r1, r6
 800fe00:	220a      	movs	r2, #10
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 fbb2 	bl	801056c <__multadd>
 800fe08:	9b02      	ldr	r3, [sp, #8]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	dc4f      	bgt.n	800feb0 <_dtoa_r+0x948>
 800fe10:	9b06      	ldr	r3, [sp, #24]
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	dd4c      	ble.n	800feb0 <_dtoa_r+0x948>
 800fe16:	e011      	b.n	800fe3c <_dtoa_r+0x8d4>
 800fe18:	d0c9      	beq.n	800fdae <_dtoa_r+0x846>
 800fe1a:	9a05      	ldr	r2, [sp, #20]
 800fe1c:	331c      	adds	r3, #28
 800fe1e:	441a      	add	r2, r3
 800fe20:	9205      	str	r2, [sp, #20]
 800fe22:	441d      	add	r5, r3
 800fe24:	4498      	add	r8, r3
 800fe26:	e7c2      	b.n	800fdae <_dtoa_r+0x846>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	e7f6      	b.n	800fe1a <_dtoa_r+0x8b2>
 800fe2c:	f1b9 0f00 	cmp.w	r9, #0
 800fe30:	dc38      	bgt.n	800fea4 <_dtoa_r+0x93c>
 800fe32:	9b06      	ldr	r3, [sp, #24]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	dd35      	ble.n	800fea4 <_dtoa_r+0x93c>
 800fe38:	f8cd 9008 	str.w	r9, [sp, #8]
 800fe3c:	9b02      	ldr	r3, [sp, #8]
 800fe3e:	b963      	cbnz	r3, 800fe5a <_dtoa_r+0x8f2>
 800fe40:	4639      	mov	r1, r7
 800fe42:	2205      	movs	r2, #5
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 fb91 	bl	801056c <__multadd>
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4607      	mov	r7, r0
 800fe4e:	9804      	ldr	r0, [sp, #16]
 800fe50:	f000 fd56 	bl	8010900 <__mcmp>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f73f adcc 	bgt.w	800f9f2 <_dtoa_r+0x48a>
 800fe5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe5c:	465d      	mov	r5, fp
 800fe5e:	ea6f 0a03 	mvn.w	sl, r3
 800fe62:	f04f 0900 	mov.w	r9, #0
 800fe66:	4639      	mov	r1, r7
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f000 fb68 	bl	801053e <_Bfree>
 800fe6e:	2e00      	cmp	r6, #0
 800fe70:	f43f aeb7 	beq.w	800fbe2 <_dtoa_r+0x67a>
 800fe74:	f1b9 0f00 	cmp.w	r9, #0
 800fe78:	d005      	beq.n	800fe86 <_dtoa_r+0x91e>
 800fe7a:	45b1      	cmp	r9, r6
 800fe7c:	d003      	beq.n	800fe86 <_dtoa_r+0x91e>
 800fe7e:	4649      	mov	r1, r9
 800fe80:	4620      	mov	r0, r4
 800fe82:	f000 fb5c 	bl	801053e <_Bfree>
 800fe86:	4631      	mov	r1, r6
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f000 fb58 	bl	801053e <_Bfree>
 800fe8e:	e6a8      	b.n	800fbe2 <_dtoa_r+0x67a>
 800fe90:	2700      	movs	r7, #0
 800fe92:	463e      	mov	r6, r7
 800fe94:	e7e1      	b.n	800fe5a <_dtoa_r+0x8f2>
 800fe96:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fe9a:	463e      	mov	r6, r7
 800fe9c:	e5a9      	b.n	800f9f2 <_dtoa_r+0x48a>
 800fe9e:	bf00      	nop
 800fea0:	40240000 	.word	0x40240000
 800fea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea6:	f8cd 9008 	str.w	r9, [sp, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f000 80fa 	beq.w	80100a4 <_dtoa_r+0xb3c>
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	dd05      	ble.n	800fec0 <_dtoa_r+0x958>
 800feb4:	4631      	mov	r1, r6
 800feb6:	462a      	mov	r2, r5
 800feb8:	4620      	mov	r0, r4
 800feba:	f000 fccd 	bl	8010858 <__lshift>
 800febe:	4606      	mov	r6, r0
 800fec0:	9b07      	ldr	r3, [sp, #28]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d04c      	beq.n	800ff60 <_dtoa_r+0x9f8>
 800fec6:	6871      	ldr	r1, [r6, #4]
 800fec8:	4620      	mov	r0, r4
 800feca:	f000 fb04 	bl	80104d6 <_Balloc>
 800fece:	6932      	ldr	r2, [r6, #16]
 800fed0:	3202      	adds	r2, #2
 800fed2:	4605      	mov	r5, r0
 800fed4:	0092      	lsls	r2, r2, #2
 800fed6:	f106 010c 	add.w	r1, r6, #12
 800feda:	300c      	adds	r0, #12
 800fedc:	f000 faf0 	bl	80104c0 <memcpy>
 800fee0:	2201      	movs	r2, #1
 800fee2:	4629      	mov	r1, r5
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 fcb7 	bl	8010858 <__lshift>
 800feea:	9b00      	ldr	r3, [sp, #0]
 800feec:	f8cd b014 	str.w	fp, [sp, #20]
 800fef0:	f003 0301 	and.w	r3, r3, #1
 800fef4:	46b1      	mov	r9, r6
 800fef6:	9307      	str	r3, [sp, #28]
 800fef8:	4606      	mov	r6, r0
 800fefa:	4639      	mov	r1, r7
 800fefc:	9804      	ldr	r0, [sp, #16]
 800fefe:	f7ff faa7 	bl	800f450 <quorem>
 800ff02:	4649      	mov	r1, r9
 800ff04:	4605      	mov	r5, r0
 800ff06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ff0a:	9804      	ldr	r0, [sp, #16]
 800ff0c:	f000 fcf8 	bl	8010900 <__mcmp>
 800ff10:	4632      	mov	r2, r6
 800ff12:	9000      	str	r0, [sp, #0]
 800ff14:	4639      	mov	r1, r7
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 fd0c 	bl	8010934 <__mdiff>
 800ff1c:	68c3      	ldr	r3, [r0, #12]
 800ff1e:	4602      	mov	r2, r0
 800ff20:	bb03      	cbnz	r3, 800ff64 <_dtoa_r+0x9fc>
 800ff22:	4601      	mov	r1, r0
 800ff24:	9008      	str	r0, [sp, #32]
 800ff26:	9804      	ldr	r0, [sp, #16]
 800ff28:	f000 fcea 	bl	8010900 <__mcmp>
 800ff2c:	9a08      	ldr	r2, [sp, #32]
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4611      	mov	r1, r2
 800ff32:	4620      	mov	r0, r4
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	f000 fb02 	bl	801053e <_Bfree>
 800ff3a:	9b08      	ldr	r3, [sp, #32]
 800ff3c:	b9a3      	cbnz	r3, 800ff68 <_dtoa_r+0xa00>
 800ff3e:	9a06      	ldr	r2, [sp, #24]
 800ff40:	b992      	cbnz	r2, 800ff68 <_dtoa_r+0xa00>
 800ff42:	9a07      	ldr	r2, [sp, #28]
 800ff44:	b982      	cbnz	r2, 800ff68 <_dtoa_r+0xa00>
 800ff46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff4a:	d029      	beq.n	800ffa0 <_dtoa_r+0xa38>
 800ff4c:	9b00      	ldr	r3, [sp, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	dd01      	ble.n	800ff56 <_dtoa_r+0x9ee>
 800ff52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ff56:	9b05      	ldr	r3, [sp, #20]
 800ff58:	1c5d      	adds	r5, r3, #1
 800ff5a:	f883 8000 	strb.w	r8, [r3]
 800ff5e:	e782      	b.n	800fe66 <_dtoa_r+0x8fe>
 800ff60:	4630      	mov	r0, r6
 800ff62:	e7c2      	b.n	800feea <_dtoa_r+0x982>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e7e3      	b.n	800ff30 <_dtoa_r+0x9c8>
 800ff68:	9a00      	ldr	r2, [sp, #0]
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	db04      	blt.n	800ff78 <_dtoa_r+0xa10>
 800ff6e:	d125      	bne.n	800ffbc <_dtoa_r+0xa54>
 800ff70:	9a06      	ldr	r2, [sp, #24]
 800ff72:	bb1a      	cbnz	r2, 800ffbc <_dtoa_r+0xa54>
 800ff74:	9a07      	ldr	r2, [sp, #28]
 800ff76:	bb0a      	cbnz	r2, 800ffbc <_dtoa_r+0xa54>
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	ddec      	ble.n	800ff56 <_dtoa_r+0x9ee>
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	9904      	ldr	r1, [sp, #16]
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 fc69 	bl	8010858 <__lshift>
 800ff86:	4639      	mov	r1, r7
 800ff88:	9004      	str	r0, [sp, #16]
 800ff8a:	f000 fcb9 	bl	8010900 <__mcmp>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	dc03      	bgt.n	800ff9a <_dtoa_r+0xa32>
 800ff92:	d1e0      	bne.n	800ff56 <_dtoa_r+0x9ee>
 800ff94:	f018 0f01 	tst.w	r8, #1
 800ff98:	d0dd      	beq.n	800ff56 <_dtoa_r+0x9ee>
 800ff9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff9e:	d1d8      	bne.n	800ff52 <_dtoa_r+0x9ea>
 800ffa0:	9b05      	ldr	r3, [sp, #20]
 800ffa2:	9a05      	ldr	r2, [sp, #20]
 800ffa4:	1c5d      	adds	r5, r3, #1
 800ffa6:	2339      	movs	r3, #57	; 0x39
 800ffa8:	7013      	strb	r3, [r2, #0]
 800ffaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffae:	2b39      	cmp	r3, #57	; 0x39
 800ffb0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ffb4:	d04f      	beq.n	8010056 <_dtoa_r+0xaee>
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	7013      	strb	r3, [r2, #0]
 800ffba:	e754      	b.n	800fe66 <_dtoa_r+0x8fe>
 800ffbc:	9a05      	ldr	r2, [sp, #20]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f102 0501 	add.w	r5, r2, #1
 800ffc4:	dd06      	ble.n	800ffd4 <_dtoa_r+0xa6c>
 800ffc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ffca:	d0e9      	beq.n	800ffa0 <_dtoa_r+0xa38>
 800ffcc:	f108 0801 	add.w	r8, r8, #1
 800ffd0:	9b05      	ldr	r3, [sp, #20]
 800ffd2:	e7c2      	b.n	800ff5a <_dtoa_r+0x9f2>
 800ffd4:	9a02      	ldr	r2, [sp, #8]
 800ffd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ffda:	eba5 030b 	sub.w	r3, r5, fp
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d021      	beq.n	8010026 <_dtoa_r+0xabe>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	220a      	movs	r2, #10
 800ffe6:	9904      	ldr	r1, [sp, #16]
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f000 fabf 	bl	801056c <__multadd>
 800ffee:	45b1      	cmp	r9, r6
 800fff0:	9004      	str	r0, [sp, #16]
 800fff2:	f04f 0300 	mov.w	r3, #0
 800fff6:	f04f 020a 	mov.w	r2, #10
 800fffa:	4649      	mov	r1, r9
 800fffc:	4620      	mov	r0, r4
 800fffe:	d105      	bne.n	801000c <_dtoa_r+0xaa4>
 8010000:	f000 fab4 	bl	801056c <__multadd>
 8010004:	4681      	mov	r9, r0
 8010006:	4606      	mov	r6, r0
 8010008:	9505      	str	r5, [sp, #20]
 801000a:	e776      	b.n	800fefa <_dtoa_r+0x992>
 801000c:	f000 faae 	bl	801056c <__multadd>
 8010010:	4631      	mov	r1, r6
 8010012:	4681      	mov	r9, r0
 8010014:	2300      	movs	r3, #0
 8010016:	220a      	movs	r2, #10
 8010018:	4620      	mov	r0, r4
 801001a:	f000 faa7 	bl	801056c <__multadd>
 801001e:	4606      	mov	r6, r0
 8010020:	e7f2      	b.n	8010008 <_dtoa_r+0xaa0>
 8010022:	f04f 0900 	mov.w	r9, #0
 8010026:	2201      	movs	r2, #1
 8010028:	9904      	ldr	r1, [sp, #16]
 801002a:	4620      	mov	r0, r4
 801002c:	f000 fc14 	bl	8010858 <__lshift>
 8010030:	4639      	mov	r1, r7
 8010032:	9004      	str	r0, [sp, #16]
 8010034:	f000 fc64 	bl	8010900 <__mcmp>
 8010038:	2800      	cmp	r0, #0
 801003a:	dcb6      	bgt.n	800ffaa <_dtoa_r+0xa42>
 801003c:	d102      	bne.n	8010044 <_dtoa_r+0xadc>
 801003e:	f018 0f01 	tst.w	r8, #1
 8010042:	d1b2      	bne.n	800ffaa <_dtoa_r+0xa42>
 8010044:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010048:	2b30      	cmp	r3, #48	; 0x30
 801004a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801004e:	f47f af0a 	bne.w	800fe66 <_dtoa_r+0x8fe>
 8010052:	4615      	mov	r5, r2
 8010054:	e7f6      	b.n	8010044 <_dtoa_r+0xadc>
 8010056:	4593      	cmp	fp, r2
 8010058:	d105      	bne.n	8010066 <_dtoa_r+0xafe>
 801005a:	2331      	movs	r3, #49	; 0x31
 801005c:	f10a 0a01 	add.w	sl, sl, #1
 8010060:	f88b 3000 	strb.w	r3, [fp]
 8010064:	e6ff      	b.n	800fe66 <_dtoa_r+0x8fe>
 8010066:	4615      	mov	r5, r2
 8010068:	e79f      	b.n	800ffaa <_dtoa_r+0xa42>
 801006a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80100d0 <_dtoa_r+0xb68>
 801006e:	e007      	b.n	8010080 <_dtoa_r+0xb18>
 8010070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010072:	f8df b060 	ldr.w	fp, [pc, #96]	; 80100d4 <_dtoa_r+0xb6c>
 8010076:	b11b      	cbz	r3, 8010080 <_dtoa_r+0xb18>
 8010078:	f10b 0308 	add.w	r3, fp, #8
 801007c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	4658      	mov	r0, fp
 8010082:	b017      	add	sp, #92	; 0x5c
 8010084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010088:	9b06      	ldr	r3, [sp, #24]
 801008a:	2b01      	cmp	r3, #1
 801008c:	f77f ae35 	ble.w	800fcfa <_dtoa_r+0x792>
 8010090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010092:	9307      	str	r3, [sp, #28]
 8010094:	e649      	b.n	800fd2a <_dtoa_r+0x7c2>
 8010096:	9b02      	ldr	r3, [sp, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	dc03      	bgt.n	80100a4 <_dtoa_r+0xb3c>
 801009c:	9b06      	ldr	r3, [sp, #24]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	f73f aecc 	bgt.w	800fe3c <_dtoa_r+0x8d4>
 80100a4:	465d      	mov	r5, fp
 80100a6:	4639      	mov	r1, r7
 80100a8:	9804      	ldr	r0, [sp, #16]
 80100aa:	f7ff f9d1 	bl	800f450 <quorem>
 80100ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80100b2:	f805 8b01 	strb.w	r8, [r5], #1
 80100b6:	9a02      	ldr	r2, [sp, #8]
 80100b8:	eba5 030b 	sub.w	r3, r5, fp
 80100bc:	429a      	cmp	r2, r3
 80100be:	ddb0      	ble.n	8010022 <_dtoa_r+0xaba>
 80100c0:	2300      	movs	r3, #0
 80100c2:	220a      	movs	r2, #10
 80100c4:	9904      	ldr	r1, [sp, #16]
 80100c6:	4620      	mov	r0, r4
 80100c8:	f000 fa50 	bl	801056c <__multadd>
 80100cc:	9004      	str	r0, [sp, #16]
 80100ce:	e7ea      	b.n	80100a6 <_dtoa_r+0xb3e>
 80100d0:	08013b6c 	.word	0x08013b6c
 80100d4:	080138de 	.word	0x080138de

080100d8 <__sflush_r>:
 80100d8:	898a      	ldrh	r2, [r1, #12]
 80100da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100de:	4605      	mov	r5, r0
 80100e0:	0710      	lsls	r0, r2, #28
 80100e2:	460c      	mov	r4, r1
 80100e4:	d458      	bmi.n	8010198 <__sflush_r+0xc0>
 80100e6:	684b      	ldr	r3, [r1, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dc05      	bgt.n	80100f8 <__sflush_r+0x20>
 80100ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	dc02      	bgt.n	80100f8 <__sflush_r+0x20>
 80100f2:	2000      	movs	r0, #0
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100fa:	2e00      	cmp	r6, #0
 80100fc:	d0f9      	beq.n	80100f2 <__sflush_r+0x1a>
 80100fe:	2300      	movs	r3, #0
 8010100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010104:	682f      	ldr	r7, [r5, #0]
 8010106:	6a21      	ldr	r1, [r4, #32]
 8010108:	602b      	str	r3, [r5, #0]
 801010a:	d032      	beq.n	8010172 <__sflush_r+0x9a>
 801010c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	075a      	lsls	r2, r3, #29
 8010112:	d505      	bpl.n	8010120 <__sflush_r+0x48>
 8010114:	6863      	ldr	r3, [r4, #4]
 8010116:	1ac0      	subs	r0, r0, r3
 8010118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801011a:	b10b      	cbz	r3, 8010120 <__sflush_r+0x48>
 801011c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801011e:	1ac0      	subs	r0, r0, r3
 8010120:	2300      	movs	r3, #0
 8010122:	4602      	mov	r2, r0
 8010124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010126:	6a21      	ldr	r1, [r4, #32]
 8010128:	4628      	mov	r0, r5
 801012a:	47b0      	blx	r6
 801012c:	1c43      	adds	r3, r0, #1
 801012e:	89a3      	ldrh	r3, [r4, #12]
 8010130:	d106      	bne.n	8010140 <__sflush_r+0x68>
 8010132:	6829      	ldr	r1, [r5, #0]
 8010134:	291d      	cmp	r1, #29
 8010136:	d848      	bhi.n	80101ca <__sflush_r+0xf2>
 8010138:	4a29      	ldr	r2, [pc, #164]	; (80101e0 <__sflush_r+0x108>)
 801013a:	40ca      	lsrs	r2, r1
 801013c:	07d6      	lsls	r6, r2, #31
 801013e:	d544      	bpl.n	80101ca <__sflush_r+0xf2>
 8010140:	2200      	movs	r2, #0
 8010142:	6062      	str	r2, [r4, #4]
 8010144:	04d9      	lsls	r1, r3, #19
 8010146:	6922      	ldr	r2, [r4, #16]
 8010148:	6022      	str	r2, [r4, #0]
 801014a:	d504      	bpl.n	8010156 <__sflush_r+0x7e>
 801014c:	1c42      	adds	r2, r0, #1
 801014e:	d101      	bne.n	8010154 <__sflush_r+0x7c>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b903      	cbnz	r3, 8010156 <__sflush_r+0x7e>
 8010154:	6560      	str	r0, [r4, #84]	; 0x54
 8010156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010158:	602f      	str	r7, [r5, #0]
 801015a:	2900      	cmp	r1, #0
 801015c:	d0c9      	beq.n	80100f2 <__sflush_r+0x1a>
 801015e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010162:	4299      	cmp	r1, r3
 8010164:	d002      	beq.n	801016c <__sflush_r+0x94>
 8010166:	4628      	mov	r0, r5
 8010168:	f000 fc9e 	bl	8010aa8 <_free_r>
 801016c:	2000      	movs	r0, #0
 801016e:	6360      	str	r0, [r4, #52]	; 0x34
 8010170:	e7c0      	b.n	80100f4 <__sflush_r+0x1c>
 8010172:	2301      	movs	r3, #1
 8010174:	4628      	mov	r0, r5
 8010176:	47b0      	blx	r6
 8010178:	1c41      	adds	r1, r0, #1
 801017a:	d1c8      	bne.n	801010e <__sflush_r+0x36>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d0c5      	beq.n	801010e <__sflush_r+0x36>
 8010182:	2b1d      	cmp	r3, #29
 8010184:	d001      	beq.n	801018a <__sflush_r+0xb2>
 8010186:	2b16      	cmp	r3, #22
 8010188:	d101      	bne.n	801018e <__sflush_r+0xb6>
 801018a:	602f      	str	r7, [r5, #0]
 801018c:	e7b1      	b.n	80100f2 <__sflush_r+0x1a>
 801018e:	89a3      	ldrh	r3, [r4, #12]
 8010190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010194:	81a3      	strh	r3, [r4, #12]
 8010196:	e7ad      	b.n	80100f4 <__sflush_r+0x1c>
 8010198:	690f      	ldr	r7, [r1, #16]
 801019a:	2f00      	cmp	r7, #0
 801019c:	d0a9      	beq.n	80100f2 <__sflush_r+0x1a>
 801019e:	0793      	lsls	r3, r2, #30
 80101a0:	680e      	ldr	r6, [r1, #0]
 80101a2:	bf08      	it	eq
 80101a4:	694b      	ldreq	r3, [r1, #20]
 80101a6:	600f      	str	r7, [r1, #0]
 80101a8:	bf18      	it	ne
 80101aa:	2300      	movne	r3, #0
 80101ac:	eba6 0807 	sub.w	r8, r6, r7
 80101b0:	608b      	str	r3, [r1, #8]
 80101b2:	f1b8 0f00 	cmp.w	r8, #0
 80101b6:	dd9c      	ble.n	80100f2 <__sflush_r+0x1a>
 80101b8:	4643      	mov	r3, r8
 80101ba:	463a      	mov	r2, r7
 80101bc:	6a21      	ldr	r1, [r4, #32]
 80101be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101c0:	4628      	mov	r0, r5
 80101c2:	47b0      	blx	r6
 80101c4:	2800      	cmp	r0, #0
 80101c6:	dc06      	bgt.n	80101d6 <__sflush_r+0xfe>
 80101c8:	89a3      	ldrh	r3, [r4, #12]
 80101ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101ce:	81a3      	strh	r3, [r4, #12]
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101d4:	e78e      	b.n	80100f4 <__sflush_r+0x1c>
 80101d6:	4407      	add	r7, r0
 80101d8:	eba8 0800 	sub.w	r8, r8, r0
 80101dc:	e7e9      	b.n	80101b2 <__sflush_r+0xda>
 80101de:	bf00      	nop
 80101e0:	20400001 	.word	0x20400001

080101e4 <_fflush_r>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	690b      	ldr	r3, [r1, #16]
 80101e8:	4605      	mov	r5, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	b1db      	cbz	r3, 8010226 <_fflush_r+0x42>
 80101ee:	b118      	cbz	r0, 80101f8 <_fflush_r+0x14>
 80101f0:	6983      	ldr	r3, [r0, #24]
 80101f2:	b90b      	cbnz	r3, 80101f8 <_fflush_r+0x14>
 80101f4:	f000 f860 	bl	80102b8 <__sinit>
 80101f8:	4b0c      	ldr	r3, [pc, #48]	; (801022c <_fflush_r+0x48>)
 80101fa:	429c      	cmp	r4, r3
 80101fc:	d109      	bne.n	8010212 <_fflush_r+0x2e>
 80101fe:	686c      	ldr	r4, [r5, #4]
 8010200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010204:	b17b      	cbz	r3, 8010226 <_fflush_r+0x42>
 8010206:	4621      	mov	r1, r4
 8010208:	4628      	mov	r0, r5
 801020a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801020e:	f7ff bf63 	b.w	80100d8 <__sflush_r>
 8010212:	4b07      	ldr	r3, [pc, #28]	; (8010230 <_fflush_r+0x4c>)
 8010214:	429c      	cmp	r4, r3
 8010216:	d101      	bne.n	801021c <_fflush_r+0x38>
 8010218:	68ac      	ldr	r4, [r5, #8]
 801021a:	e7f1      	b.n	8010200 <_fflush_r+0x1c>
 801021c:	4b05      	ldr	r3, [pc, #20]	; (8010234 <_fflush_r+0x50>)
 801021e:	429c      	cmp	r4, r3
 8010220:	bf08      	it	eq
 8010222:	68ec      	ldreq	r4, [r5, #12]
 8010224:	e7ec      	b.n	8010200 <_fflush_r+0x1c>
 8010226:	2000      	movs	r0, #0
 8010228:	bd38      	pop	{r3, r4, r5, pc}
 801022a:	bf00      	nop
 801022c:	0801390c 	.word	0x0801390c
 8010230:	0801392c 	.word	0x0801392c
 8010234:	080138ec 	.word	0x080138ec

08010238 <std>:
 8010238:	2300      	movs	r3, #0
 801023a:	b510      	push	{r4, lr}
 801023c:	4604      	mov	r4, r0
 801023e:	e9c0 3300 	strd	r3, r3, [r0]
 8010242:	6083      	str	r3, [r0, #8]
 8010244:	8181      	strh	r1, [r0, #12]
 8010246:	6643      	str	r3, [r0, #100]	; 0x64
 8010248:	81c2      	strh	r2, [r0, #14]
 801024a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801024e:	6183      	str	r3, [r0, #24]
 8010250:	4619      	mov	r1, r3
 8010252:	2208      	movs	r2, #8
 8010254:	305c      	adds	r0, #92	; 0x5c
 8010256:	f7fe fb2f 	bl	800e8b8 <memset>
 801025a:	4b05      	ldr	r3, [pc, #20]	; (8010270 <std+0x38>)
 801025c:	6263      	str	r3, [r4, #36]	; 0x24
 801025e:	4b05      	ldr	r3, [pc, #20]	; (8010274 <std+0x3c>)
 8010260:	62a3      	str	r3, [r4, #40]	; 0x28
 8010262:	4b05      	ldr	r3, [pc, #20]	; (8010278 <std+0x40>)
 8010264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010266:	4b05      	ldr	r3, [pc, #20]	; (801027c <std+0x44>)
 8010268:	6224      	str	r4, [r4, #32]
 801026a:	6323      	str	r3, [r4, #48]	; 0x30
 801026c:	bd10      	pop	{r4, pc}
 801026e:	bf00      	nop
 8010270:	08010ebd 	.word	0x08010ebd
 8010274:	08010edf 	.word	0x08010edf
 8010278:	08010f17 	.word	0x08010f17
 801027c:	08010f3b 	.word	0x08010f3b

08010280 <_cleanup_r>:
 8010280:	4901      	ldr	r1, [pc, #4]	; (8010288 <_cleanup_r+0x8>)
 8010282:	f000 b885 	b.w	8010390 <_fwalk_reent>
 8010286:	bf00      	nop
 8010288:	080101e5 	.word	0x080101e5

0801028c <__sfmoreglue>:
 801028c:	b570      	push	{r4, r5, r6, lr}
 801028e:	1e4a      	subs	r2, r1, #1
 8010290:	2568      	movs	r5, #104	; 0x68
 8010292:	4355      	muls	r5, r2
 8010294:	460e      	mov	r6, r1
 8010296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801029a:	f000 fc53 	bl	8010b44 <_malloc_r>
 801029e:	4604      	mov	r4, r0
 80102a0:	b140      	cbz	r0, 80102b4 <__sfmoreglue+0x28>
 80102a2:	2100      	movs	r1, #0
 80102a4:	e9c0 1600 	strd	r1, r6, [r0]
 80102a8:	300c      	adds	r0, #12
 80102aa:	60a0      	str	r0, [r4, #8]
 80102ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80102b0:	f7fe fb02 	bl	800e8b8 <memset>
 80102b4:	4620      	mov	r0, r4
 80102b6:	bd70      	pop	{r4, r5, r6, pc}

080102b8 <__sinit>:
 80102b8:	6983      	ldr	r3, [r0, #24]
 80102ba:	b510      	push	{r4, lr}
 80102bc:	4604      	mov	r4, r0
 80102be:	bb33      	cbnz	r3, 801030e <__sinit+0x56>
 80102c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80102c4:	6503      	str	r3, [r0, #80]	; 0x50
 80102c6:	4b12      	ldr	r3, [pc, #72]	; (8010310 <__sinit+0x58>)
 80102c8:	4a12      	ldr	r2, [pc, #72]	; (8010314 <__sinit+0x5c>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	6282      	str	r2, [r0, #40]	; 0x28
 80102ce:	4298      	cmp	r0, r3
 80102d0:	bf04      	itt	eq
 80102d2:	2301      	moveq	r3, #1
 80102d4:	6183      	streq	r3, [r0, #24]
 80102d6:	f000 f81f 	bl	8010318 <__sfp>
 80102da:	6060      	str	r0, [r4, #4]
 80102dc:	4620      	mov	r0, r4
 80102de:	f000 f81b 	bl	8010318 <__sfp>
 80102e2:	60a0      	str	r0, [r4, #8]
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 f817 	bl	8010318 <__sfp>
 80102ea:	2200      	movs	r2, #0
 80102ec:	60e0      	str	r0, [r4, #12]
 80102ee:	2104      	movs	r1, #4
 80102f0:	6860      	ldr	r0, [r4, #4]
 80102f2:	f7ff ffa1 	bl	8010238 <std>
 80102f6:	2201      	movs	r2, #1
 80102f8:	2109      	movs	r1, #9
 80102fa:	68a0      	ldr	r0, [r4, #8]
 80102fc:	f7ff ff9c 	bl	8010238 <std>
 8010300:	2202      	movs	r2, #2
 8010302:	2112      	movs	r1, #18
 8010304:	68e0      	ldr	r0, [r4, #12]
 8010306:	f7ff ff97 	bl	8010238 <std>
 801030a:	2301      	movs	r3, #1
 801030c:	61a3      	str	r3, [r4, #24]
 801030e:	bd10      	pop	{r4, pc}
 8010310:	080138a8 	.word	0x080138a8
 8010314:	08010281 	.word	0x08010281

08010318 <__sfp>:
 8010318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031a:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <__sfp+0x70>)
 801031c:	681e      	ldr	r6, [r3, #0]
 801031e:	69b3      	ldr	r3, [r6, #24]
 8010320:	4607      	mov	r7, r0
 8010322:	b913      	cbnz	r3, 801032a <__sfp+0x12>
 8010324:	4630      	mov	r0, r6
 8010326:	f7ff ffc7 	bl	80102b8 <__sinit>
 801032a:	3648      	adds	r6, #72	; 0x48
 801032c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010330:	3b01      	subs	r3, #1
 8010332:	d503      	bpl.n	801033c <__sfp+0x24>
 8010334:	6833      	ldr	r3, [r6, #0]
 8010336:	b133      	cbz	r3, 8010346 <__sfp+0x2e>
 8010338:	6836      	ldr	r6, [r6, #0]
 801033a:	e7f7      	b.n	801032c <__sfp+0x14>
 801033c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010340:	b16d      	cbz	r5, 801035e <__sfp+0x46>
 8010342:	3468      	adds	r4, #104	; 0x68
 8010344:	e7f4      	b.n	8010330 <__sfp+0x18>
 8010346:	2104      	movs	r1, #4
 8010348:	4638      	mov	r0, r7
 801034a:	f7ff ff9f 	bl	801028c <__sfmoreglue>
 801034e:	6030      	str	r0, [r6, #0]
 8010350:	2800      	cmp	r0, #0
 8010352:	d1f1      	bne.n	8010338 <__sfp+0x20>
 8010354:	230c      	movs	r3, #12
 8010356:	603b      	str	r3, [r7, #0]
 8010358:	4604      	mov	r4, r0
 801035a:	4620      	mov	r0, r4
 801035c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801035e:	4b0b      	ldr	r3, [pc, #44]	; (801038c <__sfp+0x74>)
 8010360:	6665      	str	r5, [r4, #100]	; 0x64
 8010362:	e9c4 5500 	strd	r5, r5, [r4]
 8010366:	60a5      	str	r5, [r4, #8]
 8010368:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801036c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010370:	2208      	movs	r2, #8
 8010372:	4629      	mov	r1, r5
 8010374:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010378:	f7fe fa9e 	bl	800e8b8 <memset>
 801037c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010380:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010384:	e7e9      	b.n	801035a <__sfp+0x42>
 8010386:	bf00      	nop
 8010388:	080138a8 	.word	0x080138a8
 801038c:	ffff0001 	.word	0xffff0001

08010390 <_fwalk_reent>:
 8010390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010394:	4680      	mov	r8, r0
 8010396:	4689      	mov	r9, r1
 8010398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801039c:	2600      	movs	r6, #0
 801039e:	b914      	cbnz	r4, 80103a6 <_fwalk_reent+0x16>
 80103a0:	4630      	mov	r0, r6
 80103a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80103aa:	3f01      	subs	r7, #1
 80103ac:	d501      	bpl.n	80103b2 <_fwalk_reent+0x22>
 80103ae:	6824      	ldr	r4, [r4, #0]
 80103b0:	e7f5      	b.n	801039e <_fwalk_reent+0xe>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d907      	bls.n	80103c8 <_fwalk_reent+0x38>
 80103b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103bc:	3301      	adds	r3, #1
 80103be:	d003      	beq.n	80103c8 <_fwalk_reent+0x38>
 80103c0:	4629      	mov	r1, r5
 80103c2:	4640      	mov	r0, r8
 80103c4:	47c8      	blx	r9
 80103c6:	4306      	orrs	r6, r0
 80103c8:	3568      	adds	r5, #104	; 0x68
 80103ca:	e7ee      	b.n	80103aa <_fwalk_reent+0x1a>

080103cc <_localeconv_r>:
 80103cc:	4b04      	ldr	r3, [pc, #16]	; (80103e0 <_localeconv_r+0x14>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6a18      	ldr	r0, [r3, #32]
 80103d2:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <_localeconv_r+0x18>)
 80103d4:	2800      	cmp	r0, #0
 80103d6:	bf08      	it	eq
 80103d8:	4618      	moveq	r0, r3
 80103da:	30f0      	adds	r0, #240	; 0xf0
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	200017f4 	.word	0x200017f4
 80103e4:	20001858 	.word	0x20001858

080103e8 <__swhatbuf_r>:
 80103e8:	b570      	push	{r4, r5, r6, lr}
 80103ea:	460e      	mov	r6, r1
 80103ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f0:	2900      	cmp	r1, #0
 80103f2:	b096      	sub	sp, #88	; 0x58
 80103f4:	4614      	mov	r4, r2
 80103f6:	461d      	mov	r5, r3
 80103f8:	da07      	bge.n	801040a <__swhatbuf_r+0x22>
 80103fa:	2300      	movs	r3, #0
 80103fc:	602b      	str	r3, [r5, #0]
 80103fe:	89b3      	ldrh	r3, [r6, #12]
 8010400:	061a      	lsls	r2, r3, #24
 8010402:	d410      	bmi.n	8010426 <__swhatbuf_r+0x3e>
 8010404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010408:	e00e      	b.n	8010428 <__swhatbuf_r+0x40>
 801040a:	466a      	mov	r2, sp
 801040c:	f000 fdbc 	bl	8010f88 <_fstat_r>
 8010410:	2800      	cmp	r0, #0
 8010412:	dbf2      	blt.n	80103fa <__swhatbuf_r+0x12>
 8010414:	9a01      	ldr	r2, [sp, #4]
 8010416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801041a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801041e:	425a      	negs	r2, r3
 8010420:	415a      	adcs	r2, r3
 8010422:	602a      	str	r2, [r5, #0]
 8010424:	e7ee      	b.n	8010404 <__swhatbuf_r+0x1c>
 8010426:	2340      	movs	r3, #64	; 0x40
 8010428:	2000      	movs	r0, #0
 801042a:	6023      	str	r3, [r4, #0]
 801042c:	b016      	add	sp, #88	; 0x58
 801042e:	bd70      	pop	{r4, r5, r6, pc}

08010430 <__smakebuf_r>:
 8010430:	898b      	ldrh	r3, [r1, #12]
 8010432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010434:	079d      	lsls	r5, r3, #30
 8010436:	4606      	mov	r6, r0
 8010438:	460c      	mov	r4, r1
 801043a:	d507      	bpl.n	801044c <__smakebuf_r+0x1c>
 801043c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	6123      	str	r3, [r4, #16]
 8010444:	2301      	movs	r3, #1
 8010446:	6163      	str	r3, [r4, #20]
 8010448:	b002      	add	sp, #8
 801044a:	bd70      	pop	{r4, r5, r6, pc}
 801044c:	ab01      	add	r3, sp, #4
 801044e:	466a      	mov	r2, sp
 8010450:	f7ff ffca 	bl	80103e8 <__swhatbuf_r>
 8010454:	9900      	ldr	r1, [sp, #0]
 8010456:	4605      	mov	r5, r0
 8010458:	4630      	mov	r0, r6
 801045a:	f000 fb73 	bl	8010b44 <_malloc_r>
 801045e:	b948      	cbnz	r0, 8010474 <__smakebuf_r+0x44>
 8010460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010464:	059a      	lsls	r2, r3, #22
 8010466:	d4ef      	bmi.n	8010448 <__smakebuf_r+0x18>
 8010468:	f023 0303 	bic.w	r3, r3, #3
 801046c:	f043 0302 	orr.w	r3, r3, #2
 8010470:	81a3      	strh	r3, [r4, #12]
 8010472:	e7e3      	b.n	801043c <__smakebuf_r+0xc>
 8010474:	4b0d      	ldr	r3, [pc, #52]	; (80104ac <__smakebuf_r+0x7c>)
 8010476:	62b3      	str	r3, [r6, #40]	; 0x28
 8010478:	89a3      	ldrh	r3, [r4, #12]
 801047a:	6020      	str	r0, [r4, #0]
 801047c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	9b00      	ldr	r3, [sp, #0]
 8010484:	6163      	str	r3, [r4, #20]
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	6120      	str	r0, [r4, #16]
 801048a:	b15b      	cbz	r3, 80104a4 <__smakebuf_r+0x74>
 801048c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010490:	4630      	mov	r0, r6
 8010492:	f000 fd8b 	bl	8010fac <_isatty_r>
 8010496:	b128      	cbz	r0, 80104a4 <__smakebuf_r+0x74>
 8010498:	89a3      	ldrh	r3, [r4, #12]
 801049a:	f023 0303 	bic.w	r3, r3, #3
 801049e:	f043 0301 	orr.w	r3, r3, #1
 80104a2:	81a3      	strh	r3, [r4, #12]
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	431d      	orrs	r5, r3
 80104a8:	81a5      	strh	r5, [r4, #12]
 80104aa:	e7cd      	b.n	8010448 <__smakebuf_r+0x18>
 80104ac:	08010281 	.word	0x08010281

080104b0 <malloc>:
 80104b0:	4b02      	ldr	r3, [pc, #8]	; (80104bc <malloc+0xc>)
 80104b2:	4601      	mov	r1, r0
 80104b4:	6818      	ldr	r0, [r3, #0]
 80104b6:	f000 bb45 	b.w	8010b44 <_malloc_r>
 80104ba:	bf00      	nop
 80104bc:	200017f4 	.word	0x200017f4

080104c0 <memcpy>:
 80104c0:	b510      	push	{r4, lr}
 80104c2:	1e43      	subs	r3, r0, #1
 80104c4:	440a      	add	r2, r1
 80104c6:	4291      	cmp	r1, r2
 80104c8:	d100      	bne.n	80104cc <memcpy+0xc>
 80104ca:	bd10      	pop	{r4, pc}
 80104cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104d4:	e7f7      	b.n	80104c6 <memcpy+0x6>

080104d6 <_Balloc>:
 80104d6:	b570      	push	{r4, r5, r6, lr}
 80104d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80104da:	4604      	mov	r4, r0
 80104dc:	460e      	mov	r6, r1
 80104de:	b93d      	cbnz	r5, 80104f0 <_Balloc+0x1a>
 80104e0:	2010      	movs	r0, #16
 80104e2:	f7ff ffe5 	bl	80104b0 <malloc>
 80104e6:	6260      	str	r0, [r4, #36]	; 0x24
 80104e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80104ec:	6005      	str	r5, [r0, #0]
 80104ee:	60c5      	str	r5, [r0, #12]
 80104f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80104f2:	68eb      	ldr	r3, [r5, #12]
 80104f4:	b183      	cbz	r3, 8010518 <_Balloc+0x42>
 80104f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80104fe:	b9b8      	cbnz	r0, 8010530 <_Balloc+0x5a>
 8010500:	2101      	movs	r1, #1
 8010502:	fa01 f506 	lsl.w	r5, r1, r6
 8010506:	1d6a      	adds	r2, r5, #5
 8010508:	0092      	lsls	r2, r2, #2
 801050a:	4620      	mov	r0, r4
 801050c:	f000 fabe 	bl	8010a8c <_calloc_r>
 8010510:	b160      	cbz	r0, 801052c <_Balloc+0x56>
 8010512:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010516:	e00e      	b.n	8010536 <_Balloc+0x60>
 8010518:	2221      	movs	r2, #33	; 0x21
 801051a:	2104      	movs	r1, #4
 801051c:	4620      	mov	r0, r4
 801051e:	f000 fab5 	bl	8010a8c <_calloc_r>
 8010522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010524:	60e8      	str	r0, [r5, #12]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d1e4      	bne.n	80104f6 <_Balloc+0x20>
 801052c:	2000      	movs	r0, #0
 801052e:	bd70      	pop	{r4, r5, r6, pc}
 8010530:	6802      	ldr	r2, [r0, #0]
 8010532:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010536:	2300      	movs	r3, #0
 8010538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801053c:	e7f7      	b.n	801052e <_Balloc+0x58>

0801053e <_Bfree>:
 801053e:	b570      	push	{r4, r5, r6, lr}
 8010540:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010542:	4606      	mov	r6, r0
 8010544:	460d      	mov	r5, r1
 8010546:	b93c      	cbnz	r4, 8010558 <_Bfree+0x1a>
 8010548:	2010      	movs	r0, #16
 801054a:	f7ff ffb1 	bl	80104b0 <malloc>
 801054e:	6270      	str	r0, [r6, #36]	; 0x24
 8010550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010554:	6004      	str	r4, [r0, #0]
 8010556:	60c4      	str	r4, [r0, #12]
 8010558:	b13d      	cbz	r5, 801056a <_Bfree+0x2c>
 801055a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801055c:	686a      	ldr	r2, [r5, #4]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010564:	6029      	str	r1, [r5, #0]
 8010566:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801056a:	bd70      	pop	{r4, r5, r6, pc}

0801056c <__multadd>:
 801056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	690d      	ldr	r5, [r1, #16]
 8010572:	461f      	mov	r7, r3
 8010574:	4606      	mov	r6, r0
 8010576:	460c      	mov	r4, r1
 8010578:	f101 0c14 	add.w	ip, r1, #20
 801057c:	2300      	movs	r3, #0
 801057e:	f8dc 0000 	ldr.w	r0, [ip]
 8010582:	b281      	uxth	r1, r0
 8010584:	fb02 7101 	mla	r1, r2, r1, r7
 8010588:	0c0f      	lsrs	r7, r1, #16
 801058a:	0c00      	lsrs	r0, r0, #16
 801058c:	fb02 7000 	mla	r0, r2, r0, r7
 8010590:	b289      	uxth	r1, r1
 8010592:	3301      	adds	r3, #1
 8010594:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010598:	429d      	cmp	r5, r3
 801059a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801059e:	f84c 1b04 	str.w	r1, [ip], #4
 80105a2:	dcec      	bgt.n	801057e <__multadd+0x12>
 80105a4:	b1d7      	cbz	r7, 80105dc <__multadd+0x70>
 80105a6:	68a3      	ldr	r3, [r4, #8]
 80105a8:	42ab      	cmp	r3, r5
 80105aa:	dc12      	bgt.n	80105d2 <__multadd+0x66>
 80105ac:	6861      	ldr	r1, [r4, #4]
 80105ae:	4630      	mov	r0, r6
 80105b0:	3101      	adds	r1, #1
 80105b2:	f7ff ff90 	bl	80104d6 <_Balloc>
 80105b6:	6922      	ldr	r2, [r4, #16]
 80105b8:	3202      	adds	r2, #2
 80105ba:	f104 010c 	add.w	r1, r4, #12
 80105be:	4680      	mov	r8, r0
 80105c0:	0092      	lsls	r2, r2, #2
 80105c2:	300c      	adds	r0, #12
 80105c4:	f7ff ff7c 	bl	80104c0 <memcpy>
 80105c8:	4621      	mov	r1, r4
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7ff ffb7 	bl	801053e <_Bfree>
 80105d0:	4644      	mov	r4, r8
 80105d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105d6:	3501      	adds	r5, #1
 80105d8:	615f      	str	r7, [r3, #20]
 80105da:	6125      	str	r5, [r4, #16]
 80105dc:	4620      	mov	r0, r4
 80105de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105e2 <__hi0bits>:
 80105e2:	0c02      	lsrs	r2, r0, #16
 80105e4:	0412      	lsls	r2, r2, #16
 80105e6:	4603      	mov	r3, r0
 80105e8:	b9b2      	cbnz	r2, 8010618 <__hi0bits+0x36>
 80105ea:	0403      	lsls	r3, r0, #16
 80105ec:	2010      	movs	r0, #16
 80105ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80105f2:	bf04      	itt	eq
 80105f4:	021b      	lsleq	r3, r3, #8
 80105f6:	3008      	addeq	r0, #8
 80105f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80105fc:	bf04      	itt	eq
 80105fe:	011b      	lsleq	r3, r3, #4
 8010600:	3004      	addeq	r0, #4
 8010602:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010606:	bf04      	itt	eq
 8010608:	009b      	lsleq	r3, r3, #2
 801060a:	3002      	addeq	r0, #2
 801060c:	2b00      	cmp	r3, #0
 801060e:	db06      	blt.n	801061e <__hi0bits+0x3c>
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	d503      	bpl.n	801061c <__hi0bits+0x3a>
 8010614:	3001      	adds	r0, #1
 8010616:	4770      	bx	lr
 8010618:	2000      	movs	r0, #0
 801061a:	e7e8      	b.n	80105ee <__hi0bits+0xc>
 801061c:	2020      	movs	r0, #32
 801061e:	4770      	bx	lr

08010620 <__lo0bits>:
 8010620:	6803      	ldr	r3, [r0, #0]
 8010622:	f013 0207 	ands.w	r2, r3, #7
 8010626:	4601      	mov	r1, r0
 8010628:	d00b      	beq.n	8010642 <__lo0bits+0x22>
 801062a:	07da      	lsls	r2, r3, #31
 801062c:	d423      	bmi.n	8010676 <__lo0bits+0x56>
 801062e:	0798      	lsls	r0, r3, #30
 8010630:	bf49      	itett	mi
 8010632:	085b      	lsrmi	r3, r3, #1
 8010634:	089b      	lsrpl	r3, r3, #2
 8010636:	2001      	movmi	r0, #1
 8010638:	600b      	strmi	r3, [r1, #0]
 801063a:	bf5c      	itt	pl
 801063c:	600b      	strpl	r3, [r1, #0]
 801063e:	2002      	movpl	r0, #2
 8010640:	4770      	bx	lr
 8010642:	b298      	uxth	r0, r3
 8010644:	b9a8      	cbnz	r0, 8010672 <__lo0bits+0x52>
 8010646:	0c1b      	lsrs	r3, r3, #16
 8010648:	2010      	movs	r0, #16
 801064a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801064e:	bf04      	itt	eq
 8010650:	0a1b      	lsreq	r3, r3, #8
 8010652:	3008      	addeq	r0, #8
 8010654:	071a      	lsls	r2, r3, #28
 8010656:	bf04      	itt	eq
 8010658:	091b      	lsreq	r3, r3, #4
 801065a:	3004      	addeq	r0, #4
 801065c:	079a      	lsls	r2, r3, #30
 801065e:	bf04      	itt	eq
 8010660:	089b      	lsreq	r3, r3, #2
 8010662:	3002      	addeq	r0, #2
 8010664:	07da      	lsls	r2, r3, #31
 8010666:	d402      	bmi.n	801066e <__lo0bits+0x4e>
 8010668:	085b      	lsrs	r3, r3, #1
 801066a:	d006      	beq.n	801067a <__lo0bits+0x5a>
 801066c:	3001      	adds	r0, #1
 801066e:	600b      	str	r3, [r1, #0]
 8010670:	4770      	bx	lr
 8010672:	4610      	mov	r0, r2
 8010674:	e7e9      	b.n	801064a <__lo0bits+0x2a>
 8010676:	2000      	movs	r0, #0
 8010678:	4770      	bx	lr
 801067a:	2020      	movs	r0, #32
 801067c:	4770      	bx	lr

0801067e <__i2b>:
 801067e:	b510      	push	{r4, lr}
 8010680:	460c      	mov	r4, r1
 8010682:	2101      	movs	r1, #1
 8010684:	f7ff ff27 	bl	80104d6 <_Balloc>
 8010688:	2201      	movs	r2, #1
 801068a:	6144      	str	r4, [r0, #20]
 801068c:	6102      	str	r2, [r0, #16]
 801068e:	bd10      	pop	{r4, pc}

08010690 <__multiply>:
 8010690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	4614      	mov	r4, r2
 8010696:	690a      	ldr	r2, [r1, #16]
 8010698:	6923      	ldr	r3, [r4, #16]
 801069a:	429a      	cmp	r2, r3
 801069c:	bfb8      	it	lt
 801069e:	460b      	movlt	r3, r1
 80106a0:	4688      	mov	r8, r1
 80106a2:	bfbc      	itt	lt
 80106a4:	46a0      	movlt	r8, r4
 80106a6:	461c      	movlt	r4, r3
 80106a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80106b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80106b8:	eb07 0609 	add.w	r6, r7, r9
 80106bc:	42b3      	cmp	r3, r6
 80106be:	bfb8      	it	lt
 80106c0:	3101      	addlt	r1, #1
 80106c2:	f7ff ff08 	bl	80104d6 <_Balloc>
 80106c6:	f100 0514 	add.w	r5, r0, #20
 80106ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80106ce:	462b      	mov	r3, r5
 80106d0:	2200      	movs	r2, #0
 80106d2:	4573      	cmp	r3, lr
 80106d4:	d316      	bcc.n	8010704 <__multiply+0x74>
 80106d6:	f104 0214 	add.w	r2, r4, #20
 80106da:	f108 0114 	add.w	r1, r8, #20
 80106de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80106e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	9b00      	ldr	r3, [sp, #0]
 80106ea:	9201      	str	r2, [sp, #4]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d80c      	bhi.n	801070a <__multiply+0x7a>
 80106f0:	2e00      	cmp	r6, #0
 80106f2:	dd03      	ble.n	80106fc <__multiply+0x6c>
 80106f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d05d      	beq.n	80107b8 <__multiply+0x128>
 80106fc:	6106      	str	r6, [r0, #16]
 80106fe:	b003      	add	sp, #12
 8010700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010704:	f843 2b04 	str.w	r2, [r3], #4
 8010708:	e7e3      	b.n	80106d2 <__multiply+0x42>
 801070a:	f8b2 b000 	ldrh.w	fp, [r2]
 801070e:	f1bb 0f00 	cmp.w	fp, #0
 8010712:	d023      	beq.n	801075c <__multiply+0xcc>
 8010714:	4689      	mov	r9, r1
 8010716:	46ac      	mov	ip, r5
 8010718:	f04f 0800 	mov.w	r8, #0
 801071c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010720:	f8dc a000 	ldr.w	sl, [ip]
 8010724:	b2a3      	uxth	r3, r4
 8010726:	fa1f fa8a 	uxth.w	sl, sl
 801072a:	fb0b a303 	mla	r3, fp, r3, sl
 801072e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010732:	f8dc 4000 	ldr.w	r4, [ip]
 8010736:	4443      	add	r3, r8
 8010738:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801073c:	fb0b 840a 	mla	r4, fp, sl, r8
 8010740:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010744:	46e2      	mov	sl, ip
 8010746:	b29b      	uxth	r3, r3
 8010748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801074c:	454f      	cmp	r7, r9
 801074e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010752:	f84a 3b04 	str.w	r3, [sl], #4
 8010756:	d82b      	bhi.n	80107b0 <__multiply+0x120>
 8010758:	f8cc 8004 	str.w	r8, [ip, #4]
 801075c:	9b01      	ldr	r3, [sp, #4]
 801075e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010762:	3204      	adds	r2, #4
 8010764:	f1ba 0f00 	cmp.w	sl, #0
 8010768:	d020      	beq.n	80107ac <__multiply+0x11c>
 801076a:	682b      	ldr	r3, [r5, #0]
 801076c:	4689      	mov	r9, r1
 801076e:	46a8      	mov	r8, r5
 8010770:	f04f 0b00 	mov.w	fp, #0
 8010774:	f8b9 c000 	ldrh.w	ip, [r9]
 8010778:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801077c:	fb0a 440c 	mla	r4, sl, ip, r4
 8010780:	445c      	add	r4, fp
 8010782:	46c4      	mov	ip, r8
 8010784:	b29b      	uxth	r3, r3
 8010786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801078a:	f84c 3b04 	str.w	r3, [ip], #4
 801078e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010792:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010796:	0c1b      	lsrs	r3, r3, #16
 8010798:	fb0a b303 	mla	r3, sl, r3, fp
 801079c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80107a0:	454f      	cmp	r7, r9
 80107a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80107a6:	d805      	bhi.n	80107b4 <__multiply+0x124>
 80107a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80107ac:	3504      	adds	r5, #4
 80107ae:	e79b      	b.n	80106e8 <__multiply+0x58>
 80107b0:	46d4      	mov	ip, sl
 80107b2:	e7b3      	b.n	801071c <__multiply+0x8c>
 80107b4:	46e0      	mov	r8, ip
 80107b6:	e7dd      	b.n	8010774 <__multiply+0xe4>
 80107b8:	3e01      	subs	r6, #1
 80107ba:	e799      	b.n	80106f0 <__multiply+0x60>

080107bc <__pow5mult>:
 80107bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107c0:	4615      	mov	r5, r2
 80107c2:	f012 0203 	ands.w	r2, r2, #3
 80107c6:	4606      	mov	r6, r0
 80107c8:	460f      	mov	r7, r1
 80107ca:	d007      	beq.n	80107dc <__pow5mult+0x20>
 80107cc:	3a01      	subs	r2, #1
 80107ce:	4c21      	ldr	r4, [pc, #132]	; (8010854 <__pow5mult+0x98>)
 80107d0:	2300      	movs	r3, #0
 80107d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107d6:	f7ff fec9 	bl	801056c <__multadd>
 80107da:	4607      	mov	r7, r0
 80107dc:	10ad      	asrs	r5, r5, #2
 80107de:	d035      	beq.n	801084c <__pow5mult+0x90>
 80107e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80107e2:	b93c      	cbnz	r4, 80107f4 <__pow5mult+0x38>
 80107e4:	2010      	movs	r0, #16
 80107e6:	f7ff fe63 	bl	80104b0 <malloc>
 80107ea:	6270      	str	r0, [r6, #36]	; 0x24
 80107ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107f0:	6004      	str	r4, [r0, #0]
 80107f2:	60c4      	str	r4, [r0, #12]
 80107f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80107f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80107fc:	b94c      	cbnz	r4, 8010812 <__pow5mult+0x56>
 80107fe:	f240 2171 	movw	r1, #625	; 0x271
 8010802:	4630      	mov	r0, r6
 8010804:	f7ff ff3b 	bl	801067e <__i2b>
 8010808:	2300      	movs	r3, #0
 801080a:	f8c8 0008 	str.w	r0, [r8, #8]
 801080e:	4604      	mov	r4, r0
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	f04f 0800 	mov.w	r8, #0
 8010816:	07eb      	lsls	r3, r5, #31
 8010818:	d50a      	bpl.n	8010830 <__pow5mult+0x74>
 801081a:	4639      	mov	r1, r7
 801081c:	4622      	mov	r2, r4
 801081e:	4630      	mov	r0, r6
 8010820:	f7ff ff36 	bl	8010690 <__multiply>
 8010824:	4639      	mov	r1, r7
 8010826:	4681      	mov	r9, r0
 8010828:	4630      	mov	r0, r6
 801082a:	f7ff fe88 	bl	801053e <_Bfree>
 801082e:	464f      	mov	r7, r9
 8010830:	106d      	asrs	r5, r5, #1
 8010832:	d00b      	beq.n	801084c <__pow5mult+0x90>
 8010834:	6820      	ldr	r0, [r4, #0]
 8010836:	b938      	cbnz	r0, 8010848 <__pow5mult+0x8c>
 8010838:	4622      	mov	r2, r4
 801083a:	4621      	mov	r1, r4
 801083c:	4630      	mov	r0, r6
 801083e:	f7ff ff27 	bl	8010690 <__multiply>
 8010842:	6020      	str	r0, [r4, #0]
 8010844:	f8c0 8000 	str.w	r8, [r0]
 8010848:	4604      	mov	r4, r0
 801084a:	e7e4      	b.n	8010816 <__pow5mult+0x5a>
 801084c:	4638      	mov	r0, r7
 801084e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010852:	bf00      	nop
 8010854:	08013a40 	.word	0x08013a40

08010858 <__lshift>:
 8010858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801085c:	460c      	mov	r4, r1
 801085e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010862:	6923      	ldr	r3, [r4, #16]
 8010864:	6849      	ldr	r1, [r1, #4]
 8010866:	eb0a 0903 	add.w	r9, sl, r3
 801086a:	68a3      	ldr	r3, [r4, #8]
 801086c:	4607      	mov	r7, r0
 801086e:	4616      	mov	r6, r2
 8010870:	f109 0501 	add.w	r5, r9, #1
 8010874:	42ab      	cmp	r3, r5
 8010876:	db32      	blt.n	80108de <__lshift+0x86>
 8010878:	4638      	mov	r0, r7
 801087a:	f7ff fe2c 	bl	80104d6 <_Balloc>
 801087e:	2300      	movs	r3, #0
 8010880:	4680      	mov	r8, r0
 8010882:	f100 0114 	add.w	r1, r0, #20
 8010886:	461a      	mov	r2, r3
 8010888:	4553      	cmp	r3, sl
 801088a:	db2b      	blt.n	80108e4 <__lshift+0x8c>
 801088c:	6920      	ldr	r0, [r4, #16]
 801088e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010892:	f104 0314 	add.w	r3, r4, #20
 8010896:	f016 021f 	ands.w	r2, r6, #31
 801089a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801089e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80108a2:	d025      	beq.n	80108f0 <__lshift+0x98>
 80108a4:	f1c2 0e20 	rsb	lr, r2, #32
 80108a8:	2000      	movs	r0, #0
 80108aa:	681e      	ldr	r6, [r3, #0]
 80108ac:	468a      	mov	sl, r1
 80108ae:	4096      	lsls	r6, r2
 80108b0:	4330      	orrs	r0, r6
 80108b2:	f84a 0b04 	str.w	r0, [sl], #4
 80108b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80108ba:	459c      	cmp	ip, r3
 80108bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80108c0:	d814      	bhi.n	80108ec <__lshift+0x94>
 80108c2:	6048      	str	r0, [r1, #4]
 80108c4:	b108      	cbz	r0, 80108ca <__lshift+0x72>
 80108c6:	f109 0502 	add.w	r5, r9, #2
 80108ca:	3d01      	subs	r5, #1
 80108cc:	4638      	mov	r0, r7
 80108ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80108d2:	4621      	mov	r1, r4
 80108d4:	f7ff fe33 	bl	801053e <_Bfree>
 80108d8:	4640      	mov	r0, r8
 80108da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108de:	3101      	adds	r1, #1
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	e7c7      	b.n	8010874 <__lshift+0x1c>
 80108e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80108e8:	3301      	adds	r3, #1
 80108ea:	e7cd      	b.n	8010888 <__lshift+0x30>
 80108ec:	4651      	mov	r1, sl
 80108ee:	e7dc      	b.n	80108aa <__lshift+0x52>
 80108f0:	3904      	subs	r1, #4
 80108f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80108fa:	459c      	cmp	ip, r3
 80108fc:	d8f9      	bhi.n	80108f2 <__lshift+0x9a>
 80108fe:	e7e4      	b.n	80108ca <__lshift+0x72>

08010900 <__mcmp>:
 8010900:	6903      	ldr	r3, [r0, #16]
 8010902:	690a      	ldr	r2, [r1, #16]
 8010904:	1a9b      	subs	r3, r3, r2
 8010906:	b530      	push	{r4, r5, lr}
 8010908:	d10c      	bne.n	8010924 <__mcmp+0x24>
 801090a:	0092      	lsls	r2, r2, #2
 801090c:	3014      	adds	r0, #20
 801090e:	3114      	adds	r1, #20
 8010910:	1884      	adds	r4, r0, r2
 8010912:	4411      	add	r1, r2
 8010914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801091c:	4295      	cmp	r5, r2
 801091e:	d003      	beq.n	8010928 <__mcmp+0x28>
 8010920:	d305      	bcc.n	801092e <__mcmp+0x2e>
 8010922:	2301      	movs	r3, #1
 8010924:	4618      	mov	r0, r3
 8010926:	bd30      	pop	{r4, r5, pc}
 8010928:	42a0      	cmp	r0, r4
 801092a:	d3f3      	bcc.n	8010914 <__mcmp+0x14>
 801092c:	e7fa      	b.n	8010924 <__mcmp+0x24>
 801092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010932:	e7f7      	b.n	8010924 <__mcmp+0x24>

08010934 <__mdiff>:
 8010934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010938:	460d      	mov	r5, r1
 801093a:	4607      	mov	r7, r0
 801093c:	4611      	mov	r1, r2
 801093e:	4628      	mov	r0, r5
 8010940:	4614      	mov	r4, r2
 8010942:	f7ff ffdd 	bl	8010900 <__mcmp>
 8010946:	1e06      	subs	r6, r0, #0
 8010948:	d108      	bne.n	801095c <__mdiff+0x28>
 801094a:	4631      	mov	r1, r6
 801094c:	4638      	mov	r0, r7
 801094e:	f7ff fdc2 	bl	80104d6 <_Balloc>
 8010952:	2301      	movs	r3, #1
 8010954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801095c:	bfa4      	itt	ge
 801095e:	4623      	movge	r3, r4
 8010960:	462c      	movge	r4, r5
 8010962:	4638      	mov	r0, r7
 8010964:	6861      	ldr	r1, [r4, #4]
 8010966:	bfa6      	itte	ge
 8010968:	461d      	movge	r5, r3
 801096a:	2600      	movge	r6, #0
 801096c:	2601      	movlt	r6, #1
 801096e:	f7ff fdb2 	bl	80104d6 <_Balloc>
 8010972:	692b      	ldr	r3, [r5, #16]
 8010974:	60c6      	str	r6, [r0, #12]
 8010976:	6926      	ldr	r6, [r4, #16]
 8010978:	f105 0914 	add.w	r9, r5, #20
 801097c:	f104 0214 	add.w	r2, r4, #20
 8010980:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010984:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010988:	f100 0514 	add.w	r5, r0, #20
 801098c:	f04f 0e00 	mov.w	lr, #0
 8010990:	f852 ab04 	ldr.w	sl, [r2], #4
 8010994:	f859 4b04 	ldr.w	r4, [r9], #4
 8010998:	fa1e f18a 	uxtah	r1, lr, sl
 801099c:	b2a3      	uxth	r3, r4
 801099e:	1ac9      	subs	r1, r1, r3
 80109a0:	0c23      	lsrs	r3, r4, #16
 80109a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80109a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80109aa:	b289      	uxth	r1, r1
 80109ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80109b0:	45c8      	cmp	r8, r9
 80109b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80109b6:	4694      	mov	ip, r2
 80109b8:	f845 3b04 	str.w	r3, [r5], #4
 80109bc:	d8e8      	bhi.n	8010990 <__mdiff+0x5c>
 80109be:	45bc      	cmp	ip, r7
 80109c0:	d304      	bcc.n	80109cc <__mdiff+0x98>
 80109c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80109c6:	b183      	cbz	r3, 80109ea <__mdiff+0xb6>
 80109c8:	6106      	str	r6, [r0, #16]
 80109ca:	e7c5      	b.n	8010958 <__mdiff+0x24>
 80109cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80109d0:	fa1e f381 	uxtah	r3, lr, r1
 80109d4:	141a      	asrs	r2, r3, #16
 80109d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109da:	b29b      	uxth	r3, r3
 80109dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80109e4:	f845 3b04 	str.w	r3, [r5], #4
 80109e8:	e7e9      	b.n	80109be <__mdiff+0x8a>
 80109ea:	3e01      	subs	r6, #1
 80109ec:	e7e9      	b.n	80109c2 <__mdiff+0x8e>

080109ee <__d2b>:
 80109ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109f2:	460e      	mov	r6, r1
 80109f4:	2101      	movs	r1, #1
 80109f6:	ec59 8b10 	vmov	r8, r9, d0
 80109fa:	4615      	mov	r5, r2
 80109fc:	f7ff fd6b 	bl	80104d6 <_Balloc>
 8010a00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010a04:	4607      	mov	r7, r0
 8010a06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a0a:	bb34      	cbnz	r4, 8010a5a <__d2b+0x6c>
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	f1b8 0300 	subs.w	r3, r8, #0
 8010a12:	d027      	beq.n	8010a64 <__d2b+0x76>
 8010a14:	a802      	add	r0, sp, #8
 8010a16:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010a1a:	f7ff fe01 	bl	8010620 <__lo0bits>
 8010a1e:	9900      	ldr	r1, [sp, #0]
 8010a20:	b1f0      	cbz	r0, 8010a60 <__d2b+0x72>
 8010a22:	9a01      	ldr	r2, [sp, #4]
 8010a24:	f1c0 0320 	rsb	r3, r0, #32
 8010a28:	fa02 f303 	lsl.w	r3, r2, r3
 8010a2c:	430b      	orrs	r3, r1
 8010a2e:	40c2      	lsrs	r2, r0
 8010a30:	617b      	str	r3, [r7, #20]
 8010a32:	9201      	str	r2, [sp, #4]
 8010a34:	9b01      	ldr	r3, [sp, #4]
 8010a36:	61bb      	str	r3, [r7, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	bf14      	ite	ne
 8010a3c:	2102      	movne	r1, #2
 8010a3e:	2101      	moveq	r1, #1
 8010a40:	6139      	str	r1, [r7, #16]
 8010a42:	b1c4      	cbz	r4, 8010a76 <__d2b+0x88>
 8010a44:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010a48:	4404      	add	r4, r0
 8010a4a:	6034      	str	r4, [r6, #0]
 8010a4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a50:	6028      	str	r0, [r5, #0]
 8010a52:	4638      	mov	r0, r7
 8010a54:	b003      	add	sp, #12
 8010a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a5e:	e7d5      	b.n	8010a0c <__d2b+0x1e>
 8010a60:	6179      	str	r1, [r7, #20]
 8010a62:	e7e7      	b.n	8010a34 <__d2b+0x46>
 8010a64:	a801      	add	r0, sp, #4
 8010a66:	f7ff fddb 	bl	8010620 <__lo0bits>
 8010a6a:	9b01      	ldr	r3, [sp, #4]
 8010a6c:	617b      	str	r3, [r7, #20]
 8010a6e:	2101      	movs	r1, #1
 8010a70:	6139      	str	r1, [r7, #16]
 8010a72:	3020      	adds	r0, #32
 8010a74:	e7e5      	b.n	8010a42 <__d2b+0x54>
 8010a76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010a7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a7e:	6030      	str	r0, [r6, #0]
 8010a80:	6918      	ldr	r0, [r3, #16]
 8010a82:	f7ff fdae 	bl	80105e2 <__hi0bits>
 8010a86:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010a8a:	e7e1      	b.n	8010a50 <__d2b+0x62>

08010a8c <_calloc_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	fb02 f401 	mul.w	r4, r2, r1
 8010a92:	4621      	mov	r1, r4
 8010a94:	f000 f856 	bl	8010b44 <_malloc_r>
 8010a98:	4605      	mov	r5, r0
 8010a9a:	b118      	cbz	r0, 8010aa4 <_calloc_r+0x18>
 8010a9c:	4622      	mov	r2, r4
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	f7fd ff0a 	bl	800e8b8 <memset>
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}

08010aa8 <_free_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4605      	mov	r5, r0
 8010aac:	2900      	cmp	r1, #0
 8010aae:	d045      	beq.n	8010b3c <_free_r+0x94>
 8010ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ab4:	1f0c      	subs	r4, r1, #4
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	bfb8      	it	lt
 8010aba:	18e4      	addlt	r4, r4, r3
 8010abc:	f000 fac3 	bl	8011046 <__malloc_lock>
 8010ac0:	4a1f      	ldr	r2, [pc, #124]	; (8010b40 <_free_r+0x98>)
 8010ac2:	6813      	ldr	r3, [r2, #0]
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	b933      	cbnz	r3, 8010ad6 <_free_r+0x2e>
 8010ac8:	6063      	str	r3, [r4, #4]
 8010aca:	6014      	str	r4, [r2, #0]
 8010acc:	4628      	mov	r0, r5
 8010ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ad2:	f000 bab9 	b.w	8011048 <__malloc_unlock>
 8010ad6:	42a3      	cmp	r3, r4
 8010ad8:	d90c      	bls.n	8010af4 <_free_r+0x4c>
 8010ada:	6821      	ldr	r1, [r4, #0]
 8010adc:	1862      	adds	r2, r4, r1
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	bf04      	itt	eq
 8010ae2:	681a      	ldreq	r2, [r3, #0]
 8010ae4:	685b      	ldreq	r3, [r3, #4]
 8010ae6:	6063      	str	r3, [r4, #4]
 8010ae8:	bf04      	itt	eq
 8010aea:	1852      	addeq	r2, r2, r1
 8010aec:	6022      	streq	r2, [r4, #0]
 8010aee:	6004      	str	r4, [r0, #0]
 8010af0:	e7ec      	b.n	8010acc <_free_r+0x24>
 8010af2:	4613      	mov	r3, r2
 8010af4:	685a      	ldr	r2, [r3, #4]
 8010af6:	b10a      	cbz	r2, 8010afc <_free_r+0x54>
 8010af8:	42a2      	cmp	r2, r4
 8010afa:	d9fa      	bls.n	8010af2 <_free_r+0x4a>
 8010afc:	6819      	ldr	r1, [r3, #0]
 8010afe:	1858      	adds	r0, r3, r1
 8010b00:	42a0      	cmp	r0, r4
 8010b02:	d10b      	bne.n	8010b1c <_free_r+0x74>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	4401      	add	r1, r0
 8010b08:	1858      	adds	r0, r3, r1
 8010b0a:	4282      	cmp	r2, r0
 8010b0c:	6019      	str	r1, [r3, #0]
 8010b0e:	d1dd      	bne.n	8010acc <_free_r+0x24>
 8010b10:	6810      	ldr	r0, [r2, #0]
 8010b12:	6852      	ldr	r2, [r2, #4]
 8010b14:	605a      	str	r2, [r3, #4]
 8010b16:	4401      	add	r1, r0
 8010b18:	6019      	str	r1, [r3, #0]
 8010b1a:	e7d7      	b.n	8010acc <_free_r+0x24>
 8010b1c:	d902      	bls.n	8010b24 <_free_r+0x7c>
 8010b1e:	230c      	movs	r3, #12
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	e7d3      	b.n	8010acc <_free_r+0x24>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	1821      	adds	r1, r4, r0
 8010b28:	428a      	cmp	r2, r1
 8010b2a:	bf04      	itt	eq
 8010b2c:	6811      	ldreq	r1, [r2, #0]
 8010b2e:	6852      	ldreq	r2, [r2, #4]
 8010b30:	6062      	str	r2, [r4, #4]
 8010b32:	bf04      	itt	eq
 8010b34:	1809      	addeq	r1, r1, r0
 8010b36:	6021      	streq	r1, [r4, #0]
 8010b38:	605c      	str	r4, [r3, #4]
 8010b3a:	e7c7      	b.n	8010acc <_free_r+0x24>
 8010b3c:	bd38      	pop	{r3, r4, r5, pc}
 8010b3e:	bf00      	nop
 8010b40:	20001a28 	.word	0x20001a28

08010b44 <_malloc_r>:
 8010b44:	b570      	push	{r4, r5, r6, lr}
 8010b46:	1ccd      	adds	r5, r1, #3
 8010b48:	f025 0503 	bic.w	r5, r5, #3
 8010b4c:	3508      	adds	r5, #8
 8010b4e:	2d0c      	cmp	r5, #12
 8010b50:	bf38      	it	cc
 8010b52:	250c      	movcc	r5, #12
 8010b54:	2d00      	cmp	r5, #0
 8010b56:	4606      	mov	r6, r0
 8010b58:	db01      	blt.n	8010b5e <_malloc_r+0x1a>
 8010b5a:	42a9      	cmp	r1, r5
 8010b5c:	d903      	bls.n	8010b66 <_malloc_r+0x22>
 8010b5e:	230c      	movs	r3, #12
 8010b60:	6033      	str	r3, [r6, #0]
 8010b62:	2000      	movs	r0, #0
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	f000 fa6e 	bl	8011046 <__malloc_lock>
 8010b6a:	4a21      	ldr	r2, [pc, #132]	; (8010bf0 <_malloc_r+0xac>)
 8010b6c:	6814      	ldr	r4, [r2, #0]
 8010b6e:	4621      	mov	r1, r4
 8010b70:	b991      	cbnz	r1, 8010b98 <_malloc_r+0x54>
 8010b72:	4c20      	ldr	r4, [pc, #128]	; (8010bf4 <_malloc_r+0xb0>)
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	b91b      	cbnz	r3, 8010b80 <_malloc_r+0x3c>
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f000 f98f 	bl	8010e9c <_sbrk_r>
 8010b7e:	6020      	str	r0, [r4, #0]
 8010b80:	4629      	mov	r1, r5
 8010b82:	4630      	mov	r0, r6
 8010b84:	f000 f98a 	bl	8010e9c <_sbrk_r>
 8010b88:	1c43      	adds	r3, r0, #1
 8010b8a:	d124      	bne.n	8010bd6 <_malloc_r+0x92>
 8010b8c:	230c      	movs	r3, #12
 8010b8e:	6033      	str	r3, [r6, #0]
 8010b90:	4630      	mov	r0, r6
 8010b92:	f000 fa59 	bl	8011048 <__malloc_unlock>
 8010b96:	e7e4      	b.n	8010b62 <_malloc_r+0x1e>
 8010b98:	680b      	ldr	r3, [r1, #0]
 8010b9a:	1b5b      	subs	r3, r3, r5
 8010b9c:	d418      	bmi.n	8010bd0 <_malloc_r+0x8c>
 8010b9e:	2b0b      	cmp	r3, #11
 8010ba0:	d90f      	bls.n	8010bc2 <_malloc_r+0x7e>
 8010ba2:	600b      	str	r3, [r1, #0]
 8010ba4:	50cd      	str	r5, [r1, r3]
 8010ba6:	18cc      	adds	r4, r1, r3
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f000 fa4d 	bl	8011048 <__malloc_unlock>
 8010bae:	f104 000b 	add.w	r0, r4, #11
 8010bb2:	1d23      	adds	r3, r4, #4
 8010bb4:	f020 0007 	bic.w	r0, r0, #7
 8010bb8:	1ac3      	subs	r3, r0, r3
 8010bba:	d0d3      	beq.n	8010b64 <_malloc_r+0x20>
 8010bbc:	425a      	negs	r2, r3
 8010bbe:	50e2      	str	r2, [r4, r3]
 8010bc0:	e7d0      	b.n	8010b64 <_malloc_r+0x20>
 8010bc2:	428c      	cmp	r4, r1
 8010bc4:	684b      	ldr	r3, [r1, #4]
 8010bc6:	bf16      	itet	ne
 8010bc8:	6063      	strne	r3, [r4, #4]
 8010bca:	6013      	streq	r3, [r2, #0]
 8010bcc:	460c      	movne	r4, r1
 8010bce:	e7eb      	b.n	8010ba8 <_malloc_r+0x64>
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	6849      	ldr	r1, [r1, #4]
 8010bd4:	e7cc      	b.n	8010b70 <_malloc_r+0x2c>
 8010bd6:	1cc4      	adds	r4, r0, #3
 8010bd8:	f024 0403 	bic.w	r4, r4, #3
 8010bdc:	42a0      	cmp	r0, r4
 8010bde:	d005      	beq.n	8010bec <_malloc_r+0xa8>
 8010be0:	1a21      	subs	r1, r4, r0
 8010be2:	4630      	mov	r0, r6
 8010be4:	f000 f95a 	bl	8010e9c <_sbrk_r>
 8010be8:	3001      	adds	r0, #1
 8010bea:	d0cf      	beq.n	8010b8c <_malloc_r+0x48>
 8010bec:	6025      	str	r5, [r4, #0]
 8010bee:	e7db      	b.n	8010ba8 <_malloc_r+0x64>
 8010bf0:	20001a28 	.word	0x20001a28
 8010bf4:	20001a2c 	.word	0x20001a2c

08010bf8 <__ssputs_r>:
 8010bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bfc:	688e      	ldr	r6, [r1, #8]
 8010bfe:	429e      	cmp	r6, r3
 8010c00:	4682      	mov	sl, r0
 8010c02:	460c      	mov	r4, r1
 8010c04:	4690      	mov	r8, r2
 8010c06:	4699      	mov	r9, r3
 8010c08:	d837      	bhi.n	8010c7a <__ssputs_r+0x82>
 8010c0a:	898a      	ldrh	r2, [r1, #12]
 8010c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c10:	d031      	beq.n	8010c76 <__ssputs_r+0x7e>
 8010c12:	6825      	ldr	r5, [r4, #0]
 8010c14:	6909      	ldr	r1, [r1, #16]
 8010c16:	1a6f      	subs	r7, r5, r1
 8010c18:	6965      	ldr	r5, [r4, #20]
 8010c1a:	2302      	movs	r3, #2
 8010c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c20:	fb95 f5f3 	sdiv	r5, r5, r3
 8010c24:	f109 0301 	add.w	r3, r9, #1
 8010c28:	443b      	add	r3, r7
 8010c2a:	429d      	cmp	r5, r3
 8010c2c:	bf38      	it	cc
 8010c2e:	461d      	movcc	r5, r3
 8010c30:	0553      	lsls	r3, r2, #21
 8010c32:	d530      	bpl.n	8010c96 <__ssputs_r+0x9e>
 8010c34:	4629      	mov	r1, r5
 8010c36:	f7ff ff85 	bl	8010b44 <_malloc_r>
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	b950      	cbnz	r0, 8010c54 <__ssputs_r+0x5c>
 8010c3e:	230c      	movs	r3, #12
 8010c40:	f8ca 3000 	str.w	r3, [sl]
 8010c44:	89a3      	ldrh	r3, [r4, #12]
 8010c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c4a:	81a3      	strh	r3, [r4, #12]
 8010c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c54:	463a      	mov	r2, r7
 8010c56:	6921      	ldr	r1, [r4, #16]
 8010c58:	f7ff fc32 	bl	80104c0 <memcpy>
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c66:	81a3      	strh	r3, [r4, #12]
 8010c68:	6126      	str	r6, [r4, #16]
 8010c6a:	6165      	str	r5, [r4, #20]
 8010c6c:	443e      	add	r6, r7
 8010c6e:	1bed      	subs	r5, r5, r7
 8010c70:	6026      	str	r6, [r4, #0]
 8010c72:	60a5      	str	r5, [r4, #8]
 8010c74:	464e      	mov	r6, r9
 8010c76:	454e      	cmp	r6, r9
 8010c78:	d900      	bls.n	8010c7c <__ssputs_r+0x84>
 8010c7a:	464e      	mov	r6, r9
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	4641      	mov	r1, r8
 8010c80:	6820      	ldr	r0, [r4, #0]
 8010c82:	f000 f9c7 	bl	8011014 <memmove>
 8010c86:	68a3      	ldr	r3, [r4, #8]
 8010c88:	1b9b      	subs	r3, r3, r6
 8010c8a:	60a3      	str	r3, [r4, #8]
 8010c8c:	6823      	ldr	r3, [r4, #0]
 8010c8e:	441e      	add	r6, r3
 8010c90:	6026      	str	r6, [r4, #0]
 8010c92:	2000      	movs	r0, #0
 8010c94:	e7dc      	b.n	8010c50 <__ssputs_r+0x58>
 8010c96:	462a      	mov	r2, r5
 8010c98:	f000 f9d7 	bl	801104a <_realloc_r>
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d1e2      	bne.n	8010c68 <__ssputs_r+0x70>
 8010ca2:	6921      	ldr	r1, [r4, #16]
 8010ca4:	4650      	mov	r0, sl
 8010ca6:	f7ff feff 	bl	8010aa8 <_free_r>
 8010caa:	e7c8      	b.n	8010c3e <__ssputs_r+0x46>

08010cac <_svfiprintf_r>:
 8010cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	898b      	ldrh	r3, [r1, #12]
 8010cb4:	061f      	lsls	r7, r3, #24
 8010cb6:	b09d      	sub	sp, #116	; 0x74
 8010cb8:	4680      	mov	r8, r0
 8010cba:	460c      	mov	r4, r1
 8010cbc:	4616      	mov	r6, r2
 8010cbe:	d50f      	bpl.n	8010ce0 <_svfiprintf_r+0x34>
 8010cc0:	690b      	ldr	r3, [r1, #16]
 8010cc2:	b96b      	cbnz	r3, 8010ce0 <_svfiprintf_r+0x34>
 8010cc4:	2140      	movs	r1, #64	; 0x40
 8010cc6:	f7ff ff3d 	bl	8010b44 <_malloc_r>
 8010cca:	6020      	str	r0, [r4, #0]
 8010ccc:	6120      	str	r0, [r4, #16]
 8010cce:	b928      	cbnz	r0, 8010cdc <_svfiprintf_r+0x30>
 8010cd0:	230c      	movs	r3, #12
 8010cd2:	f8c8 3000 	str.w	r3, [r8]
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cda:	e0c8      	b.n	8010e6e <_svfiprintf_r+0x1c2>
 8010cdc:	2340      	movs	r3, #64	; 0x40
 8010cde:	6163      	str	r3, [r4, #20]
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce4:	2320      	movs	r3, #32
 8010ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cea:	2330      	movs	r3, #48	; 0x30
 8010cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cf0:	9503      	str	r5, [sp, #12]
 8010cf2:	f04f 0b01 	mov.w	fp, #1
 8010cf6:	4637      	mov	r7, r6
 8010cf8:	463d      	mov	r5, r7
 8010cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010cfe:	b10b      	cbz	r3, 8010d04 <_svfiprintf_r+0x58>
 8010d00:	2b25      	cmp	r3, #37	; 0x25
 8010d02:	d13e      	bne.n	8010d82 <_svfiprintf_r+0xd6>
 8010d04:	ebb7 0a06 	subs.w	sl, r7, r6
 8010d08:	d00b      	beq.n	8010d22 <_svfiprintf_r+0x76>
 8010d0a:	4653      	mov	r3, sl
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	4621      	mov	r1, r4
 8010d10:	4640      	mov	r0, r8
 8010d12:	f7ff ff71 	bl	8010bf8 <__ssputs_r>
 8010d16:	3001      	adds	r0, #1
 8010d18:	f000 80a4 	beq.w	8010e64 <_svfiprintf_r+0x1b8>
 8010d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d1e:	4453      	add	r3, sl
 8010d20:	9309      	str	r3, [sp, #36]	; 0x24
 8010d22:	783b      	ldrb	r3, [r7, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 809d 	beq.w	8010e64 <_svfiprintf_r+0x1b8>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d34:	9304      	str	r3, [sp, #16]
 8010d36:	9307      	str	r3, [sp, #28]
 8010d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d3e:	462f      	mov	r7, r5
 8010d40:	2205      	movs	r2, #5
 8010d42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010d46:	4850      	ldr	r0, [pc, #320]	; (8010e88 <_svfiprintf_r+0x1dc>)
 8010d48:	f7ef fa72 	bl	8000230 <memchr>
 8010d4c:	9b04      	ldr	r3, [sp, #16]
 8010d4e:	b9d0      	cbnz	r0, 8010d86 <_svfiprintf_r+0xda>
 8010d50:	06d9      	lsls	r1, r3, #27
 8010d52:	bf44      	itt	mi
 8010d54:	2220      	movmi	r2, #32
 8010d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d5a:	071a      	lsls	r2, r3, #28
 8010d5c:	bf44      	itt	mi
 8010d5e:	222b      	movmi	r2, #43	; 0x2b
 8010d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d64:	782a      	ldrb	r2, [r5, #0]
 8010d66:	2a2a      	cmp	r2, #42	; 0x2a
 8010d68:	d015      	beq.n	8010d96 <_svfiprintf_r+0xea>
 8010d6a:	9a07      	ldr	r2, [sp, #28]
 8010d6c:	462f      	mov	r7, r5
 8010d6e:	2000      	movs	r0, #0
 8010d70:	250a      	movs	r5, #10
 8010d72:	4639      	mov	r1, r7
 8010d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d78:	3b30      	subs	r3, #48	; 0x30
 8010d7a:	2b09      	cmp	r3, #9
 8010d7c:	d94d      	bls.n	8010e1a <_svfiprintf_r+0x16e>
 8010d7e:	b1b8      	cbz	r0, 8010db0 <_svfiprintf_r+0x104>
 8010d80:	e00f      	b.n	8010da2 <_svfiprintf_r+0xf6>
 8010d82:	462f      	mov	r7, r5
 8010d84:	e7b8      	b.n	8010cf8 <_svfiprintf_r+0x4c>
 8010d86:	4a40      	ldr	r2, [pc, #256]	; (8010e88 <_svfiprintf_r+0x1dc>)
 8010d88:	1a80      	subs	r0, r0, r2
 8010d8a:	fa0b f000 	lsl.w	r0, fp, r0
 8010d8e:	4318      	orrs	r0, r3
 8010d90:	9004      	str	r0, [sp, #16]
 8010d92:	463d      	mov	r5, r7
 8010d94:	e7d3      	b.n	8010d3e <_svfiprintf_r+0x92>
 8010d96:	9a03      	ldr	r2, [sp, #12]
 8010d98:	1d11      	adds	r1, r2, #4
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	9103      	str	r1, [sp, #12]
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	db01      	blt.n	8010da6 <_svfiprintf_r+0xfa>
 8010da2:	9207      	str	r2, [sp, #28]
 8010da4:	e004      	b.n	8010db0 <_svfiprintf_r+0x104>
 8010da6:	4252      	negs	r2, r2
 8010da8:	f043 0302 	orr.w	r3, r3, #2
 8010dac:	9207      	str	r2, [sp, #28]
 8010dae:	9304      	str	r3, [sp, #16]
 8010db0:	783b      	ldrb	r3, [r7, #0]
 8010db2:	2b2e      	cmp	r3, #46	; 0x2e
 8010db4:	d10c      	bne.n	8010dd0 <_svfiprintf_r+0x124>
 8010db6:	787b      	ldrb	r3, [r7, #1]
 8010db8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dba:	d133      	bne.n	8010e24 <_svfiprintf_r+0x178>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	1d1a      	adds	r2, r3, #4
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	9203      	str	r2, [sp, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bfb8      	it	lt
 8010dc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010dcc:	3702      	adds	r7, #2
 8010dce:	9305      	str	r3, [sp, #20]
 8010dd0:	4d2e      	ldr	r5, [pc, #184]	; (8010e8c <_svfiprintf_r+0x1e0>)
 8010dd2:	7839      	ldrb	r1, [r7, #0]
 8010dd4:	2203      	movs	r2, #3
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7ef fa2a 	bl	8000230 <memchr>
 8010ddc:	b138      	cbz	r0, 8010dee <_svfiprintf_r+0x142>
 8010dde:	2340      	movs	r3, #64	; 0x40
 8010de0:	1b40      	subs	r0, r0, r5
 8010de2:	fa03 f000 	lsl.w	r0, r3, r0
 8010de6:	9b04      	ldr	r3, [sp, #16]
 8010de8:	4303      	orrs	r3, r0
 8010dea:	3701      	adds	r7, #1
 8010dec:	9304      	str	r3, [sp, #16]
 8010dee:	7839      	ldrb	r1, [r7, #0]
 8010df0:	4827      	ldr	r0, [pc, #156]	; (8010e90 <_svfiprintf_r+0x1e4>)
 8010df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010df6:	2206      	movs	r2, #6
 8010df8:	1c7e      	adds	r6, r7, #1
 8010dfa:	f7ef fa19 	bl	8000230 <memchr>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d038      	beq.n	8010e74 <_svfiprintf_r+0x1c8>
 8010e02:	4b24      	ldr	r3, [pc, #144]	; (8010e94 <_svfiprintf_r+0x1e8>)
 8010e04:	bb13      	cbnz	r3, 8010e4c <_svfiprintf_r+0x1a0>
 8010e06:	9b03      	ldr	r3, [sp, #12]
 8010e08:	3307      	adds	r3, #7
 8010e0a:	f023 0307 	bic.w	r3, r3, #7
 8010e0e:	3308      	adds	r3, #8
 8010e10:	9303      	str	r3, [sp, #12]
 8010e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e14:	444b      	add	r3, r9
 8010e16:	9309      	str	r3, [sp, #36]	; 0x24
 8010e18:	e76d      	b.n	8010cf6 <_svfiprintf_r+0x4a>
 8010e1a:	fb05 3202 	mla	r2, r5, r2, r3
 8010e1e:	2001      	movs	r0, #1
 8010e20:	460f      	mov	r7, r1
 8010e22:	e7a6      	b.n	8010d72 <_svfiprintf_r+0xc6>
 8010e24:	2300      	movs	r3, #0
 8010e26:	3701      	adds	r7, #1
 8010e28:	9305      	str	r3, [sp, #20]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	250a      	movs	r5, #10
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e34:	3a30      	subs	r2, #48	; 0x30
 8010e36:	2a09      	cmp	r2, #9
 8010e38:	d903      	bls.n	8010e42 <_svfiprintf_r+0x196>
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0c8      	beq.n	8010dd0 <_svfiprintf_r+0x124>
 8010e3e:	9105      	str	r1, [sp, #20]
 8010e40:	e7c6      	b.n	8010dd0 <_svfiprintf_r+0x124>
 8010e42:	fb05 2101 	mla	r1, r5, r1, r2
 8010e46:	2301      	movs	r3, #1
 8010e48:	4607      	mov	r7, r0
 8010e4a:	e7f0      	b.n	8010e2e <_svfiprintf_r+0x182>
 8010e4c:	ab03      	add	r3, sp, #12
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	4622      	mov	r2, r4
 8010e52:	4b11      	ldr	r3, [pc, #68]	; (8010e98 <_svfiprintf_r+0x1ec>)
 8010e54:	a904      	add	r1, sp, #16
 8010e56:	4640      	mov	r0, r8
 8010e58:	f7fd fdca 	bl	800e9f0 <_printf_float>
 8010e5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010e60:	4681      	mov	r9, r0
 8010e62:	d1d6      	bne.n	8010e12 <_svfiprintf_r+0x166>
 8010e64:	89a3      	ldrh	r3, [r4, #12]
 8010e66:	065b      	lsls	r3, r3, #25
 8010e68:	f53f af35 	bmi.w	8010cd6 <_svfiprintf_r+0x2a>
 8010e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e6e:	b01d      	add	sp, #116	; 0x74
 8010e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e74:	ab03      	add	r3, sp, #12
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	4622      	mov	r2, r4
 8010e7a:	4b07      	ldr	r3, [pc, #28]	; (8010e98 <_svfiprintf_r+0x1ec>)
 8010e7c:	a904      	add	r1, sp, #16
 8010e7e:	4640      	mov	r0, r8
 8010e80:	f7fe f86c 	bl	800ef5c <_printf_i>
 8010e84:	e7ea      	b.n	8010e5c <_svfiprintf_r+0x1b0>
 8010e86:	bf00      	nop
 8010e88:	08013a4c 	.word	0x08013a4c
 8010e8c:	08013a52 	.word	0x08013a52
 8010e90:	08013a56 	.word	0x08013a56
 8010e94:	0800e9f1 	.word	0x0800e9f1
 8010e98:	08010bf9 	.word	0x08010bf9

08010e9c <_sbrk_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4c06      	ldr	r4, [pc, #24]	; (8010eb8 <_sbrk_r+0x1c>)
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	4608      	mov	r0, r1
 8010ea6:	6023      	str	r3, [r4, #0]
 8010ea8:	f7f6 ffe4 	bl	8007e74 <_sbrk>
 8010eac:	1c43      	adds	r3, r0, #1
 8010eae:	d102      	bne.n	8010eb6 <_sbrk_r+0x1a>
 8010eb0:	6823      	ldr	r3, [r4, #0]
 8010eb2:	b103      	cbz	r3, 8010eb6 <_sbrk_r+0x1a>
 8010eb4:	602b      	str	r3, [r5, #0]
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}
 8010eb8:	20002460 	.word	0x20002460

08010ebc <__sread>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec4:	f000 f8e8 	bl	8011098 <_read_r>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	bfab      	itete	ge
 8010ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ece:	89a3      	ldrhlt	r3, [r4, #12]
 8010ed0:	181b      	addge	r3, r3, r0
 8010ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ed6:	bfac      	ite	ge
 8010ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8010eda:	81a3      	strhlt	r3, [r4, #12]
 8010edc:	bd10      	pop	{r4, pc}

08010ede <__swrite>:
 8010ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee2:	461f      	mov	r7, r3
 8010ee4:	898b      	ldrh	r3, [r1, #12]
 8010ee6:	05db      	lsls	r3, r3, #23
 8010ee8:	4605      	mov	r5, r0
 8010eea:	460c      	mov	r4, r1
 8010eec:	4616      	mov	r6, r2
 8010eee:	d505      	bpl.n	8010efc <__swrite+0x1e>
 8010ef0:	2302      	movs	r3, #2
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef8:	f000 f868 	bl	8010fcc <_lseek_r>
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f06:	81a3      	strh	r3, [r4, #12]
 8010f08:	4632      	mov	r2, r6
 8010f0a:	463b      	mov	r3, r7
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f12:	f000 b817 	b.w	8010f44 <_write_r>

08010f16 <__sseek>:
 8010f16:	b510      	push	{r4, lr}
 8010f18:	460c      	mov	r4, r1
 8010f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f1e:	f000 f855 	bl	8010fcc <_lseek_r>
 8010f22:	1c43      	adds	r3, r0, #1
 8010f24:	89a3      	ldrh	r3, [r4, #12]
 8010f26:	bf15      	itete	ne
 8010f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f32:	81a3      	strheq	r3, [r4, #12]
 8010f34:	bf18      	it	ne
 8010f36:	81a3      	strhne	r3, [r4, #12]
 8010f38:	bd10      	pop	{r4, pc}

08010f3a <__sclose>:
 8010f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f3e:	f000 b813 	b.w	8010f68 <_close_r>
	...

08010f44 <_write_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4c07      	ldr	r4, [pc, #28]	; (8010f64 <_write_r+0x20>)
 8010f48:	4605      	mov	r5, r0
 8010f4a:	4608      	mov	r0, r1
 8010f4c:	4611      	mov	r1, r2
 8010f4e:	2200      	movs	r2, #0
 8010f50:	6022      	str	r2, [r4, #0]
 8010f52:	461a      	mov	r2, r3
 8010f54:	f7f6 fc63 	bl	800781e <_write>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d102      	bne.n	8010f62 <_write_r+0x1e>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	b103      	cbz	r3, 8010f62 <_write_r+0x1e>
 8010f60:	602b      	str	r3, [r5, #0]
 8010f62:	bd38      	pop	{r3, r4, r5, pc}
 8010f64:	20002460 	.word	0x20002460

08010f68 <_close_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4c06      	ldr	r4, [pc, #24]	; (8010f84 <_close_r+0x1c>)
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4605      	mov	r5, r0
 8010f70:	4608      	mov	r0, r1
 8010f72:	6023      	str	r3, [r4, #0]
 8010f74:	f7f6 ff49 	bl	8007e0a <_close>
 8010f78:	1c43      	adds	r3, r0, #1
 8010f7a:	d102      	bne.n	8010f82 <_close_r+0x1a>
 8010f7c:	6823      	ldr	r3, [r4, #0]
 8010f7e:	b103      	cbz	r3, 8010f82 <_close_r+0x1a>
 8010f80:	602b      	str	r3, [r5, #0]
 8010f82:	bd38      	pop	{r3, r4, r5, pc}
 8010f84:	20002460 	.word	0x20002460

08010f88 <_fstat_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4c07      	ldr	r4, [pc, #28]	; (8010fa8 <_fstat_r+0x20>)
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4605      	mov	r5, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	4611      	mov	r1, r2
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	f7f6 ff44 	bl	8007e22 <_fstat>
 8010f9a:	1c43      	adds	r3, r0, #1
 8010f9c:	d102      	bne.n	8010fa4 <_fstat_r+0x1c>
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	b103      	cbz	r3, 8010fa4 <_fstat_r+0x1c>
 8010fa2:	602b      	str	r3, [r5, #0]
 8010fa4:	bd38      	pop	{r3, r4, r5, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20002460 	.word	0x20002460

08010fac <_isatty_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	4c06      	ldr	r4, [pc, #24]	; (8010fc8 <_isatty_r+0x1c>)
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	6023      	str	r3, [r4, #0]
 8010fb8:	f7f6 ff43 	bl	8007e42 <_isatty>
 8010fbc:	1c43      	adds	r3, r0, #1
 8010fbe:	d102      	bne.n	8010fc6 <_isatty_r+0x1a>
 8010fc0:	6823      	ldr	r3, [r4, #0]
 8010fc2:	b103      	cbz	r3, 8010fc6 <_isatty_r+0x1a>
 8010fc4:	602b      	str	r3, [r5, #0]
 8010fc6:	bd38      	pop	{r3, r4, r5, pc}
 8010fc8:	20002460 	.word	0x20002460

08010fcc <_lseek_r>:
 8010fcc:	b538      	push	{r3, r4, r5, lr}
 8010fce:	4c07      	ldr	r4, [pc, #28]	; (8010fec <_lseek_r+0x20>)
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	6022      	str	r2, [r4, #0]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	f7f6 ff3c 	bl	8007e58 <_lseek>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_lseek_r+0x1e>
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_lseek_r+0x1e>
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	20002460 	.word	0x20002460

08010ff0 <__ascii_mbtowc>:
 8010ff0:	b082      	sub	sp, #8
 8010ff2:	b901      	cbnz	r1, 8010ff6 <__ascii_mbtowc+0x6>
 8010ff4:	a901      	add	r1, sp, #4
 8010ff6:	b142      	cbz	r2, 801100a <__ascii_mbtowc+0x1a>
 8010ff8:	b14b      	cbz	r3, 801100e <__ascii_mbtowc+0x1e>
 8010ffa:	7813      	ldrb	r3, [r2, #0]
 8010ffc:	600b      	str	r3, [r1, #0]
 8010ffe:	7812      	ldrb	r2, [r2, #0]
 8011000:	1c10      	adds	r0, r2, #0
 8011002:	bf18      	it	ne
 8011004:	2001      	movne	r0, #1
 8011006:	b002      	add	sp, #8
 8011008:	4770      	bx	lr
 801100a:	4610      	mov	r0, r2
 801100c:	e7fb      	b.n	8011006 <__ascii_mbtowc+0x16>
 801100e:	f06f 0001 	mvn.w	r0, #1
 8011012:	e7f8      	b.n	8011006 <__ascii_mbtowc+0x16>

08011014 <memmove>:
 8011014:	4288      	cmp	r0, r1
 8011016:	b510      	push	{r4, lr}
 8011018:	eb01 0302 	add.w	r3, r1, r2
 801101c:	d807      	bhi.n	801102e <memmove+0x1a>
 801101e:	1e42      	subs	r2, r0, #1
 8011020:	4299      	cmp	r1, r3
 8011022:	d00a      	beq.n	801103a <memmove+0x26>
 8011024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011028:	f802 4f01 	strb.w	r4, [r2, #1]!
 801102c:	e7f8      	b.n	8011020 <memmove+0xc>
 801102e:	4283      	cmp	r3, r0
 8011030:	d9f5      	bls.n	801101e <memmove+0xa>
 8011032:	1881      	adds	r1, r0, r2
 8011034:	1ad2      	subs	r2, r2, r3
 8011036:	42d3      	cmn	r3, r2
 8011038:	d100      	bne.n	801103c <memmove+0x28>
 801103a:	bd10      	pop	{r4, pc}
 801103c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011040:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011044:	e7f7      	b.n	8011036 <memmove+0x22>

08011046 <__malloc_lock>:
 8011046:	4770      	bx	lr

08011048 <__malloc_unlock>:
 8011048:	4770      	bx	lr

0801104a <_realloc_r>:
 801104a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104c:	4607      	mov	r7, r0
 801104e:	4614      	mov	r4, r2
 8011050:	460e      	mov	r6, r1
 8011052:	b921      	cbnz	r1, 801105e <_realloc_r+0x14>
 8011054:	4611      	mov	r1, r2
 8011056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801105a:	f7ff bd73 	b.w	8010b44 <_malloc_r>
 801105e:	b922      	cbnz	r2, 801106a <_realloc_r+0x20>
 8011060:	f7ff fd22 	bl	8010aa8 <_free_r>
 8011064:	4625      	mov	r5, r4
 8011066:	4628      	mov	r0, r5
 8011068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801106a:	f000 f834 	bl	80110d6 <_malloc_usable_size_r>
 801106e:	42a0      	cmp	r0, r4
 8011070:	d20f      	bcs.n	8011092 <_realloc_r+0x48>
 8011072:	4621      	mov	r1, r4
 8011074:	4638      	mov	r0, r7
 8011076:	f7ff fd65 	bl	8010b44 <_malloc_r>
 801107a:	4605      	mov	r5, r0
 801107c:	2800      	cmp	r0, #0
 801107e:	d0f2      	beq.n	8011066 <_realloc_r+0x1c>
 8011080:	4631      	mov	r1, r6
 8011082:	4622      	mov	r2, r4
 8011084:	f7ff fa1c 	bl	80104c0 <memcpy>
 8011088:	4631      	mov	r1, r6
 801108a:	4638      	mov	r0, r7
 801108c:	f7ff fd0c 	bl	8010aa8 <_free_r>
 8011090:	e7e9      	b.n	8011066 <_realloc_r+0x1c>
 8011092:	4635      	mov	r5, r6
 8011094:	e7e7      	b.n	8011066 <_realloc_r+0x1c>
	...

08011098 <_read_r>:
 8011098:	b538      	push	{r3, r4, r5, lr}
 801109a:	4c07      	ldr	r4, [pc, #28]	; (80110b8 <_read_r+0x20>)
 801109c:	4605      	mov	r5, r0
 801109e:	4608      	mov	r0, r1
 80110a0:	4611      	mov	r1, r2
 80110a2:	2200      	movs	r2, #0
 80110a4:	6022      	str	r2, [r4, #0]
 80110a6:	461a      	mov	r2, r3
 80110a8:	f7f6 fe92 	bl	8007dd0 <_read>
 80110ac:	1c43      	adds	r3, r0, #1
 80110ae:	d102      	bne.n	80110b6 <_read_r+0x1e>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	b103      	cbz	r3, 80110b6 <_read_r+0x1e>
 80110b4:	602b      	str	r3, [r5, #0]
 80110b6:	bd38      	pop	{r3, r4, r5, pc}
 80110b8:	20002460 	.word	0x20002460

080110bc <__ascii_wctomb>:
 80110bc:	b149      	cbz	r1, 80110d2 <__ascii_wctomb+0x16>
 80110be:	2aff      	cmp	r2, #255	; 0xff
 80110c0:	bf85      	ittet	hi
 80110c2:	238a      	movhi	r3, #138	; 0x8a
 80110c4:	6003      	strhi	r3, [r0, #0]
 80110c6:	700a      	strbls	r2, [r1, #0]
 80110c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80110cc:	bf98      	it	ls
 80110ce:	2001      	movls	r0, #1
 80110d0:	4770      	bx	lr
 80110d2:	4608      	mov	r0, r1
 80110d4:	4770      	bx	lr

080110d6 <_malloc_usable_size_r>:
 80110d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110da:	1f18      	subs	r0, r3, #4
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bfbc      	itt	lt
 80110e0:	580b      	ldrlt	r3, [r1, r0]
 80110e2:	18c0      	addlt	r0, r0, r3
 80110e4:	4770      	bx	lr
	...

080110e8 <log10>:
 80110e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ea:	ed2d 8b02 	vpush	{d8}
 80110ee:	b08b      	sub	sp, #44	; 0x2c
 80110f0:	ec55 4b10 	vmov	r4, r5, d0
 80110f4:	f000 f9e8 	bl	80114c8 <__ieee754_log10>
 80110f8:	4b36      	ldr	r3, [pc, #216]	; (80111d4 <log10+0xec>)
 80110fa:	eeb0 8a40 	vmov.f32	s16, s0
 80110fe:	eef0 8a60 	vmov.f32	s17, s1
 8011102:	f993 6000 	ldrsb.w	r6, [r3]
 8011106:	1c73      	adds	r3, r6, #1
 8011108:	d05c      	beq.n	80111c4 <log10+0xdc>
 801110a:	4622      	mov	r2, r4
 801110c:	462b      	mov	r3, r5
 801110e:	4620      	mov	r0, r4
 8011110:	4629      	mov	r1, r5
 8011112:	f7ef fd33 	bl	8000b7c <__aeabi_dcmpun>
 8011116:	4607      	mov	r7, r0
 8011118:	2800      	cmp	r0, #0
 801111a:	d153      	bne.n	80111c4 <log10+0xdc>
 801111c:	2200      	movs	r2, #0
 801111e:	2300      	movs	r3, #0
 8011120:	4620      	mov	r0, r4
 8011122:	4629      	mov	r1, r5
 8011124:	f7ef fd0c 	bl	8000b40 <__aeabi_dcmple>
 8011128:	2800      	cmp	r0, #0
 801112a:	d04b      	beq.n	80111c4 <log10+0xdc>
 801112c:	4b2a      	ldr	r3, [pc, #168]	; (80111d8 <log10+0xf0>)
 801112e:	9301      	str	r3, [sp, #4]
 8011130:	9708      	str	r7, [sp, #32]
 8011132:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011136:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801113a:	b9a6      	cbnz	r6, 8011166 <log10+0x7e>
 801113c:	4b27      	ldr	r3, [pc, #156]	; (80111dc <log10+0xf4>)
 801113e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011142:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011146:	4620      	mov	r0, r4
 8011148:	2200      	movs	r2, #0
 801114a:	2300      	movs	r3, #0
 801114c:	4629      	mov	r1, r5
 801114e:	f7ef fce3 	bl	8000b18 <__aeabi_dcmpeq>
 8011152:	bb40      	cbnz	r0, 80111a6 <log10+0xbe>
 8011154:	2301      	movs	r3, #1
 8011156:	2e02      	cmp	r6, #2
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	d119      	bne.n	8011190 <log10+0xa8>
 801115c:	f7fd fb82 	bl	800e864 <__errno>
 8011160:	2321      	movs	r3, #33	; 0x21
 8011162:	6003      	str	r3, [r0, #0]
 8011164:	e019      	b.n	801119a <log10+0xb2>
 8011166:	4b1e      	ldr	r3, [pc, #120]	; (80111e0 <log10+0xf8>)
 8011168:	2200      	movs	r2, #0
 801116a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801116e:	4620      	mov	r0, r4
 8011170:	2200      	movs	r2, #0
 8011172:	2300      	movs	r3, #0
 8011174:	4629      	mov	r1, r5
 8011176:	f7ef fccf 	bl	8000b18 <__aeabi_dcmpeq>
 801117a:	2800      	cmp	r0, #0
 801117c:	d0ea      	beq.n	8011154 <log10+0x6c>
 801117e:	2302      	movs	r3, #2
 8011180:	429e      	cmp	r6, r3
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	d111      	bne.n	80111aa <log10+0xc2>
 8011186:	f7fd fb6d 	bl	800e864 <__errno>
 801118a:	2322      	movs	r3, #34	; 0x22
 801118c:	6003      	str	r3, [r0, #0]
 801118e:	e011      	b.n	80111b4 <log10+0xcc>
 8011190:	4668      	mov	r0, sp
 8011192:	f000 fff4 	bl	801217e <matherr>
 8011196:	2800      	cmp	r0, #0
 8011198:	d0e0      	beq.n	801115c <log10+0x74>
 801119a:	4812      	ldr	r0, [pc, #72]	; (80111e4 <log10+0xfc>)
 801119c:	f000 fff4 	bl	8012188 <nan>
 80111a0:	ed8d 0b06 	vstr	d0, [sp, #24]
 80111a4:	e006      	b.n	80111b4 <log10+0xcc>
 80111a6:	2302      	movs	r3, #2
 80111a8:	9300      	str	r3, [sp, #0]
 80111aa:	4668      	mov	r0, sp
 80111ac:	f000 ffe7 	bl	801217e <matherr>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d0e8      	beq.n	8011186 <log10+0x9e>
 80111b4:	9b08      	ldr	r3, [sp, #32]
 80111b6:	b11b      	cbz	r3, 80111c0 <log10+0xd8>
 80111b8:	f7fd fb54 	bl	800e864 <__errno>
 80111bc:	9b08      	ldr	r3, [sp, #32]
 80111be:	6003      	str	r3, [r0, #0]
 80111c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80111c4:	eeb0 0a48 	vmov.f32	s0, s16
 80111c8:	eef0 0a68 	vmov.f32	s1, s17
 80111cc:	b00b      	add	sp, #44	; 0x2c
 80111ce:	ecbd 8b02 	vpop	{d8}
 80111d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111d4:	200019c4 	.word	0x200019c4
 80111d8:	08013b68 	.word	0x08013b68
 80111dc:	c7efffff 	.word	0xc7efffff
 80111e0:	fff00000 	.word	0xfff00000
 80111e4:	08013a51 	.word	0x08013a51

080111e8 <pow>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	ed2d 8b04 	vpush	{d8-d9}
 80111f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80114c4 <pow+0x2dc>
 80111f4:	b08d      	sub	sp, #52	; 0x34
 80111f6:	ec57 6b10 	vmov	r6, r7, d0
 80111fa:	ec55 4b11 	vmov	r4, r5, d1
 80111fe:	f000 f9ef 	bl	80115e0 <__ieee754_pow>
 8011202:	f999 3000 	ldrsb.w	r3, [r9]
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	3301      	adds	r3, #1
 801120a:	eeb0 8a40 	vmov.f32	s16, s0
 801120e:	eef0 8a60 	vmov.f32	s17, s1
 8011212:	46c8      	mov	r8, r9
 8011214:	d05f      	beq.n	80112d6 <pow+0xee>
 8011216:	4622      	mov	r2, r4
 8011218:	462b      	mov	r3, r5
 801121a:	4620      	mov	r0, r4
 801121c:	4629      	mov	r1, r5
 801121e:	f7ef fcad 	bl	8000b7c <__aeabi_dcmpun>
 8011222:	4683      	mov	fp, r0
 8011224:	2800      	cmp	r0, #0
 8011226:	d156      	bne.n	80112d6 <pow+0xee>
 8011228:	4632      	mov	r2, r6
 801122a:	463b      	mov	r3, r7
 801122c:	4630      	mov	r0, r6
 801122e:	4639      	mov	r1, r7
 8011230:	f7ef fca4 	bl	8000b7c <__aeabi_dcmpun>
 8011234:	9001      	str	r0, [sp, #4]
 8011236:	b1e8      	cbz	r0, 8011274 <pow+0x8c>
 8011238:	2200      	movs	r2, #0
 801123a:	2300      	movs	r3, #0
 801123c:	4620      	mov	r0, r4
 801123e:	4629      	mov	r1, r5
 8011240:	f7ef fc6a 	bl	8000b18 <__aeabi_dcmpeq>
 8011244:	2800      	cmp	r0, #0
 8011246:	d046      	beq.n	80112d6 <pow+0xee>
 8011248:	2301      	movs	r3, #1
 801124a:	9302      	str	r3, [sp, #8]
 801124c:	4b96      	ldr	r3, [pc, #600]	; (80114a8 <pow+0x2c0>)
 801124e:	9303      	str	r3, [sp, #12]
 8011250:	4b96      	ldr	r3, [pc, #600]	; (80114ac <pow+0x2c4>)
 8011252:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011256:	2200      	movs	r2, #0
 8011258:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801125c:	9b00      	ldr	r3, [sp, #0]
 801125e:	2b02      	cmp	r3, #2
 8011260:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011264:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011268:	d033      	beq.n	80112d2 <pow+0xea>
 801126a:	a802      	add	r0, sp, #8
 801126c:	f000 ff87 	bl	801217e <matherr>
 8011270:	bb48      	cbnz	r0, 80112c6 <pow+0xde>
 8011272:	e05d      	b.n	8011330 <pow+0x148>
 8011274:	f04f 0a00 	mov.w	sl, #0
 8011278:	f04f 0b00 	mov.w	fp, #0
 801127c:	4652      	mov	r2, sl
 801127e:	465b      	mov	r3, fp
 8011280:	4630      	mov	r0, r6
 8011282:	4639      	mov	r1, r7
 8011284:	f7ef fc48 	bl	8000b18 <__aeabi_dcmpeq>
 8011288:	ec4b ab19 	vmov	d9, sl, fp
 801128c:	2800      	cmp	r0, #0
 801128e:	d054      	beq.n	801133a <pow+0x152>
 8011290:	4652      	mov	r2, sl
 8011292:	465b      	mov	r3, fp
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f7ef fc3e 	bl	8000b18 <__aeabi_dcmpeq>
 801129c:	4680      	mov	r8, r0
 801129e:	b318      	cbz	r0, 80112e8 <pow+0x100>
 80112a0:	2301      	movs	r3, #1
 80112a2:	9302      	str	r3, [sp, #8]
 80112a4:	4b80      	ldr	r3, [pc, #512]	; (80114a8 <pow+0x2c0>)
 80112a6:	9303      	str	r3, [sp, #12]
 80112a8:	9b01      	ldr	r3, [sp, #4]
 80112aa:	930a      	str	r3, [sp, #40]	; 0x28
 80112ac:	9b00      	ldr	r3, [sp, #0]
 80112ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80112b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80112b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d0d5      	beq.n	801126a <pow+0x82>
 80112be:	4b7b      	ldr	r3, [pc, #492]	; (80114ac <pow+0x2c4>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80112c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112c8:	b11b      	cbz	r3, 80112d2 <pow+0xea>
 80112ca:	f7fd facb 	bl	800e864 <__errno>
 80112ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d0:	6003      	str	r3, [r0, #0]
 80112d2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80112d6:	eeb0 0a48 	vmov.f32	s0, s16
 80112da:	eef0 0a68 	vmov.f32	s1, s17
 80112de:	b00d      	add	sp, #52	; 0x34
 80112e0:	ecbd 8b04 	vpop	{d8-d9}
 80112e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e8:	ec45 4b10 	vmov	d0, r4, r5
 80112ec:	f000 ff3f 	bl	801216e <finite>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d0f0      	beq.n	80112d6 <pow+0xee>
 80112f4:	4652      	mov	r2, sl
 80112f6:	465b      	mov	r3, fp
 80112f8:	4620      	mov	r0, r4
 80112fa:	4629      	mov	r1, r5
 80112fc:	f7ef fc16 	bl	8000b2c <__aeabi_dcmplt>
 8011300:	2800      	cmp	r0, #0
 8011302:	d0e8      	beq.n	80112d6 <pow+0xee>
 8011304:	2301      	movs	r3, #1
 8011306:	9302      	str	r3, [sp, #8]
 8011308:	4b67      	ldr	r3, [pc, #412]	; (80114a8 <pow+0x2c0>)
 801130a:	9303      	str	r3, [sp, #12]
 801130c:	f999 3000 	ldrsb.w	r3, [r9]
 8011310:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011314:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011318:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801131c:	b913      	cbnz	r3, 8011324 <pow+0x13c>
 801131e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011322:	e7a2      	b.n	801126a <pow+0x82>
 8011324:	4962      	ldr	r1, [pc, #392]	; (80114b0 <pow+0x2c8>)
 8011326:	2000      	movs	r0, #0
 8011328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801132c:	2b02      	cmp	r3, #2
 801132e:	d19c      	bne.n	801126a <pow+0x82>
 8011330:	f7fd fa98 	bl	800e864 <__errno>
 8011334:	2321      	movs	r3, #33	; 0x21
 8011336:	6003      	str	r3, [r0, #0]
 8011338:	e7c5      	b.n	80112c6 <pow+0xde>
 801133a:	eeb0 0a48 	vmov.f32	s0, s16
 801133e:	eef0 0a68 	vmov.f32	s1, s17
 8011342:	f000 ff14 	bl	801216e <finite>
 8011346:	9000      	str	r0, [sp, #0]
 8011348:	2800      	cmp	r0, #0
 801134a:	f040 8081 	bne.w	8011450 <pow+0x268>
 801134e:	ec47 6b10 	vmov	d0, r6, r7
 8011352:	f000 ff0c 	bl	801216e <finite>
 8011356:	2800      	cmp	r0, #0
 8011358:	d07a      	beq.n	8011450 <pow+0x268>
 801135a:	ec45 4b10 	vmov	d0, r4, r5
 801135e:	f000 ff06 	bl	801216e <finite>
 8011362:	2800      	cmp	r0, #0
 8011364:	d074      	beq.n	8011450 <pow+0x268>
 8011366:	ec53 2b18 	vmov	r2, r3, d8
 801136a:	ee18 0a10 	vmov	r0, s16
 801136e:	4619      	mov	r1, r3
 8011370:	f7ef fc04 	bl	8000b7c <__aeabi_dcmpun>
 8011374:	f999 9000 	ldrsb.w	r9, [r9]
 8011378:	4b4b      	ldr	r3, [pc, #300]	; (80114a8 <pow+0x2c0>)
 801137a:	b1b0      	cbz	r0, 80113aa <pow+0x1c2>
 801137c:	2201      	movs	r2, #1
 801137e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011382:	9b00      	ldr	r3, [sp, #0]
 8011384:	930a      	str	r3, [sp, #40]	; 0x28
 8011386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801138a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801138e:	f1b9 0f00 	cmp.w	r9, #0
 8011392:	d0c4      	beq.n	801131e <pow+0x136>
 8011394:	4652      	mov	r2, sl
 8011396:	465b      	mov	r3, fp
 8011398:	4650      	mov	r0, sl
 801139a:	4659      	mov	r1, fp
 801139c:	f7ef fa7e 	bl	800089c <__aeabi_ddiv>
 80113a0:	f1b9 0f02 	cmp.w	r9, #2
 80113a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80113a8:	e7c1      	b.n	801132e <pow+0x146>
 80113aa:	2203      	movs	r2, #3
 80113ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113b0:	900a      	str	r0, [sp, #40]	; 0x28
 80113b2:	4629      	mov	r1, r5
 80113b4:	4620      	mov	r0, r4
 80113b6:	2200      	movs	r2, #0
 80113b8:	4b3e      	ldr	r3, [pc, #248]	; (80114b4 <pow+0x2cc>)
 80113ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80113be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80113c2:	f7ef f941 	bl	8000648 <__aeabi_dmul>
 80113c6:	4604      	mov	r4, r0
 80113c8:	460d      	mov	r5, r1
 80113ca:	f1b9 0f00 	cmp.w	r9, #0
 80113ce:	d124      	bne.n	801141a <pow+0x232>
 80113d0:	4b39      	ldr	r3, [pc, #228]	; (80114b8 <pow+0x2d0>)
 80113d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80113d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113da:	4630      	mov	r0, r6
 80113dc:	4652      	mov	r2, sl
 80113de:	465b      	mov	r3, fp
 80113e0:	4639      	mov	r1, r7
 80113e2:	f7ef fba3 	bl	8000b2c <__aeabi_dcmplt>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	d056      	beq.n	8011498 <pow+0x2b0>
 80113ea:	ec45 4b10 	vmov	d0, r4, r5
 80113ee:	f000 fed3 	bl	8012198 <rint>
 80113f2:	4622      	mov	r2, r4
 80113f4:	462b      	mov	r3, r5
 80113f6:	ec51 0b10 	vmov	r0, r1, d0
 80113fa:	f7ef fb8d 	bl	8000b18 <__aeabi_dcmpeq>
 80113fe:	b920      	cbnz	r0, 801140a <pow+0x222>
 8011400:	4b2e      	ldr	r3, [pc, #184]	; (80114bc <pow+0x2d4>)
 8011402:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011406:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801140a:	f998 3000 	ldrsb.w	r3, [r8]
 801140e:	2b02      	cmp	r3, #2
 8011410:	d142      	bne.n	8011498 <pow+0x2b0>
 8011412:	f7fd fa27 	bl	800e864 <__errno>
 8011416:	2322      	movs	r3, #34	; 0x22
 8011418:	e78d      	b.n	8011336 <pow+0x14e>
 801141a:	4b29      	ldr	r3, [pc, #164]	; (80114c0 <pow+0x2d8>)
 801141c:	2200      	movs	r2, #0
 801141e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011422:	4630      	mov	r0, r6
 8011424:	4652      	mov	r2, sl
 8011426:	465b      	mov	r3, fp
 8011428:	4639      	mov	r1, r7
 801142a:	f7ef fb7f 	bl	8000b2c <__aeabi_dcmplt>
 801142e:	2800      	cmp	r0, #0
 8011430:	d0eb      	beq.n	801140a <pow+0x222>
 8011432:	ec45 4b10 	vmov	d0, r4, r5
 8011436:	f000 feaf 	bl	8012198 <rint>
 801143a:	4622      	mov	r2, r4
 801143c:	462b      	mov	r3, r5
 801143e:	ec51 0b10 	vmov	r0, r1, d0
 8011442:	f7ef fb69 	bl	8000b18 <__aeabi_dcmpeq>
 8011446:	2800      	cmp	r0, #0
 8011448:	d1df      	bne.n	801140a <pow+0x222>
 801144a:	2200      	movs	r2, #0
 801144c:	4b18      	ldr	r3, [pc, #96]	; (80114b0 <pow+0x2c8>)
 801144e:	e7da      	b.n	8011406 <pow+0x21e>
 8011450:	2200      	movs	r2, #0
 8011452:	2300      	movs	r3, #0
 8011454:	ec51 0b18 	vmov	r0, r1, d8
 8011458:	f7ef fb5e 	bl	8000b18 <__aeabi_dcmpeq>
 801145c:	2800      	cmp	r0, #0
 801145e:	f43f af3a 	beq.w	80112d6 <pow+0xee>
 8011462:	ec47 6b10 	vmov	d0, r6, r7
 8011466:	f000 fe82 	bl	801216e <finite>
 801146a:	2800      	cmp	r0, #0
 801146c:	f43f af33 	beq.w	80112d6 <pow+0xee>
 8011470:	ec45 4b10 	vmov	d0, r4, r5
 8011474:	f000 fe7b 	bl	801216e <finite>
 8011478:	2800      	cmp	r0, #0
 801147a:	f43f af2c 	beq.w	80112d6 <pow+0xee>
 801147e:	2304      	movs	r3, #4
 8011480:	9302      	str	r3, [sp, #8]
 8011482:	4b09      	ldr	r3, [pc, #36]	; (80114a8 <pow+0x2c0>)
 8011484:	9303      	str	r3, [sp, #12]
 8011486:	2300      	movs	r3, #0
 8011488:	930a      	str	r3, [sp, #40]	; 0x28
 801148a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801148e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011492:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011496:	e7b8      	b.n	801140a <pow+0x222>
 8011498:	a802      	add	r0, sp, #8
 801149a:	f000 fe70 	bl	801217e <matherr>
 801149e:	2800      	cmp	r0, #0
 80114a0:	f47f af11 	bne.w	80112c6 <pow+0xde>
 80114a4:	e7b5      	b.n	8011412 <pow+0x22a>
 80114a6:	bf00      	nop
 80114a8:	08013b6e 	.word	0x08013b6e
 80114ac:	3ff00000 	.word	0x3ff00000
 80114b0:	fff00000 	.word	0xfff00000
 80114b4:	3fe00000 	.word	0x3fe00000
 80114b8:	47efffff 	.word	0x47efffff
 80114bc:	c7efffff 	.word	0xc7efffff
 80114c0:	7ff00000 	.word	0x7ff00000
 80114c4:	200019c4 	.word	0x200019c4

080114c8 <__ieee754_log10>:
 80114c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114cc:	ec55 4b10 	vmov	r4, r5, d0
 80114d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80114d4:	462b      	mov	r3, r5
 80114d6:	da2f      	bge.n	8011538 <__ieee754_log10+0x70>
 80114d8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80114dc:	4322      	orrs	r2, r4
 80114de:	d10a      	bne.n	80114f6 <__ieee754_log10+0x2e>
 80114e0:	493b      	ldr	r1, [pc, #236]	; (80115d0 <__ieee754_log10+0x108>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	2300      	movs	r3, #0
 80114e6:	2000      	movs	r0, #0
 80114e8:	f7ef f9d8 	bl	800089c <__aeabi_ddiv>
 80114ec:	ec41 0b10 	vmov	d0, r0, r1
 80114f0:	b003      	add	sp, #12
 80114f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	da08      	bge.n	801150c <__ieee754_log10+0x44>
 80114fa:	ee10 2a10 	vmov	r2, s0
 80114fe:	4620      	mov	r0, r4
 8011500:	4629      	mov	r1, r5
 8011502:	f7ee fee9 	bl	80002d8 <__aeabi_dsub>
 8011506:	2200      	movs	r2, #0
 8011508:	2300      	movs	r3, #0
 801150a:	e7ed      	b.n	80114e8 <__ieee754_log10+0x20>
 801150c:	2200      	movs	r2, #0
 801150e:	4b31      	ldr	r3, [pc, #196]	; (80115d4 <__ieee754_log10+0x10c>)
 8011510:	4629      	mov	r1, r5
 8011512:	ee10 0a10 	vmov	r0, s0
 8011516:	f7ef f897 	bl	8000648 <__aeabi_dmul>
 801151a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801151e:	4604      	mov	r4, r0
 8011520:	460d      	mov	r5, r1
 8011522:	460b      	mov	r3, r1
 8011524:	492c      	ldr	r1, [pc, #176]	; (80115d8 <__ieee754_log10+0x110>)
 8011526:	428b      	cmp	r3, r1
 8011528:	dd08      	ble.n	801153c <__ieee754_log10+0x74>
 801152a:	4622      	mov	r2, r4
 801152c:	462b      	mov	r3, r5
 801152e:	4620      	mov	r0, r4
 8011530:	4629      	mov	r1, r5
 8011532:	f7ee fed3 	bl	80002dc <__adddf3>
 8011536:	e7d9      	b.n	80114ec <__ieee754_log10+0x24>
 8011538:	2200      	movs	r2, #0
 801153a:	e7f3      	b.n	8011524 <__ieee754_log10+0x5c>
 801153c:	1518      	asrs	r0, r3, #20
 801153e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011542:	4410      	add	r0, r2
 8011544:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011548:	4448      	add	r0, r9
 801154a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801154e:	f7ef f811 	bl	8000574 <__aeabi_i2d>
 8011552:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8011556:	3303      	adds	r3, #3
 8011558:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801155c:	ec45 4b10 	vmov	d0, r4, r5
 8011560:	4606      	mov	r6, r0
 8011562:	460f      	mov	r7, r1
 8011564:	f000 ff14 	bl	8012390 <__ieee754_log>
 8011568:	a313      	add	r3, pc, #76	; (adr r3, 80115b8 <__ieee754_log10+0xf0>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	4630      	mov	r0, r6
 8011570:	4639      	mov	r1, r7
 8011572:	ed8d 0b00 	vstr	d0, [sp]
 8011576:	f7ef f867 	bl	8000648 <__aeabi_dmul>
 801157a:	ed9d 0b00 	vldr	d0, [sp]
 801157e:	4604      	mov	r4, r0
 8011580:	460d      	mov	r5, r1
 8011582:	a30f      	add	r3, pc, #60	; (adr r3, 80115c0 <__ieee754_log10+0xf8>)
 8011584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011588:	ec51 0b10 	vmov	r0, r1, d0
 801158c:	f7ef f85c 	bl	8000648 <__aeabi_dmul>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee fea0 	bl	80002dc <__adddf3>
 801159c:	a30a      	add	r3, pc, #40	; (adr r3, 80115c8 <__ieee754_log10+0x100>)
 801159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a2:	4604      	mov	r4, r0
 80115a4:	460d      	mov	r5, r1
 80115a6:	4630      	mov	r0, r6
 80115a8:	4639      	mov	r1, r7
 80115aa:	f7ef f84d 	bl	8000648 <__aeabi_dmul>
 80115ae:	4602      	mov	r2, r0
 80115b0:	460b      	mov	r3, r1
 80115b2:	4620      	mov	r0, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	e7bc      	b.n	8011532 <__ieee754_log10+0x6a>
 80115b8:	11f12b36 	.word	0x11f12b36
 80115bc:	3d59fef3 	.word	0x3d59fef3
 80115c0:	1526e50e 	.word	0x1526e50e
 80115c4:	3fdbcb7b 	.word	0x3fdbcb7b
 80115c8:	509f6000 	.word	0x509f6000
 80115cc:	3fd34413 	.word	0x3fd34413
 80115d0:	c3500000 	.word	0xc3500000
 80115d4:	43500000 	.word	0x43500000
 80115d8:	7fefffff 	.word	0x7fefffff
 80115dc:	00000000 	.word	0x00000000

080115e0 <__ieee754_pow>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	b091      	sub	sp, #68	; 0x44
 80115e6:	ed8d 1b00 	vstr	d1, [sp]
 80115ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80115ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80115f2:	ea58 0302 	orrs.w	r3, r8, r2
 80115f6:	ec57 6b10 	vmov	r6, r7, d0
 80115fa:	f000 84be 	beq.w	8011f7a <__ieee754_pow+0x99a>
 80115fe:	4b7a      	ldr	r3, [pc, #488]	; (80117e8 <__ieee754_pow+0x208>)
 8011600:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011604:	429c      	cmp	r4, r3
 8011606:	463d      	mov	r5, r7
 8011608:	ee10 aa10 	vmov	sl, s0
 801160c:	dc09      	bgt.n	8011622 <__ieee754_pow+0x42>
 801160e:	d103      	bne.n	8011618 <__ieee754_pow+0x38>
 8011610:	b93e      	cbnz	r6, 8011622 <__ieee754_pow+0x42>
 8011612:	45a0      	cmp	r8, r4
 8011614:	dc0d      	bgt.n	8011632 <__ieee754_pow+0x52>
 8011616:	e001      	b.n	801161c <__ieee754_pow+0x3c>
 8011618:	4598      	cmp	r8, r3
 801161a:	dc02      	bgt.n	8011622 <__ieee754_pow+0x42>
 801161c:	4598      	cmp	r8, r3
 801161e:	d10e      	bne.n	801163e <__ieee754_pow+0x5e>
 8011620:	b16a      	cbz	r2, 801163e <__ieee754_pow+0x5e>
 8011622:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011626:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801162a:	ea54 030a 	orrs.w	r3, r4, sl
 801162e:	f000 84a4 	beq.w	8011f7a <__ieee754_pow+0x99a>
 8011632:	486e      	ldr	r0, [pc, #440]	; (80117ec <__ieee754_pow+0x20c>)
 8011634:	b011      	add	sp, #68	; 0x44
 8011636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163a:	f000 bda5 	b.w	8012188 <nan>
 801163e:	2d00      	cmp	r5, #0
 8011640:	da53      	bge.n	80116ea <__ieee754_pow+0x10a>
 8011642:	4b6b      	ldr	r3, [pc, #428]	; (80117f0 <__ieee754_pow+0x210>)
 8011644:	4598      	cmp	r8, r3
 8011646:	dc4d      	bgt.n	80116e4 <__ieee754_pow+0x104>
 8011648:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801164c:	4598      	cmp	r8, r3
 801164e:	dd4c      	ble.n	80116ea <__ieee754_pow+0x10a>
 8011650:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011658:	2b14      	cmp	r3, #20
 801165a:	dd26      	ble.n	80116aa <__ieee754_pow+0xca>
 801165c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011660:	fa22 f103 	lsr.w	r1, r2, r3
 8011664:	fa01 f303 	lsl.w	r3, r1, r3
 8011668:	4293      	cmp	r3, r2
 801166a:	d13e      	bne.n	80116ea <__ieee754_pow+0x10a>
 801166c:	f001 0101 	and.w	r1, r1, #1
 8011670:	f1c1 0b02 	rsb	fp, r1, #2
 8011674:	2a00      	cmp	r2, #0
 8011676:	d15b      	bne.n	8011730 <__ieee754_pow+0x150>
 8011678:	4b5b      	ldr	r3, [pc, #364]	; (80117e8 <__ieee754_pow+0x208>)
 801167a:	4598      	cmp	r8, r3
 801167c:	d124      	bne.n	80116c8 <__ieee754_pow+0xe8>
 801167e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011682:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011686:	ea53 030a 	orrs.w	r3, r3, sl
 801168a:	f000 8476 	beq.w	8011f7a <__ieee754_pow+0x99a>
 801168e:	4b59      	ldr	r3, [pc, #356]	; (80117f4 <__ieee754_pow+0x214>)
 8011690:	429c      	cmp	r4, r3
 8011692:	dd2d      	ble.n	80116f0 <__ieee754_pow+0x110>
 8011694:	f1b9 0f00 	cmp.w	r9, #0
 8011698:	f280 8473 	bge.w	8011f82 <__ieee754_pow+0x9a2>
 801169c:	2000      	movs	r0, #0
 801169e:	2100      	movs	r1, #0
 80116a0:	ec41 0b10 	vmov	d0, r0, r1
 80116a4:	b011      	add	sp, #68	; 0x44
 80116a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116aa:	2a00      	cmp	r2, #0
 80116ac:	d13e      	bne.n	801172c <__ieee754_pow+0x14c>
 80116ae:	f1c3 0314 	rsb	r3, r3, #20
 80116b2:	fa48 f103 	asr.w	r1, r8, r3
 80116b6:	fa01 f303 	lsl.w	r3, r1, r3
 80116ba:	4543      	cmp	r3, r8
 80116bc:	f040 8469 	bne.w	8011f92 <__ieee754_pow+0x9b2>
 80116c0:	f001 0101 	and.w	r1, r1, #1
 80116c4:	f1c1 0b02 	rsb	fp, r1, #2
 80116c8:	4b4b      	ldr	r3, [pc, #300]	; (80117f8 <__ieee754_pow+0x218>)
 80116ca:	4598      	cmp	r8, r3
 80116cc:	d118      	bne.n	8011700 <__ieee754_pow+0x120>
 80116ce:	f1b9 0f00 	cmp.w	r9, #0
 80116d2:	f280 845a 	bge.w	8011f8a <__ieee754_pow+0x9aa>
 80116d6:	4948      	ldr	r1, [pc, #288]	; (80117f8 <__ieee754_pow+0x218>)
 80116d8:	4632      	mov	r2, r6
 80116da:	463b      	mov	r3, r7
 80116dc:	2000      	movs	r0, #0
 80116de:	f7ef f8dd 	bl	800089c <__aeabi_ddiv>
 80116e2:	e7dd      	b.n	80116a0 <__ieee754_pow+0xc0>
 80116e4:	f04f 0b02 	mov.w	fp, #2
 80116e8:	e7c4      	b.n	8011674 <__ieee754_pow+0x94>
 80116ea:	f04f 0b00 	mov.w	fp, #0
 80116ee:	e7c1      	b.n	8011674 <__ieee754_pow+0x94>
 80116f0:	f1b9 0f00 	cmp.w	r9, #0
 80116f4:	dad2      	bge.n	801169c <__ieee754_pow+0xbc>
 80116f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80116fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116fe:	e7cf      	b.n	80116a0 <__ieee754_pow+0xc0>
 8011700:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011704:	d106      	bne.n	8011714 <__ieee754_pow+0x134>
 8011706:	4632      	mov	r2, r6
 8011708:	463b      	mov	r3, r7
 801170a:	4610      	mov	r0, r2
 801170c:	4619      	mov	r1, r3
 801170e:	f7ee ff9b 	bl	8000648 <__aeabi_dmul>
 8011712:	e7c5      	b.n	80116a0 <__ieee754_pow+0xc0>
 8011714:	4b39      	ldr	r3, [pc, #228]	; (80117fc <__ieee754_pow+0x21c>)
 8011716:	4599      	cmp	r9, r3
 8011718:	d10a      	bne.n	8011730 <__ieee754_pow+0x150>
 801171a:	2d00      	cmp	r5, #0
 801171c:	db08      	blt.n	8011730 <__ieee754_pow+0x150>
 801171e:	ec47 6b10 	vmov	d0, r6, r7
 8011722:	b011      	add	sp, #68	; 0x44
 8011724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011728:	f000 bc68 	b.w	8011ffc <__ieee754_sqrt>
 801172c:	f04f 0b00 	mov.w	fp, #0
 8011730:	ec47 6b10 	vmov	d0, r6, r7
 8011734:	f000 fd12 	bl	801215c <fabs>
 8011738:	ec51 0b10 	vmov	r0, r1, d0
 801173c:	f1ba 0f00 	cmp.w	sl, #0
 8011740:	d127      	bne.n	8011792 <__ieee754_pow+0x1b2>
 8011742:	b124      	cbz	r4, 801174e <__ieee754_pow+0x16e>
 8011744:	4b2c      	ldr	r3, [pc, #176]	; (80117f8 <__ieee754_pow+0x218>)
 8011746:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801174a:	429a      	cmp	r2, r3
 801174c:	d121      	bne.n	8011792 <__ieee754_pow+0x1b2>
 801174e:	f1b9 0f00 	cmp.w	r9, #0
 8011752:	da05      	bge.n	8011760 <__ieee754_pow+0x180>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	2000      	movs	r0, #0
 801175a:	4927      	ldr	r1, [pc, #156]	; (80117f8 <__ieee754_pow+0x218>)
 801175c:	f7ef f89e 	bl	800089c <__aeabi_ddiv>
 8011760:	2d00      	cmp	r5, #0
 8011762:	da9d      	bge.n	80116a0 <__ieee754_pow+0xc0>
 8011764:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011768:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801176c:	ea54 030b 	orrs.w	r3, r4, fp
 8011770:	d108      	bne.n	8011784 <__ieee754_pow+0x1a4>
 8011772:	4602      	mov	r2, r0
 8011774:	460b      	mov	r3, r1
 8011776:	4610      	mov	r0, r2
 8011778:	4619      	mov	r1, r3
 801177a:	f7ee fdad 	bl	80002d8 <__aeabi_dsub>
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	e7ac      	b.n	80116de <__ieee754_pow+0xfe>
 8011784:	f1bb 0f01 	cmp.w	fp, #1
 8011788:	d18a      	bne.n	80116a0 <__ieee754_pow+0xc0>
 801178a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801178e:	4619      	mov	r1, r3
 8011790:	e786      	b.n	80116a0 <__ieee754_pow+0xc0>
 8011792:	0fed      	lsrs	r5, r5, #31
 8011794:	1e6b      	subs	r3, r5, #1
 8011796:	930d      	str	r3, [sp, #52]	; 0x34
 8011798:	ea5b 0303 	orrs.w	r3, fp, r3
 801179c:	d102      	bne.n	80117a4 <__ieee754_pow+0x1c4>
 801179e:	4632      	mov	r2, r6
 80117a0:	463b      	mov	r3, r7
 80117a2:	e7e8      	b.n	8011776 <__ieee754_pow+0x196>
 80117a4:	4b16      	ldr	r3, [pc, #88]	; (8011800 <__ieee754_pow+0x220>)
 80117a6:	4598      	cmp	r8, r3
 80117a8:	f340 80fe 	ble.w	80119a8 <__ieee754_pow+0x3c8>
 80117ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80117b0:	4598      	cmp	r8, r3
 80117b2:	dd0a      	ble.n	80117ca <__ieee754_pow+0x1ea>
 80117b4:	4b0f      	ldr	r3, [pc, #60]	; (80117f4 <__ieee754_pow+0x214>)
 80117b6:	429c      	cmp	r4, r3
 80117b8:	dc0d      	bgt.n	80117d6 <__ieee754_pow+0x1f6>
 80117ba:	f1b9 0f00 	cmp.w	r9, #0
 80117be:	f6bf af6d 	bge.w	801169c <__ieee754_pow+0xbc>
 80117c2:	a307      	add	r3, pc, #28	; (adr r3, 80117e0 <__ieee754_pow+0x200>)
 80117c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c8:	e79f      	b.n	801170a <__ieee754_pow+0x12a>
 80117ca:	4b0e      	ldr	r3, [pc, #56]	; (8011804 <__ieee754_pow+0x224>)
 80117cc:	429c      	cmp	r4, r3
 80117ce:	ddf4      	ble.n	80117ba <__ieee754_pow+0x1da>
 80117d0:	4b09      	ldr	r3, [pc, #36]	; (80117f8 <__ieee754_pow+0x218>)
 80117d2:	429c      	cmp	r4, r3
 80117d4:	dd18      	ble.n	8011808 <__ieee754_pow+0x228>
 80117d6:	f1b9 0f00 	cmp.w	r9, #0
 80117da:	dcf2      	bgt.n	80117c2 <__ieee754_pow+0x1e2>
 80117dc:	e75e      	b.n	801169c <__ieee754_pow+0xbc>
 80117de:	bf00      	nop
 80117e0:	8800759c 	.word	0x8800759c
 80117e4:	7e37e43c 	.word	0x7e37e43c
 80117e8:	7ff00000 	.word	0x7ff00000
 80117ec:	08013a51 	.word	0x08013a51
 80117f0:	433fffff 	.word	0x433fffff
 80117f4:	3fefffff 	.word	0x3fefffff
 80117f8:	3ff00000 	.word	0x3ff00000
 80117fc:	3fe00000 	.word	0x3fe00000
 8011800:	41e00000 	.word	0x41e00000
 8011804:	3feffffe 	.word	0x3feffffe
 8011808:	2200      	movs	r2, #0
 801180a:	4b63      	ldr	r3, [pc, #396]	; (8011998 <__ieee754_pow+0x3b8>)
 801180c:	f7ee fd64 	bl	80002d8 <__aeabi_dsub>
 8011810:	a355      	add	r3, pc, #340	; (adr r3, 8011968 <__ieee754_pow+0x388>)
 8011812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011816:	4604      	mov	r4, r0
 8011818:	460d      	mov	r5, r1
 801181a:	f7ee ff15 	bl	8000648 <__aeabi_dmul>
 801181e:	a354      	add	r3, pc, #336	; (adr r3, 8011970 <__ieee754_pow+0x390>)
 8011820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011824:	4606      	mov	r6, r0
 8011826:	460f      	mov	r7, r1
 8011828:	4620      	mov	r0, r4
 801182a:	4629      	mov	r1, r5
 801182c:	f7ee ff0c 	bl	8000648 <__aeabi_dmul>
 8011830:	2200      	movs	r2, #0
 8011832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011836:	4b59      	ldr	r3, [pc, #356]	; (801199c <__ieee754_pow+0x3bc>)
 8011838:	4620      	mov	r0, r4
 801183a:	4629      	mov	r1, r5
 801183c:	f7ee ff04 	bl	8000648 <__aeabi_dmul>
 8011840:	4602      	mov	r2, r0
 8011842:	460b      	mov	r3, r1
 8011844:	a14c      	add	r1, pc, #304	; (adr r1, 8011978 <__ieee754_pow+0x398>)
 8011846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801184a:	f7ee fd45 	bl	80002d8 <__aeabi_dsub>
 801184e:	4622      	mov	r2, r4
 8011850:	462b      	mov	r3, r5
 8011852:	f7ee fef9 	bl	8000648 <__aeabi_dmul>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	2000      	movs	r0, #0
 801185c:	4950      	ldr	r1, [pc, #320]	; (80119a0 <__ieee754_pow+0x3c0>)
 801185e:	f7ee fd3b 	bl	80002d8 <__aeabi_dsub>
 8011862:	4622      	mov	r2, r4
 8011864:	462b      	mov	r3, r5
 8011866:	4680      	mov	r8, r0
 8011868:	4689      	mov	r9, r1
 801186a:	4620      	mov	r0, r4
 801186c:	4629      	mov	r1, r5
 801186e:	f7ee feeb 	bl	8000648 <__aeabi_dmul>
 8011872:	4602      	mov	r2, r0
 8011874:	460b      	mov	r3, r1
 8011876:	4640      	mov	r0, r8
 8011878:	4649      	mov	r1, r9
 801187a:	f7ee fee5 	bl	8000648 <__aeabi_dmul>
 801187e:	a340      	add	r3, pc, #256	; (adr r3, 8011980 <__ieee754_pow+0x3a0>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f7ee fee0 	bl	8000648 <__aeabi_dmul>
 8011888:	4602      	mov	r2, r0
 801188a:	460b      	mov	r3, r1
 801188c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011890:	f7ee fd22 	bl	80002d8 <__aeabi_dsub>
 8011894:	4602      	mov	r2, r0
 8011896:	460b      	mov	r3, r1
 8011898:	4604      	mov	r4, r0
 801189a:	460d      	mov	r5, r1
 801189c:	4630      	mov	r0, r6
 801189e:	4639      	mov	r1, r7
 80118a0:	f7ee fd1c 	bl	80002dc <__adddf3>
 80118a4:	2000      	movs	r0, #0
 80118a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118aa:	4632      	mov	r2, r6
 80118ac:	463b      	mov	r3, r7
 80118ae:	f7ee fd13 	bl	80002d8 <__aeabi_dsub>
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	4620      	mov	r0, r4
 80118b8:	4629      	mov	r1, r5
 80118ba:	f7ee fd0d 	bl	80002d8 <__aeabi_dsub>
 80118be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80118c4:	4313      	orrs	r3, r2
 80118c6:	4606      	mov	r6, r0
 80118c8:	460f      	mov	r7, r1
 80118ca:	f040 81eb 	bne.w	8011ca4 <__ieee754_pow+0x6c4>
 80118ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011988 <__ieee754_pow+0x3a8>
 80118d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80118d6:	2400      	movs	r4, #0
 80118d8:	4622      	mov	r2, r4
 80118da:	462b      	mov	r3, r5
 80118dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80118e4:	f7ee fcf8 	bl	80002d8 <__aeabi_dsub>
 80118e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118ec:	f7ee feac 	bl	8000648 <__aeabi_dmul>
 80118f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118f4:	4680      	mov	r8, r0
 80118f6:	4689      	mov	r9, r1
 80118f8:	4630      	mov	r0, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ee fea4 	bl	8000648 <__aeabi_dmul>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4640      	mov	r0, r8
 8011906:	4649      	mov	r1, r9
 8011908:	f7ee fce8 	bl	80002dc <__adddf3>
 801190c:	4622      	mov	r2, r4
 801190e:	462b      	mov	r3, r5
 8011910:	4680      	mov	r8, r0
 8011912:	4689      	mov	r9, r1
 8011914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011918:	f7ee fe96 	bl	8000648 <__aeabi_dmul>
 801191c:	460b      	mov	r3, r1
 801191e:	4604      	mov	r4, r0
 8011920:	460d      	mov	r5, r1
 8011922:	4602      	mov	r2, r0
 8011924:	4649      	mov	r1, r9
 8011926:	4640      	mov	r0, r8
 8011928:	e9cd 4500 	strd	r4, r5, [sp]
 801192c:	f7ee fcd6 	bl	80002dc <__adddf3>
 8011930:	4b1c      	ldr	r3, [pc, #112]	; (80119a4 <__ieee754_pow+0x3c4>)
 8011932:	4299      	cmp	r1, r3
 8011934:	4606      	mov	r6, r0
 8011936:	460f      	mov	r7, r1
 8011938:	468b      	mov	fp, r1
 801193a:	f340 82f7 	ble.w	8011f2c <__ieee754_pow+0x94c>
 801193e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011946:	4303      	orrs	r3, r0
 8011948:	f000 81ea 	beq.w	8011d20 <__ieee754_pow+0x740>
 801194c:	a310      	add	r3, pc, #64	; (adr r3, 8011990 <__ieee754_pow+0x3b0>)
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011956:	f7ee fe77 	bl	8000648 <__aeabi_dmul>
 801195a:	a30d      	add	r3, pc, #52	; (adr r3, 8011990 <__ieee754_pow+0x3b0>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	e6d5      	b.n	801170e <__ieee754_pow+0x12e>
 8011962:	bf00      	nop
 8011964:	f3af 8000 	nop.w
 8011968:	60000000 	.word	0x60000000
 801196c:	3ff71547 	.word	0x3ff71547
 8011970:	f85ddf44 	.word	0xf85ddf44
 8011974:	3e54ae0b 	.word	0x3e54ae0b
 8011978:	55555555 	.word	0x55555555
 801197c:	3fd55555 	.word	0x3fd55555
 8011980:	652b82fe 	.word	0x652b82fe
 8011984:	3ff71547 	.word	0x3ff71547
 8011988:	00000000 	.word	0x00000000
 801198c:	bff00000 	.word	0xbff00000
 8011990:	8800759c 	.word	0x8800759c
 8011994:	7e37e43c 	.word	0x7e37e43c
 8011998:	3ff00000 	.word	0x3ff00000
 801199c:	3fd00000 	.word	0x3fd00000
 80119a0:	3fe00000 	.word	0x3fe00000
 80119a4:	408fffff 	.word	0x408fffff
 80119a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80119ac:	f04f 0200 	mov.w	r2, #0
 80119b0:	da05      	bge.n	80119be <__ieee754_pow+0x3de>
 80119b2:	4bd3      	ldr	r3, [pc, #844]	; (8011d00 <__ieee754_pow+0x720>)
 80119b4:	f7ee fe48 	bl	8000648 <__aeabi_dmul>
 80119b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80119bc:	460c      	mov	r4, r1
 80119be:	1523      	asrs	r3, r4, #20
 80119c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80119c4:	4413      	add	r3, r2
 80119c6:	9309      	str	r3, [sp, #36]	; 0x24
 80119c8:	4bce      	ldr	r3, [pc, #824]	; (8011d04 <__ieee754_pow+0x724>)
 80119ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80119ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80119d2:	429c      	cmp	r4, r3
 80119d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80119d8:	dd08      	ble.n	80119ec <__ieee754_pow+0x40c>
 80119da:	4bcb      	ldr	r3, [pc, #812]	; (8011d08 <__ieee754_pow+0x728>)
 80119dc:	429c      	cmp	r4, r3
 80119de:	f340 815e 	ble.w	8011c9e <__ieee754_pow+0x6be>
 80119e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119e4:	3301      	adds	r3, #1
 80119e6:	9309      	str	r3, [sp, #36]	; 0x24
 80119e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80119ec:	f04f 0a00 	mov.w	sl, #0
 80119f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80119f4:	930c      	str	r3, [sp, #48]	; 0x30
 80119f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119f8:	4bc4      	ldr	r3, [pc, #784]	; (8011d0c <__ieee754_pow+0x72c>)
 80119fa:	4413      	add	r3, r2
 80119fc:	ed93 7b00 	vldr	d7, [r3]
 8011a00:	4629      	mov	r1, r5
 8011a02:	ec53 2b17 	vmov	r2, r3, d7
 8011a06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011a0e:	f7ee fc63 	bl	80002d8 <__aeabi_dsub>
 8011a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a16:	4606      	mov	r6, r0
 8011a18:	460f      	mov	r7, r1
 8011a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a1e:	f7ee fc5d 	bl	80002dc <__adddf3>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	2000      	movs	r0, #0
 8011a28:	49b9      	ldr	r1, [pc, #740]	; (8011d10 <__ieee754_pow+0x730>)
 8011a2a:	f7ee ff37 	bl	800089c <__aeabi_ddiv>
 8011a2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011a32:	4602      	mov	r2, r0
 8011a34:	460b      	mov	r3, r1
 8011a36:	4630      	mov	r0, r6
 8011a38:	4639      	mov	r1, r7
 8011a3a:	f7ee fe05 	bl	8000648 <__aeabi_dmul>
 8011a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	9302      	str	r3, [sp, #8]
 8011a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011a52:	106d      	asrs	r5, r5, #1
 8011a54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011a58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011a62:	4640      	mov	r0, r8
 8011a64:	4649      	mov	r1, r9
 8011a66:	4614      	mov	r4, r2
 8011a68:	461d      	mov	r5, r3
 8011a6a:	f7ee fded 	bl	8000648 <__aeabi_dmul>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	460b      	mov	r3, r1
 8011a72:	4630      	mov	r0, r6
 8011a74:	4639      	mov	r1, r7
 8011a76:	f7ee fc2f 	bl	80002d8 <__aeabi_dsub>
 8011a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460f      	mov	r7, r1
 8011a82:	4620      	mov	r0, r4
 8011a84:	4629      	mov	r1, r5
 8011a86:	f7ee fc27 	bl	80002d8 <__aeabi_dsub>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a92:	f7ee fc21 	bl	80002d8 <__aeabi_dsub>
 8011a96:	4642      	mov	r2, r8
 8011a98:	464b      	mov	r3, r9
 8011a9a:	f7ee fdd5 	bl	8000648 <__aeabi_dmul>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ee fc17 	bl	80002d8 <__aeabi_dsub>
 8011aaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011aae:	f7ee fdcb 	bl	8000648 <__aeabi_dmul>
 8011ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011aba:	4610      	mov	r0, r2
 8011abc:	4619      	mov	r1, r3
 8011abe:	f7ee fdc3 	bl	8000648 <__aeabi_dmul>
 8011ac2:	a37b      	add	r3, pc, #492	; (adr r3, 8011cb0 <__ieee754_pow+0x6d0>)
 8011ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac8:	4604      	mov	r4, r0
 8011aca:	460d      	mov	r5, r1
 8011acc:	f7ee fdbc 	bl	8000648 <__aeabi_dmul>
 8011ad0:	a379      	add	r3, pc, #484	; (adr r3, 8011cb8 <__ieee754_pow+0x6d8>)
 8011ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad6:	f7ee fc01 	bl	80002dc <__adddf3>
 8011ada:	4622      	mov	r2, r4
 8011adc:	462b      	mov	r3, r5
 8011ade:	f7ee fdb3 	bl	8000648 <__aeabi_dmul>
 8011ae2:	a377      	add	r3, pc, #476	; (adr r3, 8011cc0 <__ieee754_pow+0x6e0>)
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	f7ee fbf8 	bl	80002dc <__adddf3>
 8011aec:	4622      	mov	r2, r4
 8011aee:	462b      	mov	r3, r5
 8011af0:	f7ee fdaa 	bl	8000648 <__aeabi_dmul>
 8011af4:	a374      	add	r3, pc, #464	; (adr r3, 8011cc8 <__ieee754_pow+0x6e8>)
 8011af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afa:	f7ee fbef 	bl	80002dc <__adddf3>
 8011afe:	4622      	mov	r2, r4
 8011b00:	462b      	mov	r3, r5
 8011b02:	f7ee fda1 	bl	8000648 <__aeabi_dmul>
 8011b06:	a372      	add	r3, pc, #456	; (adr r3, 8011cd0 <__ieee754_pow+0x6f0>)
 8011b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0c:	f7ee fbe6 	bl	80002dc <__adddf3>
 8011b10:	4622      	mov	r2, r4
 8011b12:	462b      	mov	r3, r5
 8011b14:	f7ee fd98 	bl	8000648 <__aeabi_dmul>
 8011b18:	a36f      	add	r3, pc, #444	; (adr r3, 8011cd8 <__ieee754_pow+0x6f8>)
 8011b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1e:	f7ee fbdd 	bl	80002dc <__adddf3>
 8011b22:	4622      	mov	r2, r4
 8011b24:	4606      	mov	r6, r0
 8011b26:	460f      	mov	r7, r1
 8011b28:	462b      	mov	r3, r5
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f7ee fd8b 	bl	8000648 <__aeabi_dmul>
 8011b32:	4602      	mov	r2, r0
 8011b34:	460b      	mov	r3, r1
 8011b36:	4630      	mov	r0, r6
 8011b38:	4639      	mov	r1, r7
 8011b3a:	f7ee fd85 	bl	8000648 <__aeabi_dmul>
 8011b3e:	4642      	mov	r2, r8
 8011b40:	4604      	mov	r4, r0
 8011b42:	460d      	mov	r5, r1
 8011b44:	464b      	mov	r3, r9
 8011b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b4a:	f7ee fbc7 	bl	80002dc <__adddf3>
 8011b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b52:	f7ee fd79 	bl	8000648 <__aeabi_dmul>
 8011b56:	4622      	mov	r2, r4
 8011b58:	462b      	mov	r3, r5
 8011b5a:	f7ee fbbf 	bl	80002dc <__adddf3>
 8011b5e:	4642      	mov	r2, r8
 8011b60:	4606      	mov	r6, r0
 8011b62:	460f      	mov	r7, r1
 8011b64:	464b      	mov	r3, r9
 8011b66:	4640      	mov	r0, r8
 8011b68:	4649      	mov	r1, r9
 8011b6a:	f7ee fd6d 	bl	8000648 <__aeabi_dmul>
 8011b6e:	2200      	movs	r2, #0
 8011b70:	4b68      	ldr	r3, [pc, #416]	; (8011d14 <__ieee754_pow+0x734>)
 8011b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b76:	f7ee fbb1 	bl	80002dc <__adddf3>
 8011b7a:	4632      	mov	r2, r6
 8011b7c:	463b      	mov	r3, r7
 8011b7e:	f7ee fbad 	bl	80002dc <__adddf3>
 8011b82:	9802      	ldr	r0, [sp, #8]
 8011b84:	460d      	mov	r5, r1
 8011b86:	4604      	mov	r4, r0
 8011b88:	4602      	mov	r2, r0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	4640      	mov	r0, r8
 8011b8e:	4649      	mov	r1, r9
 8011b90:	f7ee fd5a 	bl	8000648 <__aeabi_dmul>
 8011b94:	2200      	movs	r2, #0
 8011b96:	4680      	mov	r8, r0
 8011b98:	4689      	mov	r9, r1
 8011b9a:	4b5e      	ldr	r3, [pc, #376]	; (8011d14 <__ieee754_pow+0x734>)
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	f7ee fb9a 	bl	80002d8 <__aeabi_dsub>
 8011ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ba8:	f7ee fb96 	bl	80002d8 <__aeabi_dsub>
 8011bac:	4602      	mov	r2, r0
 8011bae:	460b      	mov	r3, r1
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	4639      	mov	r1, r7
 8011bb4:	f7ee fb90 	bl	80002d8 <__aeabi_dsub>
 8011bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bbc:	f7ee fd44 	bl	8000648 <__aeabi_dmul>
 8011bc0:	4622      	mov	r2, r4
 8011bc2:	4606      	mov	r6, r0
 8011bc4:	460f      	mov	r7, r1
 8011bc6:	462b      	mov	r3, r5
 8011bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bcc:	f7ee fd3c 	bl	8000648 <__aeabi_dmul>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	4639      	mov	r1, r7
 8011bd8:	f7ee fb80 	bl	80002dc <__adddf3>
 8011bdc:	4606      	mov	r6, r0
 8011bde:	460f      	mov	r7, r1
 8011be0:	4602      	mov	r2, r0
 8011be2:	460b      	mov	r3, r1
 8011be4:	4640      	mov	r0, r8
 8011be6:	4649      	mov	r1, r9
 8011be8:	f7ee fb78 	bl	80002dc <__adddf3>
 8011bec:	9802      	ldr	r0, [sp, #8]
 8011bee:	a33c      	add	r3, pc, #240	; (adr r3, 8011ce0 <__ieee754_pow+0x700>)
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	460d      	mov	r5, r1
 8011bf8:	f7ee fd26 	bl	8000648 <__aeabi_dmul>
 8011bfc:	4642      	mov	r2, r8
 8011bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c02:	464b      	mov	r3, r9
 8011c04:	4620      	mov	r0, r4
 8011c06:	4629      	mov	r1, r5
 8011c08:	f7ee fb66 	bl	80002d8 <__aeabi_dsub>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	460b      	mov	r3, r1
 8011c10:	4630      	mov	r0, r6
 8011c12:	4639      	mov	r1, r7
 8011c14:	f7ee fb60 	bl	80002d8 <__aeabi_dsub>
 8011c18:	a333      	add	r3, pc, #204	; (adr r3, 8011ce8 <__ieee754_pow+0x708>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	f7ee fd13 	bl	8000648 <__aeabi_dmul>
 8011c22:	a333      	add	r3, pc, #204	; (adr r3, 8011cf0 <__ieee754_pow+0x710>)
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	4606      	mov	r6, r0
 8011c2a:	460f      	mov	r7, r1
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	4629      	mov	r1, r5
 8011c30:	f7ee fd0a 	bl	8000648 <__aeabi_dmul>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ee fb4e 	bl	80002dc <__adddf3>
 8011c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c42:	4b35      	ldr	r3, [pc, #212]	; (8011d18 <__ieee754_pow+0x738>)
 8011c44:	4413      	add	r3, r2
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fb47 	bl	80002dc <__adddf3>
 8011c4e:	4604      	mov	r4, r0
 8011c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c52:	460d      	mov	r5, r1
 8011c54:	f7ee fc8e 	bl	8000574 <__aeabi_i2d>
 8011c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c5a:	4b30      	ldr	r3, [pc, #192]	; (8011d1c <__ieee754_pow+0x73c>)
 8011c5c:	4413      	add	r3, r2
 8011c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	4622      	mov	r2, r4
 8011c68:	462b      	mov	r3, r5
 8011c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c6e:	f7ee fb35 	bl	80002dc <__adddf3>
 8011c72:	4642      	mov	r2, r8
 8011c74:	464b      	mov	r3, r9
 8011c76:	f7ee fb31 	bl	80002dc <__adddf3>
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	f7ee fb2d 	bl	80002dc <__adddf3>
 8011c82:	9802      	ldr	r0, [sp, #8]
 8011c84:	4632      	mov	r2, r6
 8011c86:	463b      	mov	r3, r7
 8011c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c8c:	f7ee fb24 	bl	80002d8 <__aeabi_dsub>
 8011c90:	4642      	mov	r2, r8
 8011c92:	464b      	mov	r3, r9
 8011c94:	f7ee fb20 	bl	80002d8 <__aeabi_dsub>
 8011c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c9c:	e607      	b.n	80118ae <__ieee754_pow+0x2ce>
 8011c9e:	f04f 0a01 	mov.w	sl, #1
 8011ca2:	e6a5      	b.n	80119f0 <__ieee754_pow+0x410>
 8011ca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011cf8 <__ieee754_pow+0x718>
 8011ca8:	e613      	b.n	80118d2 <__ieee754_pow+0x2f2>
 8011caa:	bf00      	nop
 8011cac:	f3af 8000 	nop.w
 8011cb0:	4a454eef 	.word	0x4a454eef
 8011cb4:	3fca7e28 	.word	0x3fca7e28
 8011cb8:	93c9db65 	.word	0x93c9db65
 8011cbc:	3fcd864a 	.word	0x3fcd864a
 8011cc0:	a91d4101 	.word	0xa91d4101
 8011cc4:	3fd17460 	.word	0x3fd17460
 8011cc8:	518f264d 	.word	0x518f264d
 8011ccc:	3fd55555 	.word	0x3fd55555
 8011cd0:	db6fabff 	.word	0xdb6fabff
 8011cd4:	3fdb6db6 	.word	0x3fdb6db6
 8011cd8:	33333303 	.word	0x33333303
 8011cdc:	3fe33333 	.word	0x3fe33333
 8011ce0:	e0000000 	.word	0xe0000000
 8011ce4:	3feec709 	.word	0x3feec709
 8011ce8:	dc3a03fd 	.word	0xdc3a03fd
 8011cec:	3feec709 	.word	0x3feec709
 8011cf0:	145b01f5 	.word	0x145b01f5
 8011cf4:	be3e2fe0 	.word	0xbe3e2fe0
 8011cf8:	00000000 	.word	0x00000000
 8011cfc:	3ff00000 	.word	0x3ff00000
 8011d00:	43400000 	.word	0x43400000
 8011d04:	0003988e 	.word	0x0003988e
 8011d08:	000bb679 	.word	0x000bb679
 8011d0c:	08013b78 	.word	0x08013b78
 8011d10:	3ff00000 	.word	0x3ff00000
 8011d14:	40080000 	.word	0x40080000
 8011d18:	08013b98 	.word	0x08013b98
 8011d1c:	08013b88 	.word	0x08013b88
 8011d20:	a3b4      	add	r3, pc, #720	; (adr r3, 8011ff4 <__ieee754_pow+0xa14>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	4640      	mov	r0, r8
 8011d28:	4649      	mov	r1, r9
 8011d2a:	f7ee fad7 	bl	80002dc <__adddf3>
 8011d2e:	4622      	mov	r2, r4
 8011d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d34:	462b      	mov	r3, r5
 8011d36:	4630      	mov	r0, r6
 8011d38:	4639      	mov	r1, r7
 8011d3a:	f7ee facd 	bl	80002d8 <__aeabi_dsub>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d46:	f7ee ff0f 	bl	8000b68 <__aeabi_dcmpgt>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f47f adfe 	bne.w	801194c <__ieee754_pow+0x36c>
 8011d50:	4aa3      	ldr	r2, [pc, #652]	; (8011fe0 <__ieee754_pow+0xa00>)
 8011d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d56:	4293      	cmp	r3, r2
 8011d58:	f340 810a 	ble.w	8011f70 <__ieee754_pow+0x990>
 8011d5c:	151b      	asrs	r3, r3, #20
 8011d5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011d62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011d66:	fa4a f303 	asr.w	r3, sl, r3
 8011d6a:	445b      	add	r3, fp
 8011d6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011d70:	4e9c      	ldr	r6, [pc, #624]	; (8011fe4 <__ieee754_pow+0xa04>)
 8011d72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011d76:	4116      	asrs	r6, r2
 8011d78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	ea23 0106 	bic.w	r1, r3, r6
 8011d82:	f1c2 0214 	rsb	r2, r2, #20
 8011d86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011d8a:	fa4a fa02 	asr.w	sl, sl, r2
 8011d8e:	f1bb 0f00 	cmp.w	fp, #0
 8011d92:	4602      	mov	r2, r0
 8011d94:	460b      	mov	r3, r1
 8011d96:	4620      	mov	r0, r4
 8011d98:	4629      	mov	r1, r5
 8011d9a:	bfb8      	it	lt
 8011d9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011da0:	f7ee fa9a 	bl	80002d8 <__aeabi_dsub>
 8011da4:	e9cd 0100 	strd	r0, r1, [sp]
 8011da8:	4642      	mov	r2, r8
 8011daa:	464b      	mov	r3, r9
 8011dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011db0:	f7ee fa94 	bl	80002dc <__adddf3>
 8011db4:	2000      	movs	r0, #0
 8011db6:	a378      	add	r3, pc, #480	; (adr r3, 8011f98 <__ieee754_pow+0x9b8>)
 8011db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	f7ee fc42 	bl	8000648 <__aeabi_dmul>
 8011dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dc8:	4606      	mov	r6, r0
 8011dca:	460f      	mov	r7, r1
 8011dcc:	4620      	mov	r0, r4
 8011dce:	4629      	mov	r1, r5
 8011dd0:	f7ee fa82 	bl	80002d8 <__aeabi_dsub>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	4640      	mov	r0, r8
 8011dda:	4649      	mov	r1, r9
 8011ddc:	f7ee fa7c 	bl	80002d8 <__aeabi_dsub>
 8011de0:	a36f      	add	r3, pc, #444	; (adr r3, 8011fa0 <__ieee754_pow+0x9c0>)
 8011de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de6:	f7ee fc2f 	bl	8000648 <__aeabi_dmul>
 8011dea:	a36f      	add	r3, pc, #444	; (adr r3, 8011fa8 <__ieee754_pow+0x9c8>)
 8011dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df0:	4680      	mov	r8, r0
 8011df2:	4689      	mov	r9, r1
 8011df4:	4620      	mov	r0, r4
 8011df6:	4629      	mov	r1, r5
 8011df8:	f7ee fc26 	bl	8000648 <__aeabi_dmul>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	460b      	mov	r3, r1
 8011e00:	4640      	mov	r0, r8
 8011e02:	4649      	mov	r1, r9
 8011e04:	f7ee fa6a 	bl	80002dc <__adddf3>
 8011e08:	4604      	mov	r4, r0
 8011e0a:	460d      	mov	r5, r1
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4630      	mov	r0, r6
 8011e12:	4639      	mov	r1, r7
 8011e14:	f7ee fa62 	bl	80002dc <__adddf3>
 8011e18:	4632      	mov	r2, r6
 8011e1a:	463b      	mov	r3, r7
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4689      	mov	r9, r1
 8011e20:	f7ee fa5a 	bl	80002d8 <__aeabi_dsub>
 8011e24:	4602      	mov	r2, r0
 8011e26:	460b      	mov	r3, r1
 8011e28:	4620      	mov	r0, r4
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	f7ee fa54 	bl	80002d8 <__aeabi_dsub>
 8011e30:	4642      	mov	r2, r8
 8011e32:	4606      	mov	r6, r0
 8011e34:	460f      	mov	r7, r1
 8011e36:	464b      	mov	r3, r9
 8011e38:	4640      	mov	r0, r8
 8011e3a:	4649      	mov	r1, r9
 8011e3c:	f7ee fc04 	bl	8000648 <__aeabi_dmul>
 8011e40:	a35b      	add	r3, pc, #364	; (adr r3, 8011fb0 <__ieee754_pow+0x9d0>)
 8011e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e46:	4604      	mov	r4, r0
 8011e48:	460d      	mov	r5, r1
 8011e4a:	f7ee fbfd 	bl	8000648 <__aeabi_dmul>
 8011e4e:	a35a      	add	r3, pc, #360	; (adr r3, 8011fb8 <__ieee754_pow+0x9d8>)
 8011e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e54:	f7ee fa40 	bl	80002d8 <__aeabi_dsub>
 8011e58:	4622      	mov	r2, r4
 8011e5a:	462b      	mov	r3, r5
 8011e5c:	f7ee fbf4 	bl	8000648 <__aeabi_dmul>
 8011e60:	a357      	add	r3, pc, #348	; (adr r3, 8011fc0 <__ieee754_pow+0x9e0>)
 8011e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e66:	f7ee fa39 	bl	80002dc <__adddf3>
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	462b      	mov	r3, r5
 8011e6e:	f7ee fbeb 	bl	8000648 <__aeabi_dmul>
 8011e72:	a355      	add	r3, pc, #340	; (adr r3, 8011fc8 <__ieee754_pow+0x9e8>)
 8011e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e78:	f7ee fa2e 	bl	80002d8 <__aeabi_dsub>
 8011e7c:	4622      	mov	r2, r4
 8011e7e:	462b      	mov	r3, r5
 8011e80:	f7ee fbe2 	bl	8000648 <__aeabi_dmul>
 8011e84:	a352      	add	r3, pc, #328	; (adr r3, 8011fd0 <__ieee754_pow+0x9f0>)
 8011e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8a:	f7ee fa27 	bl	80002dc <__adddf3>
 8011e8e:	4622      	mov	r2, r4
 8011e90:	462b      	mov	r3, r5
 8011e92:	f7ee fbd9 	bl	8000648 <__aeabi_dmul>
 8011e96:	4602      	mov	r2, r0
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	f7ee fa1b 	bl	80002d8 <__aeabi_dsub>
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	460d      	mov	r5, r1
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4640      	mov	r0, r8
 8011eac:	4649      	mov	r1, r9
 8011eae:	f7ee fbcb 	bl	8000648 <__aeabi_dmul>
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8011eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	f7ee fa0a 	bl	80002d8 <__aeabi_dsub>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ecc:	f7ee fce6 	bl	800089c <__aeabi_ddiv>
 8011ed0:	4632      	mov	r2, r6
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	463b      	mov	r3, r7
 8011ed8:	4640      	mov	r0, r8
 8011eda:	4649      	mov	r1, r9
 8011edc:	f7ee fbb4 	bl	8000648 <__aeabi_dmul>
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	463b      	mov	r3, r7
 8011ee4:	f7ee f9fa 	bl	80002dc <__adddf3>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	460b      	mov	r3, r1
 8011eec:	4620      	mov	r0, r4
 8011eee:	4629      	mov	r1, r5
 8011ef0:	f7ee f9f2 	bl	80002d8 <__aeabi_dsub>
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	464b      	mov	r3, r9
 8011ef8:	f7ee f9ee 	bl	80002d8 <__aeabi_dsub>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	2000      	movs	r0, #0
 8011f02:	4939      	ldr	r1, [pc, #228]	; (8011fe8 <__ieee754_pow+0xa08>)
 8011f04:	f7ee f9e8 	bl	80002d8 <__aeabi_dsub>
 8011f08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011f0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011f10:	4602      	mov	r2, r0
 8011f12:	460b      	mov	r3, r1
 8011f14:	da2f      	bge.n	8011f76 <__ieee754_pow+0x996>
 8011f16:	4650      	mov	r0, sl
 8011f18:	ec43 2b10 	vmov	d0, r2, r3
 8011f1c:	f000 f9c0 	bl	80122a0 <scalbn>
 8011f20:	ec51 0b10 	vmov	r0, r1, d0
 8011f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f28:	f7ff bbf1 	b.w	801170e <__ieee754_pow+0x12e>
 8011f2c:	4b2f      	ldr	r3, [pc, #188]	; (8011fec <__ieee754_pow+0xa0c>)
 8011f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011f32:	429e      	cmp	r6, r3
 8011f34:	f77f af0c 	ble.w	8011d50 <__ieee754_pow+0x770>
 8011f38:	4b2d      	ldr	r3, [pc, #180]	; (8011ff0 <__ieee754_pow+0xa10>)
 8011f3a:	440b      	add	r3, r1
 8011f3c:	4303      	orrs	r3, r0
 8011f3e:	d00b      	beq.n	8011f58 <__ieee754_pow+0x978>
 8011f40:	a325      	add	r3, pc, #148	; (adr r3, 8011fd8 <__ieee754_pow+0x9f8>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f4a:	f7ee fb7d 	bl	8000648 <__aeabi_dmul>
 8011f4e:	a322      	add	r3, pc, #136	; (adr r3, 8011fd8 <__ieee754_pow+0x9f8>)
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	f7ff bbdb 	b.w	801170e <__ieee754_pow+0x12e>
 8011f58:	4622      	mov	r2, r4
 8011f5a:	462b      	mov	r3, r5
 8011f5c:	f7ee f9bc 	bl	80002d8 <__aeabi_dsub>
 8011f60:	4642      	mov	r2, r8
 8011f62:	464b      	mov	r3, r9
 8011f64:	f7ee fdf6 	bl	8000b54 <__aeabi_dcmpge>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	f43f aef1 	beq.w	8011d50 <__ieee754_pow+0x770>
 8011f6e:	e7e7      	b.n	8011f40 <__ieee754_pow+0x960>
 8011f70:	f04f 0a00 	mov.w	sl, #0
 8011f74:	e718      	b.n	8011da8 <__ieee754_pow+0x7c8>
 8011f76:	4621      	mov	r1, r4
 8011f78:	e7d4      	b.n	8011f24 <__ieee754_pow+0x944>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	491a      	ldr	r1, [pc, #104]	; (8011fe8 <__ieee754_pow+0xa08>)
 8011f7e:	f7ff bb8f 	b.w	80116a0 <__ieee754_pow+0xc0>
 8011f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f86:	f7ff bb8b 	b.w	80116a0 <__ieee754_pow+0xc0>
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	f7ff bb87 	b.w	80116a0 <__ieee754_pow+0xc0>
 8011f92:	4693      	mov	fp, r2
 8011f94:	f7ff bb98 	b.w	80116c8 <__ieee754_pow+0xe8>
 8011f98:	00000000 	.word	0x00000000
 8011f9c:	3fe62e43 	.word	0x3fe62e43
 8011fa0:	fefa39ef 	.word	0xfefa39ef
 8011fa4:	3fe62e42 	.word	0x3fe62e42
 8011fa8:	0ca86c39 	.word	0x0ca86c39
 8011fac:	be205c61 	.word	0xbe205c61
 8011fb0:	72bea4d0 	.word	0x72bea4d0
 8011fb4:	3e663769 	.word	0x3e663769
 8011fb8:	c5d26bf1 	.word	0xc5d26bf1
 8011fbc:	3ebbbd41 	.word	0x3ebbbd41
 8011fc0:	af25de2c 	.word	0xaf25de2c
 8011fc4:	3f11566a 	.word	0x3f11566a
 8011fc8:	16bebd93 	.word	0x16bebd93
 8011fcc:	3f66c16c 	.word	0x3f66c16c
 8011fd0:	5555553e 	.word	0x5555553e
 8011fd4:	3fc55555 	.word	0x3fc55555
 8011fd8:	c2f8f359 	.word	0xc2f8f359
 8011fdc:	01a56e1f 	.word	0x01a56e1f
 8011fe0:	3fe00000 	.word	0x3fe00000
 8011fe4:	000fffff 	.word	0x000fffff
 8011fe8:	3ff00000 	.word	0x3ff00000
 8011fec:	4090cbff 	.word	0x4090cbff
 8011ff0:	3f6f3400 	.word	0x3f6f3400
 8011ff4:	652b82fe 	.word	0x652b82fe
 8011ff8:	3c971547 	.word	0x3c971547

08011ffc <__ieee754_sqrt>:
 8011ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012000:	4955      	ldr	r1, [pc, #340]	; (8012158 <__ieee754_sqrt+0x15c>)
 8012002:	ec55 4b10 	vmov	r4, r5, d0
 8012006:	43a9      	bics	r1, r5
 8012008:	462b      	mov	r3, r5
 801200a:	462a      	mov	r2, r5
 801200c:	d112      	bne.n	8012034 <__ieee754_sqrt+0x38>
 801200e:	ee10 2a10 	vmov	r2, s0
 8012012:	ee10 0a10 	vmov	r0, s0
 8012016:	4629      	mov	r1, r5
 8012018:	f7ee fb16 	bl	8000648 <__aeabi_dmul>
 801201c:	4602      	mov	r2, r0
 801201e:	460b      	mov	r3, r1
 8012020:	4620      	mov	r0, r4
 8012022:	4629      	mov	r1, r5
 8012024:	f7ee f95a 	bl	80002dc <__adddf3>
 8012028:	4604      	mov	r4, r0
 801202a:	460d      	mov	r5, r1
 801202c:	ec45 4b10 	vmov	d0, r4, r5
 8012030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012034:	2d00      	cmp	r5, #0
 8012036:	ee10 0a10 	vmov	r0, s0
 801203a:	4621      	mov	r1, r4
 801203c:	dc0f      	bgt.n	801205e <__ieee754_sqrt+0x62>
 801203e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012042:	4330      	orrs	r0, r6
 8012044:	d0f2      	beq.n	801202c <__ieee754_sqrt+0x30>
 8012046:	b155      	cbz	r5, 801205e <__ieee754_sqrt+0x62>
 8012048:	ee10 2a10 	vmov	r2, s0
 801204c:	4620      	mov	r0, r4
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee f942 	bl	80002d8 <__aeabi_dsub>
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	f7ee fc20 	bl	800089c <__aeabi_ddiv>
 801205c:	e7e4      	b.n	8012028 <__ieee754_sqrt+0x2c>
 801205e:	151b      	asrs	r3, r3, #20
 8012060:	d073      	beq.n	801214a <__ieee754_sqrt+0x14e>
 8012062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012066:	07dd      	lsls	r5, r3, #31
 8012068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801206c:	bf48      	it	mi
 801206e:	0fc8      	lsrmi	r0, r1, #31
 8012070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012074:	bf44      	itt	mi
 8012076:	0049      	lslmi	r1, r1, #1
 8012078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801207c:	2500      	movs	r5, #0
 801207e:	1058      	asrs	r0, r3, #1
 8012080:	0fcb      	lsrs	r3, r1, #31
 8012082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012086:	0049      	lsls	r1, r1, #1
 8012088:	2316      	movs	r3, #22
 801208a:	462c      	mov	r4, r5
 801208c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012090:	19a7      	adds	r7, r4, r6
 8012092:	4297      	cmp	r7, r2
 8012094:	bfde      	ittt	le
 8012096:	19bc      	addle	r4, r7, r6
 8012098:	1bd2      	suble	r2, r2, r7
 801209a:	19ad      	addle	r5, r5, r6
 801209c:	0fcf      	lsrs	r7, r1, #31
 801209e:	3b01      	subs	r3, #1
 80120a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80120a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80120a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80120ac:	d1f0      	bne.n	8012090 <__ieee754_sqrt+0x94>
 80120ae:	f04f 0c20 	mov.w	ip, #32
 80120b2:	469e      	mov	lr, r3
 80120b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80120b8:	42a2      	cmp	r2, r4
 80120ba:	eb06 070e 	add.w	r7, r6, lr
 80120be:	dc02      	bgt.n	80120c6 <__ieee754_sqrt+0xca>
 80120c0:	d112      	bne.n	80120e8 <__ieee754_sqrt+0xec>
 80120c2:	428f      	cmp	r7, r1
 80120c4:	d810      	bhi.n	80120e8 <__ieee754_sqrt+0xec>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	eb07 0e06 	add.w	lr, r7, r6
 80120cc:	da42      	bge.n	8012154 <__ieee754_sqrt+0x158>
 80120ce:	f1be 0f00 	cmp.w	lr, #0
 80120d2:	db3f      	blt.n	8012154 <__ieee754_sqrt+0x158>
 80120d4:	f104 0801 	add.w	r8, r4, #1
 80120d8:	1b12      	subs	r2, r2, r4
 80120da:	428f      	cmp	r7, r1
 80120dc:	bf88      	it	hi
 80120de:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80120e2:	1bc9      	subs	r1, r1, r7
 80120e4:	4433      	add	r3, r6
 80120e6:	4644      	mov	r4, r8
 80120e8:	0052      	lsls	r2, r2, #1
 80120ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80120ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80120f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80120f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80120fa:	d1dd      	bne.n	80120b8 <__ieee754_sqrt+0xbc>
 80120fc:	430a      	orrs	r2, r1
 80120fe:	d006      	beq.n	801210e <__ieee754_sqrt+0x112>
 8012100:	1c5c      	adds	r4, r3, #1
 8012102:	bf13      	iteet	ne
 8012104:	3301      	addne	r3, #1
 8012106:	3501      	addeq	r5, #1
 8012108:	4663      	moveq	r3, ip
 801210a:	f023 0301 	bicne.w	r3, r3, #1
 801210e:	106a      	asrs	r2, r5, #1
 8012110:	085b      	lsrs	r3, r3, #1
 8012112:	07e9      	lsls	r1, r5, #31
 8012114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801211c:	bf48      	it	mi
 801211e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012126:	461c      	mov	r4, r3
 8012128:	e780      	b.n	801202c <__ieee754_sqrt+0x30>
 801212a:	0aca      	lsrs	r2, r1, #11
 801212c:	3815      	subs	r0, #21
 801212e:	0549      	lsls	r1, r1, #21
 8012130:	2a00      	cmp	r2, #0
 8012132:	d0fa      	beq.n	801212a <__ieee754_sqrt+0x12e>
 8012134:	02d6      	lsls	r6, r2, #11
 8012136:	d50a      	bpl.n	801214e <__ieee754_sqrt+0x152>
 8012138:	f1c3 0420 	rsb	r4, r3, #32
 801213c:	fa21 f404 	lsr.w	r4, r1, r4
 8012140:	1e5d      	subs	r5, r3, #1
 8012142:	4099      	lsls	r1, r3
 8012144:	4322      	orrs	r2, r4
 8012146:	1b43      	subs	r3, r0, r5
 8012148:	e78b      	b.n	8012062 <__ieee754_sqrt+0x66>
 801214a:	4618      	mov	r0, r3
 801214c:	e7f0      	b.n	8012130 <__ieee754_sqrt+0x134>
 801214e:	0052      	lsls	r2, r2, #1
 8012150:	3301      	adds	r3, #1
 8012152:	e7ef      	b.n	8012134 <__ieee754_sqrt+0x138>
 8012154:	46a0      	mov	r8, r4
 8012156:	e7bf      	b.n	80120d8 <__ieee754_sqrt+0xdc>
 8012158:	7ff00000 	.word	0x7ff00000

0801215c <fabs>:
 801215c:	ec51 0b10 	vmov	r0, r1, d0
 8012160:	ee10 2a10 	vmov	r2, s0
 8012164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012168:	ec43 2b10 	vmov	d0, r2, r3
 801216c:	4770      	bx	lr

0801216e <finite>:
 801216e:	ee10 3a90 	vmov	r3, s1
 8012172:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801217a:	0fc0      	lsrs	r0, r0, #31
 801217c:	4770      	bx	lr

0801217e <matherr>:
 801217e:	2000      	movs	r0, #0
 8012180:	4770      	bx	lr
 8012182:	0000      	movs	r0, r0
 8012184:	0000      	movs	r0, r0
	...

08012188 <nan>:
 8012188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012190 <nan+0x8>
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	00000000 	.word	0x00000000
 8012194:	7ff80000 	.word	0x7ff80000

08012198 <rint>:
 8012198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801219a:	ec51 0b10 	vmov	r0, r1, d0
 801219e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80121a6:	2e13      	cmp	r6, #19
 80121a8:	460b      	mov	r3, r1
 80121aa:	ee10 4a10 	vmov	r4, s0
 80121ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80121b2:	dc56      	bgt.n	8012262 <rint+0xca>
 80121b4:	2e00      	cmp	r6, #0
 80121b6:	da2b      	bge.n	8012210 <rint+0x78>
 80121b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80121bc:	4302      	orrs	r2, r0
 80121be:	d023      	beq.n	8012208 <rint+0x70>
 80121c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80121c4:	4302      	orrs	r2, r0
 80121c6:	4254      	negs	r4, r2
 80121c8:	4314      	orrs	r4, r2
 80121ca:	0c4b      	lsrs	r3, r1, #17
 80121cc:	0b24      	lsrs	r4, r4, #12
 80121ce:	045b      	lsls	r3, r3, #17
 80121d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80121d4:	ea44 0103 	orr.w	r1, r4, r3
 80121d8:	460b      	mov	r3, r1
 80121da:	492f      	ldr	r1, [pc, #188]	; (8012298 <rint+0x100>)
 80121dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80121e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80121e4:	4602      	mov	r2, r0
 80121e6:	4639      	mov	r1, r7
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7ee f877 	bl	80002dc <__adddf3>
 80121ee:	e9cd 0100 	strd	r0, r1, [sp]
 80121f2:	463b      	mov	r3, r7
 80121f4:	4632      	mov	r2, r6
 80121f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121fa:	f7ee f86d 	bl	80002d8 <__aeabi_dsub>
 80121fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012206:	4639      	mov	r1, r7
 8012208:	ec41 0b10 	vmov	d0, r0, r1
 801220c:	b003      	add	sp, #12
 801220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012210:	4a22      	ldr	r2, [pc, #136]	; (801229c <rint+0x104>)
 8012212:	4132      	asrs	r2, r6
 8012214:	ea01 0702 	and.w	r7, r1, r2
 8012218:	4307      	orrs	r7, r0
 801221a:	d0f5      	beq.n	8012208 <rint+0x70>
 801221c:	0852      	lsrs	r2, r2, #1
 801221e:	4011      	ands	r1, r2
 8012220:	430c      	orrs	r4, r1
 8012222:	d00b      	beq.n	801223c <rint+0xa4>
 8012224:	ea23 0202 	bic.w	r2, r3, r2
 8012228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801222c:	2e13      	cmp	r6, #19
 801222e:	fa43 f306 	asr.w	r3, r3, r6
 8012232:	bf0c      	ite	eq
 8012234:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012238:	2400      	movne	r4, #0
 801223a:	4313      	orrs	r3, r2
 801223c:	4916      	ldr	r1, [pc, #88]	; (8012298 <rint+0x100>)
 801223e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012242:	4622      	mov	r2, r4
 8012244:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012248:	4620      	mov	r0, r4
 801224a:	4629      	mov	r1, r5
 801224c:	f7ee f846 	bl	80002dc <__adddf3>
 8012250:	e9cd 0100 	strd	r0, r1, [sp]
 8012254:	4622      	mov	r2, r4
 8012256:	462b      	mov	r3, r5
 8012258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801225c:	f7ee f83c 	bl	80002d8 <__aeabi_dsub>
 8012260:	e7d2      	b.n	8012208 <rint+0x70>
 8012262:	2e33      	cmp	r6, #51	; 0x33
 8012264:	dd07      	ble.n	8012276 <rint+0xde>
 8012266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801226a:	d1cd      	bne.n	8012208 <rint+0x70>
 801226c:	ee10 2a10 	vmov	r2, s0
 8012270:	f7ee f834 	bl	80002dc <__adddf3>
 8012274:	e7c8      	b.n	8012208 <rint+0x70>
 8012276:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801227a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801227e:	40f2      	lsrs	r2, r6
 8012280:	4210      	tst	r0, r2
 8012282:	d0c1      	beq.n	8012208 <rint+0x70>
 8012284:	0852      	lsrs	r2, r2, #1
 8012286:	4210      	tst	r0, r2
 8012288:	bf1f      	itttt	ne
 801228a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801228e:	ea20 0202 	bicne.w	r2, r0, r2
 8012292:	4134      	asrne	r4, r6
 8012294:	4314      	orrne	r4, r2
 8012296:	e7d1      	b.n	801223c <rint+0xa4>
 8012298:	08013ba8 	.word	0x08013ba8
 801229c:	000fffff 	.word	0x000fffff

080122a0 <scalbn>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	ec55 4b10 	vmov	r4, r5, d0
 80122a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80122aa:	4606      	mov	r6, r0
 80122ac:	462b      	mov	r3, r5
 80122ae:	b9aa      	cbnz	r2, 80122dc <scalbn+0x3c>
 80122b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80122b4:	4323      	orrs	r3, r4
 80122b6:	d03b      	beq.n	8012330 <scalbn+0x90>
 80122b8:	4b31      	ldr	r3, [pc, #196]	; (8012380 <scalbn+0xe0>)
 80122ba:	4629      	mov	r1, r5
 80122bc:	2200      	movs	r2, #0
 80122be:	ee10 0a10 	vmov	r0, s0
 80122c2:	f7ee f9c1 	bl	8000648 <__aeabi_dmul>
 80122c6:	4b2f      	ldr	r3, [pc, #188]	; (8012384 <scalbn+0xe4>)
 80122c8:	429e      	cmp	r6, r3
 80122ca:	4604      	mov	r4, r0
 80122cc:	460d      	mov	r5, r1
 80122ce:	da12      	bge.n	80122f6 <scalbn+0x56>
 80122d0:	a327      	add	r3, pc, #156	; (adr r3, 8012370 <scalbn+0xd0>)
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	f7ee f9b7 	bl	8000648 <__aeabi_dmul>
 80122da:	e009      	b.n	80122f0 <scalbn+0x50>
 80122dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80122e0:	428a      	cmp	r2, r1
 80122e2:	d10c      	bne.n	80122fe <scalbn+0x5e>
 80122e4:	ee10 2a10 	vmov	r2, s0
 80122e8:	4620      	mov	r0, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	f7ed fff6 	bl	80002dc <__adddf3>
 80122f0:	4604      	mov	r4, r0
 80122f2:	460d      	mov	r5, r1
 80122f4:	e01c      	b.n	8012330 <scalbn+0x90>
 80122f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80122fa:	460b      	mov	r3, r1
 80122fc:	3a36      	subs	r2, #54	; 0x36
 80122fe:	4432      	add	r2, r6
 8012300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012304:	428a      	cmp	r2, r1
 8012306:	dd0b      	ble.n	8012320 <scalbn+0x80>
 8012308:	ec45 4b11 	vmov	d1, r4, r5
 801230c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012378 <scalbn+0xd8>
 8012310:	f000 f9f0 	bl	80126f4 <copysign>
 8012314:	a318      	add	r3, pc, #96	; (adr r3, 8012378 <scalbn+0xd8>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	ec51 0b10 	vmov	r0, r1, d0
 801231e:	e7da      	b.n	80122d6 <scalbn+0x36>
 8012320:	2a00      	cmp	r2, #0
 8012322:	dd08      	ble.n	8012336 <scalbn+0x96>
 8012324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801232c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012330:	ec45 4b10 	vmov	d0, r4, r5
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801233a:	da0d      	bge.n	8012358 <scalbn+0xb8>
 801233c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012340:	429e      	cmp	r6, r3
 8012342:	ec45 4b11 	vmov	d1, r4, r5
 8012346:	dce1      	bgt.n	801230c <scalbn+0x6c>
 8012348:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012370 <scalbn+0xd0>
 801234c:	f000 f9d2 	bl	80126f4 <copysign>
 8012350:	a307      	add	r3, pc, #28	; (adr r3, 8012370 <scalbn+0xd0>)
 8012352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012356:	e7e0      	b.n	801231a <scalbn+0x7a>
 8012358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801235c:	3236      	adds	r2, #54	; 0x36
 801235e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012366:	4620      	mov	r0, r4
 8012368:	4629      	mov	r1, r5
 801236a:	2200      	movs	r2, #0
 801236c:	4b06      	ldr	r3, [pc, #24]	; (8012388 <scalbn+0xe8>)
 801236e:	e7b2      	b.n	80122d6 <scalbn+0x36>
 8012370:	c2f8f359 	.word	0xc2f8f359
 8012374:	01a56e1f 	.word	0x01a56e1f
 8012378:	8800759c 	.word	0x8800759c
 801237c:	7e37e43c 	.word	0x7e37e43c
 8012380:	43500000 	.word	0x43500000
 8012384:	ffff3cb0 	.word	0xffff3cb0
 8012388:	3c900000 	.word	0x3c900000
 801238c:	00000000 	.word	0x00000000

08012390 <__ieee754_log>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	ec51 0b10 	vmov	r0, r1, d0
 8012398:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801239c:	b087      	sub	sp, #28
 801239e:	460d      	mov	r5, r1
 80123a0:	da27      	bge.n	80123f2 <__ieee754_log+0x62>
 80123a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123a6:	4303      	orrs	r3, r0
 80123a8:	ee10 2a10 	vmov	r2, s0
 80123ac:	d10a      	bne.n	80123c4 <__ieee754_log+0x34>
 80123ae:	49cc      	ldr	r1, [pc, #816]	; (80126e0 <__ieee754_log+0x350>)
 80123b0:	2200      	movs	r2, #0
 80123b2:	2300      	movs	r3, #0
 80123b4:	2000      	movs	r0, #0
 80123b6:	f7ee fa71 	bl	800089c <__aeabi_ddiv>
 80123ba:	ec41 0b10 	vmov	d0, r0, r1
 80123be:	b007      	add	sp, #28
 80123c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c4:	2900      	cmp	r1, #0
 80123c6:	da05      	bge.n	80123d4 <__ieee754_log+0x44>
 80123c8:	460b      	mov	r3, r1
 80123ca:	f7ed ff85 	bl	80002d8 <__aeabi_dsub>
 80123ce:	2200      	movs	r2, #0
 80123d0:	2300      	movs	r3, #0
 80123d2:	e7f0      	b.n	80123b6 <__ieee754_log+0x26>
 80123d4:	4bc3      	ldr	r3, [pc, #780]	; (80126e4 <__ieee754_log+0x354>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	f7ee f936 	bl	8000648 <__aeabi_dmul>
 80123dc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80123e0:	460d      	mov	r5, r1
 80123e2:	4ac1      	ldr	r2, [pc, #772]	; (80126e8 <__ieee754_log+0x358>)
 80123e4:	4295      	cmp	r5, r2
 80123e6:	dd06      	ble.n	80123f6 <__ieee754_log+0x66>
 80123e8:	4602      	mov	r2, r0
 80123ea:	460b      	mov	r3, r1
 80123ec:	f7ed ff76 	bl	80002dc <__adddf3>
 80123f0:	e7e3      	b.n	80123ba <__ieee754_log+0x2a>
 80123f2:	2300      	movs	r3, #0
 80123f4:	e7f5      	b.n	80123e2 <__ieee754_log+0x52>
 80123f6:	152c      	asrs	r4, r5, #20
 80123f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80123fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012400:	441c      	add	r4, r3
 8012402:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012406:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801240e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012412:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012416:	ea42 0105 	orr.w	r1, r2, r5
 801241a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801241e:	2200      	movs	r2, #0
 8012420:	4bb2      	ldr	r3, [pc, #712]	; (80126ec <__ieee754_log+0x35c>)
 8012422:	f7ed ff59 	bl	80002d8 <__aeabi_dsub>
 8012426:	1cab      	adds	r3, r5, #2
 8012428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801242c:	2b02      	cmp	r3, #2
 801242e:	4682      	mov	sl, r0
 8012430:	468b      	mov	fp, r1
 8012432:	f04f 0200 	mov.w	r2, #0
 8012436:	dc53      	bgt.n	80124e0 <__ieee754_log+0x150>
 8012438:	2300      	movs	r3, #0
 801243a:	f7ee fb6d 	bl	8000b18 <__aeabi_dcmpeq>
 801243e:	b1d0      	cbz	r0, 8012476 <__ieee754_log+0xe6>
 8012440:	2c00      	cmp	r4, #0
 8012442:	f000 8120 	beq.w	8012686 <__ieee754_log+0x2f6>
 8012446:	4620      	mov	r0, r4
 8012448:	f7ee f894 	bl	8000574 <__aeabi_i2d>
 801244c:	a390      	add	r3, pc, #576	; (adr r3, 8012690 <__ieee754_log+0x300>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	4606      	mov	r6, r0
 8012454:	460f      	mov	r7, r1
 8012456:	f7ee f8f7 	bl	8000648 <__aeabi_dmul>
 801245a:	a38f      	add	r3, pc, #572	; (adr r3, 8012698 <__ieee754_log+0x308>)
 801245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012460:	4604      	mov	r4, r0
 8012462:	460d      	mov	r5, r1
 8012464:	4630      	mov	r0, r6
 8012466:	4639      	mov	r1, r7
 8012468:	f7ee f8ee 	bl	8000648 <__aeabi_dmul>
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	4620      	mov	r0, r4
 8012472:	4629      	mov	r1, r5
 8012474:	e7ba      	b.n	80123ec <__ieee754_log+0x5c>
 8012476:	a38a      	add	r3, pc, #552	; (adr r3, 80126a0 <__ieee754_log+0x310>)
 8012478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247c:	4650      	mov	r0, sl
 801247e:	4659      	mov	r1, fp
 8012480:	f7ee f8e2 	bl	8000648 <__aeabi_dmul>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	2000      	movs	r0, #0
 801248a:	4999      	ldr	r1, [pc, #612]	; (80126f0 <__ieee754_log+0x360>)
 801248c:	f7ed ff24 	bl	80002d8 <__aeabi_dsub>
 8012490:	4652      	mov	r2, sl
 8012492:	4606      	mov	r6, r0
 8012494:	460f      	mov	r7, r1
 8012496:	465b      	mov	r3, fp
 8012498:	4650      	mov	r0, sl
 801249a:	4659      	mov	r1, fp
 801249c:	f7ee f8d4 	bl	8000648 <__aeabi_dmul>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4630      	mov	r0, r6
 80124a6:	4639      	mov	r1, r7
 80124a8:	f7ee f8ce 	bl	8000648 <__aeabi_dmul>
 80124ac:	4606      	mov	r6, r0
 80124ae:	460f      	mov	r7, r1
 80124b0:	b914      	cbnz	r4, 80124b8 <__ieee754_log+0x128>
 80124b2:	4632      	mov	r2, r6
 80124b4:	463b      	mov	r3, r7
 80124b6:	e0a0      	b.n	80125fa <__ieee754_log+0x26a>
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7ee f85b 	bl	8000574 <__aeabi_i2d>
 80124be:	a374      	add	r3, pc, #464	; (adr r3, 8012690 <__ieee754_log+0x300>)
 80124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c4:	4680      	mov	r8, r0
 80124c6:	4689      	mov	r9, r1
 80124c8:	f7ee f8be 	bl	8000648 <__aeabi_dmul>
 80124cc:	a372      	add	r3, pc, #456	; (adr r3, 8012698 <__ieee754_log+0x308>)
 80124ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d2:	4604      	mov	r4, r0
 80124d4:	460d      	mov	r5, r1
 80124d6:	4640      	mov	r0, r8
 80124d8:	4649      	mov	r1, r9
 80124da:	f7ee f8b5 	bl	8000648 <__aeabi_dmul>
 80124de:	e0a5      	b.n	801262c <__ieee754_log+0x29c>
 80124e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80124e4:	f7ed fefa 	bl	80002dc <__adddf3>
 80124e8:	4602      	mov	r2, r0
 80124ea:	460b      	mov	r3, r1
 80124ec:	4650      	mov	r0, sl
 80124ee:	4659      	mov	r1, fp
 80124f0:	f7ee f9d4 	bl	800089c <__aeabi_ddiv>
 80124f4:	e9cd 0100 	strd	r0, r1, [sp]
 80124f8:	4620      	mov	r0, r4
 80124fa:	f7ee f83b 	bl	8000574 <__aeabi_i2d>
 80124fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012506:	4610      	mov	r0, r2
 8012508:	4619      	mov	r1, r3
 801250a:	f7ee f89d 	bl	8000648 <__aeabi_dmul>
 801250e:	4602      	mov	r2, r0
 8012510:	460b      	mov	r3, r1
 8012512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012516:	f7ee f897 	bl	8000648 <__aeabi_dmul>
 801251a:	a363      	add	r3, pc, #396	; (adr r3, 80126a8 <__ieee754_log+0x318>)
 801251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012520:	4680      	mov	r8, r0
 8012522:	4689      	mov	r9, r1
 8012524:	f7ee f890 	bl	8000648 <__aeabi_dmul>
 8012528:	a361      	add	r3, pc, #388	; (adr r3, 80126b0 <__ieee754_log+0x320>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	f7ed fed5 	bl	80002dc <__adddf3>
 8012532:	4642      	mov	r2, r8
 8012534:	464b      	mov	r3, r9
 8012536:	f7ee f887 	bl	8000648 <__aeabi_dmul>
 801253a:	a35f      	add	r3, pc, #380	; (adr r3, 80126b8 <__ieee754_log+0x328>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	f7ed fecc 	bl	80002dc <__adddf3>
 8012544:	4642      	mov	r2, r8
 8012546:	464b      	mov	r3, r9
 8012548:	f7ee f87e 	bl	8000648 <__aeabi_dmul>
 801254c:	a35c      	add	r3, pc, #368	; (adr r3, 80126c0 <__ieee754_log+0x330>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f7ed fec3 	bl	80002dc <__adddf3>
 8012556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801255a:	f7ee f875 	bl	8000648 <__aeabi_dmul>
 801255e:	a35a      	add	r3, pc, #360	; (adr r3, 80126c8 <__ieee754_log+0x338>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012568:	4640      	mov	r0, r8
 801256a:	4649      	mov	r1, r9
 801256c:	f7ee f86c 	bl	8000648 <__aeabi_dmul>
 8012570:	a357      	add	r3, pc, #348	; (adr r3, 80126d0 <__ieee754_log+0x340>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7ed feb1 	bl	80002dc <__adddf3>
 801257a:	4642      	mov	r2, r8
 801257c:	464b      	mov	r3, r9
 801257e:	f7ee f863 	bl	8000648 <__aeabi_dmul>
 8012582:	a355      	add	r3, pc, #340	; (adr r3, 80126d8 <__ieee754_log+0x348>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	f7ed fea8 	bl	80002dc <__adddf3>
 801258c:	4642      	mov	r2, r8
 801258e:	464b      	mov	r3, r9
 8012590:	f7ee f85a 	bl	8000648 <__aeabi_dmul>
 8012594:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012598:	4602      	mov	r2, r0
 801259a:	460b      	mov	r3, r1
 801259c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80125a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80125a4:	f7ed fe9a 	bl	80002dc <__adddf3>
 80125a8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80125ac:	3551      	adds	r5, #81	; 0x51
 80125ae:	4335      	orrs	r5, r6
 80125b0:	2d00      	cmp	r5, #0
 80125b2:	4680      	mov	r8, r0
 80125b4:	4689      	mov	r9, r1
 80125b6:	dd48      	ble.n	801264a <__ieee754_log+0x2ba>
 80125b8:	2200      	movs	r2, #0
 80125ba:	4b4d      	ldr	r3, [pc, #308]	; (80126f0 <__ieee754_log+0x360>)
 80125bc:	4650      	mov	r0, sl
 80125be:	4659      	mov	r1, fp
 80125c0:	f7ee f842 	bl	8000648 <__aeabi_dmul>
 80125c4:	4652      	mov	r2, sl
 80125c6:	465b      	mov	r3, fp
 80125c8:	f7ee f83e 	bl	8000648 <__aeabi_dmul>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4606      	mov	r6, r0
 80125d2:	460f      	mov	r7, r1
 80125d4:	4640      	mov	r0, r8
 80125d6:	4649      	mov	r1, r9
 80125d8:	f7ed fe80 	bl	80002dc <__adddf3>
 80125dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125e0:	f7ee f832 	bl	8000648 <__aeabi_dmul>
 80125e4:	4680      	mov	r8, r0
 80125e6:	4689      	mov	r9, r1
 80125e8:	b964      	cbnz	r4, 8012604 <__ieee754_log+0x274>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4630      	mov	r0, r6
 80125f0:	4639      	mov	r1, r7
 80125f2:	f7ed fe71 	bl	80002d8 <__aeabi_dsub>
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4650      	mov	r0, sl
 80125fc:	4659      	mov	r1, fp
 80125fe:	f7ed fe6b 	bl	80002d8 <__aeabi_dsub>
 8012602:	e6da      	b.n	80123ba <__ieee754_log+0x2a>
 8012604:	a322      	add	r3, pc, #136	; (adr r3, 8012690 <__ieee754_log+0x300>)
 8012606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801260e:	f7ee f81b 	bl	8000648 <__aeabi_dmul>
 8012612:	a321      	add	r3, pc, #132	; (adr r3, 8012698 <__ieee754_log+0x308>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	4604      	mov	r4, r0
 801261a:	460d      	mov	r5, r1
 801261c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012620:	f7ee f812 	bl	8000648 <__aeabi_dmul>
 8012624:	4642      	mov	r2, r8
 8012626:	464b      	mov	r3, r9
 8012628:	f7ed fe58 	bl	80002dc <__adddf3>
 801262c:	4602      	mov	r2, r0
 801262e:	460b      	mov	r3, r1
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ed fe50 	bl	80002d8 <__aeabi_dsub>
 8012638:	4652      	mov	r2, sl
 801263a:	465b      	mov	r3, fp
 801263c:	f7ed fe4c 	bl	80002d8 <__aeabi_dsub>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	4620      	mov	r0, r4
 8012646:	4629      	mov	r1, r5
 8012648:	e7d9      	b.n	80125fe <__ieee754_log+0x26e>
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	4650      	mov	r0, sl
 8012650:	4659      	mov	r1, fp
 8012652:	f7ed fe41 	bl	80002d8 <__aeabi_dsub>
 8012656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801265a:	f7ed fff5 	bl	8000648 <__aeabi_dmul>
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	2c00      	cmp	r4, #0
 8012664:	f43f af25 	beq.w	80124b2 <__ieee754_log+0x122>
 8012668:	a309      	add	r3, pc, #36	; (adr r3, 8012690 <__ieee754_log+0x300>)
 801266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012672:	f7ed ffe9 	bl	8000648 <__aeabi_dmul>
 8012676:	a308      	add	r3, pc, #32	; (adr r3, 8012698 <__ieee754_log+0x308>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	4604      	mov	r4, r0
 801267e:	460d      	mov	r5, r1
 8012680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012684:	e729      	b.n	80124da <__ieee754_log+0x14a>
 8012686:	2000      	movs	r0, #0
 8012688:	2100      	movs	r1, #0
 801268a:	e696      	b.n	80123ba <__ieee754_log+0x2a>
 801268c:	f3af 8000 	nop.w
 8012690:	fee00000 	.word	0xfee00000
 8012694:	3fe62e42 	.word	0x3fe62e42
 8012698:	35793c76 	.word	0x35793c76
 801269c:	3dea39ef 	.word	0x3dea39ef
 80126a0:	55555555 	.word	0x55555555
 80126a4:	3fd55555 	.word	0x3fd55555
 80126a8:	df3e5244 	.word	0xdf3e5244
 80126ac:	3fc2f112 	.word	0x3fc2f112
 80126b0:	96cb03de 	.word	0x96cb03de
 80126b4:	3fc74664 	.word	0x3fc74664
 80126b8:	94229359 	.word	0x94229359
 80126bc:	3fd24924 	.word	0x3fd24924
 80126c0:	55555593 	.word	0x55555593
 80126c4:	3fe55555 	.word	0x3fe55555
 80126c8:	d078c69f 	.word	0xd078c69f
 80126cc:	3fc39a09 	.word	0x3fc39a09
 80126d0:	1d8e78af 	.word	0x1d8e78af
 80126d4:	3fcc71c5 	.word	0x3fcc71c5
 80126d8:	9997fa04 	.word	0x9997fa04
 80126dc:	3fd99999 	.word	0x3fd99999
 80126e0:	c3500000 	.word	0xc3500000
 80126e4:	43500000 	.word	0x43500000
 80126e8:	7fefffff 	.word	0x7fefffff
 80126ec:	3ff00000 	.word	0x3ff00000
 80126f0:	3fe00000 	.word	0x3fe00000

080126f4 <copysign>:
 80126f4:	ec51 0b10 	vmov	r0, r1, d0
 80126f8:	ee11 0a90 	vmov	r0, s3
 80126fc:	ee10 2a10 	vmov	r2, s0
 8012700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012704:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012708:	ea41 0300 	orr.w	r3, r1, r0
 801270c:	ec43 2b10 	vmov	d0, r2, r3
 8012710:	4770      	bx	lr
	...

08012714 <_init>:
 8012714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012716:	bf00      	nop
 8012718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801271a:	bc08      	pop	{r3}
 801271c:	469e      	mov	lr, r3
 801271e:	4770      	bx	lr

08012720 <_fini>:
 8012720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012722:	bf00      	nop
 8012724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012726:	bc08      	pop	{r3}
 8012728:	469e      	mov	lr, r3
 801272a:	4770      	bx	lr
