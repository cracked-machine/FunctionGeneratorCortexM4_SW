
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012954  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001468  08012b38  08012b38  00022b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fa0  08013fa0  00031e80  2**0
                  CONTENTS
  4 .ARM          00000000  08013fa0  08013fa0  00031e80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013fa0  08013fa0  00031e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fa0  08013fa0  00023fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fa4  08013fa4  00023fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e80  20000000  08013fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  20001e80  08015e28  00031e80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002950  08015e28  00032950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004581c  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000078e7  00000000  00000000  000776cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002228  00000000  00000000  0007efb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001de0  00000000  00000000  000811e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003531d  00000000  00000000  00082fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002edf9  00000000  00000000  000b82dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001266bc  00000000  00000000  000e70d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020d792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009604  00000000  00000000  0020d810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e80 	.word	0x20001e80
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012b1c 	.word	0x08012b1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e84 	.word	0x20001e84
 800021c:	08012b1c 	.word	0x08012b1c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d f8f8 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012b38 	.word	0x08012b38

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d f92d 	bl	800df86 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fd83 	bl	800e838 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fb65 	bl	800e404 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d f8d4 	bl	800df04 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 f868 	bl	8007e34 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb88 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fc67 	bl	800f63c <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012b44 	.word	0x08012b44
 8000d78:	08012b54 	.word	0x08012b54

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fed3 	bl	8004b2c <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00e fc55 	bl	800f63c <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fecb 	bl	8004b2c <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fdce 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fdca 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fdc6 	bl	8003948 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fcad 	bl	800471c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00e fc37 	bl	800f63c <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fca5 	bl	800471c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f8f6 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f8f2 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f8ee 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fd95 	bl	8004928 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00e fc19 	bl	800f63c <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fd8d 	bl	8004928 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fd04 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fd00 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fcfc 	bl	800382c <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fc65 	bl	8004704 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00e fbfb 	bl	800f63c <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fc5d 	bl	8004704 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb5d 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb59 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb55 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb51 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fe18 	bl	8003abc <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00e fbd2 	bl	800f63c <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00d f827 	bl	800df04 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00d f816 	bl	800df04 <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08012b64 	.word	0x08012b64
 8000ee4:	08012b78 	.word	0x08012b78
 8000ee8:	08012b8c 	.word	0x08012b8c
 8000eec:	08012ba0 	.word	0x08012ba0
 8000ef0:	08012bb4 	.word	0x08012bb4
 8000ef4:	20001e9c 	.word	0x20001e9c

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00c ffb4 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00c ffa4 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00c ff94 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00c ff84 	bl	800df04 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f004 ffd2 	bl	8005fa4 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00e fb17 	bl	800f64c <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00c ff60 	bl	800df04 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fdf1 	bl	8005c2c <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00e faeb 	bl	800f64c <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00e fadc 	bl	800f64c <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00c ff25 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00c ff12 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00c fefe 	bl	800df04 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f003 ff40 	bl	8004f8c <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f003 ff37 	bl	8004f8c <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00e fa80 	bl	800f64c <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 febe 	bl	8004ecc <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00e faa0 	bl	800f6b4 <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00c feb5 	bl	800df04 <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fa7d 	bl	800f6b4 <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00c fe92 	bl	800df04 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00c fe85 	bl	800df04 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 fd16 	bl	8005c2c <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00c fcb5 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00c fca7 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	08012bd8 	.word	0x08012bd8
 8001278:	08012be8 	.word	0x08012be8
 800127c:	08012bf8 	.word	0x08012bf8
 8001280:	08012c08 	.word	0x08012c08
 8001284:	08012c18 	.word	0x08012c18
 8001288:	08012c28 	.word	0x08012c28
 800128c:	08012c34 	.word	0x08012c34
 8001290:	08012c40 	.word	0x08012c40
 8001294:	08012c48 	.word	0x08012c48
 8001298:	08012c68 	.word	0x08012c68
 800129c:	08012c6c 	.word	0x08012c6c
 80012a0:	08012c54 	.word	0x08012c54
 80012a4:	20000e9c 	.word	0x20000e9c
 80012a8:	20000f8c 	.word	0x20000f8c
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00c fc7b 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00c fc6d 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00c fc5f 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00c fc51 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484d      	ldr	r0, [pc, #308]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001332:	f00c fde7 	bl	800df04 <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4847      	ldr	r0, [pc, #284]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800134e:	f00c fdd9 	bl	800df04 <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f004 fc6a 	bl	8005c2c <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, SYNC_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00c fc09 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00c fbfb 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00c fbed 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00c fbdf 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00c fbd1 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00c fbc3 	bl	800dbbc <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, SYNC_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 800144e:	f00c fd59 	bl	800df04 <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}



}
 8001454:	bf00      	nop
 8001456:	376c      	adds	r7, #108	; 0x6c
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000cbc 	.word	0x20000cbc
 8001460:	20000dac 	.word	0x20000dac
 8001464:	2000107c 	.word	0x2000107c
 8001468:	08012c5c 	.word	0x08012c5c
 800146c:	08012c60 	.word	0x08012c60
 8001470:	20000e9c 	.word	0x20000e9c
 8001474:	20000f8c 	.word	0x20000f8c

08001478 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <DM_RefreshScreen+0x88>)
 8001480:	f00a fc26 	bl	800bcd0 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001484:	2000      	movs	r0, #0
 8001486:	f00c ffbd 	bl	800e404 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800148a:	2300      	movs	r3, #0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2302      	movs	r3, #2
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2328      	movs	r3, #40	; 0x28
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	2000      	movs	r0, #0
 80014a0:	f00c fbcd 	bl	800dc3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	2250      	movs	r2, #80	; 0x50
 80014b6:	21c8      	movs	r1, #200	; 0xc8
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f00c fbc0 	bl	800dc3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2328      	movs	r3, #40	; 0x28
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	20a0      	movs	r0, #160	; 0xa0
 80014d4:	f00c fbb3 	bl	800dc3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	21c8      	movs	r1, #200	; 0xc8
 80014ec:	20f0      	movs	r0, #240	; 0xf0
 80014ee:	f00c fba6 	bl	800dc3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <DM_RefreshScreen+0x88>)
 80014f4:	f00a fbb6 	bl	800bc64 <HAL_TIM_Base_Start_IT>


}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200027cc 	.word	0x200027cc

08001504 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <DM_SetErrorDebugMsg+0x1c>)
 8001510:	212d      	movs	r1, #45	; 0x2d
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <DM_SetErrorDebugMsg+0x20>)
 8001514:	f00e f89a 	bl	800f64c <sniprintf>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08012cec 	.word	0x08012cec
 8001524:	20001e9c 	.word	0x20001e9c

08001528 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3b01      	subs	r3, #1
 8001536:	2b03      	cmp	r3, #3
 8001538:	d816      	bhi.n	8001568 <FreqMenu_DrawMenu+0x40>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <FreqMenu_DrawMenu+0x18>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001557 	.word	0x08001557
 8001548:	0800155d 	.word	0x0800155d
 800154c:	08001563 	.word	0x08001563
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001550:	f000 f810 	bl	8001574 <FreqMenu_DrawMainMenu>
			break;
 8001554:	e009      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001556:	f000 f849 	bl	80015ec <FreqMenu_DrawPresetMenu>
			break;
 800155a:	e006      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800155c:	f001 faf4 	bl	8002b48 <FreqMenu_DrawAdjustMenu>
			break;
 8001560:	e003      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001562:	f001 fb07 	bl	8002b74 <FreqMenu_DrawSweepMenu>
			break;
 8001566:	e000      	b.n	800156a <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001568:	bf00      	nop

	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	220a      	movs	r2, #10
 8001588:	2105      	movs	r1, #5
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <FreqMenu_DrawMainMenu+0x68>)
 800158c:	f00c fcba 	bl	800df04 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001590:	f7ff fcb2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001594:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2302      	movs	r3, #2
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	22d2      	movs	r2, #210	; 0xd2
 80015a2:	2105      	movs	r1, #5
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <FreqMenu_DrawMainMenu+0x6c>)
 80015a6:	f00c fcad 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015aa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	22d2      	movs	r2, #210	; 0xd2
 80015b8:	2157      	movs	r1, #87	; 0x57
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <FreqMenu_DrawMainMenu+0x70>)
 80015bc:	f00c fca2 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2302      	movs	r3, #2
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	22d2      	movs	r2, #210	; 0xd2
 80015ce:	21ae      	movs	r1, #174	; 0xae
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <FreqMenu_DrawMainMenu+0x74>)
 80015d2:	f00c fc97 	bl	800df04 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08012cf0 	.word	0x08012cf0
 80015e0:	08012cfc 	.word	0x08012cfc
 80015e4:	08012d04 	.word	0x08012d04
 80015e8:	08012d0c 	.word	0x08012d0c

080015ec <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	220a      	movs	r2, #10
 8001600:	2105      	movs	r1, #5
 8001602:	4886      	ldr	r0, [pc, #536]	; (800181c <FreqMenu_DrawPresetMenu+0x230>)
 8001604:	f00c fc7e 	bl	800df04 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001608:	2328      	movs	r3, #40	; 0x28
 800160a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 800160c:	233c      	movs	r3, #60	; 0x3c
 800160e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001618:	2378      	movs	r3, #120	; 0x78
 800161a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 800161c:	238c      	movs	r3, #140	; 0x8c
 800161e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001624:	f003 feae 	bl	8005384 <FreqO_GetFPresetObject>
 8001628:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f001 825d 	beq.w	8002aec <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 22ee 	movw	r2, #750	; 0x2ee
 800163a:	4293      	cmp	r3, r2
 800163c:	f000 849a 	beq.w	8001f74 <FreqMenu_DrawPresetMenu+0x988>
 8001640:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001644:	4293      	cmp	r3, r2
 8001646:	d817      	bhi.n	8001678 <FreqMenu_DrawPresetMenu+0x8c>
 8001648:	2b32      	cmp	r3, #50	; 0x32
 800164a:	f000 81b3 	beq.w	80019b4 <FreqMenu_DrawPresetMenu+0x3c8>
 800164e:	2b32      	cmp	r3, #50	; 0x32
 8001650:	d806      	bhi.n	8001660 <FreqMenu_DrawPresetMenu+0x74>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d038      	beq.n	80016c8 <FreqMenu_DrawPresetMenu+0xdc>
 8001656:	2b0a      	cmp	r3, #10
 8001658:	f000 8102 	beq.w	8001860 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 800165c:	f001 ba52 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001660:	2bfa      	cmp	r3, #250	; 0xfa
 8001662:	f000 8317 	beq.w	8001c94 <FreqMenu_DrawPresetMenu+0x6a8>
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	f000 83d9 	beq.w	8001e20 <FreqMenu_DrawPresetMenu+0x834>
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	f000 8266 	beq.w	8001b40 <FreqMenu_DrawPresetMenu+0x554>
}
 8001674:	f001 ba46 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001678:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8758 	beq.w	8002532 <FreqMenu_DrawPresetMenu+0xf46>
 8001682:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001686:	4293      	cmp	r3, r2
 8001688:	d80f      	bhi.n	80016aa <FreqMenu_DrawPresetMenu+0xbe>
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	f000 85e0 	beq.w	8002254 <FreqMenu_DrawPresetMenu+0xc68>
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	4293      	cmp	r3, r2
 800169a:	f000 86a1 	beq.w	80023e0 <FreqMenu_DrawPresetMenu+0xdf4>
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	f000 852d 	beq.w	8002100 <FreqMenu_DrawPresetMenu+0xb14>
}
 80016a6:	f001 ba2d 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <FreqMenu_DrawPresetMenu+0x234>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f001 80ae 	beq.w	800280e <FreqMenu_DrawPresetMenu+0x1222>
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <FreqMenu_DrawPresetMenu+0x238>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f001 816f 	beq.w	8002998 <FreqMenu_DrawPresetMenu+0x13ac>
 80016ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 87fc 	beq.w	80026bc <FreqMenu_DrawPresetMenu+0x10d0>
}
 80016c4:	f001 ba1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	4853      	ldr	r0, [pc, #332]	; (8001828 <FreqMenu_DrawPresetMenu+0x23c>)
 80016dc:	f00c fc12 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2302      	movs	r3, #2
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f0:	2105      	movs	r1, #5
 80016f2:	484e      	ldr	r0, [pc, #312]	; (800182c <FreqMenu_DrawPresetMenu+0x240>)
 80016f4:	f00c fc06 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001708:	2105      	movs	r1, #5
 800170a:	4849      	ldr	r0, [pc, #292]	; (8001830 <FreqMenu_DrawPresetMenu+0x244>)
 800170c:	f00c fbfa 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	b29a      	uxth	r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	2105      	movs	r1, #5
 8001722:	4844      	ldr	r0, [pc, #272]	; (8001834 <FreqMenu_DrawPresetMenu+0x248>)
 8001724:	f00c fbee 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2300      	movs	r3, #0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2302      	movs	r3, #2
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001738:	2105      	movs	r1, #5
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <FreqMenu_DrawPresetMenu+0x24c>)
 800173c:	f00c fbe2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001750:	2105      	movs	r1, #5
 8001752:	483a      	ldr	r0, [pc, #232]	; (800183c <FreqMenu_DrawPresetMenu+0x250>)
 8001754:	f00c fbd6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b29a      	uxth	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2302      	movs	r3, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001768:	2105      	movs	r1, #5
 800176a:	4835      	ldr	r0, [pc, #212]	; (8001840 <FreqMenu_DrawPresetMenu+0x254>)
 800176c:	f00c fbca 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <FreqMenu_DrawPresetMenu+0x258>)
 8001784:	f00c fbbe 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	b29a      	uxth	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2302      	movs	r3, #2
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <FreqMenu_DrawPresetMenu+0x25c>)
 800179c:	f00c fbb2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2302      	movs	r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b0:	2178      	movs	r1, #120	; 0x78
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <FreqMenu_DrawPresetMenu+0x260>)
 80017b4:	f00c fba6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c8:	2178      	movs	r1, #120	; 0x78
 80017ca:	4821      	ldr	r0, [pc, #132]	; (8001850 <FreqMenu_DrawPresetMenu+0x264>)
 80017cc:	f00c fb9a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e0:	2178      	movs	r1, #120	; 0x78
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <FreqMenu_DrawPresetMenu+0x268>)
 80017e4:	f00c fb8e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e8:	7abb      	ldrb	r3, [r7, #10]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	4817      	ldr	r0, [pc, #92]	; (8001858 <FreqMenu_DrawPresetMenu+0x26c>)
 80017fc:	f00c fb82 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001800:	7a7b      	ldrb	r3, [r7, #9]
 8001802:	b29a      	uxth	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001810:	2178      	movs	r1, #120	; 0x78
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <FreqMenu_DrawPresetMenu+0x270>)
 8001814:	f00c fb76 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8001818:	f001 b974 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 800181c:	08012d14 	.word	0x08012d14
 8001820:	000124f8 	.word	0x000124f8
 8001824:	000186a0 	.word	0x000186a0
 8001828:	08012d28 	.word	0x08012d28
 800182c:	08012d30 	.word	0x08012d30
 8001830:	08012d38 	.word	0x08012d38
 8001834:	08012d40 	.word	0x08012d40
 8001838:	08012d48 	.word	0x08012d48
 800183c:	08012d50 	.word	0x08012d50
 8001840:	08012d58 	.word	0x08012d58
 8001844:	08012d60 	.word	0x08012d60
 8001848:	08012d68 	.word	0x08012d68
 800184c:	08012d70 	.word	0x08012d70
 8001850:	08012d78 	.word	0x08012d78
 8001854:	08012d80 	.word	0x08012d80
 8001858:	08012d88 	.word	0x08012d88
 800185c:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	b29a      	uxth	r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001870:	2105      	movs	r1, #5
 8001872:	48a5      	ldr	r0, [pc, #660]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 8001874:	f00c fb46 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2105      	movs	r1, #5
 800188a:	48a0      	ldr	r0, [pc, #640]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 800188c:	f00c fb3a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	b29a      	uxth	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a0:	2105      	movs	r1, #5
 80018a2:	489b      	ldr	r0, [pc, #620]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80018a4:	f00c fb2e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a8:	7b3b      	ldrb	r3, [r7, #12]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b8:	2105      	movs	r1, #5
 80018ba:	4896      	ldr	r0, [pc, #600]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 80018bc:	f00c fb22 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d0:	2105      	movs	r1, #5
 80018d2:	4891      	ldr	r0, [pc, #580]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 80018d4:	f00c fb16 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d8:	7abb      	ldrb	r3, [r7, #10]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e8:	2105      	movs	r1, #5
 80018ea:	488c      	ldr	r0, [pc, #560]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 80018ec:	f00c fb0a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001900:	2105      	movs	r1, #5
 8001902:	4887      	ldr	r0, [pc, #540]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001904:	f00c fafe 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b29a      	uxth	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001918:	2178      	movs	r1, #120	; 0x78
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 800191c:	f00c faf2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	487d      	ldr	r0, [pc, #500]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001934:	f00c fae6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	b29a      	uxth	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001948:	2178      	movs	r1, #120	; 0x78
 800194a:	4878      	ldr	r0, [pc, #480]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 800194c:	f00c fada 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	b29a      	uxth	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001960:	2178      	movs	r1, #120	; 0x78
 8001962:	4873      	ldr	r0, [pc, #460]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001964:	f00c face 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	b29a      	uxth	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001978:	2178      	movs	r1, #120	; 0x78
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 800197c:	f00c fac2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001980:	7abb      	ldrb	r3, [r7, #10]
 8001982:	b29a      	uxth	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001990:	2178      	movs	r1, #120	; 0x78
 8001992:	4869      	ldr	r0, [pc, #420]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001994:	f00c fab6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	4864      	ldr	r0, [pc, #400]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 80019ac:	f00c faaa 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80019b0:	f001 b8a8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2105      	movs	r1, #5
 80019c6:	4850      	ldr	r0, [pc, #320]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 80019c8:	f00c fa9c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2105      	movs	r1, #5
 80019de:	484b      	ldr	r0, [pc, #300]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 80019e0:	f00c fa90 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	4846      	ldr	r0, [pc, #280]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80019f8:	f00c fa84 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	4841      	ldr	r0, [pc, #260]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 8001a10:	f00c fa78 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2105      	movs	r1, #5
 8001a26:	483c      	ldr	r0, [pc, #240]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a28:	f00c fa6c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	4837      	ldr	r0, [pc, #220]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 8001a40:	f00c fa60 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a54:	2105      	movs	r1, #5
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001a58:	f00c fa54 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2302      	movs	r3, #2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a6c:	2178      	movs	r1, #120	; 0x78
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 8001a70:	f00c fa48 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a88:	f00c fa3c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 8001aa0:	f00c fa30 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa4:	7b3b      	ldrb	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2302      	movs	r3, #2
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab4:	2178      	movs	r1, #120	; 0x78
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001ab8:	f00c fa24 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001acc:	2178      	movs	r1, #120	; 0x78
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 8001ad0:	f00c fa18 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad4:	7abb      	ldrb	r3, [r7, #10]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ae8:	f00c fa0c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2302      	movs	r3, #2
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 8001b00:	f00c fa00 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8001b04:	f000 bffe 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001b08:	08012d28 	.word	0x08012d28
 8001b0c:	08012d30 	.word	0x08012d30
 8001b10:	08012d38 	.word	0x08012d38
 8001b14:	08012d40 	.word	0x08012d40
 8001b18:	08012d48 	.word	0x08012d48
 8001b1c:	08012d50 	.word	0x08012d50
 8001b20:	08012d58 	.word	0x08012d58
 8001b24:	08012d60 	.word	0x08012d60
 8001b28:	08012d68 	.word	0x08012d68
 8001b2c:	08012d70 	.word	0x08012d70
 8001b30:	08012d78 	.word	0x08012d78
 8001b34:	08012d80 	.word	0x08012d80
 8001b38:	08012d88 	.word	0x08012d88
 8001b3c:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2105      	movs	r1, #5
 8001b52:	48a5      	ldr	r0, [pc, #660]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b54:	f00c f9d6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	48a0      	ldr	r0, [pc, #640]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001b6c:	f00c f9ca 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2105      	movs	r1, #5
 8001b82:	489b      	ldr	r0, [pc, #620]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001b84:	f00c f9be 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001b9c:	f00c f9b2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4891      	ldr	r0, [pc, #580]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bb4:	f00c f9a6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	488c      	ldr	r0, [pc, #560]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001bcc:	f00c f99a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd0:	7a7b      	ldrb	r3, [r7, #9]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be0:	2105      	movs	r1, #5
 8001be2:	4887      	ldr	r0, [pc, #540]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001be4:	f00c f98e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2178      	movs	r1, #120	; 0x78
 8001bfa:	4882      	ldr	r0, [pc, #520]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001bfc:	f00c f982 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c10:	2178      	movs	r1, #120	; 0x78
 8001c12:	487d      	ldr	r0, [pc, #500]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c14:	f00c f976 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2178      	movs	r1, #120	; 0x78
 8001c2a:	4878      	ldr	r0, [pc, #480]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001c2c:	f00c f96a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001c44:	f00c f95e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	486e      	ldr	r0, [pc, #440]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001c5c:	f00c f952 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2178      	movs	r1, #120	; 0x78
 8001c72:	4869      	ldr	r0, [pc, #420]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c74:	f00c f946 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c88:	2178      	movs	r1, #120	; 0x78
 8001c8a:	4864      	ldr	r0, [pc, #400]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001c8c:	f00c f93a 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8001c90:	f000 bf38 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4850      	ldr	r0, [pc, #320]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ca8:	f00c f92c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001cc0:	f00c f920 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	4846      	ldr	r0, [pc, #280]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001cd8:	f00c f914 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2105      	movs	r1, #5
 8001cee:	4841      	ldr	r0, [pc, #260]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001cf0:	f00c f908 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	483c      	ldr	r0, [pc, #240]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d08:	f00c f8fc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d0c:	7abb      	ldrb	r3, [r7, #10]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001d20:	f00c f8f0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d34:	2105      	movs	r1, #5
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001d38:	f00c f8e4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2178      	movs	r1, #120	; 0x78
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001d50:	f00c f8d8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d68:	f00c f8cc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2302      	movs	r3, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001d80:	f00c f8c0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	481e      	ldr	r0, [pc, #120]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001d98:	f00c f8b4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dac:	2178      	movs	r1, #120	; 0x78
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001db0:	f00c f8a8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001dc8:	f00c f89c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ddc:	2178      	movs	r1, #120	; 0x78
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001de0:	f00c f890 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8001de4:	f000 be8e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001de8:	08012d28 	.word	0x08012d28
 8001dec:	08012d30 	.word	0x08012d30
 8001df0:	08012d38 	.word	0x08012d38
 8001df4:	08012d40 	.word	0x08012d40
 8001df8:	08012d48 	.word	0x08012d48
 8001dfc:	08012d50 	.word	0x08012d50
 8001e00:	08012d58 	.word	0x08012d58
 8001e04:	08012d60 	.word	0x08012d60
 8001e08:	08012d68 	.word	0x08012d68
 8001e0c:	08012d70 	.word	0x08012d70
 8001e10:	08012d78 	.word	0x08012d78
 8001e14:	08012d80 	.word	0x08012d80
 8001e18:	08012d88 	.word	0x08012d88
 8001e1c:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e30:	2105      	movs	r1, #5
 8001e32:	48a5      	ldr	r0, [pc, #660]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e34:	f00c f866 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	48a0      	ldr	r0, [pc, #640]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001e4c:	f00c f85a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2302      	movs	r3, #2
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e60:	2105      	movs	r1, #5
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001e64:	f00c f84e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2302      	movs	r3, #2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e7c:	f00c f842 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e90:	2105      	movs	r1, #5
 8001e92:	4891      	ldr	r0, [pc, #580]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e94:	f00c f836 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e98:	7abb      	ldrb	r3, [r7, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	488c      	ldr	r0, [pc, #560]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8001eac:	f00c f82a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	4887      	ldr	r0, [pc, #540]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001ec4:	f00c f81e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed8:	2178      	movs	r1, #120	; 0x78
 8001eda:	4882      	ldr	r0, [pc, #520]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001edc:	f00c f812 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef0:	2178      	movs	r1, #120	; 0x78
 8001ef2:	487d      	ldr	r0, [pc, #500]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8001ef4:	f00c f806 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2302      	movs	r3, #2
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f08:	2178      	movs	r1, #120	; 0x78
 8001f0a:	4878      	ldr	r0, [pc, #480]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8001f0c:	f00b fffa 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f20:	2178      	movs	r1, #120	; 0x78
 8001f22:	4873      	ldr	r0, [pc, #460]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8001f24:	f00b ffee 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2302      	movs	r3, #2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f3c:	f00b ffe2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f50:	2178      	movs	r1, #120	; 0x78
 8001f52:	4869      	ldr	r0, [pc, #420]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f54:	f00b ffd6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f68:	2178      	movs	r1, #120	; 0x78
 8001f6a:	4864      	ldr	r0, [pc, #400]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 8001f6c:	f00b ffca 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8001f70:	f000 bdc8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2105      	movs	r1, #5
 8001f86:	4850      	ldr	r0, [pc, #320]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001f88:	f00b ffbc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	484b      	ldr	r0, [pc, #300]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001fa0:	f00b ffb0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4846      	ldr	r0, [pc, #280]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001fb8:	f00b ffa4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4841      	ldr	r0, [pc, #260]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001fd0:	f00b ff98 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	483c      	ldr	r0, [pc, #240]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fe8:	f00b ff8c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	4837      	ldr	r0, [pc, #220]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8002000:	f00b ff80 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002004:	7a7b      	ldrb	r3, [r7, #9]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2302      	movs	r3, #2
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	2105      	movs	r1, #5
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002018:	f00b ff74 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2178      	movs	r1, #120	; 0x78
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002030:	f00b ff68 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4828      	ldr	r0, [pc, #160]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8002048:	f00b ff5c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7b7b      	ldrb	r3, [r7, #13]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8002060:	f00b ff50 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	481e      	ldr	r0, [pc, #120]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8002078:	f00b ff44 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	b29a      	uxth	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2302      	movs	r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800208c:	2178      	movs	r1, #120	; 0x78
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8002090:	f00b ff38 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b29a      	uxth	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2302      	movs	r3, #2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a4:	2178      	movs	r1, #120	; 0x78
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020a8:	f00b ff2c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020bc:	2178      	movs	r1, #120	; 0x78
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 80020c0:	f00b ff20 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80020c4:	f000 bd1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80020c8:	08012d28 	.word	0x08012d28
 80020cc:	08012d30 	.word	0x08012d30
 80020d0:	08012d38 	.word	0x08012d38
 80020d4:	08012d40 	.word	0x08012d40
 80020d8:	08012d48 	.word	0x08012d48
 80020dc:	08012d50 	.word	0x08012d50
 80020e0:	08012d58 	.word	0x08012d58
 80020e4:	08012d60 	.word	0x08012d60
 80020e8:	08012d68 	.word	0x08012d68
 80020ec:	08012d70 	.word	0x08012d70
 80020f0:	08012d78 	.word	0x08012d78
 80020f4:	08012d80 	.word	0x08012d80
 80020f8:	08012d88 	.word	0x08012d88
 80020fc:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2302      	movs	r3, #2
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002110:	2105      	movs	r1, #5
 8002112:	48a5      	ldr	r0, [pc, #660]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002114:	f00b fef6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002128:	2105      	movs	r1, #5
 800212a:	48a0      	ldr	r0, [pc, #640]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 800212c:	f00b feea 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002130:	7b7b      	ldrb	r3, [r7, #13]
 8002132:	b29a      	uxth	r2, r3
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2302      	movs	r3, #2
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002140:	2105      	movs	r1, #5
 8002142:	489b      	ldr	r0, [pc, #620]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002144:	f00b fede 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	b29a      	uxth	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2302      	movs	r3, #2
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002158:	2105      	movs	r1, #5
 800215a:	4896      	ldr	r0, [pc, #600]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 800215c:	f00b fed2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2302      	movs	r3, #2
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002170:	2105      	movs	r1, #5
 8002172:	4891      	ldr	r0, [pc, #580]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002174:	f00b fec6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002178:	7abb      	ldrb	r3, [r7, #10]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2302      	movs	r3, #2
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002188:	2105      	movs	r1, #5
 800218a:	488c      	ldr	r0, [pc, #560]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 800218c:	f00b feba 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002190:	7a7b      	ldrb	r3, [r7, #9]
 8002192:	b29a      	uxth	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2302      	movs	r3, #2
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a0:	2105      	movs	r1, #5
 80021a2:	4887      	ldr	r0, [pc, #540]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80021a4:	f00b feae 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2302      	movs	r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	2178      	movs	r1, #120	; 0x78
 80021ba:	4882      	ldr	r0, [pc, #520]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021bc:	f00b fea2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d0:	2178      	movs	r1, #120	; 0x78
 80021d2:	487d      	ldr	r0, [pc, #500]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 80021d4:	f00b fe96 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d8:	7b7b      	ldrb	r3, [r7, #13]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e8:	2178      	movs	r1, #120	; 0x78
 80021ea:	4878      	ldr	r0, [pc, #480]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 80021ec:	f00b fe8a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f0:	7b3b      	ldrb	r3, [r7, #12]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002200:	2178      	movs	r1, #120	; 0x78
 8002202:	4873      	ldr	r0, [pc, #460]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002204:	f00b fe7e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b29a      	uxth	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2302      	movs	r3, #2
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002218:	2178      	movs	r1, #120	; 0x78
 800221a:	486e      	ldr	r0, [pc, #440]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 800221c:	f00b fe72 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2302      	movs	r3, #2
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002230:	2178      	movs	r1, #120	; 0x78
 8002232:	4869      	ldr	r0, [pc, #420]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002234:	f00b fe66 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002238:	7a7b      	ldrb	r3, [r7, #9]
 800223a:	b29a      	uxth	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2302      	movs	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002248:	2178      	movs	r1, #120	; 0x78
 800224a:	4864      	ldr	r0, [pc, #400]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 800224c:	f00b fe5a 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8002250:	f000 bc58 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2105      	movs	r1, #5
 8002266:	4850      	ldr	r0, [pc, #320]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002268:	f00b fe4c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2105      	movs	r1, #5
 800227e:	484b      	ldr	r0, [pc, #300]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 8002280:	f00b fe40 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2105      	movs	r1, #5
 8002296:	4846      	ldr	r0, [pc, #280]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002298:	f00b fe34 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7b3b      	ldrb	r3, [r7, #12]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2105      	movs	r1, #5
 80022ae:	4841      	ldr	r0, [pc, #260]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022b0:	f00b fe28 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2105      	movs	r1, #5
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80022c8:	f00b fe1c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022dc:	2105      	movs	r1, #5
 80022de:	4837      	ldr	r0, [pc, #220]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 80022e0:	f00b fe10 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f4:	2105      	movs	r1, #5
 80022f6:	4832      	ldr	r0, [pc, #200]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022f8:	f00b fe04 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2178      	movs	r1, #120	; 0x78
 800230e:	482d      	ldr	r0, [pc, #180]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002310:	f00b fdf8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4828      	ldr	r0, [pc, #160]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002328:	f00b fdec 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4823      	ldr	r0, [pc, #140]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 8002340:	f00b fde0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7b3b      	ldrb	r3, [r7, #12]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002358:	f00b fdd4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 8002370:	f00b fdc8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2302      	movs	r3, #2
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	4814      	ldr	r0, [pc, #80]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002388:	f00b fdbc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b29a      	uxth	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2302      	movs	r3, #2
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 80023a0:	f00b fdb0 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80023a4:	e3ae      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80023a6:	bf00      	nop
 80023a8:	08012d28 	.word	0x08012d28
 80023ac:	08012d30 	.word	0x08012d30
 80023b0:	08012d38 	.word	0x08012d38
 80023b4:	08012d40 	.word	0x08012d40
 80023b8:	08012d48 	.word	0x08012d48
 80023bc:	08012d50 	.word	0x08012d50
 80023c0:	08012d58 	.word	0x08012d58
 80023c4:	08012d60 	.word	0x08012d60
 80023c8:	08012d68 	.word	0x08012d68
 80023cc:	08012d70 	.word	0x08012d70
 80023d0:	08012d78 	.word	0x08012d78
 80023d4:	08012d80 	.word	0x08012d80
 80023d8:	08012d88 	.word	0x08012d88
 80023dc:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f0:	2105      	movs	r1, #5
 80023f2:	48a4      	ldr	r0, [pc, #656]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 80023f4:	f00b fd86 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2302      	movs	r3, #2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002408:	2105      	movs	r1, #5
 800240a:	489f      	ldr	r0, [pc, #636]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800240c:	f00b fd7a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	b29a      	uxth	r2, r3
 8002414:	2300      	movs	r3, #0
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2302      	movs	r3, #2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002420:	2105      	movs	r1, #5
 8002422:	489a      	ldr	r0, [pc, #616]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002424:	f00b fd6e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	b29a      	uxth	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2302      	movs	r3, #2
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002438:	2105      	movs	r1, #5
 800243a:	4895      	ldr	r0, [pc, #596]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800243c:	f00b fd62 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	b29a      	uxth	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2302      	movs	r3, #2
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002450:	2105      	movs	r1, #5
 8002452:	4890      	ldr	r0, [pc, #576]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002454:	f00b fd56 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002458:	7abb      	ldrb	r3, [r7, #10]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002468:	2105      	movs	r1, #5
 800246a:	488b      	ldr	r0, [pc, #556]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 800246c:	f00b fd4a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	b29a      	uxth	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2302      	movs	r3, #2
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002480:	2105      	movs	r1, #5
 8002482:	4886      	ldr	r0, [pc, #536]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 8002484:	f00b fd3e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	b29a      	uxth	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002498:	2178      	movs	r1, #120	; 0x78
 800249a:	4881      	ldr	r0, [pc, #516]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800249c:	f00b fd32 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	487c      	ldr	r0, [pc, #496]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024b4:	f00b fd26 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2302      	movs	r3, #2
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2300      	movs	r3, #0
 80024c8:	2178      	movs	r1, #120	; 0x78
 80024ca:	4877      	ldr	r0, [pc, #476]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80024cc:	f00b fd1a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d0:	7b3b      	ldrb	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e0:	2178      	movs	r1, #120	; 0x78
 80024e2:	4872      	ldr	r0, [pc, #456]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 80024e4:	f00b fd0e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f8:	2178      	movs	r1, #120	; 0x78
 80024fa:	486d      	ldr	r0, [pc, #436]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 80024fc:	f00b fd02 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002510:	2178      	movs	r1, #120	; 0x78
 8002512:	4868      	ldr	r0, [pc, #416]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002514:	f00b fcf6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002528:	2178      	movs	r1, #120	; 0x78
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800252c:	f00b fcea 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8002530:	e2e8      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b29a      	uxth	r2, r3
 8002536:	2300      	movs	r3, #0
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2302      	movs	r3, #2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002542:	2105      	movs	r1, #5
 8002544:	484f      	ldr	r0, [pc, #316]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 8002546:	f00b fcdd 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b29a      	uxth	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2302      	movs	r3, #2
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255a:	2105      	movs	r1, #5
 800255c:	484a      	ldr	r0, [pc, #296]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800255e:	f00b fcd1 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	b29a      	uxth	r2, r3
 8002566:	2300      	movs	r3, #0
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2302      	movs	r3, #2
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002572:	2105      	movs	r1, #5
 8002574:	4845      	ldr	r0, [pc, #276]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002576:	f00b fcc5 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	b29a      	uxth	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2302      	movs	r3, #2
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258a:	2105      	movs	r1, #5
 800258c:	4840      	ldr	r0, [pc, #256]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800258e:	f00b fcb9 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	b29a      	uxth	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a2:	2105      	movs	r1, #5
 80025a4:	483b      	ldr	r0, [pc, #236]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025a6:	f00b fcad 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025aa:	7abb      	ldrb	r3, [r7, #10]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ba:	2105      	movs	r1, #5
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025be:	f00b fca1 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c2:	7a7b      	ldrb	r3, [r7, #9]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d2:	2105      	movs	r1, #5
 80025d4:	4831      	ldr	r0, [pc, #196]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 80025d6:	f00b fc95 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ea:	2178      	movs	r1, #120	; 0x78
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025ee:	f00b fc89 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002602:	2178      	movs	r1, #120	; 0x78
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002606:	f00b fc7d 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	b29a      	uxth	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261a:	2178      	movs	r1, #120	; 0x78
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800261e:	f00b fc71 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	2178      	movs	r1, #120	; 0x78
 8002634:	481d      	ldr	r0, [pc, #116]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 8002636:	f00b fc65 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	b29a      	uxth	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264a:	2178      	movs	r1, #120	; 0x78
 800264c:	4818      	ldr	r0, [pc, #96]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800264e:	f00b fc59 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002652:	7abb      	ldrb	r3, [r7, #10]
 8002654:	b29a      	uxth	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002666:	f00b fc4d 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266a:	7a7b      	ldrb	r3, [r7, #9]
 800266c:	b29a      	uxth	r2, r3
 800266e:	2300      	movs	r3, #0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267a:	2178      	movs	r1, #120	; 0x78
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800267e:	f00b fc41 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8002682:	e23f      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002684:	08012d28 	.word	0x08012d28
 8002688:	08012d30 	.word	0x08012d30
 800268c:	08012d38 	.word	0x08012d38
 8002690:	08012d40 	.word	0x08012d40
 8002694:	08012d48 	.word	0x08012d48
 8002698:	08012d50 	.word	0x08012d50
 800269c:	08012d58 	.word	0x08012d58
 80026a0:	08012d60 	.word	0x08012d60
 80026a4:	08012d68 	.word	0x08012d68
 80026a8:	08012d70 	.word	0x08012d70
 80026ac:	08012d78 	.word	0x08012d78
 80026b0:	08012d80 	.word	0x08012d80
 80026b4:	08012d88 	.word	0x08012d88
 80026b8:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026cc:	2105      	movs	r1, #5
 80026ce:	48a4      	ldr	r0, [pc, #656]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 80026d0:	f00b fc18 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2302      	movs	r3, #2
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e4:	2105      	movs	r1, #5
 80026e6:	489f      	ldr	r0, [pc, #636]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 80026e8:	f00b fc0c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2302      	movs	r3, #2
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026fc:	2105      	movs	r1, #5
 80026fe:	489a      	ldr	r0, [pc, #616]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002700:	f00b fc00 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	b29a      	uxth	r2, r3
 8002708:	2300      	movs	r3, #0
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2302      	movs	r3, #2
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002714:	2105      	movs	r1, #5
 8002716:	4895      	ldr	r0, [pc, #596]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 8002718:	f00b fbf4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	b29a      	uxth	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2302      	movs	r3, #2
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800272c:	2105      	movs	r1, #5
 800272e:	4890      	ldr	r0, [pc, #576]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002730:	f00b fbe8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	b29a      	uxth	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2302      	movs	r3, #2
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002744:	2105      	movs	r1, #5
 8002746:	488b      	ldr	r0, [pc, #556]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 8002748:	f00b fbdc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800274c:	7a7b      	ldrb	r3, [r7, #9]
 800274e:	b29a      	uxth	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2302      	movs	r3, #2
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800275c:	2105      	movs	r1, #5
 800275e:	4886      	ldr	r0, [pc, #536]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 8002760:	f00b fbd0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b29a      	uxth	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2302      	movs	r3, #2
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002774:	2178      	movs	r1, #120	; 0x78
 8002776:	4881      	ldr	r0, [pc, #516]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 8002778:	f00b fbc4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29a      	uxth	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2302      	movs	r3, #2
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800278c:	2178      	movs	r1, #120	; 0x78
 800278e:	487c      	ldr	r0, [pc, #496]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 8002790:	f00b fbb8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	b29a      	uxth	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	2302      	movs	r3, #2
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a4:	2178      	movs	r1, #120	; 0x78
 80027a6:	4877      	ldr	r0, [pc, #476]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80027a8:	f00b fbac 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2302      	movs	r3, #2
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027bc:	2178      	movs	r1, #120	; 0x78
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 80027c0:	f00b fba0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2302      	movs	r3, #2
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2178      	movs	r1, #120	; 0x78
 80027d6:	486d      	ldr	r0, [pc, #436]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 80027d8:	f00b fb94 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	2302      	movs	r3, #2
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ec:	2178      	movs	r1, #120	; 0x78
 80027ee:	4868      	ldr	r0, [pc, #416]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 80027f0:	f00b fb88 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f4:	7a7b      	ldrb	r3, [r7, #9]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002804:	2178      	movs	r1, #120	; 0x78
 8002806:	4863      	ldr	r0, [pc, #396]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002808:	f00b fb7c 	bl	800df04 <ILI9341_Draw_Text>
			break;
 800280c:	e17a      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b29a      	uxth	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2302      	movs	r3, #2
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800281e:	2105      	movs	r1, #5
 8002820:	484f      	ldr	r0, [pc, #316]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 8002822:	f00b fb6f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	b29a      	uxth	r2, r3
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2302      	movs	r3, #2
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002836:	2105      	movs	r1, #5
 8002838:	484a      	ldr	r0, [pc, #296]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 800283a:	f00b fb63 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800283e:	7b7b      	ldrb	r3, [r7, #13]
 8002840:	b29a      	uxth	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2302      	movs	r3, #2
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800284e:	2105      	movs	r1, #5
 8002850:	4845      	ldr	r0, [pc, #276]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002852:	f00b fb57 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2302      	movs	r3, #2
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002866:	2105      	movs	r1, #5
 8002868:	4840      	ldr	r0, [pc, #256]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 800286a:	f00b fb4b 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	b29a      	uxth	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2302      	movs	r3, #2
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800287e:	2105      	movs	r1, #5
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002882:	f00b fb3f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002886:	7abb      	ldrb	r3, [r7, #10]
 8002888:	b29a      	uxth	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2302      	movs	r3, #2
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002896:	2105      	movs	r1, #5
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 800289a:	f00b fb33 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800289e:	7a7b      	ldrb	r3, [r7, #9]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ae:	2105      	movs	r1, #5
 80028b0:	4831      	ldr	r0, [pc, #196]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 80028b2:	f00b fb27 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2302      	movs	r3, #2
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c6:	2178      	movs	r1, #120	; 0x78
 80028c8:	482c      	ldr	r0, [pc, #176]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 80028ca:	f00b fb1b 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028de:	2178      	movs	r1, #120	; 0x78
 80028e0:	4827      	ldr	r0, [pc, #156]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 80028e2:	f00b fb0f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e6:	7b7b      	ldrb	r3, [r7, #13]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2302      	movs	r3, #2
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f6:	2178      	movs	r1, #120	; 0x78
 80028f8:	4822      	ldr	r0, [pc, #136]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80028fa:	f00b fb03 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800290e:	2178      	movs	r1, #120	; 0x78
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 8002912:	f00b faf7 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	b29a      	uxth	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002926:	2178      	movs	r1, #120	; 0x78
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 800292a:	f00b faeb 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	b29a      	uxth	r2, r3
 8002932:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	2178      	movs	r1, #120	; 0x78
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002942:	f00b fadf 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002956:	2178      	movs	r1, #120	; 0x78
 8002958:	480e      	ldr	r0, [pc, #56]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 800295a:	f00b fad3 	bl	800df04 <ILI9341_Draw_Text>
			break;
 800295e:	e0d1      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002960:	08012d28 	.word	0x08012d28
 8002964:	08012d30 	.word	0x08012d30
 8002968:	08012d38 	.word	0x08012d38
 800296c:	08012d40 	.word	0x08012d40
 8002970:	08012d48 	.word	0x08012d48
 8002974:	08012d50 	.word	0x08012d50
 8002978:	08012d58 	.word	0x08012d58
 800297c:	08012d60 	.word	0x08012d60
 8002980:	08012d68 	.word	0x08012d68
 8002984:	08012d70 	.word	0x08012d70
 8002988:	08012d78 	.word	0x08012d78
 800298c:	08012d80 	.word	0x08012d80
 8002990:	08012d88 	.word	0x08012d88
 8002994:	08012d90 	.word	0x08012d90
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b29a      	uxth	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	2302      	movs	r3, #2
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a8:	2105      	movs	r1, #5
 80029aa:	4858      	ldr	r0, [pc, #352]	; (8002b0c <FreqMenu_DrawPresetMenu+0x1520>)
 80029ac:	f00b faaa 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2302      	movs	r3, #2
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c0:	2105      	movs	r1, #5
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <FreqMenu_DrawPresetMenu+0x1524>)
 80029c4:	f00b fa9e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d8:	2105      	movs	r1, #5
 80029da:	484e      	ldr	r0, [pc, #312]	; (8002b14 <FreqMenu_DrawPresetMenu+0x1528>)
 80029dc:	f00b fa92 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029f0:	2105      	movs	r1, #5
 80029f2:	4849      	ldr	r0, [pc, #292]	; (8002b18 <FreqMenu_DrawPresetMenu+0x152c>)
 80029f4:	f00b fa86 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2302      	movs	r3, #2
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	4844      	ldr	r0, [pc, #272]	; (8002b1c <FreqMenu_DrawPresetMenu+0x1530>)
 8002a0c:	f00b fa7a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a20:	2105      	movs	r1, #5
 8002a22:	483f      	ldr	r0, [pc, #252]	; (8002b20 <FreqMenu_DrawPresetMenu+0x1534>)
 8002a24:	f00b fa6e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2302      	movs	r3, #2
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	483a      	ldr	r0, [pc, #232]	; (8002b24 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a3c:	f00b fa62 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	4835      	ldr	r0, [pc, #212]	; (8002b28 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a54:	f00b fa56 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2302      	movs	r3, #2
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a68:	2178      	movs	r1, #120	; 0x78
 8002a6a:	4830      	ldr	r0, [pc, #192]	; (8002b2c <FreqMenu_DrawPresetMenu+0x1540>)
 8002a6c:	f00b fa4a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a80:	2178      	movs	r1, #120	; 0x78
 8002a82:	482b      	ldr	r0, [pc, #172]	; (8002b30 <FreqMenu_DrawPresetMenu+0x1544>)
 8002a84:	f00b fa3e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a98:	2178      	movs	r1, #120	; 0x78
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <FreqMenu_DrawPresetMenu+0x1548>)
 8002a9c:	f00b fa32 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab0:	2178      	movs	r1, #120	; 0x78
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <FreqMenu_DrawPresetMenu+0x154c>)
 8002ab4:	f00b fa26 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab8:	7abb      	ldrb	r3, [r7, #10]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac8:	2178      	movs	r1, #120	; 0x78
 8002aca:	481c      	ldr	r0, [pc, #112]	; (8002b3c <FreqMenu_DrawPresetMenu+0x1550>)
 8002acc:	f00b fa1a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ad0:	7a7b      	ldrb	r3, [r7, #9]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2302      	movs	r3, #2
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2178      	movs	r1, #120	; 0x78
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ae4:	f00b fa0e 	bl	800df04 <ILI9341_Draw_Text>
			break;
 8002ae8:	bf00      	nop
 8002aea:	e00b      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002aec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2300      	movs	r3, #0
 8002af8:	22b4      	movs	r2, #180	; 0xb4
 8002afa:	2105      	movs	r1, #5
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <FreqMenu_DrawPresetMenu+0x1558>)
 8002afe:	f00b fa01 	bl	800df04 <ILI9341_Draw_Text>
}
 8002b02:	e7ff      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08012d28 	.word	0x08012d28
 8002b10:	08012d30 	.word	0x08012d30
 8002b14:	08012d38 	.word	0x08012d38
 8002b18:	08012d40 	.word	0x08012d40
 8002b1c:	08012d48 	.word	0x08012d48
 8002b20:	08012d50 	.word	0x08012d50
 8002b24:	08012d58 	.word	0x08012d58
 8002b28:	08012d60 	.word	0x08012d60
 8002b2c:	08012d68 	.word	0x08012d68
 8002b30:	08012d70 	.word	0x08012d70
 8002b34:	08012d78 	.word	0x08012d78
 8002b38:	08012d80 	.word	0x08012d80
 8002b3c:	08012d88 	.word	0x08012d88
 8002b40:	08012d90 	.word	0x08012d90
 8002b44:	08012d9c 	.word	0x08012d9c

08002b48 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <FreqMenu_DrawAdjustMenu+0x28>)
 8002b60:	f00b f9d0 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002b64:	f7fe f9c8 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08012dcc 	.word	0x08012dcc

08002b74 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b0a0      	sub	sp, #128	; 0x80
 8002b78:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	220a      	movs	r2, #10
 8002b88:	2105      	movs	r1, #5
 8002b8a:	48a1      	ldr	r0, [pc, #644]	; (8002e10 <FreqMenu_DrawSweepMenu+0x29c>)
 8002b8c:	f00b f9ba 	bl	800df04 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002b90:	2300      	movs	r3, #0
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
 8002b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d109      	bne.n	8002bc2 <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb2:	4a99      	ldr	r2, [pc, #612]	; (8002e18 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	4615      	mov	r5, r2
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	7023      	strb	r3, [r4, #0]
 8002bc0:	e008      	b.n	8002bd4 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc6:	4a95      	ldr	r2, [pc, #596]	; (8002e1c <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2228      	movs	r2, #40	; 0x28
 8002be6:	2105      	movs	r1, #5
 8002be8:	f00b f98c 	bl	800df04 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c02:	f003 f9cf 	bl	8005fa4 <SM_GetOutputInHertz>
 8002c06:	ee10 3a10 	vmov	r3, s0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcc4 	bl	8000598 <__aeabi_f2d>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c18:	e9cd 3400 	strd	r3, r4, [sp]
 8002c1c:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c1e:	2119      	movs	r1, #25
 8002c20:	f00c fd14 	bl	800f64c <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c24:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2105      	movs	r1, #5
 8002c38:	f00b f964 	bl	800df04 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	4875      	ldr	r0, [pc, #468]	; (8002e24 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c4e:	f00b f959 	bl	800df04 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d117      	bne.n	8002c8e <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	21eb      	movs	r1, #235	; 0xeb
 8002c6e:	486e      	ldr	r0, [pc, #440]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c70:	f00b f948 	bl	800df04 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	f240 1109 	movw	r1, #265	; 0x109
 8002c86:	4869      	ldr	r0, [pc, #420]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c88:	f00b f93c 	bl	800df04 <ILI9341_Draw_Text>
 8002c8c:	e016      	b.n	8002cbc <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9a:	2264      	movs	r2, #100	; 0x64
 8002c9c:	f240 1109 	movw	r1, #265	; 0x109
 8002ca0:	4862      	ldr	r0, [pc, #392]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ca2:	f00b f92f 	bl	800df04 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ca6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2264      	movs	r2, #100	; 0x64
 8002cb4:	21eb      	movs	r1, #235	; 0xeb
 8002cb6:	485c      	ldr	r0, [pc, #368]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cb8:	f00b f924 	bl	800df04 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2278      	movs	r2, #120	; 0x78
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4857      	ldr	r0, [pc, #348]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cd6:	f00b f915 	bl	800df04 <ILI9341_Draw_Text>
 8002cda:	e00a      	b.n	8002cf2 <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce8:	2278      	movs	r2, #120	; 0x78
 8002cea:	2105      	movs	r1, #5
 8002cec:	4851      	ldr	r0, [pc, #324]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cee:	f00b f909 	bl	800df04 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc43 	bl	8000598 <__aeabi_f2d>
 8002d12:	4603      	mov	r3, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d1a:	e9cd 3400 	strd	r3, r4, [sp]
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d20:	2119      	movs	r1, #25
 8002d22:	f00c fc93 	bl	800f64c <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	21b6      	movs	r1, #182	; 0xb6
 8002d3a:	f00b f8e3 	bl	800df04 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2302      	movs	r3, #2
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	228c      	movs	r2, #140	; 0x8c
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4839      	ldr	r0, [pc, #228]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d60:	f00b f8d0 	bl	800df04 <ILI9341_Draw_Text>
 8002d64:	e00a      	b.n	8002d7c <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	228c      	movs	r2, #140	; 0x8c
 8002d74:	2105      	movs	r1, #5
 8002d76:	4833      	ldr	r0, [pc, #204]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d78:	f00b f8c4 	bl	800df04 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <FreqMenu_DrawSweepMenu+0x2d8>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	ee17 0a90 	vmov	r0, s15
 8002da4:	f003 f942 	bl	800602c <SM_ConvertPeriodToHertz>
 8002da8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e50 <FreqMenu_DrawSweepMenu+0x2dc>
 8002db0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db4:	ee16 0a90 	vmov	r0, s13
 8002db8:	f7fd fbee 	bl	8000598 <__aeabi_f2d>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f107 0018 	add.w	r0, r7, #24
 8002dc4:	e9cd 3400 	strd	r3, r4, [sp]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002dca:	2114      	movs	r1, #20
 8002dcc:	f00c fc3e 	bl	800f64c <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd0:	f107 0018 	add.w	r0, r7, #24
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de0:	228c      	movs	r2, #140	; 0x8c
 8002de2:	219e      	movs	r1, #158	; 0x9e
 8002de4:	f00b f88e 	bl	800df04 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d131      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002df8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	22a0      	movs	r2, #160	; 0xa0
 8002e06:	2105      	movs	r1, #5
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e0a:	f00b f87b 	bl	800df04 <ILI9341_Draw_Text>
 8002e0e:	e030      	b.n	8002e72 <FreqMenu_DrawSweepMenu+0x2fe>
 8002e10:	08012de0 	.word	0x08012de0
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	08012df4 	.word	0x08012df4
 8002e1c:	08012e08 	.word	0x08012e08
 8002e20:	08012e1c 	.word	0x08012e1c
 8002e24:	08012e30 	.word	0x08012e30
 8002e28:	08012e3c 	.word	0x08012e3c
 8002e2c:	08012e40 	.word	0x08012e40
 8002e30:	20001ecd 	.word	0x20001ecd
 8002e34:	08012e48 	.word	0x08012e48
 8002e38:	20001f1c 	.word	0x20001f1c
 8002e3c:	08012e58 	.word	0x08012e58
 8002e40:	20001ecc 	.word	0x20001ecc
 8002e44:	08012e64 	.word	0x08012e64
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	42f00000 	.word	0x42f00000
 8002e54:	08012e74 	.word	0x08012e74
 8002e58:	08012e80 	.word	0x08012e80
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e68:	22a0      	movs	r2, #160	; 0xa0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <FreqMenu_DrawSweepMenu+0x430>)
 8002e6e:	f00b f849 	bl	800df04 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <FreqMenu_DrawSweepMenu+0x434>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <FreqMenu_DrawSweepMenu+0x438>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f003 f8c7 	bl	800602c <SM_ConvertPeriodToHertz>
 8002e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fb0 <FreqMenu_DrawSweepMenu+0x43c>
 8002ea6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eaa:	ee16 0a90 	vmov	r0, s13
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	1d38      	adds	r0, r7, #4
 8002eb8:	e9cd 3400 	strd	r3, r4, [sp]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <FreqMenu_DrawSweepMenu+0x440>)
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	f00c fbc4 	bl	800f64c <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec4:	1d38      	adds	r0, r7, #4
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed2:	22a0      	movs	r2, #160	; 0xa0
 8002ed4:	21aa      	movs	r1, #170	; 0xaa
 8002ed6:	f00b f815 	bl	800df04 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <FreqMenu_DrawSweepMenu+0x444>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10b      	bne.n	8002efe <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002ee6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	22d5      	movs	r2, #213	; 0xd5
 8002ef4:	2106      	movs	r1, #6
 8002ef6:	4831      	ldr	r0, [pc, #196]	; (8002fbc <FreqMenu_DrawSweepMenu+0x448>)
 8002ef8:	f00b f804 	bl	800df04 <ILI9341_Draw_Text>
 8002efc:	e00a      	b.n	8002f14 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002efe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	22d5      	movs	r2, #213	; 0xd5
 8002f0c:	2105      	movs	r1, #5
 8002f0e:	482c      	ldr	r0, [pc, #176]	; (8002fc0 <FreqMenu_DrawSweepMenu+0x44c>)
 8002f10:	f00a fff8 	bl	800df04 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22cc      	movs	r2, #204	; 0xcc
 8002f22:	2169      	movs	r1, #105	; 0x69
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f26:	f00a ffed 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f2a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	22de      	movs	r2, #222	; 0xde
 8002f38:	2162      	movs	r1, #98	; 0x62
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <FreqMenu_DrawSweepMenu+0x454>)
 8002f3c:	f00a ffe2 	bl	800df04 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	22cc      	movs	r2, #204	; 0xcc
 8002f4e:	21b7      	movs	r1, #183	; 0xb7
 8002f50:	481c      	ldr	r0, [pc, #112]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f52:	f00a ffd7 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	22de      	movs	r2, #222	; 0xde
 8002f64:	21ad      	movs	r1, #173	; 0xad
 8002f66:	4819      	ldr	r0, [pc, #100]	; (8002fcc <FreqMenu_DrawSweepMenu+0x458>)
 8002f68:	f00a ffcc 	bl	800df04 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f6c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	22cc      	movs	r2, #204	; 0xcc
 8002f7a:	f240 1107 	movw	r1, #263	; 0x107
 8002f7e:	4811      	ldr	r0, [pc, #68]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f80:	f00a ffc0 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	22de      	movs	r2, #222	; 0xde
 8002f92:	21fc      	movs	r1, #252	; 0xfc
 8002f94:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <FreqMenu_DrawSweepMenu+0x45c>)
 8002f96:	f00a ffb5 	bl	800df04 <ILI9341_Draw_Text>
}
 8002f9a:	bf00      	nop
 8002f9c:	3778      	adds	r7, #120	; 0x78
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08012e80 	.word	0x08012e80
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	42f00000 	.word	0x42f00000
 8002fb4:	08012e90 	.word	0x08012e90
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	08012e9c 	.word	0x08012e9c
 8002fc0:	08012ea4 	.word	0x08012ea4
 8002fc4:	08012eac 	.word	0x08012eac
 8002fc8:	08012eb0 	.word	0x08012eb0
 8002fcc:	08012eb8 	.word	0x08012eb8
 8002fd0:	08012ec0 	.word	0x08012ec0

08002fd4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d007      	beq.n	8002ff4 <FuncMenu_DrawMenu+0x20>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d009      	beq.n	8002ffc <FuncMenu_DrawMenu+0x28>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d000      	beq.n	8002fee <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002fec:	e00a      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002fee:	f000 f80d 	bl	800300c <FuncMenu_DrawMainMenu>
			break;
 8002ff2:	e007      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f851 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8002ffa:	e003      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f84d 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8003002:	bf00      	nop

	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2302      	movs	r3, #2
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	210a      	movs	r1, #10
 8003022:	481a      	ldr	r0, [pc, #104]	; (800308c <FuncMenu_DrawMainMenu+0x80>)
 8003024:	f00a ff6e 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003028:	f7fd ff66 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800302c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	22d2      	movs	r2, #210	; 0xd2
 800303a:	2105      	movs	r1, #5
 800303c:	4814      	ldr	r0, [pc, #80]	; (8003090 <FuncMenu_DrawMainMenu+0x84>)
 800303e:	f00a ff61 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003042:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	22d2      	movs	r2, #210	; 0xd2
 8003050:	2161      	movs	r1, #97	; 0x61
 8003052:	4810      	ldr	r0, [pc, #64]	; (8003094 <FuncMenu_DrawMainMenu+0x88>)
 8003054:	f00a ff56 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003058:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	22d2      	movs	r2, #210	; 0xd2
 8003066:	21af      	movs	r1, #175	; 0xaf
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 800306a:	f00a ff4b 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800306e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	22d2      	movs	r2, #210	; 0xd2
 800307c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 8003082:	f00a ff3f 	bl	800df04 <ILI9341_Draw_Text>
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08012ec8 	.word	0x08012ec8
 8003090:	08012ed4 	.word	0x08012ed4
 8003094:	08012edc 	.word	0x08012edc
 8003098:	08012ee4 	.word	0x08012ee4

0800309c <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	220a      	movs	r2, #10
 80030b4:	210a      	movs	r1, #10
 80030b6:	488d      	ldr	r0, [pc, #564]	; (80032ec <FuncMenu_DrawOutputMenu+0x250>)
 80030b8:	f00a ff24 	bl	800df04 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fdb4 	bl	8005c2c <SM_GetOutputChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80030ca:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8396 	beq.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
	{
		switch(func_profileTmp->func)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	f200 8391 	bhi.w	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <FuncMenu_DrawOutputMenu+0x48>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080031f7 	.word	0x080031f7
 80030ec:	08003311 	.word	0x08003311
 80030f0:	08003407 	.word	0x08003407
 80030f4:	080034fd 	.word	0x080034fd
 80030f8:	08003615 	.word	0x08003615
 80030fc:	0800370b 	.word	0x0800370b
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003100:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	210a      	movs	r1, #10
 8003110:	4877      	ldr	r0, [pc, #476]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003112:	f00a fef7 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003122:	2246      	movs	r2, #70	; 0x46
 8003124:	210a      	movs	r1, #10
 8003126:	4873      	ldr	r0, [pc, #460]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 8003128:	f00a feec 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003138:	225a      	movs	r2, #90	; 0x5a
 800313a:	210a      	movs	r1, #10
 800313c:	486e      	ldr	r0, [pc, #440]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 800313e:	f00a fee1 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800314e:	226e      	movs	r2, #110	; 0x6e
 8003150:	210a      	movs	r1, #10
 8003152:	486a      	ldr	r0, [pc, #424]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 8003154:	f00a fed6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	210a      	movs	r1, #10
 8003168:	4865      	ldr	r0, [pc, #404]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 800316a:	f00a fecb 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2296      	movs	r2, #150	; 0x96
 800317c:	210a      	movs	r1, #10
 800317e:	4861      	ldr	r0, [pc, #388]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003180:	f00a fec0 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	22aa      	movs	r2, #170	; 0xaa
 8003192:	210a      	movs	r1, #10
 8003194:	485c      	ldr	r0, [pc, #368]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 8003196:	f00a feb5 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800319a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	2302      	movs	r3, #2
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	22d2      	movs	r2, #210	; 0xd2
 80031a8:	2105      	movs	r1, #5
 80031aa:	4858      	ldr	r0, [pc, #352]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031ac:	f00a feaa 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031b0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	22d2      	movs	r2, #210	; 0xd2
 80031be:	2161      	movs	r1, #97	; 0x61
 80031c0:	4852      	ldr	r0, [pc, #328]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031c2:	f00a fe9f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	22d2      	movs	r2, #210	; 0xd2
 80031d4:	21af      	movs	r1, #175	; 0xaf
 80031d6:	484d      	ldr	r0, [pc, #308]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031d8:	f00a fe94 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2300      	movs	r3, #0
 80031e8:	22d2      	movs	r2, #210	; 0xd2
 80031ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031ee:	4847      	ldr	r0, [pc, #284]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80031f0:	f00a fe88 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80031f4:	e304      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f6:	2300      	movs	r3, #0
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	2302      	movs	r3, #2
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003202:	2232      	movs	r2, #50	; 0x32
 8003204:	210a      	movs	r1, #10
 8003206:	483a      	ldr	r0, [pc, #232]	; (80032f0 <FuncMenu_DrawOutputMenu+0x254>)
 8003208:	f00a fe7c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800320c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2302      	movs	r3, #2
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2246      	movs	r2, #70	; 0x46
 800321a:	210a      	movs	r1, #10
 800321c:	4835      	ldr	r0, [pc, #212]	; (80032f4 <FuncMenu_DrawOutputMenu+0x258>)
 800321e:	f00a fe71 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003222:	2300      	movs	r3, #0
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	2302      	movs	r3, #2
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322e:	225a      	movs	r2, #90	; 0x5a
 8003230:	210a      	movs	r1, #10
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <FuncMenu_DrawOutputMenu+0x25c>)
 8003234:	f00a fe66 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003238:	2300      	movs	r3, #0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003244:	226e      	movs	r2, #110	; 0x6e
 8003246:	210a      	movs	r1, #10
 8003248:	482c      	ldr	r0, [pc, #176]	; (80032fc <FuncMenu_DrawOutputMenu+0x260>)
 800324a:	f00a fe5b 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800324e:	2300      	movs	r3, #0
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800325a:	2282      	movs	r2, #130	; 0x82
 800325c:	210a      	movs	r1, #10
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <FuncMenu_DrawOutputMenu+0x264>)
 8003260:	f00a fe50 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003264:	2300      	movs	r3, #0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003270:	2296      	movs	r2, #150	; 0x96
 8003272:	210a      	movs	r1, #10
 8003274:	4823      	ldr	r0, [pc, #140]	; (8003304 <FuncMenu_DrawOutputMenu+0x268>)
 8003276:	f00a fe45 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800327a:	2300      	movs	r3, #0
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003286:	22aa      	movs	r2, #170	; 0xaa
 8003288:	210a      	movs	r1, #10
 800328a:	481f      	ldr	r0, [pc, #124]	; (8003308 <FuncMenu_DrawOutputMenu+0x26c>)
 800328c:	f00a fe3a 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003290:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	22d2      	movs	r2, #210	; 0xd2
 800329e:	2105      	movs	r1, #5
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032a2:	f00a fe2f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	2302      	movs	r3, #2
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2300      	movs	r3, #0
 80032b2:	22d2      	movs	r2, #210	; 0xd2
 80032b4:	2161      	movs	r1, #97	; 0x61
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032b8:	f00a fe24 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	22d2      	movs	r2, #210	; 0xd2
 80032ca:	21af      	movs	r1, #175	; 0xaf
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032ce:	f00a fe19 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	22d2      	movs	r2, #210	; 0xd2
 80032e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80032e6:	f00a fe0d 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80032ea:	e289      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80032ec:	08012eec 	.word	0x08012eec
 80032f0:	08012efc 	.word	0x08012efc
 80032f4:	08012f04 	.word	0x08012f04
 80032f8:	08012f10 	.word	0x08012f10
 80032fc:	08012f18 	.word	0x08012f18
 8003300:	08012f24 	.word	0x08012f24
 8003304:	08012f30 	.word	0x08012f30
 8003308:	08012f38 	.word	0x08012f38
 800330c:	08012ee4 	.word	0x08012ee4
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	210a      	movs	r1, #10
 8003320:	48b4      	ldr	r0, [pc, #720]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003322:	f00a fdef 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003332:	2246      	movs	r2, #70	; 0x46
 8003334:	210a      	movs	r1, #10
 8003336:	48b0      	ldr	r0, [pc, #704]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003338:	f00a fde4 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800333c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	225a      	movs	r2, #90	; 0x5a
 800334a:	210a      	movs	r1, #10
 800334c:	48ab      	ldr	r0, [pc, #684]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800334e:	f00a fdd9 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003352:	2300      	movs	r3, #0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800335e:	226e      	movs	r2, #110	; 0x6e
 8003360:	210a      	movs	r1, #10
 8003362:	48a7      	ldr	r0, [pc, #668]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003364:	f00a fdce 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003374:	2282      	movs	r2, #130	; 0x82
 8003376:	210a      	movs	r1, #10
 8003378:	48a2      	ldr	r0, [pc, #648]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 800337a:	f00a fdc3 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800338a:	2296      	movs	r2, #150	; 0x96
 800338c:	210a      	movs	r1, #10
 800338e:	489e      	ldr	r0, [pc, #632]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003390:	f00a fdb8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003394:	2300      	movs	r3, #0
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033a0:	22aa      	movs	r2, #170	; 0xaa
 80033a2:	210a      	movs	r1, #10
 80033a4:	4899      	ldr	r0, [pc, #612]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 80033a6:	f00a fdad 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033aa:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2302      	movs	r3, #2
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	22d2      	movs	r2, #210	; 0xd2
 80033b8:	2105      	movs	r1, #5
 80033ba:	4895      	ldr	r0, [pc, #596]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033bc:	f00a fda2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033c0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2300      	movs	r3, #0
 80033cc:	22d2      	movs	r2, #210	; 0xd2
 80033ce:	2161      	movs	r1, #97	; 0x61
 80033d0:	488f      	ldr	r0, [pc, #572]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033d2:	f00a fd97 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	22d2      	movs	r2, #210	; 0xd2
 80033e4:	21af      	movs	r1, #175	; 0xaf
 80033e6:	488a      	ldr	r0, [pc, #552]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80033e8:	f00a fd8c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033ec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	22d2      	movs	r2, #210	; 0xd2
 80033fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033fe:	4884      	ldr	r0, [pc, #528]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 8003400:	f00a fd80 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8003404:	e1fc      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003412:	2232      	movs	r2, #50	; 0x32
 8003414:	210a      	movs	r1, #10
 8003416:	4877      	ldr	r0, [pc, #476]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 8003418:	f00a fd74 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341c:	2300      	movs	r3, #0
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003428:	2246      	movs	r2, #70	; 0x46
 800342a:	210a      	movs	r1, #10
 800342c:	4872      	ldr	r0, [pc, #456]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 800342e:	f00a fd69 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003432:	2300      	movs	r3, #0
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2302      	movs	r3, #2
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800343e:	225a      	movs	r2, #90	; 0x5a
 8003440:	210a      	movs	r1, #10
 8003442:	486e      	ldr	r0, [pc, #440]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 8003444:	f00a fd5e 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003448:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	226e      	movs	r2, #110	; 0x6e
 8003456:	210a      	movs	r1, #10
 8003458:	4869      	ldr	r0, [pc, #420]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 800345a:	f00a fd53 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800345e:	2300      	movs	r3, #0
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	2302      	movs	r3, #2
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800346a:	2282      	movs	r2, #130	; 0x82
 800346c:	210a      	movs	r1, #10
 800346e:	4865      	ldr	r0, [pc, #404]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003470:	f00a fd48 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2296      	movs	r2, #150	; 0x96
 8003482:	210a      	movs	r1, #10
 8003484:	4860      	ldr	r0, [pc, #384]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 8003486:	f00a fd3d 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	22aa      	movs	r2, #170	; 0xaa
 8003498:	210a      	movs	r1, #10
 800349a:	485c      	ldr	r0, [pc, #368]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 800349c:	f00a fd32 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80034a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2302      	movs	r3, #2
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	22d2      	movs	r2, #210	; 0xd2
 80034ae:	2105      	movs	r1, #5
 80034b0:	4857      	ldr	r0, [pc, #348]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034b2:	f00a fd27 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	22d2      	movs	r2, #210	; 0xd2
 80034c4:	2161      	movs	r1, #97	; 0x61
 80034c6:	4852      	ldr	r0, [pc, #328]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034c8:	f00a fd1c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2302      	movs	r3, #2
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	22d2      	movs	r2, #210	; 0xd2
 80034da:	21af      	movs	r1, #175	; 0xaf
 80034dc:	484c      	ldr	r0, [pc, #304]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034de:	f00a fd11 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034e2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2302      	movs	r3, #2
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	22d2      	movs	r2, #210	; 0xd2
 80034f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034f4:	4846      	ldr	r0, [pc, #280]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80034f6:	f00a fd05 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80034fa:	e181      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	210a      	movs	r1, #10
 800350c:	4839      	ldr	r0, [pc, #228]	; (80035f4 <FuncMenu_DrawOutputMenu+0x558>)
 800350e:	f00a fcf9 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351e:	2246      	movs	r2, #70	; 0x46
 8003520:	210a      	movs	r1, #10
 8003522:	4835      	ldr	r0, [pc, #212]	; (80035f8 <FuncMenu_DrawOutputMenu+0x55c>)
 8003524:	f00a fcee 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003528:	2300      	movs	r3, #0
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2302      	movs	r3, #2
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003534:	225a      	movs	r2, #90	; 0x5a
 8003536:	210a      	movs	r1, #10
 8003538:	4830      	ldr	r0, [pc, #192]	; (80035fc <FuncMenu_DrawOutputMenu+0x560>)
 800353a:	f00a fce3 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800353e:	2300      	movs	r3, #0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800354a:	226e      	movs	r2, #110	; 0x6e
 800354c:	210a      	movs	r1, #10
 800354e:	482c      	ldr	r0, [pc, #176]	; (8003600 <FuncMenu_DrawOutputMenu+0x564>)
 8003550:	f00a fcd8 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003554:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2302      	movs	r3, #2
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	2282      	movs	r2, #130	; 0x82
 8003562:	210a      	movs	r1, #10
 8003564:	4827      	ldr	r0, [pc, #156]	; (8003604 <FuncMenu_DrawOutputMenu+0x568>)
 8003566:	f00a fccd 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2302      	movs	r3, #2
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003576:	2296      	movs	r2, #150	; 0x96
 8003578:	210a      	movs	r1, #10
 800357a:	4823      	ldr	r0, [pc, #140]	; (8003608 <FuncMenu_DrawOutputMenu+0x56c>)
 800357c:	f00a fcc2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003580:	2300      	movs	r3, #0
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2302      	movs	r3, #2
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800358c:	22aa      	movs	r2, #170	; 0xaa
 800358e:	210a      	movs	r1, #10
 8003590:	481e      	ldr	r0, [pc, #120]	; (800360c <FuncMenu_DrawOutputMenu+0x570>)
 8003592:	f00a fcb7 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003596:	f240 23fd 	movw	r3, #765	; 0x2fd
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2302      	movs	r3, #2
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	22d2      	movs	r2, #210	; 0xd2
 80035a4:	2105      	movs	r1, #5
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035a8:	f00a fcac 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80035ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2302      	movs	r3, #2
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	22d2      	movs	r2, #210	; 0xd2
 80035ba:	2161      	movs	r1, #97	; 0x61
 80035bc:	4814      	ldr	r0, [pc, #80]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035be:	f00a fca1 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	22d2      	movs	r2, #210	; 0xd2
 80035d0:	21af      	movs	r1, #175	; 0xaf
 80035d2:	480f      	ldr	r0, [pc, #60]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035d4:	f00a fc96 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035d8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2302      	movs	r3, #2
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	22d2      	movs	r2, #210	; 0xd2
 80035e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <FuncMenu_DrawOutputMenu+0x574>)
 80035ec:	f00a fc8a 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80035f0:	e106      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
 80035f2:	bf00      	nop
 80035f4:	08012efc 	.word	0x08012efc
 80035f8:	08012f04 	.word	0x08012f04
 80035fc:	08012f10 	.word	0x08012f10
 8003600:	08012f18 	.word	0x08012f18
 8003604:	08012f24 	.word	0x08012f24
 8003608:	08012f30 	.word	0x08012f30
 800360c:	08012f38 	.word	0x08012f38
 8003610:	08012ee4 	.word	0x08012ee4
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2302      	movs	r3, #2
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	210a      	movs	r1, #10
 8003624:	4878      	ldr	r0, [pc, #480]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 8003626:	f00a fc6d 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2302      	movs	r3, #2
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003636:	2246      	movs	r2, #70	; 0x46
 8003638:	210a      	movs	r1, #10
 800363a:	4874      	ldr	r0, [pc, #464]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 800363c:	f00a fc62 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003640:	2300      	movs	r3, #0
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800364c:	225a      	movs	r2, #90	; 0x5a
 800364e:	210a      	movs	r1, #10
 8003650:	486f      	ldr	r0, [pc, #444]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003652:	f00a fc57 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2302      	movs	r3, #2
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003662:	226e      	movs	r2, #110	; 0x6e
 8003664:	210a      	movs	r1, #10
 8003666:	486b      	ldr	r0, [pc, #428]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 8003668:	f00a fc4c 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2302      	movs	r3, #2
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003678:	2282      	movs	r2, #130	; 0x82
 800367a:	210a      	movs	r1, #10
 800367c:	4866      	ldr	r0, [pc, #408]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 800367e:	f00a fc41 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003682:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	2296      	movs	r2, #150	; 0x96
 8003690:	210a      	movs	r1, #10
 8003692:	4862      	ldr	r0, [pc, #392]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 8003694:	f00a fc36 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003698:	2300      	movs	r3, #0
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a4:	22aa      	movs	r2, #170	; 0xaa
 80036a6:	210a      	movs	r1, #10
 80036a8:	485d      	ldr	r0, [pc, #372]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80036aa:	f00a fc2b 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80036ae:	f240 23fd 	movw	r3, #765	; 0x2fd
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22d2      	movs	r2, #210	; 0xd2
 80036bc:	2105      	movs	r1, #5
 80036be:	4859      	ldr	r0, [pc, #356]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036c0:	f00a fc20 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80036c4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2302      	movs	r3, #2
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	22d2      	movs	r2, #210	; 0xd2
 80036d2:	2161      	movs	r1, #97	; 0x61
 80036d4:	4853      	ldr	r0, [pc, #332]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036d6:	f00a fc15 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2302      	movs	r3, #2
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	22d2      	movs	r2, #210	; 0xd2
 80036e8:	21af      	movs	r1, #175	; 0xaf
 80036ea:	484e      	ldr	r0, [pc, #312]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80036ec:	f00a fc0a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	22d2      	movs	r2, #210	; 0xd2
 80036fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003702:	4848      	ldr	r0, [pc, #288]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 8003704:	f00a fbfe 	bl	800df04 <ILI9341_Draw_Text>
				break;
 8003708:	e07a      	b.n	8003800 <FuncMenu_DrawOutputMenu+0x764>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370a:	2300      	movs	r3, #0
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003716:	2232      	movs	r2, #50	; 0x32
 8003718:	210a      	movs	r1, #10
 800371a:	483b      	ldr	r0, [pc, #236]	; (8003808 <FuncMenu_DrawOutputMenu+0x76c>)
 800371c:	f00a fbf2 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003720:	2300      	movs	r3, #0
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2302      	movs	r3, #2
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800372c:	2246      	movs	r2, #70	; 0x46
 800372e:	210a      	movs	r1, #10
 8003730:	4836      	ldr	r0, [pc, #216]	; (800380c <FuncMenu_DrawOutputMenu+0x770>)
 8003732:	f00a fbe7 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2302      	movs	r3, #2
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003742:	225a      	movs	r2, #90	; 0x5a
 8003744:	210a      	movs	r1, #10
 8003746:	4832      	ldr	r0, [pc, #200]	; (8003810 <FuncMenu_DrawOutputMenu+0x774>)
 8003748:	f00a fbdc 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2302      	movs	r3, #2
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003758:	226e      	movs	r2, #110	; 0x6e
 800375a:	210a      	movs	r1, #10
 800375c:	482d      	ldr	r0, [pc, #180]	; (8003814 <FuncMenu_DrawOutputMenu+0x778>)
 800375e:	f00a fbd1 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003762:	2300      	movs	r3, #0
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800376e:	2282      	movs	r2, #130	; 0x82
 8003770:	210a      	movs	r1, #10
 8003772:	4829      	ldr	r0, [pc, #164]	; (8003818 <FuncMenu_DrawOutputMenu+0x77c>)
 8003774:	f00a fbc6 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	2302      	movs	r3, #2
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003784:	2296      	movs	r2, #150	; 0x96
 8003786:	210a      	movs	r1, #10
 8003788:	4824      	ldr	r0, [pc, #144]	; (800381c <FuncMenu_DrawOutputMenu+0x780>)
 800378a:	f00a fbbb 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800378e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2302      	movs	r3, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	22aa      	movs	r2, #170	; 0xaa
 800379c:	210a      	movs	r1, #10
 800379e:	4820      	ldr	r0, [pc, #128]	; (8003820 <FuncMenu_DrawOutputMenu+0x784>)
 80037a0:	f00a fbb0 	bl	800df04 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	22d2      	movs	r2, #210	; 0xd2
 80037b2:	2105      	movs	r1, #5
 80037b4:	481b      	ldr	r0, [pc, #108]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037b6:	f00a fba5 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	22d2      	movs	r2, #210	; 0xd2
 80037c8:	2161      	movs	r1, #97	; 0x61
 80037ca:	4816      	ldr	r0, [pc, #88]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037cc:	f00a fb9a 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	22d2      	movs	r2, #210	; 0xd2
 80037de:	21af      	movs	r1, #175	; 0xaf
 80037e0:	4811      	ldr	r0, [pc, #68]	; (8003828 <FuncMenu_DrawOutputMenu+0x78c>)
 80037e2:	f00a fb8f 	bl	800df04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037e6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22d2      	movs	r2, #210	; 0xd2
 80037f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037f8:	480a      	ldr	r0, [pc, #40]	; (8003824 <FuncMenu_DrawOutputMenu+0x788>)
 80037fa:	f00a fb83 	bl	800df04 <ILI9341_Draw_Text>
				break;
 80037fe:	bf00      	nop
		}

	}


}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	08012efc 	.word	0x08012efc
 800380c:	08012f04 	.word	0x08012f04
 8003810:	08012f10 	.word	0x08012f10
 8003814:	08012f18 	.word	0x08012f18
 8003818:	08012f24 	.word	0x08012f24
 800381c:	08012f30 	.word	0x08012f30
 8003820:	08012f38 	.word	0x08012f38
 8003824:	08012ee4 	.word	0x08012ee4
 8003828:	08012f40 	.word	0x08012f40

0800382c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <GainMenu_DrawMenu+0x20>
 800383c:	2b03      	cmp	r3, #3
 800383e:	d008      	beq.n	8003852 <GainMenu_DrawMenu+0x26>
 8003840:	2b01      	cmp	r3, #1
 8003842:	d000      	beq.n	8003846 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003844:	e008      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003846:	f000 f80b 	bl	8003860 <GainMenu_DrawMainMenu>
			break;
 800384a:	e005      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800384c:	f000 f850 	bl	80038f0 <GainMenu_DrawSignalMenu>
			break;
 8003850:	e002      	b.n	8003858 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003852:	f000 f863 	bl	800391c <GainMenu_DrawSyncMenu>
			break;
 8003856:	bf00      	nop

	}
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2302      	movs	r3, #2
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	220a      	movs	r2, #10
 8003874:	210a      	movs	r1, #10
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <GainMenu_DrawMainMenu+0x80>)
 8003878:	f00a fb44 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800387c:	f7fd fb3c 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003880:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2302      	movs	r3, #2
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	22d2      	movs	r2, #210	; 0xd2
 800388e:	2105      	movs	r1, #5
 8003890:	4814      	ldr	r0, [pc, #80]	; (80038e4 <GainMenu_DrawMainMenu+0x84>)
 8003892:	f00a fb37 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003896:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2302      	movs	r3, #2
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	22d2      	movs	r2, #210	; 0xd2
 80038a4:	2161      	movs	r1, #97	; 0x61
 80038a6:	4810      	ldr	r0, [pc, #64]	; (80038e8 <GainMenu_DrawMainMenu+0x88>)
 80038a8:	f00a fb2c 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2302      	movs	r3, #2
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	22d2      	movs	r2, #210	; 0xd2
 80038ba:	21af      	movs	r1, #175	; 0xaf
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038be:	f00a fb21 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038c2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2302      	movs	r3, #2
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	22d2      	movs	r2, #210	; 0xd2
 80038d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038d4:	4805      	ldr	r0, [pc, #20]	; (80038ec <GainMenu_DrawMainMenu+0x8c>)
 80038d6:	f00a fb15 	bl	800df04 <ILI9341_Draw_Text>
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08012f48 	.word	0x08012f48
 80038e4:	08012f54 	.word	0x08012f54
 80038e8:	08012f5c 	.word	0x08012f5c
 80038ec:	08012f64 	.word	0x08012f64

080038f0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80038f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	220a      	movs	r2, #10
 8003904:	210a      	movs	r1, #10
 8003906:	4804      	ldr	r0, [pc, #16]	; (8003918 <GainMenu_DrawSignalMenu+0x28>)
 8003908:	f00a fafc 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800390c:	f7fd faf4 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	08012f6c 	.word	0x08012f6c

0800391c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	220a      	movs	r2, #10
 8003930:	210a      	movs	r1, #10
 8003932:	4804      	ldr	r0, [pc, #16]	; (8003944 <GainMenu_DrawSyncMenu+0x28>)
 8003934:	f00a fae6 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003938:	f7fd fade 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08012f7c 	.word	0x08012f7c

08003948 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d007      	beq.n	8003968 <ToplevelMenu_DrawMenu+0x20>
 8003958:	2b03      	cmp	r3, #3
 800395a:	d008      	beq.n	800396e <ToplevelMenu_DrawMenu+0x26>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d000      	beq.n	8003962 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003960:	e008      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003962:	f000 f80b 	bl	800397c <ToplevelMenu_DrawMainMenu>
			break;
 8003966:	e005      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003968:	f000 f848 	bl	80039fc <ToplevelMenu_DrawOutputMenu>
			break;
 800396c:	e002      	b.n	8003974 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800396e:	f000 f88f 	bl	8003a90 <ToplevelMenu_DrawInputMenu>
			break;
 8003972:	bf00      	nop

	}
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003982:	481a      	ldr	r0, [pc, #104]	; (80039ec <ToplevelMenu_DrawMainMenu+0x70>)
 8003984:	f00b fe5a 	bl	800f63c <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003988:	f7fd fab6 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800398c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2302      	movs	r3, #2
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	22d2      	movs	r2, #210	; 0xd2
 800399a:	2106      	movs	r1, #6
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <ToplevelMenu_DrawMainMenu+0x74>)
 800399e:	f00a fab1 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80039a2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2302      	movs	r3, #2
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	22d2      	movs	r2, #210	; 0xd2
 80039b0:	215d      	movs	r1, #93	; 0x5d
 80039b2:	4810      	ldr	r0, [pc, #64]	; (80039f4 <ToplevelMenu_DrawMainMenu+0x78>)
 80039b4:	f00a faa6 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	22d2      	movs	r2, #210	; 0xd2
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039ca:	f00a fa9b 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039ce:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2302      	movs	r3, #2
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2300      	movs	r3, #0
 80039da:	22d2      	movs	r2, #210	; 0xd2
 80039dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80039e2:	f00a fa8f 	bl	800df04 <ILI9341_Draw_Text>


}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	08012f8c 	.word	0x08012f8c
 80039f0:	08012fa0 	.word	0x08012fa0
 80039f4:	08012fa8 	.word	0x08012fa8
 80039f8:	08012fb0 	.word	0x08012fb0

080039fc <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	2302      	movs	r3, #2
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	220a      	movs	r2, #10
 8003a10:	210a      	movs	r1, #10
 8003a12:	481a      	ldr	r0, [pc, #104]	; (8003a7c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003a14:	f00a fa76 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a18:	f7fd fa6e 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a1c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	2302      	movs	r3, #2
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	22d2      	movs	r2, #210	; 0xd2
 8003a2a:	210d      	movs	r1, #13
 8003a2c:	4814      	ldr	r0, [pc, #80]	; (8003a80 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003a2e:	f00a fa69 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a32:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	22d2      	movs	r2, #210	; 0xd2
 8003a40:	2163      	movs	r1, #99	; 0x63
 8003a42:	4810      	ldr	r0, [pc, #64]	; (8003a84 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003a44:	f00a fa5e 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	22d2      	movs	r2, #210	; 0xd2
 8003a56:	21b0      	movs	r1, #176	; 0xb0
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003a5a:	f00a fa53 	bl	800df04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a5e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2302      	movs	r3, #2
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	22d2      	movs	r2, #210	; 0xd2
 8003a6c:	21f5      	movs	r1, #245	; 0xf5
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003a70:	f00a fa48 	bl	800df04 <ILI9341_Draw_Text>
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	08012fb8 	.word	0x08012fb8
 8003a80:	08012fc0 	.word	0x08012fc0
 8003a84:	08012fc8 	.word	0x08012fc8
 8003a88:	08012fd0 	.word	0x08012fd0
 8003a8c:	08012fd8 	.word	0x08012fd8

08003a90 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	220a      	movs	r2, #10
 8003aa4:	210a      	movs	r1, #10
 8003aa6:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <ToplevelMenu_DrawInputMenu+0x28>)
 8003aa8:	f00a fa2c 	bl	800df04 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003aac:	f7fd fa24 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08012fe0 	.word	0x08012fe0

08003abc <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <BiasMenu_getStatus+0x14>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20001ec9 	.word	0x20001ec9

08003ad4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <BiasMenuEntryHandler+0x34>)
 8003ada:	f00b fdaf 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8003ade:	f7fd fccb 	bl	8001478 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <BiasMenuEntryHandler+0x38>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003aea:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003af0:	f001 f9f8 	bl	8004ee4 <BO_GetDcBiasEncoderValue>
 8003af4:	4603      	mov	r3, r0
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <BiasMenuEntryHandler+0x3c>)
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <BiasMenuEntryHandler+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b02:	230e      	movs	r3, #14
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08012fe8 	.word	0x08012fe8
 8003b0c:	20001ec9 	.word	0x20001ec9
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	20001ecb 	.word	0x20001ecb

08003b18 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <BiasMenuInputHandler+0x24>)
 8003b1e:	f00b fd8d 	bl	800f63c <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003b22:	2001      	movs	r0, #1
 8003b24:	f002 fa22 	bl	8005f6c <SM_GetEncoderValue>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9e6 	bl	8004efc <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <BiasMenuInputHandler+0x28>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003b36:	230e      	movs	r3, #14
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	0801300c 	.word	0x0801300c
 8003b40:	20001ecb 	.word	0x20001ecb

08003b44 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <BiasMenuExitHandler+0x28>)
 8003b4a:	f00b fd77 	bl	800f63c <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <BiasMenuExitHandler+0x2c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003b54:	f7fd fc90 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <BiasMenuExitHandler+0x30>)
 8003b5a:	f00b fd6f 	bl	800f63c <puts>
	#endif

	eNewEvent = evIdle;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <BiasMenuExitHandler+0x34>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08013030 	.word	0x08013030
 8003b70:	20001ec9 	.word	0x20001ec9
 8003b74:	08013054 	.word	0x08013054
 8003b78:	20001ecb 	.word	0x20001ecb

08003b7c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003b80:	4bb8      	ldr	r3, [pc, #736]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b0e      	cmp	r3, #14
 8003b86:	f200 8216 	bhi.w	8003fb6 <EM_ProcessEvent+0x43a>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <EM_ProcessEvent+0x14>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003bcd 	.word	0x08003bcd
 8003b94:	08003bff 	.word	0x08003bff
 8003b98:	08003c85 	.word	0x08003c85
 8003b9c:	08003ca3 	.word	0x08003ca3
 8003ba0:	08003cef 	.word	0x08003cef
 8003ba4:	08003d21 	.word	0x08003d21
 8003ba8:	08003d53 	.word	0x08003d53
 8003bac:	08003d9f 	.word	0x08003d9f
 8003bb0:	08003dd1 	.word	0x08003dd1
 8003bb4:	08003fb7 	.word	0x08003fb7
 8003bb8:	08003e03 	.word	0x08003e03
 8003bbc:	08003e95 	.word	0x08003e95
 8003bc0:	08003ec7 	.word	0x08003ec7
 8003bc4:	08003ef7 	.word	0x08003ef7
 8003bc8:	08003f81 	.word	0x08003f81
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003bcc:	48a6      	ldr	r0, [pc, #664]	; (8003e68 <EM_ProcessEvent+0x2ec>)
 8003bce:	f00b fd35 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003bda:	f000 ffc3 	bl	8004b64 <ToplevelOutputMenuEntryHandler>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4ba0      	ldr	r3, [pc, #640]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003be4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003be6:	4ba1      	ldr	r3, [pc, #644]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	f040 81e5 	bne.w	8003fba <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003bf0:	f000 ffe4 	bl	8004bbc <ToplevelInputMenuEntryHandler>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b9a      	ldr	r3, [pc, #616]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003bfa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003bfc:	e1dd      	b.n	8003fba <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003bfe:	489c      	ldr	r0, [pc, #624]	; (8003e70 <EM_ProcessEvent+0x2f4>)
 8003c00:	f00b fd1c 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c04:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	d105      	bne.n	8003c18 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003c0c:	f000 ffc0 	bl	8004b90 <ToplevelOutputMenuExitHandler>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b93      	ldr	r3, [pc, #588]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003c18:	4b94      	ldr	r3, [pc, #592]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 ff8f 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003c26:	f000 fd85 	bl	8004734 <FuncMainMenuEntryHandler>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c30:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d108      	bne.n	8003c4c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 ff82 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003c40:	f000 fb5c 	bl	80042fc <FreqMainMenuEntryHandler>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b86      	ldr	r3, [pc, #536]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c4a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003c4c:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d108      	bne.n	8003c66 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c54:	2000      	movs	r0, #0
 8003c56:	f000 ff75 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003c5a:	f000 fe71 	bl	8004940 <GainMainMenuEntryHandler>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003c66:	4b81      	ldr	r3, [pc, #516]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	f040 81a7 	bne.w	8003fbe <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 ff67 	bl	8004b44 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003c76:	f7ff ff2d 	bl	8003ad4 <BiasMenuEntryHandler>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b79      	ldr	r3, [pc, #484]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003c82:	e19c      	b.n	8003fbe <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003c84:	487b      	ldr	r0, [pc, #492]	; (8003e74 <EM_ProcessEvent+0x2f8>)
 8003c86:	f00b fcd9 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	f040 8197 	bne.w	8003fc2 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003c94:	f000 ffa8 	bl	8004be8 <ToplevelInputMenuExitHandler>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b71      	ldr	r3, [pc, #452]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003c9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003ca0:	e18f      	b.n	8003fc2 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003ca2:	4875      	ldr	r0, [pc, #468]	; (8003e78 <EM_ProcessEvent+0x2fc>)
 8003ca4:	f00b fcca 	bl	800f63c <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d108      	bne.n	8003cc2 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 8003cb0:	f000 fd56 	bl	8004760 <FuncMainMenuExitHandler>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cba:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f000 ff41 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003cca:	f000 fd65 	bl	8004798 <FuncSignalMenuEntryHandler>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cd4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 8173 	bne.w	8003fc6 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003ce0:	f000 fdbe 	bl	8004860 <FuncSyncMenuEntryHandler>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003cea:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003cec:	e16b      	b.n	8003fc6 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003cee:	4863      	ldr	r0, [pc, #396]	; (8003e7c <EM_ProcessEvent+0x300>)
 8003cf0:	f00b fca4 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d105      	bne.n	8003d08 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003cfc:	f000 fd84 	bl	8004808 <FuncSignalMenuInputHandler>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d08:	4b58      	ldr	r3, [pc, #352]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	f040 815c 	bne.w	8003fca <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003d12:	f000 fd8f 	bl	8004834 <FuncSignalMenuExitHandler>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d1c:	701a      	strb	r2, [r3, #0]

			}

			break;
 8003d1e:	e154      	b.n	8003fca <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003d20:	4857      	ldr	r0, [pc, #348]	; (8003e80 <EM_ProcessEvent+0x304>)
 8003d22:	f00b fc8b 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d105      	bne.n	8003d3a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003d2e:	f000 fdcf 	bl	80048d0 <FuncSyncMenuInputHandler>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d38:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	f040 8145 	bne.w	8003fce <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003d44:	f000 fdda 	bl	80048fc <FuncSyncMenuExitHandler>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b45      	ldr	r3, [pc, #276]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d4e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d50:	e13d      	b.n	8003fce <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003d52:	484c      	ldr	r0, [pc, #304]	; (8003e84 <EM_ProcessEvent+0x308>)
 8003d54:	f00b fc72 	bl	800f63c <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d108      	bne.n	8003d72 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003d60:	f000 fe04 	bl	800496c <GainMainMenuExitHandler>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d6a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003d6c:	2002      	movs	r0, #2
 8003d6e:	f000 fee9 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d105      	bne.n	8003d86 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003d7a:	f000 fe13 	bl	80049a4 <GainSignalMenuEntryHandler>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	f040 8121 	bne.w	8003fd2 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003d90:	f000 fe6a 	bl	8004a68 <GainSyncMenuEntryHandler>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003d9a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003d9c:	e119      	b.n	8003fd2 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003d9e:	483a      	ldr	r0, [pc, #232]	; (8003e88 <EM_ProcessEvent+0x30c>)
 8003da0:	f00b fc4c 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d105      	bne.n	8003db8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003dac:	f000 fe30 	bl	8004a10 <GainSignalMenuInputHandler>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003db6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	f040 810a 	bne.w	8003fd6 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 8003dc2:	f000 fe3b 	bl	8004a3c <GainSignalMenuExitHandler>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dcc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003dce:	e102      	b.n	8003fd6 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003dd0:	482e      	ldr	r0, [pc, #184]	; (8003e8c <EM_ProcessEvent+0x310>)
 8003dd2:	f00b fc33 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003dd6:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d105      	bne.n	8003dea <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 8003dde:	f000 fe79 	bl	8004ad4 <GainSyncMenuInputHandler>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003de8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	f040 80f3 	bne.w	8003fda <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003df4:	f000 fe84 	bl	8004b00 <GainSyncMenuExitHandler>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003dfe:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e00:	e0eb      	b.n	8003fda <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003e02:	4823      	ldr	r0, [pc, #140]	; (8003e90 <EM_ProcessEvent+0x314>)
 8003e04:	f00b fc1a 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d108      	bne.n	8003e22 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003e10:	f000 fa8a 	bl	8004328 <FreqMainMenuExitHandler>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e1a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f000 fe91 	bl	8004b44 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003e2a:	f000 fa9f 	bl	800436c <FreqPresetMenuEntryHandler>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e34:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d105      	bne.n	8003e4a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003e3e:	f000 faf5 	bl	800442c <FreqAdjustMenuEntryHandler>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e48:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <EM_ProcessEvent+0x2f0>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f040 80c5 	bne.w	8003fde <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003e54:	f000 f8ea 	bl	800402c <FreqSweepMenuEntryHandler>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b01      	ldr	r3, [pc, #4]	; (8003e64 <EM_ProcessEvent+0x2e8>)
 8003e5e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e60:	e0bd      	b.n	8003fde <EM_ProcessEvent+0x462>
 8003e62:	bf00      	nop
 8003e64:	20001eca 	.word	0x20001eca
 8003e68:	0801306c 	.word	0x0801306c
 8003e6c:	20001ecb 	.word	0x20001ecb
 8003e70:	08013078 	.word	0x08013078
 8003e74:	08013094 	.word	0x08013094
 8003e78:	080130b0 	.word	0x080130b0
 8003e7c:	080130c8 	.word	0x080130c8
 8003e80:	080130e0 	.word	0x080130e0
 8003e84:	080130f8 	.word	0x080130f8
 8003e88:	08013110 	.word	0x08013110
 8003e8c:	08013128 	.word	0x08013128
 8003e90:	08013140 	.word	0x08013140

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003e94:	4857      	ldr	r0, [pc, #348]	; (8003ff4 <EM_ProcessEvent+0x478>)
 8003e96:	f00b fbd1 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e9a:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d105      	bne.n	8003eae <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003ea2:	f000 fa97 	bl	80043d4 <FreqPresetMenuInputHandler>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003eac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	f040 8095 	bne.w	8003fe2 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003eb8:	f000 faa2 	bl	8004400 <FreqPresetMenuExitHandler>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ec2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ec4:	e08d      	b.n	8003fe2 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003ec6:	484e      	ldr	r0, [pc, #312]	; (8004000 <EM_ProcessEvent+0x484>)
 8003ec8:	f00b fbb8 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d105      	bne.n	8003ee0 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003ed4:	f000 facc 	bl	8004470 <FreqAdjustMenuInputHandler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ede:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d17e      	bne.n	8003fe6 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003ee8:	f000 fad4 	bl	8004494 <FreqAdjustMenuExitHandler>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003ef2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ef4:	e077      	b.n	8003fe6 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003ef6:	4843      	ldr	r0, [pc, #268]	; (8004004 <EM_ProcessEvent+0x488>)
 8003ef8:	f00b fba0 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003efc:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003f04:	2007      	movs	r0, #7
 8003f06:	f000 f8ed 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f10:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d106      	bne.n	8003f28 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003f1a:	2008      	movs	r0, #8
 8003f1c:	f000 f8e2 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f26:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003f28:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d106      	bne.n	8003f3e <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003f30:	2009      	movs	r0, #9
 8003f32:	f000 f8d7 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f3c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d106      	bne.n	8003f54 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003f46:	200a      	movs	r0, #10
 8003f48:	f000 f8cc 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f52:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d106      	bne.n	8003f6a <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003f5c:	200b      	movs	r0, #11
 8003f5e:	f000 f8c1 	bl	80040e4 <FreqSweepMenuInputHandler>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f68:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d13b      	bne.n	8003fea <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003f72:	f000 f99f 	bl	80042b4 <FreqSweepMenuExitHandler>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f7c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f7e:	e034      	b.n	8003fea <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003f80:	4821      	ldr	r0, [pc, #132]	; (8004008 <EM_ProcessEvent+0x48c>)
 8003f82:	f00b fb5b 	bl	800f63c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d105      	bne.n	8003f9a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003f8e:	f7ff fdc3 	bl	8003b18 <BiasMenuInputHandler>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003f98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <EM_ProcessEvent+0x47c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d125      	bne.n	8003fee <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003fa2:	f7ff fdcf 	bl	8003b44 <BiasMenuExitHandler>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <EM_ProcessEvent+0x480>)
 8003fac:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f000 fdc8 	bl	8004b44 <ToplevelMenu_setStatus>
			}

			break;
 8003fb4:	e01b      	b.n	8003fee <EM_ProcessEvent+0x472>

		default:
			break;
 8003fb6:	bf00      	nop
 8003fb8:	e01a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fba:	bf00      	nop
 8003fbc:	e018      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fbe:	bf00      	nop
 8003fc0:	e016      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc2:	bf00      	nop
 8003fc4:	e014      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fc6:	bf00      	nop
 8003fc8:	e012      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fca:	bf00      	nop
 8003fcc:	e010      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fce:	bf00      	nop
 8003fd0:	e00e      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd2:	bf00      	nop
 8003fd4:	e00c      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fd6:	bf00      	nop
 8003fd8:	e00a      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fda:	bf00      	nop
 8003fdc:	e008      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fde:	bf00      	nop
 8003fe0:	e006      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <EM_ProcessEvent+0x474>
			break;
 8003fee:	bf00      	nop
	}

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08013158 	.word	0x08013158
 8003ff8:	20001ecb 	.word	0x20001ecb
 8003ffc:	20001eca 	.word	0x20001eca
 8004000:	08013170 	.word	0x08013170
 8004004:	08013188 	.word	0x08013188
 8004008:	080131a0 	.word	0x080131a0

0800400c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <EM_SetNewEvent+0x1c>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	7013      	strb	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20001ecb 	.word	0x20001ecb

0800402c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <FreqSweepMenuEntryHandler+0x9c>)
 8004032:	f00b fb03 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004036:	f7fd fa1f 	bl	8001478 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	d008      	beq.n	8004068 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <FreqSweepMenuEntryHandler+0xa0>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 8004064:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <FreqSweepMenuEntryHandler+0xa4>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004072:	eef4 7a47 	vcmp.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d101      	bne.n	8004080 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 800407c:	f000 fa20 	bl	80044c0 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004080:	2000      	movs	r0, #0
 8004082:	f000 fa77 	bl	8004574 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004086:	2000      	movs	r0, #0
 8004088:	f000 fad2 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800408c:	f000 fb0c 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004090:	eef0 7a40 	vmov.f32	s15, s0
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <FreqSweepMenuEntryHandler+0xa8>)
 8004096:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 800409c:	2200      	movs	r2, #0
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040a0:	2009      	movs	r0, #9
 80040a2:	f000 f81f 	bl	80040e4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040a8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <FreqSweepMenuEntryHandler+0xac>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <FreqSweepMenuEntryHandler+0xb0>)
 80040b6:	2204      	movs	r2, #4
 80040b8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <FreqSweepMenuEntryHandler+0xb4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80040c0:	230d      	movs	r3, #13
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	080131b0 	.word	0x080131b0
 80040cc:	40013400 	.word	0x40013400
 80040d0:	20000004 	.word	0x20000004
 80040d4:	20001f1c 	.word	0x20001f1c
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	20001ece 	.word	0x20001ece
 80040e0:	20001ecb 	.word	0x20001ecb

080040e4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80040ee:	4865      	ldr	r0, [pc, #404]	; (8004284 <FreqSweepMenuInputHandler+0x1a0>)
 80040f0:	f00b faa4 	bl	800f63c <puts>
	#endif



	switch(pEvent)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	3b07      	subs	r3, #7
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	f200 80ba 	bhi.w	8004272 <FreqSweepMenuInputHandler+0x18e>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <FreqSweepMenuInputHandler+0x20>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004119 	.word	0x08004119
 8004108:	08004139 	.word	0x08004139
 800410c:	08004263 	.word	0x08004263
 8004110:	0800426b 	.word	0x0800426b
 8004114:	08004179 	.word	0x08004179
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8004118:	485b      	ldr	r0, [pc, #364]	; (8004288 <FreqSweepMenuInputHandler+0x1a4>)
 800411a:	f00b fa8f 	bl	800f63c <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a5a      	ldr	r2, [pc, #360]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 800412a:	4b58      	ldr	r3, [pc, #352]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a57      	ldr	r2, [pc, #348]	; (800428c <FreqSweepMenuInputHandler+0x1a8>)
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	6013      	str	r3, [r2, #0]
			break;
 8004136:	e09d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8004138:	4855      	ldr	r0, [pc, #340]	; (8004290 <FreqSweepMenuInputHandler+0x1ac>)
 800413a:	f00b fa7f 	bl	800f63c <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	4b52      	ldr	r3, [pc, #328]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 800414c:	4b51      	ldr	r3, [pc, #324]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d004      	beq.n	800415e <FreqSweepMenuInputHandler+0x7a>
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <FreqSweepMenuInputHandler+0x86>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <FreqSweepMenuInputHandler+0x80>
 800415c:	e006      	b.n	800416c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 800415e:	f000 f9af 	bl	80044c0 <_setSweepModeDown>
					break;
 8004162:	e003      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8004164:	f000 f9dc 	bl	8004520 <_setSweepModeUp>
					break;
 8004168:	e000      	b.n	800416c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800416a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 800416c:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f9ff 	bl	8004574 <_setEncoderControlMode>

			break;
 8004176:	e07d      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004178:	4848      	ldr	r0, [pc, #288]	; (800429c <FreqSweepMenuInputHandler+0x1b8>)
 800417a:	f00b fa5f 	bl	800f63c <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800417e:	4b46      	ldr	r3, [pc, #280]	; (8004298 <FreqSweepMenuInputHandler+0x1b4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <FreqSweepMenuInputHandler+0xa8>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d00b      	beq.n	80041a2 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800418a:	e073      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800418c:	2000      	movs	r0, #0
 800418e:	f000 fa4f 	bl	8004630 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8004192:	f000 fa89 	bl	80046a8 <_getCalculatedSweepFrequencyInHertz>
 8004196:	eef0 7a40 	vmov.f32	s15, s0
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <FreqSweepMenuInputHandler+0x1bc>)
 800419c:	edc3 7a00 	vstr	s15, [r3]
					break;
 80041a0:	e05e      	b.n	8004260 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 80041a2:	4b3c      	ldr	r3, [pc, #240]	; (8004294 <FreqSweepMenuInputHandler+0x1b0>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <FreqSweepMenuInputHandler+0xcc>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d02a      	beq.n	8004204 <FreqSweepMenuInputHandler+0x120>
							break;
 80041ae:	e056      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80041b0:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	d803      	bhi.n	80041c0 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80041b8:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041ba:	220d      	movs	r2, #13
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041be:	e04e      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	dd09      	ble.n	80041f0 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e8:	ee17 2a90 	vmov	r2, s15
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80041ee:	e036      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 80041fe:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004202:	e02c      	b.n	800425e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800420c:	4293      	cmp	r3, r2
 800420e:	d904      	bls.n	800421a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 8004212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004218:	e020      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d509      	bpl.n	800424a <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <FreqSweepMenuInputHandler+0x1c8>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800423e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004242:	ee17 2a90 	vmov	r2, s15
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004248:	e008      	b.n	800425c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <FreqSweepMenuInputHandler+0x1c0>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <FreqSweepMenuInputHandler+0x1c4>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
							break;
 800425c:	bf00      	nop
					break;
 800425e:	bf00      	nop
			break;
 8004260:	e008      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004262:	2000      	movs	r0, #0
 8004264:	f000 f986 	bl	8004574 <_setEncoderControlMode>

			break;
 8004268:	e004      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 f982 	bl	8004574 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004270:	e000      	b.n	8004274 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8004272:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <FreqSweepMenuInputHandler+0x1cc>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800427a:	230d      	movs	r3, #13
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080131d4 	.word	0x080131d4
 8004288:	08013200 	.word	0x08013200
 800428c:	40000c00 	.word	0x40000c00
 8004290:	08013218 	.word	0x08013218
 8004294:	20001ecc 	.word	0x20001ecc
 8004298:	20001ecd 	.word	0x20001ecd
 800429c:	08013230 	.word	0x08013230
 80042a0:	20001f1c 	.word	0x20001f1c
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	20000004 	.word	0x20000004
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20001ecb 	.word	0x20001ecb

080042b4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 80042b8:	480c      	ldr	r0, [pc, #48]	; (80042ec <FreqSweepMenuExitHandler+0x38>)
 80042ba:	f00b f9bf 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 80042be:	f7fd f8db 	bl	8001478 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <FreqSweepMenuExitHandler+0x3c>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <FreqSweepMenuExitHandler+0x40>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <FreqSweepMenuExitHandler+0x44>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80042e6:	230a      	movs	r3, #10
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08013248 	.word	0x08013248
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	20001ece 	.word	0x20001ece
 80042f8:	20001ecb 	.word	0x20001ecb

080042fc <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8004300:	4806      	ldr	r0, [pc, #24]	; (800431c <FreqMainMenuEntryHandler+0x20>)
 8004302:	f00b f99b 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004306:	f7fd f8b7 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <FreqMainMenuEntryHandler+0x24>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <FreqMainMenuEntryHandler+0x28>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004316:	230a      	movs	r3, #10
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08013270 	.word	0x08013270
 8004320:	20001ece 	.word	0x20001ece
 8004324:	20001ecb 	.word	0x20001ecb

08004328 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 800432c:	480a      	ldr	r0, [pc, #40]	; (8004358 <FreqMainMenuExitHandler+0x30>)
 800432e:	f00b f985 	bl	800f63c <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <FreqMainMenuExitHandler+0x34>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <FreqMainMenuExitHandler+0x38>)
 800433a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004340:	f7fd f89a 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004344:	4807      	ldr	r0, [pc, #28]	; (8004364 <FreqMainMenuExitHandler+0x3c>)
 8004346:	f00b f979 	bl	800f63c <puts>
	#endif

	eNewEvent = evIdle;
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <FreqMainMenuExitHandler+0x40>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004350:	2301      	movs	r3, #1
}
 8004352:	4618      	mov	r0, r3
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	080132c0 	.word	0x080132c0
 800435c:	20001ece 	.word	0x20001ece
 8004360:	40012c00 	.word	0x40012c00
 8004364:	080132e8 	.word	0x080132e8
 8004368:	20001ecb 	.word	0x20001ecb

0800436c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8004372:	4813      	ldr	r0, [pc, #76]	; (80043c0 <FreqPresetMenuEntryHandler+0x54>)
 8004374:	f00b f962 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004378:	f7fd f87e 	bl	8001478 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 800437c:	f000 febc 	bl	80050f8 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <FreqPresetMenuEntryHandler+0x58>)
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004386:	f000 fffd 	bl	8005384 <FreqO_GetFPresetObject>
 800438a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <FreqPresetMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791a      	ldrb	r2, [r3, #4]
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800439a:	f001 f825 	bl	80053e8 <FreqO_GetFreqPresetEncoderRange>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <FreqPresetMenuEntryHandler+0x5c>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a6:	e002      	b.n	80043ae <FreqPresetMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <FreqPresetMenuEntryHandler+0x60>)
 80043aa:	f7fd f8ab 	bl	8001504 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <FreqPresetMenuEntryHandler+0x64>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043b4:	230b      	movs	r3, #11
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	08013300 	.word	0x08013300
 80043c4:	20001ece 	.word	0x20001ece
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	0801332c 	.word	0x0801332c
 80043d0:	20001ecb 	.word	0x20001ecb

080043d4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <FreqPresetMenuInputHandler+0x24>)
 80043da:	f00b f92f 	bl	800f63c <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043de:	2001      	movs	r0, #1
 80043e0:	f001 fdc4 	bl	8005f6c <SM_GetEncoderValue>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fec0 	bl	800516c <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <FreqPresetMenuInputHandler+0x28>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80043f2:	230b      	movs	r3, #11
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08013368 	.word	0x08013368
 80043fc:	20001ecb 	.word	0x20001ecb

08004400 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004404:	4806      	ldr	r0, [pc, #24]	; (8004420 <FreqPresetMenuExitHandler+0x20>)
 8004406:	f00b f919 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 800440a:	f7fd f835 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <FreqPresetMenuExitHandler+0x24>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <FreqPresetMenuExitHandler+0x28>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800441a:	230a      	movs	r3, #10
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	08013394 	.word	0x08013394
 8004424:	20001ece 	.word	0x20001ece
 8004428:	20001ecb 	.word	0x20001ecb

0800442c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8004430:	480a      	ldr	r0, [pc, #40]	; (800445c <FreqAdjustMenuEntryHandler+0x30>)
 8004432:	f00b f903 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004436:	f7fd f81f 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <FreqAdjustMenuEntryHandler+0x34>)
 800443c:	2203      	movs	r2, #3
 800443e:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <FreqAdjustMenuEntryHandler+0x38>)
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <FreqAdjustMenuEntryHandler+0x3c>)
 800444a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <FreqAdjustMenuEntryHandler+0x40>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004456:	230c      	movs	r3, #12
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	080133c0 	.word	0x080133c0
 8004460:	20001ece 	.word	0x20001ece
 8004464:	40013400 	.word	0x40013400
 8004468:	40012c00 	.word	0x40012c00
 800446c:	20001ecb 	.word	0x20001ecb

08004470 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <FreqAdjustMenuInputHandler+0x1c>)
 8004476:	f00b f8e1 	bl	800f63c <puts>
	#endif

	FreqO_AdjustFreq();
 800447a:	f000 fe49 	bl	8005110 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <FreqAdjustMenuInputHandler+0x20>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004484:	230c      	movs	r3, #12
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	080131d4 	.word	0x080131d4
 8004490:	20001ecb 	.word	0x20001ecb

08004494 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <FreqAdjustMenuExitHandler+0x20>)
 800449a:	f00b f8cf 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 800449e:	f7fc ffeb 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <FreqAdjustMenuExitHandler+0x24>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <FreqAdjustMenuExitHandler+0x28>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044ae:	230a      	movs	r3, #10
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	080133ec 	.word	0x080133ec
 80044b8:	20001ece 	.word	0x20001ece
 80044bc:	20001ecb 	.word	0x20001ecb

080044c0 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <_setSweepModeDown+0x48>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <_setSweepModeDown+0x48>)
 80044ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80044ce:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <_setSweepModeDown+0x48>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <_setSweepModeDown+0x48>)
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <_setSweepModeDown+0x4c>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <_setSweepModeDown+0x50>)
 80044ea:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <_setSweepModeDown+0x54>)
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <_setSweepModeDown+0x58>)
 80044f2:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <_setSweepModeDown+0x5c>)
 80044f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40013400 	.word	0x40013400
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004
 8004518:	477fff00 	.word	0x477fff00
 800451c:	40012c00 	.word	0x40012c00

08004520 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <_setSweepModeUp+0x40>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <_setSweepModeUp+0x40>)
 800452a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800452e:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <_setSweepModeUp+0x40>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <_setSweepModeUp+0x40>)
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <_setSweepModeUp+0x44>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <_setSweepModeUp+0x48>)
 800454a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_setSweepModeUp+0x4c>)
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <_setSweepModeUp+0x50>)
 8004552:	601a      	str	r2, [r3, #0]


}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40013400 	.word	0x40013400
 8004568:	20000004 	.word	0x20000004
 800456c:	20000000 	.word	0x20000000
 8004570:	41500000 	.word	0x41500000

08004574 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d038      	beq.n	80045f6 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <_setEncoderControlMode+0xa4>)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <_setEncoderControlMode+0xa8>)
 800458c:	220d      	movs	r2, #13
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <_setEncoderControlMode+0xa8>)
 8004592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <_setEncoderControlMode+0xac>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <_setEncoderControlMode+0x32>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d014      	beq.n	80045ce <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80045a4:	e031      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <_setEncoderControlMode+0xa8>)
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <_setEncoderControlMode+0xb0>)
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	dc00      	bgt.n	80045c4 <_setEncoderControlMode+0x50>
				break;
 80045c2:	e022      	b.n	800460a <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <_setEncoderControlMode+0xa8>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045cc:	e01d      	b.n	800460a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <_setEncoderControlMode+0xa8>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <_setEncoderControlMode+0xb8>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	d400      	bmi.n	80045ec <_setEncoderControlMode+0x78>
				break;
 80045ea:	e00e      	b.n	800460a <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <_setEncoderControlMode+0xb4>)
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <_setEncoderControlMode+0xa8>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80045f4:	e009      	b.n	800460a <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <_setEncoderControlMode+0xa4>)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <_setEncoderControlMode+0xa8>)
 80045fe:	2201      	movs	r2, #1
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <_setEncoderControlMode+0xa8>)
 8004604:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20001ecd 	.word	0x20001ecd
 800461c:	40012c00 	.word	0x40012c00
 8004620:	20001ecc 	.word	0x20001ecc
 8004624:	20000004 	.word	0x20000004
 8004628:	40013400 	.word	0x40013400
 800462c:	20000000 	.word	0x20000000

08004630 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d122      	bne.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff85 	bl	8000554 <__aeabi_ui2d>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004690 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004652:	ec44 3b10 	vmov	d0, r3, r4
 8004656:	f00c ffcb 	bl	80115f0 <pow>
 800465a:	ec51 0b10 	vmov	r0, r1, d0
 800465e:	a30e      	add	r3, pc, #56	; (adr r3, 8004698 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fe3a 	bl	80002dc <__adddf3>
 8004668:	4603      	mov	r3, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4618      	mov	r0, r3
 800466e:	4621      	mov	r1, r4
 8004670:	f7fc fac2 	bl	8000bf8 <__aeabi_d2uiz>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467e:	d002      	beq.n	8004686 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	bf00      	nop
 8004690:	00000000 	.word	0x00000000
 8004694:	40080000 	.word	0x40080000
 8004698:	00000000 	.word	0x00000000
 800469c:	40d06800 	.word	0x40d06800
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000c00 	.word	0x40000c00

080046a8 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c8:	e011      	b.n	80046ee <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <_getCalculatedSweepFrequencyInHertz+0x54>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004700 <_getCalculatedSweepFrequencyInHertz+0x58>
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	4d2037a0 	.word	0x4d2037a0

08004704 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <FreqMenu_getStatus+0x14>)
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20001ece 	.word	0x20001ece

0800471c <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <FuncMenu_getStatus+0x14>)
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20001ecf 	.word	0x20001ecf

08004734 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 8004738:	4806      	ldr	r0, [pc, #24]	; (8004754 <FuncMainMenuEntryHandler+0x20>)
 800473a:	f00a ff7f 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 800473e:	f7fc fe9b 	bl	8001478 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <FuncMainMenuEntryHandler+0x24>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <FuncMainMenuEntryHandler+0x28>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800474e:	2303      	movs	r3, #3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08013418 	.word	0x08013418
 8004758:	20001ecf 	.word	0x20001ecf
 800475c:	20001ecb 	.word	0x20001ecb

08004760 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 8004764:	4808      	ldr	r0, [pc, #32]	; (8004788 <FuncMainMenuExitHandler+0x28>)
 8004766:	f00a ff69 	bl	800f63c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <FuncMainMenuExitHandler+0x2c>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004770:	f7fc fe82 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <FuncMainMenuExitHandler+0x30>)
 8004776:	f00a ff61 	bl	800f63c <puts>
	#endif

	eNewEvent = evIdle;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <FuncMainMenuExitHandler+0x34>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	08013468 	.word	0x08013468
 800478c:	20001ecf 	.word	0x20001ecf
 8004790:	08013490 	.word	0x08013490
 8004794:	20001ecb 	.word	0x20001ecb

08004798 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 800479e:	4815      	ldr	r0, [pc, #84]	; (80047f4 <FuncSignalMenuEntryHandler+0x5c>)
 80047a0:	f00a ff4c 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 80047a4:	f7fc fe68 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80047a8:	f000 fe2a 	bl	8005400 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <FuncSignalMenuEntryHandler+0x60>)
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80047b2:	2000      	movs	r0, #0
 80047b4:	f001 fa3a 	bl	8005c2c <SM_GetOutputChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80047be:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	785a      	ldrb	r2, [r3, #1]
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80047ce:	f000 ffbf 	bl	8005750 <FuncO_GetFuncPresetEncoderRange>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <FuncSignalMenuEntryHandler+0x64>)
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80047da:	e002      	b.n	80047e2 <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80047dc:	4808      	ldr	r0, [pc, #32]	; (8004800 <FuncSignalMenuEntryHandler+0x68>)
 80047de:	f7fc fe91 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <FuncSignalMenuEntryHandler+0x6c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80047e8:	2304      	movs	r3, #4
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	080134a8 	.word	0x080134a8
 80047f8:	20001ecf 	.word	0x20001ecf
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	080134d4 	.word	0x080134d4
 8004804:	20001ecb 	.word	0x20001ecb

08004808 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 800480c:	4807      	ldr	r0, [pc, #28]	; (800482c <FuncSignalMenuInputHandler+0x24>)
 800480e:	f00a ff15 	bl	800f63c <puts>
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004812:	2001      	movs	r0, #1
 8004814:	f001 fbaa 	bl	8005f6c <SM_GetEncoderValue>
 8004818:	4603      	mov	r3, r0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fdfc 	bl	8005418 <FuncO_MapEncoderPositionToSignalOutput>
	eNewEvent = evBlueBtn;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <FuncSignalMenuInputHandler+0x28>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004826:	2304      	movs	r3, #4
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08013508 	.word	0x08013508
 8004830:	20001ecb 	.word	0x20001ecb

08004834 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 8004838:	4806      	ldr	r0, [pc, #24]	; (8004854 <FuncSignalMenuExitHandler+0x20>)
 800483a:	f00a feff 	bl	800f63c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <FuncSignalMenuExitHandler+0x24>)
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004844:	f7fc fe18 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <FuncSignalMenuExitHandler+0x28>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800484e:	2303      	movs	r3, #3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	08013534 	.word	0x08013534
 8004858:	20001ecf 	.word	0x20001ecf
 800485c:	20001ecb 	.word	0x20001ecb

08004860 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuEntryHandler Event captured\n");
 8004866:	4815      	ldr	r0, [pc, #84]	; (80048bc <FuncSyncMenuEntryHandler+0x5c>)
 8004868:	f00a fee8 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 800486c:	f7fc fe04 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004870:	f000 fdc6 	bl	8005400 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <FuncSyncMenuEntryHandler+0x60>)
 8004876:	2203      	movs	r2, #3
 8004878:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800487a:	2001      	movs	r0, #1
 800487c:	f001 f9d6 	bl	8005c2c <SM_GetOutputChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004886:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <FuncSyncMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	785a      	ldrb	r2, [r3, #1]
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004896:	f000 ff5b 	bl	8005750 <FuncO_GetFuncPresetEncoderRange>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <FuncSyncMenuEntryHandler+0x64>)
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80048a2:	e002      	b.n	80048aa <FuncSyncMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <FuncSyncMenuEntryHandler+0x68>)
 80048a6:	f7fc fe2d 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <FuncSyncMenuEntryHandler+0x6c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048b0:	2305      	movs	r3, #5
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08013560 	.word	0x08013560
 80048c0:	20001ecf 	.word	0x20001ecf
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	080134d4 	.word	0x080134d4
 80048cc:	20001ecb 	.word	0x20001ecb

080048d0 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuInputHandler Event captured\n");
 80048d4:	4807      	ldr	r0, [pc, #28]	; (80048f4 <FuncSyncMenuInputHandler+0x24>)
 80048d6:	f00a feb1 	bl	800f63c <puts>
	#endif


	FuncO_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80048da:	2001      	movs	r0, #1
 80048dc:	f001 fb46 	bl	8005f6c <SM_GetEncoderValue>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdd2 	bl	800548c <FuncO_MapEncoderPositionToSyncOutput>
	eNewEvent = evBlueBtn;
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <FuncSyncMenuInputHandler+0x28>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80048ee:	2305      	movs	r3, #5
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08013588 	.word	0x08013588
 80048f8:	20001ecb 	.word	0x20001ecb

080048fc <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuExitHandler Event captured\n");
 8004900:	4806      	ldr	r0, [pc, #24]	; (800491c <FuncSyncMenuExitHandler+0x20>)
 8004902:	f00a fe9b 	bl	800f63c <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <FuncSyncMenuExitHandler+0x24>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800490c:	f7fc fdb4 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <FuncSyncMenuExitHandler+0x28>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004916:	2303      	movs	r3, #3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	080135b0 	.word	0x080135b0
 8004920:	20001ecf 	.word	0x20001ecf
 8004924:	20001ecb 	.word	0x20001ecb

08004928 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <GainMenu_getStatus+0x14>)
 800492e:	781b      	ldrb	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20001ed0 	.word	0x20001ed0

08004940 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 8004944:	4806      	ldr	r0, [pc, #24]	; (8004960 <GainMainMenuEntryHandler+0x20>)
 8004946:	f00a fe79 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 800494a:	f7fc fd95 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <GainMainMenuEntryHandler+0x24>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <GainMainMenuEntryHandler+0x28>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800495a:	2306      	movs	r3, #6
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	080135d8 	.word	0x080135d8
 8004964:	20001ed0 	.word	0x20001ed0
 8004968:	20001ecb 	.word	0x20001ecb

0800496c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <GainMainMenuExitHandler+0x28>)
 8004972:	f00a fe63 	bl	800f63c <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <GainMainMenuExitHandler+0x2c>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800497c:	f7fc fd7c 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004980:	4806      	ldr	r0, [pc, #24]	; (800499c <GainMainMenuExitHandler+0x30>)
 8004982:	f00a fe5b 	bl	800f63c <puts>
	#endif

	eNewEvent = evIdle;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <GainMainMenuExitHandler+0x34>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800498c:	2301      	movs	r3, #1
}
 800498e:	4618      	mov	r0, r3
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08013628 	.word	0x08013628
 8004998:	20001ed0 	.word	0x20001ed0
 800499c:	08013650 	.word	0x08013650
 80049a0:	20001ecb 	.word	0x20001ecb

080049a4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 80049aa:	4814      	ldr	r0, [pc, #80]	; (80049fc <GainSignalMenuEntryHandler+0x58>)
 80049ac:	f00a fe46 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 80049b0:	f7fc fd62 	bl	8001478 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80049b4:	f001 fb60 	bl	8006078 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80049b8:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <GainSignalMenuEntryHandler+0x5c>)
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80049be:	2000      	movs	r0, #0
 80049c0:	f001 f934 	bl	8005c2c <SM_GetOutputChannel>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80049ca:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <GainSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8b1a      	ldrh	r2, [r3, #24]
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <GainSignalMenuEntryHandler+0x60>)
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <GainSignalMenuEntryHandler+0x60>)
 80049dc:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80049e2:	e002      	b.n	80049ea <GainSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80049e4:	4808      	ldr	r0, [pc, #32]	; (8004a08 <GainSignalMenuEntryHandler+0x64>)
 80049e6:	f7fc fd8d 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <GainSignalMenuEntryHandler+0x68>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80049f0:	2307      	movs	r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	08013668 	.word	0x08013668
 8004a00:	20001ed0 	.word	0x20001ed0
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	08013694 	.word	0x08013694
 8004a0c:	20001ecb 	.word	0x20001ecb

08004a10 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004a14:	4807      	ldr	r0, [pc, #28]	; (8004a34 <GainSignalMenuInputHandler+0x24>)
 8004a16:	f00a fe11 	bl	800f63c <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f001 faa6 	bl	8005f6c <SM_GetEncoderValue>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fc9e 	bl	8006364 <VPP_MapEncoderPositionToSignalOutput>

	eNewEvent = evYellowBtn;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <GainSignalMenuInputHandler+0x28>)
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a2e:	2307      	movs	r3, #7
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	080136cc 	.word	0x080136cc
 8004a38:	20001ecb 	.word	0x20001ecb

08004a3c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 8004a40:	4806      	ldr	r0, [pc, #24]	; (8004a5c <GainSignalMenuExitHandler+0x20>)
 8004a42:	f00a fdfb 	bl	800f63c <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <GainSignalMenuExitHandler+0x24>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004a4c:	f7fc fd14 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <GainSignalMenuExitHandler+0x28>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a56:	2306      	movs	r3, #6
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	080136f8 	.word	0x080136f8
 8004a60:	20001ed0 	.word	0x20001ed0
 8004a64:	20001ecb 	.word	0x20001ecb

08004a68 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuEntryHandler Event captured\n");
 8004a6e:	4814      	ldr	r0, [pc, #80]	; (8004ac0 <GainSyncMenuEntryHandler+0x58>)
 8004a70:	f00a fde4 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004a74:	f7fc fd00 	bl	8001478 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004a78:	f001 fafe 	bl	8006078 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <GainSyncMenuEntryHandler+0x5c>)
 8004a7e:	2203      	movs	r2, #3
 8004a80:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004a82:	2001      	movs	r0, #1
 8004a84:	f001 f8d2 	bl	8005c2c <SM_GetOutputChannel>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a8e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <GainSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8b1a      	ldrh	r2, [r3, #24]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <GainSyncMenuEntryHandler+0x60>)
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <GainSyncMenuEntryHandler+0x60>)
 8004aa0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa6:	e002      	b.n	8004aae <GainSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <GainSyncMenuEntryHandler+0x64>)
 8004aaa:	f7fc fd2b 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <GainSyncMenuEntryHandler+0x68>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004ab4:	2308      	movs	r3, #8
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	08013724 	.word	0x08013724
 8004ac4:	20001ed0 	.word	0x20001ed0
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	08013694 	.word	0x08013694
 8004ad0:	20001ecb 	.word	0x20001ecb

08004ad4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuInputHandler Event captured\n");
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <GainSyncMenuInputHandler+0x24>)
 8004ada:	f00a fdaf 	bl	800f63c <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f001 fa44 	bl	8005f6c <SM_GetEncoderValue>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fc76 	bl	80063d8 <VPP_MapEncoderPositionToSyncOutput>

	eNewEvent = evYellowBtn;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <GainSyncMenuInputHandler+0x28>)
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004af2:	2308      	movs	r3, #8
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	0801374c 	.word	0x0801374c
 8004afc:	20001ecb 	.word	0x20001ecb

08004b00 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuExitHandler Event captured\n");
 8004b04:	4806      	ldr	r0, [pc, #24]	; (8004b20 <GainSyncMenuExitHandler+0x20>)
 8004b06:	f00a fd99 	bl	800f63c <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <GainSyncMenuExitHandler+0x24>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b10:	f7fc fcb2 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <GainSyncMenuExitHandler+0x28>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b1a:	2306      	movs	r3, #6
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	08013774 	.word	0x08013774
 8004b24:	20001ed0 	.word	0x20001ed0
 8004b28:	20001ecb 	.word	0x20001ecb

08004b2c <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <ToplevelMenu_getStatus+0x14>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000008 	.word	0x20000008

08004b44 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004b4e:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <ToplevelMenu_setStatus+0x1c>)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	7013      	strb	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000008 	.word	0x20000008

08004b64 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <ToplevelOutputMenuEntryHandler+0x20>)
 8004b6a:	f00a fd67 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004b6e:	f7fc fc83 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <ToplevelOutputMenuEntryHandler+0x24>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <ToplevelOutputMenuEntryHandler+0x28>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	08013838 	.word	0x08013838
 8004b88:	20000008 	.word	0x20000008
 8004b8c:	20001ecb 	.word	0x20001ecb

08004b90 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004b94:	4806      	ldr	r0, [pc, #24]	; (8004bb0 <ToplevelOutputMenuExitHandler+0x20>)
 8004b96:	f00a fd51 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004b9a:	f7fc fc6d 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <ToplevelOutputMenuExitHandler+0x24>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <ToplevelOutputMenuExitHandler+0x28>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	08013898 	.word	0x08013898
 8004bb4:	20000008 	.word	0x20000008
 8004bb8:	20001ecb 	.word	0x20001ecb

08004bbc <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004bc0:	4806      	ldr	r0, [pc, #24]	; (8004bdc <ToplevelInputMenuEntryHandler+0x20>)
 8004bc2:	f00a fd3b 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004bc6:	f7fc fc57 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <ToplevelInputMenuEntryHandler+0x24>)
 8004bcc:	2203      	movs	r2, #3
 8004bce:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <ToplevelInputMenuEntryHandler+0x28>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004bd6:	2302      	movs	r3, #2
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	080138c8 	.word	0x080138c8
 8004be0:	20000008 	.word	0x20000008
 8004be4:	20001ecb 	.word	0x20001ecb

08004be8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004bec:	4806      	ldr	r0, [pc, #24]	; (8004c08 <ToplevelInputMenuExitHandler+0x20>)
 8004bee:	f00a fd25 	bl	800f63c <puts>
	#endif

	DM_RefreshScreen();
 8004bf2:	f7fc fc41 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <ToplevelInputMenuExitHandler+0x24>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <ToplevelInputMenuExitHandler+0x28>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08013928 	.word	0x08013928
 8004c0c:	20000008 	.word	0x20000008
 8004c10:	20001ecb 	.word	0x20001ecb

08004c14 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4013      	ands	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d101      	bne.n	8004c2e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40010400 	.word	0x40010400

08004c40 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <IM_Init+0x1c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <IM_Init+0x1c>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40014400 	.word	0x40014400

08004c60 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11c      	bne.n	8004caa <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004c7e:	edd3 7a00 	vldr	s15, [r3]
 8004c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	db09      	blt.n	8004ca0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c98:	ee17 2a90 	vmov	r2, s15
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004c9e:	e029      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ca8:	e024      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d104      	bne.n	8004cbc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cba:	e01b      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004cbc:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cc8:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004cca:	edd3 7a00 	vldr	s15, [r3]
 8004cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd6:	d809      	bhi.n	8004cec <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cea:	e003      	b.n	8004cf4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	20000004 	.word	0x20000004
 8004d0c:	20000000 	.word	0x20000000

08004d10 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <IM_BTN1_EXTI14_Handler+0x44>)
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d28:	dd0c      	ble.n	8004d44 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004d2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d2e:	f7ff ff71 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7ff f967 	bl	800400c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004d3e:	4807      	ldr	r0, [pc, #28]	; (8004d5c <IM_BTN1_EXTI14_Handler+0x4c>)
 8004d40:	f00a fc7c 	bl	800f63c <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <IM_BTN1_EXTI14_Handler+0x48>)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	8013      	strh	r3, [r2, #0]


}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40014400 	.word	0x40014400
 8004d58:	20001ed2 	.word	0x20001ed2
 8004d5c:	08013954 	.word	0x08013954

08004d60 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <IM_BTN2_EXTI15_Handler+0x44>)
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d78:	dd0c      	ble.n	8004d94 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004d7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d7e:	f7ff ff49 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004d88:	2003      	movs	r0, #3
 8004d8a:	f7ff f93f 	bl	800400c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <IM_BTN2_EXTI15_Handler+0x4c>)
 8004d90:	f00a fc54 	bl	800f63c <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	8013      	strh	r3, [r2, #0]


}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40014400 	.word	0x40014400
 8004da8:	20001ed4 	.word	0x20001ed4
 8004dac:	0801396c 	.word	0x0801396c

08004db0 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <IM_BTN3_EXTI0_Handler+0x40>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc8:	dd0b      	ble.n	8004de2 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7ff ff22 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004dd6:	2004      	movs	r0, #4
 8004dd8:	f7ff f918 	bl	800400c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004ddc:	4806      	ldr	r0, [pc, #24]	; (8004df8 <IM_BTN3_EXTI0_Handler+0x48>)
 8004dde:	f00a fc2d 	bl	800f63c <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004de2:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	8013      	strh	r3, [r2, #0]


}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40014400 	.word	0x40014400
 8004df4:	20001ed6 	.word	0x20001ed6
 8004df8:	08013988 	.word	0x08013988

08004dfc <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <IM_BTN4_EXTI1_Handler+0x40>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e0c:	8812      	ldrh	r2, [r2, #0]
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	dd0b      	ble.n	8004e2e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004e16:	2002      	movs	r0, #2
 8004e18:	f7ff fefc 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004e22:	2002      	movs	r0, #2
 8004e24:	f7ff f8f2 	bl	800400c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004e28:	4806      	ldr	r0, [pc, #24]	; (8004e44 <IM_BTN4_EXTI1_Handler+0x48>)
 8004e2a:	f00a fc07 	bl	800f63c <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <IM_BTN4_EXTI1_Handler+0x44>)
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	8013      	strh	r3, [r2, #0]


}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	20001ed8 	.word	0x20001ed8
 8004e44:	080139a0 	.word	0x080139a0

08004e48 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <IM_ENC_EXTI2_Handler+0x40>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <IM_ENC_EXTI2_Handler+0x44>)
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e60:	dd0b      	ble.n	8004e7a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004e62:	2004      	movs	r0, #4
 8004e64:	f7ff fed6 	bl	8004c14 <LL_EXTI_IsActiveFlag_0_31>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004e6e:	2006      	movs	r0, #6
 8004e70:	f7ff f8cc 	bl	800400c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004e74:	4806      	ldr	r0, [pc, #24]	; (8004e90 <IM_ENC_EXTI2_Handler+0x48>)
 8004e76:	f00a fbe1 	bl	800f63c <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <IM_ENC_EXTI2_Handler+0x44>)
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	8013      	strh	r3, [r2, #0]


}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	20001eda 	.word	0x20001eda
 8004e90:	080139b8 	.word	0x080139b8

08004e94 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea4:	d10b      	bne.n	8004ebe <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004ea6:	2005      	movs	r0, #5
 8004ea8:	f7ff f8b0 	bl	800400c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <IM_ENC_DIRF_Handler+0x34>)
 8004eae:	f00a fbc5 	bl	800f63c <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <IM_ENC_DIRF_Handler+0x30>)
 8004eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ebc:	6113      	str	r3, [r2, #16]

	}
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	080139d4 	.word	0x080139d4

08004ecc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <BO_GetBiasPolarity+0x14>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000009 	.word	0x20000009

08004ee4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <BO_GetDcBiasEncoderValue+0x14>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2000000a 	.word	0x2000000a

08004efc <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004f06:	2000      	movs	r0, #0
 8004f08:	f001 f830 	bl	8005f6c <SM_GetEncoderValue>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8004f12:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f1a:	d214      	bcs.n	8004f46 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f30:	2200      	movs	r2, #0
 8004f32:	2110      	movs	r1, #16
 8004f34:	4814      	ldr	r0, [pc, #80]	; (8004f88 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004f36:	f004 fdab 	bl	8009a90 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2108      	movs	r1, #8
 8004f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f42:	f005 fd67 	bl	800aa14 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004f4c:	d314      	bcc.n	8004f78 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004f62:	2200      	movs	r2, #0
 8004f64:	2110      	movs	r1, #16
 8004f66:	4808      	ldr	r0, [pc, #32]	; (8004f88 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004f68:	f004 fd92 	bl	8009a90 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2108      	movs	r1, #8
 8004f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f74:	f005 fd4e 	bl	800aa14 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	2000000a 	.word	0x2000000a
 8004f84:	20000009 	.word	0x20000009
 8004f88:	200026a8 	.word	0x200026a8

08004f8c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004f90:	2110      	movs	r1, #16
 8004f92:	4803      	ldr	r0, [pc, #12]	; (8004fa0 <BO_GetOutputBias+0x14>)
 8004f94:	f004 fdc2 	bl	8009b1c <HAL_DAC_GetValue>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200026a8 	.word	0x200026a8

08004fa4 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	e06b      	b.n	8005088 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004fb0:	493a      	ldr	r1, [pc, #232]	; (800509c <DT_InitRegister+0xf8>)
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d129      	bne.n	800501a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004fc6:	4935      	ldr	r1, [pc, #212]	; (800509c <DT_InitRegister+0xf8>)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a31      	ldr	r2, [pc, #196]	; (80050a0 <DT_InitRegister+0xfc>)
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fe6:	492d      	ldr	r1, [pc, #180]	; (800509c <DT_InitRegister+0xf8>)
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	edd3 7a00 	vldr	s15, [r3]
 8004ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005002:	ee17 0a90 	vmov	r0, s15
 8005006:	4925      	ldr	r1, [pc, #148]	; (800509c <DT_InitRegister+0xf8>)
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	330c      	adds	r3, #12
 8005016:	6018      	str	r0, [r3, #0]
 8005018:	e033      	b.n	8005082 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800501a:	4920      	ldr	r1, [pc, #128]	; (800509c <DT_InitRegister+0xf8>)
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3304      	adds	r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <DT_InitRegister+0xfc>)
 800502e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005032:	481a      	ldr	r0, [pc, #104]	; (800509c <DT_InitRegister+0xf8>)
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4403      	add	r3, r0
 8005040:	3308      	adds	r3, #8
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fbb1 f3f3 	udiv	r3, r1, r3
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005050:	4912      	ldr	r1, [pc, #72]	; (800509c <DT_InitRegister+0xf8>)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3310      	adds	r3, #16
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800506c:	ee17 0a90 	vmov	r0, s15
 8005070:	490a      	ldr	r1, [pc, #40]	; (800509c <DT_InitRegister+0xf8>)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	330c      	adds	r3, #12
 8005080:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3301      	adds	r3, #1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b0d      	cmp	r3, #13
 800508c:	dd90      	ble.n	8004fb0 <DT_InitRegister+0xc>
	}
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	00155cc0 	.word	0x00155cc0

080050a4 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e016      	b.n	80050e0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80050b2:	4910      	ldr	r1, [pc, #64]	; (80050f4 <DT_GetRegisterByEnum+0x50>)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3304      	adds	r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d107      	bne.n	80050da <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <DT_GetRegisterByEnum+0x50>)
 80050d6:	4413      	add	r3, r2
 80050d8:	e006      	b.n	80050e8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b0d      	cmp	r3, #13
 80050e4:	dde5      	ble.n	80050b2 <DT_GetRegisterByEnum+0xe>

	return 0;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2000000c 	.word	0x2000000c

080050f8 <FreqO_ResetLastEncoderValue>:
uint8_t FreqPresetEncoderRange = 56;

uint16_t freq_last_encoder_value = 0;

void FreqO_ResetLastEncoderValue()
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <FreqO_ResetLastEncoderValue+0x14>)
 80050fe:	2200      	movs	r2, #0
 8005100:	801a      	strh	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20001edc 	.word	0x20001edc

08005110 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8005116:	2000      	movs	r0, #0
 8005118:	f000 ff28 	bl	8005f6c <SM_GetEncoderValue>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	4b10      	ldr	r3, [pc, #64]	; (8005164 <FreqO_AdjustFreq+0x54>)
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005124:	2000      	movs	r0, #0
 8005126:	f000 fd81 	bl	8005c2c <SM_GetOutputChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d110      	bne.n	800515c <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <FreqO_AdjustFreq+0x58>)
 800513c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005142:	2000      	movs	r0, #0
 8005144:	f000 ff12 	bl	8005f6c <SM_GetEncoderValue>
 8005148:	4603      	mov	r3, r0
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <FreqO_AdjustFreq+0x58>)
 8005150:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <FreqO_AdjustFreq+0x58>)
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <FreqO_AdjustFreq+0x58>)
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	6393      	str	r3, [r2, #56]	; 0x38
		}
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40013400 	.word	0x40013400
 8005168:	40000400 	.word	0x40000400

0800516c <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b38      	cmp	r3, #56	; 0x38
 800517a:	f200 80b4 	bhi.w	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <FreqO_MapEncoderPositionToBothOutput+0x18>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005269 	.word	0x08005269
 8005188:	08005269 	.word	0x08005269
 800518c:	08005269 	.word	0x08005269
 8005190:	08005269 	.word	0x08005269
 8005194:	08005271 	.word	0x08005271
 8005198:	08005271 	.word	0x08005271
 800519c:	08005271 	.word	0x08005271
 80051a0:	08005271 	.word	0x08005271
 80051a4:	08005279 	.word	0x08005279
 80051a8:	08005279 	.word	0x08005279
 80051ac:	08005279 	.word	0x08005279
 80051b0:	08005279 	.word	0x08005279
 80051b4:	08005281 	.word	0x08005281
 80051b8:	08005281 	.word	0x08005281
 80051bc:	08005281 	.word	0x08005281
 80051c0:	08005281 	.word	0x08005281
 80051c4:	08005289 	.word	0x08005289
 80051c8:	08005289 	.word	0x08005289
 80051cc:	08005289 	.word	0x08005289
 80051d0:	08005289 	.word	0x08005289
 80051d4:	08005291 	.word	0x08005291
 80051d8:	08005291 	.word	0x08005291
 80051dc:	08005291 	.word	0x08005291
 80051e0:	08005291 	.word	0x08005291
 80051e4:	0800529b 	.word	0x0800529b
 80051e8:	0800529b 	.word	0x0800529b
 80051ec:	0800529b 	.word	0x0800529b
 80051f0:	0800529b 	.word	0x0800529b
 80051f4:	080052a5 	.word	0x080052a5
 80051f8:	080052a5 	.word	0x080052a5
 80051fc:	080052a5 	.word	0x080052a5
 8005200:	080052e7 	.word	0x080052e7
 8005204:	080052a5 	.word	0x080052a5
 8005208:	080052af 	.word	0x080052af
 800520c:	080052af 	.word	0x080052af
 8005210:	080052af 	.word	0x080052af
 8005214:	080052af 	.word	0x080052af
 8005218:	080052b9 	.word	0x080052b9
 800521c:	080052b9 	.word	0x080052b9
 8005220:	080052b9 	.word	0x080052b9
 8005224:	080052b9 	.word	0x080052b9
 8005228:	080052c3 	.word	0x080052c3
 800522c:	080052c3 	.word	0x080052c3
 8005230:	080052c3 	.word	0x080052c3
 8005234:	080052c3 	.word	0x080052c3
 8005238:	080052cd 	.word	0x080052cd
 800523c:	080052cd 	.word	0x080052cd
 8005240:	080052cd 	.word	0x080052cd
 8005244:	080052cd 	.word	0x080052cd
 8005248:	080052d7 	.word	0x080052d7
 800524c:	080052d7 	.word	0x080052d7
 8005250:	080052d7 	.word	0x080052d7
 8005254:	080052d7 	.word	0x080052d7
 8005258:	080052df 	.word	0x080052df
 800525c:	080052df 	.word	0x080052df
 8005260:	080052df 	.word	0x080052df
 8005264:	080052df 	.word	0x080052df
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8005268:	2001      	movs	r0, #1
 800526a:	f000 f845 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 800526e:	e03a      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8005270:	200a      	movs	r0, #10
 8005272:	f000 f841 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 8005276:	e036      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8005278:	2032      	movs	r0, #50	; 0x32
 800527a:	f000 f83d 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 800527e:	e032      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8005280:	2064      	movs	r0, #100	; 0x64
 8005282:	f000 f839 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 8005286:	e02e      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8005288:	20fa      	movs	r0, #250	; 0xfa
 800528a:	f000 f835 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 800528e:	e02a      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8005290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005294:	f000 f830 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 8005298:	e025      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800529a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800529e:	f000 f82b 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052a2:	e020      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 80052a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052a8:	f000 f826 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052ac:	e01b      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 80052ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80052b2:	f000 f821 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052b6:	e016      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 80052b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80052bc:	f000 f81c 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052c0:	e011      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 80052c2:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80052c6:	f000 f817 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052ca:	e00c      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 80052cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052d0:	f000 f812 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052d4:	e007      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 80052d6:	4806      	ldr	r0, [pc, #24]	; (80052f0 <FreqO_MapEncoderPositionToBothOutput+0x184>)
 80052d8:	f000 f80e 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052dc:	e003      	b.n	80052e6 <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80052de:	4805      	ldr	r0, [pc, #20]	; (80052f4 <FreqO_MapEncoderPositionToBothOutput+0x188>)
 80052e0:	f000 f80a 	bl	80052f8 <FreqO_ApplyPreset>
			break;
 80052e4:	bf00      	nop
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = FPRESET_100KHZ;
		FreqO_ApplyPreset_Fast(_FindFPresetObjectByIndex(tmpFreqIndex));
	}
	freq_last_encoder_value = pEncValue;
	*/
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	000124f8 	.word	0x000124f8
 80052f4:	000186a0 	.word	0x000186a0

080052f8 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fecf 	bl	80050a4 <DT_GetRegisterByEnum>
 8005306:	6178      	str	r0, [r7, #20]
	if(tmpDT)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02e      	beq.n	800536c <FreqO_ApplyPreset+0x74>
	{
		OUTPUT_TIMER->PSC = tmpDT->psc;
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <FreqO_ApplyPreset+0x7c>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpDT->arr;
 8005316:	4a17      	ldr	r2, [pc, #92]	; (8005374 <FreqO_ApplyPreset+0x7c>)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800531e:	2000      	movs	r0, #0
 8005320:	f000 fc84 	bl	8005c2c <SM_GetOutputChannel>
 8005324:	4603      	mov	r3, r0
 8005326:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	74fb      	strb	r3, [r7, #19]
		if(tmpOut == PWM_FUNC_MODE)
 800532e:	7cfb      	ldrb	r3, [r7, #19]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d10d      	bne.n	8005350 <FreqO_ApplyPreset+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 8005334:	4b10      	ldr	r3, [pc, #64]	; (8005378 <FreqO_ApplyPreset+0x80>)
 8005336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = tmpDT->arr/2;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <FreqO_ApplyPreset+0x80>)
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <FreqO_ApplyPreset+0x80>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <FreqO_ApplyPreset+0x80>)
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	6393      	str	r3, [r2, #56]	; 0x38
		}

		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmpFreq = FreqO_FindFPresetObject(pPresetEnum);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f823 	bl	800539c <FreqO_FindFPresetObject>
 8005356:	60f8      	str	r0, [r7, #12]
		if(tmpFreq)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <FreqO_ApplyPreset+0x6e>
		{
			freq_profile = tmpFreq;
 800535e:	4a07      	ldr	r2, [pc, #28]	; (800537c <FreqO_ApplyPreset+0x84>)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6013      	str	r3, [r2, #0]
		}



	}
}
 8005364:	e002      	b.n	800536c <FreqO_ApplyPreset+0x74>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8005366:	4806      	ldr	r0, [pc, #24]	; (8005380 <FreqO_ApplyPreset+0x88>)
 8005368:	f7fc f8cc 	bl	8001504 <DM_SetErrorDebugMsg>
}
 800536c:	bf00      	nop
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40013400 	.word	0x40013400
 8005378:	40000400 	.word	0x40000400
 800537c:	20000198 	.word	0x20000198
 8005380:	080139ec 	.word	0x080139ec

08005384 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
	return freq_profile;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <FreqO_GetFPresetObject+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000198 	.word	0x20000198

0800539c <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00e      	b.n	80053c8 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <FreqO_FindFPresetObject+0x44>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d104      	bne.n	80053c2 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <FreqO_FindFPresetObject+0x44>)
 80053be:	4413      	add	r3, r2
 80053c0:	e009      	b.n	80053d6 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b0d      	cmp	r3, #13
 80053cc:	dded      	ble.n	80053aa <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80053ce:	4805      	ldr	r0, [pc, #20]	; (80053e4 <FreqO_FindFPresetObject+0x48>)
 80053d0:	f7fc f898 	bl	8001504 <DM_SetErrorDebugMsg>
	return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000128 	.word	0x20000128
 80053e4:	08013a14 	.word	0x08013a14

080053e8 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <FreqO_GetFreqPresetEncoderRange+0x14>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000124 	.word	0x20000124

08005400 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <FuncO_ResetLastEncoderValue+0x14>)
 8005406:	2200      	movs	r2, #0
 8005408:	801a      	strh	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20001f0a 	.word	0x20001f0a

08005418 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005422:	2000      	movs	r0, #0
 8005424:	f000 fc02 	bl	8005c2c <SM_GetOutputChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	429a      	cmp	r2, r3
 800543a:	d90c      	bls.n	8005456 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	3301      	adds	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b06      	cmp	r3, #6
 8005446:	d901      	bls.n	800544c <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005448:	2306      	movs	r3, #6
 800544a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f856 	bl	8005500 <FuncO_ApplyPresetToSignal>
 8005454:	e010      	b.n	8005478 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	429a      	cmp	r2, r3
 800545e:	d20b      	bcs.n	8005478 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	3b01      	subs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d901      	bls.n	8005470 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f844 	bl	8005500 <FuncO_ApplyPresetToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	8013      	strh	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20001f0a 	.word	0x20001f0a

0800548c <FuncO_MapEncoderPositionToSyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8005496:	2001      	movs	r0, #1
 8005498:	f000 fbc8 	bl	8005c2c <SM_GetOutputChannel>
 800549c:	4603      	mov	r3, r0
 800549e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d90c      	bls.n	80054ca <FuncO_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpFunc++;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	3301      	adds	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d901      	bls.n	80054c0 <FuncO_MapEncoderPositionToSyncOutput+0x34>
 80054bc:	2306      	movs	r3, #6
 80054be:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f8e4 	bl	8005690 <FuncO_ApplyPresetToSync>
 80054c8:	e010      	b.n	80054ec <FuncO_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d20b      	bcs.n	80054ec <FuncO_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpFunc--;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b06      	cmp	r3, #6
 80054de:	d901      	bls.n	80054e4 <FuncO_MapEncoderPositionToSyncOutput+0x58>
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f8d2 	bl	8005690 <FuncO_ApplyPresetToSync>
	}
	func_last_encoder_value = pEncoderValue;
 80054ec:	4a03      	ldr	r2, [pc, #12]	; (80054fc <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	8013      	strh	r3, [r2, #0]
}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20001f0a 	.word	0x20001f0a

08005500 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b087      	sub	sp, #28
 8005504:	af02      	add	r7, sp, #8
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800550a:	79fc      	ldrb	r4, [r7, #7]
 800550c:	2000      	movs	r0, #0
 800550e:	f000 fb8d 	bl	8005c2c <SM_GetOutputChannel>
 8005512:	4601      	mov	r1, r0
 8005514:	00e3      	lsls	r3, r4, #3
 8005516:	4a59      	ldr	r2, [pc, #356]	; (800567c <FuncO_ApplyPresetToSignal+0x17c>)
 8005518:	4413      	add	r3, r2
 800551a:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d113      	bne.n	800554c <FuncO_ApplyPresetToSignal+0x4c>
	{
		  // set preset for PGA gain and dsp amplitude adjustment
		  eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005524:	2000      	movs	r0, #0
 8005526:	f000 fb81 	bl	8005c2c <SM_GetOutputChannel>
 800552a:	4603      	mov	r3, r0
 800552c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	737b      	strb	r3, [r7, #13]
		  VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005534:	7b7b      	ldrb	r3, [r7, #13]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fdaa 	bl	8006090 <VPP_ApplyProfileToSignal>

		  // switch output signal from DAC to PWM
		  SM_DisableDacToSignal();
 800553c:	f000 fd0c 	bl	8005f58 <SM_DisableDacToSignal>
		  SM_EnablePwmToSignal();
 8005540:	f000 fb8a 	bl	8005c58 <SM_EnablePwmToSignal>



		  last_output_mode_was_pwm = 1;
 8005544:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <FuncO_ApplyPresetToSignal+0x180>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);

	}

}
 800554a:	e093      	b.n	8005674 <FuncO_ApplyPresetToSignal+0x174>
	else if(last_output_mode_was_pwm)
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <FuncO_ApplyPresetToSignal+0x180>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d04b      	beq.n	80055ec <FuncO_ApplyPresetToSignal+0xec>
		SM_DisablePwmToSignal();
 8005554:	f000 fc40 	bl	8005dd8 <SM_DisablePwmToSignal>
		SM_EnableDacToSignal();
 8005558:	f000 fc4e 	bl	8005df8 <SM_EnableDacToSignal>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800555c:	79fc      	ldrb	r4, [r7, #7]
 800555e:	2000      	movs	r0, #0
 8005560:	f000 fb64 	bl	8005c2c <SM_GetOutputChannel>
 8005564:	4601      	mov	r1, r0
 8005566:	4a45      	ldr	r2, [pc, #276]	; (800567c <FuncO_ApplyPresetToSignal+0x17c>)
 8005568:	00e3      	lsls	r3, r4, #3
 800556a:	4413      	add	r3, r2
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005570:	2000      	movs	r0, #0
 8005572:	f000 fb5b 	bl	8005c2c <SM_GetOutputChannel>
 8005576:	4603      	mov	r3, r0
 8005578:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	73bb      	strb	r3, [r7, #14]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005580:	7bbb      	ldrb	r3, [r7, #14]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fd84 	bl	8006090 <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005588:	4b3e      	ldr	r3, [pc, #248]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a3d      	ldr	r2, [pc, #244]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005594:	2100      	movs	r1, #0
 8005596:	483c      	ldr	r0, [pc, #240]	; (8005688 <FuncO_ApplyPresetToSignal+0x188>)
 8005598:	f004 fa24 	bl	80099e4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800559c:	2000      	movs	r0, #0
 800559e:	f000 fb45 	bl	8005c2c <SM_GetOutputChannel>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f103 0208 	add.w	r2, r3, #8
 80055a8:	2300      	movs	r3, #0
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2378      	movs	r3, #120	; 0x78
 80055ae:	2100      	movs	r1, #0
 80055b0:	4835      	ldr	r0, [pc, #212]	; (8005688 <FuncO_ApplyPresetToSignal+0x188>)
 80055b2:	f004 f955 	bl	8009860 <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80055b6:	2100      	movs	r1, #0
 80055b8:	4834      	ldr	r0, [pc, #208]	; (800568c <FuncO_ApplyPresetToSignal+0x18c>)
 80055ba:	f004 fa13 	bl	80099e4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055be:	2001      	movs	r0, #1
 80055c0:	f000 fb34 	bl	8005c2c <SM_GetOutputChannel>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f103 0208 	add.w	r2, r3, #8
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2378      	movs	r3, #120	; 0x78
 80055d0:	2100      	movs	r1, #0
 80055d2:	482e      	ldr	r0, [pc, #184]	; (800568c <FuncO_ApplyPresetToSignal+0x18c>)
 80055d4:	f004 f944 	bl	8009860 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a29      	ldr	r2, [pc, #164]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]
		last_output_mode_was_pwm = 0;
 80055e4:	4b26      	ldr	r3, [pc, #152]	; (8005680 <FuncO_ApplyPresetToSignal+0x180>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
}
 80055ea:	e043      	b.n	8005674 <FuncO_ApplyPresetToSignal+0x174>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80055ec:	79fc      	ldrb	r4, [r7, #7]
 80055ee:	2000      	movs	r0, #0
 80055f0:	f000 fb1c 	bl	8005c2c <SM_GetOutputChannel>
 80055f4:	4601      	mov	r1, r0
 80055f6:	4a21      	ldr	r2, [pc, #132]	; (800567c <FuncO_ApplyPresetToSignal+0x17c>)
 80055f8:	00e3      	lsls	r3, r4, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005600:	2000      	movs	r0, #0
 8005602:	f000 fb13 	bl	8005c2c <SM_GetOutputChannel>
 8005606:	4603      	mov	r3, r0
 8005608:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd3c 	bl	8006090 <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005624:	2100      	movs	r1, #0
 8005626:	4818      	ldr	r0, [pc, #96]	; (8005688 <FuncO_ApplyPresetToSignal+0x188>)
 8005628:	f004 f9dc 	bl	80099e4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800562c:	2000      	movs	r0, #0
 800562e:	f000 fafd 	bl	8005c2c <SM_GetOutputChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2378      	movs	r3, #120	; 0x78
 800563e:	2100      	movs	r1, #0
 8005640:	4811      	ldr	r0, [pc, #68]	; (8005688 <FuncO_ApplyPresetToSignal+0x188>)
 8005642:	f004 f90d 	bl	8009860 <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005646:	2100      	movs	r1, #0
 8005648:	4810      	ldr	r0, [pc, #64]	; (800568c <FuncO_ApplyPresetToSignal+0x18c>)
 800564a:	f004 f9cb 	bl	80099e4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800564e:	2001      	movs	r0, #1
 8005650:	f000 faec 	bl	8005c2c <SM_GetOutputChannel>
 8005654:	4603      	mov	r3, r0
 8005656:	f103 0208 	add.w	r2, r3, #8
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2378      	movs	r3, #120	; 0x78
 8005660:	2100      	movs	r1, #0
 8005662:	480a      	ldr	r0, [pc, #40]	; (800568c <FuncO_ApplyPresetToSignal+0x18c>)
 8005664:	f004 f8fc 	bl	8009860 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a05      	ldr	r2, [pc, #20]	; (8005684 <FuncO_ApplyPresetToSignal+0x184>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}
 800567c:	200001a0 	.word	0x200001a0
 8005680:	20001f08 	.word	0x20001f08
 8005684:	40013400 	.word	0x40013400
 8005688:	200026a8 	.word	0x200026a8
 800568c:	20002694 	.word	0x20002694

08005690 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b087      	sub	sp, #28
 8005694:	af02      	add	r7, sp, #8
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800569a:	79fc      	ldrb	r4, [r7, #7]
 800569c:	2001      	movs	r0, #1
 800569e:	f000 fac5 	bl	8005c2c <SM_GetOutputChannel>
 80056a2:	4601      	mov	r1, r0
 80056a4:	00e3      	lsls	r3, r4, #3
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <FuncO_ApplyPresetToSync+0xb0>)
 80056a8:	4413      	add	r3, r2
 80056aa:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80056ae:	79fc      	ldrb	r4, [r7, #7]
 80056b0:	2001      	movs	r0, #1
 80056b2:	f000 fabb 	bl	8005c2c <SM_GetOutputChannel>
 80056b6:	4601      	mov	r1, r0
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <FuncO_ApplyPresetToSync+0xb0>)
 80056ba:	00e3      	lsls	r3, r4, #3
 80056bc:	4413      	add	r3, r2
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 80056c2:	2001      	movs	r0, #1
 80056c4:	f000 fab2 	bl	8005c2c <SM_GetOutputChannel>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSync(eTmpVppPreset);
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fd09 	bl	80060ec <VPP_ApplyProfileToSync>

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80056da:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <FuncO_ApplyPresetToSync+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a19      	ldr	r2, [pc, #100]	; (8005744 <FuncO_ApplyPresetToSync+0xb4>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80056e6:	2100      	movs	r1, #0
 80056e8:	4817      	ldr	r0, [pc, #92]	; (8005748 <FuncO_ApplyPresetToSync+0xb8>)
 80056ea:	f004 f97b 	bl	80099e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80056ee:	2001      	movs	r0, #1
 80056f0:	f000 fa9c 	bl	8005c2c <SM_GetOutputChannel>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f103 0208 	add.w	r2, r3, #8
 80056fa:	2300      	movs	r3, #0
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	2378      	movs	r3, #120	; 0x78
 8005700:	2100      	movs	r1, #0
 8005702:	4811      	ldr	r0, [pc, #68]	; (8005748 <FuncO_ApplyPresetToSync+0xb8>)
 8005704:	f004 f8ac 	bl	8009860 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005708:	2100      	movs	r1, #0
 800570a:	4810      	ldr	r0, [pc, #64]	; (800574c <FuncO_ApplyPresetToSync+0xbc>)
 800570c:	f004 f96a 	bl	80099e4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005710:	2000      	movs	r0, #0
 8005712:	f000 fa8b 	bl	8005c2c <SM_GetOutputChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2378      	movs	r3, #120	; 0x78
 8005722:	2100      	movs	r1, #0
 8005724:	4809      	ldr	r0, [pc, #36]	; (800574c <FuncO_ApplyPresetToSync+0xbc>)
 8005726:	f004 f89b 	bl	8009860 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <FuncO_ApplyPresetToSync+0xb4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a05      	ldr	r2, [pc, #20]	; (8005744 <FuncO_ApplyPresetToSync+0xb4>)
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	bd90      	pop	{r4, r7, pc}
 800573e:	bf00      	nop
 8005740:	200001a0 	.word	0x200001a0
 8005744:	40013400 	.word	0x40013400
 8005748:	20002694 	.word	0x20002694
 800574c:	200026a8 	.word	0x200026a8

08005750 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8005756:	781b      	ldrb	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	2000019c 	.word	0x2000019c

08005768 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005772:	79fc      	ldrb	r4, [r7, #7]
 8005774:	2000      	movs	r0, #0
 8005776:	f000 fa59 	bl	8005c2c <SM_GetOutputChannel>
 800577a:	4601      	mov	r1, r0
 800577c:	4623      	mov	r3, r4
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4423      	add	r3, r4
 8005782:	4a4f      	ldr	r2, [pc, #316]	; (80058c0 <GO_ApplyPresetToSignal+0x158>)
 8005784:	4413      	add	r3, r2
 8005786:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b07      	cmp	r3, #7
 800578e:	f200 8093 	bhi.w	80058b8 <GO_ApplyPresetToSignal+0x150>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <GO_ApplyPresetToSignal+0x30>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057b9 	.word	0x080057b9
 800579c:	080057d9 	.word	0x080057d9
 80057a0:	080057f9 	.word	0x080057f9
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005839 	.word	0x08005839
 80057ac:	08005859 	.word	0x08005859
 80057b0:	08005879 	.word	0x08005879
 80057b4:	08005899 	.word	0x08005899
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80057b8:	2200      	movs	r2, #0
 80057ba:	2101      	movs	r1, #1
 80057bc:	4841      	ldr	r0, [pc, #260]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 80057be:	f005 f929 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2120      	movs	r1, #32
 80057c6:	4840      	ldr	r0, [pc, #256]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80057c8:	f005 f924 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80057cc:	2200      	movs	r2, #0
 80057ce:	2110      	movs	r1, #16
 80057d0:	483d      	ldr	r0, [pc, #244]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80057d2:	f005 f91f 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80057d6:	e06f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80057d8:	2201      	movs	r2, #1
 80057da:	2101      	movs	r1, #1
 80057dc:	4839      	ldr	r0, [pc, #228]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 80057de:	f005 f919 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2120      	movs	r1, #32
 80057e6:	4838      	ldr	r0, [pc, #224]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80057e8:	f005 f914 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2110      	movs	r1, #16
 80057f0:	4835      	ldr	r0, [pc, #212]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80057f2:	f005 f90f 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80057f6:	e05f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80057f8:	2200      	movs	r2, #0
 80057fa:	2101      	movs	r1, #1
 80057fc:	4831      	ldr	r0, [pc, #196]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 80057fe:	f005 f909 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005802:	2201      	movs	r2, #1
 8005804:	2120      	movs	r1, #32
 8005806:	4830      	ldr	r0, [pc, #192]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005808:	f005 f904 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800580c:	2200      	movs	r2, #0
 800580e:	2110      	movs	r1, #16
 8005810:	482d      	ldr	r0, [pc, #180]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005812:	f005 f8ff 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005816:	e04f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005818:	2201      	movs	r2, #1
 800581a:	2101      	movs	r1, #1
 800581c:	4829      	ldr	r0, [pc, #164]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 800581e:	f005 f8f9 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005822:	2201      	movs	r2, #1
 8005824:	2120      	movs	r1, #32
 8005826:	4828      	ldr	r0, [pc, #160]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005828:	f005 f8f4 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800582c:	2200      	movs	r2, #0
 800582e:	2110      	movs	r1, #16
 8005830:	4825      	ldr	r0, [pc, #148]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005832:	f005 f8ef 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005836:	e03f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005838:	2200      	movs	r2, #0
 800583a:	2101      	movs	r1, #1
 800583c:	4821      	ldr	r0, [pc, #132]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 800583e:	f005 f8e9 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005842:	2200      	movs	r2, #0
 8005844:	2120      	movs	r1, #32
 8005846:	4820      	ldr	r0, [pc, #128]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005848:	f005 f8e4 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800584c:	2201      	movs	r2, #1
 800584e:	2110      	movs	r1, #16
 8005850:	481d      	ldr	r0, [pc, #116]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005852:	f005 f8df 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005856:	e02f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005858:	2201      	movs	r2, #1
 800585a:	2101      	movs	r1, #1
 800585c:	4819      	ldr	r0, [pc, #100]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 800585e:	f005 f8d9 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005862:	2200      	movs	r2, #0
 8005864:	2120      	movs	r1, #32
 8005866:	4818      	ldr	r0, [pc, #96]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005868:	f005 f8d4 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800586c:	2201      	movs	r2, #1
 800586e:	2110      	movs	r1, #16
 8005870:	4815      	ldr	r0, [pc, #84]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005872:	f005 f8cf 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005876:	e01f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	2101      	movs	r1, #1
 800587c:	4811      	ldr	r0, [pc, #68]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 800587e:	f005 f8c9 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005882:	2201      	movs	r2, #1
 8005884:	2120      	movs	r1, #32
 8005886:	4810      	ldr	r0, [pc, #64]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005888:	f005 f8c4 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800588c:	2201      	movs	r2, #1
 800588e:	2110      	movs	r1, #16
 8005890:	480d      	ldr	r0, [pc, #52]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 8005892:	f005 f8bf 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005896:	e00f      	b.n	80058b8 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005898:	2201      	movs	r2, #1
 800589a:	2101      	movs	r1, #1
 800589c:	4809      	ldr	r0, [pc, #36]	; (80058c4 <GO_ApplyPresetToSignal+0x15c>)
 800589e:	f005 f8b9 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058a2:	2201      	movs	r2, #1
 80058a4:	2120      	movs	r1, #32
 80058a6:	4808      	ldr	r0, [pc, #32]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80058a8:	f005 f8b4 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80058ac:	2201      	movs	r2, #1
 80058ae:	2110      	movs	r1, #16
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <GO_ApplyPresetToSignal+0x160>)
 80058b2:	f005 f8af 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80058b6:	bf00      	nop
	}
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd90      	pop	{r4, r7, pc}
 80058c0:	200001d8 	.word	0x200001d8
 80058c4:	48000400 	.word	0x48000400
 80058c8:	48000800 	.word	0x48000800

080058cc <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80058d6:	79fc      	ldrb	r4, [r7, #7]
 80058d8:	2001      	movs	r0, #1
 80058da:	f000 f9a7 	bl	8005c2c <SM_GetOutputChannel>
 80058de:	4601      	mov	r1, r0
 80058e0:	4623      	mov	r3, r4
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4423      	add	r3, r4
 80058e6:	4a4f      	ldr	r2, [pc, #316]	; (8005a24 <GO_ApplyPresetToSync+0x158>)
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b07      	cmp	r3, #7
 80058f2:	f200 8093 	bhi.w	8005a1c <GO_ApplyPresetToSync+0x150>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <GO_ApplyPresetToSync+0x30>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	0800593d 	.word	0x0800593d
 8005904:	0800595d 	.word	0x0800595d
 8005908:	0800597d 	.word	0x0800597d
 800590c:	0800599d 	.word	0x0800599d
 8005910:	080059bd 	.word	0x080059bd
 8005914:	080059dd 	.word	0x080059dd
 8005918:	080059fd 	.word	0x080059fd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800591c:	2200      	movs	r2, #0
 800591e:	2101      	movs	r1, #1
 8005920:	4841      	ldr	r0, [pc, #260]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 8005922:	f005 f877 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005926:	2200      	movs	r2, #0
 8005928:	2120      	movs	r1, #32
 800592a:	4840      	ldr	r0, [pc, #256]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 800592c:	f005 f872 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	2110      	movs	r1, #16
 8005934:	483d      	ldr	r0, [pc, #244]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005936:	f005 f86d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 800593a:	e06f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800593c:	2201      	movs	r2, #1
 800593e:	2101      	movs	r1, #1
 8005940:	4839      	ldr	r0, [pc, #228]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 8005942:	f005 f867 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005946:	2200      	movs	r2, #0
 8005948:	2120      	movs	r1, #32
 800594a:	4838      	ldr	r0, [pc, #224]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 800594c:	f005 f862 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005950:	2200      	movs	r2, #0
 8005952:	2110      	movs	r1, #16
 8005954:	4835      	ldr	r0, [pc, #212]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005956:	f005 f85d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 800595a:	e05f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800595c:	2200      	movs	r2, #0
 800595e:	2101      	movs	r1, #1
 8005960:	4831      	ldr	r0, [pc, #196]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 8005962:	f005 f857 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005966:	2201      	movs	r2, #1
 8005968:	2120      	movs	r1, #32
 800596a:	4830      	ldr	r0, [pc, #192]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 800596c:	f005 f852 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005970:	2200      	movs	r2, #0
 8005972:	2110      	movs	r1, #16
 8005974:	482d      	ldr	r0, [pc, #180]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005976:	f005 f84d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 800597a:	e04f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800597c:	2201      	movs	r2, #1
 800597e:	2101      	movs	r1, #1
 8005980:	4829      	ldr	r0, [pc, #164]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 8005982:	f005 f847 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005986:	2201      	movs	r2, #1
 8005988:	2120      	movs	r1, #32
 800598a:	4828      	ldr	r0, [pc, #160]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 800598c:	f005 f842 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005990:	2200      	movs	r2, #0
 8005992:	2110      	movs	r1, #16
 8005994:	4825      	ldr	r0, [pc, #148]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005996:	f005 f83d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 800599a:	e03f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800599c:	2200      	movs	r2, #0
 800599e:	2101      	movs	r1, #1
 80059a0:	4821      	ldr	r0, [pc, #132]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 80059a2:	f005 f837 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2120      	movs	r1, #32
 80059aa:	4820      	ldr	r0, [pc, #128]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059ac:	f005 f832 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80059b0:	2201      	movs	r2, #1
 80059b2:	2110      	movs	r1, #16
 80059b4:	481d      	ldr	r0, [pc, #116]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059b6:	f005 f82d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80059ba:	e02f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80059bc:	2201      	movs	r2, #1
 80059be:	2101      	movs	r1, #1
 80059c0:	4819      	ldr	r0, [pc, #100]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 80059c2:	f005 f827 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80059c6:	2200      	movs	r2, #0
 80059c8:	2120      	movs	r1, #32
 80059ca:	4818      	ldr	r0, [pc, #96]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059cc:	f005 f822 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80059d0:	2201      	movs	r2, #1
 80059d2:	2110      	movs	r1, #16
 80059d4:	4815      	ldr	r0, [pc, #84]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059d6:	f005 f81d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80059da:	e01f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80059dc:	2200      	movs	r2, #0
 80059de:	2101      	movs	r1, #1
 80059e0:	4811      	ldr	r0, [pc, #68]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 80059e2:	f005 f817 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80059e6:	2201      	movs	r2, #1
 80059e8:	2120      	movs	r1, #32
 80059ea:	4810      	ldr	r0, [pc, #64]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059ec:	f005 f812 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80059f0:	2201      	movs	r2, #1
 80059f2:	2110      	movs	r1, #16
 80059f4:	480d      	ldr	r0, [pc, #52]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 80059f6:	f005 f80d 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 80059fa:	e00f      	b.n	8005a1c <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80059fc:	2201      	movs	r2, #1
 80059fe:	2101      	movs	r1, #1
 8005a00:	4809      	ldr	r0, [pc, #36]	; (8005a28 <GO_ApplyPresetToSync+0x15c>)
 8005a02:	f005 f807 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005a06:	2201      	movs	r2, #1
 8005a08:	2120      	movs	r1, #32
 8005a0a:	4808      	ldr	r0, [pc, #32]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005a0c:	f005 f802 	bl	800aa14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005a10:	2201      	movs	r2, #1
 8005a12:	2110      	movs	r1, #16
 8005a14:	4805      	ldr	r0, [pc, #20]	; (8005a2c <GO_ApplyPresetToSync+0x160>)
 8005a16:	f004 fffd 	bl	800aa14 <HAL_GPIO_WritePin>
			break;
 8005a1a:	bf00      	nop
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}
 8005a24:	200001d8 	.word	0x200001d8
 8005a28:	48000400 	.word	0x48000400
 8005a2c:	48000800 	.word	0x48000800

08005a30 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 8005a34:	f000 f89a 	bl	8005b6c <_InitOutputChannels>
	_InitNegGainCoefficients();
 8005a38:	f000 f850 	bl	8005adc <_InitNegGainCoefficients>
	_InitGainInDecibels();
 8005a3c:	f000 f802 	bl	8005a44 <_InitGainInDecibels>

}
 8005a40:	bf00      	nop
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e037      	b.n	8005ac0 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <_InitGainInDecibels+0x8c>)
 8005a52:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005a54:	491f      	ldr	r1, [pc, #124]	; (8005ad4 <_InitGainInDecibels+0x90>)
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3304      	adds	r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005a68:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a74:	ee16 0a90 	vmov	r0, s13
 8005a78:	f7fa fd8e 	bl	8000598 <__aeabi_f2d>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	ec44 3b10 	vmov	d0, r3, r4
 8005a84:	f00b fd34 	bl	80114f0 <log10>
 8005a88:	ec51 0b10 	vmov	r0, r1, d0
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <_InitGainInDecibels+0x94>)
 8005a92:	f7fa fdd9 	bl	8000648 <__aeabi_dmul>
 8005a96:	4603      	mov	r3, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	f7fb f8cb 	bl	8000c38 <__aeabi_d2f>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005aa6:	490b      	ldr	r1, [pc, #44]	; (8005ad4 <_InitGainInDecibels+0x90>)
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b61      	cmp	r3, #97	; 0x61
 8005ac4:	ddc4      	ble.n	8005a50 <_InitGainInDecibels+0xc>

	}
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	3a83126f 	.word	0x3a83126f
 8005ad4:	200001f0 	.word	0x200001f0
 8005ad8:	40340000 	.word	0x40340000

08005adc <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e033      	b.n	8005b50 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005ae8:	491e      	ldr	r1, [pc, #120]	; (8005b64 <_InitNegGainCoefficients+0x88>)
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	3304      	adds	r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <_InitNegGainCoefficients+0x8c>)
 8005afe:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005b00:	4918      	ldr	r1, [pc, #96]	; (8005b64 <_InitNegGainCoefficients+0x88>)
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3308      	adds	r3, #8
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1a:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005b1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b32:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005b36:	490b      	ldr	r1, [pc, #44]	; (8005b64 <_InitNegGainCoefficients+0x88>)
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3310      	adds	r3, #16
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b61      	cmp	r3, #97	; 0x61
 8005b54:	ddc8      	ble.n	8005ae8 <_InitNegGainCoefficients+0xc>
	}
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	200001f0 	.word	0x200001f0
 8005b68:	402ccccd 	.word	0x402ccccd

08005b6c <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005b72:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <_InitOutputChannels+0xac>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005b7e:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005b82:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <_InitOutputChannels+0xac>)
 8005b84:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	e00b      	b.n	8005ba6 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b8e:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <_InitOutputChannels+0xb0>)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b96:	491f      	ldr	r1, [pc, #124]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b77      	cmp	r3, #119	; 0x77
 8005baa:	ddf0      	ble.n	8005b8e <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005bae:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <_InitOutputChannels+0xb4>)
 8005bb0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005bb4:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <_InitOutputChannels+0xa8>)
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <_InitOutputChannels+0xb8>)
 8005bb8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <_InitOutputChannels+0xac>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005bc8:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005bcc:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <_InitOutputChannels+0xac>)
 8005bce:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	e00b      	b.n	8005bf0 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005bd8:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <_InitOutputChannels+0xb0>)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005be0:	4911      	ldr	r1, [pc, #68]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	3302      	adds	r3, #2
 8005be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b77      	cmp	r3, #119	; 0x77
 8005bf4:	ddf0      	ble.n	8005bd8 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <_InitOutputChannels+0xb4>)
 8005bfa:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <_InitOutputChannels+0xbc>)
 8005c00:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <_InitOutputChannels+0xb8>)
 8005c02:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	200021d0 	.word	0x200021d0
 8005c18:	200001a0 	.word	0x200001a0
 8005c1c:	2000152c 	.word	0x2000152c
 8005c20:	20000bac 	.word	0x20000bac
 8005c24:	200001ed 	.word	0x200001ed
 8005c28:	20001fdc 	.word	0x20001fdc

08005c2c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <SM_GetOutputChannel+0x24>)
 8005c3e:	e000      	b.n	8005c42 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <SM_GetOutputChannel+0x28>)
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	200021d0 	.word	0x200021d0
 8005c54:	20001fdc 	.word	0x20001fdc

08005c58 <SM_EnablePwmToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToSignal()
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b096      	sub	sp, #88	; 0x58
 8005c5c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	605a      	str	r2, [r3, #4]
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005c78:	f107 0320 	add.w	r3, r7, #32
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	611a      	str	r2, [r3, #16]
 8005c88:	615a      	str	r2, [r3, #20]
 8005c8a:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005c9e:	4a4c      	ldr	r2, [pc, #304]	; (8005dd0 <SM_EnablePwmToSignal+0x178>)
 8005ca0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005ca8:	4b48      	ldr	r3, [pc, #288]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005caa:	2210      	movs	r2, #16
 8005cac:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005cae:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cbc:	4b43      	ldr	r3, [pc, #268]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005cc2:	4842      	ldr	r0, [pc, #264]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005cc4:	f005 ff48 	bl	800bb58 <HAL_TIM_Base_Init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <SM_EnablePwmToSignal+0x7a>
	{
		Error_Handler();
 8005cce:	f001 fa71 	bl	80071b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cdc:	4619      	mov	r1, r3
 8005cde:	483b      	ldr	r0, [pc, #236]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005ce0:	f006 fc96 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <SM_EnablePwmToSignal+0x96>
	{
		Error_Handler();
 8005cea:	f001 fa63 	bl	80071b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cee:	4837      	ldr	r0, [pc, #220]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005cf0:	f006 f81d 	bl	800bd2e <HAL_TIM_PWM_Init>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <SM_EnablePwmToSignal+0xa6>
	{
		Error_Handler();
 8005cfa:	f001 fa5b 	bl	80071b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cfe:	2320      	movs	r3, #32
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	482f      	ldr	r0, [pc, #188]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005d0e:	f007 fa35 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <SM_EnablePwmToSignal+0xc4>
	{
		Error_Handler();
 8005d18:	f001 fa4c 	bl	80071b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d1c:	2360      	movs	r3, #96	; 0x60
 8005d1e:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d2c:	f107 0320 	add.w	r3, r7, #32
 8005d30:	2204      	movs	r2, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4825      	ldr	r0, [pc, #148]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005d36:	f006 fb5b 	bl	800c3f0 <HAL_TIM_PWM_ConfigChannel>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <SM_EnablePwmToSignal+0xec>
	{
		Error_Handler();
 8005d40:	f001 fa38 	bl	80071b4 <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d50:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d60:	2302      	movs	r3, #2
 8005d62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4619      	mov	r1, r3
 8005d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d7a:	f004 fbe7 	bl	800a54c <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	6593      	str	r3, [r2, #88]	; 0x58
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <SM_EnablePwmToSignal+0x17c>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	201d      	movs	r0, #29
 8005d9c:	f003 fca9 	bl	80096f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005da0:	201d      	movs	r0, #29
 8005da2:	f003 fcc0 	bl	8009726 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005da6:	2104      	movs	r1, #4
 8005da8:	4808      	ldr	r0, [pc, #32]	; (8005dcc <SM_EnablePwmToSignal+0x174>)
 8005daa:	f006 f821 	bl	800bdf0 <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8005dae:	2007      	movs	r0, #7
 8005db0:	f7ff fcda 	bl	8005768 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR2 = 32768;
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <SM_EnablePwmToSignal+0x178>)
 8005db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->ARR = 65535;
 8005dbc:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <SM_EnablePwmToSignal+0x178>)
 8005dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dc4:	bf00      	nop
 8005dc6:	3758      	adds	r7, #88	; 0x58
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20001f8c 	.word	0x20001f8c
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <SM_DisablePwmToSignal>:

void SM_DisablePwmToSignal()
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_MspDeInit 0 */

	/* USER CODE END TIM3_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_TIM3_CLK_DISABLE();
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <SM_DisablePwmToSignal+0x1c>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <SM_DisablePwmToSignal+0x1c>)
 8005de2:	f023 0302 	bic.w	r3, r3, #2
 8005de6:	6593      	str	r3, [r2, #88]	; 0x58

	/* TIM3 interrupt Deinit */
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005de8:	201d      	movs	r0, #29
 8005dea:	f003 fcaa 	bl	8009742 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN TIM3_MspDeInit 1 */

	/* USER CODE END TIM3_MspDeInit 1 */
}
 8005dee:	bf00      	nop
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40021000 	.word	0x40021000

08005df8 <SM_EnableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToSignal()
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b094      	sub	sp, #80	; 0x50
 8005dfc:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8005dfe:	f107 0320 	add.w	r3, r7, #32
 8005e02:	2230      	movs	r2, #48	; 0x30
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f008 ff58 	bl	800ecbc <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0c:	f107 030c 	add.w	r3, r7, #12
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]

	/** DAC Initialization
	*/
	hdac1.Instance = DAC1;
 8005e1c:	4b49      	ldr	r3, [pc, #292]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005e1e:	4a4a      	ldr	r2, [pc, #296]	; (8005f48 <SM_EnableDacToSignal+0x150>)
 8005e20:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005e22:	4848      	ldr	r0, [pc, #288]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005e24:	f003 fca7 	bl	8009776 <HAL_DAC_Init>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <SM_EnableDacToSignal+0x3a>
	{
		Error_Handler();
 8005e2e:	f001 f9c1 	bl	80071b4 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e36:	623b      	str	r3, [r7, #32]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sConfig.DAC_SignedFormat = DISABLE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005e48:	2306      	movs	r3, #6
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005e5c:	f107 0320 	add.w	r3, r7, #32
 8005e60:	2200      	movs	r2, #0
 8005e62:	4619      	mov	r1, r3
 8005e64:	4837      	ldr	r0, [pc, #220]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005e66:	f003 fe6f 	bl	8009b48 <HAL_DAC_ConfigChannel>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <SM_EnableDacToSignal+0x7c>
	{
		Error_Handler();
 8005e70:	f001 f9a0 	bl	80071b4 <Error_Handler>
	}
	/** DAC channel OUT2 config
	*/
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005e7c:	f107 0320 	add.w	r3, r7, #32
 8005e80:	2210      	movs	r2, #16
 8005e82:	4619      	mov	r1, r3
 8005e84:	482f      	ldr	r0, [pc, #188]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005e86:	f003 fe5f 	bl	8009b48 <HAL_DAC_ConfigChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <SM_EnableDacToSignal+0x9c>
	{
		Error_Handler();
 8005e90:	f001 f990 	bl	80071b4 <Error_Handler>
	}

    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005e94:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e98:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ea0:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb0:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <SM_EnableDacToSignal+0x154>)
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ec4:	2330      	movs	r3, #48	; 0x30
 8005ec6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005eda:	f004 fb37 	bl	800a54c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8005ede:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <SM_EnableDacToSignal+0x15c>)
 8005ee2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005ee6:	2206      	movs	r2, #6
 8005ee8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eea:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005eec:	2210      	movs	r2, #16
 8005eee:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ef0:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005efc:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f02:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0a:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f0e:	2220      	movs	r2, #32
 8005f10:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005f18:	480d      	ldr	r0, [pc, #52]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f1a:	f004 f84b 	bl	8009fb4 <HAL_DMA_Init>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <SM_EnableDacToSignal+0x130>
    {
      Error_Handler();
 8005f24:	f001 f946 	bl	80071b4 <Error_Handler>
    }

    __HAL_LINKDMA(&hdac1,DMA_Handle1,hdma_dac1_ch1);
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005f2a:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <SM_EnableDacToSignal+0x158>)
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <SM_EnableDacToSignal+0x14c>)
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28

    GO_ApplyPresetToSignal(eDefaultGainPreset);
 8005f34:	2007      	movs	r0, #7
 8005f36:	f7ff fc17 	bl	8005768 <GO_ApplyPresetToSignal>
}
 8005f3a:	bf00      	nop
 8005f3c:	3750      	adds	r7, #80	; 0x50
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200026a8 	.word	0x200026a8
 8005f48:	50000800 	.word	0x50000800
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	20001f20 	.word	0x20001f20
 8005f54:	4002001c 	.word	0x4002001c

08005f58 <SM_DisableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToSignal()
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0

	    /**DAC1 GPIO Configuration
	    PA4     ------> DAC1_OUT1
	    PA5     ------> DAC1_OUT2
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8005f5c:	2110      	movs	r1, #16
 8005f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f62:	f004 fc75 	bl	800a850 <HAL_GPIO_DeInit>
	    /* DAC1 DMA DeInit */
	   //HAL_DMA_DeInit(hdac1.DMA_Handle1);
	  /* USER CODE BEGIN DAC1_MspDeInit 1 */

	  /* USER CODE END DAC1_MspDeInit 1 */
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <SM_GetEncoderValue+0x34>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <SM_GetEncoderValue+0x34>)
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	e002      	b.n	8005f94 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005f8e:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <SM_GetEncoderValue+0x34>)
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b29b      	uxth	r3, r3
	}
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00

08005fa4 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <SM_GetOutputInHertz+0x7c>)
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <SM_GetOutputInHertz+0x16>
 8005fb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	e007      	b.n	8005fca <SM_GetOutputInHertz+0x26>
 8005fba:	4b19      	ldr	r3, [pc, #100]	; (8006020 <SM_GetOutputInHertz+0x7c>)
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <SM_GetOutputInHertz+0x7c>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <SM_GetOutputInHertz+0x36>
 8005fd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	e007      	b.n	8005fea <SM_GetOutputInHertz+0x46>
 8005fda:	4b11      	ldr	r3, [pc, #68]	; (8006020 <SM_GetOutputInHertz+0x7c>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8005fea:	ed97 7a02 	vldr	s14, [r7, #8]
 8005fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ff6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006024 <SM_GetOutputInHertz+0x80>
 8005ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffe:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006002:	edd7 7a03 	vldr	s15, [r7, #12]
 8006006:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006028 <SM_GetOutputInHertz+0x84>
 800600a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800600e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006012:	eeb0 0a67 	vmov.f32	s0, s15
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40013400 	.word	0x40013400
 8006024:	4d2037a0 	.word	0x4d2037a0
 8006028:	42f00000 	.word	0x42f00000

0800602c <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006038:	887b      	ldrh	r3, [r7, #2]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <SM_ConvertPeriodToHertz+0x16>
 800603e:	2301      	movs	r3, #1
 8006040:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006074 <SM_ConvertPeriodToHertz+0x48>
 800605e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006062:	eef0 7a66 	vmov.f32	s15, s13
}
 8006066:	eeb0 0a67 	vmov.f32	s0, s15
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	4d2037a0 	.word	0x4d2037a0

08006078 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <VPP_ResetLastEncoderValue+0x14>)
 800607e:	2200      	movs	r2, #0
 8006080:	801a      	strh	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20001f0c 	.word	0x20001f0c

08006090 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800609a:	79fa      	ldrb	r2, [r7, #7]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <VPP_ApplyProfileToSignal+0x58>)
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80060aa:	2000      	movs	r0, #0
 80060ac:	f7ff fdbe 	bl	8005c2c <SM_GetOutputChannel>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	7a1b      	ldrb	r3, [r3, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fb53 	bl	8005768 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8b1b      	ldrh	r3, [r3, #24]
 80060d2:	4618      	mov	r0, r3
 80060d4:	eef0 0a47 	vmov.f32	s1, s14
 80060d8:	eeb0 0a67 	vmov.f32	s0, s15
 80060dc:	f000 f834 	bl	8006148 <_ProcessSignalDataTable>


}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	200001f0 	.word	0x200001f0

080060ec <VPP_ApplyProfileToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSync(eAmpSettings_t pPresetEnum)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80060f6:	79fa      	ldrb	r2, [r7, #7]
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a10      	ldr	r2, [pc, #64]	; (8006144 <VPP_ApplyProfileToSync+0x58>)
 8006102:	4413      	add	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8006106:	2001      	movs	r0, #1
 8006108:	f7ff fd90 	bl	8005c2c <SM_GetOutputChannel>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	7a1b      	ldrb	r3, [r3, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fbd7 	bl	80058cc <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	edd3 7a04 	vldr	s15, [r3, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	ed93 7a05 	vldr	s14, [r3, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8b1b      	ldrh	r3, [r3, #24]
 800612e:	4618      	mov	r0, r3
 8006130:	eef0 0a47 	vmov.f32	s1, s14
 8006134:	eeb0 0a67 	vmov.f32	s0, s15
 8006138:	f000 f88c 	bl	8006254 <_ProcessSyncDataTable>



}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	200001f0 	.word	0x200001f0

08006148 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006152:	edc7 0a02 	vstr	s1, [r7, #8]
 8006156:	4603      	mov	r3, r0
 8006158:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800615a:	2000      	movs	r0, #0
 800615c:	f7ff fd66 	bl	8005c2c <SM_GetOutputChannel>
 8006160:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d06b      	beq.n	8006246 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	e00c      	b.n	800618e <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4933      	ldr	r1, [pc, #204]	; (8006250 <_ProcessSignalDataTable+0x108>)
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	2b77      	cmp	r3, #119	; 0x77
 8006192:	ddef      	ble.n	8006174 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006194:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006198:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ae:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	e02e      	b.n	8006216 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80061b8:	4a25      	ldr	r2, [pc, #148]	; (8006250 <_ProcessSignalDataTable+0x108>)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80061cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d4:	ee17 1a90 	vmov	r1, s15
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <_ProcessSignalDataTable+0x108>)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80061e0:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <_ProcessSignalDataTable+0x108>)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80061f4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80061f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006204:	ee17 1a90 	vmov	r1, s15
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <_ProcessSignalDataTable+0x108>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b77      	cmp	r3, #119	; 0x77
 800621a:	ddcd      	ble.n	80061b8 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e00e      	b.n	8006240 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006222:	2000      	movs	r0, #0
 8006224:	f7ff fd02 	bl	8005c2c <SM_GetOutputChannel>
 8006228:	4601      	mov	r1, r0
 800622a:	4a09      	ldr	r2, [pc, #36]	; (8006250 <_ProcessSignalDataTable+0x108>)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3302      	adds	r3, #2
 8006236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3301      	adds	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b77      	cmp	r3, #119	; 0x77
 8006244:	dded      	ble.n	8006222 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006246:	bf00      	nop
 8006248:	3728      	adds	r7, #40	; 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	200023c4 	.word	0x200023c4

08006254 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	ed87 0a03 	vstr	s0, [r7, #12]
 800625e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006262:	4603      	mov	r3, r0
 8006264:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006266:	2001      	movs	r0, #1
 8006268:	f7ff fce0 	bl	8005c2c <SM_GetOutputChannel>
 800626c:	4603      	mov	r3, r0
 800626e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b06      	cmp	r3, #6
 8006276:	d059      	beq.n	800632c <_ProcessSyncDataTable+0xd8>
	{
		// copy refer lookup datat table from SyncChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e00f      	b.n	800629e <_ProcessSyncDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 800627e:	2001      	movs	r0, #1
 8006280:	f7ff fcd4 	bl	8005c2c <SM_GetOutputChannel>
 8006284:	4603      	mov	r3, r0
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4933      	ldr	r1, [pc, #204]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b77      	cmp	r3, #119	; 0x77
 80062a2:	ddec      	ble.n	800627e <_ProcessSyncDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80062a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80062a8:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <_ProcessSyncDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062be:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	e02e      	b.n	8006326 <_ProcessSyncDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80062c8:	4a25      	ldr	r2, [pc, #148]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e4:	ee17 1a90 	vmov	r1, s15
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80062f0:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006300:	edd7 7a06 	vldr	s15, [r7, #24]
 8006304:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800630c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006314:	ee17 1a90 	vmov	r1, s15
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3301      	adds	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b77      	cmp	r3, #119	; 0x77
 800632a:	ddcd      	ble.n	80062c8 <_ProcessSyncDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	e00e      	b.n	8006350 <_ProcessSyncDataTable+0xfc>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006332:	2001      	movs	r0, #1
 8006334:	f7ff fc7a 	bl	8005c2c <SM_GetOutputChannel>
 8006338:	4601      	mov	r1, r0
 800633a:	4a09      	ldr	r2, [pc, #36]	; (8006360 <_ProcessSyncDataTable+0x10c>)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3302      	adds	r3, #2
 8006346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b77      	cmp	r3, #119	; 0x77
 8006354:	dded      	ble.n	8006332 <_ProcessSyncDataTable+0xde>
	}
}
 8006356:	bf00      	nop
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200023c4 	.word	0x200023c4

08006364 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800636e:	2000      	movs	r0, #0
 8006370:	f7ff fc5c 	bl	8005c2c <SM_GetOutputChannel>
 8006374:	4603      	mov	r3, r0
 8006376:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	429a      	cmp	r2, r3
 8006386:	d90c      	bls.n	80063a2 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	3301      	adds	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b61      	cmp	r3, #97	; 0x61
 8006392:	d901      	bls.n	8006398 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006394:	2361      	movs	r3, #97	; 0x61
 8006396:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fe78 	bl	8006090 <VPP_ApplyProfileToSignal>
 80063a0:	e010      	b.n	80063c4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80063a2:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d20b      	bcs.n	80063c4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b61      	cmp	r3, #97	; 0x61
 80063b6:	d901      	bls.n	80063bc <VPP_MapEncoderPositionToSignalOutput+0x58>
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fe66 	bl	8006090 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 80063c4:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	8013      	strh	r3, [r2, #0]

}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20001f0c 	.word	0x20001f0c

080063d8 <VPP_MapEncoderPositionToSyncOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 80063e2:	2001      	movs	r0, #1
 80063e4:	f7ff fc22 	bl	8005c2c <SM_GetOutputChannel>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d90c      	bls.n	8006416 <VPP_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpAmp++;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	3301      	adds	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b61      	cmp	r3, #97	; 0x61
 8006406:	d901      	bls.n	800640c <VPP_MapEncoderPositionToSyncOutput+0x34>
 8006408:	2361      	movs	r3, #97	; 0x61
 800640a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fe6c 	bl	80060ec <VPP_ApplyProfileToSync>
 8006414:	e010      	b.n	8006438 <VPP_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	429a      	cmp	r2, r3
 800641e:	d20b      	bcs.n	8006438 <VPP_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpAmp--;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3b01      	subs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b61      	cmp	r3, #97	; 0x61
 800642a:	d901      	bls.n	8006430 <VPP_MapEncoderPositionToSyncOutput+0x58>
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fe5a 	bl	80060ec <VPP_ApplyProfileToSync>
	}
	amp_last_encoder_value = pEncoderValue;
 8006438:	4a03      	ldr	r2, [pc, #12]	; (8006448 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	8013      	strh	r3, [r2, #0]

}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20001f0c 	.word	0x20001f0c

0800644c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08c      	sub	sp, #48	; 0x30
 8006450:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	2220      	movs	r2, #32
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f008 fc29 	bl	800ecbc <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800646a:	4b32      	ldr	r3, [pc, #200]	; (8006534 <MX_ADC1_Init+0xe8>)
 800646c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <MX_ADC1_Init+0xe8>)
 8006474:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800647a:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <MX_ADC1_Init+0xe8>)
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006480:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <MX_ADC1_Init+0xe8>)
 8006482:	2200      	movs	r2, #0
 8006484:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006486:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <MX_ADC1_Init+0xe8>)
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <MX_ADC1_Init+0xe8>)
 800648e:	2200      	movs	r2, #0
 8006490:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006492:	4b28      	ldr	r3, [pc, #160]	; (8006534 <MX_ADC1_Init+0xe8>)
 8006494:	2204      	movs	r2, #4
 8006496:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006498:	4b26      	ldr	r3, [pc, #152]	; (8006534 <MX_ADC1_Init+0xe8>)
 800649a:	2200      	movs	r2, #0
 800649c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800649e:	4b25      	ldr	r3, [pc, #148]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80064a4:	4b23      	ldr	r3, [pc, #140]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80064aa:	4b22      	ldr	r3, [pc, #136]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80064b2:	4b20      	ldr	r3, [pc, #128]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80064b8:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80064c6:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80064ce:	4b19      	ldr	r3, [pc, #100]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064d6:	4817      	ldr	r0, [pc, #92]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064d8:	f001 fe90 	bl	80081fc <HAL_ADC_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80064e2:	f000 fe67 	bl	80071b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	4619      	mov	r1, r3
 80064f0:	4810      	ldr	r0, [pc, #64]	; (8006534 <MX_ADC1_Init+0xe8>)
 80064f2:	f002 fc19 	bl	8008d28 <HAL_ADCEx_MultiModeConfigChannel>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80064fc:	f000 fe5a 	bl	80071b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <MX_ADC1_Init+0xec>)
 8006502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006504:	2306      	movs	r3, #6
 8006506:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800650c:	237f      	movs	r3, #127	; 0x7f
 800650e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006510:	2304      	movs	r3, #4
 8006512:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4805      	ldr	r0, [pc, #20]	; (8006534 <MX_ADC1_Init+0xe8>)
 800651e:	f002 f82d 	bl	800857c <HAL_ADC_ConfigChannel>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006528:	f000 fe44 	bl	80071b4 <Error_Handler>
  }

}
 800652c:	bf00      	nop
 800652e:	3730      	adds	r7, #48	; 0x30
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200025a4 	.word	0x200025a4
 8006538:	0c900008 	.word	0x0c900008

0800653c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	609a      	str	r2, [r3, #8]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800655c:	d14f      	bne.n	80065fe <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800655e:	4b2a      	ldr	r3, [pc, #168]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	4a29      	ldr	r2, [pc, #164]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 8006564:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656a:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	4a23      	ldr	r2, [pc, #140]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <HAL_ADC_MspInit+0xcc>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800658e:	2304      	movs	r3, #4
 8006590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006592:	2303      	movs	r3, #3
 8006594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800659a:	f107 0314 	add.w	r3, r7, #20
 800659e:	4619      	mov	r1, r3
 80065a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065a4:	f003 ffd2 	bl	800a54c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80065a8:	4b18      	ldr	r3, [pc, #96]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065aa:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_ADC_MspInit+0xd4>)
 80065ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065b0:	2205      	movs	r2, #5
 80065b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065b4:	4b15      	ldr	r3, [pc, #84]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065bc:	2200      	movs	r2, #0
 80065be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80065c0:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065d8:	2220      	movs	r2, #32
 80065da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80065e2:	480a      	ldr	r0, [pc, #40]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065e4:	f003 fce6 	bl	8009fb4 <HAL_DMA_Init>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80065ee:	f000 fde1 	bl	80071b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a05      	ldr	r2, [pc, #20]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
 80065f8:	4a04      	ldr	r2, [pc, #16]	; (800660c <HAL_ADC_MspInit+0xd0>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80065fe:	bf00      	nop
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000
 800660c:	20002610 	.word	0x20002610
 8006610:	40020008 	.word	0x40020008

08006614 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <MX_COMP1_Init+0x44>)
 800661a:	4a10      	ldr	r2, [pc, #64]	; (800665c <MX_COMP1_Init+0x48>)
 800661c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800661e:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <MX_COMP1_Init+0x44>)
 8006620:	2200      	movs	r2, #0
 8006622:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <MX_COMP1_Init+0x44>)
 8006626:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <MX_COMP1_Init+0x4c>)
 8006628:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <MX_COMP1_Init+0x44>)
 800662c:	2200      	movs	r2, #0
 800662e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <MX_COMP1_Init+0x44>)
 8006632:	2200      	movs	r2, #0
 8006634:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <MX_COMP1_Init+0x44>)
 8006638:	2200      	movs	r2, #0
 800663a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <MX_COMP1_Init+0x44>)
 800663e:	2200      	movs	r2, #0
 8006640:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006642:	4805      	ldr	r0, [pc, #20]	; (8006658 <MX_COMP1_Init+0x44>)
 8006644:	f002 fdc4 	bl	80091d0 <HAL_COMP_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800664e:	f000 fdb1 	bl	80071b4 <Error_Handler>
  }

}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20002670 	.word	0x20002670
 800665c:	40010200 	.word	0x40010200
 8006660:	00800030 	.word	0x00800030

08006664 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <HAL_COMP_MspInit+0x5c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d118      	bne.n	80066b8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <HAL_COMP_MspInit+0x60>)
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	4a0e      	ldr	r2, [pc, #56]	; (80066c4 <HAL_COMP_MspInit+0x60>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <HAL_COMP_MspInit+0x60>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800669e:	2302      	movs	r3, #2
 80066a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066a2:	2303      	movs	r3, #3
 80066a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4619      	mov	r1, r3
 80066b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066b4:	f003 ff4a 	bl	800a54c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80066b8:	bf00      	nop
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40010200 	.word	0x40010200
 80066c4:	40021000 	.word	0x40021000

080066c8 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80066ce:	463b      	mov	r3, r7
 80066d0:	2230      	movs	r2, #48	; 0x30
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f008 faf1 	bl	800ecbc <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80066da:	4b16      	ldr	r3, [pc, #88]	; (8006734 <MX_DAC1_Init+0x6c>)
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <MX_DAC1_Init+0x70>)
 80066de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80066e0:	4814      	ldr	r0, [pc, #80]	; (8006734 <MX_DAC1_Init+0x6c>)
 80066e2:	f003 f848 	bl	8009776 <HAL_DAC_Init>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80066ec:	f000 fd62 	bl	80071b4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80066f0:	2302      	movs	r3, #2
 80066f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800670c:	2301      	movs	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006714:	463b      	mov	r3, r7
 8006716:	2210      	movs	r2, #16
 8006718:	4619      	mov	r1, r3
 800671a:	4806      	ldr	r0, [pc, #24]	; (8006734 <MX_DAC1_Init+0x6c>)
 800671c:	f003 fa14 	bl	8009b48 <HAL_DAC_ConfigChannel>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8006726:	f000 fd45 	bl	80071b4 <Error_Handler>
  }

}
 800672a:	bf00      	nop
 800672c:	3730      	adds	r7, #48	; 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200026a8 	.word	0x200026a8
 8006738:	50000800 	.word	0x50000800

0800673c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08c      	sub	sp, #48	; 0x30
 8006740:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006742:	463b      	mov	r3, r7
 8006744:	2230      	movs	r2, #48	; 0x30
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f008 fab7 	bl	800ecbc <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800674e:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <MX_DAC2_Init+0x6c>)
 8006750:	4a16      	ldr	r2, [pc, #88]	; (80067ac <MX_DAC2_Init+0x70>)
 8006752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006754:	4814      	ldr	r0, [pc, #80]	; (80067a8 <MX_DAC2_Init+0x6c>)
 8006756:	f003 f80e 	bl	8009776 <HAL_DAC_Init>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006760:	f000 fd28 	bl	80071b4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006768:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800676a:	2300      	movs	r3, #0
 800676c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800676e:	2300      	movs	r3, #0
 8006770:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006776:	2306      	movs	r3, #6
 8006778:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006782:	2301      	movs	r3, #1
 8006784:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800678a:	463b      	mov	r3, r7
 800678c:	2200      	movs	r2, #0
 800678e:	4619      	mov	r1, r3
 8006790:	4805      	ldr	r0, [pc, #20]	; (80067a8 <MX_DAC2_Init+0x6c>)
 8006792:	f003 f9d9 	bl	8009b48 <HAL_DAC_ConfigChannel>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800679c:	f000 fd0a 	bl	80071b4 <Error_Handler>
  }

}
 80067a0:	bf00      	nop
 80067a2:	3730      	adds	r7, #48	; 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20002694 	.word	0x20002694
 80067ac:	50000c00 	.word	0x50000c00

080067b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08c      	sub	sp, #48	; 0x30
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067b8:	f107 031c 	add.w	r3, r7, #28
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a40      	ldr	r2, [pc, #256]	; (80068d0 <HAL_DAC_MspInit+0x120>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d125      	bne.n	800681e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80067d2:	4b40      	ldr	r3, [pc, #256]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	4a3f      	ldr	r2, [pc, #252]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067de:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ea:	4b3a      	ldr	r3, [pc, #232]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	4a39      	ldr	r2, [pc, #228]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067f6:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006802:	2320      	movs	r3, #32
 8006804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006806:	2303      	movs	r3, #3
 8006808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800680e:	f107 031c 	add.w	r3, r7, #28
 8006812:	4619      	mov	r1, r3
 8006814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006818:	f003 fe98 	bl	800a54c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800681c:	e054      	b.n	80068c8 <HAL_DAC_MspInit+0x118>
  else if(dacHandle->Instance==DAC2)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <HAL_DAC_MspInit+0x128>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d14f      	bne.n	80068c8 <HAL_DAC_MspInit+0x118>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006828:	4b2a      	ldr	r3, [pc, #168]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 800682a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 800682e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 8006836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006840:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800684c:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <HAL_DAC_MspInit+0x124>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800685c:	2303      	movs	r3, #3
 800685e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	f107 031c 	add.w	r3, r7, #28
 8006868:	4619      	mov	r1, r3
 800686a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800686e:	f003 fe6d 	bl	800a54c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006872:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_DAC_MspInit+0x130>)
 8006876:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006878:	4b18      	ldr	r3, [pc, #96]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 800687a:	2229      	movs	r2, #41	; 0x29
 800687c:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800687e:	4b17      	ldr	r3, [pc, #92]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 8006880:	2210      	movs	r2, #16
 8006882:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 8006886:	2200      	movs	r2, #0
 8006888:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 800688c:	2280      	movs	r2, #128	; 0x80
 800688e:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006890:	4b12      	ldr	r3, [pc, #72]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 8006892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006896:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 800689a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800689e:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 80068a2:	2220      	movs	r2, #32
 80068a4:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80068ac:	480b      	ldr	r0, [pc, #44]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 80068ae:	f003 fb81 	bl	8009fb4 <HAL_DMA_Init>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_DAC_MspInit+0x10c>
      Error_Handler();
 80068b8:	f000 fc7c 	bl	80071b4 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a07      	ldr	r2, [pc, #28]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 80068c0:	609a      	str	r2, [r3, #8]
 80068c2:	4a06      	ldr	r2, [pc, #24]	; (80068dc <HAL_DAC_MspInit+0x12c>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80068c8:	bf00      	nop
 80068ca:	3730      	adds	r7, #48	; 0x30
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	50000800 	.word	0x50000800
 80068d4:	40021000 	.word	0x40021000
 80068d8:	50000c00 	.word	0x50000c00
 80068dc:	200026bc 	.word	0x200026bc
 80068e0:	40020030 	.word	0x40020030

080068e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <MX_DMA_Init+0x60>)
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	4a15      	ldr	r2, [pc, #84]	; (8006944 <MX_DMA_Init+0x60>)
 80068f0:	f043 0304 	orr.w	r3, r3, #4
 80068f4:	6493      	str	r3, [r2, #72]	; 0x48
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <MX_DMA_Init+0x60>)
 80068f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <MX_DMA_Init+0x60>)
 8006904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006906:	4a0f      	ldr	r2, [pc, #60]	; (8006944 <MX_DMA_Init+0x60>)
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	6493      	str	r3, [r2, #72]	; 0x48
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <MX_DMA_Init+0x60>)
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800691a:	2200      	movs	r2, #0
 800691c:	2101      	movs	r1, #1
 800691e:	200b      	movs	r0, #11
 8006920:	f002 fee7 	bl	80096f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006924:	200b      	movs	r0, #11
 8006926:	f002 fefe 	bl	8009726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	200d      	movs	r0, #13
 8006930:	f002 fedf 	bl	80096f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006934:	200d      	movs	r0, #13
 8006936:	f002 fef6 	bl	8009726 <HAL_NVIC_EnableIRQ>

}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40021000 	.word	0x40021000

08006948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <__NVIC_GetPriorityGrouping+0x18>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	f003 0307 	and.w	r3, r3, #7
}
 8006956:	4618      	mov	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000ed00 	.word	0xe000ed00

08006964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800696e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006972:	2b00      	cmp	r3, #0
 8006974:	db0b      	blt.n	800698e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	f003 021f 	and.w	r2, r3, #31
 800697c:	4907      	ldr	r1, [pc, #28]	; (800699c <__NVIC_EnableIRQ+0x38>)
 800697e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2001      	movs	r0, #1
 8006986:	fa00 f202 	lsl.w	r2, r0, r2
 800698a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	e000e100 	.word	0xe000e100

080069a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db0a      	blt.n	80069ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	490c      	ldr	r1, [pc, #48]	; (80069ec <__NVIC_SetPriority+0x4c>)
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	0112      	lsls	r2, r2, #4
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	440b      	add	r3, r1
 80069c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069c8:	e00a      	b.n	80069e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4908      	ldr	r1, [pc, #32]	; (80069f0 <__NVIC_SetPriority+0x50>)
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	3b04      	subs	r3, #4
 80069d8:	0112      	lsls	r2, r2, #4
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	440b      	add	r3, r1
 80069de:	761a      	strb	r2, [r3, #24]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	e000e100 	.word	0xe000e100
 80069f0:	e000ed00 	.word	0xe000ed00

080069f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f1c3 0307 	rsb	r3, r3, #7
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	bf28      	it	cs
 8006a12:	2304      	movcs	r3, #4
 8006a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	2b06      	cmp	r3, #6
 8006a1c:	d902      	bls.n	8006a24 <NVIC_EncodePriority+0x30>
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	3b03      	subs	r3, #3
 8006a22:	e000      	b.n	8006a26 <NVIC_EncodePriority+0x32>
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43da      	mvns	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	401a      	ands	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	fa01 f303 	lsl.w	r3, r1, r3
 8006a46:	43d9      	mvns	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a4c:	4313      	orrs	r3, r2
         );
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3724      	adds	r7, #36	; 0x24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	3302      	adds	r3, #2
 8006a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	ea02 0103 	and.w	r1, r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	fa93 f3a3 	rbit	r3, r3
 8006a8a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	fab3 f383 	clz	r3, r3
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	4806      	ldr	r0, [pc, #24]	; (8006ab8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40010000 	.word	0x40010000

08006abc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	613b      	str	r3, [r7, #16]
  return result;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	fab3 f383 	clz	r3, r3
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	2103      	movs	r1, #3
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	401a      	ands	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	61bb      	str	r3, [r7, #24]
  return result;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	fa01 f303 	lsl.w	r3, r1, r3
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3724      	adds	r7, #36	; 0x24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b089      	sub	sp, #36	; 0x24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	fa93 f3a3 	rbit	r3, r3
 8006b34:	613b      	str	r3, [r7, #16]
  return result;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	fab3 f383 	clz	r3, r3
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	2103      	movs	r1, #3
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	401a      	ands	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	fa93 f3a3 	rbit	r3, r3
 8006b54:	61bb      	str	r3, [r7, #24]
  return result;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	fab3 f383 	clz	r3, r3
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	; 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b9c:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba0:	4907      	ldr	r1, [pc, #28]	; (8006bc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40021000 	.word	0x40021000

08006bc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006bca:	f107 031c 	add.w	r3, r7, #28
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
 8006bd4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	611a      	str	r2, [r3, #16]
 8006be4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006be6:	2004      	movs	r0, #4
 8006be8:	f7ff ffd4 	bl	8006b94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006bec:	2020      	movs	r0, #32
 8006bee:	f7ff ffd1 	bl	8006b94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f7ff ffce 	bl	8006b94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006bf8:	2002      	movs	r0, #2
 8006bfa:	f7ff ffcb 	bl	8006b94 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006bfe:	2108      	movs	r1, #8
 8006c00:	48d3      	ldr	r0, [pc, #844]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006c02:	f7ff ffb9 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006c06:	2108      	movs	r1, #8
 8006c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c0c:	f7ff ffb4 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006c10:	2110      	movs	r1, #16
 8006c12:	48cf      	ldr	r0, [pc, #828]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006c14:	f7ff ffb0 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006c18:	2120      	movs	r1, #32
 8006c1a:	48cd      	ldr	r0, [pc, #820]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006c1c:	f7ff ffac 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006c20:	2101      	movs	r1, #1
 8006c22:	48cc      	ldr	r0, [pc, #816]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006c24:	f7ff ffa8 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c2c:	48c8      	ldr	r0, [pc, #800]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006c2e:	f7ff ffa3 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c36:	48c6      	ldr	r0, [pc, #792]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006c38:	f7ff ff9e 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006c3c:	2140      	movs	r1, #64	; 0x40
 8006c3e:	48c5      	ldr	r0, [pc, #788]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006c40:	f7ff ff9a 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	48c3      	ldr	r0, [pc, #780]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006c48:	f7ff ff96 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c50:	48c0      	ldr	r0, [pc, #768]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006c52:	f7ff ff91 	bl	8006b78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006c56:	49c0      	ldr	r1, [pc, #768]	; (8006f58 <MX_GPIO_Init+0x394>)
 8006c58:	2002      	movs	r0, #2
 8006c5a:	f7ff feff 	bl	8006a5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006c5e:	49bf      	ldr	r1, [pc, #764]	; (8006f5c <MX_GPIO_Init+0x398>)
 8006c60:	2002      	movs	r0, #2
 8006c62:	f7ff fefb 	bl	8006a5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006c66:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006c6a:	2005      	movs	r0, #5
 8006c6c:	f7ff fef6 	bl	8006a5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006c70:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006c74:	2005      	movs	r0, #5
 8006c76:	f7ff fef1 	bl	8006a5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006c7a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006c7e:	2002      	movs	r0, #2
 8006c80:	f7ff feec 	bl	8006a5c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c88:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c90:	2300      	movs	r3, #0
 8006c92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c96:	2302      	movs	r3, #2
 8006c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c9c:	f107 031c 	add.w	r3, r7, #28
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f006 fd29 	bl	800d6f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006caa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006cbe:	f107 031c 	add.w	r3, r7, #28
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f006 fd18 	bl	800d6f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006cde:	f107 031c 	add.w	r3, r7, #28
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f006 fd08 	bl	800d6f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006ce8:	2302      	movs	r3, #2
 8006cea:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	4618      	mov	r0, r3
 8006d04:	f006 fcf8 	bl	800d6f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006d1e:	f107 031c 	add.w	r3, r7, #28
 8006d22:	4618      	mov	r0, r3
 8006d24:	f006 fce8 	bl	800d6f8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d2e:	4888      	ldr	r0, [pc, #544]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d30:	f7ff fef3 	bl	8006b1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006d34:	2201      	movs	r2, #1
 8006d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3a:	4885      	ldr	r0, [pc, #532]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d3c:	f7ff feed 	bl	8006b1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006d40:	2201      	movs	r2, #1
 8006d42:	2101      	movs	r1, #1
 8006d44:	4886      	ldr	r0, [pc, #536]	; (8006f60 <MX_GPIO_Init+0x39c>)
 8006d46:	f7ff fee8 	bl	8006b1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4884      	ldr	r0, [pc, #528]	; (8006f60 <MX_GPIO_Init+0x39c>)
 8006d50:	f7ff fee3 	bl	8006b1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006d54:	2201      	movs	r2, #1
 8006d56:	2104      	movs	r1, #4
 8006d58:	487d      	ldr	r0, [pc, #500]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d5a:	f7ff fede 	bl	8006b1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d64:	487a      	ldr	r0, [pc, #488]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d66:	f7ff fea9 	bl	8006abc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d70:	4877      	ldr	r0, [pc, #476]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d72:	f7ff fea3 	bl	8006abc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006d76:	2200      	movs	r2, #0
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4879      	ldr	r0, [pc, #484]	; (8006f60 <MX_GPIO_Init+0x39c>)
 8006d7c:	f7ff fe9e 	bl	8006abc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006d80:	2200      	movs	r2, #0
 8006d82:	2102      	movs	r1, #2
 8006d84:	4876      	ldr	r0, [pc, #472]	; (8006f60 <MX_GPIO_Init+0x39c>)
 8006d86:	f7ff fe99 	bl	8006abc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	4870      	ldr	r0, [pc, #448]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006d90:	f7ff fe94 	bl	8006abc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006d94:	2308      	movs	r3, #8
 8006d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006da4:	2302      	movs	r3, #2
 8006da6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4868      	ldr	r0, [pc, #416]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006dae:	f006 fe96 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006db2:	2308      	movs	r3, #8
 8006db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006db6:	2301      	movs	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006dc6:	1d3b      	adds	r3, r7, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dce:	f006 fe86 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	4619      	mov	r1, r3
 8006dea:	4859      	ldr	r0, [pc, #356]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006dec:	f006 fe77 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006df0:	2320      	movs	r3, #32
 8006df2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006df4:	2301      	movs	r3, #1
 8006df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006e04:	1d3b      	adds	r3, r7, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4851      	ldr	r0, [pc, #324]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006e0a:	f006 fe68 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e12:	2301      	movs	r3, #1
 8006e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	4619      	mov	r1, r3
 8006e26:	484b      	ldr	r0, [pc, #300]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006e28:	f006 fe59 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e32:	2301      	movs	r3, #1
 8006e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4842      	ldr	r0, [pc, #264]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006e48:	f006 fe49 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e52:	2301      	movs	r3, #1
 8006e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	483a      	ldr	r0, [pc, #232]	; (8006f50 <MX_GPIO_Init+0x38c>)
 8006e68:	f006 fe39 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e70:	2301      	movs	r3, #1
 8006e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006e74:	2303      	movs	r3, #3
 8006e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	4833      	ldr	r0, [pc, #204]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006e86:	f006 fe2a 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006e92:	2303      	movs	r3, #3
 8006e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006e9e:	1d3b      	adds	r3, r7, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	482c      	ldr	r0, [pc, #176]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006ea4:	f006 fe1b 	bl	800dade <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4824      	ldr	r0, [pc, #144]	; (8006f54 <MX_GPIO_Init+0x390>)
 8006ec4:	f006 fe0b 	bl	800dade <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006ec8:	f7ff fd3e 	bl	8006948 <__NVIC_GetPriorityGrouping>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff fd8e 	bl	80069f4 <NVIC_EncodePriority>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4619      	mov	r1, r3
 8006edc:	2006      	movs	r0, #6
 8006ede:	f7ff fd5f 	bl	80069a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006ee2:	2006      	movs	r0, #6
 8006ee4:	f7ff fd3e 	bl	8006964 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006ee8:	f7ff fd2e 	bl	8006948 <__NVIC_GetPriorityGrouping>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fd7e 	bl	80069f4 <NVIC_EncodePriority>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4619      	mov	r1, r3
 8006efc:	2007      	movs	r0, #7
 8006efe:	f7ff fd4f 	bl	80069a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006f02:	2007      	movs	r0, #7
 8006f04:	f7ff fd2e 	bl	8006964 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f08:	f7ff fd1e 	bl	8006948 <__NVIC_GetPriorityGrouping>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fd6e 	bl	80069f4 <NVIC_EncodePriority>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	2008      	movs	r0, #8
 8006f1e:	f7ff fd3f 	bl	80069a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006f22:	2008      	movs	r0, #8
 8006f24:	f7ff fd1e 	bl	8006964 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006f28:	f7ff fd0e 	bl	8006948 <__NVIC_GetPriorityGrouping>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fd5e 	bl	80069f4 <NVIC_EncodePriority>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	2028      	movs	r0, #40	; 0x28
 8006f3e:	f7ff fd2f 	bl	80069a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006f42:	2028      	movs	r0, #40	; 0x28
 8006f44:	f7ff fd0e 	bl	8006964 <__NVIC_EnableIRQ>

}
 8006f48:	bf00      	nop
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	e009      	b.n	8006f64 <MX_GPIO_Init+0x3a0>
 8006f50:	48000800 	.word	0x48000800
 8006f54:	48000400 	.word	0x48000400
 8006f58:	0f000003 	.word	0x0f000003
 8006f5c:	f0000003 	.word	0xf0000003
 8006f60:	48001400 	.word	0x48001400
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d013      	beq.n	8006fa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006f88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006f90:	e000      	b.n	8006f94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006f92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f9      	beq.n	8006f92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006f9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006fa8:	687b      	ldr	r3, [r7, #4]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  int i=0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e009      	b.n	8006fe0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	60ba      	str	r2, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ffc7 	bl	8006f68 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	dbf1      	blt.n	8006fcc <_write+0x16>
  return len;
 8006fe8:	687b      	ldr	r3, [r7, #4]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ff8:	f000 feab 	bl	8007d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ffc:	f000 f86c 	bl	80070d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007000:	f7ff fde0 	bl	8006bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007004:	f7ff fc6e 	bl	80068e4 <MX_DMA_Init>
  MX_DAC1_Init();
 8007008:	f7ff fb5e 	bl	80066c8 <MX_DAC1_Init>
  MX_DAC2_Init();
 800700c:	f7ff fb96 	bl	800673c <MX_DAC2_Init>
  MX_ADC1_Init();
 8007010:	f7ff fa1c 	bl	800644c <MX_ADC1_Init>
  MX_COMP1_Init();
 8007014:	f7ff fafe 	bl	8006614 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007018:	f000 fba0 	bl	800775c <MX_TIM2_Init>
  MX_SPI3_Init();
 800701c:	f000 f908 	bl	8007230 <MX_SPI3_Init>
  MX_RNG_Init();
 8007020:	f000 f8f8 	bl	8007214 <MX_RNG_Init>
  MX_TIM1_Init();
 8007024:	f000 fb2a 	bl	800767c <MX_TIM1_Init>
  MX_TIM8_Init();
 8007028:	f000 fc80 	bl	800792c <MX_TIM8_Init>
  MX_TIM16_Init();
 800702c:	f000 fd38 	bl	8007aa0 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007030:	f000 fce4 	bl	80079fc <MX_TIM15_Init>
  MX_TIM5_Init();
 8007034:	f000 fc2c 	bl	8007890 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007038:	f000 fbdc 	bl	80077f4 <MX_TIM3_Init>

//  SM_EnablePwmToSignal();


//  SM_DisablePwmToSignal();
  SM_EnableDacToSignal();
 800703c:	f7fe fedc 	bl	8005df8 <SM_EnableDacToSignal>

  DT_InitRegister();
 8007040:	f7fd ffb0 	bl	8004fa4 <DT_InitRegister>

  // main signal function output (external)
  SM_Init();
 8007044:	f7fe fcf4 	bl	8005a30 <SM_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007048:	2000      	movs	r0, #0
 800704a:	f7fe fa59 	bl	8005500 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 800704e:	2000      	movs	r0, #0
 8007050:	f7fe fb1e 	bl	8005690 <FuncO_ApplyPresetToSync>

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007054:	2110      	movs	r1, #16
 8007056:	481b      	ldr	r0, [pc, #108]	; (80070c4 <main+0xd0>)
 8007058:	f002 fbaf 	bl	80097ba <HAL_DAC_Start>

  // send trigger input out to dac
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800705c:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <main+0xd4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <main+0xd4>)
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8007068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800706c:	f7fe f944 	bl	80052f8 <FreqO_ApplyPreset>



  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8007070:	2201      	movs	r2, #1
 8007072:	2108      	movs	r1, #8
 8007074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007078:	f003 fccc 	bl	800aa14 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyProfileToSignal(eDefaultVppPreset);
 800707c:	2059      	movs	r0, #89	; 0x59
 800707e:	f7ff f807 	bl	8006090 <VPP_ApplyProfileToSignal>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007082:	2200      	movs	r2, #0
 8007084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007088:	4810      	ldr	r0, [pc, #64]	; (80070cc <main+0xd8>)
 800708a:	f003 fcc3 	bl	800aa14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007094:	480d      	ldr	r0, [pc, #52]	; (80070cc <main+0xd8>)
 8007096:	f003 fcbd 	bl	800aa14 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800709a:	480d      	ldr	r0, [pc, #52]	; (80070d0 <main+0xdc>)
 800709c:	f004 fdb4 	bl	800bc08 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <main+0xe0>)
 80070a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <main+0xe0>)
 80070aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80070b0:	f7f9 fe38 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80070b4:	f7f9 fe44 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80070b8:	f7fd fdc2 	bl	8004c40 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80070bc:	f7fc fd5e 	bl	8003b7c <EM_ProcessEvent>
 80070c0:	e7fc      	b.n	80070bc <main+0xc8>
 80070c2:	bf00      	nop
 80070c4:	200026a8 	.word	0x200026a8
 80070c8:	40013400 	.word	0x40013400
 80070cc:	48000800 	.word	0x48000800
 80070d0:	20002864 	.word	0x20002864
 80070d4:	40001000 	.word	0x40001000

080070d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b0a8      	sub	sp, #160	; 0xa0
 80070dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80070de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070e2:	2238      	movs	r2, #56	; 0x38
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f007 fde8 	bl	800ecbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80070ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070fc:	463b      	mov	r3, r7
 80070fe:	2254      	movs	r2, #84	; 0x54
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f007 fdda 	bl	800ecbc <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007108:	2000      	movs	r0, #0
 800710a:	f003 fc9b 	bl	800aa44 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800710e:	2322      	movs	r3, #34	; 0x22
 8007110:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007116:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007118:	2340      	movs	r3, #64	; 0x40
 800711a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800711c:	2301      	movs	r3, #1
 800711e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007122:	2302      	movs	r3, #2
 8007124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007128:	2302      	movs	r3, #2
 800712a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800712e:	2302      	movs	r3, #2
 8007130:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007134:	232a      	movs	r3, #42	; 0x2a
 8007136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800713a:	231e      	movs	r3, #30
 800713c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007140:	2304      	movs	r3, #4
 8007142:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007146:	2302      	movs	r3, #2
 8007148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800714c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007150:	4618      	mov	r0, r3
 8007152:	f003 fd1b 	bl	800ab8c <HAL_RCC_OscConfig>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800715c:	f000 f82a 	bl	80071b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007160:	230f      	movs	r3, #15
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007164:	2303      	movs	r3, #3
 8007166:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007168:	2300      	movs	r3, #0
 800716a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800716c:	2300      	movs	r3, #0
 800716e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007170:	2300      	movs	r3, #0
 8007172:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007178:	2108      	movs	r1, #8
 800717a:	4618      	mov	r0, r3
 800717c:	f004 f81e 	bl	800b1bc <HAL_RCC_ClockConfig>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007186:	f000 f815 	bl	80071b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800718a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800718e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007190:	2300      	movs	r3, #0
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007198:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800719a:	463b      	mov	r3, r7
 800719c:	4618      	mov	r0, r3
 800719e:	f004 f9fd 	bl	800b59c <HAL_RCCEx_PeriphCLKConfig>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80071a8:	f000 f804 	bl	80071b4 <Error_Handler>
  }
}
 80071ac:	bf00      	nop
 80071ae:	37a0      	adds	r7, #160	; 0xa0
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
	...

080071e4 <LL_AHB2_GRP1_EnableClock>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80071ec:	4b08      	ldr	r3, [pc, #32]	; (8007210 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071f0:	4907      	ldr	r1, [pc, #28]	; (8007210 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80071fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4013      	ands	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40021000 	.word	0x40021000

08007214 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007218:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800721c:	f7ff ffe2 	bl	80071e4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007220:	4802      	ldr	r0, [pc, #8]	; (800722c <MX_RNG_Init+0x18>)
 8007222:	f7ff ffce 	bl	80071c2 <LL_RNG_Enable>

}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	50060800 	.word	0x50060800

08007230 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007234:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007236:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <MX_SPI3_Init+0x78>)
 8007238:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800723a:	4b1a      	ldr	r3, [pc, #104]	; (80072a4 <MX_SPI3_Init+0x74>)
 800723c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007240:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007244:	2200      	movs	r2, #0
 8007246:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007248:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <MX_SPI3_Init+0x74>)
 800724a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800724e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007250:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007252:	2200      	movs	r2, #0
 8007254:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007258:	2200      	movs	r2, #0
 800725a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800725c:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <MX_SPI3_Init+0x74>)
 800725e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007262:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007264:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007266:	2210      	movs	r2, #16
 8007268:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <MX_SPI3_Init+0x74>)
 800726c:	2200      	movs	r2, #0
 800726e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007272:	2200      	movs	r2, #0
 8007274:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007278:	2200      	movs	r2, #0
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <MX_SPI3_Init+0x74>)
 800727e:	2207      	movs	r2, #7
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <MX_SPI3_Init+0x74>)
 800728a:	2208      	movs	r2, #8
 800728c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800728e:	4805      	ldr	r0, [pc, #20]	; (80072a4 <MX_SPI3_Init+0x74>)
 8007290:	f004 fbd0 	bl	800ba34 <HAL_SPI_Init>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800729a:	f7ff ff8b 	bl	80071b4 <Error_Handler>
  }

}
 800729e:	bf00      	nop
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2000271c 	.word	0x2000271c
 80072a8:	40003c00 	.word	0x40003c00

080072ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b4:	f107 0314 	add.w	r3, r7, #20
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a17      	ldr	r2, [pc, #92]	; (8007328 <HAL_SPI_MspInit+0x7c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d128      	bne.n	8007320 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d2:	4a16      	ldr	r2, [pc, #88]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d8:	6593      	str	r3, [r2, #88]	; 0x58
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ea:	4a10      	ldr	r2, [pc, #64]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <HAL_SPI_MspInit+0x80>)
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80072fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007304:	2302      	movs	r3, #2
 8007306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800730c:	2300      	movs	r3, #0
 800730e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007310:	2306      	movs	r3, #6
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4619      	mov	r1, r3
 800731a:	4805      	ldr	r0, [pc, #20]	; (8007330 <HAL_SPI_MspInit+0x84>)
 800731c:	f003 f916 	bl	800a54c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40003c00 	.word	0x40003c00
 800732c:	40021000 	.word	0x40021000
 8007330:	48000800 	.word	0x48000800

08007334 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800733e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007342:	6093      	str	r3, [r2, #8]
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40007000 	.word	0x40007000

08007354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <HAL_MspInit+0x44>)
 800735c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735e:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <HAL_MspInit+0x44>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6613      	str	r3, [r2, #96]	; 0x60
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_MspInit+0x44>)
 8007368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	607b      	str	r3, [r7, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_MspInit+0x44>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <HAL_MspInit+0x44>)
 8007378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737c:	6593      	str	r3, [r2, #88]	; 0x58
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_MspInit+0x44>)
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800738a:	f7ff ffd3 	bl	8007334 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40021000 	.word	0x40021000

0800739c <LL_EXTI_IsActiveFlag_0_31>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4013      	ands	r3, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d101      	bne.n	80073b6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40010400 	.word	0x40010400

080073c8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80073d0:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6153      	str	r3, [r2, #20]
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010400 	.word	0x40010400

080073e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80073ec:	bf00      	nop
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073f6:	b480      	push	{r7}
 80073f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073fa:	e7fe      	b.n	80073fa <HardFault_Handler+0x4>

080073fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007400:	e7fe      	b.n	8007400 <MemManage_Handler+0x4>

08007402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007402:	b480      	push	{r7}
 8007404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007406:	e7fe      	b.n	8007406 <BusFault_Handler+0x4>

08007408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800740c:	e7fe      	b.n	800740c <UsageFault_Handler+0x4>

0800740e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800740e:	b480      	push	{r7}
 8007410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007412:	bf00      	nop
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007420:	bf00      	nop
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800742a:	b480      	push	{r7}
 800742c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800742e:	bf00      	nop
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800743c:	f000 fcdc 	bl	8007df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007440:	bf00      	nop
 8007442:	bd80      	pop	{r7, pc}

08007444 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007448:	f7fd fcb2 	bl	8004db0 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800744c:	2001      	movs	r0, #1
 800744e:	f7ff ffa5 	bl	800739c <LL_EXTI_IsActiveFlag_0_31>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007458:	2001      	movs	r0, #1
 800745a:	f7ff ffb5 	bl	80073c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}

08007462 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007466:	f7fd fcc9 	bl	8004dfc <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800746a:	2002      	movs	r0, #2
 800746c:	f7ff ff96 	bl	800739c <LL_EXTI_IsActiveFlag_0_31>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007476:	2002      	movs	r0, #2
 8007478:	f7ff ffa6 	bl	80073c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800747c:	bf00      	nop
 800747e:	bd80      	pop	{r7, pc}

08007480 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007484:	f7fd fce0 	bl	8004e48 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007488:	2004      	movs	r0, #4
 800748a:	f7ff ff87 	bl	800739c <LL_EXTI_IsActiveFlag_0_31>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007494:	2004      	movs	r0, #4
 8007496:	f7ff ff97 	bl	80073c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80074a4:	4802      	ldr	r0, [pc, #8]	; (80074b0 <DMA1_Channel1_IRQHandler+0x10>)
 80074a6:	f002 ff01 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074aa:	bf00      	nop
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20002610 	.word	0x20002610

080074b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80074b8:	4802      	ldr	r0, [pc, #8]	; (80074c4 <DMA1_Channel3_IRQHandler+0x10>)
 80074ba:	f002 fef7 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80074be:	bf00      	nop
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200026bc 	.word	0x200026bc

080074c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80074cc:	f7f9 fc56 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80074d0:	f7fd fce0 	bl	8004e94 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80074d4:	4803      	ldr	r0, [pc, #12]	; (80074e4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80074d6:	f004 fe0b 	bl	800c0f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80074da:	4803      	ldr	r0, [pc, #12]	; (80074e8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80074dc:	f004 fe08 	bl	800c0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20002864 	.word	0x20002864
 80074e8:	200027cc 	.word	0x200027cc

080074ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <TIM3_IRQHandler+0x10>)
 80074f2:	f004 fdfd 	bl	800c0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20001f8c 	.word	0x20001f8c

08007500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007504:	f7fd fc04 	bl	8004d10 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007508:	f7fd fc2a 	bl	8004d60 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800750c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007510:	f7ff ff44 	bl	800739c <LL_EXTI_IsActiveFlag_0_31>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800751a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800751e:	f7ff ff53 	bl	80073c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007526:	f7ff ff39 	bl	800739c <LL_EXTI_IsActiveFlag_0_31>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007534:	f7ff ff48 	bl	80073c8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007538:	bf00      	nop
 800753a:	bd80      	pop	{r7, pc}

0800753c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007540:	f7fd fb8e 	bl	8004c60 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007544:	4802      	ldr	r0, [pc, #8]	; (8007550 <TIM5_IRQHandler+0x14>)
 8007546:	f004 fdd3 	bl	800c0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20002818 	.word	0x20002818

08007554 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e00a      	b.n	800757c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007566:	f3af 8000 	nop.w
 800756a:	4601      	mov	r1, r0
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	60ba      	str	r2, [r7, #8]
 8007572:	b2ca      	uxtb	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	3301      	adds	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	dbf0      	blt.n	8007566 <_read+0x12>
	}

return len;
 8007584:	687b      	ldr	r3, [r7, #4]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_close>:
	}
	return len;
}

int _close(int file)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
	return -1;
 8007596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075b6:	605a      	str	r2, [r3, #4]
	return 0;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <_isatty>:

int _isatty(int file)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
	return 1;
 80075ce:	2301      	movs	r3, #1
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
	return 0;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <_sbrk+0x50>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <_sbrk+0x16>
		heap_end = &end;
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_sbrk+0x50>)
 800760a:	4a10      	ldr	r2, [pc, #64]	; (800764c <_sbrk+0x54>)
 800760c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800760e:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <_sbrk+0x50>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <_sbrk+0x50>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4413      	add	r3, r2
 800761c:	466a      	mov	r2, sp
 800761e:	4293      	cmp	r3, r2
 8007620:	d907      	bls.n	8007632 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007622:	f007 fb21 	bl	800ec68 <__errno>
 8007626:	4602      	mov	r2, r0
 8007628:	230c      	movs	r3, #12
 800762a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800762c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007630:	e006      	b.n	8007640 <_sbrk+0x48>
	}

	heap_end += incr;
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_sbrk+0x50>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	4a03      	ldr	r2, [pc, #12]	; (8007648 <_sbrk+0x50>)
 800763c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20001f10 	.word	0x20001f10
 800764c:	20002950 	.word	0x20002950

08007650 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <SystemInit+0x28>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765a:	4a07      	ldr	r2, [pc, #28]	; (8007678 <SystemInit+0x28>)
 800765c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <SystemInit+0x28>)
 8007666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800766a:	609a      	str	r2, [r3, #8]
#endif
}
 800766c:	bf00      	nop
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	e000ed00 	.word	0xe000ed00

0800767c <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b09a      	sub	sp, #104	; 0x68
 8007680:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007682:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007686:	2224      	movs	r2, #36	; 0x24
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f007 fb16 	bl	800ecbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800769c:	1d3b      	adds	r3, r7, #4
 800769e:	2234      	movs	r2, #52	; 0x34
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f007 fb0a 	bl	800ecbc <memset>

  htim1.Instance = TIM1;
 80076a8:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076aa:	4a2b      	ldr	r2, [pc, #172]	; (8007758 <MX_TIM1_Init+0xdc>)
 80076ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80076ae:	4b29      	ldr	r3, [pc, #164]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80076b4:	4b27      	ldr	r3, [pc, #156]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076b6:	2260      	movs	r2, #96	; 0x60
 80076b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80076ba:	4b26      	ldr	r3, [pc, #152]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80076ce:	4b21      	ldr	r3, [pc, #132]	; (8007754 <MX_TIM1_Init+0xd8>)
 80076d0:	2280      	movs	r2, #128	; 0x80
 80076d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80076d4:	2302      	movs	r3, #2
 80076d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80076d8:	2300      	movs	r3, #0
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80076dc:	2301      	movs	r3, #1
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80076e0:	2300      	movs	r3, #0
 80076e2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80076e8:	2300      	movs	r3, #0
 80076ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80076ec:	2301      	movs	r3, #1
 80076ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80076f0:	2300      	movs	r3, #0
 80076f2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80076f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80076fc:	4619      	mov	r1, r3
 80076fe:	4815      	ldr	r0, [pc, #84]	; (8007754 <MX_TIM1_Init+0xd8>)
 8007700:	f004 fc50 	bl	800bfa4 <HAL_TIM_Encoder_Init>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800770a:	f7ff fd53 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800770e:	2320      	movs	r3, #32
 8007710:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007712:	2300      	movs	r3, #0
 8007714:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007716:	2300      	movs	r3, #0
 8007718:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800771a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800771e:	4619      	mov	r1, r3
 8007720:	480c      	ldr	r0, [pc, #48]	; (8007754 <MX_TIM1_Init+0xd8>)
 8007722:	f005 fd2b 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800772c:	f7ff fd42 	bl	80071b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007730:	2300      	movs	r3, #0
 8007732:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007734:	2300      	movs	r3, #0
 8007736:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007738:	1d3b      	adds	r3, r7, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <MX_TIM1_Init+0xd8>)
 800773e:	f005 fdb3 	bl	800d2a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007748:	f7ff fd34 	bl	80071b4 <Error_Handler>
  }

}
 800774c:	bf00      	nop
 800774e:	3768      	adds	r7, #104	; 0x68
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20002864 	.word	0x20002864
 8007758:	40012c00 	.word	0x40012c00

0800775c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007762:	f107 0310 	add.w	r3, r7, #16
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	609a      	str	r2, [r3, #8]
 800776e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800777a:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <MX_TIM2_Init+0x94>)
 800777c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <MX_TIM2_Init+0x94>)
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007788:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <MX_TIM2_Init+0x94>)
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <MX_TIM2_Init+0x94>)
 8007790:	2201      	movs	r2, #1
 8007792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <MX_TIM2_Init+0x94>)
 8007796:	2200      	movs	r2, #0
 8007798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <MX_TIM2_Init+0x94>)
 800779c:	2280      	movs	r2, #128	; 0x80
 800779e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077a0:	4813      	ldr	r0, [pc, #76]	; (80077f0 <MX_TIM2_Init+0x94>)
 80077a2:	f004 f9d9 	bl	800bb58 <HAL_TIM_Base_Init>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80077ac:	f7ff fd02 	bl	80071b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077b6:	f107 0310 	add.w	r3, r7, #16
 80077ba:	4619      	mov	r1, r3
 80077bc:	480c      	ldr	r0, [pc, #48]	; (80077f0 <MX_TIM2_Init+0x94>)
 80077be:	f004 ff27 	bl	800c610 <HAL_TIM_ConfigClockSource>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80077c8:	f7ff fcf4 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80077cc:	2320      	movs	r3, #32
 80077ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <MX_TIM2_Init+0x94>)
 80077da:	f005 fccf 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80077e4:	f7ff fce6 	bl	80071b4 <Error_Handler>
  }

}
 80077e8:	bf00      	nop
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200028b0 	.word	0x200028b0

080077f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077fa:	f107 0310 	add.w	r3, r7, #16
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	609a      	str	r2, [r3, #8]
 8007806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	605a      	str	r2, [r3, #4]
 8007810:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <MX_TIM3_Init+0x94>)
 8007814:	4a1d      	ldr	r2, [pc, #116]	; (800788c <MX_TIM3_Init+0x98>)
 8007816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007818:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <MX_TIM3_Init+0x94>)
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800781e:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <MX_TIM3_Init+0x94>)
 8007820:	2210      	movs	r2, #16
 8007822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007824:	4b18      	ldr	r3, [pc, #96]	; (8007888 <MX_TIM3_Init+0x94>)
 8007826:	2201      	movs	r2, #1
 8007828:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <MX_TIM3_Init+0x94>)
 800782c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <MX_TIM3_Init+0x94>)
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007838:	4813      	ldr	r0, [pc, #76]	; (8007888 <MX_TIM3_Init+0x94>)
 800783a:	f004 f98d 	bl	800bb58 <HAL_TIM_Base_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007844:	f7ff fcb6 	bl	80071b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800784c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800784e:	f107 0310 	add.w	r3, r7, #16
 8007852:	4619      	mov	r1, r3
 8007854:	480c      	ldr	r0, [pc, #48]	; (8007888 <MX_TIM3_Init+0x94>)
 8007856:	f004 fedb 	bl	800c610 <HAL_TIM_ConfigClockSource>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007860:	f7ff fca8 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007864:	2320      	movs	r3, #32
 8007866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800786c:	1d3b      	adds	r3, r7, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4805      	ldr	r0, [pc, #20]	; (8007888 <MX_TIM3_Init+0x94>)
 8007872:	f005 fc83 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800787c:	f7ff fc9a 	bl	80071b4 <Error_Handler>
  }

}
 8007880:	bf00      	nop
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20001f8c 	.word	0x20001f8c
 800788c:	40000400 	.word	0x40000400

08007890 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	609a      	str	r2, [r3, #8]
 80078a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a4:	1d3b      	adds	r3, r7, #4
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]
 80078ac:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80078ae:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <MX_TIM5_Init+0x94>)
 80078b0:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <MX_TIM5_Init+0x98>)
 80078b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <MX_TIM5_Init+0x94>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078ba:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <MX_TIM5_Init+0x94>)
 80078bc:	2200      	movs	r2, #0
 80078be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80078c0:	4b18      	ldr	r3, [pc, #96]	; (8007924 <MX_TIM5_Init+0x94>)
 80078c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <MX_TIM5_Init+0x94>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <MX_TIM5_Init+0x94>)
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80078d4:	4813      	ldr	r0, [pc, #76]	; (8007924 <MX_TIM5_Init+0x94>)
 80078d6:	f004 f93f 	bl	800bb58 <HAL_TIM_Base_Init>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80078e0:	f7ff fc68 	bl	80071b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80078ea:	f107 0310 	add.w	r3, r7, #16
 80078ee:	4619      	mov	r1, r3
 80078f0:	480c      	ldr	r0, [pc, #48]	; (8007924 <MX_TIM5_Init+0x94>)
 80078f2:	f004 fe8d 	bl	800c610 <HAL_TIM_ConfigClockSource>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80078fc:	f7ff fc5a 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007900:	2300      	movs	r3, #0
 8007902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007908:	1d3b      	adds	r3, r7, #4
 800790a:	4619      	mov	r1, r3
 800790c:	4805      	ldr	r0, [pc, #20]	; (8007924 <MX_TIM5_Init+0x94>)
 800790e:	f005 fc35 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007918:	f7ff fc4c 	bl	80071b4 <Error_Handler>
  }

}
 800791c:	bf00      	nop
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20002818 	.word	0x20002818
 8007928:	40000c00 	.word	0x40000c00

0800792c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b094      	sub	sp, #80	; 0x50
 8007930:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007932:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
 800793c:	609a      	str	r2, [r3, #8]
 800793e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800794c:	463b      	mov	r3, r7
 800794e:	2234      	movs	r2, #52	; 0x34
 8007950:	2100      	movs	r1, #0
 8007952:	4618      	mov	r0, r3
 8007954:	f007 f9b2 	bl	800ecbc <memset>

  htim8.Instance = TIM8;
 8007958:	4b26      	ldr	r3, [pc, #152]	; (80079f4 <MX_TIM8_Init+0xc8>)
 800795a:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <MX_TIM8_Init+0xcc>)
 800795c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800795e:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <MX_TIM8_Init+0xc8>)
 8007960:	2200      	movs	r2, #0
 8007962:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007964:	4b23      	ldr	r3, [pc, #140]	; (80079f4 <MX_TIM8_Init+0xc8>)
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800796a:	4b22      	ldr	r3, [pc, #136]	; (80079f4 <MX_TIM8_Init+0xc8>)
 800796c:	2201      	movs	r2, #1
 800796e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007970:	4b20      	ldr	r3, [pc, #128]	; (80079f4 <MX_TIM8_Init+0xc8>)
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007976:	4b1f      	ldr	r3, [pc, #124]	; (80079f4 <MX_TIM8_Init+0xc8>)
 8007978:	2200      	movs	r2, #0
 800797a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800797c:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <MX_TIM8_Init+0xc8>)
 800797e:	2280      	movs	r2, #128	; 0x80
 8007980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007982:	481c      	ldr	r0, [pc, #112]	; (80079f4 <MX_TIM8_Init+0xc8>)
 8007984:	f004 f8e8 	bl	800bb58 <HAL_TIM_Base_Init>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800798e:	f7ff fc11 	bl	80071b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007996:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800799c:	4619      	mov	r1, r3
 800799e:	4815      	ldr	r0, [pc, #84]	; (80079f4 <MX_TIM8_Init+0xc8>)
 80079a0:	f004 fe36 	bl	800c610 <HAL_TIM_ConfigClockSource>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80079aa:	f7ff fc03 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80079ae:	2320      	movs	r3, #32
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80079ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079be:	4619      	mov	r1, r3
 80079c0:	480c      	ldr	r0, [pc, #48]	; (80079f4 <MX_TIM8_Init+0xc8>)
 80079c2:	f005 fbdb 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80079cc:	f7ff fbf2 	bl	80071b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80079d4:	2300      	movs	r3, #0
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80079d8:	463b      	mov	r3, r7
 80079da:	4619      	mov	r1, r3
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <MX_TIM8_Init+0xc8>)
 80079de:	f005 fc63 	bl	800d2a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80079e8:	f7ff fbe4 	bl	80071b4 <Error_Handler>
  }

}
 80079ec:	bf00      	nop
 80079ee:	3750      	adds	r7, #80	; 0x50
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20002780 	.word	0x20002780
 80079f8:	40013400 	.word	0x40013400

080079fc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a02:	f107 0310 	add.w	r3, r7, #16
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	609a      	str	r2, [r3, #8]
 8007a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a10:	1d3b      	adds	r3, r7, #4
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	605a      	str	r2, [r3, #4]
 8007a18:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	; (8007a9c <MX_TIM15_Init+0xa0>)
 8007a1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007a20:	4b1d      	ldr	r3, [pc, #116]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a26:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a28:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a34:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007a3c:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007a48:	4813      	ldr	r0, [pc, #76]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a4a:	f004 f885 	bl	800bb58 <HAL_TIM_Base_Init>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007a54:	f7ff fbae 	bl	80071b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007a5e:	f107 0310 	add.w	r3, r7, #16
 8007a62:	4619      	mov	r1, r3
 8007a64:	480c      	ldr	r0, [pc, #48]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a66:	f004 fdd3 	bl	800c610 <HAL_TIM_ConfigClockSource>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007a70:	f7ff fba0 	bl	80071b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a74:	2300      	movs	r3, #0
 8007a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007a7c:	1d3b      	adds	r3, r7, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4805      	ldr	r0, [pc, #20]	; (8007a98 <MX_TIM15_Init+0x9c>)
 8007a82:	f005 fb7b 	bl	800d17c <HAL_TIMEx_MasterConfigSynchronization>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007a8c:	f7ff fb92 	bl	80071b4 <Error_Handler>
  }

}
 8007a90:	bf00      	nop
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	200027cc 	.word	0x200027cc
 8007a9c:	40014000 	.word	0x40014000

08007aa0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007aa6:	4a11      	ldr	r2, [pc, #68]	; (8007aec <MX_TIM16_Init+0x4c>)
 8007aa8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ab0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007abe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ac0:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007ac6:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007ad2:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <MX_TIM16_Init+0x48>)
 8007ad4:	f004 f840 	bl	800bb58 <HAL_TIM_Base_Init>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007ade:	f7ff fb69 	bl	80071b4 <Error_Handler>
  }

}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200028fc 	.word	0x200028fc
 8007aec:	40014400 	.word	0x40014400

08007af0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af8:	f107 0314 	add.w	r3, r7, #20
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	605a      	str	r2, [r3, #4]
 8007b02:	609a      	str	r2, [r3, #8]
 8007b04:	60da      	str	r2, [r3, #12]
 8007b06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d12f      	bne.n	8007b72 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b12:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b16:	4a1a      	ldr	r2, [pc, #104]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8007b1e:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b2a:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2e:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b30:	f043 0304 	orr.w	r3, r3, #4
 8007b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b42:	2303      	movs	r3, #3
 8007b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b46:	2302      	movs	r3, #2
 8007b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007b52:	2302      	movs	r3, #2
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b56:	f107 0314 	add.w	r3, r7, #20
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4809      	ldr	r0, [pc, #36]	; (8007b84 <HAL_TIM_Encoder_MspInit+0x94>)
 8007b5e:	f002 fcf5 	bl	800a54c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007b62:	2200      	movs	r2, #0
 8007b64:	2100      	movs	r1, #0
 8007b66:	2018      	movs	r0, #24
 8007b68:	f001 fdc3 	bl	80096f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007b6c:	2018      	movs	r0, #24
 8007b6e:	f001 fdda 	bl	8009726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007b72:	bf00      	nop
 8007b74:	3728      	adds	r7, #40	; 0x28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40021000 	.word	0x40021000
 8007b84:	48000800 	.word	0x48000800

08007b88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08e      	sub	sp, #56	; 0x38
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007baa:	4b4f      	ldr	r3, [pc, #316]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	4a4e      	ldr	r2, [pc, #312]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb6:	4b4c      	ldr	r3, [pc, #304]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007bc2:	e08d      	b.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a48      	ldr	r2, [pc, #288]	; (8007cec <HAL_TIM_Base_MspInit+0x164>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d114      	bne.n	8007bf8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bce:	4b46      	ldr	r3, [pc, #280]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	4a45      	ldr	r2, [pc, #276]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bd4:	f043 0302 	orr.w	r3, r3, #2
 8007bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bda:	4b43      	ldr	r3, [pc, #268]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	201d      	movs	r0, #29
 8007bec:	f001 fd81 	bl	80096f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007bf0:	201d      	movs	r0, #29
 8007bf2:	f001 fd98 	bl	8009726 <HAL_NVIC_EnableIRQ>
}
 8007bf6:	e073      	b.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a3c      	ldr	r2, [pc, #240]	; (8007cf0 <HAL_TIM_Base_MspInit+0x168>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d131      	bne.n	8007c66 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007c02:	4b39      	ldr	r3, [pc, #228]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c06:	4a38      	ldr	r2, [pc, #224]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c08:	f043 0308 	orr.w	r3, r3, #8
 8007c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c0e:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1a:	4b33      	ldr	r3, [pc, #204]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	4a32      	ldr	r2, [pc, #200]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c26:	4b30      	ldr	r3, [pc, #192]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c32:	2301      	movs	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	2302      	movs	r3, #2
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007c42:	2302      	movs	r3, #2
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c50:	f002 fc7c 	bl	800a54c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007c54:	2200      	movs	r2, #0
 8007c56:	2102      	movs	r1, #2
 8007c58:	2032      	movs	r0, #50	; 0x32
 8007c5a:	f001 fd4a 	bl	80096f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007c5e:	2032      	movs	r0, #50	; 0x32
 8007c60:	f001 fd61 	bl	8009726 <HAL_NVIC_EnableIRQ>
}
 8007c64:	e03c      	b.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_TIM_Base_MspInit+0x16c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007c70:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c74:	4a1c      	ldr	r2, [pc, #112]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	693b      	ldr	r3, [r7, #16]
}
 8007c88:	e02a      	b.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	; (8007cf8 <HAL_TIM_Base_MspInit+0x170>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d114      	bne.n	8007cbe <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007c94:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c98:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8007ca0:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	2018      	movs	r0, #24
 8007cb2:	f001 fd1e 	bl	80096f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007cb6:	2018      	movs	r0, #24
 8007cb8:	f001 fd35 	bl	8009726 <HAL_NVIC_EnableIRQ>
}
 8007cbc:	e010      	b.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <HAL_TIM_Base_MspInit+0x174>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d10b      	bne.n	8007ce0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007cc8:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	4a06      	ldr	r2, [pc, #24]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <HAL_TIM_Base_MspInit+0x160>)
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	68bb      	ldr	r3, [r7, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	3738      	adds	r7, #56	; 0x38
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000c00 	.word	0x40000c00
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40014000 	.word	0x40014000
 8007cfc:	40014400 	.word	0x40014400

08007d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007d00:	480d      	ldr	r0, [pc, #52]	; (8007d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007d02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d04:	480d      	ldr	r0, [pc, #52]	; (8007d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8007d06:	490e      	ldr	r1, [pc, #56]	; (8007d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007d08:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <LoopForever+0xe>)
  movs r3, #0
 8007d0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007d0c:	e002      	b.n	8007d14 <LoopCopyDataInit>

08007d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d12:	3304      	adds	r3, #4

08007d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d18:	d3f9      	bcc.n	8007d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d1a:	4a0b      	ldr	r2, [pc, #44]	; (8007d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007d1c:	4c0b      	ldr	r4, [pc, #44]	; (8007d4c <LoopForever+0x16>)
  movs r3, #0
 8007d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d20:	e001      	b.n	8007d26 <LoopFillZerobss>

08007d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d24:	3204      	adds	r2, #4

08007d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d28:	d3fb      	bcc.n	8007d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d2a:	f7ff fc91 	bl	8007650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d2e:	f006 ffa1 	bl	800ec74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007d32:	f7ff f95f 	bl	8006ff4 <main>

08007d36 <LoopForever>:

LoopForever:
    b LoopForever
 8007d36:	e7fe      	b.n	8007d36 <LoopForever>
  ldr   r0, =_estack
 8007d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d40:	20001e80 	.word	0x20001e80
  ldr r2, =_sidata
 8007d44:	08013fa8 	.word	0x08013fa8
  ldr r2, =_sbss
 8007d48:	20001e80 	.word	0x20001e80
  ldr r4, =_ebss
 8007d4c:	20002950 	.word	0x20002950

08007d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d50:	e7fe      	b.n	8007d50 <ADC1_2_IRQHandler>

08007d52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d5c:	2003      	movs	r0, #3
 8007d5e:	f001 fcbd 	bl	80096dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d62:	2000      	movs	r0, #0
 8007d64:	f000 f80e 	bl	8007d84 <HAL_InitTick>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	71fb      	strb	r3, [r7, #7]
 8007d72:	e001      	b.n	8007d78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007d74:	f7ff faee 	bl	8007354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d78:	79fb      	ldrb	r3, [r7, #7]

}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007d90:	4b16      	ldr	r3, [pc, #88]	; (8007dec <HAL_InitTick+0x68>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d022      	beq.n	8007dde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <HAL_InitTick+0x6c>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4b13      	ldr	r3, [pc, #76]	; (8007dec <HAL_InitTick+0x68>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fcd6 	bl	800975e <HAL_SYSTICK_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10f      	bne.n	8007dd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d809      	bhi.n	8007dd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc6:	f001 fc94 	bl	80096f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007dca:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <HAL_InitTick+0x70>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e007      	b.n	8007de2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	e004      	b.n	8007de2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e001      	b.n	8007de2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000cb0 	.word	0x20000cb0
 8007df0:	20000ca8 	.word	0x20000ca8
 8007df4:	20000cac 	.word	0x20000cac

08007df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_IncTick+0x1c>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_IncTick+0x20>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4413      	add	r3, r2
 8007e06:	4a03      	ldr	r2, [pc, #12]	; (8007e14 <HAL_IncTick+0x1c>)
 8007e08:	6013      	str	r3, [r2, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	20002948 	.word	0x20002948
 8007e18:	20000cb0 	.word	0x20000cb0

08007e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e20:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <HAL_GetTick+0x14>)
 8007e22:	681b      	ldr	r3, [r3, #0]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20002948 	.word	0x20002948

08007e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e3c:	f7ff ffee 	bl	8007e1c <HAL_GetTick>
 8007e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e4c:	d004      	beq.n	8007e58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e4e:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <HAL_Delay+0x40>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e58:	bf00      	nop
 8007e5a:	f7ff ffdf 	bl	8007e1c <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d8f7      	bhi.n	8007e5a <HAL_Delay+0x26>
  {
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000cb0 	.word	0x20000cb0

08007e78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	609a      	str	r2, [r3, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007ee0:	b490      	push	{r4, r7}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3360      	adds	r3, #96	; 0x60
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <LL_ADC_SetOffset+0x40>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f12:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc90      	pop	{r4, r7}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	03fff000 	.word	0x03fff000

08007f24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007f24:	b490      	push	{r4, r7}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3360      	adds	r3, #96	; 0x60
 8007f32:	461a      	mov	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc90      	pop	{r4, r7}
 8007f4a:	4770      	bx	lr

08007f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007f4c:	b490      	push	{r4, r7}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3360      	adds	r3, #96	; 0x60
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc90      	pop	{r4, r7}
 8007f7a:	4770      	bx	lr

08007f7c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007f7c:	b490      	push	{r4, r7}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3360      	adds	r3, #96	; 0x60
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc90      	pop	{r4, r7}
 8007faa:	4770      	bx	lr

08007fac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007fac:	b490      	push	{r4, r7}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3360      	adds	r3, #96	; 0x60
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc90      	pop	{r4, r7}
 8007fda:	4770      	bx	lr

08007fdc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	615a      	str	r2, [r3, #20]
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008002:	b490      	push	{r4, r7}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3330      	adds	r3, #48	; 0x30
 8008012:	461a      	mov	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	f003 030c 	and.w	r3, r3, #12
 800801e:	4413      	add	r3, r2
 8008020:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	211f      	movs	r1, #31
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	43db      	mvns	r3, r3
 8008032:	401a      	ands	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	0e9b      	lsrs	r3, r3, #26
 8008038:	f003 011f 	and.w	r1, r3, #31
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	fa01 f303 	lsl.w	r3, r1, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bc90      	pop	{r4, r7}
 8008052:	4770      	bx	lr

08008054 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008054:	b490      	push	{r4, r7}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3314      	adds	r3, #20
 8008064:	461a      	mov	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	0e5b      	lsrs	r3, r3, #25
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	4413      	add	r3, r2
 8008072:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	0d1b      	lsrs	r3, r3, #20
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2107      	movs	r1, #7
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	0d1b      	lsrs	r3, r3, #20
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	fa01 f303 	lsl.w	r3, r1, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc90      	pop	{r4, r7}
 80080a2:	4770      	bx	lr

080080a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080bc:	43db      	mvns	r3, r3
 80080be:	401a      	ands	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f003 0318 	and.w	r3, r3, #24
 80080c6:	4908      	ldr	r1, [pc, #32]	; (80080e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80080c8:	40d9      	lsrs	r1, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	400b      	ands	r3, r1
 80080ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080d2:	431a      	orrs	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80080da:	bf00      	nop
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	0007ffff 	.word	0x0007ffff

080080ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80080fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6093      	str	r3, [r2, #8]
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008124:	d101      	bne.n	800812a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800814c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008174:	d101      	bne.n	800817a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <LL_ADC_IsEnabled+0x18>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <LL_ADC_IsEnabled+0x1a>
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d101      	bne.n	80081c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d101      	bne.n	80081ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b089      	sub	sp, #36	; 0x24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008208:	2300      	movs	r3, #0
 800820a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e1ad      	b.n	8008572 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fe f989 	bl	800653c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff ff67 	bl	8008110 <LL_ADC_IsDeepPowerDownEnabled>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ff4d 	bl	80080ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ff82 	bl	8008160 <LL_ADC_IsInternalRegulatorEnabled>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d113      	bne.n	800828a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff ff66 	bl	8008138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800826c:	4b9e      	ldr	r3, [pc, #632]	; (80084e8 <HAL_ADC_Init+0x2ec>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	099b      	lsrs	r3, r3, #6
 8008272:	4a9e      	ldr	r2, [pc, #632]	; (80084ec <HAL_ADC_Init+0x2f0>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	099b      	lsrs	r3, r3, #6
 800827a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800827c:	e002      	b.n	8008284 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	3b01      	subs	r3, #1
 8008282:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f9      	bne.n	800827e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff ff66 	bl	8008160 <LL_ADC_IsInternalRegulatorEnabled>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829e:	f043 0210 	orr.w	r2, r3, #16
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082aa:	f043 0201 	orr.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff ff77 	bl	80081ae <LL_ADC_REG_IsConversionOngoing>
 80082c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f040 8148 	bne.w	8008560 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 8144 	bne.w	8008560 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80082e0:	f043 0202 	orr.w	r2, r3, #2
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff4b 	bl	8008188 <LL_ADC_IsEnabled>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d141      	bne.n	800837c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008300:	d004      	beq.n	800830c <HAL_ADC_Init+0x110>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a7a      	ldr	r2, [pc, #488]	; (80084f0 <HAL_ADC_Init+0x2f4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10f      	bne.n	800832c <HAL_ADC_Init+0x130>
 800830c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008310:	f7ff ff3a 	bl	8008188 <LL_ADC_IsEnabled>
 8008314:	4604      	mov	r4, r0
 8008316:	4876      	ldr	r0, [pc, #472]	; (80084f0 <HAL_ADC_Init+0x2f4>)
 8008318:	f7ff ff36 	bl	8008188 <LL_ADC_IsEnabled>
 800831c:	4603      	mov	r3, r0
 800831e:	4323      	orrs	r3, r4
 8008320:	2b00      	cmp	r3, #0
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	e012      	b.n	8008352 <HAL_ADC_Init+0x156>
 800832c:	4871      	ldr	r0, [pc, #452]	; (80084f4 <HAL_ADC_Init+0x2f8>)
 800832e:	f7ff ff2b 	bl	8008188 <LL_ADC_IsEnabled>
 8008332:	4604      	mov	r4, r0
 8008334:	4870      	ldr	r0, [pc, #448]	; (80084f8 <HAL_ADC_Init+0x2fc>)
 8008336:	f7ff ff27 	bl	8008188 <LL_ADC_IsEnabled>
 800833a:	4603      	mov	r3, r0
 800833c:	431c      	orrs	r4, r3
 800833e:	486f      	ldr	r0, [pc, #444]	; (80084fc <HAL_ADC_Init+0x300>)
 8008340:	f7ff ff22 	bl	8008188 <LL_ADC_IsEnabled>
 8008344:	4603      	mov	r3, r0
 8008346:	4323      	orrs	r3, r4
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d012      	beq.n	800837c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800835e:	d004      	beq.n	800836a <HAL_ADC_Init+0x16e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a62      	ldr	r2, [pc, #392]	; (80084f0 <HAL_ADC_Init+0x2f4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d101      	bne.n	800836e <HAL_ADC_Init+0x172>
 800836a:	4a65      	ldr	r2, [pc, #404]	; (8008500 <HAL_ADC_Init+0x304>)
 800836c:	e000      	b.n	8008370 <HAL_ADC_Init+0x174>
 800836e:	4a65      	ldr	r2, [pc, #404]	; (8008504 <HAL_ADC_Init+0x308>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7ff fd7e 	bl	8007e78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7f5b      	ldrb	r3, [r3, #29]
 8008380:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008386:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800838c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008392:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800839a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d106      	bne.n	80083b8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	3b01      	subs	r3, #1
 80083b0:	045b      	lsls	r3, r3, #17
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	4b4b      	ldr	r3, [pc, #300]	; (8008508 <HAL_ADC_Init+0x30c>)
 80083dc:	4013      	ands	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	69b9      	ldr	r1, [r7, #24]
 80083e4:	430b      	orrs	r3, r1
 80083e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fed3 	bl	80081ae <LL_ADC_REG_IsConversionOngoing>
 8008408:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fee0 	bl	80081d4 <LL_ADC_INJ_IsConversionOngoing>
 8008414:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d17f      	bne.n	800851c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d17c      	bne.n	800851c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008426:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800842e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008430:	4313      	orrs	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800843e:	f023 0302 	bic.w	r3, r3, #2
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	69b9      	ldr	r1, [r7, #24]
 8008448:	430b      	orrs	r3, r1
 800844a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d017      	beq.n	8008484 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008462:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800846c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6911      	ldr	r1, [r2, #16]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	430b      	orrs	r3, r1
 800847e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008482:	e013      	b.n	80084ac <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008492:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80084a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d12a      	bne.n	800850c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084c0:	f023 0304 	bic.w	r3, r3, #4
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80084cc:	4311      	orrs	r1, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80084d2:	4311      	orrs	r1, r2
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084d8:	430a      	orrs	r2, r1
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0201 	orr.w	r2, r2, #1
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e019      	b.n	800851c <HAL_ADC_Init+0x320>
 80084e8:	20000ca8 	.word	0x20000ca8
 80084ec:	053e2d63 	.word	0x053e2d63
 80084f0:	50000100 	.word	0x50000100
 80084f4:	50000400 	.word	0x50000400
 80084f8:	50000500 	.word	0x50000500
 80084fc:	50000600 	.word	0x50000600
 8008500:	50000300 	.word	0x50000300
 8008504:	50000700 	.word	0x50000700
 8008508:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0201 	bic.w	r2, r2, #1
 800851a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10c      	bne.n	800853e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	f023 010f 	bic.w	r1, r3, #15
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	1e5a      	subs	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	631a      	str	r2, [r3, #48]	; 0x30
 800853c:	e007      	b.n	800854e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 020f 	bic.w	r2, r2, #15
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	65da      	str	r2, [r3, #92]	; 0x5c
 800855e:	e007      	b.n	8008570 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008564:	f043 0210 	orr.w	r2, r3, #16
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008570:	7ffb      	ldrb	r3, [r7, #31]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3724      	adds	r7, #36	; 0x24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd90      	pop	{r4, r7, pc}
 800857a:	bf00      	nop

0800857c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b0a6      	sub	sp, #152	; 0x98
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_ADC_ConfigChannel+0x22>
 800859a:	2302      	movs	r3, #2
 800859c:	e38e      	b.n	8008cbc <HAL_ADC_ConfigChannel+0x740>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fdff 	bl	80081ae <LL_ADC_REG_IsConversionOngoing>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 836f 	bne.w	8008c96 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6859      	ldr	r1, [r3, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f7ff fd1c 	bl	8008002 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fded 	bl	80081ae <LL_ADC_REG_IsConversionOngoing>
 80085d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fdf9 	bl	80081d4 <LL_ADC_INJ_IsConversionOngoing>
 80085e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80085e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 817b 	bne.w	80088e6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80085f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 8176 	bne.w	80088e6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008602:	d10f      	bne.n	8008624 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	4619      	mov	r1, r3
 8008610:	f7ff fd20 	bl	8008054 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fcdd 	bl	8007fdc <LL_ADC_SetSamplingTimeCommonConfig>
 8008622:	e00e      	b.n	8008642 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6819      	ldr	r1, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	461a      	mov	r2, r3
 8008632:	f7ff fd0f 	bl	8008054 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fccd 	bl	8007fdc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b04      	cmp	r3, #4
 8008662:	d022      	beq.n	80086aa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	6919      	ldr	r1, [r3, #16]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008674:	f7ff fc34 	bl	8007ee0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6919      	ldr	r1, [r3, #16]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	461a      	mov	r2, r3
 8008686:	f7ff fc79 	bl	8007f7c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6919      	ldr	r1, [r3, #16]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	7f1b      	ldrb	r3, [r3, #28]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d102      	bne.n	80086a0 <HAL_ADC_ConfigChannel+0x124>
 800869a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800869e:	e000      	b.n	80086a2 <HAL_ADC_ConfigChannel+0x126>
 80086a0:	2300      	movs	r3, #0
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7ff fc82 	bl	8007fac <LL_ADC_SetOffsetSaturation>
 80086a8:	e11d      	b.n	80088e6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fc37 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <HAL_ADC_ConfigChannel+0x15a>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fc2c 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 80086cc:	4603      	mov	r3, r0
 80086ce:	0e9b      	lsrs	r3, r3, #26
 80086d0:	f003 021f 	and.w	r2, r3, #31
 80086d4:	e012      	b.n	80086fc <HAL_ADC_ConfigChannel+0x180>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fc21 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086ec:	fa93 f3a3 	rbit	r3, r3
 80086f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80086f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086f4:	fab3 f383 	clz	r3, r3
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <HAL_ADC_ConfigChannel+0x198>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	0e9b      	lsrs	r3, r3, #26
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	e00a      	b.n	800872a <HAL_ADC_ConfigChannel+0x1ae>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800871c:	fa93 f3a3 	rbit	r3, r3
 8008720:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008724:	fab3 f383 	clz	r3, r3
 8008728:	b2db      	uxtb	r3, r3
 800872a:	429a      	cmp	r2, r3
 800872c:	d106      	bne.n	800873c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fc08 	bl	8007f4c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2101      	movs	r1, #1
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fbee 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 8008748:	4603      	mov	r3, r0
 800874a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <HAL_ADC_ConfigChannel+0x1ec>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2101      	movs	r1, #1
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fbe3 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 800875e:	4603      	mov	r3, r0
 8008760:	0e9b      	lsrs	r3, r3, #26
 8008762:	f003 021f 	and.w	r2, r3, #31
 8008766:	e010      	b.n	800878a <HAL_ADC_ConfigChannel+0x20e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2101      	movs	r1, #1
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fbd8 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 8008774:	4603      	mov	r3, r0
 8008776:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800877a:	fa93 f3a3 	rbit	r3, r3
 800877e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	fab3 f383 	clz	r3, r3
 8008786:	b2db      	uxtb	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <HAL_ADC_ConfigChannel+0x226>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	0e9b      	lsrs	r3, r3, #26
 800879c:	f003 031f 	and.w	r3, r3, #31
 80087a0:	e00a      	b.n	80087b8 <HAL_ADC_ConfigChannel+0x23c>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087aa:	fa93 f3a3 	rbit	r3, r3
 80087ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80087b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b2:	fab3 f383 	clz	r3, r3
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d106      	bne.n	80087ca <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2200      	movs	r2, #0
 80087c2:	2101      	movs	r1, #1
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fbc1 	bl	8007f4c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2102      	movs	r1, #2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fba7 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 80087d6:	4603      	mov	r3, r0
 80087d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <HAL_ADC_ConfigChannel+0x27a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2102      	movs	r1, #2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fb9c 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 80087ec:	4603      	mov	r3, r0
 80087ee:	0e9b      	lsrs	r3, r3, #26
 80087f0:	f003 021f 	and.w	r2, r3, #31
 80087f4:	e010      	b.n	8008818 <HAL_ADC_ConfigChannel+0x29c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2102      	movs	r1, #2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fb91 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 8008802:	4603      	mov	r3, r0
 8008804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008808:	fa93 f3a3 	rbit	r3, r3
 800880c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800880e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008810:	fab3 f383 	clz	r3, r3
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x2b4>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	0e9b      	lsrs	r3, r3, #26
 800882a:	f003 031f 	and.w	r3, r3, #31
 800882e:	e00a      	b.n	8008846 <HAL_ADC_ConfigChannel+0x2ca>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008838:	fa93 f3a3 	rbit	r3, r3
 800883c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800883e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008840:	fab3 f383 	clz	r3, r3
 8008844:	b2db      	uxtb	r3, r3
 8008846:	429a      	cmp	r2, r3
 8008848:	d106      	bne.n	8008858 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	2102      	movs	r1, #2
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fb7a 	bl	8007f4c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2103      	movs	r1, #3
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fb60 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 8008864:	4603      	mov	r3, r0
 8008866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <HAL_ADC_ConfigChannel+0x308>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2103      	movs	r1, #3
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fb55 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 800887a:	4603      	mov	r3, r0
 800887c:	0e9b      	lsrs	r3, r3, #26
 800887e:	f003 021f 	and.w	r2, r3, #31
 8008882:	e010      	b.n	80088a6 <HAL_ADC_ConfigChannel+0x32a>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2103      	movs	r1, #3
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fb4a 	bl	8007f24 <LL_ADC_GetOffsetChannel>
 8008890:	4603      	mov	r3, r0
 8008892:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008896:	fa93 f3a3 	rbit	r3, r3
 800889a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800889c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889e:	fab3 f383 	clz	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <HAL_ADC_ConfigChannel+0x342>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	0e9b      	lsrs	r3, r3, #26
 80088b8:	f003 031f 	and.w	r3, r3, #31
 80088bc:	e00a      	b.n	80088d4 <HAL_ADC_ConfigChannel+0x358>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c6:	fa93 f3a3 	rbit	r3, r3
 80088ca:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80088cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d106      	bne.n	80088e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	2103      	movs	r1, #3
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff fb33 	bl	8007f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fc4c 	bl	8008188 <LL_ADC_IsEnabled>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f040 810c 	bne.w	8008b10 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	461a      	mov	r2, r3
 8008906:	f7ff fbcd 	bl	80080a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	4aaf      	ldr	r2, [pc, #700]	; (8008bcc <HAL_ADC_ConfigChannel+0x650>)
 8008910:	4293      	cmp	r3, r2
 8008912:	f040 80fd 	bne.w	8008b10 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10b      	bne.n	800893e <HAL_ADC_ConfigChannel+0x3c2>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	0e9b      	lsrs	r3, r3, #26
 800892c:	3301      	adds	r3, #1
 800892e:	f003 031f 	and.w	r3, r3, #31
 8008932:	2b09      	cmp	r3, #9
 8008934:	bf94      	ite	ls
 8008936:	2301      	movls	r3, #1
 8008938:	2300      	movhi	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	e012      	b.n	8008964 <HAL_ADC_ConfigChannel+0x3e8>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008946:	fa93 f3a3 	rbit	r3, r3
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800894c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894e:	fab3 f383 	clz	r3, r3
 8008952:	b2db      	uxtb	r3, r3
 8008954:	3301      	adds	r3, #1
 8008956:	f003 031f 	and.w	r3, r3, #31
 800895a:	2b09      	cmp	r3, #9
 800895c:	bf94      	ite	ls
 800895e:	2301      	movls	r3, #1
 8008960:	2300      	movhi	r3, #0
 8008962:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008964:	2b00      	cmp	r3, #0
 8008966:	d064      	beq.n	8008a32 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008970:	2b00      	cmp	r3, #0
 8008972:	d107      	bne.n	8008984 <HAL_ADC_ConfigChannel+0x408>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	0e9b      	lsrs	r3, r3, #26
 800897a:	3301      	adds	r3, #1
 800897c:	069b      	lsls	r3, r3, #26
 800897e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008982:	e00e      	b.n	80089a2 <HAL_ADC_ConfigChannel+0x426>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	fa93 f3a3 	rbit	r3, r3
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	fab3 f383 	clz	r3, r3
 8008998:	b2db      	uxtb	r3, r3
 800899a:	3301      	adds	r3, #1
 800899c:	069b      	lsls	r3, r3, #26
 800899e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_ADC_ConfigChannel+0x446>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	0e9b      	lsrs	r3, r3, #26
 80089b4:	3301      	adds	r3, #1
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2101      	movs	r1, #1
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	e010      	b.n	80089e4 <HAL_ADC_ConfigChannel+0x468>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	fa93 f3a3 	rbit	r3, r3
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	fab3 f383 	clz	r3, r3
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	3301      	adds	r3, #1
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2101      	movs	r1, #1
 80089e0:	fa01 f303 	lsl.w	r3, r1, r3
 80089e4:	ea42 0103 	orr.w	r1, r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <HAL_ADC_ConfigChannel+0x48e>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	0e9b      	lsrs	r3, r3, #26
 80089fa:	3301      	adds	r3, #1
 80089fc:	f003 021f 	and.w	r2, r3, #31
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	051b      	lsls	r3, r3, #20
 8008a08:	e011      	b.n	8008a2e <HAL_ADC_ConfigChannel+0x4b2>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	fa93 f3a3 	rbit	r3, r3
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	3301      	adds	r3, #1
 8008a22:	f003 021f 	and.w	r2, r3, #31
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	e069      	b.n	8008b06 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d107      	bne.n	8008a4e <HAL_ADC_ConfigChannel+0x4d2>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	0e9b      	lsrs	r3, r3, #26
 8008a44:	3301      	adds	r3, #1
 8008a46:	069b      	lsls	r3, r3, #26
 8008a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a4c:	e00e      	b.n	8008a6c <HAL_ADC_ConfigChannel+0x4f0>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	fa93 f3a3 	rbit	r3, r3
 8008a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	fab3 f383 	clz	r3, r3
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	069b      	lsls	r3, r3, #26
 8008a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <HAL_ADC_ConfigChannel+0x510>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	0e9b      	lsrs	r3, r3, #26
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	2101      	movs	r1, #1
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	e010      	b.n	8008aae <HAL_ADC_ConfigChannel+0x532>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	fa93 f3a3 	rbit	r3, r3
 8008a98:	617b      	str	r3, [r7, #20]
  return result;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	fab3 f383 	clz	r3, r3
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	f003 031f 	and.w	r3, r3, #31
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8008aae:	ea42 0103 	orr.w	r1, r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <HAL_ADC_ConfigChannel+0x55e>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	0e9b      	lsrs	r3, r3, #26
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f003 021f 	and.w	r2, r3, #31
 8008aca:	4613      	mov	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	4413      	add	r3, r2
 8008ad0:	3b1e      	subs	r3, #30
 8008ad2:	051b      	lsls	r3, r3, #20
 8008ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ad8:	e014      	b.n	8008b04 <HAL_ADC_ConfigChannel+0x588>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	fa93 f3a3 	rbit	r3, r3
 8008ae6:	60fb      	str	r3, [r7, #12]
  return result;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	fab3 f383 	clz	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	3301      	adds	r3, #1
 8008af2:	f003 021f 	and.w	r2, r3, #31
 8008af6:	4613      	mov	r3, r2
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	3b1e      	subs	r3, #30
 8008afe:	051b      	lsls	r3, r3, #20
 8008b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b04:	430b      	orrs	r3, r1
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	6892      	ldr	r2, [r2, #8]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f7ff faa2 	bl	8008054 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	4b2e      	ldr	r3, [pc, #184]	; (8008bd0 <HAL_ADC_ConfigChannel+0x654>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80c9 	beq.w	8008cb0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b26:	d004      	beq.n	8008b32 <HAL_ADC_ConfigChannel+0x5b6>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a29      	ldr	r2, [pc, #164]	; (8008bd4 <HAL_ADC_ConfigChannel+0x658>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d101      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0x5ba>
 8008b32:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <HAL_ADC_ConfigChannel+0x65c>)
 8008b34:	e000      	b.n	8008b38 <HAL_ADC_ConfigChannel+0x5bc>
 8008b36:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <HAL_ADC_ConfigChannel+0x660>)
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff f9c3 	bl	8007ec4 <LL_ADC_GetCommonPathInternalCh>
 8008b3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a26      	ldr	r2, [pc, #152]	; (8008be0 <HAL_ADC_ConfigChannel+0x664>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d004      	beq.n	8008b56 <HAL_ADC_ConfigChannel+0x5da>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a24      	ldr	r2, [pc, #144]	; (8008be4 <HAL_ADC_ConfigChannel+0x668>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d14e      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d148      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6a:	d005      	beq.n	8008b78 <HAL_ADC_ConfigChannel+0x5fc>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1d      	ldr	r2, [pc, #116]	; (8008be8 <HAL_ADC_ConfigChannel+0x66c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	f040 8099 	bne.w	8008caa <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b80:	d004      	beq.n	8008b8c <HAL_ADC_ConfigChannel+0x610>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <HAL_ADC_ConfigChannel+0x658>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d101      	bne.n	8008b90 <HAL_ADC_ConfigChannel+0x614>
 8008b8c:	4a12      	ldr	r2, [pc, #72]	; (8008bd8 <HAL_ADC_ConfigChannel+0x65c>)
 8008b8e:	e000      	b.n	8008b92 <HAL_ADC_ConfigChannel+0x616>
 8008b90:	4a12      	ldr	r2, [pc, #72]	; (8008bdc <HAL_ADC_ConfigChannel+0x660>)
 8008b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7ff f97e 	bl	8007e9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <HAL_ADC_ConfigChannel+0x670>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	4a11      	ldr	r2, [pc, #68]	; (8008bf0 <HAL_ADC_ConfigChannel+0x674>)
 8008baa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bae:	099a      	lsrs	r2, r3, #6
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008bba:	e002      	b.n	8008bc2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1f9      	bne.n	8008bbc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008bc8:	e06f      	b.n	8008caa <HAL_ADC_ConfigChannel+0x72e>
 8008bca:	bf00      	nop
 8008bcc:	407f0000 	.word	0x407f0000
 8008bd0:	80080000 	.word	0x80080000
 8008bd4:	50000100 	.word	0x50000100
 8008bd8:	50000300 	.word	0x50000300
 8008bdc:	50000700 	.word	0x50000700
 8008be0:	c3210000 	.word	0xc3210000
 8008be4:	90c00010 	.word	0x90c00010
 8008be8:	50000600 	.word	0x50000600
 8008bec:	20000ca8 	.word	0x20000ca8
 8008bf0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a32      	ldr	r2, [pc, #200]	; (8008cc4 <HAL_ADC_ConfigChannel+0x748>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d125      	bne.n	8008c4a <HAL_ADC_ConfigChannel+0x6ce>
 8008bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11f      	bne.n	8008c4a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a2e      	ldr	r2, [pc, #184]	; (8008cc8 <HAL_ADC_ConfigChannel+0x74c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d104      	bne.n	8008c1e <HAL_ADC_ConfigChannel+0x6a2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a2c      	ldr	r2, [pc, #176]	; (8008ccc <HAL_ADC_ConfigChannel+0x750>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d047      	beq.n	8008cae <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c26:	d004      	beq.n	8008c32 <HAL_ADC_ConfigChannel+0x6b6>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a26      	ldr	r2, [pc, #152]	; (8008cc8 <HAL_ADC_ConfigChannel+0x74c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d101      	bne.n	8008c36 <HAL_ADC_ConfigChannel+0x6ba>
 8008c32:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <HAL_ADC_ConfigChannel+0x754>)
 8008c34:	e000      	b.n	8008c38 <HAL_ADC_ConfigChannel+0x6bc>
 8008c36:	4a27      	ldr	r2, [pc, #156]	; (8008cd4 <HAL_ADC_ConfigChannel+0x758>)
 8008c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7ff f92b 	bl	8007e9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c48:	e031      	b.n	8008cae <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a22      	ldr	r2, [pc, #136]	; (8008cd8 <HAL_ADC_ConfigChannel+0x75c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d12d      	bne.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d127      	bne.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a18      	ldr	r2, [pc, #96]	; (8008cc8 <HAL_ADC_ConfigChannel+0x74c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d022      	beq.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c72:	d004      	beq.n	8008c7e <HAL_ADC_ConfigChannel+0x702>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <HAL_ADC_ConfigChannel+0x74c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d101      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x706>
 8008c7e:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <HAL_ADC_ConfigChannel+0x754>)
 8008c80:	e000      	b.n	8008c84 <HAL_ADC_ConfigChannel+0x708>
 8008c82:	4a14      	ldr	r2, [pc, #80]	; (8008cd4 <HAL_ADC_ConfigChannel+0x758>)
 8008c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f7ff f905 	bl	8007e9e <LL_ADC_SetCommonPathInternalCh>
 8008c94:	e00c      	b.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9a:	f043 0220 	orr.w	r2, r3, #32
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008ca8:	e002      	b.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008cae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008cb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3798      	adds	r7, #152	; 0x98
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	c7520000 	.word	0xc7520000
 8008cc8:	50000100 	.word	0x50000100
 8008ccc:	50000500 	.word	0x50000500
 8008cd0:	50000300 	.word	0x50000300
 8008cd4:	50000700 	.word	0x50000700
 8008cd8:	cb840000 	.word	0xcb840000

08008cdc <LL_ADC_IsEnabled>:
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d101      	bne.n	8008cf4 <LL_ADC_IsEnabled+0x18>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e000      	b.n	8008cf6 <LL_ADC_IsEnabled+0x1a>
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <LL_ADC_REG_IsConversionOngoing>:
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d101      	bne.n	8008d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b0a1      	sub	sp, #132	; 0x84
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e0e3      	b.n	8008f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d56:	d102      	bne.n	8008d5e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008d58:	4b6f      	ldr	r3, [pc, #444]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008d5a:	60bb      	str	r3, [r7, #8]
 8008d5c:	e009      	b.n	8008d72 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a6e      	ldr	r2, [pc, #440]	; (8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d102      	bne.n	8008d6e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008d68:	4b6d      	ldr	r3, [pc, #436]	; (8008f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008d6a:	60bb      	str	r3, [r7, #8]
 8008d6c:	e001      	b.n	8008d72 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7c:	f043 0220 	orr.w	r2, r3, #32
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0be      	b.n	8008f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff ffb5 	bl	8008d02 <LL_ADC_REG_IsConversionOngoing>
 8008d98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff ffaf 	bl	8008d02 <LL_ADC_REG_IsConversionOngoing>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f040 80a0 	bne.w	8008eec <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 809c 	bne.w	8008eec <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dbc:	d004      	beq.n	8008dc8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a55      	ldr	r2, [pc, #340]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d101      	bne.n	8008dcc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008dc8:	4b56      	ldr	r3, [pc, #344]	; (8008f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008dca:	e000      	b.n	8008dce <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008dcc:	4b56      	ldr	r3, [pc, #344]	; (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008dce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d04b      	beq.n	8008e70 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	6859      	ldr	r1, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dea:	035b      	lsls	r3, r3, #13
 8008dec:	430b      	orrs	r3, r1
 8008dee:	431a      	orrs	r2, r3
 8008df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dfc:	d004      	beq.n	8008e08 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a45      	ldr	r2, [pc, #276]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d10f      	bne.n	8008e28 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008e08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e0c:	f7ff ff66 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e10:	4604      	mov	r4, r0
 8008e12:	4841      	ldr	r0, [pc, #260]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e14:	f7ff ff62 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	4323      	orrs	r3, r4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e012      	b.n	8008e4e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008e28:	483c      	ldr	r0, [pc, #240]	; (8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008e2a:	f7ff ff57 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e2e:	4604      	mov	r4, r0
 8008e30:	483b      	ldr	r0, [pc, #236]	; (8008f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e32:	f7ff ff53 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e36:	4603      	mov	r3, r0
 8008e38:	431c      	orrs	r4, r3
 8008e3a:	483c      	ldr	r0, [pc, #240]	; (8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e3c:	f7ff ff4e 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e40:	4603      	mov	r3, r0
 8008e42:	4323      	orrs	r3, r4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf0c      	ite	eq
 8008e48:	2301      	moveq	r3, #1
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d056      	beq.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008e5a:	f023 030f 	bic.w	r3, r3, #15
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	6811      	ldr	r1, [r2, #0]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	6892      	ldr	r2, [r2, #8]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e6e:	e047      	b.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e84:	d004      	beq.n	8008e90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a23      	ldr	r2, [pc, #140]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10f      	bne.n	8008eb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008e90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e94:	f7ff ff22 	bl	8008cdc <LL_ADC_IsEnabled>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	481f      	ldr	r0, [pc, #124]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e9c:	f7ff ff1e 	bl	8008cdc <LL_ADC_IsEnabled>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4323      	orrs	r3, r4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	e012      	b.n	8008ed6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008eb0:	481a      	ldr	r0, [pc, #104]	; (8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008eb2:	f7ff ff13 	bl	8008cdc <LL_ADC_IsEnabled>
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4819      	ldr	r0, [pc, #100]	; (8008f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008eba:	f7ff ff0f 	bl	8008cdc <LL_ADC_IsEnabled>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	431c      	orrs	r4, r3
 8008ec2:	481a      	ldr	r0, [pc, #104]	; (8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008ec4:	f7ff ff0a 	bl	8008cdc <LL_ADC_IsEnabled>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4323      	orrs	r3, r4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bf0c      	ite	eq
 8008ed0:	2301      	moveq	r3, #1
 8008ed2:	2300      	movne	r3, #0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d012      	beq.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008ee2:	f023 030f 	bic.w	r3, r3, #15
 8008ee6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ee8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008eea:	e009      	b.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef0:	f043 0220 	orr.w	r2, r3, #32
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008efe:	e000      	b.n	8008f02 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3784      	adds	r7, #132	; 0x84
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd90      	pop	{r4, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	50000100 	.word	0x50000100
 8008f1c:	50000400 	.word	0x50000400
 8008f20:	50000500 	.word	0x50000500
 8008f24:	50000300 	.word	0x50000300
 8008f28:	50000700 	.word	0x50000700
 8008f2c:	50000600 	.word	0x50000600

08008f30 <LL_EXTI_EnableIT_0_31>:
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <LL_EXTI_EnableIT_0_31+0x20>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <LL_EXTI_EnableIT_0_31+0x20>)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	600b      	str	r3, [r1, #0]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	40010400 	.word	0x40010400

08008f54 <LL_EXTI_EnableIT_32_63>:
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <LL_EXTI_EnableIT_32_63+0x20>)
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <LL_EXTI_EnableIT_32_63+0x20>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	620b      	str	r3, [r1, #32]
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	40010400 	.word	0x40010400

08008f78 <LL_EXTI_DisableIT_0_31>:
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <LL_EXTI_DisableIT_0_31+0x24>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <LL_EXTI_DisableIT_0_31+0x24>)
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	600b      	str	r3, [r1, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40010400 	.word	0x40010400

08008fa0 <LL_EXTI_DisableIT_32_63>:
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <LL_EXTI_DisableIT_32_63+0x24>)
 8008faa:	6a1a      	ldr	r2, [r3, #32]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	4904      	ldr	r1, [pc, #16]	; (8008fc4 <LL_EXTI_DisableIT_32_63+0x24>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	620b      	str	r3, [r1, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010400 	.word	0x40010400

08008fc8 <LL_EXTI_EnableEvent_0_31>:
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008fd0:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	604b      	str	r3, [r1, #4]
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	40010400 	.word	0x40010400

08008fec <LL_EXTI_EnableEvent_32_63>:
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <LL_EXTI_EnableEvent_32_63+0x20>)
 8008ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ff8:	4904      	ldr	r1, [pc, #16]	; (800900c <LL_EXTI_EnableEvent_32_63+0x20>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40010400 	.word	0x40010400

08009010 <LL_EXTI_DisableEvent_0_31>:
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <LL_EXTI_DisableEvent_0_31+0x24>)
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	43db      	mvns	r3, r3
 8009020:	4904      	ldr	r1, [pc, #16]	; (8009034 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009022:	4013      	ands	r3, r2
 8009024:	604b      	str	r3, [r1, #4]
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010400 	.word	0x40010400

08009038 <LL_EXTI_DisableEvent_32_63>:
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <LL_EXTI_DisableEvent_32_63+0x24>)
 8009042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	43db      	mvns	r3, r3
 8009048:	4904      	ldr	r1, [pc, #16]	; (800905c <LL_EXTI_DisableEvent_32_63+0x24>)
 800904a:	4013      	ands	r3, r2
 800904c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40010400 	.word	0x40010400

08009060 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	4904      	ldr	r1, [pc, #16]	; (8009080 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4313      	orrs	r3, r2
 8009072:	608b      	str	r3, [r1, #8]
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	40010400 	.word	0x40010400

08009084 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800908c:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800908e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009090:	4904      	ldr	r1, [pc, #16]	; (80090a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4313      	orrs	r3, r2
 8009096:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	40010400 	.word	0x40010400

080090a8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80090b0:	4b06      	ldr	r3, [pc, #24]	; (80090cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	43db      	mvns	r3, r3
 80090b8:	4904      	ldr	r1, [pc, #16]	; (80090cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	608b      	str	r3, [r1, #8]
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	40010400 	.word	0x40010400

080090d0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80090d8:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80090da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	43db      	mvns	r3, r3
 80090e0:	4904      	ldr	r1, [pc, #16]	; (80090f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40010400 	.word	0x40010400

080090f8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	4904      	ldr	r1, [pc, #16]	; (8009118 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4313      	orrs	r3, r2
 800910a:	60cb      	str	r3, [r1, #12]
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40010400 	.word	0x40010400

0800911c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009124:	4b05      	ldr	r3, [pc, #20]	; (800913c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4904      	ldr	r1, [pc, #16]	; (800913c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4313      	orrs	r3, r2
 800912e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	40010400 	.word	0x40010400

08009140 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	43db      	mvns	r3, r3
 8009150:	4904      	ldr	r1, [pc, #16]	; (8009164 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009152:	4013      	ands	r3, r2
 8009154:	60cb      	str	r3, [r1, #12]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40010400 	.word	0x40010400

08009168 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	43db      	mvns	r3, r3
 8009178:	4904      	ldr	r1, [pc, #16]	; (800918c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800917a:	4013      	ands	r3, r2
 800917c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40010400 	.word	0x40010400

08009190 <LL_EXTI_ClearFlag_0_31>:
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009198:	4a04      	ldr	r2, [pc, #16]	; (80091ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6153      	str	r3, [r2, #20]
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40010400 	.word	0x40010400

080091b0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80091b8:	4a04      	ldr	r2, [pc, #16]	; (80091cc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80091be:	bf00      	nop
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40010400 	.word	0x40010400

080091d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e180      	b.n	80094ee <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091fa:	d102      	bne.n	8009202 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	77fb      	strb	r3, [r7, #31]
 8009200:	e175      	b.n	80094ee <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7f5b      	ldrb	r3, [r3, #29]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d108      	bne.n	800921e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fd fa23 	bl	8006664 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009228:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	4b98      	ldr	r3, [pc, #608]	; (80094b0 <HAL_COMP_Init+0x2e0>)
 8009250:	4013      	ands	r3, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	430b      	orrs	r3, r1
 800925a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d015      	beq.n	8009296 <HAL_COMP_Init+0xc6>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d112      	bne.n	8009296 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009270:	4b90      	ldr	r3, [pc, #576]	; (80094b4 <HAL_COMP_Init+0x2e4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	099b      	lsrs	r3, r3, #6
 8009276:	4a90      	ldr	r2, [pc, #576]	; (80094b8 <HAL_COMP_Init+0x2e8>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	099a      	lsrs	r2, r3, #6
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009288:	e002      	b.n	8009290 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3b01      	subs	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1f9      	bne.n	800928a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a88      	ldr	r2, [pc, #544]	; (80094bc <HAL_COMP_Init+0x2ec>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d028      	beq.n	80092f2 <HAL_COMP_Init+0x122>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a86      	ldr	r2, [pc, #536]	; (80094c0 <HAL_COMP_Init+0x2f0>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d020      	beq.n	80092ec <HAL_COMP_Init+0x11c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a85      	ldr	r2, [pc, #532]	; (80094c4 <HAL_COMP_Init+0x2f4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d018      	beq.n	80092e6 <HAL_COMP_Init+0x116>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a83      	ldr	r2, [pc, #524]	; (80094c8 <HAL_COMP_Init+0x2f8>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d010      	beq.n	80092e0 <HAL_COMP_Init+0x110>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a82      	ldr	r2, [pc, #520]	; (80094cc <HAL_COMP_Init+0x2fc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d008      	beq.n	80092da <HAL_COMP_Init+0x10a>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a80      	ldr	r2, [pc, #512]	; (80094d0 <HAL_COMP_Init+0x300>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d101      	bne.n	80092d6 <HAL_COMP_Init+0x106>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e00f      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e00d      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092de:	e00a      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092e4:	e007      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80092ea:	e004      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092f0:	e001      	b.n	80092f6 <HAL_COMP_Init+0x126>
 80092f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092f6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80b6 	beq.w	8009472 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b00      	cmp	r3, #0
 8009310:	d011      	beq.n	8009336 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a6e      	ldr	r2, [pc, #440]	; (80094d0 <HAL_COMP_Init+0x300>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d004      	beq.n	8009326 <HAL_COMP_Init+0x156>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a6c      	ldr	r2, [pc, #432]	; (80094d4 <HAL_COMP_Init+0x304>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d103      	bne.n	800932e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f7ff feac 	bl	8009084 <LL_EXTI_EnableRisingTrig_32_63>
 800932c:	e014      	b.n	8009358 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800932e:	6938      	ldr	r0, [r7, #16]
 8009330:	f7ff fe96 	bl	8009060 <LL_EXTI_EnableRisingTrig_0_31>
 8009334:	e010      	b.n	8009358 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a65      	ldr	r2, [pc, #404]	; (80094d0 <HAL_COMP_Init+0x300>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_COMP_Init+0x17a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a63      	ldr	r2, [pc, #396]	; (80094d4 <HAL_COMP_Init+0x304>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d103      	bne.n	8009352 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800934a:	6938      	ldr	r0, [r7, #16]
 800934c:	f7ff fec0 	bl	80090d0 <LL_EXTI_DisableRisingTrig_32_63>
 8009350:	e002      	b.n	8009358 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009352:	6938      	ldr	r0, [r7, #16]
 8009354:	f7ff fea8 	bl	80090a8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d011      	beq.n	8009388 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a59      	ldr	r2, [pc, #356]	; (80094d0 <HAL_COMP_Init+0x300>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_COMP_Init+0x1a8>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a58      	ldr	r2, [pc, #352]	; (80094d4 <HAL_COMP_Init+0x304>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d103      	bne.n	8009380 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009378:	6938      	ldr	r0, [r7, #16]
 800937a:	f7ff fecf 	bl	800911c <LL_EXTI_EnableFallingTrig_32_63>
 800937e:	e014      	b.n	80093aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009380:	6938      	ldr	r0, [r7, #16]
 8009382:	f7ff feb9 	bl	80090f8 <LL_EXTI_EnableFallingTrig_0_31>
 8009386:	e010      	b.n	80093aa <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a50      	ldr	r2, [pc, #320]	; (80094d0 <HAL_COMP_Init+0x300>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d004      	beq.n	800939c <HAL_COMP_Init+0x1cc>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a4f      	ldr	r2, [pc, #316]	; (80094d4 <HAL_COMP_Init+0x304>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d103      	bne.n	80093a4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800939c:	6938      	ldr	r0, [r7, #16]
 800939e:	f7ff fee3 	bl	8009168 <LL_EXTI_DisableFallingTrig_32_63>
 80093a2:	e002      	b.n	80093aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80093a4:	6938      	ldr	r0, [r7, #16]
 80093a6:	f7ff fecb 	bl	8009140 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a48      	ldr	r2, [pc, #288]	; (80094d0 <HAL_COMP_Init+0x300>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_COMP_Init+0x1ee>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a46      	ldr	r2, [pc, #280]	; (80094d4 <HAL_COMP_Init+0x304>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d103      	bne.n	80093c6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80093be:	6938      	ldr	r0, [r7, #16]
 80093c0:	f7ff fef6 	bl	80091b0 <LL_EXTI_ClearFlag_32_63>
 80093c4:	e002      	b.n	80093cc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80093c6:	6938      	ldr	r0, [r7, #16]
 80093c8:	f7ff fee2 	bl	8009190 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d011      	beq.n	80093fc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a3c      	ldr	r2, [pc, #240]	; (80094d0 <HAL_COMP_Init+0x300>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d004      	beq.n	80093ec <HAL_COMP_Init+0x21c>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a3b      	ldr	r2, [pc, #236]	; (80094d4 <HAL_COMP_Init+0x304>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d103      	bne.n	80093f4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80093ec:	6938      	ldr	r0, [r7, #16]
 80093ee:	f7ff fdfd 	bl	8008fec <LL_EXTI_EnableEvent_32_63>
 80093f2:	e014      	b.n	800941e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80093f4:	6938      	ldr	r0, [r7, #16]
 80093f6:	f7ff fde7 	bl	8008fc8 <LL_EXTI_EnableEvent_0_31>
 80093fa:	e010      	b.n	800941e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a33      	ldr	r2, [pc, #204]	; (80094d0 <HAL_COMP_Init+0x300>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d004      	beq.n	8009410 <HAL_COMP_Init+0x240>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a32      	ldr	r2, [pc, #200]	; (80094d4 <HAL_COMP_Init+0x304>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d103      	bne.n	8009418 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009410:	6938      	ldr	r0, [r7, #16]
 8009412:	f7ff fe11 	bl	8009038 <LL_EXTI_DisableEvent_32_63>
 8009416:	e002      	b.n	800941e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009418:	6938      	ldr	r0, [r7, #16]
 800941a:	f7ff fdf9 	bl	8009010 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d011      	beq.n	800944e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <HAL_COMP_Init+0x300>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d004      	beq.n	800943e <HAL_COMP_Init+0x26e>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a26      	ldr	r2, [pc, #152]	; (80094d4 <HAL_COMP_Init+0x304>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d103      	bne.n	8009446 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800943e:	6938      	ldr	r0, [r7, #16]
 8009440:	f7ff fd88 	bl	8008f54 <LL_EXTI_EnableIT_32_63>
 8009444:	e04b      	b.n	80094de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	f7ff fd72 	bl	8008f30 <LL_EXTI_EnableIT_0_31>
 800944c:	e047      	b.n	80094de <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1f      	ldr	r2, [pc, #124]	; (80094d0 <HAL_COMP_Init+0x300>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d004      	beq.n	8009462 <HAL_COMP_Init+0x292>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <HAL_COMP_Init+0x304>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d103      	bne.n	800946a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009462:	6938      	ldr	r0, [r7, #16]
 8009464:	f7ff fd9c 	bl	8008fa0 <LL_EXTI_DisableIT_32_63>
 8009468:	e039      	b.n	80094de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f7ff fd84 	bl	8008f78 <LL_EXTI_DisableIT_0_31>
 8009470:	e035      	b.n	80094de <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <HAL_COMP_Init+0x300>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d004      	beq.n	8009486 <HAL_COMP_Init+0x2b6>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a14      	ldr	r2, [pc, #80]	; (80094d4 <HAL_COMP_Init+0x304>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d103      	bne.n	800948e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f7ff fdd6 	bl	8009038 <LL_EXTI_DisableEvent_32_63>
 800948c:	e002      	b.n	8009494 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f7ff fdbe 	bl	8009010 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a0d      	ldr	r2, [pc, #52]	; (80094d0 <HAL_COMP_Init+0x300>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <HAL_COMP_Init+0x2d8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a0c      	ldr	r2, [pc, #48]	; (80094d4 <HAL_COMP_Init+0x304>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d117      	bne.n	80094d8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80094a8:	6938      	ldr	r0, [r7, #16]
 80094aa:	f7ff fd79 	bl	8008fa0 <LL_EXTI_DisableIT_32_63>
 80094ae:	e016      	b.n	80094de <HAL_COMP_Init+0x30e>
 80094b0:	ff007e0f 	.word	0xff007e0f
 80094b4:	20000ca8 	.word	0x20000ca8
 80094b8:	053e2d63 	.word	0x053e2d63
 80094bc:	40010200 	.word	0x40010200
 80094c0:	40010204 	.word	0x40010204
 80094c4:	40010208 	.word	0x40010208
 80094c8:	4001020c 	.word	0x4001020c
 80094cc:	40010210 	.word	0x40010210
 80094d0:	40010214 	.word	0x40010214
 80094d4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80094d8:	6938      	ldr	r0, [r7, #16]
 80094da:	f7ff fd4d 	bl	8008f78 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	7f5b      	ldrb	r3, [r3, #29]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80094ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <__NVIC_SetPriorityGrouping>:
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <__NVIC_SetPriorityGrouping+0x44>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009514:	4013      	ands	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800952a:	4a04      	ldr	r2, [pc, #16]	; (800953c <__NVIC_SetPriorityGrouping+0x44>)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	60d3      	str	r3, [r2, #12]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	e000ed00 	.word	0xe000ed00

08009540 <__NVIC_GetPriorityGrouping>:
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <__NVIC_GetPriorityGrouping+0x18>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	f003 0307 	and.w	r3, r3, #7
}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	e000ed00 	.word	0xe000ed00

0800955c <__NVIC_EnableIRQ>:
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	db0b      	blt.n	8009586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	f003 021f 	and.w	r2, r3, #31
 8009574:	4907      	ldr	r1, [pc, #28]	; (8009594 <__NVIC_EnableIRQ+0x38>)
 8009576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	2001      	movs	r0, #1
 800957e:	fa00 f202 	lsl.w	r2, r0, r2
 8009582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	e000e100 	.word	0xe000e100

08009598 <__NVIC_DisableIRQ>:
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	db10      	blt.n	80095cc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	f003 021f 	and.w	r2, r3, #31
 80095b0:	4909      	ldr	r1, [pc, #36]	; (80095d8 <__NVIC_DisableIRQ+0x40>)
 80095b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b6:	095b      	lsrs	r3, r3, #5
 80095b8:	2001      	movs	r0, #1
 80095ba:	fa00 f202 	lsl.w	r2, r0, r2
 80095be:	3320      	adds	r3, #32
 80095c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80095c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80095c8:	f3bf 8f6f 	isb	sy
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	e000e100 	.word	0xe000e100

080095dc <__NVIC_SetPriority>:
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	db0a      	blt.n	8009606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	490c      	ldr	r1, [pc, #48]	; (8009628 <__NVIC_SetPriority+0x4c>)
 80095f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095fa:	0112      	lsls	r2, r2, #4
 80095fc:	b2d2      	uxtb	r2, r2
 80095fe:	440b      	add	r3, r1
 8009600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009604:	e00a      	b.n	800961c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4908      	ldr	r1, [pc, #32]	; (800962c <__NVIC_SetPriority+0x50>)
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	3b04      	subs	r3, #4
 8009614:	0112      	lsls	r2, r2, #4
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	440b      	add	r3, r1
 800961a:	761a      	strb	r2, [r3, #24]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	e000e100 	.word	0xe000e100
 800962c:	e000ed00 	.word	0xe000ed00

08009630 <NVIC_EncodePriority>:
{
 8009630:	b480      	push	{r7}
 8009632:	b089      	sub	sp, #36	; 0x24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f1c3 0307 	rsb	r3, r3, #7
 800964a:	2b04      	cmp	r3, #4
 800964c:	bf28      	it	cs
 800964e:	2304      	movcs	r3, #4
 8009650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3304      	adds	r3, #4
 8009656:	2b06      	cmp	r3, #6
 8009658:	d902      	bls.n	8009660 <NVIC_EncodePriority+0x30>
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	3b03      	subs	r3, #3
 800965e:	e000      	b.n	8009662 <NVIC_EncodePriority+0x32>
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	43da      	mvns	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	401a      	ands	r2, r3
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	fa01 f303 	lsl.w	r3, r1, r3
 8009682:	43d9      	mvns	r1, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009688:	4313      	orrs	r3, r2
}
 800968a:	4618      	mov	r0, r3
 800968c:	3724      	adds	r7, #36	; 0x24
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <SysTick_Config>:
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096a8:	d301      	bcc.n	80096ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80096aa:	2301      	movs	r3, #1
 80096ac:	e00f      	b.n	80096ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096ae:	4a0a      	ldr	r2, [pc, #40]	; (80096d8 <SysTick_Config+0x40>)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096b6:	210f      	movs	r1, #15
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096bc:	f7ff ff8e 	bl	80095dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <SysTick_Config+0x40>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096c6:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <SysTick_Config+0x40>)
 80096c8:	2207      	movs	r2, #7
 80096ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	e000e010 	.word	0xe000e010

080096dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff ff07 	bl	80094f8 <__NVIC_SetPriorityGrouping>
}
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	4603      	mov	r3, r0
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009700:	f7ff ff1e 	bl	8009540 <__NVIC_GetPriorityGrouping>
 8009704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	f7ff ff90 	bl	8009630 <NVIC_EncodePriority>
 8009710:	4602      	mov	r2, r0
 8009712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009716:	4611      	mov	r1, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ff5f 	bl	80095dc <__NVIC_SetPriority>
}
 800971e:	bf00      	nop
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	4603      	mov	r3, r0
 800972e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff ff11 	bl	800955c <__NVIC_EnableIRQ>
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	4603      	mov	r3, r0
 800974a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800974c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ff21 	bl	8009598 <__NVIC_DisableIRQ>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff ff96 	bl	8009698 <SysTick_Config>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e014      	b.n	80097b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	791b      	ldrb	r3, [r3, #4]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7fd f809 	bl	80067b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2202      	movs	r2, #2
 80097a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	795b      	ldrb	r3, [r3, #5]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_DAC_Start+0x16>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e043      	b.n	8009858 <HAL_DAC_Start+0x9e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2201      	movs	r2, #1
 80097ea:	409a      	lsls	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80097f4:	2001      	movs	r0, #1
 80097f6:	f7fe fb1d 	bl	8007e34 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10f      	bne.n	8009820 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800980a:	2b02      	cmp	r3, #2
 800980c:	d11d      	bne.n	800984a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	e014      	b.n	800984a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2102      	movs	r1, #2
 8009832:	fa01 f303 	lsl.w	r3, r1, r3
 8009836:	429a      	cmp	r2, r3
 8009838:	d107      	bne.n	800984a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f042 0202 	orr.w	r2, r2, #2
 8009848:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	795b      	ldrb	r3, [r3, #5]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d101      	bne.n	800987e <HAL_DAC_Start_DMA+0x1e>
 800987a:	2302      	movs	r3, #2
 800987c:	e0a1      	b.n	80099c2 <HAL_DAC_Start_DMA+0x162>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2202      	movs	r2, #2
 8009888:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d12a      	bne.n	80098e6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	4a4d      	ldr	r2, [pc, #308]	; (80099cc <HAL_DAC_Start_DMA+0x16c>)
 8009896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	4a4c      	ldr	r2, [pc, #304]	; (80099d0 <HAL_DAC_Start_DMA+0x170>)
 800989e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	4a4b      	ldr	r2, [pc, #300]	; (80099d4 <HAL_DAC_Start_DMA+0x174>)
 80098a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d009      	beq.n	80098d2 <HAL_DAC_Start_DMA+0x72>
 80098be:	2b08      	cmp	r3, #8
 80098c0:	d00c      	beq.n	80098dc <HAL_DAC_Start_DMA+0x7c>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d000      	beq.n	80098c8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80098c6:	e039      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	613b      	str	r3, [r7, #16]
        break;
 80098d0:	e034      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	613b      	str	r3, [r7, #16]
        break;
 80098da:	e02f      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3310      	adds	r3, #16
 80098e2:	613b      	str	r3, [r7, #16]
        break;
 80098e4:	e02a      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	4a3b      	ldr	r2, [pc, #236]	; (80099d8 <HAL_DAC_Start_DMA+0x178>)
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	4a3a      	ldr	r2, [pc, #232]	; (80099dc <HAL_DAC_Start_DMA+0x17c>)
 80098f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	4a39      	ldr	r2, [pc, #228]	; (80099e0 <HAL_DAC_Start_DMA+0x180>)
 80098fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800990c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	2b04      	cmp	r3, #4
 8009912:	d009      	beq.n	8009928 <HAL_DAC_Start_DMA+0xc8>
 8009914:	2b08      	cmp	r3, #8
 8009916:	d00c      	beq.n	8009932 <HAL_DAC_Start_DMA+0xd2>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d000      	beq.n	800991e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800991c:	e00e      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3314      	adds	r3, #20
 8009924:	613b      	str	r3, [r7, #16]
        break;
 8009926:	e009      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3318      	adds	r3, #24
 800992e:	613b      	str	r3, [r7, #16]
        break;
 8009930:	e004      	b.n	800993c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	331c      	adds	r3, #28
 8009938:	613b      	str	r3, [r7, #16]
        break;
 800993a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d111      	bne.n	8009966 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009950:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6898      	ldr	r0, [r3, #8]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	f000 fbd2 	bl	800a104 <HAL_DMA_Start_IT>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]
 8009964:	e010      	b.n	8009988 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009974:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	68d8      	ldr	r0, [r3, #12]
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	f000 fbc0 	bl	800a104 <HAL_DMA_Start_IT>
 8009984:	4603      	mov	r3, r0
 8009986:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10f      	bne.n	80099b4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80099ac:	2001      	movs	r0, #1
 80099ae:	f7fe fa41 	bl	8007e34 <HAL_Delay>
 80099b2:	e005      	b.n	80099c0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f043 0204 	orr.w	r2, r3, #4
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	08009ea1 	.word	0x08009ea1
 80099d0:	08009ec3 	.word	0x08009ec3
 80099d4:	08009edf 	.word	0x08009edf
 80099d8:	08009f49 	.word	0x08009f49
 80099dc:	08009f6b 	.word	0x08009f6b
 80099e0:	08009f87 	.word	0x08009f87

080099e4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009a02:	43da      	mvns	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	400a      	ands	r2, r1
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6819      	ldr	r1, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2201      	movs	r2, #1
 8009a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1e:	43da      	mvns	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	400a      	ands	r2, r1
 8009a26:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f7fe fa03 	bl	8007e34 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fbde 	bl	800a1fa <HAL_DMA_Abort>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	e00e      	b.n	8009a72 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fbce 	bl	800a1fa <HAL_DMA_Abort>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009a70:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	711a      	strb	r2, [r3, #4]
 8009a7e:	e002      	b.n	8009a86 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4413      	add	r3, r2
 8009aba:	3308      	adds	r3, #8
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e004      	b.n	8009aca <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	3314      	adds	r3, #20
 8009ac8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	461a      	mov	r2, r3
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	e002      	b.n	8009b3a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	795b      	ldrb	r3, [r3, #5]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_DAC_ConfigChannel+0x1c>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e194      	b.n	8009e8e <HAL_DAC_ConfigChannel+0x346>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d174      	bne.n	8009c62 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d137      	bne.n	8009bee <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009b7e:	f7fe f94d 	bl	8007e1c <HAL_GetTick>
 8009b82:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009b84:	e011      	b.n	8009baa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009b86:	f7fe f949 	bl	8007e1c <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d90a      	bls.n	8009baa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	f043 0208 	orr.w	r2, r3, #8
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e171      	b.n	8009e8e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e6      	bne.n	8009b86 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009bb8:	2001      	movs	r0, #1
 8009bba:	f7fe f93b 	bl	8007e34 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8009bc8:	e01e      	b.n	8009c08 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009bca:	f7fe f927 	bl	8007e1c <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d90a      	bls.n	8009bee <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	f043 0208 	orr.w	r2, r3, #8
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2203      	movs	r2, #3
 8009be8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e14f      	b.n	8009e8e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dbe8      	blt.n	8009bca <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	f7fe f91b 	bl	8007e34 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c06:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009c18:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1c:	43db      	mvns	r3, r3
 8009c1e:	ea02 0103 	and.w	r1, r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	409a      	lsls	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f003 0310 	and.w	r3, r3, #16
 8009c42:	21ff      	movs	r1, #255	; 0xff
 8009c44:	fa01 f303 	lsl.w	r3, r1, r3
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	ea02 0103 	and.w	r1, r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f003 0310 	and.w	r3, r3, #16
 8009c58:	409a      	lsls	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d11d      	bne.n	8009ca6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	221f      	movs	r2, #31
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	43db      	mvns	r3, r3
 8009c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c82:	4013      	ands	r3, r2
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f003 0310 	and.w	r3, r3, #16
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	fa02 f303 	lsl.w	r3, r2, r3
 8009c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2207      	movs	r2, #7
 8009cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cba:	43db      	mvns	r3, r3
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	623b      	str	r3, [r7, #32]
 8009cd2:	e011      	b.n	8009cf8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	623b      	str	r3, [r7, #32]
 8009ce4:	e008      	b.n	8009cf8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	623b      	str	r3, [r7, #32]
 8009cf2:	e001      	b.n	8009cf8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	6a3a      	ldr	r2, [r7, #32]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	43db      	mvns	r3, r3
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d102      	bne.n	8009d2c <HAL_DAC_ConfigChannel+0x1e4>
 8009d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d2a:	e000      	b.n	8009d2e <HAL_DAC_ConfigChannel+0x1e6>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f003 0310 	and.w	r3, r3, #16
 8009d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	43db      	mvns	r3, r3
 8009d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d46:	4013      	ands	r3, r2
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	795b      	ldrb	r3, [r3, #5]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d102      	bne.n	8009d58 <HAL_DAC_ConfigChannel+0x210>
 8009d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d56:	e000      	b.n	8009d5a <HAL_DAC_ConfigChannel+0x212>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d114      	bne.n	8009d9a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009d70:	f001 fbc2 	bl	800b4f8 <HAL_RCC_GetHCLKFreq>
 8009d74:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4a47      	ldr	r2, [pc, #284]	; (8009e98 <HAL_DAC_ConfigChannel+0x350>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d904      	bls.n	8009d88 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
 8009d86:	e00d      	b.n	8009da4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	4a44      	ldr	r2, [pc, #272]	; (8009e9c <HAL_DAC_ConfigChannel+0x354>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d909      	bls.n	8009da4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	e004      	b.n	8009da4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da0:	4313      	orrs	r3, r2
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	4313      	orrs	r3, r2
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009dce:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd2:	43da      	mvns	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	400a      	ands	r2, r1
 8009dda:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0310 	and.w	r3, r3, #16
 8009dea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	43db      	mvns	r3, r3
 8009df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df6:	4013      	ands	r3, r2
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f003 0310 	and.w	r3, r3, #16
 8009e26:	22c0      	movs	r2, #192	; 0xc0
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	43da      	mvns	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	400a      	ands	r2, r1
 8009e34:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	089b      	lsrs	r3, r3, #2
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	089b      	lsrs	r3, r3, #2
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009e64:	fa01 f303 	lsl.w	r3, r1, r3
 8009e68:	43db      	mvns	r3, r3
 8009e6a:	ea02 0103 	and.w	r1, r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f003 0310 	and.w	r3, r3, #16
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	409a      	lsls	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	09896800 	.word	0x09896800
 8009e9c:	04c4b400 	.word	0x04c4b400

08009ea0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fe16 	bl	8009ae0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	711a      	strb	r2, [r3, #4]
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ece:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff fe0f 	bl	8009af4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	f043 0204 	orr.w	r2, r3, #4
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fe05 	bl	8009b08 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	711a      	strb	r2, [r3, #4]
}
 8009f04:	bf00      	nop
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff ffd8 	bl	8009f0c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	711a      	strb	r2, [r3, #4]
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff ffd1 	bl	8009f20 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f043 0204 	orr.w	r2, r3, #4
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff ffc7 	bl	8009f34 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	711a      	strb	r2, [r3, #4]
}
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e08d      	b.n	800a0e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4b47      	ldr	r3, [pc, #284]	; (800a0ec <HAL_DMA_Init+0x138>)
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d80f      	bhi.n	8009ff2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4b45      	ldr	r3, [pc, #276]	; (800a0f0 <HAL_DMA_Init+0x13c>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	4a45      	ldr	r2, [pc, #276]	; (800a0f4 <HAL_DMA_Init+0x140>)
 8009fde:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe2:	091b      	lsrs	r3, r3, #4
 8009fe4:	009a      	lsls	r2, r3, #2
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a42      	ldr	r2, [pc, #264]	; (800a0f8 <HAL_DMA_Init+0x144>)
 8009fee:	641a      	str	r2, [r3, #64]	; 0x40
 8009ff0:	e00e      	b.n	800a010 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4b40      	ldr	r3, [pc, #256]	; (800a0fc <HAL_DMA_Init+0x148>)
 8009ffa:	4413      	add	r3, r2
 8009ffc:	4a3d      	ldr	r2, [pc, #244]	; (800a0f4 <HAL_DMA_Init+0x140>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	091b      	lsrs	r3, r3, #4
 800a004:	009a      	lsls	r2, r3, #2
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a3c      	ldr	r2, [pc, #240]	; (800a100 <HAL_DMA_Init+0x14c>)
 800a00e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a02a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a04c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa10 	bl	800a488 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a070:	d102      	bne.n	800a078 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a08c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d010      	beq.n	800a0b8 <HAL_DMA_Init+0x104>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d80c      	bhi.n	800a0b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa30 	bl	800a504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	e008      	b.n	800a0ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	40020407 	.word	0x40020407
 800a0f0:	bffdfff8 	.word	0xbffdfff8
 800a0f4:	cccccccd 	.word	0xcccccccd
 800a0f8:	40020000 	.word	0x40020000
 800a0fc:	bffdfbf8 	.word	0xbffdfbf8
 800a100:	40020400 	.word	0x40020400

0800a104 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_DMA_Start_IT+0x20>
 800a120:	2302      	movs	r3, #2
 800a122:	e066      	b.n	800a1f2 <HAL_DMA_Start_IT+0xee>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b01      	cmp	r3, #1
 800a136:	d155      	bne.n	800a1e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0201 	bic.w	r2, r2, #1
 800a154:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 f954 	bl	800a40a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 020e 	orr.w	r2, r2, #14
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e00f      	b.n	800a19c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0204 	bic.w	r2, r2, #4
 800a18a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 020a 	orr.w	r2, r2, #10
 800a19a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f042 0201 	orr.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e005      	b.n	800a1f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d005      	beq.n	800a21e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2204      	movs	r2, #4
 800a216:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
 800a21c:	e037      	b.n	800a28e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 020e 	bic.w	r2, r2, #14
 800a22c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a23c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a252:	f003 021f 	and.w	r2, r3, #31
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	2101      	movs	r1, #1
 800a25c:	fa01 f202 	lsl.w	r2, r1, r2
 800a260:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a26a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00c      	beq.n	800a28e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a282:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a28c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c8:	f003 031f 	and.w	r3, r3, #31
 800a2cc:	2204      	movs	r2, #4
 800a2ce:	409a      	lsls	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d026      	beq.n	800a326 <HAL_DMA_IRQHandler+0x7a>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f003 0304 	and.w	r3, r3, #4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d021      	beq.n	800a326 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f022 0204 	bic.w	r2, r2, #4
 800a2fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a304:	f003 021f 	and.w	r2, r3, #31
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30c:	2104      	movs	r1, #4
 800a30e:	fa01 f202 	lsl.w	r2, r1, r2
 800a312:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d071      	beq.n	800a400 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a324:	e06c      	b.n	800a400 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32a:	f003 031f 	and.w	r3, r3, #31
 800a32e:	2202      	movs	r2, #2
 800a330:	409a      	lsls	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4013      	ands	r3, r2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d02e      	beq.n	800a398 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d029      	beq.n	800a398 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10b      	bne.n	800a36a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 020a 	bic.w	r2, r2, #10
 800a360:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36e:	f003 021f 	and.w	r2, r3, #31
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	2102      	movs	r1, #2
 800a378:	fa01 f202 	lsl.w	r2, r1, r2
 800a37c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d038      	beq.n	800a400 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a396:	e033      	b.n	800a400 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39c:	f003 031f 	and.w	r3, r3, #31
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	409a      	lsls	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d02a      	beq.n	800a402 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d025      	beq.n	800a402 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 020e 	bic.w	r2, r2, #14
 800a3c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ca:	f003 021f 	and.w	r2, r3, #31
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	fa01 f202 	lsl.w	r2, r1, r2
 800a3d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a400:	bf00      	nop
 800a402:	bf00      	nop
}
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b085      	sub	sp, #20
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a420:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a432:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a438:	f003 021f 	and.w	r2, r3, #31
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	2101      	movs	r1, #1
 800a442:	fa01 f202 	lsl.w	r2, r1, r2
 800a446:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2b10      	cmp	r3, #16
 800a456:	d108      	bne.n	800a46a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a468:	e007      	b.n	800a47a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	60da      	str	r2, [r3, #12]
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	4b16      	ldr	r3, [pc, #88]	; (800a4f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a498:	429a      	cmp	r2, r3
 800a49a:	d802      	bhi.n	800a4a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a49c:	4b15      	ldr	r3, [pc, #84]	; (800a4f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	e001      	b.n	800a4a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a4a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	3b08      	subs	r3, #8
 800a4b2:	4a12      	ldr	r2, [pc, #72]	; (800a4fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b8:	091b      	lsrs	r3, r3, #4
 800a4ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c0:	089b      	lsrs	r3, r3, #2
 800a4c2:	009a      	lsls	r2, r3, #2
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a0b      	ldr	r2, [pc, #44]	; (800a500 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a4d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 031f 	and.w	r3, r3, #31
 800a4da:	2201      	movs	r2, #1
 800a4dc:	409a      	lsls	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a4e2:	bf00      	nop
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	40020407 	.word	0x40020407
 800a4f4:	40020800 	.word	0x40020800
 800a4f8:	40020820 	.word	0x40020820
 800a4fc:	cccccccd 	.word	0xcccccccd
 800a500:	40020880 	.word	0x40020880

0800a504 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4b0b      	ldr	r3, [pc, #44]	; (800a544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	461a      	mov	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a08      	ldr	r2, [pc, #32]	; (800a548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a526:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	f003 031f 	and.w	r3, r3, #31
 800a530:	2201      	movs	r2, #1
 800a532:	409a      	lsls	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	1000823f 	.word	0x1000823f
 800a548:	40020940 	.word	0x40020940

0800a54c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a55a:	e15a      	b.n	800a812 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	2101      	movs	r1, #1
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	fa01 f303 	lsl.w	r3, r1, r3
 800a568:	4013      	ands	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 814c 	beq.w	800a80c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d00b      	beq.n	800a594 <HAL_GPIO_Init+0x48>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d007      	beq.n	800a594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a588:	2b11      	cmp	r3, #17
 800a58a:	d003      	beq.n	800a594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2b12      	cmp	r3, #18
 800a592:	d130      	bne.n	800a5f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	2203      	movs	r2, #3
 800a5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	43db      	mvns	r3, r3
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	091b      	lsrs	r3, r3, #4
 800a5e0:	f003 0201 	and.w	r2, r3, #1
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	2203      	movs	r2, #3
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	43db      	mvns	r3, r3
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4013      	ands	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d003      	beq.n	800a636 <HAL_GPIO_Init+0xea>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b12      	cmp	r3, #18
 800a634:	d123      	bne.n	800a67e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	08da      	lsrs	r2, r3, #3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3208      	adds	r2, #8
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	220f      	movs	r2, #15
 800a64e:	fa02 f303 	lsl.w	r3, r2, r3
 800a652:	43db      	mvns	r3, r3
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4013      	ands	r3, r2
 800a658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	fa02 f303 	lsl.w	r3, r2, r3
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	08da      	lsrs	r2, r3, #3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3208      	adds	r2, #8
 800a678:	6939      	ldr	r1, [r7, #16]
 800a67a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	2203      	movs	r2, #3
 800a68a:	fa02 f303 	lsl.w	r3, r2, r3
 800a68e:	43db      	mvns	r3, r3
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4013      	ands	r3, r2
 800a694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f003 0203 	and.w	r2, r3, #3
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80a6 	beq.w	800a80c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6c0:	4b5b      	ldr	r3, [pc, #364]	; (800a830 <HAL_GPIO_Init+0x2e4>)
 800a6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c4:	4a5a      	ldr	r2, [pc, #360]	; (800a830 <HAL_GPIO_Init+0x2e4>)
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	6613      	str	r3, [r2, #96]	; 0x60
 800a6cc:	4b58      	ldr	r3, [pc, #352]	; (800a830 <HAL_GPIO_Init+0x2e4>)
 800a6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	60bb      	str	r3, [r7, #8]
 800a6d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6d8:	4a56      	ldr	r2, [pc, #344]	; (800a834 <HAL_GPIO_Init+0x2e8>)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	089b      	lsrs	r3, r3, #2
 800a6de:	3302      	adds	r3, #2
 800a6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	220f      	movs	r2, #15
 800a6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f4:	43db      	mvns	r3, r3
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a702:	d01f      	beq.n	800a744 <HAL_GPIO_Init+0x1f8>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a4c      	ldr	r2, [pc, #304]	; (800a838 <HAL_GPIO_Init+0x2ec>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d019      	beq.n	800a740 <HAL_GPIO_Init+0x1f4>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a4b      	ldr	r2, [pc, #300]	; (800a83c <HAL_GPIO_Init+0x2f0>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d013      	beq.n	800a73c <HAL_GPIO_Init+0x1f0>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a4a      	ldr	r2, [pc, #296]	; (800a840 <HAL_GPIO_Init+0x2f4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d00d      	beq.n	800a738 <HAL_GPIO_Init+0x1ec>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a49      	ldr	r2, [pc, #292]	; (800a844 <HAL_GPIO_Init+0x2f8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d007      	beq.n	800a734 <HAL_GPIO_Init+0x1e8>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a48      	ldr	r2, [pc, #288]	; (800a848 <HAL_GPIO_Init+0x2fc>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d101      	bne.n	800a730 <HAL_GPIO_Init+0x1e4>
 800a72c:	2305      	movs	r3, #5
 800a72e:	e00a      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a730:	2306      	movs	r3, #6
 800a732:	e008      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a734:	2304      	movs	r3, #4
 800a736:	e006      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a738:	2303      	movs	r3, #3
 800a73a:	e004      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e002      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a740:	2301      	movs	r3, #1
 800a742:	e000      	b.n	800a746 <HAL_GPIO_Init+0x1fa>
 800a744:	2300      	movs	r3, #0
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	f002 0203 	and.w	r2, r2, #3
 800a74c:	0092      	lsls	r2, r2, #2
 800a74e:	4093      	lsls	r3, r2
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a756:	4937      	ldr	r1, [pc, #220]	; (800a834 <HAL_GPIO_Init+0x2e8>)
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	089b      	lsrs	r3, r3, #2
 800a75c:	3302      	adds	r3, #2
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a764:	4b39      	ldr	r3, [pc, #228]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	43db      	mvns	r3, r3
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4013      	ands	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4313      	orrs	r3, r2
 800a786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a788:	4a30      	ldr	r2, [pc, #192]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a78e:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	43db      	mvns	r3, r3
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	4013      	ands	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a7b2:	4a26      	ldr	r2, [pc, #152]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a7b8:	4b24      	ldr	r3, [pc, #144]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a7dc:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	43db      	mvns	r3, r3
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a806:	4a11      	ldr	r2, [pc, #68]	; (800a84c <HAL_GPIO_Init+0x300>)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3301      	adds	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	fa22 f303 	lsr.w	r3, r2, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f47f ae9d 	bne.w	800a55c <HAL_GPIO_Init+0x10>
  }
}
 800a822:	bf00      	nop
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40021000 	.word	0x40021000
 800a834:	40010000 	.word	0x40010000
 800a838:	48000400 	.word	0x48000400
 800a83c:	48000800 	.word	0x48000800
 800a840:	48000c00 	.word	0x48000c00
 800a844:	48001000 	.word	0x48001000
 800a848:	48001400 	.word	0x48001400
 800a84c:	40010400 	.word	0x40010400

0800a850 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a85e:	e0bd      	b.n	800a9dc <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a860:	2201      	movs	r2, #1
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	fa02 f303 	lsl.w	r3, r2, r3
 800a868:	683a      	ldr	r2, [r7, #0]
 800a86a:	4013      	ands	r3, r2
 800a86c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80b0 	beq.w	800a9d6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a876:	4a60      	ldr	r2, [pc, #384]	; (800a9f8 <HAL_GPIO_DeInit+0x1a8>)
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	089b      	lsrs	r3, r3, #2
 800a87c:	3302      	adds	r3, #2
 800a87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a882:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	220f      	movs	r2, #15
 800a88e:	fa02 f303 	lsl.w	r3, r2, r3
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a89e:	d01f      	beq.n	800a8e0 <HAL_GPIO_DeInit+0x90>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a56      	ldr	r2, [pc, #344]	; (800a9fc <HAL_GPIO_DeInit+0x1ac>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d019      	beq.n	800a8dc <HAL_GPIO_DeInit+0x8c>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a55      	ldr	r2, [pc, #340]	; (800aa00 <HAL_GPIO_DeInit+0x1b0>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d013      	beq.n	800a8d8 <HAL_GPIO_DeInit+0x88>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a54      	ldr	r2, [pc, #336]	; (800aa04 <HAL_GPIO_DeInit+0x1b4>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d00d      	beq.n	800a8d4 <HAL_GPIO_DeInit+0x84>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a53      	ldr	r2, [pc, #332]	; (800aa08 <HAL_GPIO_DeInit+0x1b8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d007      	beq.n	800a8d0 <HAL_GPIO_DeInit+0x80>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a52      	ldr	r2, [pc, #328]	; (800aa0c <HAL_GPIO_DeInit+0x1bc>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d101      	bne.n	800a8cc <HAL_GPIO_DeInit+0x7c>
 800a8c8:	2305      	movs	r3, #5
 800a8ca:	e00a      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8cc:	2306      	movs	r3, #6
 800a8ce:	e008      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8d0:	2304      	movs	r3, #4
 800a8d2:	e006      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e004      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e002      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e000      	b.n	800a8e2 <HAL_GPIO_DeInit+0x92>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	f002 0203 	and.w	r2, r2, #3
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	4093      	lsls	r3, r2
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d132      	bne.n	800a958 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a8f2:	4b47      	ldr	r3, [pc, #284]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	43db      	mvns	r3, r3
 800a8fa:	4945      	ldr	r1, [pc, #276]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a900:	4b43      	ldr	r3, [pc, #268]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	43db      	mvns	r3, r3
 800a908:	4941      	ldr	r1, [pc, #260]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a90e:	4b40      	ldr	r3, [pc, #256]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	43db      	mvns	r3, r3
 800a916:	493e      	ldr	r1, [pc, #248]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a918:	4013      	ands	r3, r2
 800a91a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a91c:	4b3c      	ldr	r3, [pc, #240]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a91e:	68da      	ldr	r2, [r3, #12]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	43db      	mvns	r3, r3
 800a924:	493a      	ldr	r1, [pc, #232]	; (800aa10 <HAL_GPIO_DeInit+0x1c0>)
 800a926:	4013      	ands	r3, r2
 800a928:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f003 0303 	and.w	r3, r3, #3
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	220f      	movs	r2, #15
 800a934:	fa02 f303 	lsl.w	r3, r2, r3
 800a938:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a93a:	4a2f      	ldr	r2, [pc, #188]	; (800a9f8 <HAL_GPIO_DeInit+0x1a8>)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	089b      	lsrs	r3, r3, #2
 800a940:	3302      	adds	r3, #2
 800a942:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	43da      	mvns	r2, r3
 800a94a:	482b      	ldr	r0, [pc, #172]	; (800a9f8 <HAL_GPIO_DeInit+0x1a8>)
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	089b      	lsrs	r3, r3, #2
 800a950:	400a      	ands	r2, r1
 800a952:	3302      	adds	r3, #2
 800a954:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	2103      	movs	r1, #3
 800a962:	fa01 f303 	lsl.w	r3, r1, r3
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	08da      	lsrs	r2, r3, #3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3208      	adds	r2, #8
 800a974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	220f      	movs	r2, #15
 800a982:	fa02 f303 	lsl.w	r3, r2, r3
 800a986:	43db      	mvns	r3, r3
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	08d2      	lsrs	r2, r2, #3
 800a98c:	4019      	ands	r1, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3208      	adds	r2, #8
 800a992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	2103      	movs	r1, #3
 800a9a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a4:	43db      	mvns	r3, r3
 800a9a6:	401a      	ands	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	401a      	ands	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	2103      	movs	r1, #3
 800a9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ce:	43db      	mvns	r3, r3
 800a9d0:	401a      	ands	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f47f af3b 	bne.w	800a860 <HAL_GPIO_DeInit+0x10>
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	371c      	adds	r7, #28
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	40010000 	.word	0x40010000
 800a9fc:	48000400 	.word	0x48000400
 800aa00:	48000800 	.word	0x48000800
 800aa04:	48000c00 	.word	0x48000c00
 800aa08:	48001000 	.word	0x48001000
 800aa0c:	48001400 	.word	0x48001400
 800aa10:	40010400 	.word	0x40010400

0800aa14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	807b      	strh	r3, [r7, #2]
 800aa20:	4613      	mov	r3, r2
 800aa22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa24:	787b      	ldrb	r3, [r7, #1]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aa2a:	887a      	ldrh	r2, [r7, #2]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aa30:	e002      	b.n	800aa38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aa32:	887a      	ldrh	r2, [r7, #2]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d141      	bne.n	800aad6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aa52:	4b4b      	ldr	r3, [pc, #300]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa5e:	d131      	bne.n	800aac4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa60:	4b47      	ldr	r3, [pc, #284]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa66:	4a46      	ldr	r2, [pc, #280]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aa70:	4b43      	ldr	r3, [pc, #268]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa78:	4a41      	ldr	r2, [pc, #260]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aa80:	4b40      	ldr	r3, [pc, #256]	; (800ab84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2232      	movs	r2, #50	; 0x32
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
 800aa8a:	4a3f      	ldr	r2, [pc, #252]	; (800ab88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aa8c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa90:	0c9b      	lsrs	r3, r3, #18
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa96:	e002      	b.n	800aa9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa9e:	4b38      	ldr	r3, [pc, #224]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaaa:	d102      	bne.n	800aab2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f2      	bne.n	800aa98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aab2:	4b33      	ldr	r3, [pc, #204]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aabe:	d158      	bne.n	800ab72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e057      	b.n	800ab74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aac4:	4b2e      	ldr	r3, [pc, #184]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaca:	4a2d      	ldr	r2, [pc, #180]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aad4:	e04d      	b.n	800ab72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aadc:	d141      	bne.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aade:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaea:	d131      	bne.n	800ab50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aaec:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaf2:	4a23      	ldr	r2, [pc, #140]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aafc:	4b20      	ldr	r3, [pc, #128]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab04:	4a1e      	ldr	r2, [pc, #120]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab0c:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2232      	movs	r2, #50	; 0x32
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	4a1c      	ldr	r2, [pc, #112]	; (800ab88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	0c9b      	lsrs	r3, r3, #18
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab22:	e002      	b.n	800ab2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab2a:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab36:	d102      	bne.n	800ab3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f2      	bne.n	800ab24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab4a:	d112      	bne.n	800ab72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e011      	b.n	800ab74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab50:	4b0b      	ldr	r3, [pc, #44]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab56:	4a0a      	ldr	r2, [pc, #40]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab60:	e007      	b.n	800ab72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab62:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab6a:	4a05      	ldr	r2, [pc, #20]	; (800ab80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40007000 	.word	0x40007000
 800ab84:	20000ca8 	.word	0x20000ca8
 800ab88:	431bde83 	.word	0x431bde83

0800ab8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e308      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d075      	beq.n	800ac96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abaa:	4ba3      	ldr	r3, [pc, #652]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f003 030c 	and.w	r3, r3, #12
 800abb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abb4:	4ba0      	ldr	r3, [pc, #640]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b0c      	cmp	r3, #12
 800abc2:	d102      	bne.n	800abca <HAL_RCC_OscConfig+0x3e>
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d002      	beq.n	800abd0 <HAL_RCC_OscConfig+0x44>
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	2b08      	cmp	r3, #8
 800abce:	d10b      	bne.n	800abe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abd0:	4b99      	ldr	r3, [pc, #612]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d05b      	beq.n	800ac94 <HAL_RCC_OscConfig+0x108>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d157      	bne.n	800ac94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e2e3      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf0:	d106      	bne.n	800ac00 <HAL_RCC_OscConfig+0x74>
 800abf2:	4b91      	ldr	r3, [pc, #580]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a90      	ldr	r2, [pc, #576]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800abf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	e01d      	b.n	800ac3c <HAL_RCC_OscConfig+0xb0>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac08:	d10c      	bne.n	800ac24 <HAL_RCC_OscConfig+0x98>
 800ac0a:	4b8b      	ldr	r3, [pc, #556]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a8a      	ldr	r2, [pc, #552]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	4b88      	ldr	r3, [pc, #544]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a87      	ldr	r2, [pc, #540]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	e00b      	b.n	800ac3c <HAL_RCC_OscConfig+0xb0>
 800ac24:	4b84      	ldr	r3, [pc, #528]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a83      	ldr	r2, [pc, #524]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	4b81      	ldr	r3, [pc, #516]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a80      	ldr	r2, [pc, #512]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d013      	beq.n	800ac6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac44:	f7fd f8ea 	bl	8007e1c <HAL_GetTick>
 800ac48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac4a:	e008      	b.n	800ac5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac4c:	f7fd f8e6 	bl	8007e1c <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	2b64      	cmp	r3, #100	; 0x64
 800ac58:	d901      	bls.n	800ac5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e2a8      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac5e:	4b76      	ldr	r3, [pc, #472]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f0      	beq.n	800ac4c <HAL_RCC_OscConfig+0xc0>
 800ac6a:	e014      	b.n	800ac96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac6c:	f7fd f8d6 	bl	8007e1c <HAL_GetTick>
 800ac70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac72:	e008      	b.n	800ac86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac74:	f7fd f8d2 	bl	8007e1c <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	2b64      	cmp	r3, #100	; 0x64
 800ac80:	d901      	bls.n	800ac86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e294      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac86:	4b6c      	ldr	r3, [pc, #432]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f0      	bne.n	800ac74 <HAL_RCC_OscConfig+0xe8>
 800ac92:	e000      	b.n	800ac96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d075      	beq.n	800ad8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aca2:	4b65      	ldr	r3, [pc, #404]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 030c 	and.w	r3, r3, #12
 800acaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acac:	4b62      	ldr	r3, [pc, #392]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b0c      	cmp	r3, #12
 800acba:	d102      	bne.n	800acc2 <HAL_RCC_OscConfig+0x136>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d002      	beq.n	800acc8 <HAL_RCC_OscConfig+0x13c>
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d11f      	bne.n	800ad08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acc8:	4b5b      	ldr	r3, [pc, #364]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d005      	beq.n	800ace0 <HAL_RCC_OscConfig+0x154>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e267      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ace0:	4b55      	ldr	r3, [pc, #340]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	4952      	ldr	r1, [pc, #328]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800acf4:	4b51      	ldr	r3, [pc, #324]	; (800ae3c <HAL_RCC_OscConfig+0x2b0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fd f843 	bl	8007d84 <HAL_InitTick>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d043      	beq.n	800ad8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e253      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d023      	beq.n	800ad58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad10:	4b49      	ldr	r3, [pc, #292]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a48      	ldr	r2, [pc, #288]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1c:	f7fd f87e 	bl	8007e1c <HAL_GetTick>
 800ad20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad22:	e008      	b.n	800ad36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad24:	f7fd f87a 	bl	8007e1c <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e23c      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad36:	4b40      	ldr	r3, [pc, #256]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0f0      	beq.n	800ad24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad42:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	061b      	lsls	r3, r3, #24
 800ad50:	4939      	ldr	r1, [pc, #228]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	604b      	str	r3, [r1, #4]
 800ad56:	e01a      	b.n	800ad8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad58:	4b37      	ldr	r3, [pc, #220]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a36      	ldr	r2, [pc, #216]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad64:	f7fd f85a 	bl	8007e1c <HAL_GetTick>
 800ad68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad6a:	e008      	b.n	800ad7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad6c:	f7fd f856 	bl	8007e1c <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d901      	bls.n	800ad7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e218      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad7e:	4b2e      	ldr	r3, [pc, #184]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f0      	bne.n	800ad6c <HAL_RCC_OscConfig+0x1e0>
 800ad8a:	e000      	b.n	800ad8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d03c      	beq.n	800ae14 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01c      	beq.n	800addc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ada2:	4b25      	ldr	r3, [pc, #148]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ada4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ada8:	4a23      	ldr	r2, [pc, #140]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb2:	f7fd f833 	bl	8007e1c <HAL_GetTick>
 800adb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adb8:	e008      	b.n	800adcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adba:	f7fd f82f 	bl	8007e1c <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e1f1      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adcc:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800adce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0ef      	beq.n	800adba <HAL_RCC_OscConfig+0x22e>
 800adda:	e01b      	b.n	800ae14 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800addc:	4b16      	ldr	r3, [pc, #88]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800adde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade2:	4a15      	ldr	r2, [pc, #84]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adec:	f7fd f816 	bl	8007e1c <HAL_GetTick>
 800adf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800adf2:	e008      	b.n	800ae06 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf4:	f7fd f812 	bl	8007e1c <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e1d4      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ae08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1ef      	bne.n	800adf4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80ab 	beq.w	800af78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae22:	2300      	movs	r3, #0
 800ae24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <HAL_RCC_OscConfig+0x2ac>)
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <HAL_RCC_OscConfig+0x2b4>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e005      	b.n	800ae42 <HAL_RCC_OscConfig+0x2b6>
 800ae36:	bf00      	nop
 800ae38:	40021000 	.word	0x40021000
 800ae3c:	20000cac 	.word	0x20000cac
 800ae40:	2300      	movs	r3, #0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00d      	beq.n	800ae62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae46:	4baf      	ldr	r3, [pc, #700]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800ae48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4a:	4aae      	ldr	r2, [pc, #696]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800ae4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae50:	6593      	str	r3, [r2, #88]	; 0x58
 800ae52:	4bac      	ldr	r3, [pc, #688]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800ae54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae62:	4ba9      	ldr	r3, [pc, #676]	; (800b108 <HAL_RCC_OscConfig+0x57c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d118      	bne.n	800aea0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae6e:	4ba6      	ldr	r3, [pc, #664]	; (800b108 <HAL_RCC_OscConfig+0x57c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4aa5      	ldr	r2, [pc, #660]	; (800b108 <HAL_RCC_OscConfig+0x57c>)
 800ae74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae7a:	f7fc ffcf 	bl	8007e1c <HAL_GetTick>
 800ae7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae80:	e008      	b.n	800ae94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae82:	f7fc ffcb 	bl	8007e1c <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d901      	bls.n	800ae94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e18d      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae94:	4b9c      	ldr	r3, [pc, #624]	; (800b108 <HAL_RCC_OscConfig+0x57c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0f0      	beq.n	800ae82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d108      	bne.n	800aeba <HAL_RCC_OscConfig+0x32e>
 800aea8:	4b96      	ldr	r3, [pc, #600]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aeaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeae:	4a95      	ldr	r2, [pc, #596]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aeb0:	f043 0301 	orr.w	r3, r3, #1
 800aeb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aeb8:	e024      	b.n	800af04 <HAL_RCC_OscConfig+0x378>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d110      	bne.n	800aee4 <HAL_RCC_OscConfig+0x358>
 800aec2:	4b90      	ldr	r3, [pc, #576]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec8:	4a8e      	ldr	r2, [pc, #568]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aeca:	f043 0304 	orr.w	r3, r3, #4
 800aece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aed2:	4b8c      	ldr	r3, [pc, #560]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed8:	4a8a      	ldr	r2, [pc, #552]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aee2:	e00f      	b.n	800af04 <HAL_RCC_OscConfig+0x378>
 800aee4:	4b87      	ldr	r3, [pc, #540]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeea:	4a86      	ldr	r2, [pc, #536]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aeec:	f023 0301 	bic.w	r3, r3, #1
 800aef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aef4:	4b83      	ldr	r3, [pc, #524]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefa:	4a82      	ldr	r2, [pc, #520]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aefc:	f023 0304 	bic.w	r3, r3, #4
 800af00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d016      	beq.n	800af3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af0c:	f7fc ff86 	bl	8007e1c <HAL_GetTick>
 800af10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af12:	e00a      	b.n	800af2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af14:	f7fc ff82 	bl	8007e1c <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af22:	4293      	cmp	r3, r2
 800af24:	d901      	bls.n	800af2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e142      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af2a:	4b76      	ldr	r3, [pc, #472]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d0ed      	beq.n	800af14 <HAL_RCC_OscConfig+0x388>
 800af38:	e015      	b.n	800af66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af3a:	f7fc ff6f 	bl	8007e1c <HAL_GetTick>
 800af3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af40:	e00a      	b.n	800af58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af42:	f7fc ff6b 	bl	8007e1c <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af50:	4293      	cmp	r3, r2
 800af52:	d901      	bls.n	800af58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e12b      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af58:	4b6a      	ldr	r3, [pc, #424]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1ed      	bne.n	800af42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800af66:	7ffb      	ldrb	r3, [r7, #31]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d105      	bne.n	800af78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af6c:	4b65      	ldr	r3, [pc, #404]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af70:	4a64      	ldr	r2, [pc, #400]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d03c      	beq.n	800affe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d01c      	beq.n	800afc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af8c:	4b5d      	ldr	r3, [pc, #372]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af92:	4a5c      	ldr	r2, [pc, #368]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800af94:	f043 0301 	orr.w	r3, r3, #1
 800af98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9c:	f7fc ff3e 	bl	8007e1c <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afa4:	f7fc ff3a 	bl	8007e1c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e0fc      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afb6:	4b53      	ldr	r3, [pc, #332]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800afb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0ef      	beq.n	800afa4 <HAL_RCC_OscConfig+0x418>
 800afc4:	e01b      	b.n	800affe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800afc6:	4b4f      	ldr	r3, [pc, #316]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800afc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afcc:	4a4d      	ldr	r2, [pc, #308]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800afce:	f023 0301 	bic.w	r3, r3, #1
 800afd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd6:	f7fc ff21 	bl	8007e1c <HAL_GetTick>
 800afda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800afdc:	e008      	b.n	800aff0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afde:	f7fc ff1d 	bl	8007e1c <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e0df      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aff0:	4b44      	ldr	r3, [pc, #272]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800aff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff6:	f003 0302 	and.w	r3, r3, #2
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1ef      	bne.n	800afde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 80d3 	beq.w	800b1ae <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b008:	4b3e      	ldr	r3, [pc, #248]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f003 030c 	and.w	r3, r3, #12
 800b010:	2b0c      	cmp	r3, #12
 800b012:	f000 808d 	beq.w	800b130 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d15a      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b01e:	4b39      	ldr	r3, [pc, #228]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a38      	ldr	r2, [pc, #224]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02a:	f7fc fef7 	bl	8007e1c <HAL_GetTick>
 800b02e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b030:	e008      	b.n	800b044 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b032:	f7fc fef3 	bl	8007e1c <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d901      	bls.n	800b044 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e0b5      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b044:	4b2f      	ldr	r3, [pc, #188]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f0      	bne.n	800b032 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b050:	4b2c      	ldr	r3, [pc, #176]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b052:	68da      	ldr	r2, [r3, #12]
 800b054:	4b2d      	ldr	r3, [pc, #180]	; (800b10c <HAL_RCC_OscConfig+0x580>)
 800b056:	4013      	ands	r3, r2
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	6a11      	ldr	r1, [r2, #32]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b060:	3a01      	subs	r2, #1
 800b062:	0112      	lsls	r2, r2, #4
 800b064:	4311      	orrs	r1, r2
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b06a:	0212      	lsls	r2, r2, #8
 800b06c:	4311      	orrs	r1, r2
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b072:	0852      	lsrs	r2, r2, #1
 800b074:	3a01      	subs	r2, #1
 800b076:	0552      	lsls	r2, r2, #21
 800b078:	4311      	orrs	r1, r2
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b07e:	0852      	lsrs	r2, r2, #1
 800b080:	3a01      	subs	r2, #1
 800b082:	0652      	lsls	r2, r2, #25
 800b084:	4311      	orrs	r1, r2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b08a:	06d2      	lsls	r2, r2, #27
 800b08c:	430a      	orrs	r2, r1
 800b08e:	491d      	ldr	r1, [pc, #116]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b090:	4313      	orrs	r3, r2
 800b092:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b094:	4b1b      	ldr	r3, [pc, #108]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b09a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b09e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0a0:	4b18      	ldr	r3, [pc, #96]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	4a17      	ldr	r2, [pc, #92]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ac:	f7fc feb6 	bl	8007e1c <HAL_GetTick>
 800b0b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0b2:	e008      	b.n	800b0c6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b4:	f7fc feb2 	bl	8007e1c <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d901      	bls.n	800b0c6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e074      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0c6:	4b0f      	ldr	r3, [pc, #60]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f0      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x528>
 800b0d2:	e06c      	b.n	800b1ae <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0d4:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a0a      	ldr	r2, [pc, #40]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b0e0:	4b08      	ldr	r3, [pc, #32]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	4a07      	ldr	r2, [pc, #28]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0e6:	f023 0303 	bic.w	r3, r3, #3
 800b0ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b0ec:	4b05      	ldr	r3, [pc, #20]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	4a04      	ldr	r2, [pc, #16]	; (800b104 <HAL_RCC_OscConfig+0x578>)
 800b0f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fc:	f7fc fe8e 	bl	8007e1c <HAL_GetTick>
 800b100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b102:	e00e      	b.n	800b122 <HAL_RCC_OscConfig+0x596>
 800b104:	40021000 	.word	0x40021000
 800b108:	40007000 	.word	0x40007000
 800b10c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b110:	f7fc fe84 	bl	8007e1c <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d901      	bls.n	800b122 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e046      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b122:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <HAL_RCC_OscConfig+0x62c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f0      	bne.n	800b110 <HAL_RCC_OscConfig+0x584>
 800b12e:	e03e      	b.n	800b1ae <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d101      	bne.n	800b13c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e039      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b13c:	4b1e      	ldr	r3, [pc, #120]	; (800b1b8 <HAL_RCC_OscConfig+0x62c>)
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f003 0203 	and.w	r2, r3, #3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d12c      	bne.n	800b1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	3b01      	subs	r3, #1
 800b15c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b15e:	429a      	cmp	r2, r3
 800b160:	d123      	bne.n	800b1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b16e:	429a      	cmp	r2, r3
 800b170:	d11b      	bne.n	800b1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b17e:	429a      	cmp	r2, r3
 800b180:	d113      	bne.n	800b1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	085b      	lsrs	r3, r3, #1
 800b18e:	3b01      	subs	r3, #1
 800b190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b192:	429a      	cmp	r2, r3
 800b194:	d109      	bne.n	800b1aa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	085b      	lsrs	r3, r3, #1
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d001      	beq.n	800b1ae <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e000      	b.n	800b1b0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3720      	adds	r7, #32
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	40021000 	.word	0x40021000

0800b1bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e11e      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1d4:	4b91      	ldr	r3, [pc, #580]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 030f 	and.w	r3, r3, #15
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d910      	bls.n	800b204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1e2:	4b8e      	ldr	r3, [pc, #568]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f023 020f 	bic.w	r2, r3, #15
 800b1ea:	498c      	ldr	r1, [pc, #560]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1f2:	4b8a      	ldr	r3, [pc, #552]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d001      	beq.n	800b204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e106      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0301 	and.w	r3, r3, #1
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d073      	beq.n	800b2f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2b03      	cmp	r3, #3
 800b216:	d129      	bne.n	800b26c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b218:	4b81      	ldr	r3, [pc, #516]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e0f4      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b228:	f000 f972 	bl	800b510 <RCC_GetSysClockFreqFromPLLSource>
 800b22c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	4a7c      	ldr	r2, [pc, #496]	; (800b424 <HAL_RCC_ClockConfig+0x268>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d93f      	bls.n	800b2b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b236:	4b7a      	ldr	r3, [pc, #488]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d009      	beq.n	800b256 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d033      	beq.n	800b2b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b252:	2b00      	cmp	r3, #0
 800b254:	d12f      	bne.n	800b2b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b256:	4b72      	ldr	r3, [pc, #456]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b25e:	4a70      	ldr	r2, [pc, #448]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b264:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b266:	2380      	movs	r3, #128	; 0x80
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e024      	b.n	800b2b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d107      	bne.n	800b284 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b274:	4b6a      	ldr	r3, [pc, #424]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e0c6      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b284:	4b66      	ldr	r3, [pc, #408]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	e0be      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b294:	f000 f8ce 	bl	800b434 <HAL_RCC_GetSysClockFreq>
 800b298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	4a61      	ldr	r2, [pc, #388]	; (800b424 <HAL_RCC_ClockConfig+0x268>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d909      	bls.n	800b2b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b2a2:	4b5f      	ldr	r3, [pc, #380]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2aa:	4a5d      	ldr	r2, [pc, #372]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b2b2:	2380      	movs	r3, #128	; 0x80
 800b2b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2b6:	4b5a      	ldr	r3, [pc, #360]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f023 0203 	bic.w	r2, r3, #3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4957      	ldr	r1, [pc, #348]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2c8:	f7fc fda8 	bl	8007e1c <HAL_GetTick>
 800b2cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ce:	e00a      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2d0:	f7fc fda4 	bl	8007e1c <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e095      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2e6:	4b4e      	ldr	r3, [pc, #312]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f003 020c 	and.w	r2, r3, #12
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d1eb      	bne.n	800b2d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d023      	beq.n	800b34c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b310:	4b43      	ldr	r3, [pc, #268]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	4a42      	ldr	r2, [pc, #264]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b31a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	2b00      	cmp	r3, #0
 800b326:	d007      	beq.n	800b338 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b328:	4b3d      	ldr	r3, [pc, #244]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b330:	4a3b      	ldr	r2, [pc, #236]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b338:	4b39      	ldr	r3, [pc, #228]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	4936      	ldr	r1, [pc, #216]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b346:	4313      	orrs	r3, r2
 800b348:	608b      	str	r3, [r1, #8]
 800b34a:	e008      	b.n	800b35e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b80      	cmp	r3, #128	; 0x80
 800b350:	d105      	bne.n	800b35e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b352:	4b33      	ldr	r3, [pc, #204]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	4a32      	ldr	r2, [pc, #200]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b35c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b35e:	4b2f      	ldr	r3, [pc, #188]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d21d      	bcs.n	800b3a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b36c:	4b2b      	ldr	r3, [pc, #172]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f023 020f 	bic.w	r2, r3, #15
 800b374:	4929      	ldr	r1, [pc, #164]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	4313      	orrs	r3, r2
 800b37a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b37c:	f7fc fd4e 	bl	8007e1c <HAL_GetTick>
 800b380:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b382:	e00a      	b.n	800b39a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b384:	f7fc fd4a 	bl	8007e1c <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b392:	4293      	cmp	r3, r2
 800b394:	d901      	bls.n	800b39a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e03b      	b.n	800b412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b39a:	4b20      	ldr	r3, [pc, #128]	; (800b41c <HAL_RCC_ClockConfig+0x260>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 030f 	and.w	r3, r3, #15
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d1ed      	bne.n	800b384 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d008      	beq.n	800b3c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3b4:	4b1a      	ldr	r3, [pc, #104]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4917      	ldr	r1, [pc, #92]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f003 0308 	and.w	r3, r3, #8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d009      	beq.n	800b3e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3d2:	4b13      	ldr	r3, [pc, #76]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	490f      	ldr	r1, [pc, #60]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3e6:	f000 f825 	bl	800b434 <HAL_RCC_GetSysClockFreq>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <HAL_RCC_ClockConfig+0x264>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	091b      	lsrs	r3, r3, #4
 800b3f2:	f003 030f 	and.w	r3, r3, #15
 800b3f6:	4a0c      	ldr	r2, [pc, #48]	; (800b428 <HAL_RCC_ClockConfig+0x26c>)
 800b3f8:	5cd3      	ldrb	r3, [r2, r3]
 800b3fa:	f003 031f 	and.w	r3, r3, #31
 800b3fe:	fa21 f303 	lsr.w	r3, r1, r3
 800b402:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <HAL_RCC_ClockConfig+0x270>)
 800b404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b406:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <HAL_RCC_ClockConfig+0x274>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fc fcba 	bl	8007d84 <HAL_InitTick>
 800b410:	4603      	mov	r3, r0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	40022000 	.word	0x40022000
 800b420:	40021000 	.word	0x40021000
 800b424:	04c4b400 	.word	0x04c4b400
 800b428:	08013a44 	.word	0x08013a44
 800b42c:	20000ca8 	.word	0x20000ca8
 800b430:	20000cac 	.word	0x20000cac

0800b434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b434:	b480      	push	{r7}
 800b436:	b087      	sub	sp, #28
 800b438:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b43a:	4b2c      	ldr	r3, [pc, #176]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f003 030c 	and.w	r3, r3, #12
 800b442:	2b04      	cmp	r3, #4
 800b444:	d102      	bne.n	800b44c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b446:	4b2a      	ldr	r3, [pc, #168]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b448:	613b      	str	r3, [r7, #16]
 800b44a:	e047      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b44c:	4b27      	ldr	r3, [pc, #156]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f003 030c 	and.w	r3, r3, #12
 800b454:	2b08      	cmp	r3, #8
 800b456:	d102      	bne.n	800b45e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b458:	4b26      	ldr	r3, [pc, #152]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	e03e      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b45e:	4b23      	ldr	r3, [pc, #140]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f003 030c 	and.w	r3, r3, #12
 800b466:	2b0c      	cmp	r3, #12
 800b468:	d136      	bne.n	800b4d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b46a:	4b20      	ldr	r3, [pc, #128]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b474:	4b1d      	ldr	r3, [pc, #116]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	091b      	lsrs	r3, r3, #4
 800b47a:	f003 030f 	and.w	r3, r3, #15
 800b47e:	3301      	adds	r3, #1
 800b480:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d10c      	bne.n	800b4a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b488:	4a1a      	ldr	r2, [pc, #104]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b490:	4a16      	ldr	r2, [pc, #88]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b492:	68d2      	ldr	r2, [r2, #12]
 800b494:	0a12      	lsrs	r2, r2, #8
 800b496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b49a:	fb02 f303 	mul.w	r3, r2, r3
 800b49e:	617b      	str	r3, [r7, #20]
      break;
 800b4a0:	e00c      	b.n	800b4bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b4a2:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4aa:	4a10      	ldr	r2, [pc, #64]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4ac:	68d2      	ldr	r2, [r2, #12]
 800b4ae:	0a12      	lsrs	r2, r2, #8
 800b4b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4b4:	fb02 f303 	mul.w	r3, r2, r3
 800b4b8:	617b      	str	r3, [r7, #20]
      break;
 800b4ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b4bc:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	0e5b      	lsrs	r3, r3, #25
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d4:	613b      	str	r3, [r7, #16]
 800b4d6:	e001      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b4dc:	693b      	ldr	r3, [r7, #16]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	40021000 	.word	0x40021000
 800b4f0:	00f42400 	.word	0x00f42400
 800b4f4:	007a1200 	.word	0x007a1200

0800b4f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4fc:	4b03      	ldr	r3, [pc, #12]	; (800b50c <HAL_RCC_GetHCLKFreq+0x14>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
}
 800b500:	4618      	mov	r0, r3
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	20000ca8 	.word	0x20000ca8

0800b510 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b516:	4b1e      	ldr	r3, [pc, #120]	; (800b590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b520:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	091b      	lsrs	r3, r3, #4
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	3301      	adds	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b03      	cmp	r3, #3
 800b532:	d10c      	bne.n	800b54e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b534:	4a17      	ldr	r2, [pc, #92]	; (800b594 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53c:	4a14      	ldr	r2, [pc, #80]	; (800b590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b53e:	68d2      	ldr	r2, [r2, #12]
 800b540:	0a12      	lsrs	r2, r2, #8
 800b542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	617b      	str	r3, [r7, #20]
    break;
 800b54c:	e00c      	b.n	800b568 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b54e:	4a12      	ldr	r2, [pc, #72]	; (800b598 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	fbb2 f3f3 	udiv	r3, r2, r3
 800b556:	4a0e      	ldr	r2, [pc, #56]	; (800b590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b558:	68d2      	ldr	r2, [r2, #12]
 800b55a:	0a12      	lsrs	r2, r2, #8
 800b55c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b560:	fb02 f303 	mul.w	r3, r2, r3
 800b564:	617b      	str	r3, [r7, #20]
    break;
 800b566:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b568:	4b09      	ldr	r3, [pc, #36]	; (800b590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	0e5b      	lsrs	r3, r3, #25
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	3301      	adds	r3, #1
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b580:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b582:	687b      	ldr	r3, [r7, #4]
}
 800b584:	4618      	mov	r0, r3
 800b586:	371c      	adds	r7, #28
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	40021000 	.word	0x40021000
 800b594:	007a1200 	.word	0x007a1200
 800b598:	00f42400 	.word	0x00f42400

0800b59c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 8098 	beq.w	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5be:	4b43      	ldr	r3, [pc, #268]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10d      	bne.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5ca:	4b40      	ldr	r3, [pc, #256]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ce:	4a3f      	ldr	r2, [pc, #252]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5d6:	4b3d      	ldr	r3, [pc, #244]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5de:	60bb      	str	r3, [r7, #8]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5e6:	4b3a      	ldr	r3, [pc, #232]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a39      	ldr	r2, [pc, #228]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b5ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5f2:	f7fc fc13 	bl	8007e1c <HAL_GetTick>
 800b5f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5f8:	e009      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5fa:	f7fc fc0f 	bl	8007e1c <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d902      	bls.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	74fb      	strb	r3, [r7, #19]
        break;
 800b60c:	e005      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b60e:	4b30      	ldr	r3, [pc, #192]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0ef      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b61a:	7cfb      	ldrb	r3, [r7, #19]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d159      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b62a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d01e      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d019      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b63c:	4b23      	ldr	r3, [pc, #140]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b648:	4b20      	ldr	r3, [pc, #128]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64e:	4a1f      	ldr	r2, [pc, #124]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b658:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65e:	4a1b      	ldr	r2, [pc, #108]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b668:	4a18      	ldr	r2, [pc, #96]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f003 0301 	and.w	r3, r3, #1
 800b676:	2b00      	cmp	r3, #0
 800b678:	d016      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67a:	f7fc fbcf 	bl	8007e1c <HAL_GetTick>
 800b67e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b680:	e00b      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b682:	f7fc fbcb 	bl	8007e1c <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	4293      	cmp	r3, r2
 800b692:	d902      	bls.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	74fb      	strb	r3, [r7, #19]
            break;
 800b698:	e006      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b69a:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a0:	f003 0302 	and.w	r3, r3, #2
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0ec      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b6a8:	7cfb      	ldrb	r3, [r7, #19]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6ae:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6bc:	4903      	ldr	r1, [pc, #12]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b6c4:	e008      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6c6:	7cfb      	ldrb	r3, [r7, #19]
 800b6c8:	74bb      	strb	r3, [r7, #18]
 800b6ca:	e005      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b6cc:	40021000 	.word	0x40021000
 800b6d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	7cfb      	ldrb	r3, [r7, #19]
 800b6d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b6d8:	7c7b      	ldrb	r3, [r7, #17]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d105      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6de:	4baf      	ldr	r3, [pc, #700]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	4aae      	ldr	r2, [pc, #696]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6f6:	4ba9      	ldr	r3, [pc, #676]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fc:	f023 0203 	bic.w	r2, r3, #3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	49a5      	ldr	r1, [pc, #660]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b706:	4313      	orrs	r3, r2
 800b708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0302 	and.w	r3, r3, #2
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00a      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b718:	4ba0      	ldr	r3, [pc, #640]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71e:	f023 020c 	bic.w	r2, r3, #12
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	499d      	ldr	r1, [pc, #628]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b728:	4313      	orrs	r3, r2
 800b72a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b73a:	4b98      	ldr	r3, [pc, #608]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b740:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	4994      	ldr	r1, [pc, #592]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0308 	and.w	r3, r3, #8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00a      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b75c:	4b8f      	ldr	r3, [pc, #572]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b762:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	498c      	ldr	r1, [pc, #560]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00a      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b77e:	4b87      	ldr	r3, [pc, #540]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	4983      	ldr	r1, [pc, #524]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b78e:	4313      	orrs	r3, r2
 800b790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0320 	and.w	r3, r3, #32
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7a0:	4b7e      	ldr	r3, [pc, #504]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	497b      	ldr	r1, [pc, #492]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7c2:	4b76      	ldr	r3, [pc, #472]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	4972      	ldr	r1, [pc, #456]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b7e4:	4b6d      	ldr	r3, [pc, #436]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	496a      	ldr	r1, [pc, #424]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b806:	4b65      	ldr	r3, [pc, #404]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b80c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	4961      	ldr	r1, [pc, #388]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b828:	4b5c      	ldr	r3, [pc, #368]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b82a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b82e:	f023 0203 	bic.w	r2, r3, #3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	4959      	ldr	r1, [pc, #356]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b84a:	4b54      	ldr	r3, [pc, #336]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	4950      	ldr	r1, [pc, #320]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d015      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b86c:	4b4b      	ldr	r3, [pc, #300]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	4948      	ldr	r1, [pc, #288]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88a:	d105      	bne.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b88c:	4b43      	ldr	r3, [pc, #268]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	4a42      	ldr	r2, [pc, #264]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d015      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b8a4:	4b3d      	ldr	r3, [pc, #244]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b2:	493a      	ldr	r1, [pc, #232]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8c2:	d105      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8c4:	4b35      	ldr	r3, [pc, #212]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a34      	ldr	r2, [pc, #208]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d015      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b8dc:	4b2f      	ldr	r3, [pc, #188]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	492c      	ldr	r1, [pc, #176]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8fa:	d105      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8fc:	4b27      	ldr	r3, [pc, #156]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	4a26      	ldr	r2, [pc, #152]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b906:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d015      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b914:	4b21      	ldr	r3, [pc, #132]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	491e      	ldr	r1, [pc, #120]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b924:	4313      	orrs	r3, r2
 800b926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b932:	d105      	bne.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b934:	4b19      	ldr	r3, [pc, #100]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4a18      	ldr	r2, [pc, #96]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b93e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d015      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b94c:	4b13      	ldr	r3, [pc, #76]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95a:	4910      	ldr	r1, [pc, #64]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b96a:	d105      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b96c:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b976:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d018      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b984:	4b05      	ldr	r3, [pc, #20]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b992:	4902      	ldr	r1, [pc, #8]	; (800b99c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b994:	4313      	orrs	r3, r2
 800b996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b99a:	e001      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b99c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a8:	d105      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b9aa:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	4a20      	ldr	r2, [pc, #128]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9b4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d015      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b9c2:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d0:	4917      	ldr	r1, [pc, #92]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e0:	d105      	bne.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b9e2:	4b13      	ldr	r3, [pc, #76]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4a12      	ldr	r2, [pc, #72]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ec:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d015      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b9fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba08:	4909      	ldr	r1, [pc, #36]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba18:	d105      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba1a:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4a04      	ldr	r2, [pc, #16]	; (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba24:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ba26:	7cbb      	ldrb	r3, [r7, #18]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	40021000 	.word	0x40021000

0800ba34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e084      	b.n	800bb50 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d106      	bne.n	800ba66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7fb fc23 	bl	80072ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba86:	d902      	bls.n	800ba8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	e002      	b.n	800ba94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ba8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ba9c:	d007      	beq.n	800baae <HAL_SPI_Init+0x7a>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800baa6:	d002      	beq.n	800baae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800babe:	d903      	bls.n	800bac8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30
 800bac6:	e002      	b.n	800bace <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	431a      	orrs	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	431a      	orrs	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baec:	431a      	orrs	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	431a      	orrs	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	ea42 0103 	orr.w	r1, r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	0c1b      	lsrs	r3, r3, #16
 800bb0e:	f003 0204 	and.w	r2, r3, #4
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	ea42 0103 	orr.w	r1, r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	69da      	ldr	r2, [r3, #28]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e049      	b.n	800bbfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7fc f802 	bl	8007b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2202      	movs	r2, #2
 800bb88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4619      	mov	r1, r3
 800bb96:	4610      	mov	r0, r2
 800bb98:	f000 fe5c 	bl	800c854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d001      	beq.n	800bc20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e019      	b.n	800bc54 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	4b0c      	ldr	r3, [pc, #48]	; (800bc60 <HAL_TIM_Base_Start+0x58>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b06      	cmp	r3, #6
 800bc38:	d00b      	beq.n	800bc52 <HAL_TIM_Base_Start+0x4a>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc40:	d007      	beq.n	800bc52 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f042 0201 	orr.w	r2, r2, #1
 800bc50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	00010007 	.word	0x00010007

0800bc64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d001      	beq.n	800bc7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e021      	b.n	800bcc0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0201 	orr.w	r2, r2, #1
 800bc92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	689a      	ldr	r2, [r3, #8]
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <HAL_TIM_Base_Start_IT+0x68>)
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b06      	cmp	r3, #6
 800bca4:	d00b      	beq.n	800bcbe <HAL_TIM_Base_Start_IT+0x5a>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcac:	d007      	beq.n	800bcbe <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0201 	orr.w	r2, r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	00010007 	.word	0x00010007

0800bcd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 0201 	bic.w	r2, r2, #1
 800bce6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6a1a      	ldr	r2, [r3, #32]
 800bcee:	f241 1311 	movw	r3, #4369	; 0x1111
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10f      	bne.n	800bd18 <HAL_TIM_Base_Stop_IT+0x48>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6a1a      	ldr	r2, [r3, #32]
 800bcfe:	f244 4344 	movw	r3, #17476	; 0x4444
 800bd02:	4013      	ands	r3, r2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d107      	bne.n	800bd18 <HAL_TIM_Base_Stop_IT+0x48>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 0201 	bic.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e049      	b.n	800bdd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f841 	bl	800bddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	f000 fd71 	bl	800c854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d109      	bne.n	800be14 <HAL_TIM_PWM_Start+0x24>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b01      	cmp	r3, #1
 800be0a:	bf14      	ite	ne
 800be0c:	2301      	movne	r3, #1
 800be0e:	2300      	moveq	r3, #0
 800be10:	b2db      	uxtb	r3, r3
 800be12:	e03c      	b.n	800be8e <HAL_TIM_PWM_Start+0x9e>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b04      	cmp	r3, #4
 800be18:	d109      	bne.n	800be2e <HAL_TIM_PWM_Start+0x3e>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b01      	cmp	r3, #1
 800be24:	bf14      	ite	ne
 800be26:	2301      	movne	r3, #1
 800be28:	2300      	moveq	r3, #0
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	e02f      	b.n	800be8e <HAL_TIM_PWM_Start+0x9e>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b08      	cmp	r3, #8
 800be32:	d109      	bne.n	800be48 <HAL_TIM_PWM_Start+0x58>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	bf14      	ite	ne
 800be40:	2301      	movne	r3, #1
 800be42:	2300      	moveq	r3, #0
 800be44:	b2db      	uxtb	r3, r3
 800be46:	e022      	b.n	800be8e <HAL_TIM_PWM_Start+0x9e>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b0c      	cmp	r3, #12
 800be4c:	d109      	bne.n	800be62 <HAL_TIM_PWM_Start+0x72>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b01      	cmp	r3, #1
 800be58:	bf14      	ite	ne
 800be5a:	2301      	movne	r3, #1
 800be5c:	2300      	moveq	r3, #0
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	e015      	b.n	800be8e <HAL_TIM_PWM_Start+0x9e>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b10      	cmp	r3, #16
 800be66:	d109      	bne.n	800be7c <HAL_TIM_PWM_Start+0x8c>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b01      	cmp	r3, #1
 800be72:	bf14      	ite	ne
 800be74:	2301      	movne	r3, #1
 800be76:	2300      	moveq	r3, #0
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	e008      	b.n	800be8e <HAL_TIM_PWM_Start+0x9e>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b01      	cmp	r3, #1
 800be86:	bf14      	ite	ne
 800be88:	2301      	movne	r3, #1
 800be8a:	2300      	moveq	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e073      	b.n	800bf7e <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <HAL_TIM_PWM_Start+0xb6>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea4:	e023      	b.n	800beee <HAL_TIM_PWM_Start+0xfe>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d104      	bne.n	800beb6 <HAL_TIM_PWM_Start+0xc6>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beb4:	e01b      	b.n	800beee <HAL_TIM_PWM_Start+0xfe>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d104      	bne.n	800bec6 <HAL_TIM_PWM_Start+0xd6>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bec4:	e013      	b.n	800beee <HAL_TIM_PWM_Start+0xfe>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b0c      	cmp	r3, #12
 800beca:	d104      	bne.n	800bed6 <HAL_TIM_PWM_Start+0xe6>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bed4:	e00b      	b.n	800beee <HAL_TIM_PWM_Start+0xfe>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b10      	cmp	r3, #16
 800beda:	d104      	bne.n	800bee6 <HAL_TIM_PWM_Start+0xf6>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2202      	movs	r2, #2
 800bee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bee4:	e003      	b.n	800beee <HAL_TIM_PWM_Start+0xfe>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2202      	movs	r2, #2
 800beea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2201      	movs	r2, #1
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f001 f91a 	bl	800d130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a21      	ldr	r2, [pc, #132]	; (800bf88 <HAL_TIM_PWM_Start+0x198>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d018      	beq.n	800bf38 <HAL_TIM_PWM_Start+0x148>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a20      	ldr	r2, [pc, #128]	; (800bf8c <HAL_TIM_PWM_Start+0x19c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d013      	beq.n	800bf38 <HAL_TIM_PWM_Start+0x148>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a1e      	ldr	r2, [pc, #120]	; (800bf90 <HAL_TIM_PWM_Start+0x1a0>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00e      	beq.n	800bf38 <HAL_TIM_PWM_Start+0x148>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a1d      	ldr	r2, [pc, #116]	; (800bf94 <HAL_TIM_PWM_Start+0x1a4>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d009      	beq.n	800bf38 <HAL_TIM_PWM_Start+0x148>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a1b      	ldr	r2, [pc, #108]	; (800bf98 <HAL_TIM_PWM_Start+0x1a8>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d004      	beq.n	800bf38 <HAL_TIM_PWM_Start+0x148>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a1a      	ldr	r2, [pc, #104]	; (800bf9c <HAL_TIM_PWM_Start+0x1ac>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d101      	bne.n	800bf3c <HAL_TIM_PWM_Start+0x14c>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <HAL_TIM_PWM_Start+0x14e>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689a      	ldr	r2, [r3, #8]
 800bf58:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <HAL_TIM_PWM_Start+0x1b0>)
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	d00b      	beq.n	800bf7c <HAL_TIM_PWM_Start+0x18c>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf6a:	d007      	beq.n	800bf7c <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f042 0201 	orr.w	r2, r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	40012c00 	.word	0x40012c00
 800bf8c:	40013400 	.word	0x40013400
 800bf90:	40014000 	.word	0x40014000
 800bf94:	40014400 	.word	0x40014400
 800bf98:	40014800 	.word	0x40014800
 800bf9c:	40015000 	.word	0x40015000
 800bfa0:	00010007 	.word	0x00010007

0800bfa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e097      	b.n	800c0e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d106      	bne.n	800bfd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7fb fd8f 	bl	8007af0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800bfe8:	f023 0307 	bic.w	r3, r3, #7
 800bfec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4619      	mov	r1, r3
 800bff8:	4610      	mov	r0, r2
 800bffa:	f000 fc2b 	bl	800c854 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c026:	f023 0303 	bic.w	r3, r3, #3
 800c02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	4313      	orrs	r3, r2
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c044:	f023 030c 	bic.w	r3, r3, #12
 800c048:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c054:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	021b      	lsls	r3, r3, #8
 800c060:	4313      	orrs	r3, r2
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	4313      	orrs	r3, r2
 800c066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	011a      	lsls	r2, r3, #4
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	031b      	lsls	r3, r3, #12
 800c074:	4313      	orrs	r3, r2
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	4313      	orrs	r3, r2
 800c07a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c082:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c08a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	695b      	ldr	r3, [r3, #20]
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	4313      	orrs	r3, r2
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b02      	cmp	r3, #2
 800c104:	d122      	bne.n	800c14c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f003 0302 	and.w	r3, r3, #2
 800c110:	2b02      	cmp	r3, #2
 800c112:	d11b      	bne.n	800c14c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f06f 0202 	mvn.w	r2, #2
 800c11c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fb70 	bl	800c818 <HAL_TIM_IC_CaptureCallback>
 800c138:	e005      	b.n	800c146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fb62 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fb73 	bl	800c82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d122      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b04      	cmp	r3, #4
 800c166:	d11b      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f06f 0204 	mvn.w	r2, #4
 800c170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2202      	movs	r2, #2
 800c176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fb46 	bl	800c818 <HAL_TIM_IC_CaptureCallback>
 800c18c:	e005      	b.n	800c19a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fb38 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb49 	bl	800c82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	f003 0308 	and.w	r3, r3, #8
 800c1aa:	2b08      	cmp	r3, #8
 800c1ac:	d122      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f003 0308 	and.w	r3, r3, #8
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d11b      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f06f 0208 	mvn.w	r2, #8
 800c1c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fb1c 	bl	800c818 <HAL_TIM_IC_CaptureCallback>
 800c1e0:	e005      	b.n	800c1ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fb0e 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fb1f 	bl	800c82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f003 0310 	and.w	r3, r3, #16
 800c1fe:	2b10      	cmp	r3, #16
 800c200:	d122      	bne.n	800c248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f003 0310 	and.w	r3, r3, #16
 800c20c:	2b10      	cmp	r3, #16
 800c20e:	d11b      	bne.n	800c248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f06f 0210 	mvn.w	r2, #16
 800c218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2208      	movs	r2, #8
 800c21e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 faf2 	bl	800c818 <HAL_TIM_IC_CaptureCallback>
 800c234:	e005      	b.n	800c242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fae4 	bl	800c804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 faf5 	bl	800c82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b01      	cmp	r3, #1
 800c254:	d10e      	bne.n	800c274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b01      	cmp	r3, #1
 800c262:	d107      	bne.n	800c274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0201 	mvn.w	r2, #1
 800c26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fabe 	bl	800c7f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d10e      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28c:	2b80      	cmp	r3, #128	; 0x80
 800c28e:	d107      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 f8c0 	bl	800d420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ae:	d10e      	bne.n	800c2ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ba:	2b80      	cmp	r3, #128	; 0x80
 800c2bc:	d107      	bne.n	800c2ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c2c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 f8b3 	bl	800d434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d8:	2b40      	cmp	r3, #64	; 0x40
 800c2da:	d10e      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e6:	2b40      	cmp	r3, #64	; 0x40
 800c2e8:	d107      	bne.n	800c2fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 faa3 	bl	800c840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b20      	cmp	r3, #32
 800c306:	d10e      	bne.n	800c326 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b20      	cmp	r3, #32
 800c314:	d107      	bne.n	800c326 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f06f 0220 	mvn.w	r2, #32
 800c31e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 f873 	bl	800d40c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c334:	d10f      	bne.n	800c356 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c344:	d107      	bne.n	800c356 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 f879 	bl	800d448 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c364:	d10f      	bne.n	800c386 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c374:	d107      	bne.n	800c386 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f001 f86b 	bl	800d45c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c394:	d10f      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a4:	d107      	bne.n	800c3b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f001 f85d 	bl	800d470 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3c4:	d10f      	bne.n	800c3e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3d4:	d107      	bne.n	800c3e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f001 f84f 	bl	800d484 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c406:	2302      	movs	r3, #2
 800c408:	e0fd      	b.n	800c606 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b14      	cmp	r3, #20
 800c416:	f200 80f0 	bhi.w	800c5fa <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c41a:	a201      	add	r2, pc, #4	; (adr r2, 800c420 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c420:	0800c475 	.word	0x0800c475
 800c424:	0800c5fb 	.word	0x0800c5fb
 800c428:	0800c5fb 	.word	0x0800c5fb
 800c42c:	0800c5fb 	.word	0x0800c5fb
 800c430:	0800c4b5 	.word	0x0800c4b5
 800c434:	0800c5fb 	.word	0x0800c5fb
 800c438:	0800c5fb 	.word	0x0800c5fb
 800c43c:	0800c5fb 	.word	0x0800c5fb
 800c440:	0800c4f7 	.word	0x0800c4f7
 800c444:	0800c5fb 	.word	0x0800c5fb
 800c448:	0800c5fb 	.word	0x0800c5fb
 800c44c:	0800c5fb 	.word	0x0800c5fb
 800c450:	0800c537 	.word	0x0800c537
 800c454:	0800c5fb 	.word	0x0800c5fb
 800c458:	0800c5fb 	.word	0x0800c5fb
 800c45c:	0800c5fb 	.word	0x0800c5fb
 800c460:	0800c579 	.word	0x0800c579
 800c464:	0800c5fb 	.word	0x0800c5fb
 800c468:	0800c5fb 	.word	0x0800c5fb
 800c46c:	0800c5fb 	.word	0x0800c5fb
 800c470:	0800c5b9 	.word	0x0800c5b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fa92 	bl	800c9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	699a      	ldr	r2, [r3, #24]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f042 0208 	orr.w	r2, r2, #8
 800c48e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	699a      	ldr	r2, [r3, #24]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0204 	bic.w	r2, r2, #4
 800c49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6999      	ldr	r1, [r3, #24]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	691a      	ldr	r2, [r3, #16]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	619a      	str	r2, [r3, #24]
      break;
 800c4b2:	e0a3      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fb0c 	bl	800cad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	699a      	ldr	r2, [r3, #24]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	699a      	ldr	r2, [r3, #24]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6999      	ldr	r1, [r3, #24]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	021a      	lsls	r2, r3, #8
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	619a      	str	r2, [r3, #24]
      break;
 800c4f4:	e082      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 fb7f 	bl	800cc00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69da      	ldr	r2, [r3, #28]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f042 0208 	orr.w	r2, r2, #8
 800c510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	69da      	ldr	r2, [r3, #28]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0204 	bic.w	r2, r2, #4
 800c520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	69d9      	ldr	r1, [r3, #28]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	691a      	ldr	r2, [r3, #16]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	61da      	str	r2, [r3, #28]
      break;
 800c534:	e062      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 fbf1 	bl	800cd24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	69da      	ldr	r2, [r3, #28]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	69da      	ldr	r2, [r3, #28]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	69d9      	ldr	r1, [r3, #28]
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	021a      	lsls	r2, r3, #8
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	61da      	str	r2, [r3, #28]
      break;
 800c576:	e041      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fc64 	bl	800ce4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f042 0208 	orr.w	r2, r2, #8
 800c592:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f022 0204 	bic.w	r2, r2, #4
 800c5a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	691a      	ldr	r2, [r3, #16]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c5b6:	e021      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68b9      	ldr	r1, [r7, #8]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fcae 	bl	800cf20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	021a      	lsls	r2, r3, #8
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c5f8:	e000      	b.n	800c5fc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c5fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop

0800c610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c620:	2b01      	cmp	r3, #1
 800c622:	d101      	bne.n	800c628 <HAL_TIM_ConfigClockSource+0x18>
 800c624:	2302      	movs	r3, #2
 800c626:	e0d2      	b.n	800c7ce <HAL_TIM_ConfigClockSource+0x1be>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c64a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c664:	f000 80a9 	beq.w	800c7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c66c:	d81a      	bhi.n	800c6a4 <HAL_TIM_ConfigClockSource+0x94>
 800c66e:	2b30      	cmp	r3, #48	; 0x30
 800c670:	f000 809a 	beq.w	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c674:	2b30      	cmp	r3, #48	; 0x30
 800c676:	d809      	bhi.n	800c68c <HAL_TIM_ConfigClockSource+0x7c>
 800c678:	2b10      	cmp	r3, #16
 800c67a:	f000 8095 	beq.w	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	f000 8092 	beq.w	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 808f 	beq.w	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c68a:	e097      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c68c:	2b50      	cmp	r3, #80	; 0x50
 800c68e:	d05b      	beq.n	800c748 <HAL_TIM_ConfigClockSource+0x138>
 800c690:	2b50      	cmp	r3, #80	; 0x50
 800c692:	d802      	bhi.n	800c69a <HAL_TIM_ConfigClockSource+0x8a>
 800c694:	2b40      	cmp	r3, #64	; 0x40
 800c696:	d077      	beq.n	800c788 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c698:	e090      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c69a:	2b60      	cmp	r3, #96	; 0x60
 800c69c:	d064      	beq.n	800c768 <HAL_TIM_ConfigClockSource+0x158>
 800c69e:	2b70      	cmp	r3, #112	; 0x70
 800c6a0:	d028      	beq.n	800c6f4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c6a2:	e08b      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6a4:	4a4c      	ldr	r2, [pc, #304]	; (800c7d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d07e      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c6aa:	4a4b      	ldr	r2, [pc, #300]	; (800c7d8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d810      	bhi.n	800c6d2 <HAL_TIM_ConfigClockSource+0xc2>
 800c6b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6b4:	d078      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c6b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ba:	d803      	bhi.n	800c6c4 <HAL_TIM_ConfigClockSource+0xb4>
 800c6bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6c0:	d02f      	beq.n	800c722 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c6c2:	e07b      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c6c8:	d06e      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c6ca:	4a44      	ldr	r2, [pc, #272]	; (800c7dc <HAL_TIM_ConfigClockSource+0x1cc>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d06b      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6d0:	e074      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6d2:	4a43      	ldr	r2, [pc, #268]	; (800c7e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d067      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c6d8:	4a41      	ldr	r2, [pc, #260]	; (800c7e0 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d803      	bhi.n	800c6e6 <HAL_TIM_ConfigClockSource+0xd6>
 800c6de:	4a41      	ldr	r2, [pc, #260]	; (800c7e4 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d061      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6e4:	e06a      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6e6:	4a40      	ldr	r2, [pc, #256]	; (800c7e8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d05d      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
 800c6ec:	4a3f      	ldr	r2, [pc, #252]	; (800c7ec <HAL_TIM_ConfigClockSource+0x1dc>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d05a      	beq.n	800c7a8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6f2:	e063      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	6899      	ldr	r1, [r3, #8]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	f000 fcf4 	bl	800d0f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c716:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	609a      	str	r2, [r3, #8]
      break;
 800c720:	e04c      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	6899      	ldr	r1, [r3, #8]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	f000 fcdd 	bl	800d0f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689a      	ldr	r2, [r3, #8]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c744:	609a      	str	r2, [r3, #8]
      break;
 800c746:	e039      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6818      	ldr	r0, [r3, #0]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	6859      	ldr	r1, [r3, #4]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	461a      	mov	r2, r3
 800c756:	f000 fc4f 	bl	800cff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2150      	movs	r1, #80	; 0x50
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fca8 	bl	800d0b6 <TIM_ITRx_SetConfig>
      break;
 800c766:	e029      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	6859      	ldr	r1, [r3, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	461a      	mov	r2, r3
 800c776:	f000 fc6e 	bl	800d056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2160      	movs	r1, #96	; 0x60
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fc98 	bl	800d0b6 <TIM_ITRx_SetConfig>
      break;
 800c786:	e019      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	6859      	ldr	r1, [r3, #4]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	461a      	mov	r2, r3
 800c796:	f000 fc2f 	bl	800cff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2140      	movs	r1, #64	; 0x40
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fc88 	bl	800d0b6 <TIM_ITRx_SetConfig>
      break;
 800c7a6:	e009      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	f000 fc7f 	bl	800d0b6 <TIM_ITRx_SetConfig>
      break;
 800c7b8:	e000      	b.n	800c7bc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c7ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	00100030 	.word	0x00100030
 800c7dc:	00100020 	.word	0x00100020
 800c7e0:	00100050 	.word	0x00100050
 800c7e4:	00100040 	.word	0x00100040
 800c7e8:	00100060 	.word	0x00100060
 800c7ec:	00100070 	.word	0x00100070

0800c7f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a46      	ldr	r2, [pc, #280]	; (800c980 <TIM_Base_SetConfig+0x12c>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d017      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c872:	d013      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a43      	ldr	r2, [pc, #268]	; (800c984 <TIM_Base_SetConfig+0x130>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d00f      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4a42      	ldr	r2, [pc, #264]	; (800c988 <TIM_Base_SetConfig+0x134>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d00b      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a41      	ldr	r2, [pc, #260]	; (800c98c <TIM_Base_SetConfig+0x138>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d007      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a40      	ldr	r2, [pc, #256]	; (800c990 <TIM_Base_SetConfig+0x13c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d003      	beq.n	800c89c <TIM_Base_SetConfig+0x48>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a3f      	ldr	r2, [pc, #252]	; (800c994 <TIM_Base_SetConfig+0x140>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d108      	bne.n	800c8ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a33      	ldr	r2, [pc, #204]	; (800c980 <TIM_Base_SetConfig+0x12c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d023      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8bc:	d01f      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a30      	ldr	r2, [pc, #192]	; (800c984 <TIM_Base_SetConfig+0x130>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d01b      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a2f      	ldr	r2, [pc, #188]	; (800c988 <TIM_Base_SetConfig+0x134>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d017      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a2e      	ldr	r2, [pc, #184]	; (800c98c <TIM_Base_SetConfig+0x138>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d013      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a2d      	ldr	r2, [pc, #180]	; (800c990 <TIM_Base_SetConfig+0x13c>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00f      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a2d      	ldr	r2, [pc, #180]	; (800c998 <TIM_Base_SetConfig+0x144>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00b      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a2c      	ldr	r2, [pc, #176]	; (800c99c <TIM_Base_SetConfig+0x148>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d007      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a2b      	ldr	r2, [pc, #172]	; (800c9a0 <TIM_Base_SetConfig+0x14c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d003      	beq.n	800c8fe <TIM_Base_SetConfig+0xaa>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a26      	ldr	r2, [pc, #152]	; (800c994 <TIM_Base_SetConfig+0x140>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d108      	bne.n	800c910 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	4a12      	ldr	r2, [pc, #72]	; (800c980 <TIM_Base_SetConfig+0x12c>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d013      	beq.n	800c964 <TIM_Base_SetConfig+0x110>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a14      	ldr	r2, [pc, #80]	; (800c990 <TIM_Base_SetConfig+0x13c>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d00f      	beq.n	800c964 <TIM_Base_SetConfig+0x110>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a14      	ldr	r2, [pc, #80]	; (800c998 <TIM_Base_SetConfig+0x144>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d00b      	beq.n	800c964 <TIM_Base_SetConfig+0x110>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a13      	ldr	r2, [pc, #76]	; (800c99c <TIM_Base_SetConfig+0x148>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d007      	beq.n	800c964 <TIM_Base_SetConfig+0x110>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a12      	ldr	r2, [pc, #72]	; (800c9a0 <TIM_Base_SetConfig+0x14c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d003      	beq.n	800c964 <TIM_Base_SetConfig+0x110>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a0d      	ldr	r2, [pc, #52]	; (800c994 <TIM_Base_SetConfig+0x140>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d103      	bne.n	800c96c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	615a      	str	r2, [r3, #20]
}
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	40012c00 	.word	0x40012c00
 800c984:	40000400 	.word	0x40000400
 800c988:	40000800 	.word	0x40000800
 800c98c:	40000c00 	.word	0x40000c00
 800c990:	40013400 	.word	0x40013400
 800c994:	40015000 	.word	0x40015000
 800c998:	40014000 	.word	0x40014000
 800c99c:	40014400 	.word	0x40014400
 800c9a0:	40014800 	.word	0x40014800

0800c9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	f023 0201 	bic.w	r2, r3, #1
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 0303 	bic.w	r3, r3, #3
 800c9de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f023 0302 	bic.w	r3, r3, #2
 800c9f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a30      	ldr	r2, [pc, #192]	; (800cac0 <TIM_OC1_SetConfig+0x11c>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d013      	beq.n	800ca2c <TIM_OC1_SetConfig+0x88>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a2f      	ldr	r2, [pc, #188]	; (800cac4 <TIM_OC1_SetConfig+0x120>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00f      	beq.n	800ca2c <TIM_OC1_SetConfig+0x88>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a2e      	ldr	r2, [pc, #184]	; (800cac8 <TIM_OC1_SetConfig+0x124>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00b      	beq.n	800ca2c <TIM_OC1_SetConfig+0x88>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a2d      	ldr	r2, [pc, #180]	; (800cacc <TIM_OC1_SetConfig+0x128>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_OC1_SetConfig+0x88>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a2c      	ldr	r2, [pc, #176]	; (800cad0 <TIM_OC1_SetConfig+0x12c>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_OC1_SetConfig+0x88>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a2b      	ldr	r2, [pc, #172]	; (800cad4 <TIM_OC1_SetConfig+0x130>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d10c      	bne.n	800ca46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f023 0308 	bic.w	r3, r3, #8
 800ca32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f023 0304 	bic.w	r3, r3, #4
 800ca44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a1d      	ldr	r2, [pc, #116]	; (800cac0 <TIM_OC1_SetConfig+0x11c>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d013      	beq.n	800ca76 <TIM_OC1_SetConfig+0xd2>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a1c      	ldr	r2, [pc, #112]	; (800cac4 <TIM_OC1_SetConfig+0x120>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00f      	beq.n	800ca76 <TIM_OC1_SetConfig+0xd2>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a1b      	ldr	r2, [pc, #108]	; (800cac8 <TIM_OC1_SetConfig+0x124>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d00b      	beq.n	800ca76 <TIM_OC1_SetConfig+0xd2>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a1a      	ldr	r2, [pc, #104]	; (800cacc <TIM_OC1_SetConfig+0x128>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d007      	beq.n	800ca76 <TIM_OC1_SetConfig+0xd2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a19      	ldr	r2, [pc, #100]	; (800cad0 <TIM_OC1_SetConfig+0x12c>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d003      	beq.n	800ca76 <TIM_OC1_SetConfig+0xd2>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a18      	ldr	r2, [pc, #96]	; (800cad4 <TIM_OC1_SetConfig+0x130>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d111      	bne.n	800ca9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	621a      	str	r2, [r3, #32]
}
 800cab4:	bf00      	nop
 800cab6:	371c      	adds	r7, #28
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	40012c00 	.word	0x40012c00
 800cac4:	40013400 	.word	0x40013400
 800cac8:	40014000 	.word	0x40014000
 800cacc:	40014400 	.word	0x40014400
 800cad0:	40014800 	.word	0x40014800
 800cad4:	40015000 	.word	0x40015000

0800cad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cad8:	b480      	push	{r7}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	f023 0210 	bic.w	r2, r3, #16
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	021b      	lsls	r3, r3, #8
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f023 0320 	bic.w	r3, r3, #32
 800cb26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a2c      	ldr	r2, [pc, #176]	; (800cbe8 <TIM_OC2_SetConfig+0x110>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d007      	beq.n	800cb4c <TIM_OC2_SetConfig+0x74>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a2b      	ldr	r2, [pc, #172]	; (800cbec <TIM_OC2_SetConfig+0x114>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d003      	beq.n	800cb4c <TIM_OC2_SetConfig+0x74>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a2a      	ldr	r2, [pc, #168]	; (800cbf0 <TIM_OC2_SetConfig+0x118>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d10d      	bne.n	800cb68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a1f      	ldr	r2, [pc, #124]	; (800cbe8 <TIM_OC2_SetConfig+0x110>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d013      	beq.n	800cb98 <TIM_OC2_SetConfig+0xc0>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a1e      	ldr	r2, [pc, #120]	; (800cbec <TIM_OC2_SetConfig+0x114>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d00f      	beq.n	800cb98 <TIM_OC2_SetConfig+0xc0>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a1e      	ldr	r2, [pc, #120]	; (800cbf4 <TIM_OC2_SetConfig+0x11c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d00b      	beq.n	800cb98 <TIM_OC2_SetConfig+0xc0>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a1d      	ldr	r2, [pc, #116]	; (800cbf8 <TIM_OC2_SetConfig+0x120>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d007      	beq.n	800cb98 <TIM_OC2_SetConfig+0xc0>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a1c      	ldr	r2, [pc, #112]	; (800cbfc <TIM_OC2_SetConfig+0x124>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d003      	beq.n	800cb98 <TIM_OC2_SetConfig+0xc0>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a17      	ldr	r2, [pc, #92]	; (800cbf0 <TIM_OC2_SetConfig+0x118>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d113      	bne.n	800cbc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	693a      	ldr	r2, [r7, #16]
 800cbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	621a      	str	r2, [r3, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	40012c00 	.word	0x40012c00
 800cbec:	40013400 	.word	0x40013400
 800cbf0:	40015000 	.word	0x40015000
 800cbf4:	40014000 	.word	0x40014000
 800cbf8:	40014400 	.word	0x40014400
 800cbfc:	40014800 	.word	0x40014800

0800cc00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	021b      	lsls	r3, r3, #8
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a2b      	ldr	r2, [pc, #172]	; (800cd0c <TIM_OC3_SetConfig+0x10c>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d007      	beq.n	800cc72 <TIM_OC3_SetConfig+0x72>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a2a      	ldr	r2, [pc, #168]	; (800cd10 <TIM_OC3_SetConfig+0x110>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d003      	beq.n	800cc72 <TIM_OC3_SetConfig+0x72>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4a29      	ldr	r2, [pc, #164]	; (800cd14 <TIM_OC3_SetConfig+0x114>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d10d      	bne.n	800cc8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	021b      	lsls	r3, r3, #8
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a1e      	ldr	r2, [pc, #120]	; (800cd0c <TIM_OC3_SetConfig+0x10c>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d013      	beq.n	800ccbe <TIM_OC3_SetConfig+0xbe>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a1d      	ldr	r2, [pc, #116]	; (800cd10 <TIM_OC3_SetConfig+0x110>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d00f      	beq.n	800ccbe <TIM_OC3_SetConfig+0xbe>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a1d      	ldr	r2, [pc, #116]	; (800cd18 <TIM_OC3_SetConfig+0x118>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d00b      	beq.n	800ccbe <TIM_OC3_SetConfig+0xbe>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a1c      	ldr	r2, [pc, #112]	; (800cd1c <TIM_OC3_SetConfig+0x11c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d007      	beq.n	800ccbe <TIM_OC3_SetConfig+0xbe>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <TIM_OC3_SetConfig+0x120>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d003      	beq.n	800ccbe <TIM_OC3_SetConfig+0xbe>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a16      	ldr	r2, [pc, #88]	; (800cd14 <TIM_OC3_SetConfig+0x114>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d113      	bne.n	800cce6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	699b      	ldr	r3, [r3, #24]
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	621a      	str	r2, [r3, #32]
}
 800cd00:	bf00      	nop
 800cd02:	371c      	adds	r7, #28
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	40012c00 	.word	0x40012c00
 800cd10:	40013400 	.word	0x40013400
 800cd14:	40015000 	.word	0x40015000
 800cd18:	40014000 	.word	0x40014000
 800cd1c:	40014400 	.word	0x40014400
 800cd20:	40014800 	.word	0x40014800

0800cd24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	021b      	lsls	r3, r3, #8
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	031b      	lsls	r3, r3, #12
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a2c      	ldr	r2, [pc, #176]	; (800ce34 <TIM_OC4_SetConfig+0x110>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d007      	beq.n	800cd98 <TIM_OC4_SetConfig+0x74>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a2b      	ldr	r2, [pc, #172]	; (800ce38 <TIM_OC4_SetConfig+0x114>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d003      	beq.n	800cd98 <TIM_OC4_SetConfig+0x74>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a2a      	ldr	r2, [pc, #168]	; (800ce3c <TIM_OC4_SetConfig+0x118>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d10d      	bne.n	800cdb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	031b      	lsls	r3, r3, #12
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <TIM_OC4_SetConfig+0x110>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d013      	beq.n	800cde4 <TIM_OC4_SetConfig+0xc0>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a1e      	ldr	r2, [pc, #120]	; (800ce38 <TIM_OC4_SetConfig+0x114>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d00f      	beq.n	800cde4 <TIM_OC4_SetConfig+0xc0>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a1e      	ldr	r2, [pc, #120]	; (800ce40 <TIM_OC4_SetConfig+0x11c>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d00b      	beq.n	800cde4 <TIM_OC4_SetConfig+0xc0>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a1d      	ldr	r2, [pc, #116]	; (800ce44 <TIM_OC4_SetConfig+0x120>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d007      	beq.n	800cde4 <TIM_OC4_SetConfig+0xc0>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a1c      	ldr	r2, [pc, #112]	; (800ce48 <TIM_OC4_SetConfig+0x124>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d003      	beq.n	800cde4 <TIM_OC4_SetConfig+0xc0>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a17      	ldr	r2, [pc, #92]	; (800ce3c <TIM_OC4_SetConfig+0x118>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d113      	bne.n	800ce0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cdf2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	019b      	lsls	r3, r3, #6
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	019b      	lsls	r3, r3, #6
 800ce06:	693a      	ldr	r2, [r7, #16]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	621a      	str	r2, [r3, #32]
}
 800ce26:	bf00      	nop
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	40012c00 	.word	0x40012c00
 800ce38:	40013400 	.word	0x40013400
 800ce3c:	40015000 	.word	0x40015000
 800ce40:	40014000 	.word	0x40014000
 800ce44:	40014400 	.word	0x40014400
 800ce48:	40014800 	.word	0x40014800

0800ce4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b087      	sub	sp, #28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ce90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	041b      	lsls	r3, r3, #16
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a19      	ldr	r2, [pc, #100]	; (800cf08 <TIM_OC5_SetConfig+0xbc>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d013      	beq.n	800cece <TIM_OC5_SetConfig+0x82>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a18      	ldr	r2, [pc, #96]	; (800cf0c <TIM_OC5_SetConfig+0xc0>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d00f      	beq.n	800cece <TIM_OC5_SetConfig+0x82>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a17      	ldr	r2, [pc, #92]	; (800cf10 <TIM_OC5_SetConfig+0xc4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d00b      	beq.n	800cece <TIM_OC5_SetConfig+0x82>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a16      	ldr	r2, [pc, #88]	; (800cf14 <TIM_OC5_SetConfig+0xc8>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d007      	beq.n	800cece <TIM_OC5_SetConfig+0x82>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a15      	ldr	r2, [pc, #84]	; (800cf18 <TIM_OC5_SetConfig+0xcc>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d003      	beq.n	800cece <TIM_OC5_SetConfig+0x82>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a14      	ldr	r2, [pc, #80]	; (800cf1c <TIM_OC5_SetConfig+0xd0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d109      	bne.n	800cee2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ced4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	021b      	lsls	r3, r3, #8
 800cedc:	697a      	ldr	r2, [r7, #20]
 800cede:	4313      	orrs	r3, r2
 800cee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	685a      	ldr	r2, [r3, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	621a      	str	r2, [r3, #32]
}
 800cefc:	bf00      	nop
 800cefe:	371c      	adds	r7, #28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	40012c00 	.word	0x40012c00
 800cf0c:	40013400 	.word	0x40013400
 800cf10:	40014000 	.word	0x40014000
 800cf14:	40014400 	.word	0x40014400
 800cf18:	40014800 	.word	0x40014800
 800cf1c:	40015000 	.word	0x40015000

0800cf20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b087      	sub	sp, #28
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	021b      	lsls	r3, r3, #8
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	051b      	lsls	r3, r3, #20
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a1a      	ldr	r2, [pc, #104]	; (800cfe0 <TIM_OC6_SetConfig+0xc0>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d013      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x84>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a19      	ldr	r2, [pc, #100]	; (800cfe4 <TIM_OC6_SetConfig+0xc4>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d00f      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x84>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a18      	ldr	r2, [pc, #96]	; (800cfe8 <TIM_OC6_SetConfig+0xc8>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d00b      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x84>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a17      	ldr	r2, [pc, #92]	; (800cfec <TIM_OC6_SetConfig+0xcc>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d007      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x84>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a16      	ldr	r2, [pc, #88]	; (800cff0 <TIM_OC6_SetConfig+0xd0>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d003      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x84>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a15      	ldr	r2, [pc, #84]	; (800cff4 <TIM_OC6_SetConfig+0xd4>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d109      	bne.n	800cfb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cfaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	029b      	lsls	r3, r3, #10
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	621a      	str	r2, [r3, #32]
}
 800cfd2:	bf00      	nop
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	40012c00 	.word	0x40012c00
 800cfe4:	40013400 	.word	0x40013400
 800cfe8:	40014000 	.word	0x40014000
 800cfec:	40014400 	.word	0x40014400
 800cff0:	40014800 	.word	0x40014800
 800cff4:	40015000 	.word	0x40015000

0800cff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	f023 0201 	bic.w	r2, r3, #1
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f023 030a 	bic.w	r3, r3, #10
 800d034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	621a      	str	r2, [r3, #32]
}
 800d04a:	bf00      	nop
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d056:	b480      	push	{r7}
 800d058:	b087      	sub	sp, #28
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	f023 0210 	bic.w	r2, r3, #16
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6a1b      	ldr	r3, [r3, #32]
 800d078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	031b      	lsls	r3, r3, #12
 800d086:	697a      	ldr	r2, [r7, #20]
 800d088:	4313      	orrs	r3, r2
 800d08a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	621a      	str	r2, [r3, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b085      	sub	sp, #20
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	f043 0307 	orr.w	r3, r3, #7
 800d0dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	609a      	str	r2, [r3, #8]
}
 800d0e4:	bf00      	nop
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
 800d0fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d10a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	021a      	lsls	r2, r3, #8
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	431a      	orrs	r2, r3
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	4313      	orrs	r3, r2
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	609a      	str	r2, [r3, #8]
}
 800d124:	bf00      	nop
 800d126:	371c      	adds	r7, #28
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	f003 031f 	and.w	r3, r3, #31
 800d142:	2201      	movs	r2, #1
 800d144:	fa02 f303 	lsl.w	r3, r2, r3
 800d148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6a1a      	ldr	r2, [r3, #32]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	43db      	mvns	r3, r3
 800d152:	401a      	ands	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6a1a      	ldr	r2, [r3, #32]
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	f003 031f 	and.w	r3, r3, #31
 800d162:	6879      	ldr	r1, [r7, #4]
 800d164:	fa01 f303 	lsl.w	r3, r1, r3
 800d168:	431a      	orrs	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	621a      	str	r2, [r3, #32]
}
 800d16e:	bf00      	nop
 800d170:	371c      	adds	r7, #28
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
	...

0800d17c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d101      	bne.n	800d194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d190:	2302      	movs	r3, #2
 800d192:	e074      	b.n	800d27e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2202      	movs	r2, #2
 800d1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a34      	ldr	r2, [pc, #208]	; (800d28c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d009      	beq.n	800d1d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a33      	ldr	r2, [pc, #204]	; (800d290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d004      	beq.n	800d1d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a31      	ldr	r2, [pc, #196]	; (800d294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d108      	bne.n	800d1e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d1d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a21      	ldr	r2, [pc, #132]	; (800d28c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d022      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d214:	d01d      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a1f      	ldr	r2, [pc, #124]	; (800d298 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d018      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a1d      	ldr	r2, [pc, #116]	; (800d29c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d013      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a1c      	ldr	r2, [pc, #112]	; (800d2a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00e      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a15      	ldr	r2, [pc, #84]	; (800d290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d009      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a18      	ldr	r2, [pc, #96]	; (800d2a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d004      	beq.n	800d252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a11      	ldr	r2, [pc, #68]	; (800d294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d10c      	bne.n	800d26c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	4313      	orrs	r3, r2
 800d262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3714      	adds	r7, #20
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	40012c00 	.word	0x40012c00
 800d290:	40013400 	.word	0x40013400
 800d294:	40015000 	.word	0x40015000
 800d298:	40000400 	.word	0x40000400
 800d29c:	40000800 	.word	0x40000800
 800d2a0:	40000c00 	.word	0x40000c00
 800d2a4:	40014000 	.word	0x40014000

0800d2a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d101      	bne.n	800d2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	e096      	b.n	800d3f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4313      	orrs	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	4313      	orrs	r3, r2
 800d310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32a:	4313      	orrs	r3, r2
 800d32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	041b      	lsls	r3, r3, #16
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a2f      	ldr	r2, [pc, #188]	; (800d400 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d009      	beq.n	800d35c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a2d      	ldr	r2, [pc, #180]	; (800d404 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d004      	beq.n	800d35c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a2c      	ldr	r2, [pc, #176]	; (800d408 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d106      	bne.n	800d36a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	4313      	orrs	r3, r2
 800d368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a24      	ldr	r2, [pc, #144]	; (800d400 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d009      	beq.n	800d388 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a22      	ldr	r2, [pc, #136]	; (800d404 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d004      	beq.n	800d388 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a21      	ldr	r2, [pc, #132]	; (800d408 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d12b      	bne.n	800d3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d392:	051b      	lsls	r3, r3, #20
 800d394:	4313      	orrs	r3, r2
 800d396:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a11      	ldr	r2, [pc, #68]	; (800d400 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d009      	beq.n	800d3d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a10      	ldr	r2, [pc, #64]	; (800d404 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d004      	beq.n	800d3d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a0e      	ldr	r2, [pc, #56]	; (800d408 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d106      	bne.n	800d3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	40012c00 	.word	0x40012c00
 800d404:	40013400 	.word	0x40013400
 800d408:	40015000 	.word	0x40015000

0800d40c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <LL_EXTI_EnableIT_0_31>:
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d4a0:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	4904      	ldr	r1, [pc, #16]	; (800d4b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	600b      	str	r3, [r1, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	40010400 	.word	0x40010400

0800d4bc <LL_EXTI_EnableIT_32_63>:
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d4c4:	4b05      	ldr	r3, [pc, #20]	; (800d4dc <LL_EXTI_EnableIT_32_63+0x20>)
 800d4c6:	6a1a      	ldr	r2, [r3, #32]
 800d4c8:	4904      	ldr	r1, [pc, #16]	; (800d4dc <LL_EXTI_EnableIT_32_63+0x20>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	620b      	str	r3, [r1, #32]
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	40010400 	.word	0x40010400

0800d4e0 <LL_EXTI_DisableIT_0_31>:
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d4e8:	4b06      	ldr	r3, [pc, #24]	; (800d504 <LL_EXTI_DisableIT_0_31+0x24>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	43db      	mvns	r3, r3
 800d4f0:	4904      	ldr	r1, [pc, #16]	; (800d504 <LL_EXTI_DisableIT_0_31+0x24>)
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	600b      	str	r3, [r1, #0]
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	40010400 	.word	0x40010400

0800d508 <LL_EXTI_DisableIT_32_63>:
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d510:	4b06      	ldr	r3, [pc, #24]	; (800d52c <LL_EXTI_DisableIT_32_63+0x24>)
 800d512:	6a1a      	ldr	r2, [r3, #32]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	43db      	mvns	r3, r3
 800d518:	4904      	ldr	r1, [pc, #16]	; (800d52c <LL_EXTI_DisableIT_32_63+0x24>)
 800d51a:	4013      	ands	r3, r2
 800d51c:	620b      	str	r3, [r1, #32]
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	40010400 	.word	0x40010400

0800d530 <LL_EXTI_EnableEvent_0_31>:
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d538:	4b05      	ldr	r3, [pc, #20]	; (800d550 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	4904      	ldr	r1, [pc, #16]	; (800d550 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4313      	orrs	r3, r2
 800d542:	604b      	str	r3, [r1, #4]
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	40010400 	.word	0x40010400

0800d554 <LL_EXTI_EnableEvent_32_63>:
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d55c:	4b05      	ldr	r3, [pc, #20]	; (800d574 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d55e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d560:	4904      	ldr	r1, [pc, #16]	; (800d574 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4313      	orrs	r3, r2
 800d566:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	40010400 	.word	0x40010400

0800d578 <LL_EXTI_DisableEvent_0_31>:
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d580:	4b06      	ldr	r3, [pc, #24]	; (800d59c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d582:	685a      	ldr	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	43db      	mvns	r3, r3
 800d588:	4904      	ldr	r1, [pc, #16]	; (800d59c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d58a:	4013      	ands	r3, r2
 800d58c:	604b      	str	r3, [r1, #4]
}
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	40010400 	.word	0x40010400

0800d5a0 <LL_EXTI_DisableEvent_32_63>:
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d5a8:	4b06      	ldr	r3, [pc, #24]	; (800d5c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	43db      	mvns	r3, r3
 800d5b0:	4904      	ldr	r1, [pc, #16]	; (800d5c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	40010400 	.word	0x40010400

0800d5c8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d5d0:	4b05      	ldr	r3, [pc, #20]	; (800d5e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	4904      	ldr	r1, [pc, #16]	; (800d5e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	608b      	str	r3, [r1, #8]
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	40010400 	.word	0x40010400

0800d5ec <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d5f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	40010400 	.word	0x40010400

0800d610 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d618:	4b06      	ldr	r3, [pc, #24]	; (800d634 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d61a:	689a      	ldr	r2, [r3, #8]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	43db      	mvns	r3, r3
 800d620:	4904      	ldr	r1, [pc, #16]	; (800d634 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d622:	4013      	ands	r3, r2
 800d624:	608b      	str	r3, [r1, #8]
}
 800d626:	bf00      	nop
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	40010400 	.word	0x40010400

0800d638 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d640:	4b06      	ldr	r3, [pc, #24]	; (800d65c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	43db      	mvns	r3, r3
 800d648:	4904      	ldr	r1, [pc, #16]	; (800d65c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d64a:	4013      	ands	r3, r2
 800d64c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d64e:	bf00      	nop
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	40010400 	.word	0x40010400

0800d660 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d66a:	68da      	ldr	r2, [r3, #12]
 800d66c:	4904      	ldr	r1, [pc, #16]	; (800d680 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4313      	orrs	r3, r2
 800d672:	60cb      	str	r3, [r1, #12]
}
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	40010400 	.word	0x40010400

0800d684 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d68c:	4b05      	ldr	r3, [pc, #20]	; (800d6a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d690:	4904      	ldr	r1, [pc, #16]	; (800d6a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4313      	orrs	r3, r2
 800d696:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	40010400 	.word	0x40010400

0800d6a8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d6b0:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d6b2:	68da      	ldr	r2, [r3, #12]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	43db      	mvns	r3, r3
 800d6b8:	4904      	ldr	r1, [pc, #16]	; (800d6cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	60cb      	str	r3, [r1, #12]
}
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	40010400 	.word	0x40010400

0800d6d0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d6d8:	4b06      	ldr	r3, [pc, #24]	; (800d6f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	43db      	mvns	r3, r3
 800d6e0:	4904      	ldr	r1, [pc, #16]	; (800d6f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d6e6:	bf00      	nop
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	40010400 	.word	0x40010400

0800d6f8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7a1b      	ldrb	r3, [r3, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 80c8 	beq.w	800d89e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d05d      	beq.n	800d7d2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7a5b      	ldrb	r3, [r3, #9]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d00e      	beq.n	800d73c <LL_EXTI_Init+0x44>
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d017      	beq.n	800d752 <LL_EXTI_Init+0x5a>
 800d722:	2b00      	cmp	r3, #0
 800d724:	d120      	bne.n	800d768 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff ff24 	bl	800d578 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4618      	mov	r0, r3
 800d736:	f7ff feaf 	bl	800d498 <LL_EXTI_EnableIT_0_31>
          break;
 800d73a:	e018      	b.n	800d76e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff fecd 	bl	800d4e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fef0 	bl	800d530 <LL_EXTI_EnableEvent_0_31>
          break;
 800d750:	e00d      	b.n	800d76e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fe9e 	bl	800d498 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff fee5 	bl	800d530 <LL_EXTI_EnableEvent_0_31>
          break;
 800d766:	e002      	b.n	800d76e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d768:	2301      	movs	r3, #1
 800d76a:	60fb      	str	r3, [r7, #12]
          break;
 800d76c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7a9b      	ldrb	r3, [r3, #10]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d02d      	beq.n	800d7d2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	7a9b      	ldrb	r3, [r3, #10]
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d00e      	beq.n	800d79c <LL_EXTI_Init+0xa4>
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d017      	beq.n	800d7b2 <LL_EXTI_Init+0xba>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d120      	bne.n	800d7c8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff ff8c 	bl	800d6a8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff ff17 	bl	800d5c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d79a:	e01b      	b.n	800d7d4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7ff ff35 	bl	800d610 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7ff ff58 	bl	800d660 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d7b0:	e010      	b.n	800d7d4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7ff ff06 	bl	800d5c8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff ff4d 	bl	800d660 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d7c6:	e005      	b.n	800d7d4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f043 0302 	orr.w	r3, r3, #2
 800d7ce:	60fb      	str	r3, [r7, #12]
            break;
 800d7d0:	e000      	b.n	800d7d4 <LL_EXTI_Init+0xdc>
        }
      }
 800d7d2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d075      	beq.n	800d8c8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7a5b      	ldrb	r3, [r3, #9]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d00e      	beq.n	800d802 <LL_EXTI_Init+0x10a>
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d017      	beq.n	800d818 <LL_EXTI_Init+0x120>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d120      	bne.n	800d82e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff fed5 	bl	800d5a0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fe5e 	bl	800d4bc <LL_EXTI_EnableIT_32_63>
          break;
 800d800:	e01a      	b.n	800d838 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff fe7e 	bl	800d508 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff fe9f 	bl	800d554 <LL_EXTI_EnableEvent_32_63>
          break;
 800d816:	e00f      	b.n	800d838 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7ff fe4d 	bl	800d4bc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fe94 	bl	800d554 <LL_EXTI_EnableEvent_32_63>
          break;
 800d82c:	e004      	b.n	800d838 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f043 0304 	orr.w	r3, r3, #4
 800d834:	60fb      	str	r3, [r7, #12]
          break;
 800d836:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7a9b      	ldrb	r3, [r3, #10]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d043      	beq.n	800d8c8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7a9b      	ldrb	r3, [r3, #10]
 800d844:	2b02      	cmp	r3, #2
 800d846:	d00e      	beq.n	800d866 <LL_EXTI_Init+0x16e>
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d017      	beq.n	800d87c <LL_EXTI_Init+0x184>
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d120      	bne.n	800d892 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff ff3b 	bl	800d6d0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff fec4 	bl	800d5ec <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d864:	e031      	b.n	800d8ca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fee4 	bl	800d638 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	f7ff ff05 	bl	800d684 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d87a:	e026      	b.n	800d8ca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff feb3 	bl	800d5ec <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fefa 	bl	800d684 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d890:	e01b      	b.n	800d8ca <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f043 0305 	orr.w	r3, r3, #5
 800d898:	60fb      	str	r3, [r7, #12]
            break;
 800d89a:	bf00      	nop
 800d89c:	e015      	b.n	800d8ca <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fe1c 	bl	800d4e0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fe63 	bl	800d578 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fe26 	bl	800d508 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff fe6d 	bl	800d5a0 <LL_EXTI_DisableEvent_32_63>
 800d8c6:	e000      	b.n	800d8ca <LL_EXTI_Init+0x1d2>
      }
 800d8c8:	bf00      	nop
  }

  return status;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <LL_GPIO_SetPinMode>:
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b089      	sub	sp, #36	; 0x24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	fa93 f3a3 	rbit	r3, r3
 800d8ee:	613b      	str	r3, [r7, #16]
  return result;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	fab3 f383 	clz	r3, r3
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	2103      	movs	r1, #3
 800d8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d900:	43db      	mvns	r3, r3
 800d902:	401a      	ands	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	fa93 f3a3 	rbit	r3, r3
 800d90e:	61bb      	str	r3, [r7, #24]
  return result;
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	fab3 f383 	clz	r3, r3
 800d916:	b2db      	uxtb	r3, r3
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	fa01 f303 	lsl.w	r3, r1, r3
 800d920:	431a      	orrs	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	3724      	adds	r7, #36	; 0x24
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <LL_GPIO_SetPinOutputType>:
{
 800d932:	b480      	push	{r7}
 800d934:	b085      	sub	sp, #20
 800d936:	af00      	add	r7, sp, #0
 800d938:	60f8      	str	r0, [r7, #12]
 800d93a:	60b9      	str	r1, [r7, #8]
 800d93c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	43db      	mvns	r3, r3
 800d946:	401a      	ands	r2, r3
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	fb01 f303 	mul.w	r3, r1, r3
 800d950:	431a      	orrs	r2, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	605a      	str	r2, [r3, #4]
}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <LL_GPIO_SetPinSpeed>:
{
 800d962:	b480      	push	{r7}
 800d964:	b089      	sub	sp, #36	; 0x24
 800d966:	af00      	add	r7, sp, #0
 800d968:	60f8      	str	r0, [r7, #12]
 800d96a:	60b9      	str	r1, [r7, #8]
 800d96c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	689a      	ldr	r2, [r3, #8]
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	fa93 f3a3 	rbit	r3, r3
 800d97c:	613b      	str	r3, [r7, #16]
  return result;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	fab3 f383 	clz	r3, r3
 800d984:	b2db      	uxtb	r3, r3
 800d986:	005b      	lsls	r3, r3, #1
 800d988:	2103      	movs	r1, #3
 800d98a:	fa01 f303 	lsl.w	r3, r1, r3
 800d98e:	43db      	mvns	r3, r3
 800d990:	401a      	ands	r2, r3
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	fa93 f3a3 	rbit	r3, r3
 800d99c:	61bb      	str	r3, [r7, #24]
  return result;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	fab3 f383 	clz	r3, r3
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	609a      	str	r2, [r3, #8]
}
 800d9b4:	bf00      	nop
 800d9b6:	3724      	adds	r7, #36	; 0x24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <LL_GPIO_SetPinPull>:
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b089      	sub	sp, #36	; 0x24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	68da      	ldr	r2, [r3, #12]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	fa93 f3a3 	rbit	r3, r3
 800d9da:	613b      	str	r3, [r7, #16]
  return result;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	fab3 f383 	clz	r3, r3
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	2103      	movs	r1, #3
 800d9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	401a      	ands	r2, r3
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	fa93 f3a3 	rbit	r3, r3
 800d9fa:	61bb      	str	r3, [r7, #24]
  return result;
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	fab3 f383 	clz	r3, r3
 800da02:	b2db      	uxtb	r3, r3
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	fa01 f303 	lsl.w	r3, r1, r3
 800da0c:	431a      	orrs	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	60da      	str	r2, [r3, #12]
}
 800da12:	bf00      	nop
 800da14:	3724      	adds	r7, #36	; 0x24
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <LL_GPIO_SetAFPin_0_7>:
{
 800da1e:	b480      	push	{r7}
 800da20:	b089      	sub	sp, #36	; 0x24
 800da22:	af00      	add	r7, sp, #0
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	60b9      	str	r1, [r7, #8]
 800da28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6a1a      	ldr	r2, [r3, #32]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	fa93 f3a3 	rbit	r3, r3
 800da38:	613b      	str	r3, [r7, #16]
  return result;
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	fab3 f383 	clz	r3, r3
 800da40:	b2db      	uxtb	r3, r3
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	210f      	movs	r1, #15
 800da46:	fa01 f303 	lsl.w	r3, r1, r3
 800da4a:	43db      	mvns	r3, r3
 800da4c:	401a      	ands	r2, r3
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	fa93 f3a3 	rbit	r3, r3
 800da58:	61bb      	str	r3, [r7, #24]
  return result;
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	fab3 f383 	clz	r3, r3
 800da60:	b2db      	uxtb	r3, r3
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	fa01 f303 	lsl.w	r3, r1, r3
 800da6a:	431a      	orrs	r2, r3
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	621a      	str	r2, [r3, #32]
}
 800da70:	bf00      	nop
 800da72:	3724      	adds	r7, #36	; 0x24
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <LL_GPIO_SetAFPin_8_15>:
{
 800da7c:	b480      	push	{r7}
 800da7e:	b089      	sub	sp, #36	; 0x24
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	fa93 f3a3 	rbit	r3, r3
 800da98:	613b      	str	r3, [r7, #16]
  return result;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	fab3 f383 	clz	r3, r3
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	210f      	movs	r1, #15
 800daa6:	fa01 f303 	lsl.w	r3, r1, r3
 800daaa:	43db      	mvns	r3, r3
 800daac:	401a      	ands	r2, r3
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	0a1b      	lsrs	r3, r3, #8
 800dab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	fa93 f3a3 	rbit	r3, r3
 800daba:	61bb      	str	r3, [r7, #24]
  return result;
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	fab3 f383 	clz	r3, r3
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	6879      	ldr	r1, [r7, #4]
 800dac8:	fa01 f303 	lsl.w	r3, r1, r3
 800dacc:	431a      	orrs	r2, r3
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dad2:	bf00      	nop
 800dad4:	3724      	adds	r7, #36	; 0x24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b086      	sub	sp, #24
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	fa93 f3a3 	rbit	r3, r3
 800daf4:	60bb      	str	r3, [r7, #8]
  return result;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	fab3 f383 	clz	r3, r3
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800db00:	e040      	b.n	800db84 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	2101      	movs	r1, #1
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	fa01 f303 	lsl.w	r3, r1, r3
 800db0e:	4013      	ands	r3, r2
 800db10:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d032      	beq.n	800db7e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	461a      	mov	r2, r3
 800db1e:	6939      	ldr	r1, [r7, #16]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7ff fed7 	bl	800d8d4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d003      	beq.n	800db36 <LL_GPIO_Init+0x58>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	2b02      	cmp	r3, #2
 800db34:	d106      	bne.n	800db44 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	461a      	mov	r2, r3
 800db3c:	6939      	ldr	r1, [r7, #16]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ff0f 	bl	800d962 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	461a      	mov	r2, r3
 800db4a:	6939      	ldr	r1, [r7, #16]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ff37 	bl	800d9c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	2b02      	cmp	r3, #2
 800db58:	d111      	bne.n	800db7e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	2bff      	cmp	r3, #255	; 0xff
 800db5e:	d807      	bhi.n	800db70 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	695b      	ldr	r3, [r3, #20]
 800db64:	461a      	mov	r2, r3
 800db66:	6939      	ldr	r1, [r7, #16]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ff58 	bl	800da1e <LL_GPIO_SetAFPin_0_7>
 800db6e:	e006      	b.n	800db7e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	461a      	mov	r2, r3
 800db76:	6939      	ldr	r1, [r7, #16]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff ff7f 	bl	800da7c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	3301      	adds	r3, #1
 800db82:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	fa22 f303 	lsr.w	r3, r2, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1b7      	bne.n	800db02 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d003      	beq.n	800dba2 <LL_GPIO_Init+0xc4>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d107      	bne.n	800dbb2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	6819      	ldr	r1, [r3, #0]
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff fec0 	bl	800d932 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4623      	mov	r3, r4
 800dbcc:	80fb      	strh	r3, [r7, #6]
 800dbce:	4603      	mov	r3, r0
 800dbd0:	80bb      	strh	r3, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	70fb      	strb	r3, [r7, #3]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
 800dbde:	e026      	b.n	800dc2e <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	60bb      	str	r3, [r7, #8]
 800dbe4:	e01c      	b.n	800dc20 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	88fb      	ldrh	r3, [r7, #6]
 800dbec:	4413      	add	r3, r2
 800dbee:	b298      	uxth	r0, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbf6:	4413      	add	r3, r2
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	88bb      	ldrh	r3, [r7, #4]
 800dc06:	4413      	add	r3, r2
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	883a      	ldrh	r2, [r7, #0]
 800dc14:	4619      	mov	r1, r3
 800dc16:	f000 fc1f 	bl	800e458 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	60bb      	str	r3, [r7, #8]
 800dc20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	dbde      	blt.n	800dbe6 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	78fb      	ldrb	r3, [r7, #3]
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	dbd4      	blt.n	800dbe0 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800dc36:	bf00      	nop
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd90      	pop	{r4, r7, pc}

0800dc3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800dc3e:	b590      	push	{r4, r7, lr}
 800dc40:	b087      	sub	sp, #28
 800dc42:	af02      	add	r7, sp, #8
 800dc44:	4604      	mov	r4, r0
 800dc46:	4608      	mov	r0, r1
 800dc48:	4611      	mov	r1, r2
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	4623      	mov	r3, r4
 800dc4e:	80fb      	strh	r3, [r7, #6]
 800dc50:	4603      	mov	r3, r0
 800dc52:	80bb      	strh	r3, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	807b      	strh	r3, [r7, #2]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800dc60:	7bfa      	ldrb	r2, [r7, #15]
 800dc62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d939      	bls.n	800dcde <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800dc6a:	88ba      	ldrh	r2, [r7, #4]
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	441a      	add	r2, r3
 800dc70:	88b9      	ldrh	r1, [r7, #4]
 800dc72:	883b      	ldrh	r3, [r7, #0]
 800dc74:	4419      	add	r1, r3
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	1acb      	subs	r3, r1, r3
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	f000 8089 	beq.w	800dd92 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800dc80:	88fa      	ldrh	r2, [r7, #6]
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	441a      	add	r2, r3
 800dc86:	88f9      	ldrh	r1, [r7, #6]
 800dc88:	887b      	ldrh	r3, [r7, #2]
 800dc8a:	4419      	add	r1, r3
 800dc8c:	7bfb      	ldrb	r3, [r7, #15]
 800dc8e:	1acb      	subs	r3, r1, r3
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d07e      	beq.n	800dd92 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	88fb      	ldrh	r3, [r7, #6]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	b298      	uxth	r0, r3
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	88bb      	ldrh	r3, [r7, #4]
 800dca4:	4413      	add	r3, r2
 800dca6:	b299      	uxth	r1, r3
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	887a      	ldrh	r2, [r7, #2]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	b29c      	uxth	r4, r3
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	883a      	ldrh	r2, [r7, #0]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3301      	adds	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	2304      	movs	r3, #4
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	8c3b      	ldrh	r3, [r7, #32]
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	f000 fd18 	bl	800e70c <ILI9341_Draw_Rectangle>
				goto finish;
 800dcdc:	e05a      	b.n	800dd94 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	88fb      	ldrh	r3, [r7, #6]
 800dce4:	4413      	add	r3, r2
 800dce6:	b298      	uxth	r0, r3
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	88bb      	ldrh	r3, [r7, #4]
 800dcee:	4413      	add	r3, r2
 800dcf0:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	887a      	ldrh	r2, [r7, #2]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd02:	f000 fa6b 	bl	800e1dc <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dd06:	7bfb      	ldrb	r3, [r7, #15]
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	88fb      	ldrh	r3, [r7, #6]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	b298      	uxth	r0, r3
										(y + h) - b,
 800dd10:	88ba      	ldrh	r2, [r7, #4]
 800dd12:	883b      	ldrh	r3, [r7, #0]
 800dd14:	4413      	add	r3, r2
 800dd16:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	b299      	uxth	r1, r3
										(w - b)+1,
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	887a      	ldrh	r2, [r7, #2]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd30:	f000 fa54 	bl	800e1dc <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	88fb      	ldrh	r3, [r7, #6]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	b298      	uxth	r0, r3
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	88bb      	ldrh	r3, [r7, #4]
 800dd44:	4413      	add	r3, r2
 800dd46:	b299      	uxth	r1, r3
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	883a      	ldrh	r2, [r7, #0]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd58:	f000 faa4 	bl	800e2a4 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800dd5c:	88fa      	ldrh	r2, [r7, #6]
 800dd5e:	887b      	ldrh	r3, [r7, #2]
 800dd60:	4413      	add	r3, r2
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	b298      	uxth	r0, r3
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	88bb      	ldrh	r3, [r7, #4]
 800dd72:	4413      	add	r3, r2
 800dd74:	b299      	uxth	r1, r3
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	883a      	ldrh	r2, [r7, #0]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dd86:	f000 fa8d 	bl	800e2a4 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800dd90:	e766      	b.n	800dc60 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800dd92:	bf00      	nop
	// done
	return;
 800dd94:	bf00      	nop
}
 800dd96:	3714      	adds	r7, #20
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd90      	pop	{r4, r7, pc}

0800dd9c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800dd9c:	b590      	push	{r4, r7, lr}
 800dd9e:	b089      	sub	sp, #36	; 0x24
 800dda0:	af02      	add	r7, sp, #8
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	4611      	mov	r1, r2
 800dda8:	461a      	mov	r2, r3
 800ddaa:	4623      	mov	r3, r4
 800ddac:	71fb      	strb	r3, [r7, #7]
 800ddae:	4603      	mov	r3, r0
 800ddb0:	80bb      	strh	r3, [r7, #4]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	807b      	strh	r3, [r7, #2]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	2b1f      	cmp	r3, #31
 800ddc2:	d802      	bhi.n	800ddca <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	71fb      	strb	r3, [r7, #7]
 800ddc8:	e002      	b.n	800ddd0 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	3b20      	subs	r3, #32
 800ddce:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	753b      	strb	r3, [r7, #20]
 800ddd4:	e012      	b.n	800ddfc <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800ddd6:	7dfa      	ldrb	r2, [r7, #23]
 800ddd8:	7d38      	ldrb	r0, [r7, #20]
 800ddda:	7d39      	ldrb	r1, [r7, #20]
 800dddc:	4c48      	ldr	r4, [pc, #288]	; (800df00 <ILI9341_Draw_Char+0x164>)
 800ddde:	4613      	mov	r3, r2
 800dde0:	005b      	lsls	r3, r3, #1
 800dde2:	4413      	add	r3, r2
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	4423      	add	r3, r4
 800dde8:	4403      	add	r3, r0
 800ddea:	781a      	ldrb	r2, [r3, #0]
 800ddec:	f107 0318 	add.w	r3, r7, #24
 800ddf0:	440b      	add	r3, r1
 800ddf2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800ddf6:	7d3b      	ldrb	r3, [r7, #20]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	753b      	strb	r3, [r7, #20]
 800ddfc:	7d3b      	ldrb	r3, [r7, #20]
 800ddfe:	2b05      	cmp	r3, #5
 800de00:	d9e9      	bls.n	800ddd6 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800de02:	2300      	movs	r3, #0
 800de04:	757b      	strb	r3, [r7, #21]
 800de06:	e074      	b.n	800def2 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800de08:	2300      	movs	r3, #0
 800de0a:	75bb      	strb	r3, [r7, #22]
 800de0c:	e06b      	b.n	800dee6 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800de0e:	7d7b      	ldrb	r3, [r7, #21]
 800de10:	f107 0218 	add.w	r2, r7, #24
 800de14:	4413      	add	r3, r2
 800de16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800de1a:	461a      	mov	r2, r3
 800de1c:	7dbb      	ldrb	r3, [r7, #22]
 800de1e:	fa42 f303 	asr.w	r3, r2, r3
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	d02d      	beq.n	800de86 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800de2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d10e      	bne.n	800de4e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800de30:	7d7b      	ldrb	r3, [r7, #21]
 800de32:	b29a      	uxth	r2, r3
 800de34:	88bb      	ldrh	r3, [r7, #4]
 800de36:	4413      	add	r3, r2
 800de38:	b298      	uxth	r0, r3
 800de3a:	7dbb      	ldrb	r3, [r7, #22]
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	887b      	ldrh	r3, [r7, #2]
 800de40:	4413      	add	r3, r2
 800de42:	b29b      	uxth	r3, r3
 800de44:	883a      	ldrh	r2, [r7, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	f000 fb06 	bl	800e458 <ILI9341_Draw_Pixel>
 800de4c:	e048      	b.n	800dee0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800de4e:	7d7b      	ldrb	r3, [r7, #21]
 800de50:	b29b      	uxth	r3, r3
 800de52:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800de54:	fb12 f303 	smulbb	r3, r2, r3
 800de58:	b29a      	uxth	r2, r3
 800de5a:	88bb      	ldrh	r3, [r7, #4]
 800de5c:	4413      	add	r3, r2
 800de5e:	b298      	uxth	r0, r3
 800de60:	7dbb      	ldrb	r3, [r7, #22]
 800de62:	b29b      	uxth	r3, r3
 800de64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800de66:	fb12 f303 	smulbb	r3, r2, r3
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	887b      	ldrh	r3, [r7, #2]
 800de6e:	4413      	add	r3, r2
 800de70:	b299      	uxth	r1, r3
 800de72:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800de74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800de76:	2301      	movs	r3, #1
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	883b      	ldrh	r3, [r7, #0]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	4623      	mov	r3, r4
 800de80:	f000 fc44 	bl	800e70c <ILI9341_Draw_Rectangle>
 800de84:	e02c      	b.n	800dee0 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800de86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d10e      	bne.n	800deaa <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800de8c:	7d7b      	ldrb	r3, [r7, #21]
 800de8e:	b29a      	uxth	r2, r3
 800de90:	88bb      	ldrh	r3, [r7, #4]
 800de92:	4413      	add	r3, r2
 800de94:	b298      	uxth	r0, r3
 800de96:	7dbb      	ldrb	r3, [r7, #22]
 800de98:	b29a      	uxth	r2, r3
 800de9a:	887b      	ldrh	r3, [r7, #2]
 800de9c:	4413      	add	r3, r2
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dea2:	4619      	mov	r1, r3
 800dea4:	f000 fad8 	bl	800e458 <ILI9341_Draw_Pixel>
 800dea8:	e01a      	b.n	800dee0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800deaa:	7d7b      	ldrb	r3, [r7, #21]
 800deac:	b29b      	uxth	r3, r3
 800deae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800deb0:	fb12 f303 	smulbb	r3, r2, r3
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	88bb      	ldrh	r3, [r7, #4]
 800deb8:	4413      	add	r3, r2
 800deba:	b298      	uxth	r0, r3
 800debc:	7dbb      	ldrb	r3, [r7, #22]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dec2:	fb12 f303 	smulbb	r3, r2, r3
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	887b      	ldrh	r3, [r7, #2]
 800deca:	4413      	add	r3, r2
 800decc:	b299      	uxth	r1, r3
 800dece:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800ded0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ded2:	2301      	movs	r3, #1
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	4623      	mov	r3, r4
 800dedc:	f000 fc16 	bl	800e70c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800dee0:	7dbb      	ldrb	r3, [r7, #22]
 800dee2:	3301      	adds	r3, #1
 800dee4:	75bb      	strb	r3, [r7, #22]
 800dee6:	7dbb      	ldrb	r3, [r7, #22]
 800dee8:	2b07      	cmp	r3, #7
 800deea:	d990      	bls.n	800de0e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800deec:	7d7b      	ldrb	r3, [r7, #21]
 800deee:	3301      	adds	r3, #1
 800def0:	757b      	strb	r3, [r7, #21]
 800def2:	7d7b      	ldrb	r3, [r7, #21]
 800def4:	2b05      	cmp	r3, #5
 800def6:	d987      	bls.n	800de08 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800def8:	bf00      	nop
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	bd90      	pop	{r4, r7, pc}
 800df00:	08013a54 	.word	0x08013a54

0800df04 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b087      	sub	sp, #28
 800df08:	af02      	add	r7, sp, #8
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	4608      	mov	r0, r1
 800df0e:	4611      	mov	r1, r2
 800df10:	461a      	mov	r2, r3
 800df12:	4603      	mov	r3, r0
 800df14:	817b      	strh	r3, [r7, #10]
 800df16:	460b      	mov	r3, r1
 800df18:	813b      	strh	r3, [r7, #8]
 800df1a:	4613      	mov	r3, r2
 800df1c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800df1e:	897b      	ldrh	r3, [r7, #10]
 800df20:	3b01      	subs	r3, #1
 800df22:	b298      	uxth	r0, r3
 800df24:	8c3b      	ldrh	r3, [r7, #32]
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	b29a      	uxth	r2, r3
 800df2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df2c:	8939      	ldrh	r1, [r7, #8]
 800df2e:	f000 f9b9 	bl	800e2a4 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800df32:	897b      	ldrh	r3, [r7, #10]
 800df34:	3b02      	subs	r3, #2
 800df36:	b298      	uxth	r0, r3
 800df38:	8c3b      	ldrh	r3, [r7, #32]
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df40:	8939      	ldrh	r1, [r7, #8]
 800df42:	f000 f9af 	bl	800e2a4 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800df46:	e016      	b.n	800df76 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	60fa      	str	r2, [r7, #12]
 800df4e:	7818      	ldrb	r0, [r3, #0]
 800df50:	88fc      	ldrh	r4, [r7, #6]
 800df52:	893a      	ldrh	r2, [r7, #8]
 800df54:	8979      	ldrh	r1, [r7, #10]
 800df56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	8c3b      	ldrh	r3, [r7, #32]
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	4623      	mov	r3, r4
 800df60:	f7ff ff1c 	bl	800dd9c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800df64:	8c3b      	ldrh	r3, [r7, #32]
 800df66:	461a      	mov	r2, r3
 800df68:	0052      	lsls	r2, r2, #1
 800df6a:	4413      	add	r3, r2
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	b29a      	uxth	r2, r3
 800df70:	897b      	ldrh	r3, [r7, #10]
 800df72:	4413      	add	r3, r2
 800df74:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1e4      	bne.n	800df48 <ILI9341_Draw_Text+0x44>
    }


}
 800df7e:	bf00      	nop
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	bd90      	pop	{r4, r7, pc}

0800df86 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800df8a:	f000 fca3 	bl	800e8d4 <_LCD_Enable>
	ILI9341_SPI_Init();
 800df8e:	f000 f907 	bl	800e1a0 <ILI9341_SPI_Init>
	_LCD_Reset();
 800df92:	f000 fcaf 	bl	800e8f4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800df96:	2001      	movs	r0, #1
 800df98:	f000 fd7a 	bl	800ea90 <_LCD_SendCommand>
	HAL_Delay(2000);
 800df9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dfa0:	f7f9 ff48 	bl	8007e34 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800dfa4:	20cb      	movs	r0, #203	; 0xcb
 800dfa6:	f000 fd73 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800dfaa:	2039      	movs	r0, #57	; 0x39
 800dfac:	f000 fda2 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800dfb0:	202c      	movs	r0, #44	; 0x2c
 800dfb2:	f000 fd9f 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f000 fd9c 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x34);
 800dfbc:	2034      	movs	r0, #52	; 0x34
 800dfbe:	f000 fd99 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x02);
 800dfc2:	2002      	movs	r0, #2
 800dfc4:	f000 fd96 	bl	800eaf4 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800dfc8:	20cf      	movs	r0, #207	; 0xcf
 800dfca:	f000 fd61 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dfce:	2000      	movs	r0, #0
 800dfd0:	f000 fd90 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dfd4:	20c1      	movs	r0, #193	; 0xc1
 800dfd6:	f000 fd8d 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x30);
 800dfda:	2030      	movs	r0, #48	; 0x30
 800dfdc:	f000 fd8a 	bl	800eaf4 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800dfe0:	20e8      	movs	r0, #232	; 0xe8
 800dfe2:	f000 fd55 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800dfe6:	2085      	movs	r0, #133	; 0x85
 800dfe8:	f000 fd84 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dfec:	2000      	movs	r0, #0
 800dfee:	f000 fd81 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x78);
 800dff2:	2078      	movs	r0, #120	; 0x78
 800dff4:	f000 fd7e 	bl	800eaf4 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800dff8:	20ea      	movs	r0, #234	; 0xea
 800dffa:	f000 fd49 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dffe:	2000      	movs	r0, #0
 800e000:	f000 fd78 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e004:	2000      	movs	r0, #0
 800e006:	f000 fd75 	bl	800eaf4 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e00a:	20ed      	movs	r0, #237	; 0xed
 800e00c:	f000 fd40 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e010:	2064      	movs	r0, #100	; 0x64
 800e012:	f000 fd6f 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e016:	2003      	movs	r0, #3
 800e018:	f000 fd6c 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e01c:	2012      	movs	r0, #18
 800e01e:	f000 fd69 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e022:	2081      	movs	r0, #129	; 0x81
 800e024:	f000 fd66 	bl	800eaf4 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e028:	20f7      	movs	r0, #247	; 0xf7
 800e02a:	f000 fd31 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e02e:	2020      	movs	r0, #32
 800e030:	f000 fd60 	bl	800eaf4 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e034:	20c0      	movs	r0, #192	; 0xc0
 800e036:	f000 fd2b 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e03a:	2023      	movs	r0, #35	; 0x23
 800e03c:	f000 fd5a 	bl	800eaf4 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e040:	20c1      	movs	r0, #193	; 0xc1
 800e042:	f000 fd25 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e046:	2010      	movs	r0, #16
 800e048:	f000 fd54 	bl	800eaf4 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e04c:	20c5      	movs	r0, #197	; 0xc5
 800e04e:	f000 fd1f 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e052:	203e      	movs	r0, #62	; 0x3e
 800e054:	f000 fd4e 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e058:	2028      	movs	r0, #40	; 0x28
 800e05a:	f000 fd4b 	bl	800eaf4 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e05e:	20c7      	movs	r0, #199	; 0xc7
 800e060:	f000 fd16 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e064:	2086      	movs	r0, #134	; 0x86
 800e066:	f000 fd45 	bl	800eaf4 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e06a:	2036      	movs	r0, #54	; 0x36
 800e06c:	f000 fd10 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e070:	2048      	movs	r0, #72	; 0x48
 800e072:	f000 fd3f 	bl	800eaf4 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e076:	203a      	movs	r0, #58	; 0x3a
 800e078:	f000 fd0a 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e07c:	2055      	movs	r0, #85	; 0x55
 800e07e:	f000 fd39 	bl	800eaf4 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e082:	20b1      	movs	r0, #177	; 0xb1
 800e084:	f000 fd04 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e088:	2000      	movs	r0, #0
 800e08a:	f000 fd33 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e08e:	2018      	movs	r0, #24
 800e090:	f000 fd30 	bl	800eaf4 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e094:	20b6      	movs	r0, #182	; 0xb6
 800e096:	f000 fcfb 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e09a:	2008      	movs	r0, #8
 800e09c:	f000 fd2a 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e0a0:	2082      	movs	r0, #130	; 0x82
 800e0a2:	f000 fd27 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e0a6:	2027      	movs	r0, #39	; 0x27
 800e0a8:	f000 fd24 	bl	800eaf4 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e0ac:	20f2      	movs	r0, #242	; 0xf2
 800e0ae:	f000 fcef 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	f000 fd1e 	bl	800eaf4 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e0b8:	2026      	movs	r0, #38	; 0x26
 800e0ba:	f000 fce9 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e0be:	2001      	movs	r0, #1
 800e0c0:	f000 fd18 	bl	800eaf4 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e0c4:	20e0      	movs	r0, #224	; 0xe0
 800e0c6:	f000 fce3 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e0ca:	200f      	movs	r0, #15
 800e0cc:	f000 fd12 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e0d0:	2031      	movs	r0, #49	; 0x31
 800e0d2:	f000 fd0f 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e0d6:	202b      	movs	r0, #43	; 0x2b
 800e0d8:	f000 fd0c 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e0dc:	200c      	movs	r0, #12
 800e0de:	f000 fd09 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e0e2:	200e      	movs	r0, #14
 800e0e4:	f000 fd06 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e0e8:	2008      	movs	r0, #8
 800e0ea:	f000 fd03 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e0ee:	204e      	movs	r0, #78	; 0x4e
 800e0f0:	f000 fd00 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e0f4:	20f1      	movs	r0, #241	; 0xf1
 800e0f6:	f000 fcfd 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e0fa:	2037      	movs	r0, #55	; 0x37
 800e0fc:	f000 fcfa 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e100:	2007      	movs	r0, #7
 800e102:	f000 fcf7 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e106:	2010      	movs	r0, #16
 800e108:	f000 fcf4 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e10c:	2003      	movs	r0, #3
 800e10e:	f000 fcf1 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e112:	200e      	movs	r0, #14
 800e114:	f000 fcee 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e118:	2009      	movs	r0, #9
 800e11a:	f000 fceb 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e11e:	2000      	movs	r0, #0
 800e120:	f000 fce8 	bl	800eaf4 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e124:	20e1      	movs	r0, #225	; 0xe1
 800e126:	f000 fcb3 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e12a:	2000      	movs	r0, #0
 800e12c:	f000 fce2 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e130:	200e      	movs	r0, #14
 800e132:	f000 fcdf 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e136:	2014      	movs	r0, #20
 800e138:	f000 fcdc 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e13c:	2003      	movs	r0, #3
 800e13e:	f000 fcd9 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e142:	2011      	movs	r0, #17
 800e144:	f000 fcd6 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e148:	2007      	movs	r0, #7
 800e14a:	f000 fcd3 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e14e:	2031      	movs	r0, #49	; 0x31
 800e150:	f000 fcd0 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e154:	20c1      	movs	r0, #193	; 0xc1
 800e156:	f000 fccd 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e15a:	2048      	movs	r0, #72	; 0x48
 800e15c:	f000 fcca 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e160:	2008      	movs	r0, #8
 800e162:	f000 fcc7 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e166:	200f      	movs	r0, #15
 800e168:	f000 fcc4 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e16c:	200c      	movs	r0, #12
 800e16e:	f000 fcc1 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e172:	2031      	movs	r0, #49	; 0x31
 800e174:	f000 fcbe 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e178:	2036      	movs	r0, #54	; 0x36
 800e17a:	f000 fcbb 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e17e:	200f      	movs	r0, #15
 800e180:	f000 fcb8 	bl	800eaf4 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e184:	2011      	movs	r0, #17
 800e186:	f000 fc83 	bl	800ea90 <_LCD_SendCommand>
	HAL_Delay(240);
 800e18a:	20f0      	movs	r0, #240	; 0xf0
 800e18c:	f7f9 fe52 	bl	8007e34 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e190:	2029      	movs	r0, #41	; 0x29
 800e192:	f000 fc7d 	bl	800ea90 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e196:	2000      	movs	r0, #0
 800e198:	f000 fb4e 	bl	800e838 <ILI9341_Set_Rotation>
}
 800e19c:	bf00      	nop
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1a4:	4b0b      	ldr	r3, [pc, #44]	; (800e1d4 <ILI9341_SPI_Init+0x34>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ac:	2b40      	cmp	r3, #64	; 0x40
 800e1ae:	d005      	beq.n	800e1bc <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e1b0:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <ILI9341_SPI_Init+0x34>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a07      	ldr	r2, [pc, #28]	; (800e1d4 <ILI9341_SPI_Init+0x34>)
 800e1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ba:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1bc:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <ILI9341_SPI_Init+0x38>)
 800e1be:	695b      	ldr	r3, [r3, #20]
 800e1c0:	4a05      	ldr	r2, [pc, #20]	; (800e1d8 <ILI9341_SPI_Init+0x38>)
 800e1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1c6:	6153      	str	r3, [r2, #20]
}
 800e1c8:	bf00      	nop
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	40003c00 	.word	0x40003c00
 800e1d8:	48000400 	.word	0x48000400

0800e1dc <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e1dc:	b590      	push	{r4, r7, lr}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4623      	mov	r3, r4
 800e1ec:	80fb      	strh	r3, [r7, #6]
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	80bb      	strh	r3, [r7, #4]
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	807b      	strh	r3, [r7, #2]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e1fa:	4b28      	ldr	r3, [pc, #160]	; (800e29c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e1fc:	881b      	ldrh	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	429a      	cmp	r2, r3
 800e204:	d246      	bcs.n	800e294 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e206:	4b26      	ldr	r3, [pc, #152]	; (800e2a0 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	88ba      	ldrh	r2, [r7, #4]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d240      	bcs.n	800e294 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e212:	88fa      	ldrh	r2, [r7, #6]
 800e214:	887b      	ldrh	r3, [r7, #2]
 800e216:	4413      	add	r3, r2
 800e218:	3b01      	subs	r3, #1
 800e21a:	4a20      	ldr	r2, [pc, #128]	; (800e29c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e21c:	8812      	ldrh	r2, [r2, #0]
 800e21e:	b292      	uxth	r2, r2
 800e220:	4293      	cmp	r3, r2
 800e222:	db05      	blt.n	800e230 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e224:	4b1d      	ldr	r3, [pc, #116]	; (800e29c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	b29a      	uxth	r2, r3
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e230:	88fa      	ldrh	r2, [r7, #6]
 800e232:	887b      	ldrh	r3, [r7, #2]
 800e234:	4413      	add	r3, r2
 800e236:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e238:	3b01      	subs	r3, #1
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	88bb      	ldrh	r3, [r7, #4]
 800e23e:	88b9      	ldrh	r1, [r7, #4]
 800e240:	88f8      	ldrh	r0, [r7, #6]
 800e242:	f000 f893 	bl	800e36c <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e24a:	887b      	ldrh	r3, [r7, #2]
 800e24c:	f003 0301 	and.w	r3, r3, #1
 800e250:	2b00      	cmp	r3, #0
 800e252:	d009      	beq.n	800e268 <ILI9341_Draw_Horizontal_Line+0x8c>
 800e254:	887b      	ldrh	r3, [r7, #2]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d906      	bls.n	800e268 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e25a:	2301      	movs	r3, #1
 800e25c:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e25e:	887b      	ldrh	r3, [r7, #2]
 800e260:	085b      	lsrs	r3, r3, #1
 800e262:	b29b      	uxth	r3, r3
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e268:	887c      	ldrh	r4, [r7, #2]
 800e26a:	883a      	ldrh	r2, [r7, #0]
 800e26c:	88b9      	ldrh	r1, [r7, #4]
 800e26e:	88f8      	ldrh	r0, [r7, #6]
 800e270:	2303      	movs	r3, #3
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	4623      	mov	r3, r4
 800e276:	f000 fb5b 	bl	800e930 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00a      	beq.n	800e296 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e280:	88fa      	ldrh	r2, [r7, #6]
 800e282:	887b      	ldrh	r3, [r7, #2]
 800e284:	4413      	add	r3, r2
 800e286:	b29b      	uxth	r3, r3
 800e288:	883a      	ldrh	r2, [r7, #0]
 800e28a:	88b9      	ldrh	r1, [r7, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 f8e3 	bl	800e458 <ILI9341_Draw_Pixel>
 800e292:	e000      	b.n	800e296 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e294:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd90      	pop	{r4, r7, pc}
 800e29c:	20000cb6 	.word	0x20000cb6
 800e2a0:	20000cb4 	.word	0x20000cb4

0800e2a4 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4623      	mov	r3, r4
 800e2b4:	80fb      	strh	r3, [r7, #6]
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	80bb      	strh	r3, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	807b      	strh	r3, [r7, #2]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e2c2:	4b28      	ldr	r3, [pc, #160]	; (800e364 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	88fa      	ldrh	r2, [r7, #6]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d246      	bcs.n	800e35c <ILI9341_Draw_Vertical_Line+0xb8>
 800e2ce:	4b26      	ldr	r3, [pc, #152]	; (800e368 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	88ba      	ldrh	r2, [r7, #4]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d240      	bcs.n	800e35c <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e2da:	88ba      	ldrh	r2, [r7, #4]
 800e2dc:	887b      	ldrh	r3, [r7, #2]
 800e2de:	4413      	add	r3, r2
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	4a21      	ldr	r2, [pc, #132]	; (800e368 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e2e4:	8812      	ldrh	r2, [r2, #0]
 800e2e6:	b292      	uxth	r2, r2
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	db05      	blt.n	800e2f8 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e2ec:	4b1e      	ldr	r3, [pc, #120]	; (800e368 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	88bb      	ldrh	r3, [r7, #4]
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e2f8:	88ba      	ldrh	r2, [r7, #4]
 800e2fa:	887b      	ldrh	r3, [r7, #2]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29b      	uxth	r3, r3
 800e304:	88fa      	ldrh	r2, [r7, #6]
 800e306:	88b9      	ldrh	r1, [r7, #4]
 800e308:	88f8      	ldrh	r0, [r7, #6]
 800e30a:	f000 f82f 	bl	800e36c <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e312:	887b      	ldrh	r3, [r7, #2]
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d009      	beq.n	800e330 <ILI9341_Draw_Vertical_Line+0x8c>
 800e31c:	887b      	ldrh	r3, [r7, #2]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d906      	bls.n	800e330 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e322:	2301      	movs	r3, #1
 800e324:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	085b      	lsrs	r3, r3, #1
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d008      	beq.n	800e348 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e336:	88ba      	ldrh	r2, [r7, #4]
 800e338:	887b      	ldrh	r3, [r7, #2]
 800e33a:	4413      	add	r3, r2
 800e33c:	b299      	uxth	r1, r3
 800e33e:	883a      	ldrh	r2, [r7, #0]
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	4618      	mov	r0, r3
 800e344:	f000 f888 	bl	800e458 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e348:	887c      	ldrh	r4, [r7, #2]
 800e34a:	883a      	ldrh	r2, [r7, #0]
 800e34c:	88b9      	ldrh	r1, [r7, #4]
 800e34e:	88f8      	ldrh	r0, [r7, #6]
 800e350:	2303      	movs	r3, #3
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4623      	mov	r3, r4
 800e356:	f000 faeb 	bl	800e930 <_LCD_Write_Frame>
 800e35a:	e000      	b.n	800e35e <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e35c:	bf00      	nop
}
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	bd90      	pop	{r4, r7, pc}
 800e364:	20000cb6 	.word	0x20000cb6
 800e368:	20000cb4 	.word	0x20000cb4

0800e36c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e36c:	b590      	push	{r4, r7, lr}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	4604      	mov	r4, r0
 800e374:	4608      	mov	r0, r1
 800e376:	4611      	mov	r1, r2
 800e378:	461a      	mov	r2, r3
 800e37a:	4623      	mov	r3, r4
 800e37c:	80fb      	strh	r3, [r7, #6]
 800e37e:	4603      	mov	r3, r0
 800e380:	80bb      	strh	r3, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	807b      	strh	r3, [r7, #2]
 800e386:	4613      	mov	r3, r2
 800e388:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e38a:	202a      	movs	r0, #42	; 0x2a
 800e38c:	f000 fb80 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e390:	88fb      	ldrh	r3, [r7, #6]
 800e392:	0a1b      	lsrs	r3, r3, #8
 800e394:	b29b      	uxth	r3, r3
 800e396:	b2db      	uxtb	r3, r3
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fbab 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(sc);
 800e39e:	88fb      	ldrh	r3, [r7, #6]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 fba6 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e3a8:	887b      	ldrh	r3, [r7, #2]
 800e3aa:	0a1b      	lsrs	r3, r3, #8
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f000 fb9f 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(ec);
 800e3b6:	887b      	ldrh	r3, [r7, #2]
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 fb9a 	bl	800eaf4 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e3c0:	202b      	movs	r0, #43	; 0x2b
 800e3c2:	f000 fb65 	bl	800ea90 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e3c6:	88bb      	ldrh	r3, [r7, #4]
 800e3c8:	0a1b      	lsrs	r3, r3, #8
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 fb90 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(sp);
 800e3d4:	88bb      	ldrh	r3, [r7, #4]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 fb8b 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e3de:	883b      	ldrh	r3, [r7, #0]
 800e3e0:	0a1b      	lsrs	r3, r3, #8
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f000 fb84 	bl	800eaf4 <_LCD_SendData>
	_LCD_SendData(ep);
 800e3ec:	883b      	ldrh	r3, [r7, #0]
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f000 fb7f 	bl	800eaf4 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e3f6:	202c      	movs	r0, #44	; 0x2c
 800e3f8:	f000 fb4a 	bl	800ea90 <_LCD_SendCommand>
}
 800e3fc:	bf00      	nop
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}

0800e404 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af02      	add	r7, sp, #8
 800e40a:	4603      	mov	r3, r0
 800e40c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e40e:	4b10      	ldr	r3, [pc, #64]	; (800e450 <ILI9341_Fill_Screen+0x4c>)
 800e410:	881b      	ldrh	r3, [r3, #0]
 800e412:	b29a      	uxth	r2, r3
 800e414:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <ILI9341_Fill_Screen+0x50>)
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	2100      	movs	r1, #0
 800e41c:	2000      	movs	r0, #0
 800e41e:	f7ff ffa5 	bl	800e36c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <ILI9341_Fill_Screen+0x4c>)
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	b29b      	uxth	r3, r3
 800e428:	461a      	mov	r2, r3
 800e42a:	4b0a      	ldr	r3, [pc, #40]	; (800e454 <ILI9341_Fill_Screen+0x50>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	fb03 f302 	mul.w	r3, r3, r2
 800e434:	4619      	mov	r1, r3
 800e436:	88fa      	ldrh	r2, [r7, #6]
 800e438:	2304      	movs	r3, #4
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	460b      	mov	r3, r1
 800e43e:	2100      	movs	r1, #0
 800e440:	2000      	movs	r0, #0
 800e442:	f000 fa75 	bl	800e930 <_LCD_Write_Frame>
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	20000cb6 	.word	0x20000cb6
 800e454:	20000cb4 	.word	0x20000cb4

0800e458 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08e      	sub	sp, #56	; 0x38
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	80fb      	strh	r3, [r7, #6]
 800e462:	460b      	mov	r3, r1
 800e464:	80bb      	strh	r3, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e46a:	4b98      	ldr	r3, [pc, #608]	; (800e6cc <ILI9341_Draw_Pixel+0x274>)
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	88fa      	ldrh	r2, [r7, #6]
 800e472:	429a      	cmp	r2, r3
 800e474:	f080 8143 	bcs.w	800e6fe <ILI9341_Draw_Pixel+0x2a6>
 800e478:	4b95      	ldr	r3, [pc, #596]	; (800e6d0 <ILI9341_Draw_Pixel+0x278>)
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	88ba      	ldrh	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	f080 813c 	bcs.w	800e6fe <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e486:	4b93      	ldr	r3, [pc, #588]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e488:	695b      	ldr	r3, [r3, #20]
 800e48a:	4a92      	ldr	r2, [pc, #584]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e490:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e492:	4b90      	ldr	r3, [pc, #576]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	4a8f      	ldr	r2, [pc, #572]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e49c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e49e:	220a      	movs	r2, #10
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	202a      	movs	r0, #42	; 0x2a
 800e4a4:	f000 fb58 	bl	800eb58 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e4ac:	e008      	b.n	800e4c0 <ILI9341_Draw_Pixel+0x68>
 800e4ae:	4b89      	ldr	r3, [pc, #548]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	4a88      	ldr	r2, [pc, #544]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4b8:	6153      	str	r3, [r2, #20]
 800e4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4bc:	3301      	adds	r3, #1
 800e4be:	637b      	str	r3, [r7, #52]	; 0x34
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	ddf3      	ble.n	800e4ae <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e4c6:	4b83      	ldr	r3, [pc, #524]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	4a82      	ldr	r2, [pc, #520]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e4d2:	4b80      	ldr	r3, [pc, #512]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4d4:	695b      	ldr	r3, [r3, #20]
 800e4d6:	4a7f      	ldr	r2, [pc, #508]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4dc:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e4de:	4b7d      	ldr	r3, [pc, #500]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	4a7c      	ldr	r2, [pc, #496]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e4e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4e8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e4ea:	88fb      	ldrh	r3, [r7, #6]
 800e4ec:	0a1b      	lsrs	r3, r3, #8
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	753b      	strb	r3, [r7, #20]
 800e4f4:	88fb      	ldrh	r3, [r7, #6]
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	757b      	strb	r3, [r7, #21]
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	121b      	asrs	r3, r3, #8
 800e500:	b2db      	uxtb	r3, r3
 800e502:	75bb      	strb	r3, [r7, #22]
 800e504:	88fb      	ldrh	r3, [r7, #6]
 800e506:	b2db      	uxtb	r3, r3
 800e508:	3301      	adds	r3, #1
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e50e:	f107 0014 	add.w	r0, r7, #20
 800e512:	230a      	movs	r3, #10
 800e514:	2200      	movs	r2, #0
 800e516:	2104      	movs	r1, #4
 800e518:	f000 fb50 	bl	800ebbc <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e51c:	2300      	movs	r3, #0
 800e51e:	633b      	str	r3, [r7, #48]	; 0x30
 800e520:	e008      	b.n	800e534 <ILI9341_Draw_Pixel+0xdc>
 800e522:	4b6c      	ldr	r3, [pc, #432]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	4a6b      	ldr	r2, [pc, #428]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e52c:	6153      	str	r3, [r2, #20]
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	3301      	adds	r3, #1
 800e532:	633b      	str	r3, [r7, #48]	; 0x30
 800e534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e536:	2b02      	cmp	r3, #2
 800e538:	ddf3      	ble.n	800e522 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e53a:	4b66      	ldr	r3, [pc, #408]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	4a65      	ldr	r2, [pc, #404]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e544:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e546:	4b63      	ldr	r3, [pc, #396]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	4a62      	ldr	r2, [pc, #392]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e550:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e552:	4b60      	ldr	r3, [pc, #384]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e554:	695b      	ldr	r3, [r3, #20]
 800e556:	4a5f      	ldr	r2, [pc, #380]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e55c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e55e:	220a      	movs	r2, #10
 800e560:	2100      	movs	r1, #0
 800e562:	202b      	movs	r0, #43	; 0x2b
 800e564:	f000 faf8 	bl	800eb58 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e568:	2300      	movs	r3, #0
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e56c:	e008      	b.n	800e580 <ILI9341_Draw_Pixel+0x128>
 800e56e:	4b59      	ldr	r3, [pc, #356]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	4a58      	ldr	r2, [pc, #352]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e578:	6153      	str	r3, [r2, #20]
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	3301      	adds	r3, #1
 800e57e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	2b02      	cmp	r3, #2
 800e584:	ddf3      	ble.n	800e56e <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e586:	4b53      	ldr	r3, [pc, #332]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	4a52      	ldr	r2, [pc, #328]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e590:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e592:	4b50      	ldr	r3, [pc, #320]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	4a4f      	ldr	r2, [pc, #316]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e59c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e59e:	4b4d      	ldr	r3, [pc, #308]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	4a4c      	ldr	r2, [pc, #304]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e5aa:	88bb      	ldrh	r3, [r7, #4]
 800e5ac:	0a1b      	lsrs	r3, r3, #8
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	743b      	strb	r3, [r7, #16]
 800e5b4:	88bb      	ldrh	r3, [r7, #4]
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	747b      	strb	r3, [r7, #17]
 800e5ba:	88bb      	ldrh	r3, [r7, #4]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	121b      	asrs	r3, r3, #8
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	74bb      	strb	r3, [r7, #18]
 800e5c4:	88bb      	ldrh	r3, [r7, #4]
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e5ce:	f107 0010 	add.w	r0, r7, #16
 800e5d2:	230a      	movs	r3, #10
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	2104      	movs	r1, #4
 800e5d8:	f000 faf0 	bl	800ebbc <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5dc:	2300      	movs	r3, #0
 800e5de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5e0:	e008      	b.n	800e5f4 <ILI9341_Draw_Pixel+0x19c>
 800e5e2:	4b3c      	ldr	r3, [pc, #240]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e5e4:	695b      	ldr	r3, [r3, #20]
 800e5e6:	4a3b      	ldr	r2, [pc, #236]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e5e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ec:	6153      	str	r3, [r2, #20]
 800e5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	ddf3      	ble.n	800e5e2 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e5fa:	4b36      	ldr	r3, [pc, #216]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4a35      	ldr	r2, [pc, #212]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e604:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e606:	4b33      	ldr	r3, [pc, #204]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e608:	695b      	ldr	r3, [r3, #20]
 800e60a:	4a32      	ldr	r2, [pc, #200]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e610:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e612:	4b30      	ldr	r3, [pc, #192]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	4a2f      	ldr	r2, [pc, #188]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e61c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e61e:	220a      	movs	r2, #10
 800e620:	2100      	movs	r1, #0
 800e622:	202c      	movs	r0, #44	; 0x2c
 800e624:	f000 fa98 	bl	800eb58 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e628:	2300      	movs	r3, #0
 800e62a:	627b      	str	r3, [r7, #36]	; 0x24
 800e62c:	e008      	b.n	800e640 <ILI9341_Draw_Pixel+0x1e8>
 800e62e:	4b29      	ldr	r3, [pc, #164]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	4a28      	ldr	r2, [pc, #160]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e638:	6153      	str	r3, [r2, #20]
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	3301      	adds	r3, #1
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	2b02      	cmp	r3, #2
 800e644:	ddf3      	ble.n	800e62e <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e646:	4b23      	ldr	r3, [pc, #140]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	4a22      	ldr	r2, [pc, #136]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e650:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e652:	4b20      	ldr	r3, [pc, #128]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	4a1f      	ldr	r2, [pc, #124]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e65c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e65e:	4b1d      	ldr	r3, [pc, #116]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e660:	695b      	ldr	r3, [r3, #20]
 800e662:	4a1c      	ldr	r2, [pc, #112]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e668:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e66a:	887b      	ldrh	r3, [r7, #2]
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	b29b      	uxth	r3, r3
 800e670:	b2db      	uxtb	r3, r3
 800e672:	733b      	strb	r3, [r7, #12]
 800e674:	887b      	ldrh	r3, [r7, #2]
 800e676:	b2db      	uxtb	r3, r3
 800e678:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e67a:	f107 000c 	add.w	r0, r7, #12
 800e67e:	2301      	movs	r3, #1
 800e680:	2200      	movs	r2, #0
 800e682:	2102      	movs	r1, #2
 800e684:	f000 fa9a 	bl	800ebbc <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e688:	2300      	movs	r3, #0
 800e68a:	623b      	str	r3, [r7, #32]
 800e68c:	e008      	b.n	800e6a0 <ILI9341_Draw_Pixel+0x248>
 800e68e:	4b11      	ldr	r3, [pc, #68]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	4a10      	ldr	r2, [pc, #64]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e698:	6153      	str	r3, [r2, #20]
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	3301      	adds	r3, #1
 800e69e:	623b      	str	r3, [r7, #32]
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	ddf3      	ble.n	800e68e <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	61fb      	str	r3, [r7, #28]
 800e6aa:	e008      	b.n	800e6be <ILI9341_Draw_Pixel+0x266>
 800e6ac:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e6ae:	695b      	ldr	r3, [r3, #20]
 800e6b0:	4a08      	ldr	r2, [pc, #32]	; (800e6d4 <ILI9341_Draw_Pixel+0x27c>)
 800e6b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6b6:	6153      	str	r3, [r2, #20]
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	61fb      	str	r3, [r7, #28]
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	ddf3      	ble.n	800e6ac <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	61bb      	str	r3, [r7, #24]
 800e6c8:	e00f      	b.n	800e6ea <ILI9341_Draw_Pixel+0x292>
 800e6ca:	bf00      	nop
 800e6cc:	20000cb6 	.word	0x20000cb6
 800e6d0:	20000cb4 	.word	0x20000cb4
 800e6d4:	48000400 	.word	0x48000400
 800e6d8:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <ILI9341_Draw_Pixel+0x2b0>)
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	4a0a      	ldr	r2, [pc, #40]	; (800e708 <ILI9341_Draw_Pixel+0x2b0>)
 800e6de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6e2:	6153      	str	r3, [r2, #20]
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	61bb      	str	r3, [r7, #24]
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	ddf3      	ble.n	800e6d8 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e6f0:	4b05      	ldr	r3, [pc, #20]	; (800e708 <ILI9341_Draw_Pixel+0x2b0>)
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	4a04      	ldr	r2, [pc, #16]	; (800e708 <ILI9341_Draw_Pixel+0x2b0>)
 800e6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6fa:	6153      	str	r3, [r2, #20]
 800e6fc:	e000      	b.n	800e700 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e6fe:	bf00      	nop


}
 800e700:	3738      	adds	r7, #56	; 0x38
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	48000400 	.word	0x48000400

0800e70c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e70c:	b590      	push	{r4, r7, lr}
 800e70e:	b087      	sub	sp, #28
 800e710:	af02      	add	r7, sp, #8
 800e712:	4604      	mov	r4, r0
 800e714:	4608      	mov	r0, r1
 800e716:	4611      	mov	r1, r2
 800e718:	461a      	mov	r2, r3
 800e71a:	4623      	mov	r3, r4
 800e71c:	80fb      	strh	r3, [r7, #6]
 800e71e:	4603      	mov	r3, r0
 800e720:	80bb      	strh	r3, [r7, #4]
 800e722:	460b      	mov	r3, r1
 800e724:	807b      	strh	r3, [r7, #2]
 800e726:	4613      	mov	r3, r2
 800e728:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e72a:	4b41      	ldr	r3, [pc, #260]	; (800e830 <ILI9341_Draw_Rectangle+0x124>)
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	b29b      	uxth	r3, r3
 800e730:	88fa      	ldrh	r2, [r7, #6]
 800e732:	429a      	cmp	r2, r3
 800e734:	d278      	bcs.n	800e828 <ILI9341_Draw_Rectangle+0x11c>
 800e736:	4b3f      	ldr	r3, [pc, #252]	; (800e834 <ILI9341_Draw_Rectangle+0x128>)
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	88ba      	ldrh	r2, [r7, #4]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d272      	bcs.n	800e828 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e742:	88fa      	ldrh	r2, [r7, #6]
 800e744:	887b      	ldrh	r3, [r7, #2]
 800e746:	4413      	add	r3, r2
 800e748:	3b01      	subs	r3, #1
 800e74a:	4a39      	ldr	r2, [pc, #228]	; (800e830 <ILI9341_Draw_Rectangle+0x124>)
 800e74c:	8812      	ldrh	r2, [r2, #0]
 800e74e:	b292      	uxth	r2, r2
 800e750:	4293      	cmp	r3, r2
 800e752:	db05      	blt.n	800e760 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e754:	4b36      	ldr	r3, [pc, #216]	; (800e830 <ILI9341_Draw_Rectangle+0x124>)
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	b29a      	uxth	r2, r3
 800e75a:	88fb      	ldrh	r3, [r7, #6]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e760:	88ba      	ldrh	r2, [r7, #4]
 800e762:	883b      	ldrh	r3, [r7, #0]
 800e764:	4413      	add	r3, r2
 800e766:	3b01      	subs	r3, #1
 800e768:	4a32      	ldr	r2, [pc, #200]	; (800e834 <ILI9341_Draw_Rectangle+0x128>)
 800e76a:	8812      	ldrh	r2, [r2, #0]
 800e76c:	b292      	uxth	r2, r2
 800e76e:	4293      	cmp	r3, r2
 800e770:	db05      	blt.n	800e77e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e772:	4b30      	ldr	r3, [pc, #192]	; (800e834 <ILI9341_Draw_Rectangle+0x128>)
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	b29a      	uxth	r2, r3
 800e778:	88bb      	ldrh	r3, [r7, #4]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e77e:	88fa      	ldrh	r2, [r7, #6]
 800e780:	887b      	ldrh	r3, [r7, #2]
 800e782:	4413      	add	r3, r2
 800e784:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e786:	3b01      	subs	r3, #1
 800e788:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e78a:	88ba      	ldrh	r2, [r7, #4]
 800e78c:	883b      	ldrh	r3, [r7, #0]
 800e78e:	4413      	add	r3, r2
 800e790:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e792:	3b01      	subs	r3, #1
 800e794:	b29b      	uxth	r3, r3
 800e796:	88b9      	ldrh	r1, [r7, #4]
 800e798:	88f8      	ldrh	r0, [r7, #6]
 800e79a:	4622      	mov	r2, r4
 800e79c:	f7ff fde6 	bl	800e36c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e7a0:	883a      	ldrh	r2, [r7, #0]
 800e7a2:	887b      	ldrh	r3, [r7, #2]
 800e7a4:	fb12 f303 	smulbb	r3, r2, r3
 800e7a8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e7ae:	89fb      	ldrh	r3, [r7, #14]
 800e7b0:	f003 0301 	and.w	r3, r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <ILI9341_Draw_Rectangle+0xc0>
 800e7b8:	89fb      	ldrh	r3, [r7, #14]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d906      	bls.n	800e7cc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e7c2:	89fb      	ldrh	r3, [r7, #14]
 800e7c4:	085b      	lsrs	r3, r3, #1
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	005b      	lsls	r3, r3, #1
 800e7ca:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e7cc:	89fc      	ldrh	r4, [r7, #14]
 800e7ce:	8c3a      	ldrh	r2, [r7, #32]
 800e7d0:	88b9      	ldrh	r1, [r7, #4]
 800e7d2:	88f8      	ldrh	r0, [r7, #6]
 800e7d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	4623      	mov	r3, r4
 800e7dc:	f000 f8a8 	bl	800e930 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e7e0:	7b7b      	ldrb	r3, [r7, #13]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d021      	beq.n	800e82a <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e7e6:	88fa      	ldrh	r2, [r7, #6]
 800e7e8:	887b      	ldrh	r3, [r7, #2]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	3b02      	subs	r3, #2
 800e7f0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e7f2:	88ba      	ldrh	r2, [r7, #4]
 800e7f4:	883b      	ldrh	r3, [r7, #0]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	8c3a      	ldrh	r2, [r7, #32]
 800e800:	4619      	mov	r1, r3
 800e802:	f7ff fe29 	bl	800e458 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e806:	88fa      	ldrh	r2, [r7, #6]
 800e808:	887b      	ldrh	r3, [r7, #2]
 800e80a:	4413      	add	r3, r2
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e812:	88ba      	ldrh	r2, [r7, #4]
 800e814:	883b      	ldrh	r3, [r7, #0]
 800e816:	4413      	add	r3, r2
 800e818:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e81a:	3b01      	subs	r3, #1
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	8c3a      	ldrh	r2, [r7, #32]
 800e820:	4619      	mov	r1, r3
 800e822:	f7ff fe19 	bl	800e458 <ILI9341_Draw_Pixel>
 800e826:	e000      	b.n	800e82a <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e828:	bf00      	nop
							colour);
	}
}
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd90      	pop	{r4, r7, pc}
 800e830:	20000cb6 	.word	0x20000cb6
 800e834:	20000cb4 	.word	0x20000cb4

0800e838 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e842:	79fb      	ldrb	r3, [r7, #7]
 800e844:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e846:	2036      	movs	r0, #54	; 0x36
 800e848:	f000 f922 	bl	800ea90 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e84c:	7bfb      	ldrb	r3, [r7, #15]
 800e84e:	2b03      	cmp	r3, #3
 800e850:	d836      	bhi.n	800e8c0 <ILI9341_Set_Rotation+0x88>
 800e852:	a201      	add	r2, pc, #4	; (adr r2, 800e858 <ILI9341_Set_Rotation+0x20>)
 800e854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e858:	0800e869 	.word	0x0800e869
 800e85c:	0800e87f 	.word	0x0800e87f
 800e860:	0800e895 	.word	0x0800e895
 800e864:	0800e8ab 	.word	0x0800e8ab
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e868:	2048      	movs	r0, #72	; 0x48
 800e86a:	f000 f943 	bl	800eaf4 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e86e:	4b17      	ldr	r3, [pc, #92]	; (800e8cc <ILI9341_Set_Rotation+0x94>)
 800e870:	22f0      	movs	r2, #240	; 0xf0
 800e872:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e874:	4b16      	ldr	r3, [pc, #88]	; (800e8d0 <ILI9341_Set_Rotation+0x98>)
 800e876:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e87a:	801a      	strh	r2, [r3, #0]
			break;
 800e87c:	e021      	b.n	800e8c2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e87e:	2028      	movs	r0, #40	; 0x28
 800e880:	f000 f938 	bl	800eaf4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e884:	4b11      	ldr	r3, [pc, #68]	; (800e8cc <ILI9341_Set_Rotation+0x94>)
 800e886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e88a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e88c:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <ILI9341_Set_Rotation+0x98>)
 800e88e:	22f0      	movs	r2, #240	; 0xf0
 800e890:	801a      	strh	r2, [r3, #0]
			break;
 800e892:	e016      	b.n	800e8c2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e894:	2088      	movs	r0, #136	; 0x88
 800e896:	f000 f92d 	bl	800eaf4 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e89a:	4b0c      	ldr	r3, [pc, #48]	; (800e8cc <ILI9341_Set_Rotation+0x94>)
 800e89c:	22f0      	movs	r2, #240	; 0xf0
 800e89e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	; (800e8d0 <ILI9341_Set_Rotation+0x98>)
 800e8a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e8a6:	801a      	strh	r2, [r3, #0]
			break;
 800e8a8:	e00b      	b.n	800e8c2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e8aa:	20e8      	movs	r0, #232	; 0xe8
 800e8ac:	f000 f922 	bl	800eaf4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e8b0:	4b06      	ldr	r3, [pc, #24]	; (800e8cc <ILI9341_Set_Rotation+0x94>)
 800e8b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e8b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e8b8:	4b05      	ldr	r3, [pc, #20]	; (800e8d0 <ILI9341_Set_Rotation+0x98>)
 800e8ba:	22f0      	movs	r2, #240	; 0xf0
 800e8bc:	801a      	strh	r2, [r3, #0]
			break;
 800e8be:	e000      	b.n	800e8c2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e8c0:	bf00      	nop
	}
}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000cb6 	.word	0x20000cb6
 800e8d0:	20000cb4 	.word	0x20000cb4

0800e8d4 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e8d8:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <_LCD_Enable+0x1c>)
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	4a04      	ldr	r2, [pc, #16]	; (800e8f0 <_LCD_Enable+0x1c>)
 800e8de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e8e2:	6153      	str	r3, [r2, #20]
}
 800e8e4:	bf00      	nop
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	48000400 	.word	0x48000400

0800e8f4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e8f8:	4b0c      	ldr	r3, [pc, #48]	; (800e92c <_LCD_Reset+0x38>)
 800e8fa:	695b      	ldr	r3, [r3, #20]
 800e8fc:	4a0b      	ldr	r2, [pc, #44]	; (800e92c <_LCD_Reset+0x38>)
 800e8fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e902:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e904:	20c8      	movs	r0, #200	; 0xc8
 800e906:	f7f9 fa95 	bl	8007e34 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e90a:	4b08      	ldr	r3, [pc, #32]	; (800e92c <_LCD_Reset+0x38>)
 800e90c:	695b      	ldr	r3, [r3, #20]
 800e90e:	4a07      	ldr	r2, [pc, #28]	; (800e92c <_LCD_Reset+0x38>)
 800e910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e914:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e916:	20c8      	movs	r0, #200	; 0xc8
 800e918:	f7f9 fa8c 	bl	8007e34 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e91c:	4b03      	ldr	r3, [pc, #12]	; (800e92c <_LCD_Reset+0x38>)
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	4a02      	ldr	r2, [pc, #8]	; (800e92c <_LCD_Reset+0x38>)
 800e922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e926:	6153      	str	r3, [r2, #20]
}
 800e928:	bf00      	nop
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	48000400 	.word	0x48000400

0800e930 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e930:	b5b0      	push	{r4, r5, r7, lr}
 800e932:	b08e      	sub	sp, #56	; 0x38
 800e934:	af00      	add	r7, sp, #0
 800e936:	607b      	str	r3, [r7, #4]
 800e938:	4603      	mov	r3, r0
 800e93a:	81fb      	strh	r3, [r7, #14]
 800e93c:	460b      	mov	r3, r1
 800e93e:	81bb      	strh	r3, [r7, #12]
 800e940:	4613      	mov	r3, r2
 800e942:	817b      	strh	r3, [r7, #10]
 800e944:	466b      	mov	r3, sp
 800e946:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e948:	2300      	movs	r3, #0
 800e94a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4a4d      	ldr	r2, [pc, #308]	; (800ea88 <_LCD_Write_Frame+0x158>)
 800e952:	8812      	ldrh	r2, [r2, #0]
 800e954:	4293      	cmp	r3, r2
 800e956:	d202      	bcs.n	800e95e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e95c:	e002      	b.n	800e964 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e95e:	4b4a      	ldr	r3, [pc, #296]	; (800ea88 <_LCD_Write_Frame+0x158>)
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e964:	897b      	ldrh	r3, [r7, #10]
 800e966:	0a1b      	lsrs	r3, r3, #8
 800e968:	b29b      	uxth	r3, r3
 800e96a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e96e:	4603      	mov	r3, r0
 800e970:	3b01      	subs	r3, #1
 800e972:	61bb      	str	r3, [r7, #24]
 800e974:	4601      	mov	r1, r0
 800e976:	f04f 0200 	mov.w	r2, #0
 800e97a:	f04f 0300 	mov.w	r3, #0
 800e97e:	f04f 0400 	mov.w	r4, #0
 800e982:	00d4      	lsls	r4, r2, #3
 800e984:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e988:	00cb      	lsls	r3, r1, #3
 800e98a:	4601      	mov	r1, r0
 800e98c:	f04f 0200 	mov.w	r2, #0
 800e990:	f04f 0300 	mov.w	r3, #0
 800e994:	f04f 0400 	mov.w	r4, #0
 800e998:	00d4      	lsls	r4, r2, #3
 800e99a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e99e:	00cb      	lsls	r3, r1, #3
 800e9a0:	1dc3      	adds	r3, r0, #7
 800e9a2:	08db      	lsrs	r3, r3, #3
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	ebad 0d03 	sub.w	sp, sp, r3
 800e9aa:	466b      	mov	r3, sp
 800e9ac:	3300      	adds	r3, #0
 800e9ae:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	633b      	str	r3, [r7, #48]	; 0x30
 800e9b4:	e00d      	b.n	800e9d2 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ba:	4413      	add	r3, r2
 800e9bc:	7ffa      	ldrb	r2, [r7, #31]
 800e9be:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	897a      	ldrh	r2, [r7, #10]
 800e9c6:	b2d1      	uxtb	r1, r2
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	3302      	adds	r3, #2
 800e9d0:	633b      	str	r3, [r7, #48]	; 0x30
 800e9d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d3ed      	bcc.n	800e9b6 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00d      	beq.n	800ea0a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e9ee:	693a      	ldr	r2, [r7, #16]
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea02:	fb01 f202 	mul.w	r2, r1, r2
 800ea06:	1a9b      	subs	r3, r3, r2
 800ea08:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ea0a:	4b20      	ldr	r3, [pc, #128]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	4a1f      	ldr	r2, [pc, #124]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea14:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ea16:	4b1d      	ldr	r3, [pc, #116]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	4a1c      	ldr	r2, [pc, #112]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea20:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800ea22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00f      	beq.n	800ea48 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea2c:	e008      	b.n	800ea40 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800ea2e:	6978      	ldr	r0, [r7, #20]
 800ea30:	230a      	movs	r3, #10
 800ea32:	2200      	movs	r2, #0
 800ea34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea36:	f000 f8c1 	bl	800ebbc <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d3f2      	bcc.n	800ea2e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800ea48:	6978      	ldr	r0, [r7, #20]
 800ea4a:	230a      	movs	r3, #10
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea50:	f000 f8b4 	bl	800ebbc <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ea54:	2300      	movs	r3, #0
 800ea56:	623b      	str	r3, [r7, #32]
 800ea58:	e008      	b.n	800ea6c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ea5a:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea5c:	695b      	ldr	r3, [r3, #20]
 800ea5e:	4a0b      	ldr	r2, [pc, #44]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea64:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	623b      	str	r3, [r7, #32]
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	ddf3      	ble.n	800ea5a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ea72:	4b06      	ldr	r3, [pc, #24]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea74:	695b      	ldr	r3, [r3, #20]
 800ea76:	4a05      	ldr	r2, [pc, #20]	; (800ea8c <_LCD_Write_Frame+0x15c>)
 800ea78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea7c:	6153      	str	r3, [r2, #20]
 800ea7e:	46ad      	mov	sp, r5

}
 800ea80:	bf00      	nop
 800ea82:	3738      	adds	r7, #56	; 0x38
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bdb0      	pop	{r4, r5, r7, pc}
 800ea88:	20000cb8 	.word	0x20000cb8
 800ea8c:	48000400 	.word	0x48000400

0800ea90 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	4603      	mov	r3, r0
 800ea98:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ea9a:	4b15      	ldr	r3, [pc, #84]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800ea9c:	695b      	ldr	r3, [r3, #20]
 800ea9e:	4a14      	ldr	r2, [pc, #80]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eaa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eaa4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800eaa6:	4b12      	ldr	r3, [pc, #72]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	4a11      	ldr	r2, [pc, #68]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eaac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	2200      	movs	r2, #0
 800eab6:	2100      	movs	r1, #0
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 f84d 	bl	800eb58 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eabe:	2300      	movs	r3, #0
 800eac0:	60fb      	str	r3, [r7, #12]
 800eac2:	e008      	b.n	800ead6 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eac4:	4b0a      	ldr	r3, [pc, #40]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	4a09      	ldr	r2, [pc, #36]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eaca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eace:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	3301      	adds	r3, #1
 800ead4:	60fb      	str	r3, [r7, #12]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b02      	cmp	r3, #2
 800eada:	ddf3      	ble.n	800eac4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eadc:	4b04      	ldr	r3, [pc, #16]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eade:	695b      	ldr	r3, [r3, #20]
 800eae0:	4a03      	ldr	r2, [pc, #12]	; (800eaf0 <_LCD_SendCommand+0x60>)
 800eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae6:	6153      	str	r3, [r2, #20]
}
 800eae8:	bf00      	nop
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	48000400 	.word	0x48000400

0800eaf4 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	4603      	mov	r3, r0
 800eafc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800eafe:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <_LCD_SendData+0x60>)
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	4a14      	ldr	r2, [pc, #80]	; (800eb54 <_LCD_SendData+0x60>)
 800eb04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb08:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb0a:	4b12      	ldr	r3, [pc, #72]	; (800eb54 <_LCD_SendData+0x60>)
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	4a11      	ldr	r2, [pc, #68]	; (800eb54 <_LCD_SendData+0x60>)
 800eb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb14:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 f81b 	bl	800eb58 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]
 800eb26:	e008      	b.n	800eb3a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <_LCD_SendData+0x60>)
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	4a09      	ldr	r2, [pc, #36]	; (800eb54 <_LCD_SendData+0x60>)
 800eb2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb32:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3301      	adds	r3, #1
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	ddf3      	ble.n	800eb28 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb40:	4b04      	ldr	r3, [pc, #16]	; (800eb54 <_LCD_SendData+0x60>)
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	4a03      	ldr	r2, [pc, #12]	; (800eb54 <_LCD_SendData+0x60>)
 800eb46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb4a:	6153      	str	r3, [r2, #20]
}
 800eb4c:	bf00      	nop
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	48000400 	.word	0x48000400

0800eb58 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	71fb      	strb	r3, [r7, #7]
 800eb62:	460b      	mov	r3, r1
 800eb64:	71bb      	strb	r3, [r7, #6]
 800eb66:	4613      	mov	r3, r2
 800eb68:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	e003      	b.n	800eb78 <_SPI_SendByte+0x20>
   		asm("nop");
 800eb70:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	3301      	adds	r3, #1
 800eb76:	60fb      	str	r3, [r7, #12]
 800eb78:	79bb      	ldrb	r3, [r7, #6]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	dbf7      	blt.n	800eb70 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800eb80:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <_SPI_SendByte+0x5c>)
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	f003 0302 	and.w	r3, r3, #2
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d102      	bne.n	800eb92 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800eb8c:	4a0a      	ldr	r2, [pc, #40]	; (800ebb8 <_SPI_SendByte+0x60>)
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800eb92:	2300      	movs	r3, #0
 800eb94:	60bb      	str	r3, [r7, #8]
 800eb96:	e003      	b.n	800eba0 <_SPI_SendByte+0x48>
   		asm("nop");
 800eb98:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	60bb      	str	r3, [r7, #8]
 800eba0:	797b      	ldrb	r3, [r7, #5]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	dbf7      	blt.n	800eb98 <_SPI_SendByte+0x40>

#endif

}
 800eba8:	bf00      	nop
 800ebaa:	3714      	adds	r7, #20
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr
 800ebb4:	40003c00 	.word	0x40003c00
 800ebb8:	40003c0c 	.word	0x40003c0c

0800ebbc <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b089      	sub	sp, #36	; 0x24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	461a      	mov	r2, r3
 800ebca:	460b      	mov	r3, r1
 800ebcc:	71fb      	strb	r3, [r7, #7]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	61fb      	str	r3, [r7, #28]
 800ebd6:	e003      	b.n	800ebe0 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ebd8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	61fb      	str	r3, [r7, #28]
 800ebe0:	79fb      	ldrb	r3, [r7, #7]
 800ebe2:	69fa      	ldr	r2, [r7, #28]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	dbf7      	blt.n	800ebd8 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ebec:	e01d      	b.n	800ec2a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ebee:	4b1c      	ldr	r3, [pc, #112]	; (800ec60 <_SPI_SendByteMultiByte+0xa4>)
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f003 0302 	and.w	r3, r3, #2
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d117      	bne.n	800ec2a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d90a      	bls.n	800ec16 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	881a      	ldrh	r2, [r3, #0]
 800ec04:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <_SPI_SendByteMultiByte+0xa4>)
 800ec06:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	3302      	adds	r3, #2
 800ec0c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	3b02      	subs	r3, #2
 800ec12:	60bb      	str	r3, [r7, #8]
 800ec14:	e009      	b.n	800ec2a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ec16:	4a13      	ldr	r2, [pc, #76]	; (800ec64 <_SPI_SendByteMultiByte+0xa8>)
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	3301      	adds	r3, #1
 800ec22:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	3b01      	subs	r3, #1
 800ec28:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1de      	bne.n	800ebee <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800ec30:	4b0b      	ldr	r3, [pc, #44]	; (800ec60 <_SPI_SendByteMultiByte+0xa4>)
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	4a0a      	ldr	r2, [pc, #40]	; (800ec60 <_SPI_SendByteMultiByte+0xa4>)
 800ec36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec3a:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	e003      	b.n	800ec4a <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800ec42:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	3301      	adds	r3, #1
 800ec48:	617b      	str	r3, [r7, #20]
 800ec4a:	79bb      	ldrb	r3, [r7, #6]
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	dbf7      	blt.n	800ec42 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800ec52:	bf00      	nop
 800ec54:	3724      	adds	r7, #36	; 0x24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	40003c00 	.word	0x40003c00
 800ec64:	40003c0c 	.word	0x40003c0c

0800ec68 <__errno>:
 800ec68:	4b01      	ldr	r3, [pc, #4]	; (800ec70 <__errno+0x8>)
 800ec6a:	6818      	ldr	r0, [r3, #0]
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	20001cac 	.word	0x20001cac

0800ec74 <__libc_init_array>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	4e0d      	ldr	r6, [pc, #52]	; (800ecac <__libc_init_array+0x38>)
 800ec78:	4c0d      	ldr	r4, [pc, #52]	; (800ecb0 <__libc_init_array+0x3c>)
 800ec7a:	1ba4      	subs	r4, r4, r6
 800ec7c:	10a4      	asrs	r4, r4, #2
 800ec7e:	2500      	movs	r5, #0
 800ec80:	42a5      	cmp	r5, r4
 800ec82:	d109      	bne.n	800ec98 <__libc_init_array+0x24>
 800ec84:	4e0b      	ldr	r6, [pc, #44]	; (800ecb4 <__libc_init_array+0x40>)
 800ec86:	4c0c      	ldr	r4, [pc, #48]	; (800ecb8 <__libc_init_array+0x44>)
 800ec88:	f003 ff48 	bl	8012b1c <_init>
 800ec8c:	1ba4      	subs	r4, r4, r6
 800ec8e:	10a4      	asrs	r4, r4, #2
 800ec90:	2500      	movs	r5, #0
 800ec92:	42a5      	cmp	r5, r4
 800ec94:	d105      	bne.n	800eca2 <__libc_init_array+0x2e>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec9c:	4798      	blx	r3
 800ec9e:	3501      	adds	r5, #1
 800eca0:	e7ee      	b.n	800ec80 <__libc_init_array+0xc>
 800eca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eca6:	4798      	blx	r3
 800eca8:	3501      	adds	r5, #1
 800ecaa:	e7f2      	b.n	800ec92 <__libc_init_array+0x1e>
 800ecac:	08013fa0 	.word	0x08013fa0
 800ecb0:	08013fa0 	.word	0x08013fa0
 800ecb4:	08013fa0 	.word	0x08013fa0
 800ecb8:	08013fa4 	.word	0x08013fa4

0800ecbc <memset>:
 800ecbc:	4402      	add	r2, r0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d100      	bne.n	800ecc6 <memset+0xa>
 800ecc4:	4770      	bx	lr
 800ecc6:	f803 1b01 	strb.w	r1, [r3], #1
 800ecca:	e7f9      	b.n	800ecc0 <memset+0x4>

0800eccc <__cvt>:
 800eccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd0:	ec55 4b10 	vmov	r4, r5, d0
 800ecd4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ecd6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	460e      	mov	r6, r1
 800ecde:	4691      	mov	r9, r2
 800ece0:	4619      	mov	r1, r3
 800ece2:	bfb8      	it	lt
 800ece4:	4622      	movlt	r2, r4
 800ece6:	462b      	mov	r3, r5
 800ece8:	f027 0720 	bic.w	r7, r7, #32
 800ecec:	bfbb      	ittet	lt
 800ecee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ecf2:	461d      	movlt	r5, r3
 800ecf4:	2300      	movge	r3, #0
 800ecf6:	232d      	movlt	r3, #45	; 0x2d
 800ecf8:	bfb8      	it	lt
 800ecfa:	4614      	movlt	r4, r2
 800ecfc:	2f46      	cmp	r7, #70	; 0x46
 800ecfe:	700b      	strb	r3, [r1, #0]
 800ed00:	d004      	beq.n	800ed0c <__cvt+0x40>
 800ed02:	2f45      	cmp	r7, #69	; 0x45
 800ed04:	d100      	bne.n	800ed08 <__cvt+0x3c>
 800ed06:	3601      	adds	r6, #1
 800ed08:	2102      	movs	r1, #2
 800ed0a:	e000      	b.n	800ed0e <__cvt+0x42>
 800ed0c:	2103      	movs	r1, #3
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	ab02      	add	r3, sp, #8
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	4632      	mov	r2, r6
 800ed18:	4653      	mov	r3, sl
 800ed1a:	ec45 4b10 	vmov	d0, r4, r5
 800ed1e:	f000 fe27 	bl	800f970 <_dtoa_r>
 800ed22:	2f47      	cmp	r7, #71	; 0x47
 800ed24:	4680      	mov	r8, r0
 800ed26:	d102      	bne.n	800ed2e <__cvt+0x62>
 800ed28:	f019 0f01 	tst.w	r9, #1
 800ed2c:	d026      	beq.n	800ed7c <__cvt+0xb0>
 800ed2e:	2f46      	cmp	r7, #70	; 0x46
 800ed30:	eb08 0906 	add.w	r9, r8, r6
 800ed34:	d111      	bne.n	800ed5a <__cvt+0x8e>
 800ed36:	f898 3000 	ldrb.w	r3, [r8]
 800ed3a:	2b30      	cmp	r3, #48	; 0x30
 800ed3c:	d10a      	bne.n	800ed54 <__cvt+0x88>
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2300      	movs	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fee7 	bl	8000b18 <__aeabi_dcmpeq>
 800ed4a:	b918      	cbnz	r0, 800ed54 <__cvt+0x88>
 800ed4c:	f1c6 0601 	rsb	r6, r6, #1
 800ed50:	f8ca 6000 	str.w	r6, [sl]
 800ed54:	f8da 3000 	ldr.w	r3, [sl]
 800ed58:	4499      	add	r9, r3
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 fed9 	bl	8000b18 <__aeabi_dcmpeq>
 800ed66:	b938      	cbnz	r0, 800ed78 <__cvt+0xac>
 800ed68:	2230      	movs	r2, #48	; 0x30
 800ed6a:	9b03      	ldr	r3, [sp, #12]
 800ed6c:	454b      	cmp	r3, r9
 800ed6e:	d205      	bcs.n	800ed7c <__cvt+0xb0>
 800ed70:	1c59      	adds	r1, r3, #1
 800ed72:	9103      	str	r1, [sp, #12]
 800ed74:	701a      	strb	r2, [r3, #0]
 800ed76:	e7f8      	b.n	800ed6a <__cvt+0x9e>
 800ed78:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed7c:	9b03      	ldr	r3, [sp, #12]
 800ed7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed80:	eba3 0308 	sub.w	r3, r3, r8
 800ed84:	4640      	mov	r0, r8
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	b004      	add	sp, #16
 800ed8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ed8e <__exponent>:
 800ed8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed90:	2900      	cmp	r1, #0
 800ed92:	4604      	mov	r4, r0
 800ed94:	bfba      	itte	lt
 800ed96:	4249      	neglt	r1, r1
 800ed98:	232d      	movlt	r3, #45	; 0x2d
 800ed9a:	232b      	movge	r3, #43	; 0x2b
 800ed9c:	2909      	cmp	r1, #9
 800ed9e:	f804 2b02 	strb.w	r2, [r4], #2
 800eda2:	7043      	strb	r3, [r0, #1]
 800eda4:	dd20      	ble.n	800ede8 <__exponent+0x5a>
 800eda6:	f10d 0307 	add.w	r3, sp, #7
 800edaa:	461f      	mov	r7, r3
 800edac:	260a      	movs	r6, #10
 800edae:	fb91 f5f6 	sdiv	r5, r1, r6
 800edb2:	fb06 1115 	mls	r1, r6, r5, r1
 800edb6:	3130      	adds	r1, #48	; 0x30
 800edb8:	2d09      	cmp	r5, #9
 800edba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800edbe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800edc2:	4629      	mov	r1, r5
 800edc4:	dc09      	bgt.n	800edda <__exponent+0x4c>
 800edc6:	3130      	adds	r1, #48	; 0x30
 800edc8:	3b02      	subs	r3, #2
 800edca:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edce:	42bb      	cmp	r3, r7
 800edd0:	4622      	mov	r2, r4
 800edd2:	d304      	bcc.n	800edde <__exponent+0x50>
 800edd4:	1a10      	subs	r0, r2, r0
 800edd6:	b003      	add	sp, #12
 800edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edda:	4613      	mov	r3, r2
 800eddc:	e7e7      	b.n	800edae <__exponent+0x20>
 800edde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede2:	f804 2b01 	strb.w	r2, [r4], #1
 800ede6:	e7f2      	b.n	800edce <__exponent+0x40>
 800ede8:	2330      	movs	r3, #48	; 0x30
 800edea:	4419      	add	r1, r3
 800edec:	7083      	strb	r3, [r0, #2]
 800edee:	1d02      	adds	r2, r0, #4
 800edf0:	70c1      	strb	r1, [r0, #3]
 800edf2:	e7ef      	b.n	800edd4 <__exponent+0x46>

0800edf4 <_printf_float>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	b08d      	sub	sp, #52	; 0x34
 800edfa:	460c      	mov	r4, r1
 800edfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ee00:	4616      	mov	r6, r2
 800ee02:	461f      	mov	r7, r3
 800ee04:	4605      	mov	r5, r0
 800ee06:	f001 fce5 	bl	80107d4 <_localeconv_r>
 800ee0a:	6803      	ldr	r3, [r0, #0]
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f1 fa06 	bl	8000220 <strlen>
 800ee14:	2300      	movs	r3, #0
 800ee16:	930a      	str	r3, [sp, #40]	; 0x28
 800ee18:	f8d8 3000 	ldr.w	r3, [r8]
 800ee1c:	9005      	str	r0, [sp, #20]
 800ee1e:	3307      	adds	r3, #7
 800ee20:	f023 0307 	bic.w	r3, r3, #7
 800ee24:	f103 0208 	add.w	r2, r3, #8
 800ee28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ee30:	f8c8 2000 	str.w	r2, [r8]
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ee3c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ee40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee44:	9307      	str	r3, [sp, #28]
 800ee46:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee4e:	4ba7      	ldr	r3, [pc, #668]	; (800f0ec <_printf_float+0x2f8>)
 800ee50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee54:	f7f1 fe92 	bl	8000b7c <__aeabi_dcmpun>
 800ee58:	bb70      	cbnz	r0, 800eeb8 <_printf_float+0xc4>
 800ee5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee5e:	4ba3      	ldr	r3, [pc, #652]	; (800f0ec <_printf_float+0x2f8>)
 800ee60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee64:	f7f1 fe6c 	bl	8000b40 <__aeabi_dcmple>
 800ee68:	bb30      	cbnz	r0, 800eeb8 <_printf_float+0xc4>
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	4640      	mov	r0, r8
 800ee70:	4649      	mov	r1, r9
 800ee72:	f7f1 fe5b 	bl	8000b2c <__aeabi_dcmplt>
 800ee76:	b110      	cbz	r0, 800ee7e <_printf_float+0x8a>
 800ee78:	232d      	movs	r3, #45	; 0x2d
 800ee7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee7e:	4a9c      	ldr	r2, [pc, #624]	; (800f0f0 <_printf_float+0x2fc>)
 800ee80:	4b9c      	ldr	r3, [pc, #624]	; (800f0f4 <_printf_float+0x300>)
 800ee82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ee86:	bf8c      	ite	hi
 800ee88:	4690      	movhi	r8, r2
 800ee8a:	4698      	movls	r8, r3
 800ee8c:	2303      	movs	r3, #3
 800ee8e:	f02b 0204 	bic.w	r2, fp, #4
 800ee92:	6123      	str	r3, [r4, #16]
 800ee94:	6022      	str	r2, [r4, #0]
 800ee96:	f04f 0900 	mov.w	r9, #0
 800ee9a:	9700      	str	r7, [sp, #0]
 800ee9c:	4633      	mov	r3, r6
 800ee9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800eea0:	4621      	mov	r1, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	f000 f9e6 	bl	800f274 <_printf_common>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f040 808d 	bne.w	800efc8 <_printf_float+0x1d4>
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eeb2:	b00d      	add	sp, #52	; 0x34
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb8:	4642      	mov	r2, r8
 800eeba:	464b      	mov	r3, r9
 800eebc:	4640      	mov	r0, r8
 800eebe:	4649      	mov	r1, r9
 800eec0:	f7f1 fe5c 	bl	8000b7c <__aeabi_dcmpun>
 800eec4:	b110      	cbz	r0, 800eecc <_printf_float+0xd8>
 800eec6:	4a8c      	ldr	r2, [pc, #560]	; (800f0f8 <_printf_float+0x304>)
 800eec8:	4b8c      	ldr	r3, [pc, #560]	; (800f0fc <_printf_float+0x308>)
 800eeca:	e7da      	b.n	800ee82 <_printf_float+0x8e>
 800eecc:	6861      	ldr	r1, [r4, #4]
 800eece:	1c4b      	adds	r3, r1, #1
 800eed0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800eed4:	a80a      	add	r0, sp, #40	; 0x28
 800eed6:	d13e      	bne.n	800ef56 <_printf_float+0x162>
 800eed8:	2306      	movs	r3, #6
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	2300      	movs	r3, #0
 800eede:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eee2:	ab09      	add	r3, sp, #36	; 0x24
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	ec49 8b10 	vmov	d0, r8, r9
 800eeea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eeee:	6022      	str	r2, [r4, #0]
 800eef0:	f8cd a004 	str.w	sl, [sp, #4]
 800eef4:	6861      	ldr	r1, [r4, #4]
 800eef6:	4628      	mov	r0, r5
 800eef8:	f7ff fee8 	bl	800eccc <__cvt>
 800eefc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ef00:	2b47      	cmp	r3, #71	; 0x47
 800ef02:	4680      	mov	r8, r0
 800ef04:	d109      	bne.n	800ef1a <_printf_float+0x126>
 800ef06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef08:	1cd8      	adds	r0, r3, #3
 800ef0a:	db02      	blt.n	800ef12 <_printf_float+0x11e>
 800ef0c:	6862      	ldr	r2, [r4, #4]
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	dd47      	ble.n	800efa2 <_printf_float+0x1ae>
 800ef12:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef16:	fa5f fa8a 	uxtb.w	sl, sl
 800ef1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ef1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef20:	d824      	bhi.n	800ef6c <_printf_float+0x178>
 800ef22:	3901      	subs	r1, #1
 800ef24:	4652      	mov	r2, sl
 800ef26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef2a:	9109      	str	r1, [sp, #36]	; 0x24
 800ef2c:	f7ff ff2f 	bl	800ed8e <__exponent>
 800ef30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef32:	1813      	adds	r3, r2, r0
 800ef34:	2a01      	cmp	r2, #1
 800ef36:	4681      	mov	r9, r0
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	dc02      	bgt.n	800ef42 <_printf_float+0x14e>
 800ef3c:	6822      	ldr	r2, [r4, #0]
 800ef3e:	07d1      	lsls	r1, r2, #31
 800ef40:	d501      	bpl.n	800ef46 <_printf_float+0x152>
 800ef42:	3301      	adds	r3, #1
 800ef44:	6123      	str	r3, [r4, #16]
 800ef46:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0a5      	beq.n	800ee9a <_printf_float+0xa6>
 800ef4e:	232d      	movs	r3, #45	; 0x2d
 800ef50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef54:	e7a1      	b.n	800ee9a <_printf_float+0xa6>
 800ef56:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ef5a:	f000 8177 	beq.w	800f24c <_printf_float+0x458>
 800ef5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef62:	d1bb      	bne.n	800eedc <_printf_float+0xe8>
 800ef64:	2900      	cmp	r1, #0
 800ef66:	d1b9      	bne.n	800eedc <_printf_float+0xe8>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e7b6      	b.n	800eeda <_printf_float+0xe6>
 800ef6c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ef70:	d119      	bne.n	800efa6 <_printf_float+0x1b2>
 800ef72:	2900      	cmp	r1, #0
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	dd0c      	ble.n	800ef92 <_printf_float+0x19e>
 800ef78:	6121      	str	r1, [r4, #16]
 800ef7a:	b913      	cbnz	r3, 800ef82 <_printf_float+0x18e>
 800ef7c:	6822      	ldr	r2, [r4, #0]
 800ef7e:	07d2      	lsls	r2, r2, #31
 800ef80:	d502      	bpl.n	800ef88 <_printf_float+0x194>
 800ef82:	3301      	adds	r3, #1
 800ef84:	440b      	add	r3, r1
 800ef86:	6123      	str	r3, [r4, #16]
 800ef88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef8c:	f04f 0900 	mov.w	r9, #0
 800ef90:	e7d9      	b.n	800ef46 <_printf_float+0x152>
 800ef92:	b913      	cbnz	r3, 800ef9a <_printf_float+0x1a6>
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	07d0      	lsls	r0, r2, #31
 800ef98:	d501      	bpl.n	800ef9e <_printf_float+0x1aa>
 800ef9a:	3302      	adds	r3, #2
 800ef9c:	e7f3      	b.n	800ef86 <_printf_float+0x192>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e7f1      	b.n	800ef86 <_printf_float+0x192>
 800efa2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800efa6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800efaa:	4293      	cmp	r3, r2
 800efac:	db05      	blt.n	800efba <_printf_float+0x1c6>
 800efae:	6822      	ldr	r2, [r4, #0]
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	07d1      	lsls	r1, r2, #31
 800efb4:	d5e8      	bpl.n	800ef88 <_printf_float+0x194>
 800efb6:	3301      	adds	r3, #1
 800efb8:	e7e5      	b.n	800ef86 <_printf_float+0x192>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	bfd4      	ite	le
 800efbe:	f1c3 0302 	rsble	r3, r3, #2
 800efc2:	2301      	movgt	r3, #1
 800efc4:	4413      	add	r3, r2
 800efc6:	e7de      	b.n	800ef86 <_printf_float+0x192>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	055a      	lsls	r2, r3, #21
 800efcc:	d407      	bmi.n	800efde <_printf_float+0x1ea>
 800efce:	6923      	ldr	r3, [r4, #16]
 800efd0:	4642      	mov	r2, r8
 800efd2:	4631      	mov	r1, r6
 800efd4:	4628      	mov	r0, r5
 800efd6:	47b8      	blx	r7
 800efd8:	3001      	adds	r0, #1
 800efda:	d12b      	bne.n	800f034 <_printf_float+0x240>
 800efdc:	e767      	b.n	800eeae <_printf_float+0xba>
 800efde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800efe2:	f240 80dc 	bls.w	800f19e <_printf_float+0x3aa>
 800efe6:	2200      	movs	r2, #0
 800efe8:	2300      	movs	r3, #0
 800efea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efee:	f7f1 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d033      	beq.n	800f05e <_printf_float+0x26a>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4a41      	ldr	r2, [pc, #260]	; (800f100 <_printf_float+0x30c>)
 800effa:	4631      	mov	r1, r6
 800effc:	4628      	mov	r0, r5
 800effe:	47b8      	blx	r7
 800f000:	3001      	adds	r0, #1
 800f002:	f43f af54 	beq.w	800eeae <_printf_float+0xba>
 800f006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f00a:	429a      	cmp	r2, r3
 800f00c:	db02      	blt.n	800f014 <_printf_float+0x220>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	07d8      	lsls	r0, r3, #31
 800f012:	d50f      	bpl.n	800f034 <_printf_float+0x240>
 800f014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f018:	4631      	mov	r1, r6
 800f01a:	4628      	mov	r0, r5
 800f01c:	47b8      	blx	r7
 800f01e:	3001      	adds	r0, #1
 800f020:	f43f af45 	beq.w	800eeae <_printf_float+0xba>
 800f024:	f04f 0800 	mov.w	r8, #0
 800f028:	f104 091a 	add.w	r9, r4, #26
 800f02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f02e:	3b01      	subs	r3, #1
 800f030:	4543      	cmp	r3, r8
 800f032:	dc09      	bgt.n	800f048 <_printf_float+0x254>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	079b      	lsls	r3, r3, #30
 800f038:	f100 8103 	bmi.w	800f242 <_printf_float+0x44e>
 800f03c:	68e0      	ldr	r0, [r4, #12]
 800f03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f040:	4298      	cmp	r0, r3
 800f042:	bfb8      	it	lt
 800f044:	4618      	movlt	r0, r3
 800f046:	e734      	b.n	800eeb2 <_printf_float+0xbe>
 800f048:	2301      	movs	r3, #1
 800f04a:	464a      	mov	r2, r9
 800f04c:	4631      	mov	r1, r6
 800f04e:	4628      	mov	r0, r5
 800f050:	47b8      	blx	r7
 800f052:	3001      	adds	r0, #1
 800f054:	f43f af2b 	beq.w	800eeae <_printf_float+0xba>
 800f058:	f108 0801 	add.w	r8, r8, #1
 800f05c:	e7e6      	b.n	800f02c <_printf_float+0x238>
 800f05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	dc2b      	bgt.n	800f0bc <_printf_float+0x2c8>
 800f064:	2301      	movs	r3, #1
 800f066:	4a26      	ldr	r2, [pc, #152]	; (800f100 <_printf_float+0x30c>)
 800f068:	4631      	mov	r1, r6
 800f06a:	4628      	mov	r0, r5
 800f06c:	47b8      	blx	r7
 800f06e:	3001      	adds	r0, #1
 800f070:	f43f af1d 	beq.w	800eeae <_printf_float+0xba>
 800f074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f076:	b923      	cbnz	r3, 800f082 <_printf_float+0x28e>
 800f078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07a:	b913      	cbnz	r3, 800f082 <_printf_float+0x28e>
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	07d9      	lsls	r1, r3, #31
 800f080:	d5d8      	bpl.n	800f034 <_printf_float+0x240>
 800f082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f086:	4631      	mov	r1, r6
 800f088:	4628      	mov	r0, r5
 800f08a:	47b8      	blx	r7
 800f08c:	3001      	adds	r0, #1
 800f08e:	f43f af0e 	beq.w	800eeae <_printf_float+0xba>
 800f092:	f04f 0900 	mov.w	r9, #0
 800f096:	f104 0a1a 	add.w	sl, r4, #26
 800f09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09c:	425b      	negs	r3, r3
 800f09e:	454b      	cmp	r3, r9
 800f0a0:	dc01      	bgt.n	800f0a6 <_printf_float+0x2b2>
 800f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a4:	e794      	b.n	800efd0 <_printf_float+0x1dc>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	47b8      	blx	r7
 800f0b0:	3001      	adds	r0, #1
 800f0b2:	f43f aefc 	beq.w	800eeae <_printf_float+0xba>
 800f0b6:	f109 0901 	add.w	r9, r9, #1
 800f0ba:	e7ee      	b.n	800f09a <_printf_float+0x2a6>
 800f0bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	bfa8      	it	ge
 800f0c4:	461a      	movge	r2, r3
 800f0c6:	2a00      	cmp	r2, #0
 800f0c8:	4691      	mov	r9, r2
 800f0ca:	dd07      	ble.n	800f0dc <_printf_float+0x2e8>
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	4631      	mov	r1, r6
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	47b8      	blx	r7
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	f43f aee9 	beq.w	800eeae <_printf_float+0xba>
 800f0dc:	f104 031a 	add.w	r3, r4, #26
 800f0e0:	f04f 0b00 	mov.w	fp, #0
 800f0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0e8:	9306      	str	r3, [sp, #24]
 800f0ea:	e015      	b.n	800f118 <_printf_float+0x324>
 800f0ec:	7fefffff 	.word	0x7fefffff
 800f0f0:	08013c9c 	.word	0x08013c9c
 800f0f4:	08013c98 	.word	0x08013c98
 800f0f8:	08013ca4 	.word	0x08013ca4
 800f0fc:	08013ca0 	.word	0x08013ca0
 800f100:	08013f54 	.word	0x08013f54
 800f104:	2301      	movs	r3, #1
 800f106:	9a06      	ldr	r2, [sp, #24]
 800f108:	4631      	mov	r1, r6
 800f10a:	4628      	mov	r0, r5
 800f10c:	47b8      	blx	r7
 800f10e:	3001      	adds	r0, #1
 800f110:	f43f aecd 	beq.w	800eeae <_printf_float+0xba>
 800f114:	f10b 0b01 	add.w	fp, fp, #1
 800f118:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f11c:	ebaa 0309 	sub.w	r3, sl, r9
 800f120:	455b      	cmp	r3, fp
 800f122:	dcef      	bgt.n	800f104 <_printf_float+0x310>
 800f124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f128:	429a      	cmp	r2, r3
 800f12a:	44d0      	add	r8, sl
 800f12c:	db15      	blt.n	800f15a <_printf_float+0x366>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	07da      	lsls	r2, r3, #31
 800f132:	d412      	bmi.n	800f15a <_printf_float+0x366>
 800f134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f136:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f138:	eba3 020a 	sub.w	r2, r3, sl
 800f13c:	eba3 0a01 	sub.w	sl, r3, r1
 800f140:	4592      	cmp	sl, r2
 800f142:	bfa8      	it	ge
 800f144:	4692      	movge	sl, r2
 800f146:	f1ba 0f00 	cmp.w	sl, #0
 800f14a:	dc0e      	bgt.n	800f16a <_printf_float+0x376>
 800f14c:	f04f 0800 	mov.w	r8, #0
 800f150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f154:	f104 091a 	add.w	r9, r4, #26
 800f158:	e019      	b.n	800f18e <_printf_float+0x39a>
 800f15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f15e:	4631      	mov	r1, r6
 800f160:	4628      	mov	r0, r5
 800f162:	47b8      	blx	r7
 800f164:	3001      	adds	r0, #1
 800f166:	d1e5      	bne.n	800f134 <_printf_float+0x340>
 800f168:	e6a1      	b.n	800eeae <_printf_float+0xba>
 800f16a:	4653      	mov	r3, sl
 800f16c:	4642      	mov	r2, r8
 800f16e:	4631      	mov	r1, r6
 800f170:	4628      	mov	r0, r5
 800f172:	47b8      	blx	r7
 800f174:	3001      	adds	r0, #1
 800f176:	d1e9      	bne.n	800f14c <_printf_float+0x358>
 800f178:	e699      	b.n	800eeae <_printf_float+0xba>
 800f17a:	2301      	movs	r3, #1
 800f17c:	464a      	mov	r2, r9
 800f17e:	4631      	mov	r1, r6
 800f180:	4628      	mov	r0, r5
 800f182:	47b8      	blx	r7
 800f184:	3001      	adds	r0, #1
 800f186:	f43f ae92 	beq.w	800eeae <_printf_float+0xba>
 800f18a:	f108 0801 	add.w	r8, r8, #1
 800f18e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	eba3 030a 	sub.w	r3, r3, sl
 800f198:	4543      	cmp	r3, r8
 800f19a:	dcee      	bgt.n	800f17a <_printf_float+0x386>
 800f19c:	e74a      	b.n	800f034 <_printf_float+0x240>
 800f19e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1a0:	2a01      	cmp	r2, #1
 800f1a2:	dc01      	bgt.n	800f1a8 <_printf_float+0x3b4>
 800f1a4:	07db      	lsls	r3, r3, #31
 800f1a6:	d53a      	bpl.n	800f21e <_printf_float+0x42a>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	4642      	mov	r2, r8
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	47b8      	blx	r7
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f43f ae7b 	beq.w	800eeae <_printf_float+0xba>
 800f1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	47b8      	blx	r7
 800f1c2:	3001      	adds	r0, #1
 800f1c4:	f108 0801 	add.w	r8, r8, #1
 800f1c8:	f43f ae71 	beq.w	800eeae <_printf_float+0xba>
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f1d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f7f1 fc9d 	bl	8000b18 <__aeabi_dcmpeq>
 800f1de:	b9c8      	cbnz	r0, 800f214 <_printf_float+0x420>
 800f1e0:	4653      	mov	r3, sl
 800f1e2:	4642      	mov	r2, r8
 800f1e4:	4631      	mov	r1, r6
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	47b8      	blx	r7
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	d10e      	bne.n	800f20c <_printf_float+0x418>
 800f1ee:	e65e      	b.n	800eeae <_printf_float+0xba>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4652      	mov	r2, sl
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b8      	blx	r7
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f43f ae57 	beq.w	800eeae <_printf_float+0xba>
 800f200:	f108 0801 	add.w	r8, r8, #1
 800f204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f206:	3b01      	subs	r3, #1
 800f208:	4543      	cmp	r3, r8
 800f20a:	dcf1      	bgt.n	800f1f0 <_printf_float+0x3fc>
 800f20c:	464b      	mov	r3, r9
 800f20e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f212:	e6de      	b.n	800efd2 <_printf_float+0x1de>
 800f214:	f04f 0800 	mov.w	r8, #0
 800f218:	f104 0a1a 	add.w	sl, r4, #26
 800f21c:	e7f2      	b.n	800f204 <_printf_float+0x410>
 800f21e:	2301      	movs	r3, #1
 800f220:	e7df      	b.n	800f1e2 <_printf_float+0x3ee>
 800f222:	2301      	movs	r3, #1
 800f224:	464a      	mov	r2, r9
 800f226:	4631      	mov	r1, r6
 800f228:	4628      	mov	r0, r5
 800f22a:	47b8      	blx	r7
 800f22c:	3001      	adds	r0, #1
 800f22e:	f43f ae3e 	beq.w	800eeae <_printf_float+0xba>
 800f232:	f108 0801 	add.w	r8, r8, #1
 800f236:	68e3      	ldr	r3, [r4, #12]
 800f238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f23a:	1a9b      	subs	r3, r3, r2
 800f23c:	4543      	cmp	r3, r8
 800f23e:	dcf0      	bgt.n	800f222 <_printf_float+0x42e>
 800f240:	e6fc      	b.n	800f03c <_printf_float+0x248>
 800f242:	f04f 0800 	mov.w	r8, #0
 800f246:	f104 0919 	add.w	r9, r4, #25
 800f24a:	e7f4      	b.n	800f236 <_printf_float+0x442>
 800f24c:	2900      	cmp	r1, #0
 800f24e:	f43f ae8b 	beq.w	800ef68 <_printf_float+0x174>
 800f252:	2300      	movs	r3, #0
 800f254:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f258:	ab09      	add	r3, sp, #36	; 0x24
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	ec49 8b10 	vmov	d0, r8, r9
 800f260:	6022      	str	r2, [r4, #0]
 800f262:	f8cd a004 	str.w	sl, [sp, #4]
 800f266:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f26a:	4628      	mov	r0, r5
 800f26c:	f7ff fd2e 	bl	800eccc <__cvt>
 800f270:	4680      	mov	r8, r0
 800f272:	e648      	b.n	800ef06 <_printf_float+0x112>

0800f274 <_printf_common>:
 800f274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	4691      	mov	r9, r2
 800f27a:	461f      	mov	r7, r3
 800f27c:	688a      	ldr	r2, [r1, #8]
 800f27e:	690b      	ldr	r3, [r1, #16]
 800f280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f284:	4293      	cmp	r3, r2
 800f286:	bfb8      	it	lt
 800f288:	4613      	movlt	r3, r2
 800f28a:	f8c9 3000 	str.w	r3, [r9]
 800f28e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f292:	4606      	mov	r6, r0
 800f294:	460c      	mov	r4, r1
 800f296:	b112      	cbz	r2, 800f29e <_printf_common+0x2a>
 800f298:	3301      	adds	r3, #1
 800f29a:	f8c9 3000 	str.w	r3, [r9]
 800f29e:	6823      	ldr	r3, [r4, #0]
 800f2a0:	0699      	lsls	r1, r3, #26
 800f2a2:	bf42      	ittt	mi
 800f2a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f2a8:	3302      	addmi	r3, #2
 800f2aa:	f8c9 3000 	strmi.w	r3, [r9]
 800f2ae:	6825      	ldr	r5, [r4, #0]
 800f2b0:	f015 0506 	ands.w	r5, r5, #6
 800f2b4:	d107      	bne.n	800f2c6 <_printf_common+0x52>
 800f2b6:	f104 0a19 	add.w	sl, r4, #25
 800f2ba:	68e3      	ldr	r3, [r4, #12]
 800f2bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f2c0:	1a9b      	subs	r3, r3, r2
 800f2c2:	42ab      	cmp	r3, r5
 800f2c4:	dc28      	bgt.n	800f318 <_printf_common+0xa4>
 800f2c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f2ca:	6822      	ldr	r2, [r4, #0]
 800f2cc:	3300      	adds	r3, #0
 800f2ce:	bf18      	it	ne
 800f2d0:	2301      	movne	r3, #1
 800f2d2:	0692      	lsls	r2, r2, #26
 800f2d4:	d42d      	bmi.n	800f332 <_printf_common+0xbe>
 800f2d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2da:	4639      	mov	r1, r7
 800f2dc:	4630      	mov	r0, r6
 800f2de:	47c0      	blx	r8
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d020      	beq.n	800f326 <_printf_common+0xb2>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	68e5      	ldr	r5, [r4, #12]
 800f2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f2ec:	f003 0306 	and.w	r3, r3, #6
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	bf08      	it	eq
 800f2f4:	1aad      	subeq	r5, r5, r2
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	6922      	ldr	r2, [r4, #16]
 800f2fa:	bf0c      	ite	eq
 800f2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f300:	2500      	movne	r5, #0
 800f302:	4293      	cmp	r3, r2
 800f304:	bfc4      	itt	gt
 800f306:	1a9b      	subgt	r3, r3, r2
 800f308:	18ed      	addgt	r5, r5, r3
 800f30a:	f04f 0900 	mov.w	r9, #0
 800f30e:	341a      	adds	r4, #26
 800f310:	454d      	cmp	r5, r9
 800f312:	d11a      	bne.n	800f34a <_printf_common+0xd6>
 800f314:	2000      	movs	r0, #0
 800f316:	e008      	b.n	800f32a <_printf_common+0xb6>
 800f318:	2301      	movs	r3, #1
 800f31a:	4652      	mov	r2, sl
 800f31c:	4639      	mov	r1, r7
 800f31e:	4630      	mov	r0, r6
 800f320:	47c0      	blx	r8
 800f322:	3001      	adds	r0, #1
 800f324:	d103      	bne.n	800f32e <_printf_common+0xba>
 800f326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	3501      	adds	r5, #1
 800f330:	e7c3      	b.n	800f2ba <_printf_common+0x46>
 800f332:	18e1      	adds	r1, r4, r3
 800f334:	1c5a      	adds	r2, r3, #1
 800f336:	2030      	movs	r0, #48	; 0x30
 800f338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f33c:	4422      	add	r2, r4
 800f33e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f346:	3302      	adds	r3, #2
 800f348:	e7c5      	b.n	800f2d6 <_printf_common+0x62>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4622      	mov	r2, r4
 800f34e:	4639      	mov	r1, r7
 800f350:	4630      	mov	r0, r6
 800f352:	47c0      	blx	r8
 800f354:	3001      	adds	r0, #1
 800f356:	d0e6      	beq.n	800f326 <_printf_common+0xb2>
 800f358:	f109 0901 	add.w	r9, r9, #1
 800f35c:	e7d8      	b.n	800f310 <_printf_common+0x9c>
	...

0800f360 <_printf_i>:
 800f360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f364:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f368:	460c      	mov	r4, r1
 800f36a:	7e09      	ldrb	r1, [r1, #24]
 800f36c:	b085      	sub	sp, #20
 800f36e:	296e      	cmp	r1, #110	; 0x6e
 800f370:	4617      	mov	r7, r2
 800f372:	4606      	mov	r6, r0
 800f374:	4698      	mov	r8, r3
 800f376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f378:	f000 80b3 	beq.w	800f4e2 <_printf_i+0x182>
 800f37c:	d822      	bhi.n	800f3c4 <_printf_i+0x64>
 800f37e:	2963      	cmp	r1, #99	; 0x63
 800f380:	d036      	beq.n	800f3f0 <_printf_i+0x90>
 800f382:	d80a      	bhi.n	800f39a <_printf_i+0x3a>
 800f384:	2900      	cmp	r1, #0
 800f386:	f000 80b9 	beq.w	800f4fc <_printf_i+0x19c>
 800f38a:	2958      	cmp	r1, #88	; 0x58
 800f38c:	f000 8083 	beq.w	800f496 <_printf_i+0x136>
 800f390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f394:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f398:	e032      	b.n	800f400 <_printf_i+0xa0>
 800f39a:	2964      	cmp	r1, #100	; 0x64
 800f39c:	d001      	beq.n	800f3a2 <_printf_i+0x42>
 800f39e:	2969      	cmp	r1, #105	; 0x69
 800f3a0:	d1f6      	bne.n	800f390 <_printf_i+0x30>
 800f3a2:	6820      	ldr	r0, [r4, #0]
 800f3a4:	6813      	ldr	r3, [r2, #0]
 800f3a6:	0605      	lsls	r5, r0, #24
 800f3a8:	f103 0104 	add.w	r1, r3, #4
 800f3ac:	d52a      	bpl.n	800f404 <_printf_i+0xa4>
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6011      	str	r1, [r2, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	da03      	bge.n	800f3be <_printf_i+0x5e>
 800f3b6:	222d      	movs	r2, #45	; 0x2d
 800f3b8:	425b      	negs	r3, r3
 800f3ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f3be:	486f      	ldr	r0, [pc, #444]	; (800f57c <_printf_i+0x21c>)
 800f3c0:	220a      	movs	r2, #10
 800f3c2:	e039      	b.n	800f438 <_printf_i+0xd8>
 800f3c4:	2973      	cmp	r1, #115	; 0x73
 800f3c6:	f000 809d 	beq.w	800f504 <_printf_i+0x1a4>
 800f3ca:	d808      	bhi.n	800f3de <_printf_i+0x7e>
 800f3cc:	296f      	cmp	r1, #111	; 0x6f
 800f3ce:	d020      	beq.n	800f412 <_printf_i+0xb2>
 800f3d0:	2970      	cmp	r1, #112	; 0x70
 800f3d2:	d1dd      	bne.n	800f390 <_printf_i+0x30>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	f043 0320 	orr.w	r3, r3, #32
 800f3da:	6023      	str	r3, [r4, #0]
 800f3dc:	e003      	b.n	800f3e6 <_printf_i+0x86>
 800f3de:	2975      	cmp	r1, #117	; 0x75
 800f3e0:	d017      	beq.n	800f412 <_printf_i+0xb2>
 800f3e2:	2978      	cmp	r1, #120	; 0x78
 800f3e4:	d1d4      	bne.n	800f390 <_printf_i+0x30>
 800f3e6:	2378      	movs	r3, #120	; 0x78
 800f3e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3ec:	4864      	ldr	r0, [pc, #400]	; (800f580 <_printf_i+0x220>)
 800f3ee:	e055      	b.n	800f49c <_printf_i+0x13c>
 800f3f0:	6813      	ldr	r3, [r2, #0]
 800f3f2:	1d19      	adds	r1, r3, #4
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6011      	str	r1, [r2, #0]
 800f3f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f400:	2301      	movs	r3, #1
 800f402:	e08c      	b.n	800f51e <_printf_i+0x1be>
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	6011      	str	r1, [r2, #0]
 800f408:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f40c:	bf18      	it	ne
 800f40e:	b21b      	sxthne	r3, r3
 800f410:	e7cf      	b.n	800f3b2 <_printf_i+0x52>
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	6825      	ldr	r5, [r4, #0]
 800f416:	1d18      	adds	r0, r3, #4
 800f418:	6010      	str	r0, [r2, #0]
 800f41a:	0628      	lsls	r0, r5, #24
 800f41c:	d501      	bpl.n	800f422 <_printf_i+0xc2>
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	e002      	b.n	800f428 <_printf_i+0xc8>
 800f422:	0668      	lsls	r0, r5, #25
 800f424:	d5fb      	bpl.n	800f41e <_printf_i+0xbe>
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	4854      	ldr	r0, [pc, #336]	; (800f57c <_printf_i+0x21c>)
 800f42a:	296f      	cmp	r1, #111	; 0x6f
 800f42c:	bf14      	ite	ne
 800f42e:	220a      	movne	r2, #10
 800f430:	2208      	moveq	r2, #8
 800f432:	2100      	movs	r1, #0
 800f434:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f438:	6865      	ldr	r5, [r4, #4]
 800f43a:	60a5      	str	r5, [r4, #8]
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	f2c0 8095 	blt.w	800f56c <_printf_i+0x20c>
 800f442:	6821      	ldr	r1, [r4, #0]
 800f444:	f021 0104 	bic.w	r1, r1, #4
 800f448:	6021      	str	r1, [r4, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d13d      	bne.n	800f4ca <_printf_i+0x16a>
 800f44e:	2d00      	cmp	r5, #0
 800f450:	f040 808e 	bne.w	800f570 <_printf_i+0x210>
 800f454:	4665      	mov	r5, ip
 800f456:	2a08      	cmp	r2, #8
 800f458:	d10b      	bne.n	800f472 <_printf_i+0x112>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	07db      	lsls	r3, r3, #31
 800f45e:	d508      	bpl.n	800f472 <_printf_i+0x112>
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	6862      	ldr	r2, [r4, #4]
 800f464:	429a      	cmp	r2, r3
 800f466:	bfde      	ittt	le
 800f468:	2330      	movle	r3, #48	; 0x30
 800f46a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f46e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f472:	ebac 0305 	sub.w	r3, ip, r5
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	f8cd 8000 	str.w	r8, [sp]
 800f47c:	463b      	mov	r3, r7
 800f47e:	aa03      	add	r2, sp, #12
 800f480:	4621      	mov	r1, r4
 800f482:	4630      	mov	r0, r6
 800f484:	f7ff fef6 	bl	800f274 <_printf_common>
 800f488:	3001      	adds	r0, #1
 800f48a:	d14d      	bne.n	800f528 <_printf_i+0x1c8>
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f490:	b005      	add	sp, #20
 800f492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f496:	4839      	ldr	r0, [pc, #228]	; (800f57c <_printf_i+0x21c>)
 800f498:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f49c:	6813      	ldr	r3, [r2, #0]
 800f49e:	6821      	ldr	r1, [r4, #0]
 800f4a0:	1d1d      	adds	r5, r3, #4
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6015      	str	r5, [r2, #0]
 800f4a6:	060a      	lsls	r2, r1, #24
 800f4a8:	d50b      	bpl.n	800f4c2 <_printf_i+0x162>
 800f4aa:	07ca      	lsls	r2, r1, #31
 800f4ac:	bf44      	itt	mi
 800f4ae:	f041 0120 	orrmi.w	r1, r1, #32
 800f4b2:	6021      	strmi	r1, [r4, #0]
 800f4b4:	b91b      	cbnz	r3, 800f4be <_printf_i+0x15e>
 800f4b6:	6822      	ldr	r2, [r4, #0]
 800f4b8:	f022 0220 	bic.w	r2, r2, #32
 800f4bc:	6022      	str	r2, [r4, #0]
 800f4be:	2210      	movs	r2, #16
 800f4c0:	e7b7      	b.n	800f432 <_printf_i+0xd2>
 800f4c2:	064d      	lsls	r5, r1, #25
 800f4c4:	bf48      	it	mi
 800f4c6:	b29b      	uxthmi	r3, r3
 800f4c8:	e7ef      	b.n	800f4aa <_printf_i+0x14a>
 800f4ca:	4665      	mov	r5, ip
 800f4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4d0:	fb02 3311 	mls	r3, r2, r1, r3
 800f4d4:	5cc3      	ldrb	r3, [r0, r3]
 800f4d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f4da:	460b      	mov	r3, r1
 800f4dc:	2900      	cmp	r1, #0
 800f4de:	d1f5      	bne.n	800f4cc <_printf_i+0x16c>
 800f4e0:	e7b9      	b.n	800f456 <_printf_i+0xf6>
 800f4e2:	6813      	ldr	r3, [r2, #0]
 800f4e4:	6825      	ldr	r5, [r4, #0]
 800f4e6:	6961      	ldr	r1, [r4, #20]
 800f4e8:	1d18      	adds	r0, r3, #4
 800f4ea:	6010      	str	r0, [r2, #0]
 800f4ec:	0628      	lsls	r0, r5, #24
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	d501      	bpl.n	800f4f6 <_printf_i+0x196>
 800f4f2:	6019      	str	r1, [r3, #0]
 800f4f4:	e002      	b.n	800f4fc <_printf_i+0x19c>
 800f4f6:	066a      	lsls	r2, r5, #25
 800f4f8:	d5fb      	bpl.n	800f4f2 <_printf_i+0x192>
 800f4fa:	8019      	strh	r1, [r3, #0]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	6123      	str	r3, [r4, #16]
 800f500:	4665      	mov	r5, ip
 800f502:	e7b9      	b.n	800f478 <_printf_i+0x118>
 800f504:	6813      	ldr	r3, [r2, #0]
 800f506:	1d19      	adds	r1, r3, #4
 800f508:	6011      	str	r1, [r2, #0]
 800f50a:	681d      	ldr	r5, [r3, #0]
 800f50c:	6862      	ldr	r2, [r4, #4]
 800f50e:	2100      	movs	r1, #0
 800f510:	4628      	mov	r0, r5
 800f512:	f7f0 fe8d 	bl	8000230 <memchr>
 800f516:	b108      	cbz	r0, 800f51c <_printf_i+0x1bc>
 800f518:	1b40      	subs	r0, r0, r5
 800f51a:	6060      	str	r0, [r4, #4]
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	2300      	movs	r3, #0
 800f522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f526:	e7a7      	b.n	800f478 <_printf_i+0x118>
 800f528:	6923      	ldr	r3, [r4, #16]
 800f52a:	462a      	mov	r2, r5
 800f52c:	4639      	mov	r1, r7
 800f52e:	4630      	mov	r0, r6
 800f530:	47c0      	blx	r8
 800f532:	3001      	adds	r0, #1
 800f534:	d0aa      	beq.n	800f48c <_printf_i+0x12c>
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	079b      	lsls	r3, r3, #30
 800f53a:	d413      	bmi.n	800f564 <_printf_i+0x204>
 800f53c:	68e0      	ldr	r0, [r4, #12]
 800f53e:	9b03      	ldr	r3, [sp, #12]
 800f540:	4298      	cmp	r0, r3
 800f542:	bfb8      	it	lt
 800f544:	4618      	movlt	r0, r3
 800f546:	e7a3      	b.n	800f490 <_printf_i+0x130>
 800f548:	2301      	movs	r3, #1
 800f54a:	464a      	mov	r2, r9
 800f54c:	4639      	mov	r1, r7
 800f54e:	4630      	mov	r0, r6
 800f550:	47c0      	blx	r8
 800f552:	3001      	adds	r0, #1
 800f554:	d09a      	beq.n	800f48c <_printf_i+0x12c>
 800f556:	3501      	adds	r5, #1
 800f558:	68e3      	ldr	r3, [r4, #12]
 800f55a:	9a03      	ldr	r2, [sp, #12]
 800f55c:	1a9b      	subs	r3, r3, r2
 800f55e:	42ab      	cmp	r3, r5
 800f560:	dcf2      	bgt.n	800f548 <_printf_i+0x1e8>
 800f562:	e7eb      	b.n	800f53c <_printf_i+0x1dc>
 800f564:	2500      	movs	r5, #0
 800f566:	f104 0919 	add.w	r9, r4, #25
 800f56a:	e7f5      	b.n	800f558 <_printf_i+0x1f8>
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1ac      	bne.n	800f4ca <_printf_i+0x16a>
 800f570:	7803      	ldrb	r3, [r0, #0]
 800f572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f576:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f57a:	e76c      	b.n	800f456 <_printf_i+0xf6>
 800f57c:	08013ca8 	.word	0x08013ca8
 800f580:	08013cb9 	.word	0x08013cb9

0800f584 <_puts_r>:
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	460e      	mov	r6, r1
 800f588:	4605      	mov	r5, r0
 800f58a:	b118      	cbz	r0, 800f594 <_puts_r+0x10>
 800f58c:	6983      	ldr	r3, [r0, #24]
 800f58e:	b90b      	cbnz	r3, 800f594 <_puts_r+0x10>
 800f590:	f001 f896 	bl	80106c0 <__sinit>
 800f594:	69ab      	ldr	r3, [r5, #24]
 800f596:	68ac      	ldr	r4, [r5, #8]
 800f598:	b913      	cbnz	r3, 800f5a0 <_puts_r+0x1c>
 800f59a:	4628      	mov	r0, r5
 800f59c:	f001 f890 	bl	80106c0 <__sinit>
 800f5a0:	4b23      	ldr	r3, [pc, #140]	; (800f630 <_puts_r+0xac>)
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d117      	bne.n	800f5d6 <_puts_r+0x52>
 800f5a6:	686c      	ldr	r4, [r5, #4]
 800f5a8:	89a3      	ldrh	r3, [r4, #12]
 800f5aa:	071b      	lsls	r3, r3, #28
 800f5ac:	d51d      	bpl.n	800f5ea <_puts_r+0x66>
 800f5ae:	6923      	ldr	r3, [r4, #16]
 800f5b0:	b1db      	cbz	r3, 800f5ea <_puts_r+0x66>
 800f5b2:	3e01      	subs	r6, #1
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	60a3      	str	r3, [r4, #8]
 800f5be:	b9e9      	cbnz	r1, 800f5fc <_puts_r+0x78>
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	da2e      	bge.n	800f622 <_puts_r+0x9e>
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	210a      	movs	r1, #10
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f000 f883 	bl	800f6d4 <__swbuf_r>
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	d011      	beq.n	800f5f6 <_puts_r+0x72>
 800f5d2:	200a      	movs	r0, #10
 800f5d4:	e011      	b.n	800f5fa <_puts_r+0x76>
 800f5d6:	4b17      	ldr	r3, [pc, #92]	; (800f634 <_puts_r+0xb0>)
 800f5d8:	429c      	cmp	r4, r3
 800f5da:	d101      	bne.n	800f5e0 <_puts_r+0x5c>
 800f5dc:	68ac      	ldr	r4, [r5, #8]
 800f5de:	e7e3      	b.n	800f5a8 <_puts_r+0x24>
 800f5e0:	4b15      	ldr	r3, [pc, #84]	; (800f638 <_puts_r+0xb4>)
 800f5e2:	429c      	cmp	r4, r3
 800f5e4:	bf08      	it	eq
 800f5e6:	68ec      	ldreq	r4, [r5, #12]
 800f5e8:	e7de      	b.n	800f5a8 <_puts_r+0x24>
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f000 f8c3 	bl	800f778 <__swsetup_r>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d0dd      	beq.n	800f5b2 <_puts_r+0x2e>
 800f5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	da04      	bge.n	800f60a <_puts_r+0x86>
 800f600:	69a2      	ldr	r2, [r4, #24]
 800f602:	429a      	cmp	r2, r3
 800f604:	dc06      	bgt.n	800f614 <_puts_r+0x90>
 800f606:	290a      	cmp	r1, #10
 800f608:	d004      	beq.n	800f614 <_puts_r+0x90>
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	6022      	str	r2, [r4, #0]
 800f610:	7019      	strb	r1, [r3, #0]
 800f612:	e7cf      	b.n	800f5b4 <_puts_r+0x30>
 800f614:	4622      	mov	r2, r4
 800f616:	4628      	mov	r0, r5
 800f618:	f000 f85c 	bl	800f6d4 <__swbuf_r>
 800f61c:	3001      	adds	r0, #1
 800f61e:	d1c9      	bne.n	800f5b4 <_puts_r+0x30>
 800f620:	e7e9      	b.n	800f5f6 <_puts_r+0x72>
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	200a      	movs	r0, #10
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	6022      	str	r2, [r4, #0]
 800f62a:	7018      	strb	r0, [r3, #0]
 800f62c:	e7e5      	b.n	800f5fa <_puts_r+0x76>
 800f62e:	bf00      	nop
 800f630:	08013cf8 	.word	0x08013cf8
 800f634:	08013d18 	.word	0x08013d18
 800f638:	08013cd8 	.word	0x08013cd8

0800f63c <puts>:
 800f63c:	4b02      	ldr	r3, [pc, #8]	; (800f648 <puts+0xc>)
 800f63e:	4601      	mov	r1, r0
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	f7ff bf9f 	b.w	800f584 <_puts_r>
 800f646:	bf00      	nop
 800f648:	20001cac 	.word	0x20001cac

0800f64c <sniprintf>:
 800f64c:	b40c      	push	{r2, r3}
 800f64e:	b530      	push	{r4, r5, lr}
 800f650:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <sniprintf+0x64>)
 800f652:	1e0c      	subs	r4, r1, #0
 800f654:	b09d      	sub	sp, #116	; 0x74
 800f656:	681d      	ldr	r5, [r3, #0]
 800f658:	da08      	bge.n	800f66c <sniprintf+0x20>
 800f65a:	238b      	movs	r3, #139	; 0x8b
 800f65c:	602b      	str	r3, [r5, #0]
 800f65e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f662:	b01d      	add	sp, #116	; 0x74
 800f664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f668:	b002      	add	sp, #8
 800f66a:	4770      	bx	lr
 800f66c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f670:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f674:	bf14      	ite	ne
 800f676:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f67a:	4623      	moveq	r3, r4
 800f67c:	9304      	str	r3, [sp, #16]
 800f67e:	9307      	str	r3, [sp, #28]
 800f680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f684:	9002      	str	r0, [sp, #8]
 800f686:	9006      	str	r0, [sp, #24]
 800f688:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f68c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f68e:	ab21      	add	r3, sp, #132	; 0x84
 800f690:	a902      	add	r1, sp, #8
 800f692:	4628      	mov	r0, r5
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	f001 fd0d 	bl	80110b4 <_svfiprintf_r>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	bfbc      	itt	lt
 800f69e:	238b      	movlt	r3, #139	; 0x8b
 800f6a0:	602b      	strlt	r3, [r5, #0]
 800f6a2:	2c00      	cmp	r4, #0
 800f6a4:	d0dd      	beq.n	800f662 <sniprintf+0x16>
 800f6a6:	9b02      	ldr	r3, [sp, #8]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	e7d9      	b.n	800f662 <sniprintf+0x16>
 800f6ae:	bf00      	nop
 800f6b0:	20001cac 	.word	0x20001cac

0800f6b4 <strcat>:
 800f6b4:	b510      	push	{r4, lr}
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	1c5c      	adds	r4, r3, #1
 800f6bc:	b93a      	cbnz	r2, 800f6ce <strcat+0x1a>
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6c8:	2a00      	cmp	r2, #0
 800f6ca:	d1f9      	bne.n	800f6c0 <strcat+0xc>
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	4623      	mov	r3, r4
 800f6d0:	e7f2      	b.n	800f6b8 <strcat+0x4>
	...

0800f6d4 <__swbuf_r>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	460e      	mov	r6, r1
 800f6d8:	4614      	mov	r4, r2
 800f6da:	4605      	mov	r5, r0
 800f6dc:	b118      	cbz	r0, 800f6e6 <__swbuf_r+0x12>
 800f6de:	6983      	ldr	r3, [r0, #24]
 800f6e0:	b90b      	cbnz	r3, 800f6e6 <__swbuf_r+0x12>
 800f6e2:	f000 ffed 	bl	80106c0 <__sinit>
 800f6e6:	4b21      	ldr	r3, [pc, #132]	; (800f76c <__swbuf_r+0x98>)
 800f6e8:	429c      	cmp	r4, r3
 800f6ea:	d12a      	bne.n	800f742 <__swbuf_r+0x6e>
 800f6ec:	686c      	ldr	r4, [r5, #4]
 800f6ee:	69a3      	ldr	r3, [r4, #24]
 800f6f0:	60a3      	str	r3, [r4, #8]
 800f6f2:	89a3      	ldrh	r3, [r4, #12]
 800f6f4:	071a      	lsls	r2, r3, #28
 800f6f6:	d52e      	bpl.n	800f756 <__swbuf_r+0x82>
 800f6f8:	6923      	ldr	r3, [r4, #16]
 800f6fa:	b363      	cbz	r3, 800f756 <__swbuf_r+0x82>
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	6820      	ldr	r0, [r4, #0]
 800f700:	1ac0      	subs	r0, r0, r3
 800f702:	6963      	ldr	r3, [r4, #20]
 800f704:	b2f6      	uxtb	r6, r6
 800f706:	4283      	cmp	r3, r0
 800f708:	4637      	mov	r7, r6
 800f70a:	dc04      	bgt.n	800f716 <__swbuf_r+0x42>
 800f70c:	4621      	mov	r1, r4
 800f70e:	4628      	mov	r0, r5
 800f710:	f000 ff6c 	bl	80105ec <_fflush_r>
 800f714:	bb28      	cbnz	r0, 800f762 <__swbuf_r+0x8e>
 800f716:	68a3      	ldr	r3, [r4, #8]
 800f718:	3b01      	subs	r3, #1
 800f71a:	60a3      	str	r3, [r4, #8]
 800f71c:	6823      	ldr	r3, [r4, #0]
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	6022      	str	r2, [r4, #0]
 800f722:	701e      	strb	r6, [r3, #0]
 800f724:	6963      	ldr	r3, [r4, #20]
 800f726:	3001      	adds	r0, #1
 800f728:	4283      	cmp	r3, r0
 800f72a:	d004      	beq.n	800f736 <__swbuf_r+0x62>
 800f72c:	89a3      	ldrh	r3, [r4, #12]
 800f72e:	07db      	lsls	r3, r3, #31
 800f730:	d519      	bpl.n	800f766 <__swbuf_r+0x92>
 800f732:	2e0a      	cmp	r6, #10
 800f734:	d117      	bne.n	800f766 <__swbuf_r+0x92>
 800f736:	4621      	mov	r1, r4
 800f738:	4628      	mov	r0, r5
 800f73a:	f000 ff57 	bl	80105ec <_fflush_r>
 800f73e:	b190      	cbz	r0, 800f766 <__swbuf_r+0x92>
 800f740:	e00f      	b.n	800f762 <__swbuf_r+0x8e>
 800f742:	4b0b      	ldr	r3, [pc, #44]	; (800f770 <__swbuf_r+0x9c>)
 800f744:	429c      	cmp	r4, r3
 800f746:	d101      	bne.n	800f74c <__swbuf_r+0x78>
 800f748:	68ac      	ldr	r4, [r5, #8]
 800f74a:	e7d0      	b.n	800f6ee <__swbuf_r+0x1a>
 800f74c:	4b09      	ldr	r3, [pc, #36]	; (800f774 <__swbuf_r+0xa0>)
 800f74e:	429c      	cmp	r4, r3
 800f750:	bf08      	it	eq
 800f752:	68ec      	ldreq	r4, [r5, #12]
 800f754:	e7cb      	b.n	800f6ee <__swbuf_r+0x1a>
 800f756:	4621      	mov	r1, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	f000 f80d 	bl	800f778 <__swsetup_r>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0cc      	beq.n	800f6fc <__swbuf_r+0x28>
 800f762:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f766:	4638      	mov	r0, r7
 800f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f76a:	bf00      	nop
 800f76c:	08013cf8 	.word	0x08013cf8
 800f770:	08013d18 	.word	0x08013d18
 800f774:	08013cd8 	.word	0x08013cd8

0800f778 <__swsetup_r>:
 800f778:	4b32      	ldr	r3, [pc, #200]	; (800f844 <__swsetup_r+0xcc>)
 800f77a:	b570      	push	{r4, r5, r6, lr}
 800f77c:	681d      	ldr	r5, [r3, #0]
 800f77e:	4606      	mov	r6, r0
 800f780:	460c      	mov	r4, r1
 800f782:	b125      	cbz	r5, 800f78e <__swsetup_r+0x16>
 800f784:	69ab      	ldr	r3, [r5, #24]
 800f786:	b913      	cbnz	r3, 800f78e <__swsetup_r+0x16>
 800f788:	4628      	mov	r0, r5
 800f78a:	f000 ff99 	bl	80106c0 <__sinit>
 800f78e:	4b2e      	ldr	r3, [pc, #184]	; (800f848 <__swsetup_r+0xd0>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d10f      	bne.n	800f7b4 <__swsetup_r+0x3c>
 800f794:	686c      	ldr	r4, [r5, #4]
 800f796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	0715      	lsls	r5, r2, #28
 800f79e:	d42c      	bmi.n	800f7fa <__swsetup_r+0x82>
 800f7a0:	06d0      	lsls	r0, r2, #27
 800f7a2:	d411      	bmi.n	800f7c8 <__swsetup_r+0x50>
 800f7a4:	2209      	movs	r2, #9
 800f7a6:	6032      	str	r2, [r6, #0]
 800f7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ac:	81a3      	strh	r3, [r4, #12]
 800f7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7b2:	e03e      	b.n	800f832 <__swsetup_r+0xba>
 800f7b4:	4b25      	ldr	r3, [pc, #148]	; (800f84c <__swsetup_r+0xd4>)
 800f7b6:	429c      	cmp	r4, r3
 800f7b8:	d101      	bne.n	800f7be <__swsetup_r+0x46>
 800f7ba:	68ac      	ldr	r4, [r5, #8]
 800f7bc:	e7eb      	b.n	800f796 <__swsetup_r+0x1e>
 800f7be:	4b24      	ldr	r3, [pc, #144]	; (800f850 <__swsetup_r+0xd8>)
 800f7c0:	429c      	cmp	r4, r3
 800f7c2:	bf08      	it	eq
 800f7c4:	68ec      	ldreq	r4, [r5, #12]
 800f7c6:	e7e6      	b.n	800f796 <__swsetup_r+0x1e>
 800f7c8:	0751      	lsls	r1, r2, #29
 800f7ca:	d512      	bpl.n	800f7f2 <__swsetup_r+0x7a>
 800f7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7ce:	b141      	cbz	r1, 800f7e2 <__swsetup_r+0x6a>
 800f7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7d4:	4299      	cmp	r1, r3
 800f7d6:	d002      	beq.n	800f7de <__swsetup_r+0x66>
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f001 fb69 	bl	8010eb0 <_free_r>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	6363      	str	r3, [r4, #52]	; 0x34
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	6063      	str	r3, [r4, #4]
 800f7ee:	6923      	ldr	r3, [r4, #16]
 800f7f0:	6023      	str	r3, [r4, #0]
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	f043 0308 	orr.w	r3, r3, #8
 800f7f8:	81a3      	strh	r3, [r4, #12]
 800f7fa:	6923      	ldr	r3, [r4, #16]
 800f7fc:	b94b      	cbnz	r3, 800f812 <__swsetup_r+0x9a>
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f808:	d003      	beq.n	800f812 <__swsetup_r+0x9a>
 800f80a:	4621      	mov	r1, r4
 800f80c:	4630      	mov	r0, r6
 800f80e:	f001 f813 	bl	8010838 <__smakebuf_r>
 800f812:	89a2      	ldrh	r2, [r4, #12]
 800f814:	f012 0301 	ands.w	r3, r2, #1
 800f818:	d00c      	beq.n	800f834 <__swsetup_r+0xbc>
 800f81a:	2300      	movs	r3, #0
 800f81c:	60a3      	str	r3, [r4, #8]
 800f81e:	6963      	ldr	r3, [r4, #20]
 800f820:	425b      	negs	r3, r3
 800f822:	61a3      	str	r3, [r4, #24]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	b953      	cbnz	r3, 800f83e <__swsetup_r+0xc6>
 800f828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f82c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f830:	d1ba      	bne.n	800f7a8 <__swsetup_r+0x30>
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	0792      	lsls	r2, r2, #30
 800f836:	bf58      	it	pl
 800f838:	6963      	ldrpl	r3, [r4, #20]
 800f83a:	60a3      	str	r3, [r4, #8]
 800f83c:	e7f2      	b.n	800f824 <__swsetup_r+0xac>
 800f83e:	2000      	movs	r0, #0
 800f840:	e7f7      	b.n	800f832 <__swsetup_r+0xba>
 800f842:	bf00      	nop
 800f844:	20001cac 	.word	0x20001cac
 800f848:	08013cf8 	.word	0x08013cf8
 800f84c:	08013d18 	.word	0x08013d18
 800f850:	08013cd8 	.word	0x08013cd8

0800f854 <quorem>:
 800f854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f858:	6903      	ldr	r3, [r0, #16]
 800f85a:	690c      	ldr	r4, [r1, #16]
 800f85c:	42a3      	cmp	r3, r4
 800f85e:	4680      	mov	r8, r0
 800f860:	f2c0 8082 	blt.w	800f968 <quorem+0x114>
 800f864:	3c01      	subs	r4, #1
 800f866:	f101 0714 	add.w	r7, r1, #20
 800f86a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f86e:	f100 0614 	add.w	r6, r0, #20
 800f872:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f876:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f87a:	eb06 030c 	add.w	r3, r6, ip
 800f87e:	3501      	adds	r5, #1
 800f880:	eb07 090c 	add.w	r9, r7, ip
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	fbb0 f5f5 	udiv	r5, r0, r5
 800f88a:	b395      	cbz	r5, 800f8f2 <quorem+0x9e>
 800f88c:	f04f 0a00 	mov.w	sl, #0
 800f890:	4638      	mov	r0, r7
 800f892:	46b6      	mov	lr, r6
 800f894:	46d3      	mov	fp, sl
 800f896:	f850 2b04 	ldr.w	r2, [r0], #4
 800f89a:	b293      	uxth	r3, r2
 800f89c:	fb05 a303 	mla	r3, r5, r3, sl
 800f8a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	ebab 0303 	sub.w	r3, fp, r3
 800f8aa:	0c12      	lsrs	r2, r2, #16
 800f8ac:	f8de b000 	ldr.w	fp, [lr]
 800f8b0:	fb05 a202 	mla	r2, r5, r2, sl
 800f8b4:	fa13 f38b 	uxtah	r3, r3, fp
 800f8b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f8bc:	fa1f fb82 	uxth.w	fp, r2
 800f8c0:	f8de 2000 	ldr.w	r2, [lr]
 800f8c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f8c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8d2:	4581      	cmp	r9, r0
 800f8d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f8d8:	f84e 3b04 	str.w	r3, [lr], #4
 800f8dc:	d2db      	bcs.n	800f896 <quorem+0x42>
 800f8de:	f856 300c 	ldr.w	r3, [r6, ip]
 800f8e2:	b933      	cbnz	r3, 800f8f2 <quorem+0x9e>
 800f8e4:	9b01      	ldr	r3, [sp, #4]
 800f8e6:	3b04      	subs	r3, #4
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	d330      	bcc.n	800f950 <quorem+0xfc>
 800f8ee:	f8c8 4010 	str.w	r4, [r8, #16]
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	f001 fa08 	bl	8010d08 <__mcmp>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	db25      	blt.n	800f948 <quorem+0xf4>
 800f8fc:	3501      	adds	r5, #1
 800f8fe:	4630      	mov	r0, r6
 800f900:	f04f 0c00 	mov.w	ip, #0
 800f904:	f857 2b04 	ldr.w	r2, [r7], #4
 800f908:	f8d0 e000 	ldr.w	lr, [r0]
 800f90c:	b293      	uxth	r3, r2
 800f90e:	ebac 0303 	sub.w	r3, ip, r3
 800f912:	0c12      	lsrs	r2, r2, #16
 800f914:	fa13 f38e 	uxtah	r3, r3, lr
 800f918:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f91c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f920:	b29b      	uxth	r3, r3
 800f922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f926:	45b9      	cmp	r9, r7
 800f928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f92c:	f840 3b04 	str.w	r3, [r0], #4
 800f930:	d2e8      	bcs.n	800f904 <quorem+0xb0>
 800f932:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f936:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f93a:	b92a      	cbnz	r2, 800f948 <quorem+0xf4>
 800f93c:	3b04      	subs	r3, #4
 800f93e:	429e      	cmp	r6, r3
 800f940:	461a      	mov	r2, r3
 800f942:	d30b      	bcc.n	800f95c <quorem+0x108>
 800f944:	f8c8 4010 	str.w	r4, [r8, #16]
 800f948:	4628      	mov	r0, r5
 800f94a:	b003      	add	sp, #12
 800f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f950:	6812      	ldr	r2, [r2, #0]
 800f952:	3b04      	subs	r3, #4
 800f954:	2a00      	cmp	r2, #0
 800f956:	d1ca      	bne.n	800f8ee <quorem+0x9a>
 800f958:	3c01      	subs	r4, #1
 800f95a:	e7c5      	b.n	800f8e8 <quorem+0x94>
 800f95c:	6812      	ldr	r2, [r2, #0]
 800f95e:	3b04      	subs	r3, #4
 800f960:	2a00      	cmp	r2, #0
 800f962:	d1ef      	bne.n	800f944 <quorem+0xf0>
 800f964:	3c01      	subs	r4, #1
 800f966:	e7ea      	b.n	800f93e <quorem+0xea>
 800f968:	2000      	movs	r0, #0
 800f96a:	e7ee      	b.n	800f94a <quorem+0xf6>
 800f96c:	0000      	movs	r0, r0
	...

0800f970 <_dtoa_r>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	ec57 6b10 	vmov	r6, r7, d0
 800f978:	b097      	sub	sp, #92	; 0x5c
 800f97a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f97c:	9106      	str	r1, [sp, #24]
 800f97e:	4604      	mov	r4, r0
 800f980:	920b      	str	r2, [sp, #44]	; 0x2c
 800f982:	9312      	str	r3, [sp, #72]	; 0x48
 800f984:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f988:	e9cd 6700 	strd	r6, r7, [sp]
 800f98c:	b93d      	cbnz	r5, 800f99e <_dtoa_r+0x2e>
 800f98e:	2010      	movs	r0, #16
 800f990:	f000 ff92 	bl	80108b8 <malloc>
 800f994:	6260      	str	r0, [r4, #36]	; 0x24
 800f996:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f99a:	6005      	str	r5, [r0, #0]
 800f99c:	60c5      	str	r5, [r0, #12]
 800f99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9a0:	6819      	ldr	r1, [r3, #0]
 800f9a2:	b151      	cbz	r1, 800f9ba <_dtoa_r+0x4a>
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	604a      	str	r2, [r1, #4]
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	4093      	lsls	r3, r2
 800f9ac:	608b      	str	r3, [r1, #8]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f000 ffc9 	bl	8010946 <_Bfree>
 800f9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	601a      	str	r2, [r3, #0]
 800f9ba:	1e3b      	subs	r3, r7, #0
 800f9bc:	bfbb      	ittet	lt
 800f9be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f9c2:	9301      	strlt	r3, [sp, #4]
 800f9c4:	2300      	movge	r3, #0
 800f9c6:	2201      	movlt	r2, #1
 800f9c8:	bfac      	ite	ge
 800f9ca:	f8c8 3000 	strge.w	r3, [r8]
 800f9ce:	f8c8 2000 	strlt.w	r2, [r8]
 800f9d2:	4baf      	ldr	r3, [pc, #700]	; (800fc90 <_dtoa_r+0x320>)
 800f9d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f9d8:	ea33 0308 	bics.w	r3, r3, r8
 800f9dc:	d114      	bne.n	800fa08 <_dtoa_r+0x98>
 800f9de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f9e4:	6013      	str	r3, [r2, #0]
 800f9e6:	9b00      	ldr	r3, [sp, #0]
 800f9e8:	b923      	cbnz	r3, 800f9f4 <_dtoa_r+0x84>
 800f9ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	f000 8542 	beq.w	8010478 <_dtoa_r+0xb08>
 800f9f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fca4 <_dtoa_r+0x334>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f000 8544 	beq.w	8010488 <_dtoa_r+0xb18>
 800fa00:	f10b 0303 	add.w	r3, fp, #3
 800fa04:	f000 bd3e 	b.w	8010484 <_dtoa_r+0xb14>
 800fa08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2300      	movs	r3, #0
 800fa10:	4630      	mov	r0, r6
 800fa12:	4639      	mov	r1, r7
 800fa14:	f7f1 f880 	bl	8000b18 <__aeabi_dcmpeq>
 800fa18:	4681      	mov	r9, r0
 800fa1a:	b168      	cbz	r0, 800fa38 <_dtoa_r+0xc8>
 800fa1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fa1e:	2301      	movs	r3, #1
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f000 8524 	beq.w	8010472 <_dtoa_r+0xb02>
 800fa2a:	4b9a      	ldr	r3, [pc, #616]	; (800fc94 <_dtoa_r+0x324>)
 800fa2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa2e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	f000 bd28 	b.w	8010488 <_dtoa_r+0xb18>
 800fa38:	aa14      	add	r2, sp, #80	; 0x50
 800fa3a:	a915      	add	r1, sp, #84	; 0x54
 800fa3c:	ec47 6b10 	vmov	d0, r6, r7
 800fa40:	4620      	mov	r0, r4
 800fa42:	f001 f9d8 	bl	8010df6 <__d2b>
 800fa46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fa4a:	9004      	str	r0, [sp, #16]
 800fa4c:	2d00      	cmp	r5, #0
 800fa4e:	d07c      	beq.n	800fb4a <_dtoa_r+0x1da>
 800fa50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fa58:	46b2      	mov	sl, r6
 800fa5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fa5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fa66:	2200      	movs	r2, #0
 800fa68:	4b8b      	ldr	r3, [pc, #556]	; (800fc98 <_dtoa_r+0x328>)
 800fa6a:	4650      	mov	r0, sl
 800fa6c:	4659      	mov	r1, fp
 800fa6e:	f7f0 fc33 	bl	80002d8 <__aeabi_dsub>
 800fa72:	a381      	add	r3, pc, #516	; (adr r3, 800fc78 <_dtoa_r+0x308>)
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	f7f0 fde6 	bl	8000648 <__aeabi_dmul>
 800fa7c:	a380      	add	r3, pc, #512	; (adr r3, 800fc80 <_dtoa_r+0x310>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	f7f0 fc2b 	bl	80002dc <__adddf3>
 800fa86:	4606      	mov	r6, r0
 800fa88:	4628      	mov	r0, r5
 800fa8a:	460f      	mov	r7, r1
 800fa8c:	f7f0 fd72 	bl	8000574 <__aeabi_i2d>
 800fa90:	a37d      	add	r3, pc, #500	; (adr r3, 800fc88 <_dtoa_r+0x318>)
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	f7f0 fdd7 	bl	8000648 <__aeabi_dmul>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f0 fc1b 	bl	80002dc <__adddf3>
 800faa6:	4606      	mov	r6, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	f7f1 f87d 	bl	8000ba8 <__aeabi_d2iz>
 800faae:	2200      	movs	r2, #0
 800fab0:	4682      	mov	sl, r0
 800fab2:	2300      	movs	r3, #0
 800fab4:	4630      	mov	r0, r6
 800fab6:	4639      	mov	r1, r7
 800fab8:	f7f1 f838 	bl	8000b2c <__aeabi_dcmplt>
 800fabc:	b148      	cbz	r0, 800fad2 <_dtoa_r+0x162>
 800fabe:	4650      	mov	r0, sl
 800fac0:	f7f0 fd58 	bl	8000574 <__aeabi_i2d>
 800fac4:	4632      	mov	r2, r6
 800fac6:	463b      	mov	r3, r7
 800fac8:	f7f1 f826 	bl	8000b18 <__aeabi_dcmpeq>
 800facc:	b908      	cbnz	r0, 800fad2 <_dtoa_r+0x162>
 800face:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fad2:	f1ba 0f16 	cmp.w	sl, #22
 800fad6:	d859      	bhi.n	800fb8c <_dtoa_r+0x21c>
 800fad8:	4970      	ldr	r1, [pc, #448]	; (800fc9c <_dtoa_r+0x32c>)
 800fada:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fae6:	f7f1 f83f 	bl	8000b68 <__aeabi_dcmpgt>
 800faea:	2800      	cmp	r0, #0
 800faec:	d050      	beq.n	800fb90 <_dtoa_r+0x220>
 800faee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800faf2:	2300      	movs	r3, #0
 800faf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800faf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faf8:	1b5d      	subs	r5, r3, r5
 800fafa:	f1b5 0801 	subs.w	r8, r5, #1
 800fafe:	bf49      	itett	mi
 800fb00:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb04:	2300      	movpl	r3, #0
 800fb06:	9305      	strmi	r3, [sp, #20]
 800fb08:	f04f 0800 	movmi.w	r8, #0
 800fb0c:	bf58      	it	pl
 800fb0e:	9305      	strpl	r3, [sp, #20]
 800fb10:	f1ba 0f00 	cmp.w	sl, #0
 800fb14:	db3e      	blt.n	800fb94 <_dtoa_r+0x224>
 800fb16:	2300      	movs	r3, #0
 800fb18:	44d0      	add	r8, sl
 800fb1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fb1e:	9307      	str	r3, [sp, #28]
 800fb20:	9b06      	ldr	r3, [sp, #24]
 800fb22:	2b09      	cmp	r3, #9
 800fb24:	f200 8090 	bhi.w	800fc48 <_dtoa_r+0x2d8>
 800fb28:	2b05      	cmp	r3, #5
 800fb2a:	bfc4      	itt	gt
 800fb2c:	3b04      	subgt	r3, #4
 800fb2e:	9306      	strgt	r3, [sp, #24]
 800fb30:	9b06      	ldr	r3, [sp, #24]
 800fb32:	f1a3 0302 	sub.w	r3, r3, #2
 800fb36:	bfcc      	ite	gt
 800fb38:	2500      	movgt	r5, #0
 800fb3a:	2501      	movle	r5, #1
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	f200 808f 	bhi.w	800fc60 <_dtoa_r+0x2f0>
 800fb42:	e8df f003 	tbb	[pc, r3]
 800fb46:	7f7d      	.short	0x7f7d
 800fb48:	7131      	.short	0x7131
 800fb4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fb4e:	441d      	add	r5, r3
 800fb50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fb54:	2820      	cmp	r0, #32
 800fb56:	dd13      	ble.n	800fb80 <_dtoa_r+0x210>
 800fb58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fb5c:	9b00      	ldr	r3, [sp, #0]
 800fb5e:	fa08 f800 	lsl.w	r8, r8, r0
 800fb62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fb66:	fa23 f000 	lsr.w	r0, r3, r0
 800fb6a:	ea48 0000 	orr.w	r0, r8, r0
 800fb6e:	f7f0 fcf1 	bl	8000554 <__aeabi_ui2d>
 800fb72:	2301      	movs	r3, #1
 800fb74:	4682      	mov	sl, r0
 800fb76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fb7a:	3d01      	subs	r5, #1
 800fb7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fb7e:	e772      	b.n	800fa66 <_dtoa_r+0xf6>
 800fb80:	9b00      	ldr	r3, [sp, #0]
 800fb82:	f1c0 0020 	rsb	r0, r0, #32
 800fb86:	fa03 f000 	lsl.w	r0, r3, r0
 800fb8a:	e7f0      	b.n	800fb6e <_dtoa_r+0x1fe>
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e7b1      	b.n	800faf4 <_dtoa_r+0x184>
 800fb90:	900f      	str	r0, [sp, #60]	; 0x3c
 800fb92:	e7b0      	b.n	800faf6 <_dtoa_r+0x186>
 800fb94:	9b05      	ldr	r3, [sp, #20]
 800fb96:	eba3 030a 	sub.w	r3, r3, sl
 800fb9a:	9305      	str	r3, [sp, #20]
 800fb9c:	f1ca 0300 	rsb	r3, sl, #0
 800fba0:	9307      	str	r3, [sp, #28]
 800fba2:	2300      	movs	r3, #0
 800fba4:	930e      	str	r3, [sp, #56]	; 0x38
 800fba6:	e7bb      	b.n	800fb20 <_dtoa_r+0x1b0>
 800fba8:	2301      	movs	r3, #1
 800fbaa:	930a      	str	r3, [sp, #40]	; 0x28
 800fbac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	dd59      	ble.n	800fc66 <_dtoa_r+0x2f6>
 800fbb2:	9302      	str	r3, [sp, #8]
 800fbb4:	4699      	mov	r9, r3
 800fbb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbb8:	2200      	movs	r2, #0
 800fbba:	6072      	str	r2, [r6, #4]
 800fbbc:	2204      	movs	r2, #4
 800fbbe:	f102 0014 	add.w	r0, r2, #20
 800fbc2:	4298      	cmp	r0, r3
 800fbc4:	6871      	ldr	r1, [r6, #4]
 800fbc6:	d953      	bls.n	800fc70 <_dtoa_r+0x300>
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 fe88 	bl	80108de <_Balloc>
 800fbce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbd0:	6030      	str	r0, [r6, #0]
 800fbd2:	f1b9 0f0e 	cmp.w	r9, #14
 800fbd6:	f8d3 b000 	ldr.w	fp, [r3]
 800fbda:	f200 80e6 	bhi.w	800fdaa <_dtoa_r+0x43a>
 800fbde:	2d00      	cmp	r5, #0
 800fbe0:	f000 80e3 	beq.w	800fdaa <_dtoa_r+0x43a>
 800fbe4:	ed9d 7b00 	vldr	d7, [sp]
 800fbe8:	f1ba 0f00 	cmp.w	sl, #0
 800fbec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fbf0:	dd74      	ble.n	800fcdc <_dtoa_r+0x36c>
 800fbf2:	4a2a      	ldr	r2, [pc, #168]	; (800fc9c <_dtoa_r+0x32c>)
 800fbf4:	f00a 030f 	and.w	r3, sl, #15
 800fbf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fbfc:	ed93 7b00 	vldr	d7, [r3]
 800fc00:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fc04:	06f0      	lsls	r0, r6, #27
 800fc06:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fc0a:	d565      	bpl.n	800fcd8 <_dtoa_r+0x368>
 800fc0c:	4b24      	ldr	r3, [pc, #144]	; (800fca0 <_dtoa_r+0x330>)
 800fc0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fc12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc16:	f7f0 fe41 	bl	800089c <__aeabi_ddiv>
 800fc1a:	e9cd 0100 	strd	r0, r1, [sp]
 800fc1e:	f006 060f 	and.w	r6, r6, #15
 800fc22:	2503      	movs	r5, #3
 800fc24:	4f1e      	ldr	r7, [pc, #120]	; (800fca0 <_dtoa_r+0x330>)
 800fc26:	e04c      	b.n	800fcc2 <_dtoa_r+0x352>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc2e:	4453      	add	r3, sl
 800fc30:	f103 0901 	add.w	r9, r3, #1
 800fc34:	9302      	str	r3, [sp, #8]
 800fc36:	464b      	mov	r3, r9
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	bfb8      	it	lt
 800fc3c:	2301      	movlt	r3, #1
 800fc3e:	e7ba      	b.n	800fbb6 <_dtoa_r+0x246>
 800fc40:	2300      	movs	r3, #0
 800fc42:	e7b2      	b.n	800fbaa <_dtoa_r+0x23a>
 800fc44:	2300      	movs	r3, #0
 800fc46:	e7f0      	b.n	800fc2a <_dtoa_r+0x2ba>
 800fc48:	2501      	movs	r5, #1
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	9306      	str	r3, [sp, #24]
 800fc4e:	950a      	str	r5, [sp, #40]	; 0x28
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc54:	9302      	str	r3, [sp, #8]
 800fc56:	4699      	mov	r9, r3
 800fc58:	2200      	movs	r2, #0
 800fc5a:	2312      	movs	r3, #18
 800fc5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fc5e:	e7aa      	b.n	800fbb6 <_dtoa_r+0x246>
 800fc60:	2301      	movs	r3, #1
 800fc62:	930a      	str	r3, [sp, #40]	; 0x28
 800fc64:	e7f4      	b.n	800fc50 <_dtoa_r+0x2e0>
 800fc66:	2301      	movs	r3, #1
 800fc68:	9302      	str	r3, [sp, #8]
 800fc6a:	4699      	mov	r9, r3
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	e7f5      	b.n	800fc5c <_dtoa_r+0x2ec>
 800fc70:	3101      	adds	r1, #1
 800fc72:	6071      	str	r1, [r6, #4]
 800fc74:	0052      	lsls	r2, r2, #1
 800fc76:	e7a2      	b.n	800fbbe <_dtoa_r+0x24e>
 800fc78:	636f4361 	.word	0x636f4361
 800fc7c:	3fd287a7 	.word	0x3fd287a7
 800fc80:	8b60c8b3 	.word	0x8b60c8b3
 800fc84:	3fc68a28 	.word	0x3fc68a28
 800fc88:	509f79fb 	.word	0x509f79fb
 800fc8c:	3fd34413 	.word	0x3fd34413
 800fc90:	7ff00000 	.word	0x7ff00000
 800fc94:	08013f55 	.word	0x08013f55
 800fc98:	3ff80000 	.word	0x3ff80000
 800fc9c:	08013d60 	.word	0x08013d60
 800fca0:	08013d38 	.word	0x08013d38
 800fca4:	08013cd3 	.word	0x08013cd3
 800fca8:	07f1      	lsls	r1, r6, #31
 800fcaa:	d508      	bpl.n	800fcbe <_dtoa_r+0x34e>
 800fcac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcb4:	f7f0 fcc8 	bl	8000648 <__aeabi_dmul>
 800fcb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fcbc:	3501      	adds	r5, #1
 800fcbe:	1076      	asrs	r6, r6, #1
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	2e00      	cmp	r6, #0
 800fcc4:	d1f0      	bne.n	800fca8 <_dtoa_r+0x338>
 800fcc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fcca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcce:	f7f0 fde5 	bl	800089c <__aeabi_ddiv>
 800fcd2:	e9cd 0100 	strd	r0, r1, [sp]
 800fcd6:	e01a      	b.n	800fd0e <_dtoa_r+0x39e>
 800fcd8:	2502      	movs	r5, #2
 800fcda:	e7a3      	b.n	800fc24 <_dtoa_r+0x2b4>
 800fcdc:	f000 80a0 	beq.w	800fe20 <_dtoa_r+0x4b0>
 800fce0:	f1ca 0600 	rsb	r6, sl, #0
 800fce4:	4b9f      	ldr	r3, [pc, #636]	; (800ff64 <_dtoa_r+0x5f4>)
 800fce6:	4fa0      	ldr	r7, [pc, #640]	; (800ff68 <_dtoa_r+0x5f8>)
 800fce8:	f006 020f 	and.w	r2, r6, #15
 800fcec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fcf8:	f7f0 fca6 	bl	8000648 <__aeabi_dmul>
 800fcfc:	e9cd 0100 	strd	r0, r1, [sp]
 800fd00:	1136      	asrs	r6, r6, #4
 800fd02:	2300      	movs	r3, #0
 800fd04:	2502      	movs	r5, #2
 800fd06:	2e00      	cmp	r6, #0
 800fd08:	d17f      	bne.n	800fe0a <_dtoa_r+0x49a>
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e1      	bne.n	800fcd2 <_dtoa_r+0x362>
 800fd0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 8087 	beq.w	800fe24 <_dtoa_r+0x4b4>
 800fd16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	4b93      	ldr	r3, [pc, #588]	; (800ff6c <_dtoa_r+0x5fc>)
 800fd1e:	4630      	mov	r0, r6
 800fd20:	4639      	mov	r1, r7
 800fd22:	f7f0 ff03 	bl	8000b2c <__aeabi_dcmplt>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d07c      	beq.n	800fe24 <_dtoa_r+0x4b4>
 800fd2a:	f1b9 0f00 	cmp.w	r9, #0
 800fd2e:	d079      	beq.n	800fe24 <_dtoa_r+0x4b4>
 800fd30:	9b02      	ldr	r3, [sp, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dd35      	ble.n	800fda2 <_dtoa_r+0x432>
 800fd36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fd3a:	9308      	str	r3, [sp, #32]
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	2200      	movs	r2, #0
 800fd40:	4b8b      	ldr	r3, [pc, #556]	; (800ff70 <_dtoa_r+0x600>)
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7f0 fc80 	bl	8000648 <__aeabi_dmul>
 800fd48:	e9cd 0100 	strd	r0, r1, [sp]
 800fd4c:	9f02      	ldr	r7, [sp, #8]
 800fd4e:	3501      	adds	r5, #1
 800fd50:	4628      	mov	r0, r5
 800fd52:	f7f0 fc0f 	bl	8000574 <__aeabi_i2d>
 800fd56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd5a:	f7f0 fc75 	bl	8000648 <__aeabi_dmul>
 800fd5e:	2200      	movs	r2, #0
 800fd60:	4b84      	ldr	r3, [pc, #528]	; (800ff74 <_dtoa_r+0x604>)
 800fd62:	f7f0 fabb 	bl	80002dc <__adddf3>
 800fd66:	4605      	mov	r5, r0
 800fd68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fd6c:	2f00      	cmp	r7, #0
 800fd6e:	d15d      	bne.n	800fe2c <_dtoa_r+0x4bc>
 800fd70:	2200      	movs	r2, #0
 800fd72:	4b81      	ldr	r3, [pc, #516]	; (800ff78 <_dtoa_r+0x608>)
 800fd74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd78:	f7f0 faae 	bl	80002d8 <__aeabi_dsub>
 800fd7c:	462a      	mov	r2, r5
 800fd7e:	4633      	mov	r3, r6
 800fd80:	e9cd 0100 	strd	r0, r1, [sp]
 800fd84:	f7f0 fef0 	bl	8000b68 <__aeabi_dcmpgt>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	f040 8288 	bne.w	801029e <_dtoa_r+0x92e>
 800fd8e:	462a      	mov	r2, r5
 800fd90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fd94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd98:	f7f0 fec8 	bl	8000b2c <__aeabi_dcmplt>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	f040 827c 	bne.w	801029a <_dtoa_r+0x92a>
 800fda2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fda6:	e9cd 2300 	strd	r2, r3, [sp]
 800fdaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f2c0 8150 	blt.w	8010052 <_dtoa_r+0x6e2>
 800fdb2:	f1ba 0f0e 	cmp.w	sl, #14
 800fdb6:	f300 814c 	bgt.w	8010052 <_dtoa_r+0x6e2>
 800fdba:	4b6a      	ldr	r3, [pc, #424]	; (800ff64 <_dtoa_r+0x5f4>)
 800fdbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fdc0:	ed93 7b00 	vldr	d7, [r3]
 800fdc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdcc:	f280 80d8 	bge.w	800ff80 <_dtoa_r+0x610>
 800fdd0:	f1b9 0f00 	cmp.w	r9, #0
 800fdd4:	f300 80d4 	bgt.w	800ff80 <_dtoa_r+0x610>
 800fdd8:	f040 825e 	bne.w	8010298 <_dtoa_r+0x928>
 800fddc:	2200      	movs	r2, #0
 800fdde:	4b66      	ldr	r3, [pc, #408]	; (800ff78 <_dtoa_r+0x608>)
 800fde0:	ec51 0b17 	vmov	r0, r1, d7
 800fde4:	f7f0 fc30 	bl	8000648 <__aeabi_dmul>
 800fde8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdec:	f7f0 feb2 	bl	8000b54 <__aeabi_dcmpge>
 800fdf0:	464f      	mov	r7, r9
 800fdf2:	464e      	mov	r6, r9
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	f040 8234 	bne.w	8010262 <_dtoa_r+0x8f2>
 800fdfa:	2331      	movs	r3, #49	; 0x31
 800fdfc:	f10b 0501 	add.w	r5, fp, #1
 800fe00:	f88b 3000 	strb.w	r3, [fp]
 800fe04:	f10a 0a01 	add.w	sl, sl, #1
 800fe08:	e22f      	b.n	801026a <_dtoa_r+0x8fa>
 800fe0a:	07f2      	lsls	r2, r6, #31
 800fe0c:	d505      	bpl.n	800fe1a <_dtoa_r+0x4aa>
 800fe0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe12:	f7f0 fc19 	bl	8000648 <__aeabi_dmul>
 800fe16:	3501      	adds	r5, #1
 800fe18:	2301      	movs	r3, #1
 800fe1a:	1076      	asrs	r6, r6, #1
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	e772      	b.n	800fd06 <_dtoa_r+0x396>
 800fe20:	2502      	movs	r5, #2
 800fe22:	e774      	b.n	800fd0e <_dtoa_r+0x39e>
 800fe24:	f8cd a020 	str.w	sl, [sp, #32]
 800fe28:	464f      	mov	r7, r9
 800fe2a:	e791      	b.n	800fd50 <_dtoa_r+0x3e0>
 800fe2c:	4b4d      	ldr	r3, [pc, #308]	; (800ff64 <_dtoa_r+0x5f4>)
 800fe2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fe36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d047      	beq.n	800fecc <_dtoa_r+0x55c>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	2000      	movs	r0, #0
 800fe42:	494e      	ldr	r1, [pc, #312]	; (800ff7c <_dtoa_r+0x60c>)
 800fe44:	f7f0 fd2a 	bl	800089c <__aeabi_ddiv>
 800fe48:	462a      	mov	r2, r5
 800fe4a:	4633      	mov	r3, r6
 800fe4c:	f7f0 fa44 	bl	80002d8 <__aeabi_dsub>
 800fe50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fe54:	465d      	mov	r5, fp
 800fe56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe5a:	f7f0 fea5 	bl	8000ba8 <__aeabi_d2iz>
 800fe5e:	4606      	mov	r6, r0
 800fe60:	f7f0 fb88 	bl	8000574 <__aeabi_i2d>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe6c:	f7f0 fa34 	bl	80002d8 <__aeabi_dsub>
 800fe70:	3630      	adds	r6, #48	; 0x30
 800fe72:	f805 6b01 	strb.w	r6, [r5], #1
 800fe76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fe7a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe7e:	f7f0 fe55 	bl	8000b2c <__aeabi_dcmplt>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d163      	bne.n	800ff4e <_dtoa_r+0x5de>
 800fe86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	4937      	ldr	r1, [pc, #220]	; (800ff6c <_dtoa_r+0x5fc>)
 800fe8e:	f7f0 fa23 	bl	80002d8 <__aeabi_dsub>
 800fe92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fe96:	f7f0 fe49 	bl	8000b2c <__aeabi_dcmplt>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	f040 80b7 	bne.w	801000e <_dtoa_r+0x69e>
 800fea0:	eba5 030b 	sub.w	r3, r5, fp
 800fea4:	429f      	cmp	r7, r3
 800fea6:	f77f af7c 	ble.w	800fda2 <_dtoa_r+0x432>
 800feaa:	2200      	movs	r2, #0
 800feac:	4b30      	ldr	r3, [pc, #192]	; (800ff70 <_dtoa_r+0x600>)
 800feae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800feb2:	f7f0 fbc9 	bl	8000648 <__aeabi_dmul>
 800feb6:	2200      	movs	r2, #0
 800feb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800febc:	4b2c      	ldr	r3, [pc, #176]	; (800ff70 <_dtoa_r+0x600>)
 800febe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fec2:	f7f0 fbc1 	bl	8000648 <__aeabi_dmul>
 800fec6:	e9cd 0100 	strd	r0, r1, [sp]
 800feca:	e7c4      	b.n	800fe56 <_dtoa_r+0x4e6>
 800fecc:	462a      	mov	r2, r5
 800fece:	4633      	mov	r3, r6
 800fed0:	f7f0 fbba 	bl	8000648 <__aeabi_dmul>
 800fed4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fed8:	eb0b 0507 	add.w	r5, fp, r7
 800fedc:	465e      	mov	r6, fp
 800fede:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fee2:	f7f0 fe61 	bl	8000ba8 <__aeabi_d2iz>
 800fee6:	4607      	mov	r7, r0
 800fee8:	f7f0 fb44 	bl	8000574 <__aeabi_i2d>
 800feec:	3730      	adds	r7, #48	; 0x30
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fef6:	f7f0 f9ef 	bl	80002d8 <__aeabi_dsub>
 800fefa:	f806 7b01 	strb.w	r7, [r6], #1
 800fefe:	42ae      	cmp	r6, r5
 800ff00:	e9cd 0100 	strd	r0, r1, [sp]
 800ff04:	f04f 0200 	mov.w	r2, #0
 800ff08:	d126      	bne.n	800ff58 <_dtoa_r+0x5e8>
 800ff0a:	4b1c      	ldr	r3, [pc, #112]	; (800ff7c <_dtoa_r+0x60c>)
 800ff0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ff10:	f7f0 f9e4 	bl	80002dc <__adddf3>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff1c:	f7f0 fe24 	bl	8000b68 <__aeabi_dcmpgt>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d174      	bne.n	801000e <_dtoa_r+0x69e>
 800ff24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff28:	2000      	movs	r0, #0
 800ff2a:	4914      	ldr	r1, [pc, #80]	; (800ff7c <_dtoa_r+0x60c>)
 800ff2c:	f7f0 f9d4 	bl	80002d8 <__aeabi_dsub>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff38:	f7f0 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f43f af30 	beq.w	800fda2 <_dtoa_r+0x432>
 800ff42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff46:	2b30      	cmp	r3, #48	; 0x30
 800ff48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ff4c:	d002      	beq.n	800ff54 <_dtoa_r+0x5e4>
 800ff4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ff52:	e04a      	b.n	800ffea <_dtoa_r+0x67a>
 800ff54:	4615      	mov	r5, r2
 800ff56:	e7f4      	b.n	800ff42 <_dtoa_r+0x5d2>
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <_dtoa_r+0x600>)
 800ff5a:	f7f0 fb75 	bl	8000648 <__aeabi_dmul>
 800ff5e:	e9cd 0100 	strd	r0, r1, [sp]
 800ff62:	e7bc      	b.n	800fede <_dtoa_r+0x56e>
 800ff64:	08013d60 	.word	0x08013d60
 800ff68:	08013d38 	.word	0x08013d38
 800ff6c:	3ff00000 	.word	0x3ff00000
 800ff70:	40240000 	.word	0x40240000
 800ff74:	401c0000 	.word	0x401c0000
 800ff78:	40140000 	.word	0x40140000
 800ff7c:	3fe00000 	.word	0x3fe00000
 800ff80:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ff84:	465d      	mov	r5, fp
 800ff86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	f7f0 fc85 	bl	800089c <__aeabi_ddiv>
 800ff92:	f7f0 fe09 	bl	8000ba8 <__aeabi_d2iz>
 800ff96:	4680      	mov	r8, r0
 800ff98:	f7f0 faec 	bl	8000574 <__aeabi_i2d>
 800ff9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffa0:	f7f0 fb52 	bl	8000648 <__aeabi_dmul>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	4639      	mov	r1, r7
 800ffac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ffb0:	f7f0 f992 	bl	80002d8 <__aeabi_dsub>
 800ffb4:	f805 6b01 	strb.w	r6, [r5], #1
 800ffb8:	eba5 060b 	sub.w	r6, r5, fp
 800ffbc:	45b1      	cmp	r9, r6
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	d139      	bne.n	8010038 <_dtoa_r+0x6c8>
 800ffc4:	f7f0 f98a 	bl	80002dc <__adddf3>
 800ffc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffcc:	4606      	mov	r6, r0
 800ffce:	460f      	mov	r7, r1
 800ffd0:	f7f0 fdca 	bl	8000b68 <__aeabi_dcmpgt>
 800ffd4:	b9c8      	cbnz	r0, 801000a <_dtoa_r+0x69a>
 800ffd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffda:	4630      	mov	r0, r6
 800ffdc:	4639      	mov	r1, r7
 800ffde:	f7f0 fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 800ffe2:	b110      	cbz	r0, 800ffea <_dtoa_r+0x67a>
 800ffe4:	f018 0f01 	tst.w	r8, #1
 800ffe8:	d10f      	bne.n	801000a <_dtoa_r+0x69a>
 800ffea:	9904      	ldr	r1, [sp, #16]
 800ffec:	4620      	mov	r0, r4
 800ffee:	f000 fcaa 	bl	8010946 <_Bfree>
 800fff2:	2300      	movs	r3, #0
 800fff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fff6:	702b      	strb	r3, [r5, #0]
 800fff8:	f10a 0301 	add.w	r3, sl, #1
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010000:	2b00      	cmp	r3, #0
 8010002:	f000 8241 	beq.w	8010488 <_dtoa_r+0xb18>
 8010006:	601d      	str	r5, [r3, #0]
 8010008:	e23e      	b.n	8010488 <_dtoa_r+0xb18>
 801000a:	f8cd a020 	str.w	sl, [sp, #32]
 801000e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010012:	2a39      	cmp	r2, #57	; 0x39
 8010014:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010018:	d108      	bne.n	801002c <_dtoa_r+0x6bc>
 801001a:	459b      	cmp	fp, r3
 801001c:	d10a      	bne.n	8010034 <_dtoa_r+0x6c4>
 801001e:	9b08      	ldr	r3, [sp, #32]
 8010020:	3301      	adds	r3, #1
 8010022:	9308      	str	r3, [sp, #32]
 8010024:	2330      	movs	r3, #48	; 0x30
 8010026:	f88b 3000 	strb.w	r3, [fp]
 801002a:	465b      	mov	r3, fp
 801002c:	781a      	ldrb	r2, [r3, #0]
 801002e:	3201      	adds	r2, #1
 8010030:	701a      	strb	r2, [r3, #0]
 8010032:	e78c      	b.n	800ff4e <_dtoa_r+0x5de>
 8010034:	461d      	mov	r5, r3
 8010036:	e7ea      	b.n	801000e <_dtoa_r+0x69e>
 8010038:	2200      	movs	r2, #0
 801003a:	4b9b      	ldr	r3, [pc, #620]	; (80102a8 <_dtoa_r+0x938>)
 801003c:	f7f0 fb04 	bl	8000648 <__aeabi_dmul>
 8010040:	2200      	movs	r2, #0
 8010042:	2300      	movs	r3, #0
 8010044:	4606      	mov	r6, r0
 8010046:	460f      	mov	r7, r1
 8010048:	f7f0 fd66 	bl	8000b18 <__aeabi_dcmpeq>
 801004c:	2800      	cmp	r0, #0
 801004e:	d09a      	beq.n	800ff86 <_dtoa_r+0x616>
 8010050:	e7cb      	b.n	800ffea <_dtoa_r+0x67a>
 8010052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010054:	2a00      	cmp	r2, #0
 8010056:	f000 808b 	beq.w	8010170 <_dtoa_r+0x800>
 801005a:	9a06      	ldr	r2, [sp, #24]
 801005c:	2a01      	cmp	r2, #1
 801005e:	dc6e      	bgt.n	801013e <_dtoa_r+0x7ce>
 8010060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010062:	2a00      	cmp	r2, #0
 8010064:	d067      	beq.n	8010136 <_dtoa_r+0x7c6>
 8010066:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801006a:	9f07      	ldr	r7, [sp, #28]
 801006c:	9d05      	ldr	r5, [sp, #20]
 801006e:	9a05      	ldr	r2, [sp, #20]
 8010070:	2101      	movs	r1, #1
 8010072:	441a      	add	r2, r3
 8010074:	4620      	mov	r0, r4
 8010076:	9205      	str	r2, [sp, #20]
 8010078:	4498      	add	r8, r3
 801007a:	f000 fd04 	bl	8010a86 <__i2b>
 801007e:	4606      	mov	r6, r0
 8010080:	2d00      	cmp	r5, #0
 8010082:	dd0c      	ble.n	801009e <_dtoa_r+0x72e>
 8010084:	f1b8 0f00 	cmp.w	r8, #0
 8010088:	dd09      	ble.n	801009e <_dtoa_r+0x72e>
 801008a:	4545      	cmp	r5, r8
 801008c:	9a05      	ldr	r2, [sp, #20]
 801008e:	462b      	mov	r3, r5
 8010090:	bfa8      	it	ge
 8010092:	4643      	movge	r3, r8
 8010094:	1ad2      	subs	r2, r2, r3
 8010096:	9205      	str	r2, [sp, #20]
 8010098:	1aed      	subs	r5, r5, r3
 801009a:	eba8 0803 	sub.w	r8, r8, r3
 801009e:	9b07      	ldr	r3, [sp, #28]
 80100a0:	b1eb      	cbz	r3, 80100de <_dtoa_r+0x76e>
 80100a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d067      	beq.n	8010178 <_dtoa_r+0x808>
 80100a8:	b18f      	cbz	r7, 80100ce <_dtoa_r+0x75e>
 80100aa:	4631      	mov	r1, r6
 80100ac:	463a      	mov	r2, r7
 80100ae:	4620      	mov	r0, r4
 80100b0:	f000 fd88 	bl	8010bc4 <__pow5mult>
 80100b4:	9a04      	ldr	r2, [sp, #16]
 80100b6:	4601      	mov	r1, r0
 80100b8:	4606      	mov	r6, r0
 80100ba:	4620      	mov	r0, r4
 80100bc:	f000 fcec 	bl	8010a98 <__multiply>
 80100c0:	9904      	ldr	r1, [sp, #16]
 80100c2:	9008      	str	r0, [sp, #32]
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fc3e 	bl	8010946 <_Bfree>
 80100ca:	9b08      	ldr	r3, [sp, #32]
 80100cc:	9304      	str	r3, [sp, #16]
 80100ce:	9b07      	ldr	r3, [sp, #28]
 80100d0:	1bda      	subs	r2, r3, r7
 80100d2:	d004      	beq.n	80100de <_dtoa_r+0x76e>
 80100d4:	9904      	ldr	r1, [sp, #16]
 80100d6:	4620      	mov	r0, r4
 80100d8:	f000 fd74 	bl	8010bc4 <__pow5mult>
 80100dc:	9004      	str	r0, [sp, #16]
 80100de:	2101      	movs	r1, #1
 80100e0:	4620      	mov	r0, r4
 80100e2:	f000 fcd0 	bl	8010a86 <__i2b>
 80100e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100e8:	4607      	mov	r7, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f000 81d0 	beq.w	8010490 <_dtoa_r+0xb20>
 80100f0:	461a      	mov	r2, r3
 80100f2:	4601      	mov	r1, r0
 80100f4:	4620      	mov	r0, r4
 80100f6:	f000 fd65 	bl	8010bc4 <__pow5mult>
 80100fa:	9b06      	ldr	r3, [sp, #24]
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	4607      	mov	r7, r0
 8010100:	dc40      	bgt.n	8010184 <_dtoa_r+0x814>
 8010102:	9b00      	ldr	r3, [sp, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d139      	bne.n	801017c <_dtoa_r+0x80c>
 8010108:	9b01      	ldr	r3, [sp, #4]
 801010a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801010e:	2b00      	cmp	r3, #0
 8010110:	d136      	bne.n	8010180 <_dtoa_r+0x810>
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010118:	0d1b      	lsrs	r3, r3, #20
 801011a:	051b      	lsls	r3, r3, #20
 801011c:	b12b      	cbz	r3, 801012a <_dtoa_r+0x7ba>
 801011e:	9b05      	ldr	r3, [sp, #20]
 8010120:	3301      	adds	r3, #1
 8010122:	9305      	str	r3, [sp, #20]
 8010124:	f108 0801 	add.w	r8, r8, #1
 8010128:	2301      	movs	r3, #1
 801012a:	9307      	str	r3, [sp, #28]
 801012c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801012e:	2b00      	cmp	r3, #0
 8010130:	d12a      	bne.n	8010188 <_dtoa_r+0x818>
 8010132:	2001      	movs	r0, #1
 8010134:	e030      	b.n	8010198 <_dtoa_r+0x828>
 8010136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010138:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801013c:	e795      	b.n	801006a <_dtoa_r+0x6fa>
 801013e:	9b07      	ldr	r3, [sp, #28]
 8010140:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8010144:	42bb      	cmp	r3, r7
 8010146:	bfbf      	itttt	lt
 8010148:	9b07      	ldrlt	r3, [sp, #28]
 801014a:	9707      	strlt	r7, [sp, #28]
 801014c:	1afa      	sublt	r2, r7, r3
 801014e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010150:	bfbb      	ittet	lt
 8010152:	189b      	addlt	r3, r3, r2
 8010154:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010156:	1bdf      	subge	r7, r3, r7
 8010158:	2700      	movlt	r7, #0
 801015a:	f1b9 0f00 	cmp.w	r9, #0
 801015e:	bfb5      	itete	lt
 8010160:	9b05      	ldrlt	r3, [sp, #20]
 8010162:	9d05      	ldrge	r5, [sp, #20]
 8010164:	eba3 0509 	sublt.w	r5, r3, r9
 8010168:	464b      	movge	r3, r9
 801016a:	bfb8      	it	lt
 801016c:	2300      	movlt	r3, #0
 801016e:	e77e      	b.n	801006e <_dtoa_r+0x6fe>
 8010170:	9f07      	ldr	r7, [sp, #28]
 8010172:	9d05      	ldr	r5, [sp, #20]
 8010174:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010176:	e783      	b.n	8010080 <_dtoa_r+0x710>
 8010178:	9a07      	ldr	r2, [sp, #28]
 801017a:	e7ab      	b.n	80100d4 <_dtoa_r+0x764>
 801017c:	2300      	movs	r3, #0
 801017e:	e7d4      	b.n	801012a <_dtoa_r+0x7ba>
 8010180:	9b00      	ldr	r3, [sp, #0]
 8010182:	e7d2      	b.n	801012a <_dtoa_r+0x7ba>
 8010184:	2300      	movs	r3, #0
 8010186:	9307      	str	r3, [sp, #28]
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801018e:	6918      	ldr	r0, [r3, #16]
 8010190:	f000 fc2b 	bl	80109ea <__hi0bits>
 8010194:	f1c0 0020 	rsb	r0, r0, #32
 8010198:	4440      	add	r0, r8
 801019a:	f010 001f 	ands.w	r0, r0, #31
 801019e:	d047      	beq.n	8010230 <_dtoa_r+0x8c0>
 80101a0:	f1c0 0320 	rsb	r3, r0, #32
 80101a4:	2b04      	cmp	r3, #4
 80101a6:	dd3b      	ble.n	8010220 <_dtoa_r+0x8b0>
 80101a8:	9b05      	ldr	r3, [sp, #20]
 80101aa:	f1c0 001c 	rsb	r0, r0, #28
 80101ae:	4403      	add	r3, r0
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	4405      	add	r5, r0
 80101b4:	4480      	add	r8, r0
 80101b6:	9b05      	ldr	r3, [sp, #20]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dd05      	ble.n	80101c8 <_dtoa_r+0x858>
 80101bc:	461a      	mov	r2, r3
 80101be:	9904      	ldr	r1, [sp, #16]
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 fd4d 	bl	8010c60 <__lshift>
 80101c6:	9004      	str	r0, [sp, #16]
 80101c8:	f1b8 0f00 	cmp.w	r8, #0
 80101cc:	dd05      	ble.n	80101da <_dtoa_r+0x86a>
 80101ce:	4639      	mov	r1, r7
 80101d0:	4642      	mov	r2, r8
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 fd44 	bl	8010c60 <__lshift>
 80101d8:	4607      	mov	r7, r0
 80101da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101dc:	b353      	cbz	r3, 8010234 <_dtoa_r+0x8c4>
 80101de:	4639      	mov	r1, r7
 80101e0:	9804      	ldr	r0, [sp, #16]
 80101e2:	f000 fd91 	bl	8010d08 <__mcmp>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	da24      	bge.n	8010234 <_dtoa_r+0x8c4>
 80101ea:	2300      	movs	r3, #0
 80101ec:	220a      	movs	r2, #10
 80101ee:	9904      	ldr	r1, [sp, #16]
 80101f0:	4620      	mov	r0, r4
 80101f2:	f000 fbbf 	bl	8010974 <__multadd>
 80101f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f8:	9004      	str	r0, [sp, #16]
 80101fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 814d 	beq.w	801049e <_dtoa_r+0xb2e>
 8010204:	2300      	movs	r3, #0
 8010206:	4631      	mov	r1, r6
 8010208:	220a      	movs	r2, #10
 801020a:	4620      	mov	r0, r4
 801020c:	f000 fbb2 	bl	8010974 <__multadd>
 8010210:	9b02      	ldr	r3, [sp, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	4606      	mov	r6, r0
 8010216:	dc4f      	bgt.n	80102b8 <_dtoa_r+0x948>
 8010218:	9b06      	ldr	r3, [sp, #24]
 801021a:	2b02      	cmp	r3, #2
 801021c:	dd4c      	ble.n	80102b8 <_dtoa_r+0x948>
 801021e:	e011      	b.n	8010244 <_dtoa_r+0x8d4>
 8010220:	d0c9      	beq.n	80101b6 <_dtoa_r+0x846>
 8010222:	9a05      	ldr	r2, [sp, #20]
 8010224:	331c      	adds	r3, #28
 8010226:	441a      	add	r2, r3
 8010228:	9205      	str	r2, [sp, #20]
 801022a:	441d      	add	r5, r3
 801022c:	4498      	add	r8, r3
 801022e:	e7c2      	b.n	80101b6 <_dtoa_r+0x846>
 8010230:	4603      	mov	r3, r0
 8010232:	e7f6      	b.n	8010222 <_dtoa_r+0x8b2>
 8010234:	f1b9 0f00 	cmp.w	r9, #0
 8010238:	dc38      	bgt.n	80102ac <_dtoa_r+0x93c>
 801023a:	9b06      	ldr	r3, [sp, #24]
 801023c:	2b02      	cmp	r3, #2
 801023e:	dd35      	ble.n	80102ac <_dtoa_r+0x93c>
 8010240:	f8cd 9008 	str.w	r9, [sp, #8]
 8010244:	9b02      	ldr	r3, [sp, #8]
 8010246:	b963      	cbnz	r3, 8010262 <_dtoa_r+0x8f2>
 8010248:	4639      	mov	r1, r7
 801024a:	2205      	movs	r2, #5
 801024c:	4620      	mov	r0, r4
 801024e:	f000 fb91 	bl	8010974 <__multadd>
 8010252:	4601      	mov	r1, r0
 8010254:	4607      	mov	r7, r0
 8010256:	9804      	ldr	r0, [sp, #16]
 8010258:	f000 fd56 	bl	8010d08 <__mcmp>
 801025c:	2800      	cmp	r0, #0
 801025e:	f73f adcc 	bgt.w	800fdfa <_dtoa_r+0x48a>
 8010262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010264:	465d      	mov	r5, fp
 8010266:	ea6f 0a03 	mvn.w	sl, r3
 801026a:	f04f 0900 	mov.w	r9, #0
 801026e:	4639      	mov	r1, r7
 8010270:	4620      	mov	r0, r4
 8010272:	f000 fb68 	bl	8010946 <_Bfree>
 8010276:	2e00      	cmp	r6, #0
 8010278:	f43f aeb7 	beq.w	800ffea <_dtoa_r+0x67a>
 801027c:	f1b9 0f00 	cmp.w	r9, #0
 8010280:	d005      	beq.n	801028e <_dtoa_r+0x91e>
 8010282:	45b1      	cmp	r9, r6
 8010284:	d003      	beq.n	801028e <_dtoa_r+0x91e>
 8010286:	4649      	mov	r1, r9
 8010288:	4620      	mov	r0, r4
 801028a:	f000 fb5c 	bl	8010946 <_Bfree>
 801028e:	4631      	mov	r1, r6
 8010290:	4620      	mov	r0, r4
 8010292:	f000 fb58 	bl	8010946 <_Bfree>
 8010296:	e6a8      	b.n	800ffea <_dtoa_r+0x67a>
 8010298:	2700      	movs	r7, #0
 801029a:	463e      	mov	r6, r7
 801029c:	e7e1      	b.n	8010262 <_dtoa_r+0x8f2>
 801029e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80102a2:	463e      	mov	r6, r7
 80102a4:	e5a9      	b.n	800fdfa <_dtoa_r+0x48a>
 80102a6:	bf00      	nop
 80102a8:	40240000 	.word	0x40240000
 80102ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 80fa 	beq.w	80104ac <_dtoa_r+0xb3c>
 80102b8:	2d00      	cmp	r5, #0
 80102ba:	dd05      	ble.n	80102c8 <_dtoa_r+0x958>
 80102bc:	4631      	mov	r1, r6
 80102be:	462a      	mov	r2, r5
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 fccd 	bl	8010c60 <__lshift>
 80102c6:	4606      	mov	r6, r0
 80102c8:	9b07      	ldr	r3, [sp, #28]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d04c      	beq.n	8010368 <_dtoa_r+0x9f8>
 80102ce:	6871      	ldr	r1, [r6, #4]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fb04 	bl	80108de <_Balloc>
 80102d6:	6932      	ldr	r2, [r6, #16]
 80102d8:	3202      	adds	r2, #2
 80102da:	4605      	mov	r5, r0
 80102dc:	0092      	lsls	r2, r2, #2
 80102de:	f106 010c 	add.w	r1, r6, #12
 80102e2:	300c      	adds	r0, #12
 80102e4:	f000 faf0 	bl	80108c8 <memcpy>
 80102e8:	2201      	movs	r2, #1
 80102ea:	4629      	mov	r1, r5
 80102ec:	4620      	mov	r0, r4
 80102ee:	f000 fcb7 	bl	8010c60 <__lshift>
 80102f2:	9b00      	ldr	r3, [sp, #0]
 80102f4:	f8cd b014 	str.w	fp, [sp, #20]
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	46b1      	mov	r9, r6
 80102fe:	9307      	str	r3, [sp, #28]
 8010300:	4606      	mov	r6, r0
 8010302:	4639      	mov	r1, r7
 8010304:	9804      	ldr	r0, [sp, #16]
 8010306:	f7ff faa5 	bl	800f854 <quorem>
 801030a:	4649      	mov	r1, r9
 801030c:	4605      	mov	r5, r0
 801030e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010312:	9804      	ldr	r0, [sp, #16]
 8010314:	f000 fcf8 	bl	8010d08 <__mcmp>
 8010318:	4632      	mov	r2, r6
 801031a:	9000      	str	r0, [sp, #0]
 801031c:	4639      	mov	r1, r7
 801031e:	4620      	mov	r0, r4
 8010320:	f000 fd0c 	bl	8010d3c <__mdiff>
 8010324:	68c3      	ldr	r3, [r0, #12]
 8010326:	4602      	mov	r2, r0
 8010328:	bb03      	cbnz	r3, 801036c <_dtoa_r+0x9fc>
 801032a:	4601      	mov	r1, r0
 801032c:	9008      	str	r0, [sp, #32]
 801032e:	9804      	ldr	r0, [sp, #16]
 8010330:	f000 fcea 	bl	8010d08 <__mcmp>
 8010334:	9a08      	ldr	r2, [sp, #32]
 8010336:	4603      	mov	r3, r0
 8010338:	4611      	mov	r1, r2
 801033a:	4620      	mov	r0, r4
 801033c:	9308      	str	r3, [sp, #32]
 801033e:	f000 fb02 	bl	8010946 <_Bfree>
 8010342:	9b08      	ldr	r3, [sp, #32]
 8010344:	b9a3      	cbnz	r3, 8010370 <_dtoa_r+0xa00>
 8010346:	9a06      	ldr	r2, [sp, #24]
 8010348:	b992      	cbnz	r2, 8010370 <_dtoa_r+0xa00>
 801034a:	9a07      	ldr	r2, [sp, #28]
 801034c:	b982      	cbnz	r2, 8010370 <_dtoa_r+0xa00>
 801034e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010352:	d029      	beq.n	80103a8 <_dtoa_r+0xa38>
 8010354:	9b00      	ldr	r3, [sp, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	dd01      	ble.n	801035e <_dtoa_r+0x9ee>
 801035a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801035e:	9b05      	ldr	r3, [sp, #20]
 8010360:	1c5d      	adds	r5, r3, #1
 8010362:	f883 8000 	strb.w	r8, [r3]
 8010366:	e782      	b.n	801026e <_dtoa_r+0x8fe>
 8010368:	4630      	mov	r0, r6
 801036a:	e7c2      	b.n	80102f2 <_dtoa_r+0x982>
 801036c:	2301      	movs	r3, #1
 801036e:	e7e3      	b.n	8010338 <_dtoa_r+0x9c8>
 8010370:	9a00      	ldr	r2, [sp, #0]
 8010372:	2a00      	cmp	r2, #0
 8010374:	db04      	blt.n	8010380 <_dtoa_r+0xa10>
 8010376:	d125      	bne.n	80103c4 <_dtoa_r+0xa54>
 8010378:	9a06      	ldr	r2, [sp, #24]
 801037a:	bb1a      	cbnz	r2, 80103c4 <_dtoa_r+0xa54>
 801037c:	9a07      	ldr	r2, [sp, #28]
 801037e:	bb0a      	cbnz	r2, 80103c4 <_dtoa_r+0xa54>
 8010380:	2b00      	cmp	r3, #0
 8010382:	ddec      	ble.n	801035e <_dtoa_r+0x9ee>
 8010384:	2201      	movs	r2, #1
 8010386:	9904      	ldr	r1, [sp, #16]
 8010388:	4620      	mov	r0, r4
 801038a:	f000 fc69 	bl	8010c60 <__lshift>
 801038e:	4639      	mov	r1, r7
 8010390:	9004      	str	r0, [sp, #16]
 8010392:	f000 fcb9 	bl	8010d08 <__mcmp>
 8010396:	2800      	cmp	r0, #0
 8010398:	dc03      	bgt.n	80103a2 <_dtoa_r+0xa32>
 801039a:	d1e0      	bne.n	801035e <_dtoa_r+0x9ee>
 801039c:	f018 0f01 	tst.w	r8, #1
 80103a0:	d0dd      	beq.n	801035e <_dtoa_r+0x9ee>
 80103a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80103a6:	d1d8      	bne.n	801035a <_dtoa_r+0x9ea>
 80103a8:	9b05      	ldr	r3, [sp, #20]
 80103aa:	9a05      	ldr	r2, [sp, #20]
 80103ac:	1c5d      	adds	r5, r3, #1
 80103ae:	2339      	movs	r3, #57	; 0x39
 80103b0:	7013      	strb	r3, [r2, #0]
 80103b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103b6:	2b39      	cmp	r3, #57	; 0x39
 80103b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80103bc:	d04f      	beq.n	801045e <_dtoa_r+0xaee>
 80103be:	3301      	adds	r3, #1
 80103c0:	7013      	strb	r3, [r2, #0]
 80103c2:	e754      	b.n	801026e <_dtoa_r+0x8fe>
 80103c4:	9a05      	ldr	r2, [sp, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f102 0501 	add.w	r5, r2, #1
 80103cc:	dd06      	ble.n	80103dc <_dtoa_r+0xa6c>
 80103ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80103d2:	d0e9      	beq.n	80103a8 <_dtoa_r+0xa38>
 80103d4:	f108 0801 	add.w	r8, r8, #1
 80103d8:	9b05      	ldr	r3, [sp, #20]
 80103da:	e7c2      	b.n	8010362 <_dtoa_r+0x9f2>
 80103dc:	9a02      	ldr	r2, [sp, #8]
 80103de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80103e2:	eba5 030b 	sub.w	r3, r5, fp
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d021      	beq.n	801042e <_dtoa_r+0xabe>
 80103ea:	2300      	movs	r3, #0
 80103ec:	220a      	movs	r2, #10
 80103ee:	9904      	ldr	r1, [sp, #16]
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fabf 	bl	8010974 <__multadd>
 80103f6:	45b1      	cmp	r9, r6
 80103f8:	9004      	str	r0, [sp, #16]
 80103fa:	f04f 0300 	mov.w	r3, #0
 80103fe:	f04f 020a 	mov.w	r2, #10
 8010402:	4649      	mov	r1, r9
 8010404:	4620      	mov	r0, r4
 8010406:	d105      	bne.n	8010414 <_dtoa_r+0xaa4>
 8010408:	f000 fab4 	bl	8010974 <__multadd>
 801040c:	4681      	mov	r9, r0
 801040e:	4606      	mov	r6, r0
 8010410:	9505      	str	r5, [sp, #20]
 8010412:	e776      	b.n	8010302 <_dtoa_r+0x992>
 8010414:	f000 faae 	bl	8010974 <__multadd>
 8010418:	4631      	mov	r1, r6
 801041a:	4681      	mov	r9, r0
 801041c:	2300      	movs	r3, #0
 801041e:	220a      	movs	r2, #10
 8010420:	4620      	mov	r0, r4
 8010422:	f000 faa7 	bl	8010974 <__multadd>
 8010426:	4606      	mov	r6, r0
 8010428:	e7f2      	b.n	8010410 <_dtoa_r+0xaa0>
 801042a:	f04f 0900 	mov.w	r9, #0
 801042e:	2201      	movs	r2, #1
 8010430:	9904      	ldr	r1, [sp, #16]
 8010432:	4620      	mov	r0, r4
 8010434:	f000 fc14 	bl	8010c60 <__lshift>
 8010438:	4639      	mov	r1, r7
 801043a:	9004      	str	r0, [sp, #16]
 801043c:	f000 fc64 	bl	8010d08 <__mcmp>
 8010440:	2800      	cmp	r0, #0
 8010442:	dcb6      	bgt.n	80103b2 <_dtoa_r+0xa42>
 8010444:	d102      	bne.n	801044c <_dtoa_r+0xadc>
 8010446:	f018 0f01 	tst.w	r8, #1
 801044a:	d1b2      	bne.n	80103b2 <_dtoa_r+0xa42>
 801044c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010450:	2b30      	cmp	r3, #48	; 0x30
 8010452:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010456:	f47f af0a 	bne.w	801026e <_dtoa_r+0x8fe>
 801045a:	4615      	mov	r5, r2
 801045c:	e7f6      	b.n	801044c <_dtoa_r+0xadc>
 801045e:	4593      	cmp	fp, r2
 8010460:	d105      	bne.n	801046e <_dtoa_r+0xafe>
 8010462:	2331      	movs	r3, #49	; 0x31
 8010464:	f10a 0a01 	add.w	sl, sl, #1
 8010468:	f88b 3000 	strb.w	r3, [fp]
 801046c:	e6ff      	b.n	801026e <_dtoa_r+0x8fe>
 801046e:	4615      	mov	r5, r2
 8010470:	e79f      	b.n	80103b2 <_dtoa_r+0xa42>
 8010472:	f8df b064 	ldr.w	fp, [pc, #100]	; 80104d8 <_dtoa_r+0xb68>
 8010476:	e007      	b.n	8010488 <_dtoa_r+0xb18>
 8010478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801047a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80104dc <_dtoa_r+0xb6c>
 801047e:	b11b      	cbz	r3, 8010488 <_dtoa_r+0xb18>
 8010480:	f10b 0308 	add.w	r3, fp, #8
 8010484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	4658      	mov	r0, fp
 801048a:	b017      	add	sp, #92	; 0x5c
 801048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010490:	9b06      	ldr	r3, [sp, #24]
 8010492:	2b01      	cmp	r3, #1
 8010494:	f77f ae35 	ble.w	8010102 <_dtoa_r+0x792>
 8010498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801049a:	9307      	str	r3, [sp, #28]
 801049c:	e649      	b.n	8010132 <_dtoa_r+0x7c2>
 801049e:	9b02      	ldr	r3, [sp, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	dc03      	bgt.n	80104ac <_dtoa_r+0xb3c>
 80104a4:	9b06      	ldr	r3, [sp, #24]
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	f73f aecc 	bgt.w	8010244 <_dtoa_r+0x8d4>
 80104ac:	465d      	mov	r5, fp
 80104ae:	4639      	mov	r1, r7
 80104b0:	9804      	ldr	r0, [sp, #16]
 80104b2:	f7ff f9cf 	bl	800f854 <quorem>
 80104b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80104ba:	f805 8b01 	strb.w	r8, [r5], #1
 80104be:	9a02      	ldr	r2, [sp, #8]
 80104c0:	eba5 030b 	sub.w	r3, r5, fp
 80104c4:	429a      	cmp	r2, r3
 80104c6:	ddb0      	ble.n	801042a <_dtoa_r+0xaba>
 80104c8:	2300      	movs	r3, #0
 80104ca:	220a      	movs	r2, #10
 80104cc:	9904      	ldr	r1, [sp, #16]
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 fa50 	bl	8010974 <__multadd>
 80104d4:	9004      	str	r0, [sp, #16]
 80104d6:	e7ea      	b.n	80104ae <_dtoa_r+0xb3e>
 80104d8:	08013f54 	.word	0x08013f54
 80104dc:	08013cca 	.word	0x08013cca

080104e0 <__sflush_r>:
 80104e0:	898a      	ldrh	r2, [r1, #12]
 80104e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e6:	4605      	mov	r5, r0
 80104e8:	0710      	lsls	r0, r2, #28
 80104ea:	460c      	mov	r4, r1
 80104ec:	d458      	bmi.n	80105a0 <__sflush_r+0xc0>
 80104ee:	684b      	ldr	r3, [r1, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	dc05      	bgt.n	8010500 <__sflush_r+0x20>
 80104f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	dc02      	bgt.n	8010500 <__sflush_r+0x20>
 80104fa:	2000      	movs	r0, #0
 80104fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010502:	2e00      	cmp	r6, #0
 8010504:	d0f9      	beq.n	80104fa <__sflush_r+0x1a>
 8010506:	2300      	movs	r3, #0
 8010508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801050c:	682f      	ldr	r7, [r5, #0]
 801050e:	6a21      	ldr	r1, [r4, #32]
 8010510:	602b      	str	r3, [r5, #0]
 8010512:	d032      	beq.n	801057a <__sflush_r+0x9a>
 8010514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010516:	89a3      	ldrh	r3, [r4, #12]
 8010518:	075a      	lsls	r2, r3, #29
 801051a:	d505      	bpl.n	8010528 <__sflush_r+0x48>
 801051c:	6863      	ldr	r3, [r4, #4]
 801051e:	1ac0      	subs	r0, r0, r3
 8010520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010522:	b10b      	cbz	r3, 8010528 <__sflush_r+0x48>
 8010524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010526:	1ac0      	subs	r0, r0, r3
 8010528:	2300      	movs	r3, #0
 801052a:	4602      	mov	r2, r0
 801052c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801052e:	6a21      	ldr	r1, [r4, #32]
 8010530:	4628      	mov	r0, r5
 8010532:	47b0      	blx	r6
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	89a3      	ldrh	r3, [r4, #12]
 8010538:	d106      	bne.n	8010548 <__sflush_r+0x68>
 801053a:	6829      	ldr	r1, [r5, #0]
 801053c:	291d      	cmp	r1, #29
 801053e:	d848      	bhi.n	80105d2 <__sflush_r+0xf2>
 8010540:	4a29      	ldr	r2, [pc, #164]	; (80105e8 <__sflush_r+0x108>)
 8010542:	40ca      	lsrs	r2, r1
 8010544:	07d6      	lsls	r6, r2, #31
 8010546:	d544      	bpl.n	80105d2 <__sflush_r+0xf2>
 8010548:	2200      	movs	r2, #0
 801054a:	6062      	str	r2, [r4, #4]
 801054c:	04d9      	lsls	r1, r3, #19
 801054e:	6922      	ldr	r2, [r4, #16]
 8010550:	6022      	str	r2, [r4, #0]
 8010552:	d504      	bpl.n	801055e <__sflush_r+0x7e>
 8010554:	1c42      	adds	r2, r0, #1
 8010556:	d101      	bne.n	801055c <__sflush_r+0x7c>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b903      	cbnz	r3, 801055e <__sflush_r+0x7e>
 801055c:	6560      	str	r0, [r4, #84]	; 0x54
 801055e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010560:	602f      	str	r7, [r5, #0]
 8010562:	2900      	cmp	r1, #0
 8010564:	d0c9      	beq.n	80104fa <__sflush_r+0x1a>
 8010566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801056a:	4299      	cmp	r1, r3
 801056c:	d002      	beq.n	8010574 <__sflush_r+0x94>
 801056e:	4628      	mov	r0, r5
 8010570:	f000 fc9e 	bl	8010eb0 <_free_r>
 8010574:	2000      	movs	r0, #0
 8010576:	6360      	str	r0, [r4, #52]	; 0x34
 8010578:	e7c0      	b.n	80104fc <__sflush_r+0x1c>
 801057a:	2301      	movs	r3, #1
 801057c:	4628      	mov	r0, r5
 801057e:	47b0      	blx	r6
 8010580:	1c41      	adds	r1, r0, #1
 8010582:	d1c8      	bne.n	8010516 <__sflush_r+0x36>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d0c5      	beq.n	8010516 <__sflush_r+0x36>
 801058a:	2b1d      	cmp	r3, #29
 801058c:	d001      	beq.n	8010592 <__sflush_r+0xb2>
 801058e:	2b16      	cmp	r3, #22
 8010590:	d101      	bne.n	8010596 <__sflush_r+0xb6>
 8010592:	602f      	str	r7, [r5, #0]
 8010594:	e7b1      	b.n	80104fa <__sflush_r+0x1a>
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	e7ad      	b.n	80104fc <__sflush_r+0x1c>
 80105a0:	690f      	ldr	r7, [r1, #16]
 80105a2:	2f00      	cmp	r7, #0
 80105a4:	d0a9      	beq.n	80104fa <__sflush_r+0x1a>
 80105a6:	0793      	lsls	r3, r2, #30
 80105a8:	680e      	ldr	r6, [r1, #0]
 80105aa:	bf08      	it	eq
 80105ac:	694b      	ldreq	r3, [r1, #20]
 80105ae:	600f      	str	r7, [r1, #0]
 80105b0:	bf18      	it	ne
 80105b2:	2300      	movne	r3, #0
 80105b4:	eba6 0807 	sub.w	r8, r6, r7
 80105b8:	608b      	str	r3, [r1, #8]
 80105ba:	f1b8 0f00 	cmp.w	r8, #0
 80105be:	dd9c      	ble.n	80104fa <__sflush_r+0x1a>
 80105c0:	4643      	mov	r3, r8
 80105c2:	463a      	mov	r2, r7
 80105c4:	6a21      	ldr	r1, [r4, #32]
 80105c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80105c8:	4628      	mov	r0, r5
 80105ca:	47b0      	blx	r6
 80105cc:	2800      	cmp	r0, #0
 80105ce:	dc06      	bgt.n	80105de <__sflush_r+0xfe>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105d6:	81a3      	strh	r3, [r4, #12]
 80105d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105dc:	e78e      	b.n	80104fc <__sflush_r+0x1c>
 80105de:	4407      	add	r7, r0
 80105e0:	eba8 0800 	sub.w	r8, r8, r0
 80105e4:	e7e9      	b.n	80105ba <__sflush_r+0xda>
 80105e6:	bf00      	nop
 80105e8:	20400001 	.word	0x20400001

080105ec <_fflush_r>:
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	690b      	ldr	r3, [r1, #16]
 80105f0:	4605      	mov	r5, r0
 80105f2:	460c      	mov	r4, r1
 80105f4:	b1db      	cbz	r3, 801062e <_fflush_r+0x42>
 80105f6:	b118      	cbz	r0, 8010600 <_fflush_r+0x14>
 80105f8:	6983      	ldr	r3, [r0, #24]
 80105fa:	b90b      	cbnz	r3, 8010600 <_fflush_r+0x14>
 80105fc:	f000 f860 	bl	80106c0 <__sinit>
 8010600:	4b0c      	ldr	r3, [pc, #48]	; (8010634 <_fflush_r+0x48>)
 8010602:	429c      	cmp	r4, r3
 8010604:	d109      	bne.n	801061a <_fflush_r+0x2e>
 8010606:	686c      	ldr	r4, [r5, #4]
 8010608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801060c:	b17b      	cbz	r3, 801062e <_fflush_r+0x42>
 801060e:	4621      	mov	r1, r4
 8010610:	4628      	mov	r0, r5
 8010612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010616:	f7ff bf63 	b.w	80104e0 <__sflush_r>
 801061a:	4b07      	ldr	r3, [pc, #28]	; (8010638 <_fflush_r+0x4c>)
 801061c:	429c      	cmp	r4, r3
 801061e:	d101      	bne.n	8010624 <_fflush_r+0x38>
 8010620:	68ac      	ldr	r4, [r5, #8]
 8010622:	e7f1      	b.n	8010608 <_fflush_r+0x1c>
 8010624:	4b05      	ldr	r3, [pc, #20]	; (801063c <_fflush_r+0x50>)
 8010626:	429c      	cmp	r4, r3
 8010628:	bf08      	it	eq
 801062a:	68ec      	ldreq	r4, [r5, #12]
 801062c:	e7ec      	b.n	8010608 <_fflush_r+0x1c>
 801062e:	2000      	movs	r0, #0
 8010630:	bd38      	pop	{r3, r4, r5, pc}
 8010632:	bf00      	nop
 8010634:	08013cf8 	.word	0x08013cf8
 8010638:	08013d18 	.word	0x08013d18
 801063c:	08013cd8 	.word	0x08013cd8

08010640 <std>:
 8010640:	2300      	movs	r3, #0
 8010642:	b510      	push	{r4, lr}
 8010644:	4604      	mov	r4, r0
 8010646:	e9c0 3300 	strd	r3, r3, [r0]
 801064a:	6083      	str	r3, [r0, #8]
 801064c:	8181      	strh	r1, [r0, #12]
 801064e:	6643      	str	r3, [r0, #100]	; 0x64
 8010650:	81c2      	strh	r2, [r0, #14]
 8010652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010656:	6183      	str	r3, [r0, #24]
 8010658:	4619      	mov	r1, r3
 801065a:	2208      	movs	r2, #8
 801065c:	305c      	adds	r0, #92	; 0x5c
 801065e:	f7fe fb2d 	bl	800ecbc <memset>
 8010662:	4b05      	ldr	r3, [pc, #20]	; (8010678 <std+0x38>)
 8010664:	6263      	str	r3, [r4, #36]	; 0x24
 8010666:	4b05      	ldr	r3, [pc, #20]	; (801067c <std+0x3c>)
 8010668:	62a3      	str	r3, [r4, #40]	; 0x28
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <std+0x40>)
 801066c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801066e:	4b05      	ldr	r3, [pc, #20]	; (8010684 <std+0x44>)
 8010670:	6224      	str	r4, [r4, #32]
 8010672:	6323      	str	r3, [r4, #48]	; 0x30
 8010674:	bd10      	pop	{r4, pc}
 8010676:	bf00      	nop
 8010678:	080112c5 	.word	0x080112c5
 801067c:	080112e7 	.word	0x080112e7
 8010680:	0801131f 	.word	0x0801131f
 8010684:	08011343 	.word	0x08011343

08010688 <_cleanup_r>:
 8010688:	4901      	ldr	r1, [pc, #4]	; (8010690 <_cleanup_r+0x8>)
 801068a:	f000 b885 	b.w	8010798 <_fwalk_reent>
 801068e:	bf00      	nop
 8010690:	080105ed 	.word	0x080105ed

08010694 <__sfmoreglue>:
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	1e4a      	subs	r2, r1, #1
 8010698:	2568      	movs	r5, #104	; 0x68
 801069a:	4355      	muls	r5, r2
 801069c:	460e      	mov	r6, r1
 801069e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80106a2:	f000 fc53 	bl	8010f4c <_malloc_r>
 80106a6:	4604      	mov	r4, r0
 80106a8:	b140      	cbz	r0, 80106bc <__sfmoreglue+0x28>
 80106aa:	2100      	movs	r1, #0
 80106ac:	e9c0 1600 	strd	r1, r6, [r0]
 80106b0:	300c      	adds	r0, #12
 80106b2:	60a0      	str	r0, [r4, #8]
 80106b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80106b8:	f7fe fb00 	bl	800ecbc <memset>
 80106bc:	4620      	mov	r0, r4
 80106be:	bd70      	pop	{r4, r5, r6, pc}

080106c0 <__sinit>:
 80106c0:	6983      	ldr	r3, [r0, #24]
 80106c2:	b510      	push	{r4, lr}
 80106c4:	4604      	mov	r4, r0
 80106c6:	bb33      	cbnz	r3, 8010716 <__sinit+0x56>
 80106c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80106cc:	6503      	str	r3, [r0, #80]	; 0x50
 80106ce:	4b12      	ldr	r3, [pc, #72]	; (8010718 <__sinit+0x58>)
 80106d0:	4a12      	ldr	r2, [pc, #72]	; (801071c <__sinit+0x5c>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	6282      	str	r2, [r0, #40]	; 0x28
 80106d6:	4298      	cmp	r0, r3
 80106d8:	bf04      	itt	eq
 80106da:	2301      	moveq	r3, #1
 80106dc:	6183      	streq	r3, [r0, #24]
 80106de:	f000 f81f 	bl	8010720 <__sfp>
 80106e2:	6060      	str	r0, [r4, #4]
 80106e4:	4620      	mov	r0, r4
 80106e6:	f000 f81b 	bl	8010720 <__sfp>
 80106ea:	60a0      	str	r0, [r4, #8]
 80106ec:	4620      	mov	r0, r4
 80106ee:	f000 f817 	bl	8010720 <__sfp>
 80106f2:	2200      	movs	r2, #0
 80106f4:	60e0      	str	r0, [r4, #12]
 80106f6:	2104      	movs	r1, #4
 80106f8:	6860      	ldr	r0, [r4, #4]
 80106fa:	f7ff ffa1 	bl	8010640 <std>
 80106fe:	2201      	movs	r2, #1
 8010700:	2109      	movs	r1, #9
 8010702:	68a0      	ldr	r0, [r4, #8]
 8010704:	f7ff ff9c 	bl	8010640 <std>
 8010708:	2202      	movs	r2, #2
 801070a:	2112      	movs	r1, #18
 801070c:	68e0      	ldr	r0, [r4, #12]
 801070e:	f7ff ff97 	bl	8010640 <std>
 8010712:	2301      	movs	r3, #1
 8010714:	61a3      	str	r3, [r4, #24]
 8010716:	bd10      	pop	{r4, pc}
 8010718:	08013c94 	.word	0x08013c94
 801071c:	08010689 	.word	0x08010689

08010720 <__sfp>:
 8010720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010722:	4b1b      	ldr	r3, [pc, #108]	; (8010790 <__sfp+0x70>)
 8010724:	681e      	ldr	r6, [r3, #0]
 8010726:	69b3      	ldr	r3, [r6, #24]
 8010728:	4607      	mov	r7, r0
 801072a:	b913      	cbnz	r3, 8010732 <__sfp+0x12>
 801072c:	4630      	mov	r0, r6
 801072e:	f7ff ffc7 	bl	80106c0 <__sinit>
 8010732:	3648      	adds	r6, #72	; 0x48
 8010734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010738:	3b01      	subs	r3, #1
 801073a:	d503      	bpl.n	8010744 <__sfp+0x24>
 801073c:	6833      	ldr	r3, [r6, #0]
 801073e:	b133      	cbz	r3, 801074e <__sfp+0x2e>
 8010740:	6836      	ldr	r6, [r6, #0]
 8010742:	e7f7      	b.n	8010734 <__sfp+0x14>
 8010744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010748:	b16d      	cbz	r5, 8010766 <__sfp+0x46>
 801074a:	3468      	adds	r4, #104	; 0x68
 801074c:	e7f4      	b.n	8010738 <__sfp+0x18>
 801074e:	2104      	movs	r1, #4
 8010750:	4638      	mov	r0, r7
 8010752:	f7ff ff9f 	bl	8010694 <__sfmoreglue>
 8010756:	6030      	str	r0, [r6, #0]
 8010758:	2800      	cmp	r0, #0
 801075a:	d1f1      	bne.n	8010740 <__sfp+0x20>
 801075c:	230c      	movs	r3, #12
 801075e:	603b      	str	r3, [r7, #0]
 8010760:	4604      	mov	r4, r0
 8010762:	4620      	mov	r0, r4
 8010764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010766:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <__sfp+0x74>)
 8010768:	6665      	str	r5, [r4, #100]	; 0x64
 801076a:	e9c4 5500 	strd	r5, r5, [r4]
 801076e:	60a5      	str	r5, [r4, #8]
 8010770:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010774:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010778:	2208      	movs	r2, #8
 801077a:	4629      	mov	r1, r5
 801077c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010780:	f7fe fa9c 	bl	800ecbc <memset>
 8010784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801078c:	e7e9      	b.n	8010762 <__sfp+0x42>
 801078e:	bf00      	nop
 8010790:	08013c94 	.word	0x08013c94
 8010794:	ffff0001 	.word	0xffff0001

08010798 <_fwalk_reent>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	4680      	mov	r8, r0
 801079e:	4689      	mov	r9, r1
 80107a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107a4:	2600      	movs	r6, #0
 80107a6:	b914      	cbnz	r4, 80107ae <_fwalk_reent+0x16>
 80107a8:	4630      	mov	r0, r6
 80107aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80107b2:	3f01      	subs	r7, #1
 80107b4:	d501      	bpl.n	80107ba <_fwalk_reent+0x22>
 80107b6:	6824      	ldr	r4, [r4, #0]
 80107b8:	e7f5      	b.n	80107a6 <_fwalk_reent+0xe>
 80107ba:	89ab      	ldrh	r3, [r5, #12]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d907      	bls.n	80107d0 <_fwalk_reent+0x38>
 80107c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107c4:	3301      	adds	r3, #1
 80107c6:	d003      	beq.n	80107d0 <_fwalk_reent+0x38>
 80107c8:	4629      	mov	r1, r5
 80107ca:	4640      	mov	r0, r8
 80107cc:	47c8      	blx	r9
 80107ce:	4306      	orrs	r6, r0
 80107d0:	3568      	adds	r5, #104	; 0x68
 80107d2:	e7ee      	b.n	80107b2 <_fwalk_reent+0x1a>

080107d4 <_localeconv_r>:
 80107d4:	4b04      	ldr	r3, [pc, #16]	; (80107e8 <_localeconv_r+0x14>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	6a18      	ldr	r0, [r3, #32]
 80107da:	4b04      	ldr	r3, [pc, #16]	; (80107ec <_localeconv_r+0x18>)
 80107dc:	2800      	cmp	r0, #0
 80107de:	bf08      	it	eq
 80107e0:	4618      	moveq	r0, r3
 80107e2:	30f0      	adds	r0, #240	; 0xf0
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	20001cac 	.word	0x20001cac
 80107ec:	20001d10 	.word	0x20001d10

080107f0 <__swhatbuf_r>:
 80107f0:	b570      	push	{r4, r5, r6, lr}
 80107f2:	460e      	mov	r6, r1
 80107f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107f8:	2900      	cmp	r1, #0
 80107fa:	b096      	sub	sp, #88	; 0x58
 80107fc:	4614      	mov	r4, r2
 80107fe:	461d      	mov	r5, r3
 8010800:	da07      	bge.n	8010812 <__swhatbuf_r+0x22>
 8010802:	2300      	movs	r3, #0
 8010804:	602b      	str	r3, [r5, #0]
 8010806:	89b3      	ldrh	r3, [r6, #12]
 8010808:	061a      	lsls	r2, r3, #24
 801080a:	d410      	bmi.n	801082e <__swhatbuf_r+0x3e>
 801080c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010810:	e00e      	b.n	8010830 <__swhatbuf_r+0x40>
 8010812:	466a      	mov	r2, sp
 8010814:	f000 fdbc 	bl	8011390 <_fstat_r>
 8010818:	2800      	cmp	r0, #0
 801081a:	dbf2      	blt.n	8010802 <__swhatbuf_r+0x12>
 801081c:	9a01      	ldr	r2, [sp, #4]
 801081e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010822:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010826:	425a      	negs	r2, r3
 8010828:	415a      	adcs	r2, r3
 801082a:	602a      	str	r2, [r5, #0]
 801082c:	e7ee      	b.n	801080c <__swhatbuf_r+0x1c>
 801082e:	2340      	movs	r3, #64	; 0x40
 8010830:	2000      	movs	r0, #0
 8010832:	6023      	str	r3, [r4, #0]
 8010834:	b016      	add	sp, #88	; 0x58
 8010836:	bd70      	pop	{r4, r5, r6, pc}

08010838 <__smakebuf_r>:
 8010838:	898b      	ldrh	r3, [r1, #12]
 801083a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801083c:	079d      	lsls	r5, r3, #30
 801083e:	4606      	mov	r6, r0
 8010840:	460c      	mov	r4, r1
 8010842:	d507      	bpl.n	8010854 <__smakebuf_r+0x1c>
 8010844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010848:	6023      	str	r3, [r4, #0]
 801084a:	6123      	str	r3, [r4, #16]
 801084c:	2301      	movs	r3, #1
 801084e:	6163      	str	r3, [r4, #20]
 8010850:	b002      	add	sp, #8
 8010852:	bd70      	pop	{r4, r5, r6, pc}
 8010854:	ab01      	add	r3, sp, #4
 8010856:	466a      	mov	r2, sp
 8010858:	f7ff ffca 	bl	80107f0 <__swhatbuf_r>
 801085c:	9900      	ldr	r1, [sp, #0]
 801085e:	4605      	mov	r5, r0
 8010860:	4630      	mov	r0, r6
 8010862:	f000 fb73 	bl	8010f4c <_malloc_r>
 8010866:	b948      	cbnz	r0, 801087c <__smakebuf_r+0x44>
 8010868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801086c:	059a      	lsls	r2, r3, #22
 801086e:	d4ef      	bmi.n	8010850 <__smakebuf_r+0x18>
 8010870:	f023 0303 	bic.w	r3, r3, #3
 8010874:	f043 0302 	orr.w	r3, r3, #2
 8010878:	81a3      	strh	r3, [r4, #12]
 801087a:	e7e3      	b.n	8010844 <__smakebuf_r+0xc>
 801087c:	4b0d      	ldr	r3, [pc, #52]	; (80108b4 <__smakebuf_r+0x7c>)
 801087e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010880:	89a3      	ldrh	r3, [r4, #12]
 8010882:	6020      	str	r0, [r4, #0]
 8010884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010888:	81a3      	strh	r3, [r4, #12]
 801088a:	9b00      	ldr	r3, [sp, #0]
 801088c:	6163      	str	r3, [r4, #20]
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	6120      	str	r0, [r4, #16]
 8010892:	b15b      	cbz	r3, 80108ac <__smakebuf_r+0x74>
 8010894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010898:	4630      	mov	r0, r6
 801089a:	f000 fd8b 	bl	80113b4 <_isatty_r>
 801089e:	b128      	cbz	r0, 80108ac <__smakebuf_r+0x74>
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	f023 0303 	bic.w	r3, r3, #3
 80108a6:	f043 0301 	orr.w	r3, r3, #1
 80108aa:	81a3      	strh	r3, [r4, #12]
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	431d      	orrs	r5, r3
 80108b0:	81a5      	strh	r5, [r4, #12]
 80108b2:	e7cd      	b.n	8010850 <__smakebuf_r+0x18>
 80108b4:	08010689 	.word	0x08010689

080108b8 <malloc>:
 80108b8:	4b02      	ldr	r3, [pc, #8]	; (80108c4 <malloc+0xc>)
 80108ba:	4601      	mov	r1, r0
 80108bc:	6818      	ldr	r0, [r3, #0]
 80108be:	f000 bb45 	b.w	8010f4c <_malloc_r>
 80108c2:	bf00      	nop
 80108c4:	20001cac 	.word	0x20001cac

080108c8 <memcpy>:
 80108c8:	b510      	push	{r4, lr}
 80108ca:	1e43      	subs	r3, r0, #1
 80108cc:	440a      	add	r2, r1
 80108ce:	4291      	cmp	r1, r2
 80108d0:	d100      	bne.n	80108d4 <memcpy+0xc>
 80108d2:	bd10      	pop	{r4, pc}
 80108d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108dc:	e7f7      	b.n	80108ce <memcpy+0x6>

080108de <_Balloc>:
 80108de:	b570      	push	{r4, r5, r6, lr}
 80108e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108e2:	4604      	mov	r4, r0
 80108e4:	460e      	mov	r6, r1
 80108e6:	b93d      	cbnz	r5, 80108f8 <_Balloc+0x1a>
 80108e8:	2010      	movs	r0, #16
 80108ea:	f7ff ffe5 	bl	80108b8 <malloc>
 80108ee:	6260      	str	r0, [r4, #36]	; 0x24
 80108f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108f4:	6005      	str	r5, [r0, #0]
 80108f6:	60c5      	str	r5, [r0, #12]
 80108f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80108fa:	68eb      	ldr	r3, [r5, #12]
 80108fc:	b183      	cbz	r3, 8010920 <_Balloc+0x42>
 80108fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010906:	b9b8      	cbnz	r0, 8010938 <_Balloc+0x5a>
 8010908:	2101      	movs	r1, #1
 801090a:	fa01 f506 	lsl.w	r5, r1, r6
 801090e:	1d6a      	adds	r2, r5, #5
 8010910:	0092      	lsls	r2, r2, #2
 8010912:	4620      	mov	r0, r4
 8010914:	f000 fabe 	bl	8010e94 <_calloc_r>
 8010918:	b160      	cbz	r0, 8010934 <_Balloc+0x56>
 801091a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801091e:	e00e      	b.n	801093e <_Balloc+0x60>
 8010920:	2221      	movs	r2, #33	; 0x21
 8010922:	2104      	movs	r1, #4
 8010924:	4620      	mov	r0, r4
 8010926:	f000 fab5 	bl	8010e94 <_calloc_r>
 801092a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801092c:	60e8      	str	r0, [r5, #12]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1e4      	bne.n	80108fe <_Balloc+0x20>
 8010934:	2000      	movs	r0, #0
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	6802      	ldr	r2, [r0, #0]
 801093a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801093e:	2300      	movs	r3, #0
 8010940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010944:	e7f7      	b.n	8010936 <_Balloc+0x58>

08010946 <_Bfree>:
 8010946:	b570      	push	{r4, r5, r6, lr}
 8010948:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801094a:	4606      	mov	r6, r0
 801094c:	460d      	mov	r5, r1
 801094e:	b93c      	cbnz	r4, 8010960 <_Bfree+0x1a>
 8010950:	2010      	movs	r0, #16
 8010952:	f7ff ffb1 	bl	80108b8 <malloc>
 8010956:	6270      	str	r0, [r6, #36]	; 0x24
 8010958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801095c:	6004      	str	r4, [r0, #0]
 801095e:	60c4      	str	r4, [r0, #12]
 8010960:	b13d      	cbz	r5, 8010972 <_Bfree+0x2c>
 8010962:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010964:	686a      	ldr	r2, [r5, #4]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801096c:	6029      	str	r1, [r5, #0]
 801096e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010972:	bd70      	pop	{r4, r5, r6, pc}

08010974 <__multadd>:
 8010974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010978:	690d      	ldr	r5, [r1, #16]
 801097a:	461f      	mov	r7, r3
 801097c:	4606      	mov	r6, r0
 801097e:	460c      	mov	r4, r1
 8010980:	f101 0c14 	add.w	ip, r1, #20
 8010984:	2300      	movs	r3, #0
 8010986:	f8dc 0000 	ldr.w	r0, [ip]
 801098a:	b281      	uxth	r1, r0
 801098c:	fb02 7101 	mla	r1, r2, r1, r7
 8010990:	0c0f      	lsrs	r7, r1, #16
 8010992:	0c00      	lsrs	r0, r0, #16
 8010994:	fb02 7000 	mla	r0, r2, r0, r7
 8010998:	b289      	uxth	r1, r1
 801099a:	3301      	adds	r3, #1
 801099c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80109a0:	429d      	cmp	r5, r3
 80109a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80109a6:	f84c 1b04 	str.w	r1, [ip], #4
 80109aa:	dcec      	bgt.n	8010986 <__multadd+0x12>
 80109ac:	b1d7      	cbz	r7, 80109e4 <__multadd+0x70>
 80109ae:	68a3      	ldr	r3, [r4, #8]
 80109b0:	42ab      	cmp	r3, r5
 80109b2:	dc12      	bgt.n	80109da <__multadd+0x66>
 80109b4:	6861      	ldr	r1, [r4, #4]
 80109b6:	4630      	mov	r0, r6
 80109b8:	3101      	adds	r1, #1
 80109ba:	f7ff ff90 	bl	80108de <_Balloc>
 80109be:	6922      	ldr	r2, [r4, #16]
 80109c0:	3202      	adds	r2, #2
 80109c2:	f104 010c 	add.w	r1, r4, #12
 80109c6:	4680      	mov	r8, r0
 80109c8:	0092      	lsls	r2, r2, #2
 80109ca:	300c      	adds	r0, #12
 80109cc:	f7ff ff7c 	bl	80108c8 <memcpy>
 80109d0:	4621      	mov	r1, r4
 80109d2:	4630      	mov	r0, r6
 80109d4:	f7ff ffb7 	bl	8010946 <_Bfree>
 80109d8:	4644      	mov	r4, r8
 80109da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109de:	3501      	adds	r5, #1
 80109e0:	615f      	str	r7, [r3, #20]
 80109e2:	6125      	str	r5, [r4, #16]
 80109e4:	4620      	mov	r0, r4
 80109e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080109ea <__hi0bits>:
 80109ea:	0c02      	lsrs	r2, r0, #16
 80109ec:	0412      	lsls	r2, r2, #16
 80109ee:	4603      	mov	r3, r0
 80109f0:	b9b2      	cbnz	r2, 8010a20 <__hi0bits+0x36>
 80109f2:	0403      	lsls	r3, r0, #16
 80109f4:	2010      	movs	r0, #16
 80109f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80109fa:	bf04      	itt	eq
 80109fc:	021b      	lsleq	r3, r3, #8
 80109fe:	3008      	addeq	r0, #8
 8010a00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010a04:	bf04      	itt	eq
 8010a06:	011b      	lsleq	r3, r3, #4
 8010a08:	3004      	addeq	r0, #4
 8010a0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010a0e:	bf04      	itt	eq
 8010a10:	009b      	lsleq	r3, r3, #2
 8010a12:	3002      	addeq	r0, #2
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	db06      	blt.n	8010a26 <__hi0bits+0x3c>
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	d503      	bpl.n	8010a24 <__hi0bits+0x3a>
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	4770      	bx	lr
 8010a20:	2000      	movs	r0, #0
 8010a22:	e7e8      	b.n	80109f6 <__hi0bits+0xc>
 8010a24:	2020      	movs	r0, #32
 8010a26:	4770      	bx	lr

08010a28 <__lo0bits>:
 8010a28:	6803      	ldr	r3, [r0, #0]
 8010a2a:	f013 0207 	ands.w	r2, r3, #7
 8010a2e:	4601      	mov	r1, r0
 8010a30:	d00b      	beq.n	8010a4a <__lo0bits+0x22>
 8010a32:	07da      	lsls	r2, r3, #31
 8010a34:	d423      	bmi.n	8010a7e <__lo0bits+0x56>
 8010a36:	0798      	lsls	r0, r3, #30
 8010a38:	bf49      	itett	mi
 8010a3a:	085b      	lsrmi	r3, r3, #1
 8010a3c:	089b      	lsrpl	r3, r3, #2
 8010a3e:	2001      	movmi	r0, #1
 8010a40:	600b      	strmi	r3, [r1, #0]
 8010a42:	bf5c      	itt	pl
 8010a44:	600b      	strpl	r3, [r1, #0]
 8010a46:	2002      	movpl	r0, #2
 8010a48:	4770      	bx	lr
 8010a4a:	b298      	uxth	r0, r3
 8010a4c:	b9a8      	cbnz	r0, 8010a7a <__lo0bits+0x52>
 8010a4e:	0c1b      	lsrs	r3, r3, #16
 8010a50:	2010      	movs	r0, #16
 8010a52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010a56:	bf04      	itt	eq
 8010a58:	0a1b      	lsreq	r3, r3, #8
 8010a5a:	3008      	addeq	r0, #8
 8010a5c:	071a      	lsls	r2, r3, #28
 8010a5e:	bf04      	itt	eq
 8010a60:	091b      	lsreq	r3, r3, #4
 8010a62:	3004      	addeq	r0, #4
 8010a64:	079a      	lsls	r2, r3, #30
 8010a66:	bf04      	itt	eq
 8010a68:	089b      	lsreq	r3, r3, #2
 8010a6a:	3002      	addeq	r0, #2
 8010a6c:	07da      	lsls	r2, r3, #31
 8010a6e:	d402      	bmi.n	8010a76 <__lo0bits+0x4e>
 8010a70:	085b      	lsrs	r3, r3, #1
 8010a72:	d006      	beq.n	8010a82 <__lo0bits+0x5a>
 8010a74:	3001      	adds	r0, #1
 8010a76:	600b      	str	r3, [r1, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	4610      	mov	r0, r2
 8010a7c:	e7e9      	b.n	8010a52 <__lo0bits+0x2a>
 8010a7e:	2000      	movs	r0, #0
 8010a80:	4770      	bx	lr
 8010a82:	2020      	movs	r0, #32
 8010a84:	4770      	bx	lr

08010a86 <__i2b>:
 8010a86:	b510      	push	{r4, lr}
 8010a88:	460c      	mov	r4, r1
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	f7ff ff27 	bl	80108de <_Balloc>
 8010a90:	2201      	movs	r2, #1
 8010a92:	6144      	str	r4, [r0, #20]
 8010a94:	6102      	str	r2, [r0, #16]
 8010a96:	bd10      	pop	{r4, pc}

08010a98 <__multiply>:
 8010a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	4614      	mov	r4, r2
 8010a9e:	690a      	ldr	r2, [r1, #16]
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	bfb8      	it	lt
 8010aa6:	460b      	movlt	r3, r1
 8010aa8:	4688      	mov	r8, r1
 8010aaa:	bfbc      	itt	lt
 8010aac:	46a0      	movlt	r8, r4
 8010aae:	461c      	movlt	r4, r3
 8010ab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ab4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ab8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ac0:	eb07 0609 	add.w	r6, r7, r9
 8010ac4:	42b3      	cmp	r3, r6
 8010ac6:	bfb8      	it	lt
 8010ac8:	3101      	addlt	r1, #1
 8010aca:	f7ff ff08 	bl	80108de <_Balloc>
 8010ace:	f100 0514 	add.w	r5, r0, #20
 8010ad2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010ad6:	462b      	mov	r3, r5
 8010ad8:	2200      	movs	r2, #0
 8010ada:	4573      	cmp	r3, lr
 8010adc:	d316      	bcc.n	8010b0c <__multiply+0x74>
 8010ade:	f104 0214 	add.w	r2, r4, #20
 8010ae2:	f108 0114 	add.w	r1, r8, #20
 8010ae6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010aea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	9b00      	ldr	r3, [sp, #0]
 8010af2:	9201      	str	r2, [sp, #4]
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d80c      	bhi.n	8010b12 <__multiply+0x7a>
 8010af8:	2e00      	cmp	r6, #0
 8010afa:	dd03      	ble.n	8010b04 <__multiply+0x6c>
 8010afc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d05d      	beq.n	8010bc0 <__multiply+0x128>
 8010b04:	6106      	str	r6, [r0, #16]
 8010b06:	b003      	add	sp, #12
 8010b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0c:	f843 2b04 	str.w	r2, [r3], #4
 8010b10:	e7e3      	b.n	8010ada <__multiply+0x42>
 8010b12:	f8b2 b000 	ldrh.w	fp, [r2]
 8010b16:	f1bb 0f00 	cmp.w	fp, #0
 8010b1a:	d023      	beq.n	8010b64 <__multiply+0xcc>
 8010b1c:	4689      	mov	r9, r1
 8010b1e:	46ac      	mov	ip, r5
 8010b20:	f04f 0800 	mov.w	r8, #0
 8010b24:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b28:	f8dc a000 	ldr.w	sl, [ip]
 8010b2c:	b2a3      	uxth	r3, r4
 8010b2e:	fa1f fa8a 	uxth.w	sl, sl
 8010b32:	fb0b a303 	mla	r3, fp, r3, sl
 8010b36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010b3a:	f8dc 4000 	ldr.w	r4, [ip]
 8010b3e:	4443      	add	r3, r8
 8010b40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b44:	fb0b 840a 	mla	r4, fp, sl, r8
 8010b48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010b4c:	46e2      	mov	sl, ip
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b54:	454f      	cmp	r7, r9
 8010b56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010b5a:	f84a 3b04 	str.w	r3, [sl], #4
 8010b5e:	d82b      	bhi.n	8010bb8 <__multiply+0x120>
 8010b60:	f8cc 8004 	str.w	r8, [ip, #4]
 8010b64:	9b01      	ldr	r3, [sp, #4]
 8010b66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010b6a:	3204      	adds	r2, #4
 8010b6c:	f1ba 0f00 	cmp.w	sl, #0
 8010b70:	d020      	beq.n	8010bb4 <__multiply+0x11c>
 8010b72:	682b      	ldr	r3, [r5, #0]
 8010b74:	4689      	mov	r9, r1
 8010b76:	46a8      	mov	r8, r5
 8010b78:	f04f 0b00 	mov.w	fp, #0
 8010b7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8010b80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010b84:	fb0a 440c 	mla	r4, sl, ip, r4
 8010b88:	445c      	add	r4, fp
 8010b8a:	46c4      	mov	ip, r8
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010b92:	f84c 3b04 	str.w	r3, [ip], #4
 8010b96:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010b9e:	0c1b      	lsrs	r3, r3, #16
 8010ba0:	fb0a b303 	mla	r3, sl, r3, fp
 8010ba4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010ba8:	454f      	cmp	r7, r9
 8010baa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010bae:	d805      	bhi.n	8010bbc <__multiply+0x124>
 8010bb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8010bb4:	3504      	adds	r5, #4
 8010bb6:	e79b      	b.n	8010af0 <__multiply+0x58>
 8010bb8:	46d4      	mov	ip, sl
 8010bba:	e7b3      	b.n	8010b24 <__multiply+0x8c>
 8010bbc:	46e0      	mov	r8, ip
 8010bbe:	e7dd      	b.n	8010b7c <__multiply+0xe4>
 8010bc0:	3e01      	subs	r6, #1
 8010bc2:	e799      	b.n	8010af8 <__multiply+0x60>

08010bc4 <__pow5mult>:
 8010bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	4615      	mov	r5, r2
 8010bca:	f012 0203 	ands.w	r2, r2, #3
 8010bce:	4606      	mov	r6, r0
 8010bd0:	460f      	mov	r7, r1
 8010bd2:	d007      	beq.n	8010be4 <__pow5mult+0x20>
 8010bd4:	3a01      	subs	r2, #1
 8010bd6:	4c21      	ldr	r4, [pc, #132]	; (8010c5c <__pow5mult+0x98>)
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010bde:	f7ff fec9 	bl	8010974 <__multadd>
 8010be2:	4607      	mov	r7, r0
 8010be4:	10ad      	asrs	r5, r5, #2
 8010be6:	d035      	beq.n	8010c54 <__pow5mult+0x90>
 8010be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010bea:	b93c      	cbnz	r4, 8010bfc <__pow5mult+0x38>
 8010bec:	2010      	movs	r0, #16
 8010bee:	f7ff fe63 	bl	80108b8 <malloc>
 8010bf2:	6270      	str	r0, [r6, #36]	; 0x24
 8010bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010bf8:	6004      	str	r4, [r0, #0]
 8010bfa:	60c4      	str	r4, [r0, #12]
 8010bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c04:	b94c      	cbnz	r4, 8010c1a <__pow5mult+0x56>
 8010c06:	f240 2171 	movw	r1, #625	; 0x271
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f7ff ff3b 	bl	8010a86 <__i2b>
 8010c10:	2300      	movs	r3, #0
 8010c12:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c16:	4604      	mov	r4, r0
 8010c18:	6003      	str	r3, [r0, #0]
 8010c1a:	f04f 0800 	mov.w	r8, #0
 8010c1e:	07eb      	lsls	r3, r5, #31
 8010c20:	d50a      	bpl.n	8010c38 <__pow5mult+0x74>
 8010c22:	4639      	mov	r1, r7
 8010c24:	4622      	mov	r2, r4
 8010c26:	4630      	mov	r0, r6
 8010c28:	f7ff ff36 	bl	8010a98 <__multiply>
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	4681      	mov	r9, r0
 8010c30:	4630      	mov	r0, r6
 8010c32:	f7ff fe88 	bl	8010946 <_Bfree>
 8010c36:	464f      	mov	r7, r9
 8010c38:	106d      	asrs	r5, r5, #1
 8010c3a:	d00b      	beq.n	8010c54 <__pow5mult+0x90>
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	b938      	cbnz	r0, 8010c50 <__pow5mult+0x8c>
 8010c40:	4622      	mov	r2, r4
 8010c42:	4621      	mov	r1, r4
 8010c44:	4630      	mov	r0, r6
 8010c46:	f7ff ff27 	bl	8010a98 <__multiply>
 8010c4a:	6020      	str	r0, [r4, #0]
 8010c4c:	f8c0 8000 	str.w	r8, [r0]
 8010c50:	4604      	mov	r4, r0
 8010c52:	e7e4      	b.n	8010c1e <__pow5mult+0x5a>
 8010c54:	4638      	mov	r0, r7
 8010c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08013e28 	.word	0x08013e28

08010c60 <__lshift>:
 8010c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c64:	460c      	mov	r4, r1
 8010c66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c6a:	6923      	ldr	r3, [r4, #16]
 8010c6c:	6849      	ldr	r1, [r1, #4]
 8010c6e:	eb0a 0903 	add.w	r9, sl, r3
 8010c72:	68a3      	ldr	r3, [r4, #8]
 8010c74:	4607      	mov	r7, r0
 8010c76:	4616      	mov	r6, r2
 8010c78:	f109 0501 	add.w	r5, r9, #1
 8010c7c:	42ab      	cmp	r3, r5
 8010c7e:	db32      	blt.n	8010ce6 <__lshift+0x86>
 8010c80:	4638      	mov	r0, r7
 8010c82:	f7ff fe2c 	bl	80108de <_Balloc>
 8010c86:	2300      	movs	r3, #0
 8010c88:	4680      	mov	r8, r0
 8010c8a:	f100 0114 	add.w	r1, r0, #20
 8010c8e:	461a      	mov	r2, r3
 8010c90:	4553      	cmp	r3, sl
 8010c92:	db2b      	blt.n	8010cec <__lshift+0x8c>
 8010c94:	6920      	ldr	r0, [r4, #16]
 8010c96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c9a:	f104 0314 	add.w	r3, r4, #20
 8010c9e:	f016 021f 	ands.w	r2, r6, #31
 8010ca2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ca6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010caa:	d025      	beq.n	8010cf8 <__lshift+0x98>
 8010cac:	f1c2 0e20 	rsb	lr, r2, #32
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	681e      	ldr	r6, [r3, #0]
 8010cb4:	468a      	mov	sl, r1
 8010cb6:	4096      	lsls	r6, r2
 8010cb8:	4330      	orrs	r0, r6
 8010cba:	f84a 0b04 	str.w	r0, [sl], #4
 8010cbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8010cc2:	459c      	cmp	ip, r3
 8010cc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010cc8:	d814      	bhi.n	8010cf4 <__lshift+0x94>
 8010cca:	6048      	str	r0, [r1, #4]
 8010ccc:	b108      	cbz	r0, 8010cd2 <__lshift+0x72>
 8010cce:	f109 0502 	add.w	r5, r9, #2
 8010cd2:	3d01      	subs	r5, #1
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8010cda:	4621      	mov	r1, r4
 8010cdc:	f7ff fe33 	bl	8010946 <_Bfree>
 8010ce0:	4640      	mov	r0, r8
 8010ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce6:	3101      	adds	r1, #1
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	e7c7      	b.n	8010c7c <__lshift+0x1c>
 8010cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	e7cd      	b.n	8010c90 <__lshift+0x30>
 8010cf4:	4651      	mov	r1, sl
 8010cf6:	e7dc      	b.n	8010cb2 <__lshift+0x52>
 8010cf8:	3904      	subs	r1, #4
 8010cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d02:	459c      	cmp	ip, r3
 8010d04:	d8f9      	bhi.n	8010cfa <__lshift+0x9a>
 8010d06:	e7e4      	b.n	8010cd2 <__lshift+0x72>

08010d08 <__mcmp>:
 8010d08:	6903      	ldr	r3, [r0, #16]
 8010d0a:	690a      	ldr	r2, [r1, #16]
 8010d0c:	1a9b      	subs	r3, r3, r2
 8010d0e:	b530      	push	{r4, r5, lr}
 8010d10:	d10c      	bne.n	8010d2c <__mcmp+0x24>
 8010d12:	0092      	lsls	r2, r2, #2
 8010d14:	3014      	adds	r0, #20
 8010d16:	3114      	adds	r1, #20
 8010d18:	1884      	adds	r4, r0, r2
 8010d1a:	4411      	add	r1, r2
 8010d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d24:	4295      	cmp	r5, r2
 8010d26:	d003      	beq.n	8010d30 <__mcmp+0x28>
 8010d28:	d305      	bcc.n	8010d36 <__mcmp+0x2e>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	bd30      	pop	{r4, r5, pc}
 8010d30:	42a0      	cmp	r0, r4
 8010d32:	d3f3      	bcc.n	8010d1c <__mcmp+0x14>
 8010d34:	e7fa      	b.n	8010d2c <__mcmp+0x24>
 8010d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d3a:	e7f7      	b.n	8010d2c <__mcmp+0x24>

08010d3c <__mdiff>:
 8010d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d40:	460d      	mov	r5, r1
 8010d42:	4607      	mov	r7, r0
 8010d44:	4611      	mov	r1, r2
 8010d46:	4628      	mov	r0, r5
 8010d48:	4614      	mov	r4, r2
 8010d4a:	f7ff ffdd 	bl	8010d08 <__mcmp>
 8010d4e:	1e06      	subs	r6, r0, #0
 8010d50:	d108      	bne.n	8010d64 <__mdiff+0x28>
 8010d52:	4631      	mov	r1, r6
 8010d54:	4638      	mov	r0, r7
 8010d56:	f7ff fdc2 	bl	80108de <_Balloc>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d64:	bfa4      	itt	ge
 8010d66:	4623      	movge	r3, r4
 8010d68:	462c      	movge	r4, r5
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	6861      	ldr	r1, [r4, #4]
 8010d6e:	bfa6      	itte	ge
 8010d70:	461d      	movge	r5, r3
 8010d72:	2600      	movge	r6, #0
 8010d74:	2601      	movlt	r6, #1
 8010d76:	f7ff fdb2 	bl	80108de <_Balloc>
 8010d7a:	692b      	ldr	r3, [r5, #16]
 8010d7c:	60c6      	str	r6, [r0, #12]
 8010d7e:	6926      	ldr	r6, [r4, #16]
 8010d80:	f105 0914 	add.w	r9, r5, #20
 8010d84:	f104 0214 	add.w	r2, r4, #20
 8010d88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010d8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010d90:	f100 0514 	add.w	r5, r0, #20
 8010d94:	f04f 0e00 	mov.w	lr, #0
 8010d98:	f852 ab04 	ldr.w	sl, [r2], #4
 8010d9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010da0:	fa1e f18a 	uxtah	r1, lr, sl
 8010da4:	b2a3      	uxth	r3, r4
 8010da6:	1ac9      	subs	r1, r1, r3
 8010da8:	0c23      	lsrs	r3, r4, #16
 8010daa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010dae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010db2:	b289      	uxth	r1, r1
 8010db4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010db8:	45c8      	cmp	r8, r9
 8010dba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010dbe:	4694      	mov	ip, r2
 8010dc0:	f845 3b04 	str.w	r3, [r5], #4
 8010dc4:	d8e8      	bhi.n	8010d98 <__mdiff+0x5c>
 8010dc6:	45bc      	cmp	ip, r7
 8010dc8:	d304      	bcc.n	8010dd4 <__mdiff+0x98>
 8010dca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010dce:	b183      	cbz	r3, 8010df2 <__mdiff+0xb6>
 8010dd0:	6106      	str	r6, [r0, #16]
 8010dd2:	e7c5      	b.n	8010d60 <__mdiff+0x24>
 8010dd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010dd8:	fa1e f381 	uxtah	r3, lr, r1
 8010ddc:	141a      	asrs	r2, r3, #16
 8010dde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010de8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010dec:	f845 3b04 	str.w	r3, [r5], #4
 8010df0:	e7e9      	b.n	8010dc6 <__mdiff+0x8a>
 8010df2:	3e01      	subs	r6, #1
 8010df4:	e7e9      	b.n	8010dca <__mdiff+0x8e>

08010df6 <__d2b>:
 8010df6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dfa:	460e      	mov	r6, r1
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	ec59 8b10 	vmov	r8, r9, d0
 8010e02:	4615      	mov	r5, r2
 8010e04:	f7ff fd6b 	bl	80108de <_Balloc>
 8010e08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e12:	bb34      	cbnz	r4, 8010e62 <__d2b+0x6c>
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	f1b8 0300 	subs.w	r3, r8, #0
 8010e1a:	d027      	beq.n	8010e6c <__d2b+0x76>
 8010e1c:	a802      	add	r0, sp, #8
 8010e1e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010e22:	f7ff fe01 	bl	8010a28 <__lo0bits>
 8010e26:	9900      	ldr	r1, [sp, #0]
 8010e28:	b1f0      	cbz	r0, 8010e68 <__d2b+0x72>
 8010e2a:	9a01      	ldr	r2, [sp, #4]
 8010e2c:	f1c0 0320 	rsb	r3, r0, #32
 8010e30:	fa02 f303 	lsl.w	r3, r2, r3
 8010e34:	430b      	orrs	r3, r1
 8010e36:	40c2      	lsrs	r2, r0
 8010e38:	617b      	str	r3, [r7, #20]
 8010e3a:	9201      	str	r2, [sp, #4]
 8010e3c:	9b01      	ldr	r3, [sp, #4]
 8010e3e:	61bb      	str	r3, [r7, #24]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	bf14      	ite	ne
 8010e44:	2102      	movne	r1, #2
 8010e46:	2101      	moveq	r1, #1
 8010e48:	6139      	str	r1, [r7, #16]
 8010e4a:	b1c4      	cbz	r4, 8010e7e <__d2b+0x88>
 8010e4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010e50:	4404      	add	r4, r0
 8010e52:	6034      	str	r4, [r6, #0]
 8010e54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e58:	6028      	str	r0, [r5, #0]
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	b003      	add	sp, #12
 8010e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e66:	e7d5      	b.n	8010e14 <__d2b+0x1e>
 8010e68:	6179      	str	r1, [r7, #20]
 8010e6a:	e7e7      	b.n	8010e3c <__d2b+0x46>
 8010e6c:	a801      	add	r0, sp, #4
 8010e6e:	f7ff fddb 	bl	8010a28 <__lo0bits>
 8010e72:	9b01      	ldr	r3, [sp, #4]
 8010e74:	617b      	str	r3, [r7, #20]
 8010e76:	2101      	movs	r1, #1
 8010e78:	6139      	str	r1, [r7, #16]
 8010e7a:	3020      	adds	r0, #32
 8010e7c:	e7e5      	b.n	8010e4a <__d2b+0x54>
 8010e7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010e82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010e86:	6030      	str	r0, [r6, #0]
 8010e88:	6918      	ldr	r0, [r3, #16]
 8010e8a:	f7ff fdae 	bl	80109ea <__hi0bits>
 8010e8e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010e92:	e7e1      	b.n	8010e58 <__d2b+0x62>

08010e94 <_calloc_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	fb02 f401 	mul.w	r4, r2, r1
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	f000 f856 	bl	8010f4c <_malloc_r>
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	b118      	cbz	r0, 8010eac <_calloc_r+0x18>
 8010ea4:	4622      	mov	r2, r4
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	f7fd ff08 	bl	800ecbc <memset>
 8010eac:	4628      	mov	r0, r5
 8010eae:	bd38      	pop	{r3, r4, r5, pc}

08010eb0 <_free_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	2900      	cmp	r1, #0
 8010eb6:	d045      	beq.n	8010f44 <_free_r+0x94>
 8010eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ebc:	1f0c      	subs	r4, r1, #4
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfb8      	it	lt
 8010ec2:	18e4      	addlt	r4, r4, r3
 8010ec4:	f000 fac3 	bl	801144e <__malloc_lock>
 8010ec8:	4a1f      	ldr	r2, [pc, #124]	; (8010f48 <_free_r+0x98>)
 8010eca:	6813      	ldr	r3, [r2, #0]
 8010ecc:	4610      	mov	r0, r2
 8010ece:	b933      	cbnz	r3, 8010ede <_free_r+0x2e>
 8010ed0:	6063      	str	r3, [r4, #4]
 8010ed2:	6014      	str	r4, [r2, #0]
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eda:	f000 bab9 	b.w	8011450 <__malloc_unlock>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d90c      	bls.n	8010efc <_free_r+0x4c>
 8010ee2:	6821      	ldr	r1, [r4, #0]
 8010ee4:	1862      	adds	r2, r4, r1
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	bf04      	itt	eq
 8010eea:	681a      	ldreq	r2, [r3, #0]
 8010eec:	685b      	ldreq	r3, [r3, #4]
 8010eee:	6063      	str	r3, [r4, #4]
 8010ef0:	bf04      	itt	eq
 8010ef2:	1852      	addeq	r2, r2, r1
 8010ef4:	6022      	streq	r2, [r4, #0]
 8010ef6:	6004      	str	r4, [r0, #0]
 8010ef8:	e7ec      	b.n	8010ed4 <_free_r+0x24>
 8010efa:	4613      	mov	r3, r2
 8010efc:	685a      	ldr	r2, [r3, #4]
 8010efe:	b10a      	cbz	r2, 8010f04 <_free_r+0x54>
 8010f00:	42a2      	cmp	r2, r4
 8010f02:	d9fa      	bls.n	8010efa <_free_r+0x4a>
 8010f04:	6819      	ldr	r1, [r3, #0]
 8010f06:	1858      	adds	r0, r3, r1
 8010f08:	42a0      	cmp	r0, r4
 8010f0a:	d10b      	bne.n	8010f24 <_free_r+0x74>
 8010f0c:	6820      	ldr	r0, [r4, #0]
 8010f0e:	4401      	add	r1, r0
 8010f10:	1858      	adds	r0, r3, r1
 8010f12:	4282      	cmp	r2, r0
 8010f14:	6019      	str	r1, [r3, #0]
 8010f16:	d1dd      	bne.n	8010ed4 <_free_r+0x24>
 8010f18:	6810      	ldr	r0, [r2, #0]
 8010f1a:	6852      	ldr	r2, [r2, #4]
 8010f1c:	605a      	str	r2, [r3, #4]
 8010f1e:	4401      	add	r1, r0
 8010f20:	6019      	str	r1, [r3, #0]
 8010f22:	e7d7      	b.n	8010ed4 <_free_r+0x24>
 8010f24:	d902      	bls.n	8010f2c <_free_r+0x7c>
 8010f26:	230c      	movs	r3, #12
 8010f28:	602b      	str	r3, [r5, #0]
 8010f2a:	e7d3      	b.n	8010ed4 <_free_r+0x24>
 8010f2c:	6820      	ldr	r0, [r4, #0]
 8010f2e:	1821      	adds	r1, r4, r0
 8010f30:	428a      	cmp	r2, r1
 8010f32:	bf04      	itt	eq
 8010f34:	6811      	ldreq	r1, [r2, #0]
 8010f36:	6852      	ldreq	r2, [r2, #4]
 8010f38:	6062      	str	r2, [r4, #4]
 8010f3a:	bf04      	itt	eq
 8010f3c:	1809      	addeq	r1, r1, r0
 8010f3e:	6021      	streq	r1, [r4, #0]
 8010f40:	605c      	str	r4, [r3, #4]
 8010f42:	e7c7      	b.n	8010ed4 <_free_r+0x24>
 8010f44:	bd38      	pop	{r3, r4, r5, pc}
 8010f46:	bf00      	nop
 8010f48:	20001f14 	.word	0x20001f14

08010f4c <_malloc_r>:
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	1ccd      	adds	r5, r1, #3
 8010f50:	f025 0503 	bic.w	r5, r5, #3
 8010f54:	3508      	adds	r5, #8
 8010f56:	2d0c      	cmp	r5, #12
 8010f58:	bf38      	it	cc
 8010f5a:	250c      	movcc	r5, #12
 8010f5c:	2d00      	cmp	r5, #0
 8010f5e:	4606      	mov	r6, r0
 8010f60:	db01      	blt.n	8010f66 <_malloc_r+0x1a>
 8010f62:	42a9      	cmp	r1, r5
 8010f64:	d903      	bls.n	8010f6e <_malloc_r+0x22>
 8010f66:	230c      	movs	r3, #12
 8010f68:	6033      	str	r3, [r6, #0]
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	bd70      	pop	{r4, r5, r6, pc}
 8010f6e:	f000 fa6e 	bl	801144e <__malloc_lock>
 8010f72:	4a21      	ldr	r2, [pc, #132]	; (8010ff8 <_malloc_r+0xac>)
 8010f74:	6814      	ldr	r4, [r2, #0]
 8010f76:	4621      	mov	r1, r4
 8010f78:	b991      	cbnz	r1, 8010fa0 <_malloc_r+0x54>
 8010f7a:	4c20      	ldr	r4, [pc, #128]	; (8010ffc <_malloc_r+0xb0>)
 8010f7c:	6823      	ldr	r3, [r4, #0]
 8010f7e:	b91b      	cbnz	r3, 8010f88 <_malloc_r+0x3c>
 8010f80:	4630      	mov	r0, r6
 8010f82:	f000 f98f 	bl	80112a4 <_sbrk_r>
 8010f86:	6020      	str	r0, [r4, #0]
 8010f88:	4629      	mov	r1, r5
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f000 f98a 	bl	80112a4 <_sbrk_r>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d124      	bne.n	8010fde <_malloc_r+0x92>
 8010f94:	230c      	movs	r3, #12
 8010f96:	6033      	str	r3, [r6, #0]
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f000 fa59 	bl	8011450 <__malloc_unlock>
 8010f9e:	e7e4      	b.n	8010f6a <_malloc_r+0x1e>
 8010fa0:	680b      	ldr	r3, [r1, #0]
 8010fa2:	1b5b      	subs	r3, r3, r5
 8010fa4:	d418      	bmi.n	8010fd8 <_malloc_r+0x8c>
 8010fa6:	2b0b      	cmp	r3, #11
 8010fa8:	d90f      	bls.n	8010fca <_malloc_r+0x7e>
 8010faa:	600b      	str	r3, [r1, #0]
 8010fac:	50cd      	str	r5, [r1, r3]
 8010fae:	18cc      	adds	r4, r1, r3
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f000 fa4d 	bl	8011450 <__malloc_unlock>
 8010fb6:	f104 000b 	add.w	r0, r4, #11
 8010fba:	1d23      	adds	r3, r4, #4
 8010fbc:	f020 0007 	bic.w	r0, r0, #7
 8010fc0:	1ac3      	subs	r3, r0, r3
 8010fc2:	d0d3      	beq.n	8010f6c <_malloc_r+0x20>
 8010fc4:	425a      	negs	r2, r3
 8010fc6:	50e2      	str	r2, [r4, r3]
 8010fc8:	e7d0      	b.n	8010f6c <_malloc_r+0x20>
 8010fca:	428c      	cmp	r4, r1
 8010fcc:	684b      	ldr	r3, [r1, #4]
 8010fce:	bf16      	itet	ne
 8010fd0:	6063      	strne	r3, [r4, #4]
 8010fd2:	6013      	streq	r3, [r2, #0]
 8010fd4:	460c      	movne	r4, r1
 8010fd6:	e7eb      	b.n	8010fb0 <_malloc_r+0x64>
 8010fd8:	460c      	mov	r4, r1
 8010fda:	6849      	ldr	r1, [r1, #4]
 8010fdc:	e7cc      	b.n	8010f78 <_malloc_r+0x2c>
 8010fde:	1cc4      	adds	r4, r0, #3
 8010fe0:	f024 0403 	bic.w	r4, r4, #3
 8010fe4:	42a0      	cmp	r0, r4
 8010fe6:	d005      	beq.n	8010ff4 <_malloc_r+0xa8>
 8010fe8:	1a21      	subs	r1, r4, r0
 8010fea:	4630      	mov	r0, r6
 8010fec:	f000 f95a 	bl	80112a4 <_sbrk_r>
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d0cf      	beq.n	8010f94 <_malloc_r+0x48>
 8010ff4:	6025      	str	r5, [r4, #0]
 8010ff6:	e7db      	b.n	8010fb0 <_malloc_r+0x64>
 8010ff8:	20001f14 	.word	0x20001f14
 8010ffc:	20001f18 	.word	0x20001f18

08011000 <__ssputs_r>:
 8011000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011004:	688e      	ldr	r6, [r1, #8]
 8011006:	429e      	cmp	r6, r3
 8011008:	4682      	mov	sl, r0
 801100a:	460c      	mov	r4, r1
 801100c:	4690      	mov	r8, r2
 801100e:	4699      	mov	r9, r3
 8011010:	d837      	bhi.n	8011082 <__ssputs_r+0x82>
 8011012:	898a      	ldrh	r2, [r1, #12]
 8011014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011018:	d031      	beq.n	801107e <__ssputs_r+0x7e>
 801101a:	6825      	ldr	r5, [r4, #0]
 801101c:	6909      	ldr	r1, [r1, #16]
 801101e:	1a6f      	subs	r7, r5, r1
 8011020:	6965      	ldr	r5, [r4, #20]
 8011022:	2302      	movs	r3, #2
 8011024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011028:	fb95 f5f3 	sdiv	r5, r5, r3
 801102c:	f109 0301 	add.w	r3, r9, #1
 8011030:	443b      	add	r3, r7
 8011032:	429d      	cmp	r5, r3
 8011034:	bf38      	it	cc
 8011036:	461d      	movcc	r5, r3
 8011038:	0553      	lsls	r3, r2, #21
 801103a:	d530      	bpl.n	801109e <__ssputs_r+0x9e>
 801103c:	4629      	mov	r1, r5
 801103e:	f7ff ff85 	bl	8010f4c <_malloc_r>
 8011042:	4606      	mov	r6, r0
 8011044:	b950      	cbnz	r0, 801105c <__ssputs_r+0x5c>
 8011046:	230c      	movs	r3, #12
 8011048:	f8ca 3000 	str.w	r3, [sl]
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801105c:	463a      	mov	r2, r7
 801105e:	6921      	ldr	r1, [r4, #16]
 8011060:	f7ff fc32 	bl	80108c8 <memcpy>
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801106a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801106e:	81a3      	strh	r3, [r4, #12]
 8011070:	6126      	str	r6, [r4, #16]
 8011072:	6165      	str	r5, [r4, #20]
 8011074:	443e      	add	r6, r7
 8011076:	1bed      	subs	r5, r5, r7
 8011078:	6026      	str	r6, [r4, #0]
 801107a:	60a5      	str	r5, [r4, #8]
 801107c:	464e      	mov	r6, r9
 801107e:	454e      	cmp	r6, r9
 8011080:	d900      	bls.n	8011084 <__ssputs_r+0x84>
 8011082:	464e      	mov	r6, r9
 8011084:	4632      	mov	r2, r6
 8011086:	4641      	mov	r1, r8
 8011088:	6820      	ldr	r0, [r4, #0]
 801108a:	f000 f9c7 	bl	801141c <memmove>
 801108e:	68a3      	ldr	r3, [r4, #8]
 8011090:	1b9b      	subs	r3, r3, r6
 8011092:	60a3      	str	r3, [r4, #8]
 8011094:	6823      	ldr	r3, [r4, #0]
 8011096:	441e      	add	r6, r3
 8011098:	6026      	str	r6, [r4, #0]
 801109a:	2000      	movs	r0, #0
 801109c:	e7dc      	b.n	8011058 <__ssputs_r+0x58>
 801109e:	462a      	mov	r2, r5
 80110a0:	f000 f9d7 	bl	8011452 <_realloc_r>
 80110a4:	4606      	mov	r6, r0
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d1e2      	bne.n	8011070 <__ssputs_r+0x70>
 80110aa:	6921      	ldr	r1, [r4, #16]
 80110ac:	4650      	mov	r0, sl
 80110ae:	f7ff feff 	bl	8010eb0 <_free_r>
 80110b2:	e7c8      	b.n	8011046 <__ssputs_r+0x46>

080110b4 <_svfiprintf_r>:
 80110b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b8:	461d      	mov	r5, r3
 80110ba:	898b      	ldrh	r3, [r1, #12]
 80110bc:	061f      	lsls	r7, r3, #24
 80110be:	b09d      	sub	sp, #116	; 0x74
 80110c0:	4680      	mov	r8, r0
 80110c2:	460c      	mov	r4, r1
 80110c4:	4616      	mov	r6, r2
 80110c6:	d50f      	bpl.n	80110e8 <_svfiprintf_r+0x34>
 80110c8:	690b      	ldr	r3, [r1, #16]
 80110ca:	b96b      	cbnz	r3, 80110e8 <_svfiprintf_r+0x34>
 80110cc:	2140      	movs	r1, #64	; 0x40
 80110ce:	f7ff ff3d 	bl	8010f4c <_malloc_r>
 80110d2:	6020      	str	r0, [r4, #0]
 80110d4:	6120      	str	r0, [r4, #16]
 80110d6:	b928      	cbnz	r0, 80110e4 <_svfiprintf_r+0x30>
 80110d8:	230c      	movs	r3, #12
 80110da:	f8c8 3000 	str.w	r3, [r8]
 80110de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110e2:	e0c8      	b.n	8011276 <_svfiprintf_r+0x1c2>
 80110e4:	2340      	movs	r3, #64	; 0x40
 80110e6:	6163      	str	r3, [r4, #20]
 80110e8:	2300      	movs	r3, #0
 80110ea:	9309      	str	r3, [sp, #36]	; 0x24
 80110ec:	2320      	movs	r3, #32
 80110ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110f2:	2330      	movs	r3, #48	; 0x30
 80110f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110f8:	9503      	str	r5, [sp, #12]
 80110fa:	f04f 0b01 	mov.w	fp, #1
 80110fe:	4637      	mov	r7, r6
 8011100:	463d      	mov	r5, r7
 8011102:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011106:	b10b      	cbz	r3, 801110c <_svfiprintf_r+0x58>
 8011108:	2b25      	cmp	r3, #37	; 0x25
 801110a:	d13e      	bne.n	801118a <_svfiprintf_r+0xd6>
 801110c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011110:	d00b      	beq.n	801112a <_svfiprintf_r+0x76>
 8011112:	4653      	mov	r3, sl
 8011114:	4632      	mov	r2, r6
 8011116:	4621      	mov	r1, r4
 8011118:	4640      	mov	r0, r8
 801111a:	f7ff ff71 	bl	8011000 <__ssputs_r>
 801111e:	3001      	adds	r0, #1
 8011120:	f000 80a4 	beq.w	801126c <_svfiprintf_r+0x1b8>
 8011124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011126:	4453      	add	r3, sl
 8011128:	9309      	str	r3, [sp, #36]	; 0x24
 801112a:	783b      	ldrb	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	f000 809d 	beq.w	801126c <_svfiprintf_r+0x1b8>
 8011132:	2300      	movs	r3, #0
 8011134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801113c:	9304      	str	r3, [sp, #16]
 801113e:	9307      	str	r3, [sp, #28]
 8011140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011144:	931a      	str	r3, [sp, #104]	; 0x68
 8011146:	462f      	mov	r7, r5
 8011148:	2205      	movs	r2, #5
 801114a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801114e:	4850      	ldr	r0, [pc, #320]	; (8011290 <_svfiprintf_r+0x1dc>)
 8011150:	f7ef f86e 	bl	8000230 <memchr>
 8011154:	9b04      	ldr	r3, [sp, #16]
 8011156:	b9d0      	cbnz	r0, 801118e <_svfiprintf_r+0xda>
 8011158:	06d9      	lsls	r1, r3, #27
 801115a:	bf44      	itt	mi
 801115c:	2220      	movmi	r2, #32
 801115e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011162:	071a      	lsls	r2, r3, #28
 8011164:	bf44      	itt	mi
 8011166:	222b      	movmi	r2, #43	; 0x2b
 8011168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801116c:	782a      	ldrb	r2, [r5, #0]
 801116e:	2a2a      	cmp	r2, #42	; 0x2a
 8011170:	d015      	beq.n	801119e <_svfiprintf_r+0xea>
 8011172:	9a07      	ldr	r2, [sp, #28]
 8011174:	462f      	mov	r7, r5
 8011176:	2000      	movs	r0, #0
 8011178:	250a      	movs	r5, #10
 801117a:	4639      	mov	r1, r7
 801117c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011180:	3b30      	subs	r3, #48	; 0x30
 8011182:	2b09      	cmp	r3, #9
 8011184:	d94d      	bls.n	8011222 <_svfiprintf_r+0x16e>
 8011186:	b1b8      	cbz	r0, 80111b8 <_svfiprintf_r+0x104>
 8011188:	e00f      	b.n	80111aa <_svfiprintf_r+0xf6>
 801118a:	462f      	mov	r7, r5
 801118c:	e7b8      	b.n	8011100 <_svfiprintf_r+0x4c>
 801118e:	4a40      	ldr	r2, [pc, #256]	; (8011290 <_svfiprintf_r+0x1dc>)
 8011190:	1a80      	subs	r0, r0, r2
 8011192:	fa0b f000 	lsl.w	r0, fp, r0
 8011196:	4318      	orrs	r0, r3
 8011198:	9004      	str	r0, [sp, #16]
 801119a:	463d      	mov	r5, r7
 801119c:	e7d3      	b.n	8011146 <_svfiprintf_r+0x92>
 801119e:	9a03      	ldr	r2, [sp, #12]
 80111a0:	1d11      	adds	r1, r2, #4
 80111a2:	6812      	ldr	r2, [r2, #0]
 80111a4:	9103      	str	r1, [sp, #12]
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	db01      	blt.n	80111ae <_svfiprintf_r+0xfa>
 80111aa:	9207      	str	r2, [sp, #28]
 80111ac:	e004      	b.n	80111b8 <_svfiprintf_r+0x104>
 80111ae:	4252      	negs	r2, r2
 80111b0:	f043 0302 	orr.w	r3, r3, #2
 80111b4:	9207      	str	r2, [sp, #28]
 80111b6:	9304      	str	r3, [sp, #16]
 80111b8:	783b      	ldrb	r3, [r7, #0]
 80111ba:	2b2e      	cmp	r3, #46	; 0x2e
 80111bc:	d10c      	bne.n	80111d8 <_svfiprintf_r+0x124>
 80111be:	787b      	ldrb	r3, [r7, #1]
 80111c0:	2b2a      	cmp	r3, #42	; 0x2a
 80111c2:	d133      	bne.n	801122c <_svfiprintf_r+0x178>
 80111c4:	9b03      	ldr	r3, [sp, #12]
 80111c6:	1d1a      	adds	r2, r3, #4
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	9203      	str	r2, [sp, #12]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	bfb8      	it	lt
 80111d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80111d4:	3702      	adds	r7, #2
 80111d6:	9305      	str	r3, [sp, #20]
 80111d8:	4d2e      	ldr	r5, [pc, #184]	; (8011294 <_svfiprintf_r+0x1e0>)
 80111da:	7839      	ldrb	r1, [r7, #0]
 80111dc:	2203      	movs	r2, #3
 80111de:	4628      	mov	r0, r5
 80111e0:	f7ef f826 	bl	8000230 <memchr>
 80111e4:	b138      	cbz	r0, 80111f6 <_svfiprintf_r+0x142>
 80111e6:	2340      	movs	r3, #64	; 0x40
 80111e8:	1b40      	subs	r0, r0, r5
 80111ea:	fa03 f000 	lsl.w	r0, r3, r0
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	4303      	orrs	r3, r0
 80111f2:	3701      	adds	r7, #1
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	7839      	ldrb	r1, [r7, #0]
 80111f8:	4827      	ldr	r0, [pc, #156]	; (8011298 <_svfiprintf_r+0x1e4>)
 80111fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111fe:	2206      	movs	r2, #6
 8011200:	1c7e      	adds	r6, r7, #1
 8011202:	f7ef f815 	bl	8000230 <memchr>
 8011206:	2800      	cmp	r0, #0
 8011208:	d038      	beq.n	801127c <_svfiprintf_r+0x1c8>
 801120a:	4b24      	ldr	r3, [pc, #144]	; (801129c <_svfiprintf_r+0x1e8>)
 801120c:	bb13      	cbnz	r3, 8011254 <_svfiprintf_r+0x1a0>
 801120e:	9b03      	ldr	r3, [sp, #12]
 8011210:	3307      	adds	r3, #7
 8011212:	f023 0307 	bic.w	r3, r3, #7
 8011216:	3308      	adds	r3, #8
 8011218:	9303      	str	r3, [sp, #12]
 801121a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801121c:	444b      	add	r3, r9
 801121e:	9309      	str	r3, [sp, #36]	; 0x24
 8011220:	e76d      	b.n	80110fe <_svfiprintf_r+0x4a>
 8011222:	fb05 3202 	mla	r2, r5, r2, r3
 8011226:	2001      	movs	r0, #1
 8011228:	460f      	mov	r7, r1
 801122a:	e7a6      	b.n	801117a <_svfiprintf_r+0xc6>
 801122c:	2300      	movs	r3, #0
 801122e:	3701      	adds	r7, #1
 8011230:	9305      	str	r3, [sp, #20]
 8011232:	4619      	mov	r1, r3
 8011234:	250a      	movs	r5, #10
 8011236:	4638      	mov	r0, r7
 8011238:	f810 2b01 	ldrb.w	r2, [r0], #1
 801123c:	3a30      	subs	r2, #48	; 0x30
 801123e:	2a09      	cmp	r2, #9
 8011240:	d903      	bls.n	801124a <_svfiprintf_r+0x196>
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0c8      	beq.n	80111d8 <_svfiprintf_r+0x124>
 8011246:	9105      	str	r1, [sp, #20]
 8011248:	e7c6      	b.n	80111d8 <_svfiprintf_r+0x124>
 801124a:	fb05 2101 	mla	r1, r5, r1, r2
 801124e:	2301      	movs	r3, #1
 8011250:	4607      	mov	r7, r0
 8011252:	e7f0      	b.n	8011236 <_svfiprintf_r+0x182>
 8011254:	ab03      	add	r3, sp, #12
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	4622      	mov	r2, r4
 801125a:	4b11      	ldr	r3, [pc, #68]	; (80112a0 <_svfiprintf_r+0x1ec>)
 801125c:	a904      	add	r1, sp, #16
 801125e:	4640      	mov	r0, r8
 8011260:	f7fd fdc8 	bl	800edf4 <_printf_float>
 8011264:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011268:	4681      	mov	r9, r0
 801126a:	d1d6      	bne.n	801121a <_svfiprintf_r+0x166>
 801126c:	89a3      	ldrh	r3, [r4, #12]
 801126e:	065b      	lsls	r3, r3, #25
 8011270:	f53f af35 	bmi.w	80110de <_svfiprintf_r+0x2a>
 8011274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011276:	b01d      	add	sp, #116	; 0x74
 8011278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127c:	ab03      	add	r3, sp, #12
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	4622      	mov	r2, r4
 8011282:	4b07      	ldr	r3, [pc, #28]	; (80112a0 <_svfiprintf_r+0x1ec>)
 8011284:	a904      	add	r1, sp, #16
 8011286:	4640      	mov	r0, r8
 8011288:	f7fe f86a 	bl	800f360 <_printf_i>
 801128c:	e7ea      	b.n	8011264 <_svfiprintf_r+0x1b0>
 801128e:	bf00      	nop
 8011290:	08013e34 	.word	0x08013e34
 8011294:	08013e3a 	.word	0x08013e3a
 8011298:	08013e3e 	.word	0x08013e3e
 801129c:	0800edf5 	.word	0x0800edf5
 80112a0:	08011001 	.word	0x08011001

080112a4 <_sbrk_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4c06      	ldr	r4, [pc, #24]	; (80112c0 <_sbrk_r+0x1c>)
 80112a8:	2300      	movs	r3, #0
 80112aa:	4605      	mov	r5, r0
 80112ac:	4608      	mov	r0, r1
 80112ae:	6023      	str	r3, [r4, #0]
 80112b0:	f7f6 f9a2 	bl	80075f8 <_sbrk>
 80112b4:	1c43      	adds	r3, r0, #1
 80112b6:	d102      	bne.n	80112be <_sbrk_r+0x1a>
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	b103      	cbz	r3, 80112be <_sbrk_r+0x1a>
 80112bc:	602b      	str	r3, [r5, #0]
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	2000294c 	.word	0x2000294c

080112c4 <__sread>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	460c      	mov	r4, r1
 80112c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112cc:	f000 f8e8 	bl	80114a0 <_read_r>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	bfab      	itete	ge
 80112d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80112d6:	89a3      	ldrhlt	r3, [r4, #12]
 80112d8:	181b      	addge	r3, r3, r0
 80112da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80112de:	bfac      	ite	ge
 80112e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80112e2:	81a3      	strhlt	r3, [r4, #12]
 80112e4:	bd10      	pop	{r4, pc}

080112e6 <__swrite>:
 80112e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ea:	461f      	mov	r7, r3
 80112ec:	898b      	ldrh	r3, [r1, #12]
 80112ee:	05db      	lsls	r3, r3, #23
 80112f0:	4605      	mov	r5, r0
 80112f2:	460c      	mov	r4, r1
 80112f4:	4616      	mov	r6, r2
 80112f6:	d505      	bpl.n	8011304 <__swrite+0x1e>
 80112f8:	2302      	movs	r3, #2
 80112fa:	2200      	movs	r2, #0
 80112fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011300:	f000 f868 	bl	80113d4 <_lseek_r>
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801130a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801130e:	81a3      	strh	r3, [r4, #12]
 8011310:	4632      	mov	r2, r6
 8011312:	463b      	mov	r3, r7
 8011314:	4628      	mov	r0, r5
 8011316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801131a:	f000 b817 	b.w	801134c <_write_r>

0801131e <__sseek>:
 801131e:	b510      	push	{r4, lr}
 8011320:	460c      	mov	r4, r1
 8011322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011326:	f000 f855 	bl	80113d4 <_lseek_r>
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	bf15      	itete	ne
 8011330:	6560      	strne	r0, [r4, #84]	; 0x54
 8011332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801133a:	81a3      	strheq	r3, [r4, #12]
 801133c:	bf18      	it	ne
 801133e:	81a3      	strhne	r3, [r4, #12]
 8011340:	bd10      	pop	{r4, pc}

08011342 <__sclose>:
 8011342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011346:	f000 b813 	b.w	8011370 <_close_r>
	...

0801134c <_write_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4c07      	ldr	r4, [pc, #28]	; (801136c <_write_r+0x20>)
 8011350:	4605      	mov	r5, r0
 8011352:	4608      	mov	r0, r1
 8011354:	4611      	mov	r1, r2
 8011356:	2200      	movs	r2, #0
 8011358:	6022      	str	r2, [r4, #0]
 801135a:	461a      	mov	r2, r3
 801135c:	f7f5 fe2b 	bl	8006fb6 <_write>
 8011360:	1c43      	adds	r3, r0, #1
 8011362:	d102      	bne.n	801136a <_write_r+0x1e>
 8011364:	6823      	ldr	r3, [r4, #0]
 8011366:	b103      	cbz	r3, 801136a <_write_r+0x1e>
 8011368:	602b      	str	r3, [r5, #0]
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	2000294c 	.word	0x2000294c

08011370 <_close_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4c06      	ldr	r4, [pc, #24]	; (801138c <_close_r+0x1c>)
 8011374:	2300      	movs	r3, #0
 8011376:	4605      	mov	r5, r0
 8011378:	4608      	mov	r0, r1
 801137a:	6023      	str	r3, [r4, #0]
 801137c:	f7f6 f907 	bl	800758e <_close>
 8011380:	1c43      	adds	r3, r0, #1
 8011382:	d102      	bne.n	801138a <_close_r+0x1a>
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	b103      	cbz	r3, 801138a <_close_r+0x1a>
 8011388:	602b      	str	r3, [r5, #0]
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	2000294c 	.word	0x2000294c

08011390 <_fstat_r>:
 8011390:	b538      	push	{r3, r4, r5, lr}
 8011392:	4c07      	ldr	r4, [pc, #28]	; (80113b0 <_fstat_r+0x20>)
 8011394:	2300      	movs	r3, #0
 8011396:	4605      	mov	r5, r0
 8011398:	4608      	mov	r0, r1
 801139a:	4611      	mov	r1, r2
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	f7f6 f902 	bl	80075a6 <_fstat>
 80113a2:	1c43      	adds	r3, r0, #1
 80113a4:	d102      	bne.n	80113ac <_fstat_r+0x1c>
 80113a6:	6823      	ldr	r3, [r4, #0]
 80113a8:	b103      	cbz	r3, 80113ac <_fstat_r+0x1c>
 80113aa:	602b      	str	r3, [r5, #0]
 80113ac:	bd38      	pop	{r3, r4, r5, pc}
 80113ae:	bf00      	nop
 80113b0:	2000294c 	.word	0x2000294c

080113b4 <_isatty_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4c06      	ldr	r4, [pc, #24]	; (80113d0 <_isatty_r+0x1c>)
 80113b8:	2300      	movs	r3, #0
 80113ba:	4605      	mov	r5, r0
 80113bc:	4608      	mov	r0, r1
 80113be:	6023      	str	r3, [r4, #0]
 80113c0:	f7f6 f901 	bl	80075c6 <_isatty>
 80113c4:	1c43      	adds	r3, r0, #1
 80113c6:	d102      	bne.n	80113ce <_isatty_r+0x1a>
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	b103      	cbz	r3, 80113ce <_isatty_r+0x1a>
 80113cc:	602b      	str	r3, [r5, #0]
 80113ce:	bd38      	pop	{r3, r4, r5, pc}
 80113d0:	2000294c 	.word	0x2000294c

080113d4 <_lseek_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4c07      	ldr	r4, [pc, #28]	; (80113f4 <_lseek_r+0x20>)
 80113d8:	4605      	mov	r5, r0
 80113da:	4608      	mov	r0, r1
 80113dc:	4611      	mov	r1, r2
 80113de:	2200      	movs	r2, #0
 80113e0:	6022      	str	r2, [r4, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	f7f6 f8fa 	bl	80075dc <_lseek>
 80113e8:	1c43      	adds	r3, r0, #1
 80113ea:	d102      	bne.n	80113f2 <_lseek_r+0x1e>
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	b103      	cbz	r3, 80113f2 <_lseek_r+0x1e>
 80113f0:	602b      	str	r3, [r5, #0]
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	2000294c 	.word	0x2000294c

080113f8 <__ascii_mbtowc>:
 80113f8:	b082      	sub	sp, #8
 80113fa:	b901      	cbnz	r1, 80113fe <__ascii_mbtowc+0x6>
 80113fc:	a901      	add	r1, sp, #4
 80113fe:	b142      	cbz	r2, 8011412 <__ascii_mbtowc+0x1a>
 8011400:	b14b      	cbz	r3, 8011416 <__ascii_mbtowc+0x1e>
 8011402:	7813      	ldrb	r3, [r2, #0]
 8011404:	600b      	str	r3, [r1, #0]
 8011406:	7812      	ldrb	r2, [r2, #0]
 8011408:	1c10      	adds	r0, r2, #0
 801140a:	bf18      	it	ne
 801140c:	2001      	movne	r0, #1
 801140e:	b002      	add	sp, #8
 8011410:	4770      	bx	lr
 8011412:	4610      	mov	r0, r2
 8011414:	e7fb      	b.n	801140e <__ascii_mbtowc+0x16>
 8011416:	f06f 0001 	mvn.w	r0, #1
 801141a:	e7f8      	b.n	801140e <__ascii_mbtowc+0x16>

0801141c <memmove>:
 801141c:	4288      	cmp	r0, r1
 801141e:	b510      	push	{r4, lr}
 8011420:	eb01 0302 	add.w	r3, r1, r2
 8011424:	d807      	bhi.n	8011436 <memmove+0x1a>
 8011426:	1e42      	subs	r2, r0, #1
 8011428:	4299      	cmp	r1, r3
 801142a:	d00a      	beq.n	8011442 <memmove+0x26>
 801142c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011430:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011434:	e7f8      	b.n	8011428 <memmove+0xc>
 8011436:	4283      	cmp	r3, r0
 8011438:	d9f5      	bls.n	8011426 <memmove+0xa>
 801143a:	1881      	adds	r1, r0, r2
 801143c:	1ad2      	subs	r2, r2, r3
 801143e:	42d3      	cmn	r3, r2
 8011440:	d100      	bne.n	8011444 <memmove+0x28>
 8011442:	bd10      	pop	{r4, pc}
 8011444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011448:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801144c:	e7f7      	b.n	801143e <memmove+0x22>

0801144e <__malloc_lock>:
 801144e:	4770      	bx	lr

08011450 <__malloc_unlock>:
 8011450:	4770      	bx	lr

08011452 <_realloc_r>:
 8011452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011454:	4607      	mov	r7, r0
 8011456:	4614      	mov	r4, r2
 8011458:	460e      	mov	r6, r1
 801145a:	b921      	cbnz	r1, 8011466 <_realloc_r+0x14>
 801145c:	4611      	mov	r1, r2
 801145e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011462:	f7ff bd73 	b.w	8010f4c <_malloc_r>
 8011466:	b922      	cbnz	r2, 8011472 <_realloc_r+0x20>
 8011468:	f7ff fd22 	bl	8010eb0 <_free_r>
 801146c:	4625      	mov	r5, r4
 801146e:	4628      	mov	r0, r5
 8011470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011472:	f000 f834 	bl	80114de <_malloc_usable_size_r>
 8011476:	42a0      	cmp	r0, r4
 8011478:	d20f      	bcs.n	801149a <_realloc_r+0x48>
 801147a:	4621      	mov	r1, r4
 801147c:	4638      	mov	r0, r7
 801147e:	f7ff fd65 	bl	8010f4c <_malloc_r>
 8011482:	4605      	mov	r5, r0
 8011484:	2800      	cmp	r0, #0
 8011486:	d0f2      	beq.n	801146e <_realloc_r+0x1c>
 8011488:	4631      	mov	r1, r6
 801148a:	4622      	mov	r2, r4
 801148c:	f7ff fa1c 	bl	80108c8 <memcpy>
 8011490:	4631      	mov	r1, r6
 8011492:	4638      	mov	r0, r7
 8011494:	f7ff fd0c 	bl	8010eb0 <_free_r>
 8011498:	e7e9      	b.n	801146e <_realloc_r+0x1c>
 801149a:	4635      	mov	r5, r6
 801149c:	e7e7      	b.n	801146e <_realloc_r+0x1c>
	...

080114a0 <_read_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	4c07      	ldr	r4, [pc, #28]	; (80114c0 <_read_r+0x20>)
 80114a4:	4605      	mov	r5, r0
 80114a6:	4608      	mov	r0, r1
 80114a8:	4611      	mov	r1, r2
 80114aa:	2200      	movs	r2, #0
 80114ac:	6022      	str	r2, [r4, #0]
 80114ae:	461a      	mov	r2, r3
 80114b0:	f7f6 f850 	bl	8007554 <_read>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d102      	bne.n	80114be <_read_r+0x1e>
 80114b8:	6823      	ldr	r3, [r4, #0]
 80114ba:	b103      	cbz	r3, 80114be <_read_r+0x1e>
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	bd38      	pop	{r3, r4, r5, pc}
 80114c0:	2000294c 	.word	0x2000294c

080114c4 <__ascii_wctomb>:
 80114c4:	b149      	cbz	r1, 80114da <__ascii_wctomb+0x16>
 80114c6:	2aff      	cmp	r2, #255	; 0xff
 80114c8:	bf85      	ittet	hi
 80114ca:	238a      	movhi	r3, #138	; 0x8a
 80114cc:	6003      	strhi	r3, [r0, #0]
 80114ce:	700a      	strbls	r2, [r1, #0]
 80114d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80114d4:	bf98      	it	ls
 80114d6:	2001      	movls	r0, #1
 80114d8:	4770      	bx	lr
 80114da:	4608      	mov	r0, r1
 80114dc:	4770      	bx	lr

080114de <_malloc_usable_size_r>:
 80114de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114e2:	1f18      	subs	r0, r3, #4
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	bfbc      	itt	lt
 80114e8:	580b      	ldrlt	r3, [r1, r0]
 80114ea:	18c0      	addlt	r0, r0, r3
 80114ec:	4770      	bx	lr
	...

080114f0 <log10>:
 80114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114f2:	ed2d 8b02 	vpush	{d8}
 80114f6:	b08b      	sub	sp, #44	; 0x2c
 80114f8:	ec55 4b10 	vmov	r4, r5, d0
 80114fc:	f000 f9e8 	bl	80118d0 <__ieee754_log10>
 8011500:	4b36      	ldr	r3, [pc, #216]	; (80115dc <log10+0xec>)
 8011502:	eeb0 8a40 	vmov.f32	s16, s0
 8011506:	eef0 8a60 	vmov.f32	s17, s1
 801150a:	f993 6000 	ldrsb.w	r6, [r3]
 801150e:	1c73      	adds	r3, r6, #1
 8011510:	d05c      	beq.n	80115cc <log10+0xdc>
 8011512:	4622      	mov	r2, r4
 8011514:	462b      	mov	r3, r5
 8011516:	4620      	mov	r0, r4
 8011518:	4629      	mov	r1, r5
 801151a:	f7ef fb2f 	bl	8000b7c <__aeabi_dcmpun>
 801151e:	4607      	mov	r7, r0
 8011520:	2800      	cmp	r0, #0
 8011522:	d153      	bne.n	80115cc <log10+0xdc>
 8011524:	2200      	movs	r2, #0
 8011526:	2300      	movs	r3, #0
 8011528:	4620      	mov	r0, r4
 801152a:	4629      	mov	r1, r5
 801152c:	f7ef fb08 	bl	8000b40 <__aeabi_dcmple>
 8011530:	2800      	cmp	r0, #0
 8011532:	d04b      	beq.n	80115cc <log10+0xdc>
 8011534:	4b2a      	ldr	r3, [pc, #168]	; (80115e0 <log10+0xf0>)
 8011536:	9301      	str	r3, [sp, #4]
 8011538:	9708      	str	r7, [sp, #32]
 801153a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801153e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011542:	b9a6      	cbnz	r6, 801156e <log10+0x7e>
 8011544:	4b27      	ldr	r3, [pc, #156]	; (80115e4 <log10+0xf4>)
 8011546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801154a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801154e:	4620      	mov	r0, r4
 8011550:	2200      	movs	r2, #0
 8011552:	2300      	movs	r3, #0
 8011554:	4629      	mov	r1, r5
 8011556:	f7ef fadf 	bl	8000b18 <__aeabi_dcmpeq>
 801155a:	bb40      	cbnz	r0, 80115ae <log10+0xbe>
 801155c:	2301      	movs	r3, #1
 801155e:	2e02      	cmp	r6, #2
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	d119      	bne.n	8011598 <log10+0xa8>
 8011564:	f7fd fb80 	bl	800ec68 <__errno>
 8011568:	2321      	movs	r3, #33	; 0x21
 801156a:	6003      	str	r3, [r0, #0]
 801156c:	e019      	b.n	80115a2 <log10+0xb2>
 801156e:	4b1e      	ldr	r3, [pc, #120]	; (80115e8 <log10+0xf8>)
 8011570:	2200      	movs	r2, #0
 8011572:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011576:	4620      	mov	r0, r4
 8011578:	2200      	movs	r2, #0
 801157a:	2300      	movs	r3, #0
 801157c:	4629      	mov	r1, r5
 801157e:	f7ef facb 	bl	8000b18 <__aeabi_dcmpeq>
 8011582:	2800      	cmp	r0, #0
 8011584:	d0ea      	beq.n	801155c <log10+0x6c>
 8011586:	2302      	movs	r3, #2
 8011588:	429e      	cmp	r6, r3
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	d111      	bne.n	80115b2 <log10+0xc2>
 801158e:	f7fd fb6b 	bl	800ec68 <__errno>
 8011592:	2322      	movs	r3, #34	; 0x22
 8011594:	6003      	str	r3, [r0, #0]
 8011596:	e011      	b.n	80115bc <log10+0xcc>
 8011598:	4668      	mov	r0, sp
 801159a:	f000 fff4 	bl	8012586 <matherr>
 801159e:	2800      	cmp	r0, #0
 80115a0:	d0e0      	beq.n	8011564 <log10+0x74>
 80115a2:	4812      	ldr	r0, [pc, #72]	; (80115ec <log10+0xfc>)
 80115a4:	f000 fff4 	bl	8012590 <nan>
 80115a8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80115ac:	e006      	b.n	80115bc <log10+0xcc>
 80115ae:	2302      	movs	r3, #2
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	4668      	mov	r0, sp
 80115b4:	f000 ffe7 	bl	8012586 <matherr>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	d0e8      	beq.n	801158e <log10+0x9e>
 80115bc:	9b08      	ldr	r3, [sp, #32]
 80115be:	b11b      	cbz	r3, 80115c8 <log10+0xd8>
 80115c0:	f7fd fb52 	bl	800ec68 <__errno>
 80115c4:	9b08      	ldr	r3, [sp, #32]
 80115c6:	6003      	str	r3, [r0, #0]
 80115c8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80115cc:	eeb0 0a48 	vmov.f32	s0, s16
 80115d0:	eef0 0a68 	vmov.f32	s1, s17
 80115d4:	b00b      	add	sp, #44	; 0x2c
 80115d6:	ecbd 8b02 	vpop	{d8}
 80115da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115dc:	20001e7c 	.word	0x20001e7c
 80115e0:	08013f50 	.word	0x08013f50
 80115e4:	c7efffff 	.word	0xc7efffff
 80115e8:	fff00000 	.word	0xfff00000
 80115ec:	08013e39 	.word	0x08013e39

080115f0 <pow>:
 80115f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f4:	ed2d 8b04 	vpush	{d8-d9}
 80115f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80118cc <pow+0x2dc>
 80115fc:	b08d      	sub	sp, #52	; 0x34
 80115fe:	ec57 6b10 	vmov	r6, r7, d0
 8011602:	ec55 4b11 	vmov	r4, r5, d1
 8011606:	f000 f9ef 	bl	80119e8 <__ieee754_pow>
 801160a:	f999 3000 	ldrsb.w	r3, [r9]
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	3301      	adds	r3, #1
 8011612:	eeb0 8a40 	vmov.f32	s16, s0
 8011616:	eef0 8a60 	vmov.f32	s17, s1
 801161a:	46c8      	mov	r8, r9
 801161c:	d05f      	beq.n	80116de <pow+0xee>
 801161e:	4622      	mov	r2, r4
 8011620:	462b      	mov	r3, r5
 8011622:	4620      	mov	r0, r4
 8011624:	4629      	mov	r1, r5
 8011626:	f7ef faa9 	bl	8000b7c <__aeabi_dcmpun>
 801162a:	4683      	mov	fp, r0
 801162c:	2800      	cmp	r0, #0
 801162e:	d156      	bne.n	80116de <pow+0xee>
 8011630:	4632      	mov	r2, r6
 8011632:	463b      	mov	r3, r7
 8011634:	4630      	mov	r0, r6
 8011636:	4639      	mov	r1, r7
 8011638:	f7ef faa0 	bl	8000b7c <__aeabi_dcmpun>
 801163c:	9001      	str	r0, [sp, #4]
 801163e:	b1e8      	cbz	r0, 801167c <pow+0x8c>
 8011640:	2200      	movs	r2, #0
 8011642:	2300      	movs	r3, #0
 8011644:	4620      	mov	r0, r4
 8011646:	4629      	mov	r1, r5
 8011648:	f7ef fa66 	bl	8000b18 <__aeabi_dcmpeq>
 801164c:	2800      	cmp	r0, #0
 801164e:	d046      	beq.n	80116de <pow+0xee>
 8011650:	2301      	movs	r3, #1
 8011652:	9302      	str	r3, [sp, #8]
 8011654:	4b96      	ldr	r3, [pc, #600]	; (80118b0 <pow+0x2c0>)
 8011656:	9303      	str	r3, [sp, #12]
 8011658:	4b96      	ldr	r3, [pc, #600]	; (80118b4 <pow+0x2c4>)
 801165a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801165e:	2200      	movs	r2, #0
 8011660:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011664:	9b00      	ldr	r3, [sp, #0]
 8011666:	2b02      	cmp	r3, #2
 8011668:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801166c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011670:	d033      	beq.n	80116da <pow+0xea>
 8011672:	a802      	add	r0, sp, #8
 8011674:	f000 ff87 	bl	8012586 <matherr>
 8011678:	bb48      	cbnz	r0, 80116ce <pow+0xde>
 801167a:	e05d      	b.n	8011738 <pow+0x148>
 801167c:	f04f 0a00 	mov.w	sl, #0
 8011680:	f04f 0b00 	mov.w	fp, #0
 8011684:	4652      	mov	r2, sl
 8011686:	465b      	mov	r3, fp
 8011688:	4630      	mov	r0, r6
 801168a:	4639      	mov	r1, r7
 801168c:	f7ef fa44 	bl	8000b18 <__aeabi_dcmpeq>
 8011690:	ec4b ab19 	vmov	d9, sl, fp
 8011694:	2800      	cmp	r0, #0
 8011696:	d054      	beq.n	8011742 <pow+0x152>
 8011698:	4652      	mov	r2, sl
 801169a:	465b      	mov	r3, fp
 801169c:	4620      	mov	r0, r4
 801169e:	4629      	mov	r1, r5
 80116a0:	f7ef fa3a 	bl	8000b18 <__aeabi_dcmpeq>
 80116a4:	4680      	mov	r8, r0
 80116a6:	b318      	cbz	r0, 80116f0 <pow+0x100>
 80116a8:	2301      	movs	r3, #1
 80116aa:	9302      	str	r3, [sp, #8]
 80116ac:	4b80      	ldr	r3, [pc, #512]	; (80118b0 <pow+0x2c0>)
 80116ae:	9303      	str	r3, [sp, #12]
 80116b0:	9b01      	ldr	r3, [sp, #4]
 80116b2:	930a      	str	r3, [sp, #40]	; 0x28
 80116b4:	9b00      	ldr	r3, [sp, #0]
 80116b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80116ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80116be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d0d5      	beq.n	8011672 <pow+0x82>
 80116c6:	4b7b      	ldr	r3, [pc, #492]	; (80118b4 <pow+0x2c4>)
 80116c8:	2200      	movs	r2, #0
 80116ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80116ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116d0:	b11b      	cbz	r3, 80116da <pow+0xea>
 80116d2:	f7fd fac9 	bl	800ec68 <__errno>
 80116d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116d8:	6003      	str	r3, [r0, #0]
 80116da:	ed9d 8b08 	vldr	d8, [sp, #32]
 80116de:	eeb0 0a48 	vmov.f32	s0, s16
 80116e2:	eef0 0a68 	vmov.f32	s1, s17
 80116e6:	b00d      	add	sp, #52	; 0x34
 80116e8:	ecbd 8b04 	vpop	{d8-d9}
 80116ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f0:	ec45 4b10 	vmov	d0, r4, r5
 80116f4:	f000 ff3f 	bl	8012576 <finite>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d0f0      	beq.n	80116de <pow+0xee>
 80116fc:	4652      	mov	r2, sl
 80116fe:	465b      	mov	r3, fp
 8011700:	4620      	mov	r0, r4
 8011702:	4629      	mov	r1, r5
 8011704:	f7ef fa12 	bl	8000b2c <__aeabi_dcmplt>
 8011708:	2800      	cmp	r0, #0
 801170a:	d0e8      	beq.n	80116de <pow+0xee>
 801170c:	2301      	movs	r3, #1
 801170e:	9302      	str	r3, [sp, #8]
 8011710:	4b67      	ldr	r3, [pc, #412]	; (80118b0 <pow+0x2c0>)
 8011712:	9303      	str	r3, [sp, #12]
 8011714:	f999 3000 	ldrsb.w	r3, [r9]
 8011718:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801171c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011720:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011724:	b913      	cbnz	r3, 801172c <pow+0x13c>
 8011726:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801172a:	e7a2      	b.n	8011672 <pow+0x82>
 801172c:	4962      	ldr	r1, [pc, #392]	; (80118b8 <pow+0x2c8>)
 801172e:	2000      	movs	r0, #0
 8011730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011734:	2b02      	cmp	r3, #2
 8011736:	d19c      	bne.n	8011672 <pow+0x82>
 8011738:	f7fd fa96 	bl	800ec68 <__errno>
 801173c:	2321      	movs	r3, #33	; 0x21
 801173e:	6003      	str	r3, [r0, #0]
 8011740:	e7c5      	b.n	80116ce <pow+0xde>
 8011742:	eeb0 0a48 	vmov.f32	s0, s16
 8011746:	eef0 0a68 	vmov.f32	s1, s17
 801174a:	f000 ff14 	bl	8012576 <finite>
 801174e:	9000      	str	r0, [sp, #0]
 8011750:	2800      	cmp	r0, #0
 8011752:	f040 8081 	bne.w	8011858 <pow+0x268>
 8011756:	ec47 6b10 	vmov	d0, r6, r7
 801175a:	f000 ff0c 	bl	8012576 <finite>
 801175e:	2800      	cmp	r0, #0
 8011760:	d07a      	beq.n	8011858 <pow+0x268>
 8011762:	ec45 4b10 	vmov	d0, r4, r5
 8011766:	f000 ff06 	bl	8012576 <finite>
 801176a:	2800      	cmp	r0, #0
 801176c:	d074      	beq.n	8011858 <pow+0x268>
 801176e:	ec53 2b18 	vmov	r2, r3, d8
 8011772:	ee18 0a10 	vmov	r0, s16
 8011776:	4619      	mov	r1, r3
 8011778:	f7ef fa00 	bl	8000b7c <__aeabi_dcmpun>
 801177c:	f999 9000 	ldrsb.w	r9, [r9]
 8011780:	4b4b      	ldr	r3, [pc, #300]	; (80118b0 <pow+0x2c0>)
 8011782:	b1b0      	cbz	r0, 80117b2 <pow+0x1c2>
 8011784:	2201      	movs	r2, #1
 8011786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801178a:	9b00      	ldr	r3, [sp, #0]
 801178c:	930a      	str	r3, [sp, #40]	; 0x28
 801178e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011792:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011796:	f1b9 0f00 	cmp.w	r9, #0
 801179a:	d0c4      	beq.n	8011726 <pow+0x136>
 801179c:	4652      	mov	r2, sl
 801179e:	465b      	mov	r3, fp
 80117a0:	4650      	mov	r0, sl
 80117a2:	4659      	mov	r1, fp
 80117a4:	f7ef f87a 	bl	800089c <__aeabi_ddiv>
 80117a8:	f1b9 0f02 	cmp.w	r9, #2
 80117ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80117b0:	e7c1      	b.n	8011736 <pow+0x146>
 80117b2:	2203      	movs	r2, #3
 80117b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117b8:	900a      	str	r0, [sp, #40]	; 0x28
 80117ba:	4629      	mov	r1, r5
 80117bc:	4620      	mov	r0, r4
 80117be:	2200      	movs	r2, #0
 80117c0:	4b3e      	ldr	r3, [pc, #248]	; (80118bc <pow+0x2cc>)
 80117c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80117c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80117ca:	f7ee ff3d 	bl	8000648 <__aeabi_dmul>
 80117ce:	4604      	mov	r4, r0
 80117d0:	460d      	mov	r5, r1
 80117d2:	f1b9 0f00 	cmp.w	r9, #0
 80117d6:	d124      	bne.n	8011822 <pow+0x232>
 80117d8:	4b39      	ldr	r3, [pc, #228]	; (80118c0 <pow+0x2d0>)
 80117da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80117de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117e2:	4630      	mov	r0, r6
 80117e4:	4652      	mov	r2, sl
 80117e6:	465b      	mov	r3, fp
 80117e8:	4639      	mov	r1, r7
 80117ea:	f7ef f99f 	bl	8000b2c <__aeabi_dcmplt>
 80117ee:	2800      	cmp	r0, #0
 80117f0:	d056      	beq.n	80118a0 <pow+0x2b0>
 80117f2:	ec45 4b10 	vmov	d0, r4, r5
 80117f6:	f000 fed3 	bl	80125a0 <rint>
 80117fa:	4622      	mov	r2, r4
 80117fc:	462b      	mov	r3, r5
 80117fe:	ec51 0b10 	vmov	r0, r1, d0
 8011802:	f7ef f989 	bl	8000b18 <__aeabi_dcmpeq>
 8011806:	b920      	cbnz	r0, 8011812 <pow+0x222>
 8011808:	4b2e      	ldr	r3, [pc, #184]	; (80118c4 <pow+0x2d4>)
 801180a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801180e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011812:	f998 3000 	ldrsb.w	r3, [r8]
 8011816:	2b02      	cmp	r3, #2
 8011818:	d142      	bne.n	80118a0 <pow+0x2b0>
 801181a:	f7fd fa25 	bl	800ec68 <__errno>
 801181e:	2322      	movs	r3, #34	; 0x22
 8011820:	e78d      	b.n	801173e <pow+0x14e>
 8011822:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <pow+0x2d8>)
 8011824:	2200      	movs	r2, #0
 8011826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801182a:	4630      	mov	r0, r6
 801182c:	4652      	mov	r2, sl
 801182e:	465b      	mov	r3, fp
 8011830:	4639      	mov	r1, r7
 8011832:	f7ef f97b 	bl	8000b2c <__aeabi_dcmplt>
 8011836:	2800      	cmp	r0, #0
 8011838:	d0eb      	beq.n	8011812 <pow+0x222>
 801183a:	ec45 4b10 	vmov	d0, r4, r5
 801183e:	f000 feaf 	bl	80125a0 <rint>
 8011842:	4622      	mov	r2, r4
 8011844:	462b      	mov	r3, r5
 8011846:	ec51 0b10 	vmov	r0, r1, d0
 801184a:	f7ef f965 	bl	8000b18 <__aeabi_dcmpeq>
 801184e:	2800      	cmp	r0, #0
 8011850:	d1df      	bne.n	8011812 <pow+0x222>
 8011852:	2200      	movs	r2, #0
 8011854:	4b18      	ldr	r3, [pc, #96]	; (80118b8 <pow+0x2c8>)
 8011856:	e7da      	b.n	801180e <pow+0x21e>
 8011858:	2200      	movs	r2, #0
 801185a:	2300      	movs	r3, #0
 801185c:	ec51 0b18 	vmov	r0, r1, d8
 8011860:	f7ef f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8011864:	2800      	cmp	r0, #0
 8011866:	f43f af3a 	beq.w	80116de <pow+0xee>
 801186a:	ec47 6b10 	vmov	d0, r6, r7
 801186e:	f000 fe82 	bl	8012576 <finite>
 8011872:	2800      	cmp	r0, #0
 8011874:	f43f af33 	beq.w	80116de <pow+0xee>
 8011878:	ec45 4b10 	vmov	d0, r4, r5
 801187c:	f000 fe7b 	bl	8012576 <finite>
 8011880:	2800      	cmp	r0, #0
 8011882:	f43f af2c 	beq.w	80116de <pow+0xee>
 8011886:	2304      	movs	r3, #4
 8011888:	9302      	str	r3, [sp, #8]
 801188a:	4b09      	ldr	r3, [pc, #36]	; (80118b0 <pow+0x2c0>)
 801188c:	9303      	str	r3, [sp, #12]
 801188e:	2300      	movs	r3, #0
 8011890:	930a      	str	r3, [sp, #40]	; 0x28
 8011892:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011896:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801189a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801189e:	e7b8      	b.n	8011812 <pow+0x222>
 80118a0:	a802      	add	r0, sp, #8
 80118a2:	f000 fe70 	bl	8012586 <matherr>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	f47f af11 	bne.w	80116ce <pow+0xde>
 80118ac:	e7b5      	b.n	801181a <pow+0x22a>
 80118ae:	bf00      	nop
 80118b0:	08013f56 	.word	0x08013f56
 80118b4:	3ff00000 	.word	0x3ff00000
 80118b8:	fff00000 	.word	0xfff00000
 80118bc:	3fe00000 	.word	0x3fe00000
 80118c0:	47efffff 	.word	0x47efffff
 80118c4:	c7efffff 	.word	0xc7efffff
 80118c8:	7ff00000 	.word	0x7ff00000
 80118cc:	20001e7c 	.word	0x20001e7c

080118d0 <__ieee754_log10>:
 80118d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118d4:	ec55 4b10 	vmov	r4, r5, d0
 80118d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80118dc:	462b      	mov	r3, r5
 80118de:	da2f      	bge.n	8011940 <__ieee754_log10+0x70>
 80118e0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80118e4:	4322      	orrs	r2, r4
 80118e6:	d10a      	bne.n	80118fe <__ieee754_log10+0x2e>
 80118e8:	493b      	ldr	r1, [pc, #236]	; (80119d8 <__ieee754_log10+0x108>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	2300      	movs	r3, #0
 80118ee:	2000      	movs	r0, #0
 80118f0:	f7ee ffd4 	bl	800089c <__aeabi_ddiv>
 80118f4:	ec41 0b10 	vmov	d0, r0, r1
 80118f8:	b003      	add	sp, #12
 80118fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118fe:	2d00      	cmp	r5, #0
 8011900:	da08      	bge.n	8011914 <__ieee754_log10+0x44>
 8011902:	ee10 2a10 	vmov	r2, s0
 8011906:	4620      	mov	r0, r4
 8011908:	4629      	mov	r1, r5
 801190a:	f7ee fce5 	bl	80002d8 <__aeabi_dsub>
 801190e:	2200      	movs	r2, #0
 8011910:	2300      	movs	r3, #0
 8011912:	e7ed      	b.n	80118f0 <__ieee754_log10+0x20>
 8011914:	2200      	movs	r2, #0
 8011916:	4b31      	ldr	r3, [pc, #196]	; (80119dc <__ieee754_log10+0x10c>)
 8011918:	4629      	mov	r1, r5
 801191a:	ee10 0a10 	vmov	r0, s0
 801191e:	f7ee fe93 	bl	8000648 <__aeabi_dmul>
 8011922:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011926:	4604      	mov	r4, r0
 8011928:	460d      	mov	r5, r1
 801192a:	460b      	mov	r3, r1
 801192c:	492c      	ldr	r1, [pc, #176]	; (80119e0 <__ieee754_log10+0x110>)
 801192e:	428b      	cmp	r3, r1
 8011930:	dd08      	ble.n	8011944 <__ieee754_log10+0x74>
 8011932:	4622      	mov	r2, r4
 8011934:	462b      	mov	r3, r5
 8011936:	4620      	mov	r0, r4
 8011938:	4629      	mov	r1, r5
 801193a:	f7ee fccf 	bl	80002dc <__adddf3>
 801193e:	e7d9      	b.n	80118f4 <__ieee754_log10+0x24>
 8011940:	2200      	movs	r2, #0
 8011942:	e7f3      	b.n	801192c <__ieee754_log10+0x5c>
 8011944:	1518      	asrs	r0, r3, #20
 8011946:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801194a:	4410      	add	r0, r2
 801194c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011950:	4448      	add	r0, r9
 8011952:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011956:	f7ee fe0d 	bl	8000574 <__aeabi_i2d>
 801195a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801195e:	3303      	adds	r3, #3
 8011960:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011964:	ec45 4b10 	vmov	d0, r4, r5
 8011968:	4606      	mov	r6, r0
 801196a:	460f      	mov	r7, r1
 801196c:	f000 ff14 	bl	8012798 <__ieee754_log>
 8011970:	a313      	add	r3, pc, #76	; (adr r3, 80119c0 <__ieee754_log10+0xf0>)
 8011972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011976:	4630      	mov	r0, r6
 8011978:	4639      	mov	r1, r7
 801197a:	ed8d 0b00 	vstr	d0, [sp]
 801197e:	f7ee fe63 	bl	8000648 <__aeabi_dmul>
 8011982:	ed9d 0b00 	vldr	d0, [sp]
 8011986:	4604      	mov	r4, r0
 8011988:	460d      	mov	r5, r1
 801198a:	a30f      	add	r3, pc, #60	; (adr r3, 80119c8 <__ieee754_log10+0xf8>)
 801198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011990:	ec51 0b10 	vmov	r0, r1, d0
 8011994:	f7ee fe58 	bl	8000648 <__aeabi_dmul>
 8011998:	4602      	mov	r2, r0
 801199a:	460b      	mov	r3, r1
 801199c:	4620      	mov	r0, r4
 801199e:	4629      	mov	r1, r5
 80119a0:	f7ee fc9c 	bl	80002dc <__adddf3>
 80119a4:	a30a      	add	r3, pc, #40	; (adr r3, 80119d0 <__ieee754_log10+0x100>)
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	4604      	mov	r4, r0
 80119ac:	460d      	mov	r5, r1
 80119ae:	4630      	mov	r0, r6
 80119b0:	4639      	mov	r1, r7
 80119b2:	f7ee fe49 	bl	8000648 <__aeabi_dmul>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	4620      	mov	r0, r4
 80119bc:	4629      	mov	r1, r5
 80119be:	e7bc      	b.n	801193a <__ieee754_log10+0x6a>
 80119c0:	11f12b36 	.word	0x11f12b36
 80119c4:	3d59fef3 	.word	0x3d59fef3
 80119c8:	1526e50e 	.word	0x1526e50e
 80119cc:	3fdbcb7b 	.word	0x3fdbcb7b
 80119d0:	509f6000 	.word	0x509f6000
 80119d4:	3fd34413 	.word	0x3fd34413
 80119d8:	c3500000 	.word	0xc3500000
 80119dc:	43500000 	.word	0x43500000
 80119e0:	7fefffff 	.word	0x7fefffff
 80119e4:	00000000 	.word	0x00000000

080119e8 <__ieee754_pow>:
 80119e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ec:	b091      	sub	sp, #68	; 0x44
 80119ee:	ed8d 1b00 	vstr	d1, [sp]
 80119f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80119f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80119fa:	ea58 0302 	orrs.w	r3, r8, r2
 80119fe:	ec57 6b10 	vmov	r6, r7, d0
 8011a02:	f000 84be 	beq.w	8012382 <__ieee754_pow+0x99a>
 8011a06:	4b7a      	ldr	r3, [pc, #488]	; (8011bf0 <__ieee754_pow+0x208>)
 8011a08:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011a0c:	429c      	cmp	r4, r3
 8011a0e:	463d      	mov	r5, r7
 8011a10:	ee10 aa10 	vmov	sl, s0
 8011a14:	dc09      	bgt.n	8011a2a <__ieee754_pow+0x42>
 8011a16:	d103      	bne.n	8011a20 <__ieee754_pow+0x38>
 8011a18:	b93e      	cbnz	r6, 8011a2a <__ieee754_pow+0x42>
 8011a1a:	45a0      	cmp	r8, r4
 8011a1c:	dc0d      	bgt.n	8011a3a <__ieee754_pow+0x52>
 8011a1e:	e001      	b.n	8011a24 <__ieee754_pow+0x3c>
 8011a20:	4598      	cmp	r8, r3
 8011a22:	dc02      	bgt.n	8011a2a <__ieee754_pow+0x42>
 8011a24:	4598      	cmp	r8, r3
 8011a26:	d10e      	bne.n	8011a46 <__ieee754_pow+0x5e>
 8011a28:	b16a      	cbz	r2, 8011a46 <__ieee754_pow+0x5e>
 8011a2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011a2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a32:	ea54 030a 	orrs.w	r3, r4, sl
 8011a36:	f000 84a4 	beq.w	8012382 <__ieee754_pow+0x99a>
 8011a3a:	486e      	ldr	r0, [pc, #440]	; (8011bf4 <__ieee754_pow+0x20c>)
 8011a3c:	b011      	add	sp, #68	; 0x44
 8011a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a42:	f000 bda5 	b.w	8012590 <nan>
 8011a46:	2d00      	cmp	r5, #0
 8011a48:	da53      	bge.n	8011af2 <__ieee754_pow+0x10a>
 8011a4a:	4b6b      	ldr	r3, [pc, #428]	; (8011bf8 <__ieee754_pow+0x210>)
 8011a4c:	4598      	cmp	r8, r3
 8011a4e:	dc4d      	bgt.n	8011aec <__ieee754_pow+0x104>
 8011a50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011a54:	4598      	cmp	r8, r3
 8011a56:	dd4c      	ble.n	8011af2 <__ieee754_pow+0x10a>
 8011a58:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011a5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a60:	2b14      	cmp	r3, #20
 8011a62:	dd26      	ble.n	8011ab2 <__ieee754_pow+0xca>
 8011a64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011a68:	fa22 f103 	lsr.w	r1, r2, r3
 8011a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d13e      	bne.n	8011af2 <__ieee754_pow+0x10a>
 8011a74:	f001 0101 	and.w	r1, r1, #1
 8011a78:	f1c1 0b02 	rsb	fp, r1, #2
 8011a7c:	2a00      	cmp	r2, #0
 8011a7e:	d15b      	bne.n	8011b38 <__ieee754_pow+0x150>
 8011a80:	4b5b      	ldr	r3, [pc, #364]	; (8011bf0 <__ieee754_pow+0x208>)
 8011a82:	4598      	cmp	r8, r3
 8011a84:	d124      	bne.n	8011ad0 <__ieee754_pow+0xe8>
 8011a86:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011a8a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011a8e:	ea53 030a 	orrs.w	r3, r3, sl
 8011a92:	f000 8476 	beq.w	8012382 <__ieee754_pow+0x99a>
 8011a96:	4b59      	ldr	r3, [pc, #356]	; (8011bfc <__ieee754_pow+0x214>)
 8011a98:	429c      	cmp	r4, r3
 8011a9a:	dd2d      	ble.n	8011af8 <__ieee754_pow+0x110>
 8011a9c:	f1b9 0f00 	cmp.w	r9, #0
 8011aa0:	f280 8473 	bge.w	801238a <__ieee754_pow+0x9a2>
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	ec41 0b10 	vmov	d0, r0, r1
 8011aac:	b011      	add	sp, #68	; 0x44
 8011aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab2:	2a00      	cmp	r2, #0
 8011ab4:	d13e      	bne.n	8011b34 <__ieee754_pow+0x14c>
 8011ab6:	f1c3 0314 	rsb	r3, r3, #20
 8011aba:	fa48 f103 	asr.w	r1, r8, r3
 8011abe:	fa01 f303 	lsl.w	r3, r1, r3
 8011ac2:	4543      	cmp	r3, r8
 8011ac4:	f040 8469 	bne.w	801239a <__ieee754_pow+0x9b2>
 8011ac8:	f001 0101 	and.w	r1, r1, #1
 8011acc:	f1c1 0b02 	rsb	fp, r1, #2
 8011ad0:	4b4b      	ldr	r3, [pc, #300]	; (8011c00 <__ieee754_pow+0x218>)
 8011ad2:	4598      	cmp	r8, r3
 8011ad4:	d118      	bne.n	8011b08 <__ieee754_pow+0x120>
 8011ad6:	f1b9 0f00 	cmp.w	r9, #0
 8011ada:	f280 845a 	bge.w	8012392 <__ieee754_pow+0x9aa>
 8011ade:	4948      	ldr	r1, [pc, #288]	; (8011c00 <__ieee754_pow+0x218>)
 8011ae0:	4632      	mov	r2, r6
 8011ae2:	463b      	mov	r3, r7
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f7ee fed9 	bl	800089c <__aeabi_ddiv>
 8011aea:	e7dd      	b.n	8011aa8 <__ieee754_pow+0xc0>
 8011aec:	f04f 0b02 	mov.w	fp, #2
 8011af0:	e7c4      	b.n	8011a7c <__ieee754_pow+0x94>
 8011af2:	f04f 0b00 	mov.w	fp, #0
 8011af6:	e7c1      	b.n	8011a7c <__ieee754_pow+0x94>
 8011af8:	f1b9 0f00 	cmp.w	r9, #0
 8011afc:	dad2      	bge.n	8011aa4 <__ieee754_pow+0xbc>
 8011afe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011b02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b06:	e7cf      	b.n	8011aa8 <__ieee754_pow+0xc0>
 8011b08:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011b0c:	d106      	bne.n	8011b1c <__ieee754_pow+0x134>
 8011b0e:	4632      	mov	r2, r6
 8011b10:	463b      	mov	r3, r7
 8011b12:	4610      	mov	r0, r2
 8011b14:	4619      	mov	r1, r3
 8011b16:	f7ee fd97 	bl	8000648 <__aeabi_dmul>
 8011b1a:	e7c5      	b.n	8011aa8 <__ieee754_pow+0xc0>
 8011b1c:	4b39      	ldr	r3, [pc, #228]	; (8011c04 <__ieee754_pow+0x21c>)
 8011b1e:	4599      	cmp	r9, r3
 8011b20:	d10a      	bne.n	8011b38 <__ieee754_pow+0x150>
 8011b22:	2d00      	cmp	r5, #0
 8011b24:	db08      	blt.n	8011b38 <__ieee754_pow+0x150>
 8011b26:	ec47 6b10 	vmov	d0, r6, r7
 8011b2a:	b011      	add	sp, #68	; 0x44
 8011b2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b30:	f000 bc68 	b.w	8012404 <__ieee754_sqrt>
 8011b34:	f04f 0b00 	mov.w	fp, #0
 8011b38:	ec47 6b10 	vmov	d0, r6, r7
 8011b3c:	f000 fd12 	bl	8012564 <fabs>
 8011b40:	ec51 0b10 	vmov	r0, r1, d0
 8011b44:	f1ba 0f00 	cmp.w	sl, #0
 8011b48:	d127      	bne.n	8011b9a <__ieee754_pow+0x1b2>
 8011b4a:	b124      	cbz	r4, 8011b56 <__ieee754_pow+0x16e>
 8011b4c:	4b2c      	ldr	r3, [pc, #176]	; (8011c00 <__ieee754_pow+0x218>)
 8011b4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d121      	bne.n	8011b9a <__ieee754_pow+0x1b2>
 8011b56:	f1b9 0f00 	cmp.w	r9, #0
 8011b5a:	da05      	bge.n	8011b68 <__ieee754_pow+0x180>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	460b      	mov	r3, r1
 8011b60:	2000      	movs	r0, #0
 8011b62:	4927      	ldr	r1, [pc, #156]	; (8011c00 <__ieee754_pow+0x218>)
 8011b64:	f7ee fe9a 	bl	800089c <__aeabi_ddiv>
 8011b68:	2d00      	cmp	r5, #0
 8011b6a:	da9d      	bge.n	8011aa8 <__ieee754_pow+0xc0>
 8011b6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b74:	ea54 030b 	orrs.w	r3, r4, fp
 8011b78:	d108      	bne.n	8011b8c <__ieee754_pow+0x1a4>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	4610      	mov	r0, r2
 8011b80:	4619      	mov	r1, r3
 8011b82:	f7ee fba9 	bl	80002d8 <__aeabi_dsub>
 8011b86:	4602      	mov	r2, r0
 8011b88:	460b      	mov	r3, r1
 8011b8a:	e7ac      	b.n	8011ae6 <__ieee754_pow+0xfe>
 8011b8c:	f1bb 0f01 	cmp.w	fp, #1
 8011b90:	d18a      	bne.n	8011aa8 <__ieee754_pow+0xc0>
 8011b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b96:	4619      	mov	r1, r3
 8011b98:	e786      	b.n	8011aa8 <__ieee754_pow+0xc0>
 8011b9a:	0fed      	lsrs	r5, r5, #31
 8011b9c:	1e6b      	subs	r3, r5, #1
 8011b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8011ba0:	ea5b 0303 	orrs.w	r3, fp, r3
 8011ba4:	d102      	bne.n	8011bac <__ieee754_pow+0x1c4>
 8011ba6:	4632      	mov	r2, r6
 8011ba8:	463b      	mov	r3, r7
 8011baa:	e7e8      	b.n	8011b7e <__ieee754_pow+0x196>
 8011bac:	4b16      	ldr	r3, [pc, #88]	; (8011c08 <__ieee754_pow+0x220>)
 8011bae:	4598      	cmp	r8, r3
 8011bb0:	f340 80fe 	ble.w	8011db0 <__ieee754_pow+0x3c8>
 8011bb4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011bb8:	4598      	cmp	r8, r3
 8011bba:	dd0a      	ble.n	8011bd2 <__ieee754_pow+0x1ea>
 8011bbc:	4b0f      	ldr	r3, [pc, #60]	; (8011bfc <__ieee754_pow+0x214>)
 8011bbe:	429c      	cmp	r4, r3
 8011bc0:	dc0d      	bgt.n	8011bde <__ieee754_pow+0x1f6>
 8011bc2:	f1b9 0f00 	cmp.w	r9, #0
 8011bc6:	f6bf af6d 	bge.w	8011aa4 <__ieee754_pow+0xbc>
 8011bca:	a307      	add	r3, pc, #28	; (adr r3, 8011be8 <__ieee754_pow+0x200>)
 8011bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd0:	e79f      	b.n	8011b12 <__ieee754_pow+0x12a>
 8011bd2:	4b0e      	ldr	r3, [pc, #56]	; (8011c0c <__ieee754_pow+0x224>)
 8011bd4:	429c      	cmp	r4, r3
 8011bd6:	ddf4      	ble.n	8011bc2 <__ieee754_pow+0x1da>
 8011bd8:	4b09      	ldr	r3, [pc, #36]	; (8011c00 <__ieee754_pow+0x218>)
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	dd18      	ble.n	8011c10 <__ieee754_pow+0x228>
 8011bde:	f1b9 0f00 	cmp.w	r9, #0
 8011be2:	dcf2      	bgt.n	8011bca <__ieee754_pow+0x1e2>
 8011be4:	e75e      	b.n	8011aa4 <__ieee754_pow+0xbc>
 8011be6:	bf00      	nop
 8011be8:	8800759c 	.word	0x8800759c
 8011bec:	7e37e43c 	.word	0x7e37e43c
 8011bf0:	7ff00000 	.word	0x7ff00000
 8011bf4:	08013e39 	.word	0x08013e39
 8011bf8:	433fffff 	.word	0x433fffff
 8011bfc:	3fefffff 	.word	0x3fefffff
 8011c00:	3ff00000 	.word	0x3ff00000
 8011c04:	3fe00000 	.word	0x3fe00000
 8011c08:	41e00000 	.word	0x41e00000
 8011c0c:	3feffffe 	.word	0x3feffffe
 8011c10:	2200      	movs	r2, #0
 8011c12:	4b63      	ldr	r3, [pc, #396]	; (8011da0 <__ieee754_pow+0x3b8>)
 8011c14:	f7ee fb60 	bl	80002d8 <__aeabi_dsub>
 8011c18:	a355      	add	r3, pc, #340	; (adr r3, 8011d70 <__ieee754_pow+0x388>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	4604      	mov	r4, r0
 8011c20:	460d      	mov	r5, r1
 8011c22:	f7ee fd11 	bl	8000648 <__aeabi_dmul>
 8011c26:	a354      	add	r3, pc, #336	; (adr r3, 8011d78 <__ieee754_pow+0x390>)
 8011c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	460f      	mov	r7, r1
 8011c30:	4620      	mov	r0, r4
 8011c32:	4629      	mov	r1, r5
 8011c34:	f7ee fd08 	bl	8000648 <__aeabi_dmul>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c3e:	4b59      	ldr	r3, [pc, #356]	; (8011da4 <__ieee754_pow+0x3bc>)
 8011c40:	4620      	mov	r0, r4
 8011c42:	4629      	mov	r1, r5
 8011c44:	f7ee fd00 	bl	8000648 <__aeabi_dmul>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	a14c      	add	r1, pc, #304	; (adr r1, 8011d80 <__ieee754_pow+0x398>)
 8011c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c52:	f7ee fb41 	bl	80002d8 <__aeabi_dsub>
 8011c56:	4622      	mov	r2, r4
 8011c58:	462b      	mov	r3, r5
 8011c5a:	f7ee fcf5 	bl	8000648 <__aeabi_dmul>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	460b      	mov	r3, r1
 8011c62:	2000      	movs	r0, #0
 8011c64:	4950      	ldr	r1, [pc, #320]	; (8011da8 <__ieee754_pow+0x3c0>)
 8011c66:	f7ee fb37 	bl	80002d8 <__aeabi_dsub>
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	4680      	mov	r8, r0
 8011c70:	4689      	mov	r9, r1
 8011c72:	4620      	mov	r0, r4
 8011c74:	4629      	mov	r1, r5
 8011c76:	f7ee fce7 	bl	8000648 <__aeabi_dmul>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4640      	mov	r0, r8
 8011c80:	4649      	mov	r1, r9
 8011c82:	f7ee fce1 	bl	8000648 <__aeabi_dmul>
 8011c86:	a340      	add	r3, pc, #256	; (adr r3, 8011d88 <__ieee754_pow+0x3a0>)
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	f7ee fcdc 	bl	8000648 <__aeabi_dmul>
 8011c90:	4602      	mov	r2, r0
 8011c92:	460b      	mov	r3, r1
 8011c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c98:	f7ee fb1e 	bl	80002d8 <__aeabi_dsub>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	460d      	mov	r5, r1
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	f7ee fb18 	bl	80002dc <__adddf3>
 8011cac:	2000      	movs	r0, #0
 8011cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cb2:	4632      	mov	r2, r6
 8011cb4:	463b      	mov	r3, r7
 8011cb6:	f7ee fb0f 	bl	80002d8 <__aeabi_dsub>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	f7ee fb09 	bl	80002d8 <__aeabi_dsub>
 8011cc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011cc8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	4606      	mov	r6, r0
 8011cd0:	460f      	mov	r7, r1
 8011cd2:	f040 81eb 	bne.w	80120ac <__ieee754_pow+0x6c4>
 8011cd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011d90 <__ieee754_pow+0x3a8>
 8011cda:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011cde:	2400      	movs	r4, #0
 8011ce0:	4622      	mov	r2, r4
 8011ce2:	462b      	mov	r3, r5
 8011ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cec:	f7ee faf4 	bl	80002d8 <__aeabi_dsub>
 8011cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cf4:	f7ee fca8 	bl	8000648 <__aeabi_dmul>
 8011cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cfc:	4680      	mov	r8, r0
 8011cfe:	4689      	mov	r9, r1
 8011d00:	4630      	mov	r0, r6
 8011d02:	4639      	mov	r1, r7
 8011d04:	f7ee fca0 	bl	8000648 <__aeabi_dmul>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4640      	mov	r0, r8
 8011d0e:	4649      	mov	r1, r9
 8011d10:	f7ee fae4 	bl	80002dc <__adddf3>
 8011d14:	4622      	mov	r2, r4
 8011d16:	462b      	mov	r3, r5
 8011d18:	4680      	mov	r8, r0
 8011d1a:	4689      	mov	r9, r1
 8011d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d20:	f7ee fc92 	bl	8000648 <__aeabi_dmul>
 8011d24:	460b      	mov	r3, r1
 8011d26:	4604      	mov	r4, r0
 8011d28:	460d      	mov	r5, r1
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	4649      	mov	r1, r9
 8011d2e:	4640      	mov	r0, r8
 8011d30:	e9cd 4500 	strd	r4, r5, [sp]
 8011d34:	f7ee fad2 	bl	80002dc <__adddf3>
 8011d38:	4b1c      	ldr	r3, [pc, #112]	; (8011dac <__ieee754_pow+0x3c4>)
 8011d3a:	4299      	cmp	r1, r3
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	468b      	mov	fp, r1
 8011d42:	f340 82f7 	ble.w	8012334 <__ieee754_pow+0x94c>
 8011d46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011d4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011d4e:	4303      	orrs	r3, r0
 8011d50:	f000 81ea 	beq.w	8012128 <__ieee754_pow+0x740>
 8011d54:	a310      	add	r3, pc, #64	; (adr r3, 8011d98 <__ieee754_pow+0x3b0>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d5e:	f7ee fc73 	bl	8000648 <__aeabi_dmul>
 8011d62:	a30d      	add	r3, pc, #52	; (adr r3, 8011d98 <__ieee754_pow+0x3b0>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	e6d5      	b.n	8011b16 <__ieee754_pow+0x12e>
 8011d6a:	bf00      	nop
 8011d6c:	f3af 8000 	nop.w
 8011d70:	60000000 	.word	0x60000000
 8011d74:	3ff71547 	.word	0x3ff71547
 8011d78:	f85ddf44 	.word	0xf85ddf44
 8011d7c:	3e54ae0b 	.word	0x3e54ae0b
 8011d80:	55555555 	.word	0x55555555
 8011d84:	3fd55555 	.word	0x3fd55555
 8011d88:	652b82fe 	.word	0x652b82fe
 8011d8c:	3ff71547 	.word	0x3ff71547
 8011d90:	00000000 	.word	0x00000000
 8011d94:	bff00000 	.word	0xbff00000
 8011d98:	8800759c 	.word	0x8800759c
 8011d9c:	7e37e43c 	.word	0x7e37e43c
 8011da0:	3ff00000 	.word	0x3ff00000
 8011da4:	3fd00000 	.word	0x3fd00000
 8011da8:	3fe00000 	.word	0x3fe00000
 8011dac:	408fffff 	.word	0x408fffff
 8011db0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011db4:	f04f 0200 	mov.w	r2, #0
 8011db8:	da05      	bge.n	8011dc6 <__ieee754_pow+0x3de>
 8011dba:	4bd3      	ldr	r3, [pc, #844]	; (8012108 <__ieee754_pow+0x720>)
 8011dbc:	f7ee fc44 	bl	8000648 <__aeabi_dmul>
 8011dc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	1523      	asrs	r3, r4, #20
 8011dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011dcc:	4413      	add	r3, r2
 8011dce:	9309      	str	r3, [sp, #36]	; 0x24
 8011dd0:	4bce      	ldr	r3, [pc, #824]	; (801210c <__ieee754_pow+0x724>)
 8011dd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011dd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011dda:	429c      	cmp	r4, r3
 8011ddc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011de0:	dd08      	ble.n	8011df4 <__ieee754_pow+0x40c>
 8011de2:	4bcb      	ldr	r3, [pc, #812]	; (8012110 <__ieee754_pow+0x728>)
 8011de4:	429c      	cmp	r4, r3
 8011de6:	f340 815e 	ble.w	80120a6 <__ieee754_pow+0x6be>
 8011dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dec:	3301      	adds	r3, #1
 8011dee:	9309      	str	r3, [sp, #36]	; 0x24
 8011df0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011df4:	f04f 0a00 	mov.w	sl, #0
 8011df8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8011dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e00:	4bc4      	ldr	r3, [pc, #784]	; (8012114 <__ieee754_pow+0x72c>)
 8011e02:	4413      	add	r3, r2
 8011e04:	ed93 7b00 	vldr	d7, [r3]
 8011e08:	4629      	mov	r1, r5
 8011e0a:	ec53 2b17 	vmov	r2, r3, d7
 8011e0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011e12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011e16:	f7ee fa5f 	bl	80002d8 <__aeabi_dsub>
 8011e1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011e1e:	4606      	mov	r6, r0
 8011e20:	460f      	mov	r7, r1
 8011e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e26:	f7ee fa59 	bl	80002dc <__adddf3>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	2000      	movs	r0, #0
 8011e30:	49b9      	ldr	r1, [pc, #740]	; (8012118 <__ieee754_pow+0x730>)
 8011e32:	f7ee fd33 	bl	800089c <__aeabi_ddiv>
 8011e36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	4630      	mov	r0, r6
 8011e40:	4639      	mov	r1, r7
 8011e42:	f7ee fc01 	bl	8000648 <__aeabi_dmul>
 8011e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011e52:	2300      	movs	r3, #0
 8011e54:	9302      	str	r3, [sp, #8]
 8011e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011e5a:	106d      	asrs	r5, r5, #1
 8011e5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011e60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011e64:	2200      	movs	r2, #0
 8011e66:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011e6a:	4640      	mov	r0, r8
 8011e6c:	4649      	mov	r1, r9
 8011e6e:	4614      	mov	r4, r2
 8011e70:	461d      	mov	r5, r3
 8011e72:	f7ee fbe9 	bl	8000648 <__aeabi_dmul>
 8011e76:	4602      	mov	r2, r0
 8011e78:	460b      	mov	r3, r1
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	4639      	mov	r1, r7
 8011e7e:	f7ee fa2b 	bl	80002d8 <__aeabi_dsub>
 8011e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011e86:	4606      	mov	r6, r0
 8011e88:	460f      	mov	r7, r1
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	f7ee fa23 	bl	80002d8 <__aeabi_dsub>
 8011e92:	4602      	mov	r2, r0
 8011e94:	460b      	mov	r3, r1
 8011e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011e9a:	f7ee fa1d 	bl	80002d8 <__aeabi_dsub>
 8011e9e:	4642      	mov	r2, r8
 8011ea0:	464b      	mov	r3, r9
 8011ea2:	f7ee fbd1 	bl	8000648 <__aeabi_dmul>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	f7ee fa13 	bl	80002d8 <__aeabi_dsub>
 8011eb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011eb6:	f7ee fbc7 	bl	8000648 <__aeabi_dmul>
 8011eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011ec2:	4610      	mov	r0, r2
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	f7ee fbbf 	bl	8000648 <__aeabi_dmul>
 8011eca:	a37b      	add	r3, pc, #492	; (adr r3, 80120b8 <__ieee754_pow+0x6d0>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	460d      	mov	r5, r1
 8011ed4:	f7ee fbb8 	bl	8000648 <__aeabi_dmul>
 8011ed8:	a379      	add	r3, pc, #484	; (adr r3, 80120c0 <__ieee754_pow+0x6d8>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee f9fd 	bl	80002dc <__adddf3>
 8011ee2:	4622      	mov	r2, r4
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	f7ee fbaf 	bl	8000648 <__aeabi_dmul>
 8011eea:	a377      	add	r3, pc, #476	; (adr r3, 80120c8 <__ieee754_pow+0x6e0>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	f7ee f9f4 	bl	80002dc <__adddf3>
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	462b      	mov	r3, r5
 8011ef8:	f7ee fba6 	bl	8000648 <__aeabi_dmul>
 8011efc:	a374      	add	r3, pc, #464	; (adr r3, 80120d0 <__ieee754_pow+0x6e8>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7ee f9eb 	bl	80002dc <__adddf3>
 8011f06:	4622      	mov	r2, r4
 8011f08:	462b      	mov	r3, r5
 8011f0a:	f7ee fb9d 	bl	8000648 <__aeabi_dmul>
 8011f0e:	a372      	add	r3, pc, #456	; (adr r3, 80120d8 <__ieee754_pow+0x6f0>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7ee f9e2 	bl	80002dc <__adddf3>
 8011f18:	4622      	mov	r2, r4
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f7ee fb94 	bl	8000648 <__aeabi_dmul>
 8011f20:	a36f      	add	r3, pc, #444	; (adr r3, 80120e0 <__ieee754_pow+0x6f8>)
 8011f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f26:	f7ee f9d9 	bl	80002dc <__adddf3>
 8011f2a:	4622      	mov	r2, r4
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	460f      	mov	r7, r1
 8011f30:	462b      	mov	r3, r5
 8011f32:	4620      	mov	r0, r4
 8011f34:	4629      	mov	r1, r5
 8011f36:	f7ee fb87 	bl	8000648 <__aeabi_dmul>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee fb81 	bl	8000648 <__aeabi_dmul>
 8011f46:	4642      	mov	r2, r8
 8011f48:	4604      	mov	r4, r0
 8011f4a:	460d      	mov	r5, r1
 8011f4c:	464b      	mov	r3, r9
 8011f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f52:	f7ee f9c3 	bl	80002dc <__adddf3>
 8011f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f5a:	f7ee fb75 	bl	8000648 <__aeabi_dmul>
 8011f5e:	4622      	mov	r2, r4
 8011f60:	462b      	mov	r3, r5
 8011f62:	f7ee f9bb 	bl	80002dc <__adddf3>
 8011f66:	4642      	mov	r2, r8
 8011f68:	4606      	mov	r6, r0
 8011f6a:	460f      	mov	r7, r1
 8011f6c:	464b      	mov	r3, r9
 8011f6e:	4640      	mov	r0, r8
 8011f70:	4649      	mov	r1, r9
 8011f72:	f7ee fb69 	bl	8000648 <__aeabi_dmul>
 8011f76:	2200      	movs	r2, #0
 8011f78:	4b68      	ldr	r3, [pc, #416]	; (801211c <__ieee754_pow+0x734>)
 8011f7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011f7e:	f7ee f9ad 	bl	80002dc <__adddf3>
 8011f82:	4632      	mov	r2, r6
 8011f84:	463b      	mov	r3, r7
 8011f86:	f7ee f9a9 	bl	80002dc <__adddf3>
 8011f8a:	9802      	ldr	r0, [sp, #8]
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	4604      	mov	r4, r0
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	4640      	mov	r0, r8
 8011f96:	4649      	mov	r1, r9
 8011f98:	f7ee fb56 	bl	8000648 <__aeabi_dmul>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	4680      	mov	r8, r0
 8011fa0:	4689      	mov	r9, r1
 8011fa2:	4b5e      	ldr	r3, [pc, #376]	; (801211c <__ieee754_pow+0x734>)
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	f7ee f996 	bl	80002d8 <__aeabi_dsub>
 8011fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011fb0:	f7ee f992 	bl	80002d8 <__aeabi_dsub>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4630      	mov	r0, r6
 8011fba:	4639      	mov	r1, r7
 8011fbc:	f7ee f98c 	bl	80002d8 <__aeabi_dsub>
 8011fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fc4:	f7ee fb40 	bl	8000648 <__aeabi_dmul>
 8011fc8:	4622      	mov	r2, r4
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460f      	mov	r7, r1
 8011fce:	462b      	mov	r3, r5
 8011fd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fd4:	f7ee fb38 	bl	8000648 <__aeabi_dmul>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4630      	mov	r0, r6
 8011fde:	4639      	mov	r1, r7
 8011fe0:	f7ee f97c 	bl	80002dc <__adddf3>
 8011fe4:	4606      	mov	r6, r0
 8011fe6:	460f      	mov	r7, r1
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4640      	mov	r0, r8
 8011fee:	4649      	mov	r1, r9
 8011ff0:	f7ee f974 	bl	80002dc <__adddf3>
 8011ff4:	9802      	ldr	r0, [sp, #8]
 8011ff6:	a33c      	add	r3, pc, #240	; (adr r3, 80120e8 <__ieee754_pow+0x700>)
 8011ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	460d      	mov	r5, r1
 8012000:	f7ee fb22 	bl	8000648 <__aeabi_dmul>
 8012004:	4642      	mov	r2, r8
 8012006:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801200a:	464b      	mov	r3, r9
 801200c:	4620      	mov	r0, r4
 801200e:	4629      	mov	r1, r5
 8012010:	f7ee f962 	bl	80002d8 <__aeabi_dsub>
 8012014:	4602      	mov	r2, r0
 8012016:	460b      	mov	r3, r1
 8012018:	4630      	mov	r0, r6
 801201a:	4639      	mov	r1, r7
 801201c:	f7ee f95c 	bl	80002d8 <__aeabi_dsub>
 8012020:	a333      	add	r3, pc, #204	; (adr r3, 80120f0 <__ieee754_pow+0x708>)
 8012022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012026:	f7ee fb0f 	bl	8000648 <__aeabi_dmul>
 801202a:	a333      	add	r3, pc, #204	; (adr r3, 80120f8 <__ieee754_pow+0x710>)
 801202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012030:	4606      	mov	r6, r0
 8012032:	460f      	mov	r7, r1
 8012034:	4620      	mov	r0, r4
 8012036:	4629      	mov	r1, r5
 8012038:	f7ee fb06 	bl	8000648 <__aeabi_dmul>
 801203c:	4602      	mov	r2, r0
 801203e:	460b      	mov	r3, r1
 8012040:	4630      	mov	r0, r6
 8012042:	4639      	mov	r1, r7
 8012044:	f7ee f94a 	bl	80002dc <__adddf3>
 8012048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801204a:	4b35      	ldr	r3, [pc, #212]	; (8012120 <__ieee754_pow+0x738>)
 801204c:	4413      	add	r3, r2
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	f7ee f943 	bl	80002dc <__adddf3>
 8012056:	4604      	mov	r4, r0
 8012058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801205a:	460d      	mov	r5, r1
 801205c:	f7ee fa8a 	bl	8000574 <__aeabi_i2d>
 8012060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012062:	4b30      	ldr	r3, [pc, #192]	; (8012124 <__ieee754_pow+0x73c>)
 8012064:	4413      	add	r3, r2
 8012066:	e9d3 8900 	ldrd	r8, r9, [r3]
 801206a:	4606      	mov	r6, r0
 801206c:	460f      	mov	r7, r1
 801206e:	4622      	mov	r2, r4
 8012070:	462b      	mov	r3, r5
 8012072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012076:	f7ee f931 	bl	80002dc <__adddf3>
 801207a:	4642      	mov	r2, r8
 801207c:	464b      	mov	r3, r9
 801207e:	f7ee f92d 	bl	80002dc <__adddf3>
 8012082:	4632      	mov	r2, r6
 8012084:	463b      	mov	r3, r7
 8012086:	f7ee f929 	bl	80002dc <__adddf3>
 801208a:	9802      	ldr	r0, [sp, #8]
 801208c:	4632      	mov	r2, r6
 801208e:	463b      	mov	r3, r7
 8012090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012094:	f7ee f920 	bl	80002d8 <__aeabi_dsub>
 8012098:	4642      	mov	r2, r8
 801209a:	464b      	mov	r3, r9
 801209c:	f7ee f91c 	bl	80002d8 <__aeabi_dsub>
 80120a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120a4:	e607      	b.n	8011cb6 <__ieee754_pow+0x2ce>
 80120a6:	f04f 0a01 	mov.w	sl, #1
 80120aa:	e6a5      	b.n	8011df8 <__ieee754_pow+0x410>
 80120ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012100 <__ieee754_pow+0x718>
 80120b0:	e613      	b.n	8011cda <__ieee754_pow+0x2f2>
 80120b2:	bf00      	nop
 80120b4:	f3af 8000 	nop.w
 80120b8:	4a454eef 	.word	0x4a454eef
 80120bc:	3fca7e28 	.word	0x3fca7e28
 80120c0:	93c9db65 	.word	0x93c9db65
 80120c4:	3fcd864a 	.word	0x3fcd864a
 80120c8:	a91d4101 	.word	0xa91d4101
 80120cc:	3fd17460 	.word	0x3fd17460
 80120d0:	518f264d 	.word	0x518f264d
 80120d4:	3fd55555 	.word	0x3fd55555
 80120d8:	db6fabff 	.word	0xdb6fabff
 80120dc:	3fdb6db6 	.word	0x3fdb6db6
 80120e0:	33333303 	.word	0x33333303
 80120e4:	3fe33333 	.word	0x3fe33333
 80120e8:	e0000000 	.word	0xe0000000
 80120ec:	3feec709 	.word	0x3feec709
 80120f0:	dc3a03fd 	.word	0xdc3a03fd
 80120f4:	3feec709 	.word	0x3feec709
 80120f8:	145b01f5 	.word	0x145b01f5
 80120fc:	be3e2fe0 	.word	0xbe3e2fe0
 8012100:	00000000 	.word	0x00000000
 8012104:	3ff00000 	.word	0x3ff00000
 8012108:	43400000 	.word	0x43400000
 801210c:	0003988e 	.word	0x0003988e
 8012110:	000bb679 	.word	0x000bb679
 8012114:	08013f60 	.word	0x08013f60
 8012118:	3ff00000 	.word	0x3ff00000
 801211c:	40080000 	.word	0x40080000
 8012120:	08013f80 	.word	0x08013f80
 8012124:	08013f70 	.word	0x08013f70
 8012128:	a3b4      	add	r3, pc, #720	; (adr r3, 80123fc <__ieee754_pow+0xa14>)
 801212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212e:	4640      	mov	r0, r8
 8012130:	4649      	mov	r1, r9
 8012132:	f7ee f8d3 	bl	80002dc <__adddf3>
 8012136:	4622      	mov	r2, r4
 8012138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801213c:	462b      	mov	r3, r5
 801213e:	4630      	mov	r0, r6
 8012140:	4639      	mov	r1, r7
 8012142:	f7ee f8c9 	bl	80002d8 <__aeabi_dsub>
 8012146:	4602      	mov	r2, r0
 8012148:	460b      	mov	r3, r1
 801214a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801214e:	f7ee fd0b 	bl	8000b68 <__aeabi_dcmpgt>
 8012152:	2800      	cmp	r0, #0
 8012154:	f47f adfe 	bne.w	8011d54 <__ieee754_pow+0x36c>
 8012158:	4aa3      	ldr	r2, [pc, #652]	; (80123e8 <__ieee754_pow+0xa00>)
 801215a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801215e:	4293      	cmp	r3, r2
 8012160:	f340 810a 	ble.w	8012378 <__ieee754_pow+0x990>
 8012164:	151b      	asrs	r3, r3, #20
 8012166:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801216a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801216e:	fa4a f303 	asr.w	r3, sl, r3
 8012172:	445b      	add	r3, fp
 8012174:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012178:	4e9c      	ldr	r6, [pc, #624]	; (80123ec <__ieee754_pow+0xa04>)
 801217a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801217e:	4116      	asrs	r6, r2
 8012180:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012184:	2000      	movs	r0, #0
 8012186:	ea23 0106 	bic.w	r1, r3, r6
 801218a:	f1c2 0214 	rsb	r2, r2, #20
 801218e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012192:	fa4a fa02 	asr.w	sl, sl, r2
 8012196:	f1bb 0f00 	cmp.w	fp, #0
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	4620      	mov	r0, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	bfb8      	it	lt
 80121a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80121a8:	f7ee f896 	bl	80002d8 <__aeabi_dsub>
 80121ac:	e9cd 0100 	strd	r0, r1, [sp]
 80121b0:	4642      	mov	r2, r8
 80121b2:	464b      	mov	r3, r9
 80121b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121b8:	f7ee f890 	bl	80002dc <__adddf3>
 80121bc:	2000      	movs	r0, #0
 80121be:	a378      	add	r3, pc, #480	; (adr r3, 80123a0 <__ieee754_pow+0x9b8>)
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	4604      	mov	r4, r0
 80121c6:	460d      	mov	r5, r1
 80121c8:	f7ee fa3e 	bl	8000648 <__aeabi_dmul>
 80121cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121d0:	4606      	mov	r6, r0
 80121d2:	460f      	mov	r7, r1
 80121d4:	4620      	mov	r0, r4
 80121d6:	4629      	mov	r1, r5
 80121d8:	f7ee f87e 	bl	80002d8 <__aeabi_dsub>
 80121dc:	4602      	mov	r2, r0
 80121de:	460b      	mov	r3, r1
 80121e0:	4640      	mov	r0, r8
 80121e2:	4649      	mov	r1, r9
 80121e4:	f7ee f878 	bl	80002d8 <__aeabi_dsub>
 80121e8:	a36f      	add	r3, pc, #444	; (adr r3, 80123a8 <__ieee754_pow+0x9c0>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f7ee fa2b 	bl	8000648 <__aeabi_dmul>
 80121f2:	a36f      	add	r3, pc, #444	; (adr r3, 80123b0 <__ieee754_pow+0x9c8>)
 80121f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f8:	4680      	mov	r8, r0
 80121fa:	4689      	mov	r9, r1
 80121fc:	4620      	mov	r0, r4
 80121fe:	4629      	mov	r1, r5
 8012200:	f7ee fa22 	bl	8000648 <__aeabi_dmul>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4640      	mov	r0, r8
 801220a:	4649      	mov	r1, r9
 801220c:	f7ee f866 	bl	80002dc <__adddf3>
 8012210:	4604      	mov	r4, r0
 8012212:	460d      	mov	r5, r1
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	4630      	mov	r0, r6
 801221a:	4639      	mov	r1, r7
 801221c:	f7ee f85e 	bl	80002dc <__adddf3>
 8012220:	4632      	mov	r2, r6
 8012222:	463b      	mov	r3, r7
 8012224:	4680      	mov	r8, r0
 8012226:	4689      	mov	r9, r1
 8012228:	f7ee f856 	bl	80002d8 <__aeabi_dsub>
 801222c:	4602      	mov	r2, r0
 801222e:	460b      	mov	r3, r1
 8012230:	4620      	mov	r0, r4
 8012232:	4629      	mov	r1, r5
 8012234:	f7ee f850 	bl	80002d8 <__aeabi_dsub>
 8012238:	4642      	mov	r2, r8
 801223a:	4606      	mov	r6, r0
 801223c:	460f      	mov	r7, r1
 801223e:	464b      	mov	r3, r9
 8012240:	4640      	mov	r0, r8
 8012242:	4649      	mov	r1, r9
 8012244:	f7ee fa00 	bl	8000648 <__aeabi_dmul>
 8012248:	a35b      	add	r3, pc, #364	; (adr r3, 80123b8 <__ieee754_pow+0x9d0>)
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	4604      	mov	r4, r0
 8012250:	460d      	mov	r5, r1
 8012252:	f7ee f9f9 	bl	8000648 <__aeabi_dmul>
 8012256:	a35a      	add	r3, pc, #360	; (adr r3, 80123c0 <__ieee754_pow+0x9d8>)
 8012258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225c:	f7ee f83c 	bl	80002d8 <__aeabi_dsub>
 8012260:	4622      	mov	r2, r4
 8012262:	462b      	mov	r3, r5
 8012264:	f7ee f9f0 	bl	8000648 <__aeabi_dmul>
 8012268:	a357      	add	r3, pc, #348	; (adr r3, 80123c8 <__ieee754_pow+0x9e0>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	f7ee f835 	bl	80002dc <__adddf3>
 8012272:	4622      	mov	r2, r4
 8012274:	462b      	mov	r3, r5
 8012276:	f7ee f9e7 	bl	8000648 <__aeabi_dmul>
 801227a:	a355      	add	r3, pc, #340	; (adr r3, 80123d0 <__ieee754_pow+0x9e8>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	f7ee f82a 	bl	80002d8 <__aeabi_dsub>
 8012284:	4622      	mov	r2, r4
 8012286:	462b      	mov	r3, r5
 8012288:	f7ee f9de 	bl	8000648 <__aeabi_dmul>
 801228c:	a352      	add	r3, pc, #328	; (adr r3, 80123d8 <__ieee754_pow+0x9f0>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	f7ee f823 	bl	80002dc <__adddf3>
 8012296:	4622      	mov	r2, r4
 8012298:	462b      	mov	r3, r5
 801229a:	f7ee f9d5 	bl	8000648 <__aeabi_dmul>
 801229e:	4602      	mov	r2, r0
 80122a0:	460b      	mov	r3, r1
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	f7ee f817 	bl	80002d8 <__aeabi_dsub>
 80122aa:	4604      	mov	r4, r0
 80122ac:	460d      	mov	r5, r1
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4640      	mov	r0, r8
 80122b4:	4649      	mov	r1, r9
 80122b6:	f7ee f9c7 	bl	8000648 <__aeabi_dmul>
 80122ba:	2200      	movs	r2, #0
 80122bc:	e9cd 0100 	strd	r0, r1, [sp]
 80122c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80122c4:	4620      	mov	r0, r4
 80122c6:	4629      	mov	r1, r5
 80122c8:	f7ee f806 	bl	80002d8 <__aeabi_dsub>
 80122cc:	4602      	mov	r2, r0
 80122ce:	460b      	mov	r3, r1
 80122d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122d4:	f7ee fae2 	bl	800089c <__aeabi_ddiv>
 80122d8:	4632      	mov	r2, r6
 80122da:	4604      	mov	r4, r0
 80122dc:	460d      	mov	r5, r1
 80122de:	463b      	mov	r3, r7
 80122e0:	4640      	mov	r0, r8
 80122e2:	4649      	mov	r1, r9
 80122e4:	f7ee f9b0 	bl	8000648 <__aeabi_dmul>
 80122e8:	4632      	mov	r2, r6
 80122ea:	463b      	mov	r3, r7
 80122ec:	f7ed fff6 	bl	80002dc <__adddf3>
 80122f0:	4602      	mov	r2, r0
 80122f2:	460b      	mov	r3, r1
 80122f4:	4620      	mov	r0, r4
 80122f6:	4629      	mov	r1, r5
 80122f8:	f7ed ffee 	bl	80002d8 <__aeabi_dsub>
 80122fc:	4642      	mov	r2, r8
 80122fe:	464b      	mov	r3, r9
 8012300:	f7ed ffea 	bl	80002d8 <__aeabi_dsub>
 8012304:	4602      	mov	r2, r0
 8012306:	460b      	mov	r3, r1
 8012308:	2000      	movs	r0, #0
 801230a:	4939      	ldr	r1, [pc, #228]	; (80123f0 <__ieee754_pow+0xa08>)
 801230c:	f7ed ffe4 	bl	80002d8 <__aeabi_dsub>
 8012310:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012314:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012318:	4602      	mov	r2, r0
 801231a:	460b      	mov	r3, r1
 801231c:	da2f      	bge.n	801237e <__ieee754_pow+0x996>
 801231e:	4650      	mov	r0, sl
 8012320:	ec43 2b10 	vmov	d0, r2, r3
 8012324:	f000 f9c0 	bl	80126a8 <scalbn>
 8012328:	ec51 0b10 	vmov	r0, r1, d0
 801232c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012330:	f7ff bbf1 	b.w	8011b16 <__ieee754_pow+0x12e>
 8012334:	4b2f      	ldr	r3, [pc, #188]	; (80123f4 <__ieee754_pow+0xa0c>)
 8012336:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801233a:	429e      	cmp	r6, r3
 801233c:	f77f af0c 	ble.w	8012158 <__ieee754_pow+0x770>
 8012340:	4b2d      	ldr	r3, [pc, #180]	; (80123f8 <__ieee754_pow+0xa10>)
 8012342:	440b      	add	r3, r1
 8012344:	4303      	orrs	r3, r0
 8012346:	d00b      	beq.n	8012360 <__ieee754_pow+0x978>
 8012348:	a325      	add	r3, pc, #148	; (adr r3, 80123e0 <__ieee754_pow+0x9f8>)
 801234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012352:	f7ee f979 	bl	8000648 <__aeabi_dmul>
 8012356:	a322      	add	r3, pc, #136	; (adr r3, 80123e0 <__ieee754_pow+0x9f8>)
 8012358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235c:	f7ff bbdb 	b.w	8011b16 <__ieee754_pow+0x12e>
 8012360:	4622      	mov	r2, r4
 8012362:	462b      	mov	r3, r5
 8012364:	f7ed ffb8 	bl	80002d8 <__aeabi_dsub>
 8012368:	4642      	mov	r2, r8
 801236a:	464b      	mov	r3, r9
 801236c:	f7ee fbf2 	bl	8000b54 <__aeabi_dcmpge>
 8012370:	2800      	cmp	r0, #0
 8012372:	f43f aef1 	beq.w	8012158 <__ieee754_pow+0x770>
 8012376:	e7e7      	b.n	8012348 <__ieee754_pow+0x960>
 8012378:	f04f 0a00 	mov.w	sl, #0
 801237c:	e718      	b.n	80121b0 <__ieee754_pow+0x7c8>
 801237e:	4621      	mov	r1, r4
 8012380:	e7d4      	b.n	801232c <__ieee754_pow+0x944>
 8012382:	2000      	movs	r0, #0
 8012384:	491a      	ldr	r1, [pc, #104]	; (80123f0 <__ieee754_pow+0xa08>)
 8012386:	f7ff bb8f 	b.w	8011aa8 <__ieee754_pow+0xc0>
 801238a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801238e:	f7ff bb8b 	b.w	8011aa8 <__ieee754_pow+0xc0>
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ff bb87 	b.w	8011aa8 <__ieee754_pow+0xc0>
 801239a:	4693      	mov	fp, r2
 801239c:	f7ff bb98 	b.w	8011ad0 <__ieee754_pow+0xe8>
 80123a0:	00000000 	.word	0x00000000
 80123a4:	3fe62e43 	.word	0x3fe62e43
 80123a8:	fefa39ef 	.word	0xfefa39ef
 80123ac:	3fe62e42 	.word	0x3fe62e42
 80123b0:	0ca86c39 	.word	0x0ca86c39
 80123b4:	be205c61 	.word	0xbe205c61
 80123b8:	72bea4d0 	.word	0x72bea4d0
 80123bc:	3e663769 	.word	0x3e663769
 80123c0:	c5d26bf1 	.word	0xc5d26bf1
 80123c4:	3ebbbd41 	.word	0x3ebbbd41
 80123c8:	af25de2c 	.word	0xaf25de2c
 80123cc:	3f11566a 	.word	0x3f11566a
 80123d0:	16bebd93 	.word	0x16bebd93
 80123d4:	3f66c16c 	.word	0x3f66c16c
 80123d8:	5555553e 	.word	0x5555553e
 80123dc:	3fc55555 	.word	0x3fc55555
 80123e0:	c2f8f359 	.word	0xc2f8f359
 80123e4:	01a56e1f 	.word	0x01a56e1f
 80123e8:	3fe00000 	.word	0x3fe00000
 80123ec:	000fffff 	.word	0x000fffff
 80123f0:	3ff00000 	.word	0x3ff00000
 80123f4:	4090cbff 	.word	0x4090cbff
 80123f8:	3f6f3400 	.word	0x3f6f3400
 80123fc:	652b82fe 	.word	0x652b82fe
 8012400:	3c971547 	.word	0x3c971547

08012404 <__ieee754_sqrt>:
 8012404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012408:	4955      	ldr	r1, [pc, #340]	; (8012560 <__ieee754_sqrt+0x15c>)
 801240a:	ec55 4b10 	vmov	r4, r5, d0
 801240e:	43a9      	bics	r1, r5
 8012410:	462b      	mov	r3, r5
 8012412:	462a      	mov	r2, r5
 8012414:	d112      	bne.n	801243c <__ieee754_sqrt+0x38>
 8012416:	ee10 2a10 	vmov	r2, s0
 801241a:	ee10 0a10 	vmov	r0, s0
 801241e:	4629      	mov	r1, r5
 8012420:	f7ee f912 	bl	8000648 <__aeabi_dmul>
 8012424:	4602      	mov	r2, r0
 8012426:	460b      	mov	r3, r1
 8012428:	4620      	mov	r0, r4
 801242a:	4629      	mov	r1, r5
 801242c:	f7ed ff56 	bl	80002dc <__adddf3>
 8012430:	4604      	mov	r4, r0
 8012432:	460d      	mov	r5, r1
 8012434:	ec45 4b10 	vmov	d0, r4, r5
 8012438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801243c:	2d00      	cmp	r5, #0
 801243e:	ee10 0a10 	vmov	r0, s0
 8012442:	4621      	mov	r1, r4
 8012444:	dc0f      	bgt.n	8012466 <__ieee754_sqrt+0x62>
 8012446:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801244a:	4330      	orrs	r0, r6
 801244c:	d0f2      	beq.n	8012434 <__ieee754_sqrt+0x30>
 801244e:	b155      	cbz	r5, 8012466 <__ieee754_sqrt+0x62>
 8012450:	ee10 2a10 	vmov	r2, s0
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ed ff3e 	bl	80002d8 <__aeabi_dsub>
 801245c:	4602      	mov	r2, r0
 801245e:	460b      	mov	r3, r1
 8012460:	f7ee fa1c 	bl	800089c <__aeabi_ddiv>
 8012464:	e7e4      	b.n	8012430 <__ieee754_sqrt+0x2c>
 8012466:	151b      	asrs	r3, r3, #20
 8012468:	d073      	beq.n	8012552 <__ieee754_sqrt+0x14e>
 801246a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801246e:	07dd      	lsls	r5, r3, #31
 8012470:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012474:	bf48      	it	mi
 8012476:	0fc8      	lsrmi	r0, r1, #31
 8012478:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801247c:	bf44      	itt	mi
 801247e:	0049      	lslmi	r1, r1, #1
 8012480:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012484:	2500      	movs	r5, #0
 8012486:	1058      	asrs	r0, r3, #1
 8012488:	0fcb      	lsrs	r3, r1, #31
 801248a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801248e:	0049      	lsls	r1, r1, #1
 8012490:	2316      	movs	r3, #22
 8012492:	462c      	mov	r4, r5
 8012494:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012498:	19a7      	adds	r7, r4, r6
 801249a:	4297      	cmp	r7, r2
 801249c:	bfde      	ittt	le
 801249e:	19bc      	addle	r4, r7, r6
 80124a0:	1bd2      	suble	r2, r2, r7
 80124a2:	19ad      	addle	r5, r5, r6
 80124a4:	0fcf      	lsrs	r7, r1, #31
 80124a6:	3b01      	subs	r3, #1
 80124a8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80124ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80124b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80124b4:	d1f0      	bne.n	8012498 <__ieee754_sqrt+0x94>
 80124b6:	f04f 0c20 	mov.w	ip, #32
 80124ba:	469e      	mov	lr, r3
 80124bc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80124c0:	42a2      	cmp	r2, r4
 80124c2:	eb06 070e 	add.w	r7, r6, lr
 80124c6:	dc02      	bgt.n	80124ce <__ieee754_sqrt+0xca>
 80124c8:	d112      	bne.n	80124f0 <__ieee754_sqrt+0xec>
 80124ca:	428f      	cmp	r7, r1
 80124cc:	d810      	bhi.n	80124f0 <__ieee754_sqrt+0xec>
 80124ce:	2f00      	cmp	r7, #0
 80124d0:	eb07 0e06 	add.w	lr, r7, r6
 80124d4:	da42      	bge.n	801255c <__ieee754_sqrt+0x158>
 80124d6:	f1be 0f00 	cmp.w	lr, #0
 80124da:	db3f      	blt.n	801255c <__ieee754_sqrt+0x158>
 80124dc:	f104 0801 	add.w	r8, r4, #1
 80124e0:	1b12      	subs	r2, r2, r4
 80124e2:	428f      	cmp	r7, r1
 80124e4:	bf88      	it	hi
 80124e6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80124ea:	1bc9      	subs	r1, r1, r7
 80124ec:	4433      	add	r3, r6
 80124ee:	4644      	mov	r4, r8
 80124f0:	0052      	lsls	r2, r2, #1
 80124f2:	f1bc 0c01 	subs.w	ip, ip, #1
 80124f6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80124fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80124fe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012502:	d1dd      	bne.n	80124c0 <__ieee754_sqrt+0xbc>
 8012504:	430a      	orrs	r2, r1
 8012506:	d006      	beq.n	8012516 <__ieee754_sqrt+0x112>
 8012508:	1c5c      	adds	r4, r3, #1
 801250a:	bf13      	iteet	ne
 801250c:	3301      	addne	r3, #1
 801250e:	3501      	addeq	r5, #1
 8012510:	4663      	moveq	r3, ip
 8012512:	f023 0301 	bicne.w	r3, r3, #1
 8012516:	106a      	asrs	r2, r5, #1
 8012518:	085b      	lsrs	r3, r3, #1
 801251a:	07e9      	lsls	r1, r5, #31
 801251c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012520:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012524:	bf48      	it	mi
 8012526:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801252a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801252e:	461c      	mov	r4, r3
 8012530:	e780      	b.n	8012434 <__ieee754_sqrt+0x30>
 8012532:	0aca      	lsrs	r2, r1, #11
 8012534:	3815      	subs	r0, #21
 8012536:	0549      	lsls	r1, r1, #21
 8012538:	2a00      	cmp	r2, #0
 801253a:	d0fa      	beq.n	8012532 <__ieee754_sqrt+0x12e>
 801253c:	02d6      	lsls	r6, r2, #11
 801253e:	d50a      	bpl.n	8012556 <__ieee754_sqrt+0x152>
 8012540:	f1c3 0420 	rsb	r4, r3, #32
 8012544:	fa21 f404 	lsr.w	r4, r1, r4
 8012548:	1e5d      	subs	r5, r3, #1
 801254a:	4099      	lsls	r1, r3
 801254c:	4322      	orrs	r2, r4
 801254e:	1b43      	subs	r3, r0, r5
 8012550:	e78b      	b.n	801246a <__ieee754_sqrt+0x66>
 8012552:	4618      	mov	r0, r3
 8012554:	e7f0      	b.n	8012538 <__ieee754_sqrt+0x134>
 8012556:	0052      	lsls	r2, r2, #1
 8012558:	3301      	adds	r3, #1
 801255a:	e7ef      	b.n	801253c <__ieee754_sqrt+0x138>
 801255c:	46a0      	mov	r8, r4
 801255e:	e7bf      	b.n	80124e0 <__ieee754_sqrt+0xdc>
 8012560:	7ff00000 	.word	0x7ff00000

08012564 <fabs>:
 8012564:	ec51 0b10 	vmov	r0, r1, d0
 8012568:	ee10 2a10 	vmov	r2, s0
 801256c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012570:	ec43 2b10 	vmov	d0, r2, r3
 8012574:	4770      	bx	lr

08012576 <finite>:
 8012576:	ee10 3a90 	vmov	r3, s1
 801257a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801257e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012582:	0fc0      	lsrs	r0, r0, #31
 8012584:	4770      	bx	lr

08012586 <matherr>:
 8012586:	2000      	movs	r0, #0
 8012588:	4770      	bx	lr
 801258a:	0000      	movs	r0, r0
 801258c:	0000      	movs	r0, r0
	...

08012590 <nan>:
 8012590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012598 <nan+0x8>
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	00000000 	.word	0x00000000
 801259c:	7ff80000 	.word	0x7ff80000

080125a0 <rint>:
 80125a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125a2:	ec51 0b10 	vmov	r0, r1, d0
 80125a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80125aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80125ae:	2e13      	cmp	r6, #19
 80125b0:	460b      	mov	r3, r1
 80125b2:	ee10 4a10 	vmov	r4, s0
 80125b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80125ba:	dc56      	bgt.n	801266a <rint+0xca>
 80125bc:	2e00      	cmp	r6, #0
 80125be:	da2b      	bge.n	8012618 <rint+0x78>
 80125c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80125c4:	4302      	orrs	r2, r0
 80125c6:	d023      	beq.n	8012610 <rint+0x70>
 80125c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80125cc:	4302      	orrs	r2, r0
 80125ce:	4254      	negs	r4, r2
 80125d0:	4314      	orrs	r4, r2
 80125d2:	0c4b      	lsrs	r3, r1, #17
 80125d4:	0b24      	lsrs	r4, r4, #12
 80125d6:	045b      	lsls	r3, r3, #17
 80125d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80125dc:	ea44 0103 	orr.w	r1, r4, r3
 80125e0:	460b      	mov	r3, r1
 80125e2:	492f      	ldr	r1, [pc, #188]	; (80126a0 <rint+0x100>)
 80125e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80125e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80125ec:	4602      	mov	r2, r0
 80125ee:	4639      	mov	r1, r7
 80125f0:	4630      	mov	r0, r6
 80125f2:	f7ed fe73 	bl	80002dc <__adddf3>
 80125f6:	e9cd 0100 	strd	r0, r1, [sp]
 80125fa:	463b      	mov	r3, r7
 80125fc:	4632      	mov	r2, r6
 80125fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012602:	f7ed fe69 	bl	80002d8 <__aeabi_dsub>
 8012606:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801260a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801260e:	4639      	mov	r1, r7
 8012610:	ec41 0b10 	vmov	d0, r0, r1
 8012614:	b003      	add	sp, #12
 8012616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012618:	4a22      	ldr	r2, [pc, #136]	; (80126a4 <rint+0x104>)
 801261a:	4132      	asrs	r2, r6
 801261c:	ea01 0702 	and.w	r7, r1, r2
 8012620:	4307      	orrs	r7, r0
 8012622:	d0f5      	beq.n	8012610 <rint+0x70>
 8012624:	0852      	lsrs	r2, r2, #1
 8012626:	4011      	ands	r1, r2
 8012628:	430c      	orrs	r4, r1
 801262a:	d00b      	beq.n	8012644 <rint+0xa4>
 801262c:	ea23 0202 	bic.w	r2, r3, r2
 8012630:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012634:	2e13      	cmp	r6, #19
 8012636:	fa43 f306 	asr.w	r3, r3, r6
 801263a:	bf0c      	ite	eq
 801263c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012640:	2400      	movne	r4, #0
 8012642:	4313      	orrs	r3, r2
 8012644:	4916      	ldr	r1, [pc, #88]	; (80126a0 <rint+0x100>)
 8012646:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801264a:	4622      	mov	r2, r4
 801264c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012650:	4620      	mov	r0, r4
 8012652:	4629      	mov	r1, r5
 8012654:	f7ed fe42 	bl	80002dc <__adddf3>
 8012658:	e9cd 0100 	strd	r0, r1, [sp]
 801265c:	4622      	mov	r2, r4
 801265e:	462b      	mov	r3, r5
 8012660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012664:	f7ed fe38 	bl	80002d8 <__aeabi_dsub>
 8012668:	e7d2      	b.n	8012610 <rint+0x70>
 801266a:	2e33      	cmp	r6, #51	; 0x33
 801266c:	dd07      	ble.n	801267e <rint+0xde>
 801266e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012672:	d1cd      	bne.n	8012610 <rint+0x70>
 8012674:	ee10 2a10 	vmov	r2, s0
 8012678:	f7ed fe30 	bl	80002dc <__adddf3>
 801267c:	e7c8      	b.n	8012610 <rint+0x70>
 801267e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012686:	40f2      	lsrs	r2, r6
 8012688:	4210      	tst	r0, r2
 801268a:	d0c1      	beq.n	8012610 <rint+0x70>
 801268c:	0852      	lsrs	r2, r2, #1
 801268e:	4210      	tst	r0, r2
 8012690:	bf1f      	itttt	ne
 8012692:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012696:	ea20 0202 	bicne.w	r2, r0, r2
 801269a:	4134      	asrne	r4, r6
 801269c:	4314      	orrne	r4, r2
 801269e:	e7d1      	b.n	8012644 <rint+0xa4>
 80126a0:	08013f90 	.word	0x08013f90
 80126a4:	000fffff 	.word	0x000fffff

080126a8 <scalbn>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	ec55 4b10 	vmov	r4, r5, d0
 80126ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80126b2:	4606      	mov	r6, r0
 80126b4:	462b      	mov	r3, r5
 80126b6:	b9aa      	cbnz	r2, 80126e4 <scalbn+0x3c>
 80126b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80126bc:	4323      	orrs	r3, r4
 80126be:	d03b      	beq.n	8012738 <scalbn+0x90>
 80126c0:	4b31      	ldr	r3, [pc, #196]	; (8012788 <scalbn+0xe0>)
 80126c2:	4629      	mov	r1, r5
 80126c4:	2200      	movs	r2, #0
 80126c6:	ee10 0a10 	vmov	r0, s0
 80126ca:	f7ed ffbd 	bl	8000648 <__aeabi_dmul>
 80126ce:	4b2f      	ldr	r3, [pc, #188]	; (801278c <scalbn+0xe4>)
 80126d0:	429e      	cmp	r6, r3
 80126d2:	4604      	mov	r4, r0
 80126d4:	460d      	mov	r5, r1
 80126d6:	da12      	bge.n	80126fe <scalbn+0x56>
 80126d8:	a327      	add	r3, pc, #156	; (adr r3, 8012778 <scalbn+0xd0>)
 80126da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126de:	f7ed ffb3 	bl	8000648 <__aeabi_dmul>
 80126e2:	e009      	b.n	80126f8 <scalbn+0x50>
 80126e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80126e8:	428a      	cmp	r2, r1
 80126ea:	d10c      	bne.n	8012706 <scalbn+0x5e>
 80126ec:	ee10 2a10 	vmov	r2, s0
 80126f0:	4620      	mov	r0, r4
 80126f2:	4629      	mov	r1, r5
 80126f4:	f7ed fdf2 	bl	80002dc <__adddf3>
 80126f8:	4604      	mov	r4, r0
 80126fa:	460d      	mov	r5, r1
 80126fc:	e01c      	b.n	8012738 <scalbn+0x90>
 80126fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012702:	460b      	mov	r3, r1
 8012704:	3a36      	subs	r2, #54	; 0x36
 8012706:	4432      	add	r2, r6
 8012708:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801270c:	428a      	cmp	r2, r1
 801270e:	dd0b      	ble.n	8012728 <scalbn+0x80>
 8012710:	ec45 4b11 	vmov	d1, r4, r5
 8012714:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012780 <scalbn+0xd8>
 8012718:	f000 f9f0 	bl	8012afc <copysign>
 801271c:	a318      	add	r3, pc, #96	; (adr r3, 8012780 <scalbn+0xd8>)
 801271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012722:	ec51 0b10 	vmov	r0, r1, d0
 8012726:	e7da      	b.n	80126de <scalbn+0x36>
 8012728:	2a00      	cmp	r2, #0
 801272a:	dd08      	ble.n	801273e <scalbn+0x96>
 801272c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012730:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012734:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012738:	ec45 4b10 	vmov	d0, r4, r5
 801273c:	bd70      	pop	{r4, r5, r6, pc}
 801273e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012742:	da0d      	bge.n	8012760 <scalbn+0xb8>
 8012744:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012748:	429e      	cmp	r6, r3
 801274a:	ec45 4b11 	vmov	d1, r4, r5
 801274e:	dce1      	bgt.n	8012714 <scalbn+0x6c>
 8012750:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012778 <scalbn+0xd0>
 8012754:	f000 f9d2 	bl	8012afc <copysign>
 8012758:	a307      	add	r3, pc, #28	; (adr r3, 8012778 <scalbn+0xd0>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	e7e0      	b.n	8012722 <scalbn+0x7a>
 8012760:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012764:	3236      	adds	r2, #54	; 0x36
 8012766:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801276a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801276e:	4620      	mov	r0, r4
 8012770:	4629      	mov	r1, r5
 8012772:	2200      	movs	r2, #0
 8012774:	4b06      	ldr	r3, [pc, #24]	; (8012790 <scalbn+0xe8>)
 8012776:	e7b2      	b.n	80126de <scalbn+0x36>
 8012778:	c2f8f359 	.word	0xc2f8f359
 801277c:	01a56e1f 	.word	0x01a56e1f
 8012780:	8800759c 	.word	0x8800759c
 8012784:	7e37e43c 	.word	0x7e37e43c
 8012788:	43500000 	.word	0x43500000
 801278c:	ffff3cb0 	.word	0xffff3cb0
 8012790:	3c900000 	.word	0x3c900000
 8012794:	00000000 	.word	0x00000000

08012798 <__ieee754_log>:
 8012798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801279c:	ec51 0b10 	vmov	r0, r1, d0
 80127a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80127a4:	b087      	sub	sp, #28
 80127a6:	460d      	mov	r5, r1
 80127a8:	da27      	bge.n	80127fa <__ieee754_log+0x62>
 80127aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127ae:	4303      	orrs	r3, r0
 80127b0:	ee10 2a10 	vmov	r2, s0
 80127b4:	d10a      	bne.n	80127cc <__ieee754_log+0x34>
 80127b6:	49cc      	ldr	r1, [pc, #816]	; (8012ae8 <__ieee754_log+0x350>)
 80127b8:	2200      	movs	r2, #0
 80127ba:	2300      	movs	r3, #0
 80127bc:	2000      	movs	r0, #0
 80127be:	f7ee f86d 	bl	800089c <__aeabi_ddiv>
 80127c2:	ec41 0b10 	vmov	d0, r0, r1
 80127c6:	b007      	add	sp, #28
 80127c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127cc:	2900      	cmp	r1, #0
 80127ce:	da05      	bge.n	80127dc <__ieee754_log+0x44>
 80127d0:	460b      	mov	r3, r1
 80127d2:	f7ed fd81 	bl	80002d8 <__aeabi_dsub>
 80127d6:	2200      	movs	r2, #0
 80127d8:	2300      	movs	r3, #0
 80127da:	e7f0      	b.n	80127be <__ieee754_log+0x26>
 80127dc:	4bc3      	ldr	r3, [pc, #780]	; (8012aec <__ieee754_log+0x354>)
 80127de:	2200      	movs	r2, #0
 80127e0:	f7ed ff32 	bl	8000648 <__aeabi_dmul>
 80127e4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80127e8:	460d      	mov	r5, r1
 80127ea:	4ac1      	ldr	r2, [pc, #772]	; (8012af0 <__ieee754_log+0x358>)
 80127ec:	4295      	cmp	r5, r2
 80127ee:	dd06      	ble.n	80127fe <__ieee754_log+0x66>
 80127f0:	4602      	mov	r2, r0
 80127f2:	460b      	mov	r3, r1
 80127f4:	f7ed fd72 	bl	80002dc <__adddf3>
 80127f8:	e7e3      	b.n	80127c2 <__ieee754_log+0x2a>
 80127fa:	2300      	movs	r3, #0
 80127fc:	e7f5      	b.n	80127ea <__ieee754_log+0x52>
 80127fe:	152c      	asrs	r4, r5, #20
 8012800:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012804:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012808:	441c      	add	r4, r3
 801280a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801280e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012816:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801281a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801281e:	ea42 0105 	orr.w	r1, r2, r5
 8012822:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012826:	2200      	movs	r2, #0
 8012828:	4bb2      	ldr	r3, [pc, #712]	; (8012af4 <__ieee754_log+0x35c>)
 801282a:	f7ed fd55 	bl	80002d8 <__aeabi_dsub>
 801282e:	1cab      	adds	r3, r5, #2
 8012830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012834:	2b02      	cmp	r3, #2
 8012836:	4682      	mov	sl, r0
 8012838:	468b      	mov	fp, r1
 801283a:	f04f 0200 	mov.w	r2, #0
 801283e:	dc53      	bgt.n	80128e8 <__ieee754_log+0x150>
 8012840:	2300      	movs	r3, #0
 8012842:	f7ee f969 	bl	8000b18 <__aeabi_dcmpeq>
 8012846:	b1d0      	cbz	r0, 801287e <__ieee754_log+0xe6>
 8012848:	2c00      	cmp	r4, #0
 801284a:	f000 8120 	beq.w	8012a8e <__ieee754_log+0x2f6>
 801284e:	4620      	mov	r0, r4
 8012850:	f7ed fe90 	bl	8000574 <__aeabi_i2d>
 8012854:	a390      	add	r3, pc, #576	; (adr r3, 8012a98 <__ieee754_log+0x300>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	4606      	mov	r6, r0
 801285c:	460f      	mov	r7, r1
 801285e:	f7ed fef3 	bl	8000648 <__aeabi_dmul>
 8012862:	a38f      	add	r3, pc, #572	; (adr r3, 8012aa0 <__ieee754_log+0x308>)
 8012864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012868:	4604      	mov	r4, r0
 801286a:	460d      	mov	r5, r1
 801286c:	4630      	mov	r0, r6
 801286e:	4639      	mov	r1, r7
 8012870:	f7ed feea 	bl	8000648 <__aeabi_dmul>
 8012874:	4602      	mov	r2, r0
 8012876:	460b      	mov	r3, r1
 8012878:	4620      	mov	r0, r4
 801287a:	4629      	mov	r1, r5
 801287c:	e7ba      	b.n	80127f4 <__ieee754_log+0x5c>
 801287e:	a38a      	add	r3, pc, #552	; (adr r3, 8012aa8 <__ieee754_log+0x310>)
 8012880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012884:	4650      	mov	r0, sl
 8012886:	4659      	mov	r1, fp
 8012888:	f7ed fede 	bl	8000648 <__aeabi_dmul>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	2000      	movs	r0, #0
 8012892:	4999      	ldr	r1, [pc, #612]	; (8012af8 <__ieee754_log+0x360>)
 8012894:	f7ed fd20 	bl	80002d8 <__aeabi_dsub>
 8012898:	4652      	mov	r2, sl
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	465b      	mov	r3, fp
 80128a0:	4650      	mov	r0, sl
 80128a2:	4659      	mov	r1, fp
 80128a4:	f7ed fed0 	bl	8000648 <__aeabi_dmul>
 80128a8:	4602      	mov	r2, r0
 80128aa:	460b      	mov	r3, r1
 80128ac:	4630      	mov	r0, r6
 80128ae:	4639      	mov	r1, r7
 80128b0:	f7ed feca 	bl	8000648 <__aeabi_dmul>
 80128b4:	4606      	mov	r6, r0
 80128b6:	460f      	mov	r7, r1
 80128b8:	b914      	cbnz	r4, 80128c0 <__ieee754_log+0x128>
 80128ba:	4632      	mov	r2, r6
 80128bc:	463b      	mov	r3, r7
 80128be:	e0a0      	b.n	8012a02 <__ieee754_log+0x26a>
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7ed fe57 	bl	8000574 <__aeabi_i2d>
 80128c6:	a374      	add	r3, pc, #464	; (adr r3, 8012a98 <__ieee754_log+0x300>)
 80128c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128cc:	4680      	mov	r8, r0
 80128ce:	4689      	mov	r9, r1
 80128d0:	f7ed feba 	bl	8000648 <__aeabi_dmul>
 80128d4:	a372      	add	r3, pc, #456	; (adr r3, 8012aa0 <__ieee754_log+0x308>)
 80128d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128da:	4604      	mov	r4, r0
 80128dc:	460d      	mov	r5, r1
 80128de:	4640      	mov	r0, r8
 80128e0:	4649      	mov	r1, r9
 80128e2:	f7ed feb1 	bl	8000648 <__aeabi_dmul>
 80128e6:	e0a5      	b.n	8012a34 <__ieee754_log+0x29c>
 80128e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80128ec:	f7ed fcf6 	bl	80002dc <__adddf3>
 80128f0:	4602      	mov	r2, r0
 80128f2:	460b      	mov	r3, r1
 80128f4:	4650      	mov	r0, sl
 80128f6:	4659      	mov	r1, fp
 80128f8:	f7ed ffd0 	bl	800089c <__aeabi_ddiv>
 80128fc:	e9cd 0100 	strd	r0, r1, [sp]
 8012900:	4620      	mov	r0, r4
 8012902:	f7ed fe37 	bl	8000574 <__aeabi_i2d>
 8012906:	e9dd 2300 	ldrd	r2, r3, [sp]
 801290a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801290e:	4610      	mov	r0, r2
 8012910:	4619      	mov	r1, r3
 8012912:	f7ed fe99 	bl	8000648 <__aeabi_dmul>
 8012916:	4602      	mov	r2, r0
 8012918:	460b      	mov	r3, r1
 801291a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801291e:	f7ed fe93 	bl	8000648 <__aeabi_dmul>
 8012922:	a363      	add	r3, pc, #396	; (adr r3, 8012ab0 <__ieee754_log+0x318>)
 8012924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012928:	4680      	mov	r8, r0
 801292a:	4689      	mov	r9, r1
 801292c:	f7ed fe8c 	bl	8000648 <__aeabi_dmul>
 8012930:	a361      	add	r3, pc, #388	; (adr r3, 8012ab8 <__ieee754_log+0x320>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fcd1 	bl	80002dc <__adddf3>
 801293a:	4642      	mov	r2, r8
 801293c:	464b      	mov	r3, r9
 801293e:	f7ed fe83 	bl	8000648 <__aeabi_dmul>
 8012942:	a35f      	add	r3, pc, #380	; (adr r3, 8012ac0 <__ieee754_log+0x328>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	f7ed fcc8 	bl	80002dc <__adddf3>
 801294c:	4642      	mov	r2, r8
 801294e:	464b      	mov	r3, r9
 8012950:	f7ed fe7a 	bl	8000648 <__aeabi_dmul>
 8012954:	a35c      	add	r3, pc, #368	; (adr r3, 8012ac8 <__ieee754_log+0x330>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	f7ed fcbf 	bl	80002dc <__adddf3>
 801295e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012962:	f7ed fe71 	bl	8000648 <__aeabi_dmul>
 8012966:	a35a      	add	r3, pc, #360	; (adr r3, 8012ad0 <__ieee754_log+0x338>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012970:	4640      	mov	r0, r8
 8012972:	4649      	mov	r1, r9
 8012974:	f7ed fe68 	bl	8000648 <__aeabi_dmul>
 8012978:	a357      	add	r3, pc, #348	; (adr r3, 8012ad8 <__ieee754_log+0x340>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	f7ed fcad 	bl	80002dc <__adddf3>
 8012982:	4642      	mov	r2, r8
 8012984:	464b      	mov	r3, r9
 8012986:	f7ed fe5f 	bl	8000648 <__aeabi_dmul>
 801298a:	a355      	add	r3, pc, #340	; (adr r3, 8012ae0 <__ieee754_log+0x348>)
 801298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012990:	f7ed fca4 	bl	80002dc <__adddf3>
 8012994:	4642      	mov	r2, r8
 8012996:	464b      	mov	r3, r9
 8012998:	f7ed fe56 	bl	8000648 <__aeabi_dmul>
 801299c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80129a0:	4602      	mov	r2, r0
 80129a2:	460b      	mov	r3, r1
 80129a4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80129a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129ac:	f7ed fc96 	bl	80002dc <__adddf3>
 80129b0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80129b4:	3551      	adds	r5, #81	; 0x51
 80129b6:	4335      	orrs	r5, r6
 80129b8:	2d00      	cmp	r5, #0
 80129ba:	4680      	mov	r8, r0
 80129bc:	4689      	mov	r9, r1
 80129be:	dd48      	ble.n	8012a52 <__ieee754_log+0x2ba>
 80129c0:	2200      	movs	r2, #0
 80129c2:	4b4d      	ldr	r3, [pc, #308]	; (8012af8 <__ieee754_log+0x360>)
 80129c4:	4650      	mov	r0, sl
 80129c6:	4659      	mov	r1, fp
 80129c8:	f7ed fe3e 	bl	8000648 <__aeabi_dmul>
 80129cc:	4652      	mov	r2, sl
 80129ce:	465b      	mov	r3, fp
 80129d0:	f7ed fe3a 	bl	8000648 <__aeabi_dmul>
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	4606      	mov	r6, r0
 80129da:	460f      	mov	r7, r1
 80129dc:	4640      	mov	r0, r8
 80129de:	4649      	mov	r1, r9
 80129e0:	f7ed fc7c 	bl	80002dc <__adddf3>
 80129e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129e8:	f7ed fe2e 	bl	8000648 <__aeabi_dmul>
 80129ec:	4680      	mov	r8, r0
 80129ee:	4689      	mov	r9, r1
 80129f0:	b964      	cbnz	r4, 8012a0c <__ieee754_log+0x274>
 80129f2:	4602      	mov	r2, r0
 80129f4:	460b      	mov	r3, r1
 80129f6:	4630      	mov	r0, r6
 80129f8:	4639      	mov	r1, r7
 80129fa:	f7ed fc6d 	bl	80002d8 <__aeabi_dsub>
 80129fe:	4602      	mov	r2, r0
 8012a00:	460b      	mov	r3, r1
 8012a02:	4650      	mov	r0, sl
 8012a04:	4659      	mov	r1, fp
 8012a06:	f7ed fc67 	bl	80002d8 <__aeabi_dsub>
 8012a0a:	e6da      	b.n	80127c2 <__ieee754_log+0x2a>
 8012a0c:	a322      	add	r3, pc, #136	; (adr r3, 8012a98 <__ieee754_log+0x300>)
 8012a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a16:	f7ed fe17 	bl	8000648 <__aeabi_dmul>
 8012a1a:	a321      	add	r3, pc, #132	; (adr r3, 8012aa0 <__ieee754_log+0x308>)
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	4604      	mov	r4, r0
 8012a22:	460d      	mov	r5, r1
 8012a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a28:	f7ed fe0e 	bl	8000648 <__aeabi_dmul>
 8012a2c:	4642      	mov	r2, r8
 8012a2e:	464b      	mov	r3, r9
 8012a30:	f7ed fc54 	bl	80002dc <__adddf3>
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4630      	mov	r0, r6
 8012a3a:	4639      	mov	r1, r7
 8012a3c:	f7ed fc4c 	bl	80002d8 <__aeabi_dsub>
 8012a40:	4652      	mov	r2, sl
 8012a42:	465b      	mov	r3, fp
 8012a44:	f7ed fc48 	bl	80002d8 <__aeabi_dsub>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	4629      	mov	r1, r5
 8012a50:	e7d9      	b.n	8012a06 <__ieee754_log+0x26e>
 8012a52:	4602      	mov	r2, r0
 8012a54:	460b      	mov	r3, r1
 8012a56:	4650      	mov	r0, sl
 8012a58:	4659      	mov	r1, fp
 8012a5a:	f7ed fc3d 	bl	80002d8 <__aeabi_dsub>
 8012a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a62:	f7ed fdf1 	bl	8000648 <__aeabi_dmul>
 8012a66:	4606      	mov	r6, r0
 8012a68:	460f      	mov	r7, r1
 8012a6a:	2c00      	cmp	r4, #0
 8012a6c:	f43f af25 	beq.w	80128ba <__ieee754_log+0x122>
 8012a70:	a309      	add	r3, pc, #36	; (adr r3, 8012a98 <__ieee754_log+0x300>)
 8012a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a7a:	f7ed fde5 	bl	8000648 <__aeabi_dmul>
 8012a7e:	a308      	add	r3, pc, #32	; (adr r3, 8012aa0 <__ieee754_log+0x308>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	4604      	mov	r4, r0
 8012a86:	460d      	mov	r5, r1
 8012a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a8c:	e729      	b.n	80128e2 <__ieee754_log+0x14a>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	2100      	movs	r1, #0
 8012a92:	e696      	b.n	80127c2 <__ieee754_log+0x2a>
 8012a94:	f3af 8000 	nop.w
 8012a98:	fee00000 	.word	0xfee00000
 8012a9c:	3fe62e42 	.word	0x3fe62e42
 8012aa0:	35793c76 	.word	0x35793c76
 8012aa4:	3dea39ef 	.word	0x3dea39ef
 8012aa8:	55555555 	.word	0x55555555
 8012aac:	3fd55555 	.word	0x3fd55555
 8012ab0:	df3e5244 	.word	0xdf3e5244
 8012ab4:	3fc2f112 	.word	0x3fc2f112
 8012ab8:	96cb03de 	.word	0x96cb03de
 8012abc:	3fc74664 	.word	0x3fc74664
 8012ac0:	94229359 	.word	0x94229359
 8012ac4:	3fd24924 	.word	0x3fd24924
 8012ac8:	55555593 	.word	0x55555593
 8012acc:	3fe55555 	.word	0x3fe55555
 8012ad0:	d078c69f 	.word	0xd078c69f
 8012ad4:	3fc39a09 	.word	0x3fc39a09
 8012ad8:	1d8e78af 	.word	0x1d8e78af
 8012adc:	3fcc71c5 	.word	0x3fcc71c5
 8012ae0:	9997fa04 	.word	0x9997fa04
 8012ae4:	3fd99999 	.word	0x3fd99999
 8012ae8:	c3500000 	.word	0xc3500000
 8012aec:	43500000 	.word	0x43500000
 8012af0:	7fefffff 	.word	0x7fefffff
 8012af4:	3ff00000 	.word	0x3ff00000
 8012af8:	3fe00000 	.word	0x3fe00000

08012afc <copysign>:
 8012afc:	ec51 0b10 	vmov	r0, r1, d0
 8012b00:	ee11 0a90 	vmov	r0, s3
 8012b04:	ee10 2a10 	vmov	r2, s0
 8012b08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012b0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012b10:	ea41 0300 	orr.w	r3, r1, r0
 8012b14:	ec43 2b10 	vmov	d0, r2, r3
 8012b18:	4770      	bx	lr
	...

08012b1c <_init>:
 8012b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1e:	bf00      	nop
 8012b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b22:	bc08      	pop	{r3}
 8012b24:	469e      	mov	lr, r3
 8012b26:	4770      	bx	lr

08012b28 <_fini>:
 8012b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b2a:	bf00      	nop
 8012b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b2e:	bc08      	pop	{r3}
 8012b30:	469e      	mov	lr, r3
 8012b32:	4770      	bx	lr
