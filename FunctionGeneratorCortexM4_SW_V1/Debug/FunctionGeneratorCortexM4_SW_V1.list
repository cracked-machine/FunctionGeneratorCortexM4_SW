
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010528  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  08010708  08010708  00020708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c98  08011c98  00031ec8  2**0
                  CONTENTS
  4 .ARM          00000000  08011c98  08011c98  00031ec8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011c98  08011c98  00031ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c98  08011c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c9c  08011c9c  00021c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ec8  20000000  08011ca0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  20001ec8  08013b68  00031ec8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002998  08013b68  00032998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a52d  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c5d  00000000  00000000  0006c425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002040  00000000  00000000  00073088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c78  00000000  00000000  000750c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003339c  00000000  00000000  00076d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029a28  00000000  00000000  000aa0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125633  00000000  00000000  000d3b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f9137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d3c  00000000  00000000  001f91b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ec8 	.word	0x20001ec8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080106f0 	.word	0x080106f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ecc 	.word	0x20001ecc
 800021c:	080106f0 	.word	0x080106f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2303      	movs	r3, #3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <BiasMenu_DrawMainMenu+0x24>)
 8000c30:	f00c fac2 	bl	800d1b8 <ILI9341_Draw_Text>

}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08010708 	.word	0x08010708

08000c40 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c44:	f00c fb0a 	bl	800d25c <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f00c fef7 	bl	800da3c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c52:	f00c fd0b 	bl	800d66c <ILI9341_Fill_Screen>

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	220a      	movs	r2, #10
 8000c70:	210a      	movs	r1, #10
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <DM_PostInit+0x34>)
 8000c74:	f00c faa0 	bl	800d1b8 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f006 fff6 	bl	8007c6c <HAL_Delay>

	  DM_RefreshScreen();
 8000c80:	f000 fa52 	bl	8001128 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <DM_PostInit+0x38>)
 8000c86:	f00d fddb 	bl	800e840 <puts>
#endif


}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	08010718 	.word	0x08010718
 8000c94:	08010728 	.word	0x08010728

08000c98 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b099      	sub	sp, #100	; 0x64
 8000c9c:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000cae:	2346      	movs	r3, #70	; 0x46
 8000cb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000cb4:	2328      	movs	r3, #40	; 0x28
 8000cb6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000cca:	2346      	movs	r3, #70	; 0x46
 8000ccc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000cd0:	2346      	movs	r3, #70	; 0x46
 8000cd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000ce6:	2346      	movs	r3, #70	; 0x46
 8000ce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <_DisplayFormattedOutput+0x1f4>)
 8000cf4:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000d04:	2346      	movs	r3, #70	; 0x46
 8000d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000d0a:	2382      	movs	r3, #130	; 0x82
 8000d0c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000d10:	f003 fe42 	bl	8004998 <SM_GetOutputInHertz>
 8000d14:	ee10 3a10 	vmov	r3, s0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc3d 	bl	8000598 <__aeabi_f2d>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d26:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2a:	4a59      	ldr	r2, [pc, #356]	; (8000e90 <_DisplayFormattedOutput+0x1f8>)
 8000d2c:	210d      	movs	r1, #13
 8000d2e:	f00d fd8f 	bl	800e850 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000d32:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000d36:	b299      	uxth	r1, r3
 8000d38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f00c fa33 	bl	800d1b8 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 fdee 	bl	8004934 <SM_GetOutputChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40

	if(pTmpVppPreset)
 8000d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <_DisplayFormattedOutput+0xfc>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pTmpVppPreset->amp_value);
 8000d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc14 	bl	8000598 <__aeabi_f2d>
 8000d70:	4603      	mov	r3, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	f107 0020 	add.w	r0, r7, #32
 8000d78:	e9cd 3400 	strd	r3, r4, [sp]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <_DisplayFormattedOutput+0x1fc>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	f00d fd66 	bl	800e850 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pTmpVppPreset->gain_decibels);
 8000d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	4a42      	ldr	r2, [pc, #264]	; (8000e98 <_DisplayFormattedOutput+0x200>)
 8000d8e:	210b      	movs	r1, #11
 8000d90:	f00d fd5e 	bl	800e850 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d94:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 0020 	add.w	r0, r7, #32
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2303      	movs	r3, #3
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	f00c fa02 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000db8:	b299      	uxth	r1, r3
 8000dba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 0014 	add.w	r0, r7, #20
 8000dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2303      	movs	r3, #3
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f00c f9f2 	bl	800d1b8 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000dd4:	f003 f872 	bl	8003ebc <BO_GetOutputBias>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <_DisplayFormattedOutput+0x14e>
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	657b      	str	r3, [r7, #84]	; 0x54
 8000de4:	e00b      	b.n	8000dfe <_DisplayFormattedOutput+0x166>
 8000de6:	f003 f869 	bl	8003ebc <BO_GetOutputBias>
 8000dea:	ee07 0a90 	vmov	s15, r0
 8000dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000dfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e00:	f7ff fbca 	bl	8000598 <__aeabi_f2d>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	e9cd 3400 	strd	r3, r4, [sp]
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <_DisplayFormattedOutput+0x204>)
 8000e12:	210a      	movs	r1, #10
 8000e14:	f00d fd1c 	bl	800e850 <sniprintf>
	if(BO_GetBiasPolarity())
 8000e18:	f002 fff0 	bl	8003dfc <BO_GetBiasPolarity>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d018      	beq.n	8000e54 <_DisplayFormattedOutput+0x1bc>
	{
		char symbol[2] = "+\0";
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <_DisplayFormattedOutput+0x208>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00d fd41 	bl	800e8b8 <strcat>
 8000e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f00c f9b3 	bl	800d1b8 <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e52:	e017      	b.n	8000e84 <_DisplayFormattedOutput+0x1ec>
		char symbol[2] = "-\0";
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_DisplayFormattedOutput+0x20c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00d fd28 	bl	800e8b8 <strcat>
 8000e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f00c f99a 	bl	800d1b8 <ILI9341_Draw_Text>
}
 8000e84:	bf00      	nop
 8000e86:	375c      	adds	r7, #92	; 0x5c
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	3a449ba6 	.word	0x3a449ba6
 8000e90:	08010738 	.word	0x08010738
 8000e94:	08010744 	.word	0x08010744
 8000e98:	08010750 	.word	0x08010750
 8000e9c:	08010754 	.word	0x08010754
 8000ea0:	0801075c 	.word	0x0801075c
 8000ea4:	08010760 	.word	0x08010760

08000ea8 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8

	// Function menus
	if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000eae:	f002 fda5 	bl	80039fc <FuncMenu_getStatus>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01a      	beq.n	8000eee <DM_UpdateDisplay+0x46>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("FuncMenu_DrawMenu\n");
 8000eb8:	4879      	ldr	r0, [pc, #484]	; (80010a0 <DM_UpdateDisplay+0x1f8>)
 8000eba:	f00d fcc1 	bl	800e840 <puts>
#endif

		switch(FuncMenu_getStatus())
 8000ebe:	f002 fd9d 	bl	80039fc <FuncMenu_getStatus>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00a      	beq.n	8000ede <DM_UpdateDisplay+0x36>
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d00c      	beq.n	8000ee6 <DM_UpdateDisplay+0x3e>
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d000      	beq.n	8000ed2 <DM_UpdateDisplay+0x2a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000ed0:	e0b7      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				_DisplayFormattedOutput();
 8000ed2:	f7ff fee1 	bl	8000c98 <_DisplayFormattedOutput>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f001 fd78 	bl	80029cc <FuncMenu_DrawMenu>
				break;
 8000edc:	e0b1      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f001 fd74 	bl	80029cc <FuncMenu_DrawMenu>
				break;
 8000ee4:	e0ad      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f001 fd70 	bl	80029cc <FuncMenu_DrawMenu>
				break;
 8000eec:	e0a9      	b.n	8001042 <DM_UpdateDisplay+0x19a>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000eee:	f002 fe87 	bl	8003c00 <GainMenu_getStatus>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01e      	beq.n	8000f36 <DM_UpdateDisplay+0x8e>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("GainMenu_DrawMenu\n");
 8000ef8:	486a      	ldr	r0, [pc, #424]	; (80010a4 <DM_UpdateDisplay+0x1fc>)
 8000efa:	f00d fca1 	bl	800e840 <puts>
#endif
		switch(GainMenu_getStatus())
 8000efe:	f002 fe7f 	bl	8003c00 <GainMenu_getStatus>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d00a      	beq.n	8000f1e <DM_UpdateDisplay+0x76>
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d00e      	beq.n	8000f2a <DM_UpdateDisplay+0x82>
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d000      	beq.n	8000f12 <DM_UpdateDisplay+0x6a>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000f10:	e097      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				_DisplayFormattedOutput();
 8000f12:	f7ff fec1 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f002 f978 	bl	800320c <GainMenu_DrawMenu>
				break;
 8000f1c:	e091      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				_DisplayFormattedOutput();
 8000f1e:	f7ff febb 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f002 f972 	bl	800320c <GainMenu_DrawMenu>
				break;
 8000f28:	e08b      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				_DisplayFormattedOutput();
 8000f2a:	f7ff feb5 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f002 f96c 	bl	800320c <GainMenu_DrawMenu>
				break;
 8000f34:	e085      	b.n	8001042 <DM_UpdateDisplay+0x19a>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000f36:	f002 fc47 	bl	80037c8 <FreqMenu_getStatus>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d033      	beq.n	8000fa8 <DM_UpdateDisplay+0x100>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("FreqMenu_DrawMenu\n");
 8000f40:	4859      	ldr	r0, [pc, #356]	; (80010a8 <DM_UpdateDisplay+0x200>)
 8000f42:	f00d fc7d 	bl	800e840 <puts>
#endif

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000f46:	2300      	movs	r3, #0
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f52:	220a      	movs	r2, #10
 8000f54:	211e      	movs	r1, #30
 8000f56:	4855      	ldr	r0, [pc, #340]	; (80010ac <DM_UpdateDisplay+0x204>)
 8000f58:	f00c f92e 	bl	800d1b8 <ILI9341_Draw_Text>

		switch(FreqMenu_getStatus())
 8000f5c:	f002 fc34 	bl	80037c8 <FreqMenu_getStatus>
 8000f60:	4603      	mov	r3, r0
 8000f62:	3b01      	subs	r3, #1
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d86b      	bhi.n	8001040 <DM_UpdateDisplay+0x198>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <DM_UpdateDisplay+0xc8>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f8d 	.word	0x08000f8d
 8000f78:	08000f95 	.word	0x08000f95
 8000f7c:	08000fa1 	.word	0x08000fa1
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000f80:	f7ff fe8a 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 f99f 	bl	80012c8 <FreqMenu_DrawMenu>

				break;
 8000f8a:	e05a      	b.n	8001042 <DM_UpdateDisplay+0x19a>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f000 f99b 	bl	80012c8 <FreqMenu_DrawMenu>
				break;
 8000f92:	e056      	b.n	8001042 <DM_UpdateDisplay+0x19a>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000f94:	f7ff fe80 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f995 	bl	80012c8 <FreqMenu_DrawMenu>

				break;
 8000f9e:	e050      	b.n	8001042 <DM_UpdateDisplay+0x19a>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f000 f991 	bl	80012c8 <FreqMenu_DrawMenu>
				break;
 8000fa6:	e04c      	b.n	8001042 <DM_UpdateDisplay+0x19a>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000fa8:	f002 f9b8 	bl	800331c <BiasMenu_getStatus>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d008      	beq.n	8000fc4 <DM_UpdateDisplay+0x11c>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("BiasMenu_DrawMenu\n");
 8000fb2:	483f      	ldr	r0, [pc, #252]	; (80010b0 <DM_UpdateDisplay+0x208>)
 8000fb4:	f00d fc44 	bl	800e840 <puts>
#endif

		_DisplayFormattedOutput();
 8000fb8:	f7ff fe6e 	bl	8000c98 <_DisplayFormattedOutput>
		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fe1b 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000fc2:	e03e      	b.n	8001042 <DM_UpdateDisplay+0x19a>
	}
	else
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("Drawing Main screen\n");
 8000fc4:	483b      	ldr	r0, [pc, #236]	; (80010b4 <DM_UpdateDisplay+0x20c>)
 8000fc6:	f00d fc3b 	bl	800e840 <puts>
#endif
		// Main screen
		ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 3, BLACK);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd6:	220a      	movs	r2, #10
 8000fd8:	210a      	movs	r1, #10
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <DM_UpdateDisplay+0x210>)
 8000fdc:	f00c f8ec 	bl	800d1b8 <ILI9341_Draw_Text>
		_DisplayFormattedOutput();
 8000fe0:	f7ff fe5a 	bl	8000c98 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000fe4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	2302      	movs	r3, #2
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	22d2      	movs	r2, #210	; 0xd2
 8000ff2:	210a      	movs	r1, #10
 8000ff4:	4831      	ldr	r0, [pc, #196]	; (80010bc <DM_UpdateDisplay+0x214>)
 8000ff6:	f00c f8df 	bl	800d1b8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000ffa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	2302      	movs	r3, #2
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2300      	movs	r3, #0
 8001006:	22d2      	movs	r2, #210	; 0xd2
 8001008:	2164      	movs	r1, #100	; 0x64
 800100a:	482d      	ldr	r0, [pc, #180]	; (80010c0 <DM_UpdateDisplay+0x218>)
 800100c:	f00c f8d4 	bl	800d1b8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8001010:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	2302      	movs	r3, #2
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	22d2      	movs	r2, #210	; 0xd2
 800101e:	21af      	movs	r1, #175	; 0xaf
 8001020:	4828      	ldr	r0, [pc, #160]	; (80010c4 <DM_UpdateDisplay+0x21c>)
 8001022:	f00c f8c9 	bl	800d1b8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8001026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2302      	movs	r3, #2
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	22d2      	movs	r2, #210	; 0xd2
 8001034:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <DM_UpdateDisplay+0x220>)
 800103a:	f00c f8bd 	bl	800d1b8 <ILI9341_Draw_Text>
 800103e:	e000      	b.n	8001042 <DM_UpdateDisplay+0x19a>
				break;
 8001040:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <DM_UpdateDisplay+0x224>)
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	b29b      	uxth	r3, r3
 8001050:	4639      	mov	r1, r7
 8001052:	2205      	movs	r2, #5
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8b1 	bl	80011bc <DM_AddDigitPadding>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10b      	bne.n	8001078 <DM_UpdateDisplay+0x1d0>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 8001060:	4638      	mov	r0, r7
 8001062:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2301      	movs	r3, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	22be      	movs	r2, #190	; 0xbe
 8001070:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001074:	f00c f8a0 	bl	800d1b8 <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <DM_UpdateDisplay+0x228>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00a      	beq.n	8001096 <DM_UpdateDisplay+0x1ee>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8001080:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2301      	movs	r3, #1
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	22be      	movs	r2, #190	; 0xbe
 800108e:	210a      	movs	r1, #10
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <DM_UpdateDisplay+0x228>)
 8001092:	f00c f891 	bl	800d1b8 <ILI9341_Draw_Text>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08010764 	.word	0x08010764
 80010a4:	08010778 	.word	0x08010778
 80010a8:	0801078c 	.word	0x0801078c
 80010ac:	080107a0 	.word	0x080107a0
 80010b0:	080107b0 	.word	0x080107b0
 80010b4:	080107c4 	.word	0x080107c4
 80010b8:	080107d8 	.word	0x080107d8
 80010bc:	080107ec 	.word	0x080107ec
 80010c0:	080107f4 	.word	0x080107f4
 80010c4:	080107fc 	.word	0x080107fc
 80010c8:	08010804 	.word	0x08010804
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	20001ee4 	.word	0x20001ee4

080010d4 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b09      	cmp	r3, #9
 80010e0:	dc01      	bgt.n	80010e6 <DM_DigitCount+0x12>
		return 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e018      	b.n	8001118 <DM_DigitCount+0x44>
	if(num < 100)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b63      	cmp	r3, #99	; 0x63
 80010ea:	dc01      	bgt.n	80010f0 <DM_DigitCount+0x1c>
		return 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	e013      	b.n	8001118 <DM_DigitCount+0x44>
	if(num < 1000)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010f6:	da01      	bge.n	80010fc <DM_DigitCount+0x28>
		return 3;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e00d      	b.n	8001118 <DM_DigitCount+0x44>
	if(num < 10000)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001102:	4293      	cmp	r3, r2
 8001104:	dc01      	bgt.n	800110a <DM_DigitCount+0x36>
		return 4;
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <DM_DigitCount+0x44>
	if(num < 100000)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <DM_DigitCount+0x50>)
 800110e:	4293      	cmp	r3, r2
 8001110:	dc01      	bgt.n	8001116 <DM_DigitCount+0x42>
		return 5;
 8001112:	2305      	movs	r3, #5
 8001114:	e000      	b.n	8001118 <DM_DigitCount+0x44>
	else
		return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	0001869f 	.word	0x0001869f

08001128 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <DM_RefreshScreen+0x8c>)
 8001130:	f00a fc00 	bl	800b934 <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8001134:	f00c f86e 	bl	800d214 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <DM_RefreshScreen+0x90>)
 800113a:	8818      	ldrh	r0, [r3, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	2302      	movs	r3, #2
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2332      	movs	r3, #50	; 0x32
 800114c:	2250      	movs	r2, #80	; 0x50
 800114e:	21c8      	movs	r1, #200	; 0xc8
 8001150:	f00b fec8 	bl	800cee4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <DM_RefreshScreen+0x90>)
 8001156:	8858      	ldrh	r0, [r3, #2]
 8001158:	2300      	movs	r3, #0
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2302      	movs	r3, #2
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2332      	movs	r3, #50	; 0x32
 8001168:	2250      	movs	r2, #80	; 0x50
 800116a:	21c8      	movs	r1, #200	; 0xc8
 800116c:	f00b feba 	bl	800cee4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <DM_RefreshScreen+0x90>)
 8001172:	8898      	ldrh	r0, [r3, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2302      	movs	r3, #2
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2332      	movs	r3, #50	; 0x32
 8001184:	2250      	movs	r2, #80	; 0x50
 8001186:	21c8      	movs	r1, #200	; 0xc8
 8001188:	f00b feac 	bl	800cee4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <DM_RefreshScreen+0x90>)
 800118e:	88d8      	ldrh	r0, [r3, #6]
 8001190:	2300      	movs	r3, #0
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2302      	movs	r3, #2
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2332      	movs	r3, #50	; 0x32
 80011a0:	2250      	movs	r2, #80	; 0x50
 80011a2:	21c8      	movs	r1, #200	; 0xc8
 80011a4:	f00b fe9e 	bl	800cee4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DM_RefreshScreen+0x8c>)
 80011aa:	f00a fb8d 	bl	800b8c8 <HAL_TIM_Base_Start_IT>
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000277c 	.word	0x2000277c
 80011b8:	20000000 	.word	0x20000000

080011bc <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <DM_AddDigitPadding+0x1c>
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d904      	bls.n	80011e2 <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 80011d8:	482a      	ldr	r0, [pc, #168]	; (8001284 <DM_AddDigitPadding+0xc8>)
 80011da:	f000 f863 	bl	80012a4 <DM_SetErrorDebugMsg>
		return 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	e04c      	b.n	800127c <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff73 	bl	80010d4 <DM_DigitCount>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d83f      	bhi.n	8001274 <DM_AddDigitPadding+0xb8>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <DM_AddDigitPadding+0x40>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	08001215 	.word	0x08001215
 8001200:	08001225 	.word	0x08001225
 8001204:	08001235 	.word	0x08001235
 8001208:	08001245 	.word	0x08001245
 800120c:	08001255 	.word	0x08001255
 8001210:	08001265 	.word	0x08001265
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <DM_AddDigitPadding+0xcc>)
 8001218:	4619      	mov	r1, r3
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f00d fb18 	bl	800e850 <sniprintf>
			return 0;
 8001220:	2300      	movs	r3, #0
 8001222:	e02b      	b.n	800127c <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8001224:	88b9      	ldrh	r1, [r7, #4]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <DM_AddDigitPadding+0xd0>)
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f00d fb10 	bl	800e850 <sniprintf>
			return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e023      	b.n	800127c <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001234:	88b9      	ldrh	r1, [r7, #4]
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <DM_AddDigitPadding+0xd4>)
 800123a:	6838      	ldr	r0, [r7, #0]
 800123c:	f00d fb08 	bl	800e850 <sniprintf>
			return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e01b      	b.n	800127c <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001244:	88b9      	ldrh	r1, [r7, #4]
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <DM_AddDigitPadding+0xd8>)
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f00d fb00 	bl	800e850 <sniprintf>
			return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e013      	b.n	800127c <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001254:	88b9      	ldrh	r1, [r7, #4]
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <DM_AddDigitPadding+0xdc>)
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f00d faf8 	bl	800e850 <sniprintf>
			return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e00b      	b.n	800127c <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001264:	88b9      	ldrh	r1, [r7, #4]
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <DM_AddDigitPadding+0xe0>)
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f00d faf0 	bl	800e850 <sniprintf>
			return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e003      	b.n	800127c <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <DM_AddDigitPadding+0xe4>)
 8001276:	f000 f815 	bl	80012a4 <DM_SetErrorDebugMsg>
	return 2;
 800127a:	2302      	movs	r3, #2


}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0801080c 	.word	0x0801080c
 8001288:	0801083c 	.word	0x0801083c
 800128c:	08010844 	.word	0x08010844
 8001290:	0801084c 	.word	0x0801084c
 8001294:	08010854 	.word	0x08010854
 8001298:	0801085c 	.word	0x0801085c
 800129c:	08010860 	.word	0x08010860
 80012a0:	08010864 	.word	0x08010864

080012a4 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DM_SetErrorDebugMsg+0x1c>)
 80012b0:	212d      	movs	r1, #45	; 0x2d
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DM_SetErrorDebugMsg+0x20>)
 80012b4:	f00d facc 	bl	800e850 <sniprintf>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	08010750 	.word	0x08010750
 80012c4:	20001ee4 	.word	0x20001ee4

080012c8 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d816      	bhi.n	8001308 <FreqMenu_DrawMenu+0x40>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <FreqMenu_DrawMenu+0x18>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	080012f7 	.word	0x080012f7
 80012e8:	080012fd 	.word	0x080012fd
 80012ec:	08001303 	.word	0x08001303
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80012f0:	f000 f810 	bl	8001314 <FreqMenu_DrawMainMenu>
			break;
 80012f4:	e009      	b.n	800130a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80012f6:	f000 f847 	bl	8001388 <FreqMenu_DrawPresetMenu>
			break;
 80012fa:	e006      	b.n	800130a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80012fc:	f001 faca 	bl	8002894 <FreqMenu_DrawAdjustMenu>
			break;
 8001300:	e003      	b.n	800130a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001302:	f001 faf7 	bl	80028f4 <FreqMenu_DrawSweepMenu>
			break;
 8001306:	e000      	b.n	800130a <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001308:	bf00      	nop

	}
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop

08001314 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 800131a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	2302      	movs	r3, #2
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	22a5      	movs	r2, #165	; 0xa5
 8001328:	211e      	movs	r1, #30
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <FreqMenu_DrawMainMenu+0x64>)
 800132c:	f00b ff44 	bl	800d1b8 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 8001330:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2302      	movs	r3, #2
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	22d2      	movs	r2, #210	; 0xd2
 800133e:	2105      	movs	r1, #5
 8001340:	480e      	ldr	r0, [pc, #56]	; (800137c <FreqMenu_DrawMainMenu+0x68>)
 8001342:	f00b ff39 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001346:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	2302      	movs	r3, #2
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	22d2      	movs	r2, #210	; 0xd2
 8001354:	2157      	movs	r1, #87	; 0x57
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <FreqMenu_DrawMainMenu+0x6c>)
 8001358:	f00b ff2e 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 800135c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2302      	movs	r3, #2
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	22d2      	movs	r2, #210	; 0xd2
 800136a:	21ae      	movs	r1, #174	; 0xae
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <FreqMenu_DrawMainMenu+0x70>)
 800136e:	f00b ff23 	bl	800d1b8 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08010888 	.word	0x08010888
 800137c:	080108a0 	.word	0x080108a0
 8001380:	080108a8 	.word	0x080108a8
 8001384:	080108b0 	.word	0x080108b0

08001388 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 800138e:	2332      	movs	r3, #50	; 0x32
 8001390:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 8001392:	2346      	movs	r3, #70	; 0x46
 8001394:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001396:	235a      	movs	r3, #90	; 0x5a
 8001398:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 800139a:	236e      	movs	r3, #110	; 0x6e
 800139c:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 800139e:	2382      	movs	r3, #130	; 0x82
 80013a0:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 80013a2:	2396      	movs	r3, #150	; 0x96
 80013a4:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 80013a6:	23aa      	movs	r3, #170	; 0xaa
 80013a8:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80013aa:	f002 ff3d 	bl	8004228 <FreqO_GetFPresetObject>
 80013ae:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f001 823f 	beq.w	8002836 <FreqMenu_DrawPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f000 8499 	beq.w	8001cf8 <FreqMenu_DrawPresetMenu+0x970>
 80013c6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d817      	bhi.n	80013fe <FreqMenu_DrawPresetMenu+0x76>
 80013ce:	2b32      	cmp	r3, #50	; 0x32
 80013d0:	f000 81b2 	beq.w	8001738 <FreqMenu_DrawPresetMenu+0x3b0>
 80013d4:	2b32      	cmp	r3, #50	; 0x32
 80013d6:	d806      	bhi.n	80013e6 <FreqMenu_DrawPresetMenu+0x5e>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d038      	beq.n	800144e <FreqMenu_DrawPresetMenu+0xc6>
 80013dc:	2b0a      	cmp	r3, #10
 80013de:	f000 80e0 	beq.w	80015a2 <FreqMenu_DrawPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80013e2:	f001 ba34 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013e6:	2bfa      	cmp	r3, #250	; 0xfa
 80013e8:	f000 8316 	beq.w	8001a18 <FreqMenu_DrawPresetMenu+0x690>
 80013ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f0:	f000 83bc 	beq.w	8001b6c <FreqMenu_DrawPresetMenu+0x7e4>
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	f000 8249 	beq.w	800188c <FreqMenu_DrawPresetMenu+0x504>
}
 80013fa:	f001 ba28 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001402:	4293      	cmp	r3, r2
 8001404:	f000 8756 	beq.w	80022b4 <FreqMenu_DrawPresetMenu+0xf2c>
 8001408:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800140c:	4293      	cmp	r3, r2
 800140e:	d80f      	bhi.n	8001430 <FreqMenu_DrawPresetMenu+0xa8>
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 85df 	beq.w	8001fd8 <FreqMenu_DrawPresetMenu+0xc50>
 800141a:	f242 7210 	movw	r2, #10000	; 0x2710
 800141e:	4293      	cmp	r3, r2
 8001420:	f000 8683 	beq.w	800212a <FreqMenu_DrawPresetMenu+0xda2>
 8001424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001428:	f000 8510 	beq.w	8001e4c <FreqMenu_DrawPresetMenu+0xac4>
}
 800142c:	f001 ba0f 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001430:	4ab1      	ldr	r2, [pc, #708]	; (80016f8 <FreqMenu_DrawPresetMenu+0x370>)
 8001432:	4293      	cmp	r3, r2
 8001434:	f001 80ac 	beq.w	8002590 <FreqMenu_DrawPresetMenu+0x1208>
 8001438:	4ab0      	ldr	r2, [pc, #704]	; (80016fc <FreqMenu_DrawPresetMenu+0x374>)
 800143a:	4293      	cmp	r3, r2
 800143c:	f001 8151 	beq.w	80026e2 <FreqMenu_DrawPresetMenu+0x135a>
 8001440:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001444:	4293      	cmp	r3, r2
 8001446:	f000 87de 	beq.w	8002406 <FreqMenu_DrawPresetMenu+0x107e>
}
 800144a:	f001 ba00 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	b29a      	uxth	r2, r3
 8001452:	2300      	movs	r3, #0
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	2302      	movs	r3, #2
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145e:	210a      	movs	r1, #10
 8001460:	48a7      	ldr	r0, [pc, #668]	; (8001700 <FreqMenu_DrawPresetMenu+0x378>)
 8001462:	f00b fea9 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	b29a      	uxth	r2, r3
 800146a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2302      	movs	r3, #2
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	210a      	movs	r1, #10
 8001478:	48a2      	ldr	r0, [pc, #648]	; (8001704 <FreqMenu_DrawPresetMenu+0x37c>)
 800147a:	f00b fe9d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	b29a      	uxth	r2, r3
 8001482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2302      	movs	r3, #2
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	210a      	movs	r1, #10
 8001490:	489d      	ldr	r0, [pc, #628]	; (8001708 <FreqMenu_DrawPresetMenu+0x380>)
 8001492:	f00b fe91 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	210a      	movs	r1, #10
 80014a8:	4898      	ldr	r0, [pc, #608]	; (800170c <FreqMenu_DrawPresetMenu+0x384>)
 80014aa:	f00b fe85 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2302      	movs	r3, #2
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	210a      	movs	r1, #10
 80014c0:	4893      	ldr	r0, [pc, #588]	; (8001710 <FreqMenu_DrawPresetMenu+0x388>)
 80014c2:	f00b fe79 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80014c6:	7abb      	ldrb	r3, [r7, #10]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	210a      	movs	r1, #10
 80014d8:	488e      	ldr	r0, [pc, #568]	; (8001714 <FreqMenu_DrawPresetMenu+0x38c>)
 80014da:	f00b fe6d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80014de:	7a7b      	ldrb	r3, [r7, #9]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2302      	movs	r3, #2
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2300      	movs	r3, #0
 80014ee:	210a      	movs	r1, #10
 80014f0:	4889      	ldr	r0, [pc, #548]	; (8001718 <FreqMenu_DrawPresetMenu+0x390>)
 80014f2:	f00b fe61 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2178      	movs	r1, #120	; 0x78
 8001508:	4884      	ldr	r0, [pc, #528]	; (800171c <FreqMenu_DrawPresetMenu+0x394>)
 800150a:	f00b fe55 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	b29a      	uxth	r2, r3
 8001512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2302      	movs	r3, #2
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2178      	movs	r1, #120	; 0x78
 8001520:	487f      	ldr	r0, [pc, #508]	; (8001720 <FreqMenu_DrawPresetMenu+0x398>)
 8001522:	f00b fe49 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2302      	movs	r3, #2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	487a      	ldr	r0, [pc, #488]	; (8001724 <FreqMenu_DrawPresetMenu+0x39c>)
 800153a:	f00b fe3d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800153e:	7b3b      	ldrb	r3, [r7, #12]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2302      	movs	r3, #2
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2178      	movs	r1, #120	; 0x78
 8001550:	4875      	ldr	r0, [pc, #468]	; (8001728 <FreqMenu_DrawPresetMenu+0x3a0>)
 8001552:	f00b fe31 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	b29a      	uxth	r2, r3
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2178      	movs	r1, #120	; 0x78
 8001568:	4870      	ldr	r0, [pc, #448]	; (800172c <FreqMenu_DrawPresetMenu+0x3a4>)
 800156a:	f00b fe25 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800156e:	7abb      	ldrb	r3, [r7, #10]
 8001570:	b29a      	uxth	r2, r3
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2302      	movs	r3, #2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2178      	movs	r1, #120	; 0x78
 8001580:	486b      	ldr	r0, [pc, #428]	; (8001730 <FreqMenu_DrawPresetMenu+0x3a8>)
 8001582:	f00b fe19 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001586:	7a7b      	ldrb	r3, [r7, #9]
 8001588:	b29a      	uxth	r2, r3
 800158a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2178      	movs	r1, #120	; 0x78
 8001598:	4866      	ldr	r0, [pc, #408]	; (8001734 <FreqMenu_DrawPresetMenu+0x3ac>)
 800159a:	f00b fe0d 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 800159e:	f001 b956 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2302      	movs	r3, #2
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	210a      	movs	r1, #10
 80015b4:	4852      	ldr	r0, [pc, #328]	; (8001700 <FreqMenu_DrawPresetMenu+0x378>)
 80015b6:	f00b fdff 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	2300      	movs	r3, #0
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2302      	movs	r3, #2
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ca:	210a      	movs	r1, #10
 80015cc:	484d      	ldr	r0, [pc, #308]	; (8001704 <FreqMenu_DrawPresetMenu+0x37c>)
 80015ce:	f00b fdf3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80015d2:	7b7b      	ldrb	r3, [r7, #13]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	210a      	movs	r1, #10
 80015e4:	4848      	ldr	r0, [pc, #288]	; (8001708 <FreqMenu_DrawPresetMenu+0x380>)
 80015e6:	f00b fde7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80015ea:	7b3b      	ldrb	r3, [r7, #12]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	2302      	movs	r3, #2
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	210a      	movs	r1, #10
 80015fc:	4843      	ldr	r0, [pc, #268]	; (800170c <FreqMenu_DrawPresetMenu+0x384>)
 80015fe:	f00b fddb 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	b29a      	uxth	r2, r3
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2302      	movs	r3, #2
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	210a      	movs	r1, #10
 8001614:	483e      	ldr	r0, [pc, #248]	; (8001710 <FreqMenu_DrawPresetMenu+0x388>)
 8001616:	f00b fdcf 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800161a:	7abb      	ldrb	r3, [r7, #10]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	210a      	movs	r1, #10
 800162c:	4839      	ldr	r0, [pc, #228]	; (8001714 <FreqMenu_DrawPresetMenu+0x38c>)
 800162e:	f00b fdc3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001632:	7a7b      	ldrb	r3, [r7, #9]
 8001634:	b29a      	uxth	r2, r3
 8001636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2302      	movs	r3, #2
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	210a      	movs	r1, #10
 8001644:	4834      	ldr	r0, [pc, #208]	; (8001718 <FreqMenu_DrawPresetMenu+0x390>)
 8001646:	f00b fdb7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2302      	movs	r3, #2
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	2178      	movs	r1, #120	; 0x78
 800165c:	482f      	ldr	r0, [pc, #188]	; (800171c <FreqMenu_DrawPresetMenu+0x394>)
 800165e:	f00b fdab 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	b29a      	uxth	r2, r3
 8001666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2302      	movs	r3, #2
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2178      	movs	r1, #120	; 0x78
 8001674:	482a      	ldr	r0, [pc, #168]	; (8001720 <FreqMenu_DrawPresetMenu+0x398>)
 8001676:	f00b fd9f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	b29a      	uxth	r2, r3
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2302      	movs	r3, #2
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2178      	movs	r1, #120	; 0x78
 800168c:	4825      	ldr	r0, [pc, #148]	; (8001724 <FreqMenu_DrawPresetMenu+0x39c>)
 800168e:	f00b fd93 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001692:	7b3b      	ldrb	r3, [r7, #12]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2302      	movs	r3, #2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2178      	movs	r1, #120	; 0x78
 80016a4:	4820      	ldr	r0, [pc, #128]	; (8001728 <FreqMenu_DrawPresetMenu+0x3a0>)
 80016a6:	f00b fd87 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2302      	movs	r3, #2
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2178      	movs	r1, #120	; 0x78
 80016bc:	481b      	ldr	r0, [pc, #108]	; (800172c <FreqMenu_DrawPresetMenu+0x3a4>)
 80016be:	f00b fd7b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80016c2:	7abb      	ldrb	r3, [r7, #10]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2178      	movs	r1, #120	; 0x78
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <FreqMenu_DrawPresetMenu+0x3a8>)
 80016d6:	f00b fd6f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80016da:	7a7b      	ldrb	r3, [r7, #9]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2302      	movs	r3, #2
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2178      	movs	r1, #120	; 0x78
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <FreqMenu_DrawPresetMenu+0x3ac>)
 80016ee:	f00b fd63 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 80016f2:	f001 b8ac 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 80016f6:	bf00      	nop
 80016f8:	000124f8 	.word	0x000124f8
 80016fc:	000186a0 	.word	0x000186a0
 8001700:	080108b8 	.word	0x080108b8
 8001704:	080108c0 	.word	0x080108c0
 8001708:	080108c8 	.word	0x080108c8
 800170c:	080108d0 	.word	0x080108d0
 8001710:	080108d8 	.word	0x080108d8
 8001714:	080108e0 	.word	0x080108e0
 8001718:	080108e8 	.word	0x080108e8
 800171c:	080108f0 	.word	0x080108f0
 8001720:	080108f8 	.word	0x080108f8
 8001724:	08010900 	.word	0x08010900
 8001728:	08010908 	.word	0x08010908
 800172c:	08010910 	.word	0x08010910
 8001730:	08010918 	.word	0x08010918
 8001734:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	b29a      	uxth	r2, r3
 800173c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	2302      	movs	r3, #2
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	210a      	movs	r1, #10
 800174a:	48a5      	ldr	r0, [pc, #660]	; (80019e0 <FreqMenu_DrawPresetMenu+0x658>)
 800174c:	f00b fd34 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	b29a      	uxth	r2, r3
 8001754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	2302      	movs	r3, #2
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	210a      	movs	r1, #10
 8001762:	48a0      	ldr	r0, [pc, #640]	; (80019e4 <FreqMenu_DrawPresetMenu+0x65c>)
 8001764:	f00b fd28 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001768:	7b7b      	ldrb	r3, [r7, #13]
 800176a:	b29a      	uxth	r2, r3
 800176c:	2300      	movs	r3, #0
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2302      	movs	r3, #2
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001778:	210a      	movs	r1, #10
 800177a:	489b      	ldr	r0, [pc, #620]	; (80019e8 <FreqMenu_DrawPresetMenu+0x660>)
 800177c:	f00b fd1c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001780:	7b3b      	ldrb	r3, [r7, #12]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2302      	movs	r3, #2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	210a      	movs	r1, #10
 8001792:	4896      	ldr	r0, [pc, #600]	; (80019ec <FreqMenu_DrawPresetMenu+0x664>)
 8001794:	f00b fd10 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	b29a      	uxth	r2, r3
 800179c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2302      	movs	r3, #2
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	210a      	movs	r1, #10
 80017aa:	4891      	ldr	r0, [pc, #580]	; (80019f0 <FreqMenu_DrawPresetMenu+0x668>)
 80017ac:	f00b fd04 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80017b0:	7abb      	ldrb	r3, [r7, #10]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2302      	movs	r3, #2
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	210a      	movs	r1, #10
 80017c2:	488c      	ldr	r0, [pc, #560]	; (80019f4 <FreqMenu_DrawPresetMenu+0x66c>)
 80017c4:	f00b fcf8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80017c8:	7a7b      	ldrb	r3, [r7, #9]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2302      	movs	r3, #2
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	210a      	movs	r1, #10
 80017da:	4887      	ldr	r0, [pc, #540]	; (80019f8 <FreqMenu_DrawPresetMenu+0x670>)
 80017dc:	f00b fcec 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2302      	movs	r3, #2
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2178      	movs	r1, #120	; 0x78
 80017f2:	4882      	ldr	r0, [pc, #520]	; (80019fc <FreqMenu_DrawPresetMenu+0x674>)
 80017f4:	f00b fce0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2302      	movs	r3, #2
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	2178      	movs	r1, #120	; 0x78
 800180a:	487d      	ldr	r0, [pc, #500]	; (8001a00 <FreqMenu_DrawPresetMenu+0x678>)
 800180c:	f00b fcd4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	b29a      	uxth	r2, r3
 8001814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2178      	movs	r1, #120	; 0x78
 8001822:	4878      	ldr	r0, [pc, #480]	; (8001a04 <FreqMenu_DrawPresetMenu+0x67c>)
 8001824:	f00b fcc8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001828:	7b3b      	ldrb	r3, [r7, #12]
 800182a:	b29a      	uxth	r2, r3
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2178      	movs	r1, #120	; 0x78
 800183a:	4873      	ldr	r0, [pc, #460]	; (8001a08 <FreqMenu_DrawPresetMenu+0x680>)
 800183c:	f00b fcbc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	b29a      	uxth	r2, r3
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2302      	movs	r3, #2
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	2178      	movs	r1, #120	; 0x78
 8001852:	486e      	ldr	r0, [pc, #440]	; (8001a0c <FreqMenu_DrawPresetMenu+0x684>)
 8001854:	f00b fcb0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001858:	7abb      	ldrb	r3, [r7, #10]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2178      	movs	r1, #120	; 0x78
 800186a:	4869      	ldr	r0, [pc, #420]	; (8001a10 <FreqMenu_DrawPresetMenu+0x688>)
 800186c:	f00b fca4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001870:	7a7b      	ldrb	r3, [r7, #9]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2302      	movs	r3, #2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2178      	movs	r1, #120	; 0x78
 8001882:	4864      	ldr	r0, [pc, #400]	; (8001a14 <FreqMenu_DrawPresetMenu+0x68c>)
 8001884:	f00b fc98 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8001888:	f000 bfe1 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	b29a      	uxth	r2, r3
 8001890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	2302      	movs	r3, #2
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	210a      	movs	r1, #10
 800189e:	4850      	ldr	r0, [pc, #320]	; (80019e0 <FreqMenu_DrawPresetMenu+0x658>)
 80018a0:	f00b fc8a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	2302      	movs	r3, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	210a      	movs	r1, #10
 80018b6:	484b      	ldr	r0, [pc, #300]	; (80019e4 <FreqMenu_DrawPresetMenu+0x65c>)
 80018b8:	f00b fc7e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80018bc:	7b7b      	ldrb	r3, [r7, #13]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2302      	movs	r3, #2
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	210a      	movs	r1, #10
 80018ce:	4846      	ldr	r0, [pc, #280]	; (80019e8 <FreqMenu_DrawPresetMenu+0x660>)
 80018d0:	f00b fc72 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e4:	210a      	movs	r1, #10
 80018e6:	4841      	ldr	r0, [pc, #260]	; (80019ec <FreqMenu_DrawPresetMenu+0x664>)
 80018e8:	f00b fc66 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2302      	movs	r3, #2
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	210a      	movs	r1, #10
 80018fe:	483c      	ldr	r0, [pc, #240]	; (80019f0 <FreqMenu_DrawPresetMenu+0x668>)
 8001900:	f00b fc5a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001904:	7abb      	ldrb	r3, [r7, #10]
 8001906:	b29a      	uxth	r2, r3
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2302      	movs	r3, #2
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	210a      	movs	r1, #10
 8001916:	4837      	ldr	r0, [pc, #220]	; (80019f4 <FreqMenu_DrawPresetMenu+0x66c>)
 8001918:	f00b fc4e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800191c:	7a7b      	ldrb	r3, [r7, #9]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	210a      	movs	r1, #10
 800192e:	4832      	ldr	r0, [pc, #200]	; (80019f8 <FreqMenu_DrawPresetMenu+0x670>)
 8001930:	f00b fc42 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	2178      	movs	r1, #120	; 0x78
 8001946:	482d      	ldr	r0, [pc, #180]	; (80019fc <FreqMenu_DrawPresetMenu+0x674>)
 8001948:	f00b fc36 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	b29a      	uxth	r2, r3
 8001950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	2178      	movs	r1, #120	; 0x78
 800195e:	4828      	ldr	r0, [pc, #160]	; (8001a00 <FreqMenu_DrawPresetMenu+0x678>)
 8001960:	f00b fc2a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2302      	movs	r3, #2
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2178      	movs	r1, #120	; 0x78
 8001976:	4823      	ldr	r0, [pc, #140]	; (8001a04 <FreqMenu_DrawPresetMenu+0x67c>)
 8001978:	f00b fc1e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800197c:	7b3b      	ldrb	r3, [r7, #12]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	2302      	movs	r3, #2
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	481e      	ldr	r0, [pc, #120]	; (8001a08 <FreqMenu_DrawPresetMenu+0x680>)
 8001990:	f00b fc12 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	2302      	movs	r3, #2
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2178      	movs	r1, #120	; 0x78
 80019a6:	4819      	ldr	r0, [pc, #100]	; (8001a0c <FreqMenu_DrawPresetMenu+0x684>)
 80019a8:	f00b fc06 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80019ac:	7abb      	ldrb	r3, [r7, #10]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <FreqMenu_DrawPresetMenu+0x688>)
 80019c0:	f00b fbfa 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	480f      	ldr	r0, [pc, #60]	; (8001a14 <FreqMenu_DrawPresetMenu+0x68c>)
 80019d8:	f00b fbee 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 80019dc:	f000 bf37 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 80019e0:	080108b8 	.word	0x080108b8
 80019e4:	080108c0 	.word	0x080108c0
 80019e8:	080108c8 	.word	0x080108c8
 80019ec:	080108d0 	.word	0x080108d0
 80019f0:	080108d8 	.word	0x080108d8
 80019f4:	080108e0 	.word	0x080108e0
 80019f8:	080108e8 	.word	0x080108e8
 80019fc:	080108f0 	.word	0x080108f0
 8001a00:	080108f8 	.word	0x080108f8
 8001a04:	08010900 	.word	0x08010900
 8001a08:	08010908 	.word	0x08010908
 8001a0c:	08010910 	.word	0x08010910
 8001a10:	08010918 	.word	0x08010918
 8001a14:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2302      	movs	r3, #2
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	210a      	movs	r1, #10
 8001a2a:	48a5      	ldr	r0, [pc, #660]	; (8001cc0 <FreqMenu_DrawPresetMenu+0x938>)
 8001a2c:	f00b fbc4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	210a      	movs	r1, #10
 8001a42:	48a0      	ldr	r0, [pc, #640]	; (8001cc4 <FreqMenu_DrawPresetMenu+0x93c>)
 8001a44:	f00b fbb8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	210a      	movs	r1, #10
 8001a5a:	489b      	ldr	r0, [pc, #620]	; (8001cc8 <FreqMenu_DrawPresetMenu+0x940>)
 8001a5c:	f00b fbac 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	210a      	movs	r1, #10
 8001a72:	4896      	ldr	r0, [pc, #600]	; (8001ccc <FreqMenu_DrawPresetMenu+0x944>)
 8001a74:	f00b fba0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a88:	210a      	movs	r1, #10
 8001a8a:	4891      	ldr	r0, [pc, #580]	; (8001cd0 <FreqMenu_DrawPresetMenu+0x948>)
 8001a8c:	f00b fb94 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a90:	7abb      	ldrb	r3, [r7, #10]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	488c      	ldr	r0, [pc, #560]	; (8001cd4 <FreqMenu_DrawPresetMenu+0x94c>)
 8001aa4:	f00b fb88 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001aa8:	7a7b      	ldrb	r3, [r7, #9]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	210a      	movs	r1, #10
 8001aba:	4887      	ldr	r0, [pc, #540]	; (8001cd8 <FreqMenu_DrawPresetMenu+0x950>)
 8001abc:	f00b fb7c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2178      	movs	r1, #120	; 0x78
 8001ad2:	4882      	ldr	r0, [pc, #520]	; (8001cdc <FreqMenu_DrawPresetMenu+0x954>)
 8001ad4:	f00b fb70 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ad8:	7bbb      	ldrb	r3, [r7, #14]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	487d      	ldr	r0, [pc, #500]	; (8001ce0 <FreqMenu_DrawPresetMenu+0x958>)
 8001aec:	f00b fb64 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001af0:	7b7b      	ldrb	r3, [r7, #13]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4878      	ldr	r0, [pc, #480]	; (8001ce4 <FreqMenu_DrawPresetMenu+0x95c>)
 8001b04:	f00b fb58 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	4873      	ldr	r0, [pc, #460]	; (8001ce8 <FreqMenu_DrawPresetMenu+0x960>)
 8001b1c:	f00b fb4c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	486e      	ldr	r0, [pc, #440]	; (8001cec <FreqMenu_DrawPresetMenu+0x964>)
 8001b34:	f00b fb40 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b38:	7abb      	ldrb	r3, [r7, #10]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4869      	ldr	r0, [pc, #420]	; (8001cf0 <FreqMenu_DrawPresetMenu+0x968>)
 8001b4c:	f00b fb34 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b50:	7a7b      	ldrb	r3, [r7, #9]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4864      	ldr	r0, [pc, #400]	; (8001cf4 <FreqMenu_DrawPresetMenu+0x96c>)
 8001b64:	f00b fb28 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8001b68:	f000 be71 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	210a      	movs	r1, #10
 8001b7e:	4850      	ldr	r0, [pc, #320]	; (8001cc0 <FreqMenu_DrawPresetMenu+0x938>)
 8001b80:	f00b fb1a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	210a      	movs	r1, #10
 8001b96:	484b      	ldr	r0, [pc, #300]	; (8001cc4 <FreqMenu_DrawPresetMenu+0x93c>)
 8001b98:	f00b fb0e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	210a      	movs	r1, #10
 8001bae:	4846      	ldr	r0, [pc, #280]	; (8001cc8 <FreqMenu_DrawPresetMenu+0x940>)
 8001bb0:	f00b fb02 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	4841      	ldr	r0, [pc, #260]	; (8001ccc <FreqMenu_DrawPresetMenu+0x944>)
 8001bc8:	f00b faf6 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	210a      	movs	r1, #10
 8001bde:	483c      	ldr	r0, [pc, #240]	; (8001cd0 <FreqMenu_DrawPresetMenu+0x948>)
 8001be0:	f00b faea 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001be4:	7abb      	ldrb	r3, [r7, #10]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	4837      	ldr	r0, [pc, #220]	; (8001cd4 <FreqMenu_DrawPresetMenu+0x94c>)
 8001bf8:	f00b fade 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bfc:	7a7b      	ldrb	r3, [r7, #9]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	4832      	ldr	r0, [pc, #200]	; (8001cd8 <FreqMenu_DrawPresetMenu+0x950>)
 8001c10:	f00b fad2 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2178      	movs	r1, #120	; 0x78
 8001c26:	482d      	ldr	r0, [pc, #180]	; (8001cdc <FreqMenu_DrawPresetMenu+0x954>)
 8001c28:	f00b fac6 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2178      	movs	r1, #120	; 0x78
 8001c3e:	4828      	ldr	r0, [pc, #160]	; (8001ce0 <FreqMenu_DrawPresetMenu+0x958>)
 8001c40:	f00b faba 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <FreqMenu_DrawPresetMenu+0x95c>)
 8001c58:	f00b faae 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	481e      	ldr	r0, [pc, #120]	; (8001ce8 <FreqMenu_DrawPresetMenu+0x960>)
 8001c70:	f00b faa2 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4819      	ldr	r0, [pc, #100]	; (8001cec <FreqMenu_DrawPresetMenu+0x964>)
 8001c88:	f00b fa96 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c8c:	7abb      	ldrb	r3, [r7, #10]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	4814      	ldr	r0, [pc, #80]	; (8001cf0 <FreqMenu_DrawPresetMenu+0x968>)
 8001ca0:	f00b fa8a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ca4:	7a7b      	ldrb	r3, [r7, #9]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <FreqMenu_DrawPresetMenu+0x96c>)
 8001cb8:	f00b fa7e 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8001cbc:	f000 bdc7 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 8001cc0:	080108b8 	.word	0x080108b8
 8001cc4:	080108c0 	.word	0x080108c0
 8001cc8:	080108c8 	.word	0x080108c8
 8001ccc:	080108d0 	.word	0x080108d0
 8001cd0:	080108d8 	.word	0x080108d8
 8001cd4:	080108e0 	.word	0x080108e0
 8001cd8:	080108e8 	.word	0x080108e8
 8001cdc:	080108f0 	.word	0x080108f0
 8001ce0:	080108f8 	.word	0x080108f8
 8001ce4:	08010900 	.word	0x08010900
 8001ce8:	08010908 	.word	0x08010908
 8001cec:	08010910 	.word	0x08010910
 8001cf0:	08010918 	.word	0x08010918
 8001cf4:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2302      	movs	r3, #2
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	210a      	movs	r1, #10
 8001d0a:	48a5      	ldr	r0, [pc, #660]	; (8001fa0 <FreqMenu_DrawPresetMenu+0xc18>)
 8001d0c:	f00b fa54 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	210a      	movs	r1, #10
 8001d22:	48a0      	ldr	r0, [pc, #640]	; (8001fa4 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001d24:	f00b fa48 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	210a      	movs	r1, #10
 8001d3a:	489b      	ldr	r0, [pc, #620]	; (8001fa8 <FreqMenu_DrawPresetMenu+0xc20>)
 8001d3c:	f00b fa3c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	210a      	movs	r1, #10
 8001d52:	4896      	ldr	r0, [pc, #600]	; (8001fac <FreqMenu_DrawPresetMenu+0xc24>)
 8001d54:	f00b fa30 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2302      	movs	r3, #2
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	210a      	movs	r1, #10
 8001d6a:	4891      	ldr	r0, [pc, #580]	; (8001fb0 <FreqMenu_DrawPresetMenu+0xc28>)
 8001d6c:	f00b fa24 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d70:	7abb      	ldrb	r3, [r7, #10]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	210a      	movs	r1, #10
 8001d82:	488c      	ldr	r0, [pc, #560]	; (8001fb4 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001d84:	f00b fa18 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001d88:	7a7b      	ldrb	r3, [r7, #9]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d98:	210a      	movs	r1, #10
 8001d9a:	4887      	ldr	r0, [pc, #540]	; (8001fb8 <FreqMenu_DrawPresetMenu+0xc30>)
 8001d9c:	f00b fa0c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2178      	movs	r1, #120	; 0x78
 8001db2:	4882      	ldr	r0, [pc, #520]	; (8001fbc <FreqMenu_DrawPresetMenu+0xc34>)
 8001db4:	f00b fa00 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	487d      	ldr	r0, [pc, #500]	; (8001fc0 <FreqMenu_DrawPresetMenu+0xc38>)
 8001dcc:	f00b f9f4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4878      	ldr	r0, [pc, #480]	; (8001fc4 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001de4:	f00b f9e8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001de8:	7b3b      	ldrb	r3, [r7, #12]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	4873      	ldr	r0, [pc, #460]	; (8001fc8 <FreqMenu_DrawPresetMenu+0xc40>)
 8001dfc:	f00b f9dc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	486e      	ldr	r0, [pc, #440]	; (8001fcc <FreqMenu_DrawPresetMenu+0xc44>)
 8001e14:	f00b f9d0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e18:	7abb      	ldrb	r3, [r7, #10]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4869      	ldr	r0, [pc, #420]	; (8001fd0 <FreqMenu_DrawPresetMenu+0xc48>)
 8001e2c:	f00b f9c4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e30:	7a7b      	ldrb	r3, [r7, #9]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4864      	ldr	r0, [pc, #400]	; (8001fd4 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001e44:	f00b f9b8 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8001e48:	f000 bd01 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	2302      	movs	r3, #2
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	4850      	ldr	r0, [pc, #320]	; (8001fa0 <FreqMenu_DrawPresetMenu+0xc18>)
 8001e60:	f00b f9aa 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	210a      	movs	r1, #10
 8001e76:	484b      	ldr	r0, [pc, #300]	; (8001fa4 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001e78:	f00b f99e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	4846      	ldr	r0, [pc, #280]	; (8001fa8 <FreqMenu_DrawPresetMenu+0xc20>)
 8001e90:	f00b f992 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e94:	7b3b      	ldrb	r3, [r7, #12]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	4841      	ldr	r0, [pc, #260]	; (8001fac <FreqMenu_DrawPresetMenu+0xc24>)
 8001ea8:	f00b f986 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	210a      	movs	r1, #10
 8001ebe:	483c      	ldr	r0, [pc, #240]	; (8001fb0 <FreqMenu_DrawPresetMenu+0xc28>)
 8001ec0:	f00b f97a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001ec4:	7abb      	ldrb	r3, [r7, #10]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	4837      	ldr	r0, [pc, #220]	; (8001fb4 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001ed8:	f00b f96e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	210a      	movs	r1, #10
 8001eee:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <FreqMenu_DrawPresetMenu+0xc30>)
 8001ef0:	f00b f962 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	2302      	movs	r3, #2
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f04:	2178      	movs	r1, #120	; 0x78
 8001f06:	482d      	ldr	r0, [pc, #180]	; (8001fbc <FreqMenu_DrawPresetMenu+0xc34>)
 8001f08:	f00b f956 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2178      	movs	r1, #120	; 0x78
 8001f1e:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <FreqMenu_DrawPresetMenu+0xc38>)
 8001f20:	f00b f94a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f24:	7b7b      	ldrb	r3, [r7, #13]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001f38:	f00b f93e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f3c:	7b3b      	ldrb	r3, [r7, #12]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <FreqMenu_DrawPresetMenu+0xc40>)
 8001f50:	f00b f932 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4819      	ldr	r0, [pc, #100]	; (8001fcc <FreqMenu_DrawPresetMenu+0xc44>)
 8001f68:	f00b f926 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f6c:	7abb      	ldrb	r3, [r7, #10]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <FreqMenu_DrawPresetMenu+0xc48>)
 8001f80:	f00b f91a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f84:	7a7b      	ldrb	r3, [r7, #9]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	480f      	ldr	r0, [pc, #60]	; (8001fd4 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001f98:	f00b f90e 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8001f9c:	f000 bc57 	b.w	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 8001fa0:	080108b8 	.word	0x080108b8
 8001fa4:	080108c0 	.word	0x080108c0
 8001fa8:	080108c8 	.word	0x080108c8
 8001fac:	080108d0 	.word	0x080108d0
 8001fb0:	080108d8 	.word	0x080108d8
 8001fb4:	080108e0 	.word	0x080108e0
 8001fb8:	080108e8 	.word	0x080108e8
 8001fbc:	080108f0 	.word	0x080108f0
 8001fc0:	080108f8 	.word	0x080108f8
 8001fc4:	08010900 	.word	0x08010900
 8001fc8:	08010908 	.word	0x08010908
 8001fcc:	08010910 	.word	0x08010910
 8001fd0:	08010918 	.word	0x08010918
 8001fd4:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	210a      	movs	r1, #10
 8001fea:	48a4      	ldr	r0, [pc, #656]	; (800227c <FreqMenu_DrawPresetMenu+0xef4>)
 8001fec:	f00b f8e4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	210a      	movs	r1, #10
 8002002:	489f      	ldr	r0, [pc, #636]	; (8002280 <FreqMenu_DrawPresetMenu+0xef8>)
 8002004:	f00b f8d8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002008:	7b7b      	ldrb	r3, [r7, #13]
 800200a:	b29a      	uxth	r2, r3
 800200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2302      	movs	r3, #2
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	210a      	movs	r1, #10
 800201a:	489a      	ldr	r0, [pc, #616]	; (8002284 <FreqMenu_DrawPresetMenu+0xefc>)
 800201c:	f00b f8cc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	b29a      	uxth	r2, r3
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	2302      	movs	r3, #2
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	210a      	movs	r1, #10
 8002032:	4895      	ldr	r0, [pc, #596]	; (8002288 <FreqMenu_DrawPresetMenu+0xf00>)
 8002034:	f00b f8c0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2302      	movs	r3, #2
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	210a      	movs	r1, #10
 800204a:	4890      	ldr	r0, [pc, #576]	; (800228c <FreqMenu_DrawPresetMenu+0xf04>)
 800204c:	f00b f8b4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002050:	7abb      	ldrb	r3, [r7, #10]
 8002052:	b29a      	uxth	r2, r3
 8002054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2302      	movs	r3, #2
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	210a      	movs	r1, #10
 8002062:	488b      	ldr	r0, [pc, #556]	; (8002290 <FreqMenu_DrawPresetMenu+0xf08>)
 8002064:	f00b f8a8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002068:	7a7b      	ldrb	r3, [r7, #9]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	210a      	movs	r1, #10
 800207a:	4886      	ldr	r0, [pc, #536]	; (8002294 <FreqMenu_DrawPresetMenu+0xf0c>)
 800207c:	f00b f89c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2178      	movs	r1, #120	; 0x78
 8002092:	4881      	ldr	r0, [pc, #516]	; (8002298 <FreqMenu_DrawPresetMenu+0xf10>)
 8002094:	f00b f890 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	487c      	ldr	r0, [pc, #496]	; (800229c <FreqMenu_DrawPresetMenu+0xf14>)
 80020ac:	f00b f884 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4877      	ldr	r0, [pc, #476]	; (80022a0 <FreqMenu_DrawPresetMenu+0xf18>)
 80020c4:	f00b f878 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020c8:	7b3b      	ldrb	r3, [r7, #12]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	4872      	ldr	r0, [pc, #456]	; (80022a4 <FreqMenu_DrawPresetMenu+0xf1c>)
 80020dc:	f00b f86c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	486d      	ldr	r0, [pc, #436]	; (80022a8 <FreqMenu_DrawPresetMenu+0xf20>)
 80020f4:	f00b f860 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020f8:	7abb      	ldrb	r3, [r7, #10]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2302      	movs	r3, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4868      	ldr	r0, [pc, #416]	; (80022ac <FreqMenu_DrawPresetMenu+0xf24>)
 800210c:	f00b f854 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002110:	7a7b      	ldrb	r3, [r7, #9]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2302      	movs	r3, #2
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	4863      	ldr	r0, [pc, #396]	; (80022b0 <FreqMenu_DrawPresetMenu+0xf28>)
 8002124:	f00b f848 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002128:	e391      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	b29a      	uxth	r2, r3
 800212e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2302      	movs	r3, #2
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	210a      	movs	r1, #10
 800213c:	484f      	ldr	r0, [pc, #316]	; (800227c <FreqMenu_DrawPresetMenu+0xef4>)
 800213e:	f00b f83b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002142:	7bbb      	ldrb	r3, [r7, #14]
 8002144:	b29a      	uxth	r2, r3
 8002146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	2302      	movs	r3, #2
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	210a      	movs	r1, #10
 8002154:	484a      	ldr	r0, [pc, #296]	; (8002280 <FreqMenu_DrawPresetMenu+0xef8>)
 8002156:	f00b f82f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800215a:	7b7b      	ldrb	r3, [r7, #13]
 800215c:	b29a      	uxth	r2, r3
 800215e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	210a      	movs	r1, #10
 800216c:	4845      	ldr	r0, [pc, #276]	; (8002284 <FreqMenu_DrawPresetMenu+0xefc>)
 800216e:	f00b f823 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	b29a      	uxth	r2, r3
 8002176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	210a      	movs	r1, #10
 8002184:	4840      	ldr	r0, [pc, #256]	; (8002288 <FreqMenu_DrawPresetMenu+0xf00>)
 8002186:	f00b f817 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	b29a      	uxth	r2, r3
 800218e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	210a      	movs	r1, #10
 800219c:	483b      	ldr	r0, [pc, #236]	; (800228c <FreqMenu_DrawPresetMenu+0xf04>)
 800219e:	f00b f80b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80021a2:	7abb      	ldrb	r3, [r7, #10]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	210a      	movs	r1, #10
 80021b4:	4836      	ldr	r0, [pc, #216]	; (8002290 <FreqMenu_DrawPresetMenu+0xf08>)
 80021b6:	f00a ffff 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80021ba:	7a7b      	ldrb	r3, [r7, #9]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	210a      	movs	r1, #10
 80021cc:	4831      	ldr	r0, [pc, #196]	; (8002294 <FreqMenu_DrawPresetMenu+0xf0c>)
 80021ce:	f00a fff3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	2178      	movs	r1, #120	; 0x78
 80021e4:	482c      	ldr	r0, [pc, #176]	; (8002298 <FreqMenu_DrawPresetMenu+0xf10>)
 80021e6:	f00a ffe7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	2178      	movs	r1, #120	; 0x78
 80021fc:	4827      	ldr	r0, [pc, #156]	; (800229c <FreqMenu_DrawPresetMenu+0xf14>)
 80021fe:	f00a ffdb 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	b29a      	uxth	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2302      	movs	r3, #2
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002212:	2178      	movs	r1, #120	; 0x78
 8002214:	4822      	ldr	r0, [pc, #136]	; (80022a0 <FreqMenu_DrawPresetMenu+0xf18>)
 8002216:	f00a ffcf 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800221a:	7b3b      	ldrb	r3, [r7, #12]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	2178      	movs	r1, #120	; 0x78
 800222c:	481d      	ldr	r0, [pc, #116]	; (80022a4 <FreqMenu_DrawPresetMenu+0xf1c>)
 800222e:	f00a ffc3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	b29a      	uxth	r2, r3
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	2178      	movs	r1, #120	; 0x78
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <FreqMenu_DrawPresetMenu+0xf20>)
 8002246:	f00a ffb7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800224a:	7abb      	ldrb	r3, [r7, #10]
 800224c:	b29a      	uxth	r2, r3
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	2178      	movs	r1, #120	; 0x78
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <FreqMenu_DrawPresetMenu+0xf24>)
 800225e:	f00a ffab 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002262:	7a7b      	ldrb	r3, [r7, #9]
 8002264:	b29a      	uxth	r2, r3
 8002266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	2178      	movs	r1, #120	; 0x78
 8002274:	480e      	ldr	r0, [pc, #56]	; (80022b0 <FreqMenu_DrawPresetMenu+0xf28>)
 8002276:	f00a ff9f 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 800227a:	e2e8      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 800227c:	080108b8 	.word	0x080108b8
 8002280:	080108c0 	.word	0x080108c0
 8002284:	080108c8 	.word	0x080108c8
 8002288:	080108d0 	.word	0x080108d0
 800228c:	080108d8 	.word	0x080108d8
 8002290:	080108e0 	.word	0x080108e0
 8002294:	080108e8 	.word	0x080108e8
 8002298:	080108f0 	.word	0x080108f0
 800229c:	080108f8 	.word	0x080108f8
 80022a0:	08010900 	.word	0x08010900
 80022a4:	08010908 	.word	0x08010908
 80022a8:	08010910 	.word	0x08010910
 80022ac:	08010918 	.word	0x08010918
 80022b0:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2302      	movs	r3, #2
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2300      	movs	r3, #0
 80022c4:	210a      	movs	r1, #10
 80022c6:	48a4      	ldr	r0, [pc, #656]	; (8002558 <FreqMenu_DrawPresetMenu+0x11d0>)
 80022c8:	f00a ff76 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	2302      	movs	r3, #2
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	210a      	movs	r1, #10
 80022de:	489f      	ldr	r0, [pc, #636]	; (800255c <FreqMenu_DrawPresetMenu+0x11d4>)
 80022e0:	f00a ff6a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022e4:	7b7b      	ldrb	r3, [r7, #13]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2302      	movs	r3, #2
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	210a      	movs	r1, #10
 80022f6:	489a      	ldr	r0, [pc, #616]	; (8002560 <FreqMenu_DrawPresetMenu+0x11d8>)
 80022f8:	f00a ff5e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022fc:	7b3b      	ldrb	r3, [r7, #12]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2302      	movs	r3, #2
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	210a      	movs	r1, #10
 800230e:	4895      	ldr	r0, [pc, #596]	; (8002564 <FreqMenu_DrawPresetMenu+0x11dc>)
 8002310:	f00a ff52 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	210a      	movs	r1, #10
 8002326:	4890      	ldr	r0, [pc, #576]	; (8002568 <FreqMenu_DrawPresetMenu+0x11e0>)
 8002328:	f00a ff46 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800232c:	7abb      	ldrb	r3, [r7, #10]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2302      	movs	r3, #2
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	210a      	movs	r1, #10
 800233e:	488b      	ldr	r0, [pc, #556]	; (800256c <FreqMenu_DrawPresetMenu+0x11e4>)
 8002340:	f00a ff3a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002344:	7a7b      	ldrb	r3, [r7, #9]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	210a      	movs	r1, #10
 8002356:	4886      	ldr	r0, [pc, #536]	; (8002570 <FreqMenu_DrawPresetMenu+0x11e8>)
 8002358:	f00a ff2e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2302      	movs	r3, #2
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4881      	ldr	r0, [pc, #516]	; (8002574 <FreqMenu_DrawPresetMenu+0x11ec>)
 8002370:	f00a ff22 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	487c      	ldr	r0, [pc, #496]	; (8002578 <FreqMenu_DrawPresetMenu+0x11f0>)
 8002388:	f00a ff16 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800238c:	7b7b      	ldrb	r3, [r7, #13]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	4877      	ldr	r0, [pc, #476]	; (800257c <FreqMenu_DrawPresetMenu+0x11f4>)
 80023a0:	f00a ff0a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 80023a4:	7b3b      	ldrb	r3, [r7, #12]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2302      	movs	r3, #2
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b4:	2178      	movs	r1, #120	; 0x78
 80023b6:	4872      	ldr	r0, [pc, #456]	; (8002580 <FreqMenu_DrawPresetMenu+0x11f8>)
 80023b8:	f00a fefe 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2178      	movs	r1, #120	; 0x78
 80023ce:	486d      	ldr	r0, [pc, #436]	; (8002584 <FreqMenu_DrawPresetMenu+0x11fc>)
 80023d0:	f00a fef2 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023d4:	7abb      	ldrb	r3, [r7, #10]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2302      	movs	r3, #2
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	4868      	ldr	r0, [pc, #416]	; (8002588 <FreqMenu_DrawPresetMenu+0x1200>)
 80023e8:	f00a fee6 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023ec:	7a7b      	ldrb	r3, [r7, #9]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	4863      	ldr	r0, [pc, #396]	; (800258c <FreqMenu_DrawPresetMenu+0x1204>)
 8002400:	f00a feda 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002404:	e223      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	b29a      	uxth	r2, r3
 800240a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	210a      	movs	r1, #10
 8002418:	484f      	ldr	r0, [pc, #316]	; (8002558 <FreqMenu_DrawPresetMenu+0x11d0>)
 800241a:	f00a fecd 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800241e:	7bbb      	ldrb	r3, [r7, #14]
 8002420:	b29a      	uxth	r2, r3
 8002422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2302      	movs	r3, #2
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	210a      	movs	r1, #10
 8002430:	484a      	ldr	r0, [pc, #296]	; (800255c <FreqMenu_DrawPresetMenu+0x11d4>)
 8002432:	f00a fec1 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002436:	7b7b      	ldrb	r3, [r7, #13]
 8002438:	b29a      	uxth	r2, r3
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	210a      	movs	r1, #10
 8002448:	4845      	ldr	r0, [pc, #276]	; (8002560 <FreqMenu_DrawPresetMenu+0x11d8>)
 800244a:	f00a feb5 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	b29a      	uxth	r2, r3
 8002452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2300      	movs	r3, #0
 800245e:	210a      	movs	r1, #10
 8002460:	4840      	ldr	r0, [pc, #256]	; (8002564 <FreqMenu_DrawPresetMenu+0x11dc>)
 8002462:	f00a fea9 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	b29a      	uxth	r2, r3
 800246a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	210a      	movs	r1, #10
 8002478:	483b      	ldr	r0, [pc, #236]	; (8002568 <FreqMenu_DrawPresetMenu+0x11e0>)
 800247a:	f00a fe9d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800247e:	7abb      	ldrb	r3, [r7, #10]
 8002480:	b29a      	uxth	r2, r3
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	210a      	movs	r1, #10
 8002490:	4836      	ldr	r0, [pc, #216]	; (800256c <FreqMenu_DrawPresetMenu+0x11e4>)
 8002492:	f00a fe91 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002496:	7a7b      	ldrb	r3, [r7, #9]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	210a      	movs	r1, #10
 80024a8:	4831      	ldr	r0, [pc, #196]	; (8002570 <FreqMenu_DrawPresetMenu+0x11e8>)
 80024aa:	f00a fe85 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2178      	movs	r1, #120	; 0x78
 80024c0:	482c      	ldr	r0, [pc, #176]	; (8002574 <FreqMenu_DrawPresetMenu+0x11ec>)
 80024c2:	f00a fe79 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	2178      	movs	r1, #120	; 0x78
 80024d8:	4827      	ldr	r0, [pc, #156]	; (8002578 <FreqMenu_DrawPresetMenu+0x11f0>)
 80024da:	f00a fe6d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2178      	movs	r1, #120	; 0x78
 80024f0:	4822      	ldr	r0, [pc, #136]	; (800257c <FreqMenu_DrawPresetMenu+0x11f4>)
 80024f2:	f00a fe61 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024f6:	7b3b      	ldrb	r3, [r7, #12]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	2178      	movs	r1, #120	; 0x78
 8002508:	481d      	ldr	r0, [pc, #116]	; (8002580 <FreqMenu_DrawPresetMenu+0x11f8>)
 800250a:	f00a fe55 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	b29a      	uxth	r2, r3
 8002512:	2300      	movs	r3, #0
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2302      	movs	r3, #2
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251e:	2178      	movs	r1, #120	; 0x78
 8002520:	4818      	ldr	r0, [pc, #96]	; (8002584 <FreqMenu_DrawPresetMenu+0x11fc>)
 8002522:	f00a fe49 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002526:	7abb      	ldrb	r3, [r7, #10]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	2178      	movs	r1, #120	; 0x78
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <FreqMenu_DrawPresetMenu+0x1200>)
 800253a:	f00a fe3d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800253e:	7a7b      	ldrb	r3, [r7, #9]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2178      	movs	r1, #120	; 0x78
 8002550:	480e      	ldr	r0, [pc, #56]	; (800258c <FreqMenu_DrawPresetMenu+0x1204>)
 8002552:	f00a fe31 	bl	800d1b8 <ILI9341_Draw_Text>
			break;
 8002556:	e17a      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 8002558:	080108b8 	.word	0x080108b8
 800255c:	080108c0 	.word	0x080108c0
 8002560:	080108c8 	.word	0x080108c8
 8002564:	080108d0 	.word	0x080108d0
 8002568:	080108d8 	.word	0x080108d8
 800256c:	080108e0 	.word	0x080108e0
 8002570:	080108e8 	.word	0x080108e8
 8002574:	080108f0 	.word	0x080108f0
 8002578:	080108f8 	.word	0x080108f8
 800257c:	08010900 	.word	0x08010900
 8002580:	08010908 	.word	0x08010908
 8002584:	08010910 	.word	0x08010910
 8002588:	08010918 	.word	0x08010918
 800258c:	08010920 	.word	0x08010920
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	210a      	movs	r1, #10
 80025a2:	48ad      	ldr	r0, [pc, #692]	; (8002858 <FreqMenu_DrawPresetMenu+0x14d0>)
 80025a4:	f00a fe08 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80025a8:	7bbb      	ldrb	r3, [r7, #14]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	210a      	movs	r1, #10
 80025ba:	48a8      	ldr	r0, [pc, #672]	; (800285c <FreqMenu_DrawPresetMenu+0x14d4>)
 80025bc:	f00a fdfc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025c0:	7b7b      	ldrb	r3, [r7, #13]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2300      	movs	r3, #0
 80025d0:	210a      	movs	r1, #10
 80025d2:	48a3      	ldr	r0, [pc, #652]	; (8002860 <FreqMenu_DrawPresetMenu+0x14d8>)
 80025d4:	f00a fdf0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025d8:	7b3b      	ldrb	r3, [r7, #12]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2300      	movs	r3, #0
 80025e8:	210a      	movs	r1, #10
 80025ea:	489e      	ldr	r0, [pc, #632]	; (8002864 <FreqMenu_DrawPresetMenu+0x14dc>)
 80025ec:	f00a fde4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	210a      	movs	r1, #10
 8002602:	4899      	ldr	r0, [pc, #612]	; (8002868 <FreqMenu_DrawPresetMenu+0x14e0>)
 8002604:	f00a fdd8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002608:	7abb      	ldrb	r3, [r7, #10]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	210a      	movs	r1, #10
 800261a:	4894      	ldr	r0, [pc, #592]	; (800286c <FreqMenu_DrawPresetMenu+0x14e4>)
 800261c:	f00a fdcc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002620:	7a7b      	ldrb	r3, [r7, #9]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2302      	movs	r3, #2
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	210a      	movs	r1, #10
 8002632:	488f      	ldr	r0, [pc, #572]	; (8002870 <FreqMenu_DrawPresetMenu+0x14e8>)
 8002634:	f00a fdc0 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	b29a      	uxth	r2, r3
 800263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	2178      	movs	r1, #120	; 0x78
 800264a:	488a      	ldr	r0, [pc, #552]	; (8002874 <FreqMenu_DrawPresetMenu+0x14ec>)
 800264c:	f00a fdb4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	2178      	movs	r1, #120	; 0x78
 8002662:	4885      	ldr	r0, [pc, #532]	; (8002878 <FreqMenu_DrawPresetMenu+0x14f0>)
 8002664:	f00a fda8 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002668:	7b7b      	ldrb	r3, [r7, #13]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	2178      	movs	r1, #120	; 0x78
 800267a:	4880      	ldr	r0, [pc, #512]	; (800287c <FreqMenu_DrawPresetMenu+0x14f4>)
 800267c:	f00a fd9c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002680:	7b3b      	ldrb	r3, [r7, #12]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2302      	movs	r3, #2
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2178      	movs	r1, #120	; 0x78
 8002692:	487b      	ldr	r0, [pc, #492]	; (8002880 <FreqMenu_DrawPresetMenu+0x14f8>)
 8002694:	f00a fd90 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002698:	7afb      	ldrb	r3, [r7, #11]
 800269a:	b29a      	uxth	r2, r3
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2302      	movs	r3, #2
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2178      	movs	r1, #120	; 0x78
 80026aa:	4876      	ldr	r0, [pc, #472]	; (8002884 <FreqMenu_DrawPresetMenu+0x14fc>)
 80026ac:	f00a fd84 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 80026b0:	7abb      	ldrb	r3, [r7, #10]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	2300      	movs	r3, #0
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2302      	movs	r3, #2
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	2178      	movs	r1, #120	; 0x78
 80026c2:	4871      	ldr	r0, [pc, #452]	; (8002888 <FreqMenu_DrawPresetMenu+0x1500>)
 80026c4:	f00a fd78 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2178      	movs	r1, #120	; 0x78
 80026da:	486c      	ldr	r0, [pc, #432]	; (800288c <FreqMenu_DrawPresetMenu+0x1504>)
 80026dc:	f00a fd6c 	bl	800d1b8 <ILI9341_Draw_Text>
			break;
 80026e0:	e0b5      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2302      	movs	r3, #2
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2300      	movs	r3, #0
 80026f2:	210a      	movs	r1, #10
 80026f4:	4858      	ldr	r0, [pc, #352]	; (8002858 <FreqMenu_DrawPresetMenu+0x14d0>)
 80026f6:	f00a fd5f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2300      	movs	r3, #0
 800270a:	210a      	movs	r1, #10
 800270c:	4853      	ldr	r0, [pc, #332]	; (800285c <FreqMenu_DrawPresetMenu+0x14d4>)
 800270e:	f00a fd53 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002712:	7b7b      	ldrb	r3, [r7, #13]
 8002714:	b29a      	uxth	r2, r3
 8002716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	210a      	movs	r1, #10
 8002724:	484e      	ldr	r0, [pc, #312]	; (8002860 <FreqMenu_DrawPresetMenu+0x14d8>)
 8002726:	f00a fd47 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800272a:	7b3b      	ldrb	r3, [r7, #12]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	210a      	movs	r1, #10
 800273c:	4849      	ldr	r0, [pc, #292]	; (8002864 <FreqMenu_DrawPresetMenu+0x14dc>)
 800273e:	f00a fd3b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	b29a      	uxth	r2, r3
 8002746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	210a      	movs	r1, #10
 8002754:	4844      	ldr	r0, [pc, #272]	; (8002868 <FreqMenu_DrawPresetMenu+0x14e0>)
 8002756:	f00a fd2f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800275a:	7abb      	ldrb	r3, [r7, #10]
 800275c:	b29a      	uxth	r2, r3
 800275e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	210a      	movs	r1, #10
 800276c:	483f      	ldr	r0, [pc, #252]	; (800286c <FreqMenu_DrawPresetMenu+0x14e4>)
 800276e:	f00a fd23 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002772:	7a7b      	ldrb	r3, [r7, #9]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	210a      	movs	r1, #10
 8002784:	483a      	ldr	r0, [pc, #232]	; (8002870 <FreqMenu_DrawPresetMenu+0x14e8>)
 8002786:	f00a fd17 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	2178      	movs	r1, #120	; 0x78
 800279c:	4835      	ldr	r0, [pc, #212]	; (8002874 <FreqMenu_DrawPresetMenu+0x14ec>)
 800279e:	f00a fd0b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	2178      	movs	r1, #120	; 0x78
 80027b4:	4830      	ldr	r0, [pc, #192]	; (8002878 <FreqMenu_DrawPresetMenu+0x14f0>)
 80027b6:	f00a fcff 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2178      	movs	r1, #120	; 0x78
 80027cc:	482b      	ldr	r0, [pc, #172]	; (800287c <FreqMenu_DrawPresetMenu+0x14f4>)
 80027ce:	f00a fcf3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027d2:	7b3b      	ldrb	r3, [r7, #12]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	4826      	ldr	r0, [pc, #152]	; (8002880 <FreqMenu_DrawPresetMenu+0x14f8>)
 80027e6:	f00a fce7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	2178      	movs	r1, #120	; 0x78
 80027fc:	4821      	ldr	r0, [pc, #132]	; (8002884 <FreqMenu_DrawPresetMenu+0x14fc>)
 80027fe:	f00a fcdb 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002802:	7abb      	ldrb	r3, [r7, #10]
 8002804:	b29a      	uxth	r2, r3
 8002806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	2178      	movs	r1, #120	; 0x78
 8002814:	481c      	ldr	r0, [pc, #112]	; (8002888 <FreqMenu_DrawPresetMenu+0x1500>)
 8002816:	f00a fccf 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 800281a:	7a7b      	ldrb	r3, [r7, #9]
 800281c:	b29a      	uxth	r2, r3
 800281e:	2300      	movs	r3, #0
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	2302      	movs	r3, #2
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282a:	2178      	movs	r1, #120	; 0x78
 800282c:	4817      	ldr	r0, [pc, #92]	; (800288c <FreqMenu_DrawPresetMenu+0x1504>)
 800282e:	f00a fcc3 	bl	800d1b8 <ILI9341_Draw_Text>
			break;
 8002832:	bf00      	nop
 8002834:	e00b      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002836:	2300      	movs	r3, #0
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2301      	movs	r3, #1
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002842:	22b4      	movs	r2, #180	; 0xb4
 8002844:	210a      	movs	r1, #10
 8002846:	4812      	ldr	r0, [pc, #72]	; (8002890 <FreqMenu_DrawPresetMenu+0x1508>)
 8002848:	f00a fcb6 	bl	800d1b8 <ILI9341_Draw_Text>
}
 800284c:	e7ff      	b.n	800284e <FreqMenu_DrawPresetMenu+0x14c6>
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	080108b8 	.word	0x080108b8
 800285c:	080108c0 	.word	0x080108c0
 8002860:	080108c8 	.word	0x080108c8
 8002864:	080108d0 	.word	0x080108d0
 8002868:	080108d8 	.word	0x080108d8
 800286c:	080108e0 	.word	0x080108e0
 8002870:	080108e8 	.word	0x080108e8
 8002874:	080108f0 	.word	0x080108f0
 8002878:	080108f8 	.word	0x080108f8
 800287c:	08010900 	.word	0x08010900
 8002880:	08010908 	.word	0x08010908
 8002884:	08010910 	.word	0x08010910
 8002888:	08010918 	.word	0x08010918
 800288c:	08010920 	.word	0x08010920
 8002890:	0801092c 	.word	0x0801092c

08002894 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 800289a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2296      	movs	r2, #150	; 0x96
 80028a8:	210a      	movs	r1, #10
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <FreqMenu_DrawAdjustMenu+0x5c>)
 80028ac:	f00a fc84 	bl	800d1b8 <ILI9341_Draw_Text>

	char freq[6] = "";
 80028b0:	2300      	movs	r3, #0
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 80028b8:	f001 fcf4 	bl	80042a4 <FreqO_GetOutputFreq>
 80028bc:	4603      	mov	r3, r0
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4639      	mov	r1, r7
 80028c2:	2206      	movs	r2, #6
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fc79 	bl	80011bc <DM_AddDigitPadding>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <FreqMenu_DrawAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 80028d0:	4638      	mov	r0, r7
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2301      	movs	r3, #1
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028de:	2296      	movs	r2, #150	; 0x96
 80028e0:	21fa      	movs	r1, #250	; 0xfa
 80028e2:	f00a fc69 	bl	800d1b8 <ILI9341_Draw_Text>


}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	0801095c 	.word	0x0801095c

080028f4 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8

	TIM8->ARR = TIM3->CNT;
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <FreqMenu_DrawSweepMenu+0xb8>)
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <FreqMenu_DrawSweepMenu+0xbc>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	62d3      	str	r3, [r2, #44]	; 0x2c

	char arr_text[10] = "";
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	809a      	strh	r2, [r3, #4]
	snprintf(arr_text, sizeof(arr_text), "ARR: %lu", TIM3->ARR);
 8002910:	4b26      	ldr	r3, [pc, #152]	; (80029ac <FreqMenu_DrawSweepMenu+0xb8>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	1d38      	adds	r0, r7, #4
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <FreqMenu_DrawSweepMenu+0xc0>)
 8002918:	210a      	movs	r1, #10
 800291a:	f00b ff99 	bl	800e850 <sniprintf>
	ILI9341_Draw_Text(arr_text, 10, 50, BLACK, 2, WHITE);
 800291e:	1d38      	adds	r0, r7, #4
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2302      	movs	r3, #2
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	2232      	movs	r2, #50	; 0x32
 800292e:	210a      	movs	r1, #10
 8002930:	f00a fc42 	bl	800d1b8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	2278      	movs	r2, #120	; 0x78
 8002942:	210a      	movs	r1, #10
 8002944:	481c      	ldr	r0, [pc, #112]	; (80029b8 <FreqMenu_DrawSweepMenu+0xc4>)
 8002946:	f00a fc37 	bl	800d1b8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("ON/OFF", 10, 210, BLACK, 2, DARKCYAN);
 800294a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	2302      	movs	r3, #2
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	22d2      	movs	r2, #210	; 0xd2
 8002958:	210a      	movs	r1, #10
 800295a:	4818      	ldr	r0, [pc, #96]	; (80029bc <FreqMenu_DrawSweepMenu+0xc8>)
 800295c:	f00a fc2c 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE", 100, 210, BLACK, 2, DARKGREEN);
 8002960:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2302      	movs	r3, #2
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	22d2      	movs	r2, #210	; 0xd2
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	4813      	ldr	r0, [pc, #76]	; (80029c0 <FreqMenu_DrawSweepMenu+0xcc>)
 8002972:	f00a fc21 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("DIR", 175, 210, BLACK, 2, YELLOW);
 8002976:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	2302      	movs	r3, #2
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2300      	movs	r3, #0
 8002982:	22d2      	movs	r2, #210	; 0xd2
 8002984:	21af      	movs	r1, #175	; 0xaf
 8002986:	480f      	ldr	r0, [pc, #60]	; (80029c4 <FreqMenu_DrawSweepMenu+0xd0>)
 8002988:	f00a fc16 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800298c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	22d2      	movs	r2, #210	; 0xd2
 800299a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <FreqMenu_DrawSweepMenu+0xd4>)
 80029a0:	f00a fc0a 	bl	800d1b8 <ILI9341_Draw_Text>



}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40013400 	.word	0x40013400
 80029b4:	08010974 	.word	0x08010974
 80029b8:	08010980 	.word	0x08010980
 80029bc:	08010998 	.word	0x08010998
 80029c0:	080109a0 	.word	0x080109a0
 80029c4:	080109a8 	.word	0x080109a8
 80029c8:	080109ac 	.word	0x080109ac

080029cc <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d007      	beq.n	80029ec <FuncMenu_DrawMenu+0x20>
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d008      	beq.n	80029f2 <FuncMenu_DrawMenu+0x26>
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d000      	beq.n	80029e6 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 80029e4:	e008      	b.n	80029f8 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 80029e6:	f000 f80b 	bl	8002a00 <FuncMenu_DrawMainMenu>
			break;
 80029ea:	e005      	b.n	80029f8 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 80029ec:	f000 f84e 	bl	8002a8c <FuncMenu_DrawSignalMenu>
			break;
 80029f0:	e002      	b.n	80029f8 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 80029f2:	f000 fa2b 	bl	8002e4c <FuncMenu_DrawSyncMenu>
			break;
 80029f6:	bf00      	nop

	}
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FUNCTION MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a12:	220a      	movs	r2, #10
 8002a14:	210a      	movs	r1, #10
 8002a16:	4819      	ldr	r0, [pc, #100]	; (8002a7c <FuncMenu_DrawMainMenu+0x7c>)
 8002a18:	f00a fbce 	bl	800d1b8 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8002a1c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2300      	movs	r3, #0
 8002a28:	22d2      	movs	r2, #210	; 0xd2
 8002a2a:	210a      	movs	r1, #10
 8002a2c:	4814      	ldr	r0, [pc, #80]	; (8002a80 <FuncMenu_DrawMainMenu+0x80>)
 8002a2e:	f00a fbc3 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8002a32:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	22d2      	movs	r2, #210	; 0xd2
 8002a40:	2164      	movs	r1, #100	; 0x64
 8002a42:	4810      	ldr	r0, [pc, #64]	; (8002a84 <FuncMenu_DrawMainMenu+0x84>)
 8002a44:	f00a fbb8 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2302      	movs	r3, #2
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	22d2      	movs	r2, #210	; 0xd2
 8002a56:	21af      	movs	r1, #175	; 0xaf
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <FuncMenu_DrawMainMenu+0x88>)
 8002a5a:	f00a fbad 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002a5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	22d2      	movs	r2, #210	; 0xd2
 8002a6c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <FuncMenu_DrawMainMenu+0x88>)
 8002a72:	f00a fba1 	bl	800d1b8 <ILI9341_Draw_Text>
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	080109b4 	.word	0x080109b4
 8002a80:	080109c8 	.word	0x080109c8
 8002a84:	080109d0 	.word	0x080109d0
 8002a88:	080109d8 	.word	0x080109d8

08002a8c <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002a92:	2300      	movs	r3, #0
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	2303      	movs	r3, #3
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9e:	220a      	movs	r2, #10
 8002aa0:	210a      	movs	r1, #10
 8002aa2:	48b9      	ldr	r0, [pc, #740]	; (8002d88 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002aa4:	f00a fb88 	bl	800d1b8 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f001 ff43 	bl	8004934 <SM_GetOutputChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002ab4:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 81b6 	beq.w	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	f200 81b1 	bhi.w	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <FuncMenu_DrawSignalMenu+0x44>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae9 	.word	0x08002ae9
 8002ad4:	08002b6f 	.word	0x08002b6f
 8002ad8:	08002bf5 	.word	0x08002bf5
 8002adc:	08002c7b 	.word	0x08002c7b
 8002ae0:	08002d01 	.word	0x08002d01
 8002ae4:	08002da5 	.word	0x08002da5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af4:	2232      	movs	r2, #50	; 0x32
 8002af6:	210a      	movs	r1, #10
 8002af8:	48a4      	ldr	r0, [pc, #656]	; (8002d8c <FuncMenu_DrawSignalMenu+0x300>)
 8002afa:	f00a fb5d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2246      	movs	r2, #70	; 0x46
 8002b0c:	210a      	movs	r1, #10
 8002b0e:	48a0      	ldr	r0, [pc, #640]	; (8002d90 <FuncMenu_DrawSignalMenu+0x304>)
 8002b10:	f00a fb52 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	225a      	movs	r2, #90	; 0x5a
 8002b22:	210a      	movs	r1, #10
 8002b24:	489b      	ldr	r0, [pc, #620]	; (8002d94 <FuncMenu_DrawSignalMenu+0x308>)
 8002b26:	f00a fb47 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	2302      	movs	r3, #2
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2300      	movs	r3, #0
 8002b36:	226e      	movs	r2, #110	; 0x6e
 8002b38:	210a      	movs	r1, #10
 8002b3a:	4897      	ldr	r0, [pc, #604]	; (8002d98 <FuncMenu_DrawSignalMenu+0x30c>)
 8002b3c:	f00a fb3c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2282      	movs	r2, #130	; 0x82
 8002b4e:	210a      	movs	r1, #10
 8002b50:	4892      	ldr	r0, [pc, #584]	; (8002d9c <FuncMenu_DrawSignalMenu+0x310>)
 8002b52:	f00a fb31 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2296      	movs	r2, #150	; 0x96
 8002b64:	210a      	movs	r1, #10
 8002b66:	488e      	ldr	r0, [pc, #568]	; (8002da0 <FuncMenu_DrawSignalMenu+0x314>)
 8002b68:	f00a fb26 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002b6c:	e15d      	b.n	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	2302      	movs	r3, #2
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	210a      	movs	r1, #10
 8002b7e:	4883      	ldr	r0, [pc, #524]	; (8002d8c <FuncMenu_DrawSignalMenu+0x300>)
 8002b80:	f00a fb1a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002b84:	2300      	movs	r3, #0
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b90:	2246      	movs	r2, #70	; 0x46
 8002b92:	210a      	movs	r1, #10
 8002b94:	487e      	ldr	r0, [pc, #504]	; (8002d90 <FuncMenu_DrawSignalMenu+0x304>)
 8002b96:	f00a fb0f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	225a      	movs	r2, #90	; 0x5a
 8002ba8:	210a      	movs	r1, #10
 8002baa:	487a      	ldr	r0, [pc, #488]	; (8002d94 <FuncMenu_DrawSignalMenu+0x308>)
 8002bac:	f00a fb04 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	226e      	movs	r2, #110	; 0x6e
 8002bbe:	210a      	movs	r1, #10
 8002bc0:	4875      	ldr	r0, [pc, #468]	; (8002d98 <FuncMenu_DrawSignalMenu+0x30c>)
 8002bc2:	f00a faf9 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	2302      	movs	r3, #2
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2282      	movs	r2, #130	; 0x82
 8002bd4:	210a      	movs	r1, #10
 8002bd6:	4871      	ldr	r0, [pc, #452]	; (8002d9c <FuncMenu_DrawSignalMenu+0x310>)
 8002bd8:	f00a faee 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	2302      	movs	r3, #2
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2300      	movs	r3, #0
 8002be8:	2296      	movs	r2, #150	; 0x96
 8002bea:	210a      	movs	r1, #10
 8002bec:	486c      	ldr	r0, [pc, #432]	; (8002da0 <FuncMenu_DrawSignalMenu+0x314>)
 8002bee:	f00a fae3 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002bf2:	e11a      	b.n	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2232      	movs	r2, #50	; 0x32
 8002c02:	210a      	movs	r1, #10
 8002c04:	4861      	ldr	r0, [pc, #388]	; (8002d8c <FuncMenu_DrawSignalMenu+0x300>)
 8002c06:	f00a fad7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	2302      	movs	r3, #2
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2300      	movs	r3, #0
 8002c16:	2246      	movs	r2, #70	; 0x46
 8002c18:	210a      	movs	r1, #10
 8002c1a:	485d      	ldr	r0, [pc, #372]	; (8002d90 <FuncMenu_DrawSignalMenu+0x304>)
 8002c1c:	f00a facc 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2302      	movs	r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c2c:	225a      	movs	r2, #90	; 0x5a
 8002c2e:	210a      	movs	r1, #10
 8002c30:	4858      	ldr	r0, [pc, #352]	; (8002d94 <FuncMenu_DrawSignalMenu+0x308>)
 8002c32:	f00a fac1 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2300      	movs	r3, #0
 8002c42:	226e      	movs	r2, #110	; 0x6e
 8002c44:	210a      	movs	r1, #10
 8002c46:	4854      	ldr	r0, [pc, #336]	; (8002d98 <FuncMenu_DrawSignalMenu+0x30c>)
 8002c48:	f00a fab6 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2302      	movs	r3, #2
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	2282      	movs	r2, #130	; 0x82
 8002c5a:	210a      	movs	r1, #10
 8002c5c:	484f      	ldr	r0, [pc, #316]	; (8002d9c <FuncMenu_DrawSignalMenu+0x310>)
 8002c5e:	f00a faab 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2296      	movs	r2, #150	; 0x96
 8002c70:	210a      	movs	r1, #10
 8002c72:	484b      	ldr	r0, [pc, #300]	; (8002da0 <FuncMenu_DrawSignalMenu+0x314>)
 8002c74:	f00a faa0 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002c78:	e0d7      	b.n	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2302      	movs	r3, #2
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	2232      	movs	r2, #50	; 0x32
 8002c88:	210a      	movs	r1, #10
 8002c8a:	4840      	ldr	r0, [pc, #256]	; (8002d8c <FuncMenu_DrawSignalMenu+0x300>)
 8002c8c:	f00a fa94 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	2302      	movs	r3, #2
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2246      	movs	r2, #70	; 0x46
 8002c9e:	210a      	movs	r1, #10
 8002ca0:	483b      	ldr	r0, [pc, #236]	; (8002d90 <FuncMenu_DrawSignalMenu+0x304>)
 8002ca2:	f00a fa89 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	225a      	movs	r2, #90	; 0x5a
 8002cb4:	210a      	movs	r1, #10
 8002cb6:	4837      	ldr	r0, [pc, #220]	; (8002d94 <FuncMenu_DrawSignalMenu+0x308>)
 8002cb8:	f00a fa7e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc8:	226e      	movs	r2, #110	; 0x6e
 8002cca:	210a      	movs	r1, #10
 8002ccc:	4832      	ldr	r0, [pc, #200]	; (8002d98 <FuncMenu_DrawSignalMenu+0x30c>)
 8002cce:	f00a fa73 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2302      	movs	r3, #2
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2282      	movs	r2, #130	; 0x82
 8002ce0:	210a      	movs	r1, #10
 8002ce2:	482e      	ldr	r0, [pc, #184]	; (8002d9c <FuncMenu_DrawSignalMenu+0x310>)
 8002ce4:	f00a fa68 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2296      	movs	r2, #150	; 0x96
 8002cf6:	210a      	movs	r1, #10
 8002cf8:	4829      	ldr	r0, [pc, #164]	; (8002da0 <FuncMenu_DrawSignalMenu+0x314>)
 8002cfa:	f00a fa5d 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002cfe:	e094      	b.n	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2232      	movs	r2, #50	; 0x32
 8002d0e:	210a      	movs	r1, #10
 8002d10:	481e      	ldr	r0, [pc, #120]	; (8002d8c <FuncMenu_DrawSignalMenu+0x300>)
 8002d12:	f00a fa51 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2246      	movs	r2, #70	; 0x46
 8002d24:	210a      	movs	r1, #10
 8002d26:	481a      	ldr	r0, [pc, #104]	; (8002d90 <FuncMenu_DrawSignalMenu+0x304>)
 8002d28:	f00a fa46 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2302      	movs	r3, #2
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	225a      	movs	r2, #90	; 0x5a
 8002d3a:	210a      	movs	r1, #10
 8002d3c:	4815      	ldr	r0, [pc, #84]	; (8002d94 <FuncMenu_DrawSignalMenu+0x308>)
 8002d3e:	f00a fa3b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	2302      	movs	r3, #2
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	226e      	movs	r2, #110	; 0x6e
 8002d50:	210a      	movs	r1, #10
 8002d52:	4811      	ldr	r0, [pc, #68]	; (8002d98 <FuncMenu_DrawSignalMenu+0x30c>)
 8002d54:	f00a fa30 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d64:	2282      	movs	r2, #130	; 0x82
 8002d66:	210a      	movs	r1, #10
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <FuncMenu_DrawSignalMenu+0x310>)
 8002d6a:	f00a fa25 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2302      	movs	r3, #2
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2296      	movs	r2, #150	; 0x96
 8002d7c:	210a      	movs	r1, #10
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <FuncMenu_DrawSignalMenu+0x314>)
 8002d80:	f00a fa1a 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002d84:	e051      	b.n	8002e2a <FuncMenu_DrawSignalMenu+0x39e>
 8002d86:	bf00      	nop
 8002d88:	080109e0 	.word	0x080109e0
 8002d8c:	080109f8 	.word	0x080109f8
 8002d90:	08010a00 	.word	0x08010a00
 8002d94:	08010a0c 	.word	0x08010a0c
 8002d98:	08010a14 	.word	0x08010a14
 8002d9c:	08010a20 	.word	0x08010a20
 8002da0:	08010a2c 	.word	0x08010a2c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	2232      	movs	r2, #50	; 0x32
 8002db2:	210a      	movs	r1, #10
 8002db4:	481f      	ldr	r0, [pc, #124]	; (8002e34 <FuncMenu_DrawSignalMenu+0x3a8>)
 8002db6:	f00a f9ff 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2246      	movs	r2, #70	; 0x46
 8002dc8:	210a      	movs	r1, #10
 8002dca:	481b      	ldr	r0, [pc, #108]	; (8002e38 <FuncMenu_DrawSignalMenu+0x3ac>)
 8002dcc:	f00a f9f4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	225a      	movs	r2, #90	; 0x5a
 8002dde:	210a      	movs	r1, #10
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <FuncMenu_DrawSignalMenu+0x3b0>)
 8002de2:	f00a f9e9 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2302      	movs	r3, #2
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2300      	movs	r3, #0
 8002df2:	226e      	movs	r2, #110	; 0x6e
 8002df4:	210a      	movs	r1, #10
 8002df6:	4812      	ldr	r0, [pc, #72]	; (8002e40 <FuncMenu_DrawSignalMenu+0x3b4>)
 8002df8:	f00a f9de 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2302      	movs	r3, #2
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2282      	movs	r2, #130	; 0x82
 8002e0a:	210a      	movs	r1, #10
 8002e0c:	480d      	ldr	r0, [pc, #52]	; (8002e44 <FuncMenu_DrawSignalMenu+0x3b8>)
 8002e0e:	f00a f9d3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1e:	2296      	movs	r2, #150	; 0x96
 8002e20:	210a      	movs	r1, #10
 8002e22:	4809      	ldr	r0, [pc, #36]	; (8002e48 <FuncMenu_DrawSignalMenu+0x3bc>)
 8002e24:	f00a f9c8 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002e28:	bf00      	nop

		}
	}


}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	080109f8 	.word	0x080109f8
 8002e38:	08010a00 	.word	0x08010a00
 8002e3c:	08010a0c 	.word	0x08010a0c
 8002e40:	08010a14 	.word	0x08010a14
 8002e44:	08010a20 	.word	0x08010a20
 8002e48:	08010a2c 	.word	0x08010a2c

08002e4c <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002e52:	2300      	movs	r3, #0
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2303      	movs	r3, #3
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5e:	220a      	movs	r2, #10
 8002e60:	210a      	movs	r1, #10
 8002e62:	48b9      	ldr	r0, [pc, #740]	; (8003148 <FuncMenu_DrawSyncMenu+0x2fc>)
 8002e64:	f00a f9a8 	bl	800d1b8 <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f001 fd63 	bl	8004934 <SM_GetOutputChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002e74:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 81b6 	beq.w	80031ea <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	f200 81b1 	bhi.w	80031ea <FuncMenu_DrawSyncMenu+0x39e>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <FuncMenu_DrawSyncMenu+0x44>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea9 	.word	0x08002ea9
 8002e94:	08002f2f 	.word	0x08002f2f
 8002e98:	08002fb5 	.word	0x08002fb5
 8002e9c:	0800303b 	.word	0x0800303b
 8002ea0:	080030c1 	.word	0x080030c1
 8002ea4:	08003165 	.word	0x08003165
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2302      	movs	r3, #2
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb4:	2232      	movs	r2, #50	; 0x32
 8002eb6:	210a      	movs	r1, #10
 8002eb8:	48a4      	ldr	r0, [pc, #656]	; (800314c <FuncMenu_DrawSyncMenu+0x300>)
 8002eba:	f00a f97d 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2246      	movs	r2, #70	; 0x46
 8002ecc:	210a      	movs	r1, #10
 8002ece:	48a0      	ldr	r0, [pc, #640]	; (8003150 <FuncMenu_DrawSyncMenu+0x304>)
 8002ed0:	f00a f972 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2302      	movs	r3, #2
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	225a      	movs	r2, #90	; 0x5a
 8002ee2:	210a      	movs	r1, #10
 8002ee4:	489b      	ldr	r0, [pc, #620]	; (8003154 <FuncMenu_DrawSyncMenu+0x308>)
 8002ee6:	f00a f967 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	226e      	movs	r2, #110	; 0x6e
 8002ef8:	210a      	movs	r1, #10
 8002efa:	4897      	ldr	r0, [pc, #604]	; (8003158 <FuncMenu_DrawSyncMenu+0x30c>)
 8002efc:	f00a f95c 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2302      	movs	r3, #2
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2282      	movs	r2, #130	; 0x82
 8002f0e:	210a      	movs	r1, #10
 8002f10:	4892      	ldr	r0, [pc, #584]	; (800315c <FuncMenu_DrawSyncMenu+0x310>)
 8002f12:	f00a f951 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	2296      	movs	r2, #150	; 0x96
 8002f24:	210a      	movs	r1, #10
 8002f26:	488e      	ldr	r0, [pc, #568]	; (8003160 <FuncMenu_DrawSyncMenu+0x314>)
 8002f28:	f00a f946 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002f2c:	e15d      	b.n	80031ea <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	2302      	movs	r3, #2
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2232      	movs	r2, #50	; 0x32
 8002f3c:	210a      	movs	r1, #10
 8002f3e:	4883      	ldr	r0, [pc, #524]	; (800314c <FuncMenu_DrawSyncMenu+0x300>)
 8002f40:	f00a f93a 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002f44:	2300      	movs	r3, #0
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f50:	2246      	movs	r2, #70	; 0x46
 8002f52:	210a      	movs	r1, #10
 8002f54:	487e      	ldr	r0, [pc, #504]	; (8003150 <FuncMenu_DrawSyncMenu+0x304>)
 8002f56:	f00a f92f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2302      	movs	r3, #2
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	225a      	movs	r2, #90	; 0x5a
 8002f68:	210a      	movs	r1, #10
 8002f6a:	487a      	ldr	r0, [pc, #488]	; (8003154 <FuncMenu_DrawSyncMenu+0x308>)
 8002f6c:	f00a f924 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2302      	movs	r3, #2
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	226e      	movs	r2, #110	; 0x6e
 8002f7e:	210a      	movs	r1, #10
 8002f80:	4875      	ldr	r0, [pc, #468]	; (8003158 <FuncMenu_DrawSyncMenu+0x30c>)
 8002f82:	f00a f919 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	2282      	movs	r2, #130	; 0x82
 8002f94:	210a      	movs	r1, #10
 8002f96:	4871      	ldr	r0, [pc, #452]	; (800315c <FuncMenu_DrawSyncMenu+0x310>)
 8002f98:	f00a f90e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2296      	movs	r2, #150	; 0x96
 8002faa:	210a      	movs	r1, #10
 8002fac:	486c      	ldr	r0, [pc, #432]	; (8003160 <FuncMenu_DrawSyncMenu+0x314>)
 8002fae:	f00a f903 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8002fb2:	e11a      	b.n	80031ea <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	2302      	movs	r3, #2
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2232      	movs	r2, #50	; 0x32
 8002fc2:	210a      	movs	r1, #10
 8002fc4:	4861      	ldr	r0, [pc, #388]	; (800314c <FuncMenu_DrawSyncMenu+0x300>)
 8002fc6:	f00a f8f7 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2246      	movs	r2, #70	; 0x46
 8002fd8:	210a      	movs	r1, #10
 8002fda:	485d      	ldr	r0, [pc, #372]	; (8003150 <FuncMenu_DrawSyncMenu+0x304>)
 8002fdc:	f00a f8ec 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fec:	225a      	movs	r2, #90	; 0x5a
 8002fee:	210a      	movs	r1, #10
 8002ff0:	4858      	ldr	r0, [pc, #352]	; (8003154 <FuncMenu_DrawSyncMenu+0x308>)
 8002ff2:	f00a f8e1 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	226e      	movs	r2, #110	; 0x6e
 8003004:	210a      	movs	r1, #10
 8003006:	4854      	ldr	r0, [pc, #336]	; (8003158 <FuncMenu_DrawSyncMenu+0x30c>)
 8003008:	f00a f8d6 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800300c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2302      	movs	r3, #2
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	2282      	movs	r2, #130	; 0x82
 800301a:	210a      	movs	r1, #10
 800301c:	484f      	ldr	r0, [pc, #316]	; (800315c <FuncMenu_DrawSyncMenu+0x310>)
 800301e:	f00a f8cb 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	2302      	movs	r3, #2
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2300      	movs	r3, #0
 800302e:	2296      	movs	r2, #150	; 0x96
 8003030:	210a      	movs	r1, #10
 8003032:	484b      	ldr	r0, [pc, #300]	; (8003160 <FuncMenu_DrawSyncMenu+0x314>)
 8003034:	f00a f8c0 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8003038:	e0d7      	b.n	80031ea <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2302      	movs	r3, #2
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	2232      	movs	r2, #50	; 0x32
 8003048:	210a      	movs	r1, #10
 800304a:	4840      	ldr	r0, [pc, #256]	; (800314c <FuncMenu_DrawSyncMenu+0x300>)
 800304c:	f00a f8b4 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	2302      	movs	r3, #2
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2300      	movs	r3, #0
 800305c:	2246      	movs	r2, #70	; 0x46
 800305e:	210a      	movs	r1, #10
 8003060:	483b      	ldr	r0, [pc, #236]	; (8003150 <FuncMenu_DrawSyncMenu+0x304>)
 8003062:	f00a f8a9 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2302      	movs	r3, #2
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	225a      	movs	r2, #90	; 0x5a
 8003074:	210a      	movs	r1, #10
 8003076:	4837      	ldr	r0, [pc, #220]	; (8003154 <FuncMenu_DrawSyncMenu+0x308>)
 8003078:	f00a f89e 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 800307c:	2300      	movs	r3, #0
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003088:	226e      	movs	r2, #110	; 0x6e
 800308a:	210a      	movs	r1, #10
 800308c:	4832      	ldr	r0, [pc, #200]	; (8003158 <FuncMenu_DrawSyncMenu+0x30c>)
 800308e:	f00a f893 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	2302      	movs	r3, #2
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	2282      	movs	r2, #130	; 0x82
 80030a0:	210a      	movs	r1, #10
 80030a2:	482e      	ldr	r0, [pc, #184]	; (800315c <FuncMenu_DrawSyncMenu+0x310>)
 80030a4:	f00a f888 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80030a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2302      	movs	r3, #2
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	2296      	movs	r2, #150	; 0x96
 80030b6:	210a      	movs	r1, #10
 80030b8:	4829      	ldr	r0, [pc, #164]	; (8003160 <FuncMenu_DrawSyncMenu+0x314>)
 80030ba:	f00a f87d 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 80030be:	e094      	b.n	80031ea <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80030c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	2302      	movs	r3, #2
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2300      	movs	r3, #0
 80030cc:	2232      	movs	r2, #50	; 0x32
 80030ce:	210a      	movs	r1, #10
 80030d0:	481e      	ldr	r0, [pc, #120]	; (800314c <FuncMenu_DrawSyncMenu+0x300>)
 80030d2:	f00a f871 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80030d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	2302      	movs	r3, #2
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	2246      	movs	r2, #70	; 0x46
 80030e4:	210a      	movs	r1, #10
 80030e6:	481a      	ldr	r0, [pc, #104]	; (8003150 <FuncMenu_DrawSyncMenu+0x304>)
 80030e8:	f00a f866 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80030ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	2302      	movs	r3, #2
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	225a      	movs	r2, #90	; 0x5a
 80030fa:	210a      	movs	r1, #10
 80030fc:	4815      	ldr	r0, [pc, #84]	; (8003154 <FuncMenu_DrawSyncMenu+0x308>)
 80030fe:	f00a f85b 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	2302      	movs	r3, #2
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2300      	movs	r3, #0
 800310e:	226e      	movs	r2, #110	; 0x6e
 8003110:	210a      	movs	r1, #10
 8003112:	4811      	ldr	r0, [pc, #68]	; (8003158 <FuncMenu_DrawSyncMenu+0x30c>)
 8003114:	f00a f850 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8003118:	2300      	movs	r3, #0
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2302      	movs	r3, #2
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003124:	2282      	movs	r2, #130	; 0x82
 8003126:	210a      	movs	r1, #10
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <FuncMenu_DrawSyncMenu+0x310>)
 800312a:	f00a f845 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800312e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2302      	movs	r3, #2
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2300      	movs	r3, #0
 800313a:	2296      	movs	r2, #150	; 0x96
 800313c:	210a      	movs	r1, #10
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <FuncMenu_DrawSyncMenu+0x314>)
 8003140:	f00a f83a 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 8003144:	e051      	b.n	80031ea <FuncMenu_DrawSyncMenu+0x39e>
 8003146:	bf00      	nop
 8003148:	08010a34 	.word	0x08010a34
 800314c:	080109f8 	.word	0x080109f8
 8003150:	08010a00 	.word	0x08010a00
 8003154:	08010a0c 	.word	0x08010a0c
 8003158:	08010a14 	.word	0x08010a14
 800315c:	08010a20 	.word	0x08010a20
 8003160:	08010a2c 	.word	0x08010a2c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	2302      	movs	r3, #2
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	2232      	movs	r2, #50	; 0x32
 8003172:	210a      	movs	r1, #10
 8003174:	481f      	ldr	r0, [pc, #124]	; (80031f4 <FuncMenu_DrawSyncMenu+0x3a8>)
 8003176:	f00a f81f 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800317a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	2246      	movs	r2, #70	; 0x46
 8003188:	210a      	movs	r1, #10
 800318a:	481b      	ldr	r0, [pc, #108]	; (80031f8 <FuncMenu_DrawSyncMenu+0x3ac>)
 800318c:	f00a f814 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	225a      	movs	r2, #90	; 0x5a
 800319e:	210a      	movs	r1, #10
 80031a0:	4816      	ldr	r0, [pc, #88]	; (80031fc <FuncMenu_DrawSyncMenu+0x3b0>)
 80031a2:	f00a f809 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80031a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2302      	movs	r3, #2
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	226e      	movs	r2, #110	; 0x6e
 80031b4:	210a      	movs	r1, #10
 80031b6:	4812      	ldr	r0, [pc, #72]	; (8003200 <FuncMenu_DrawSyncMenu+0x3b4>)
 80031b8:	f009 fffe 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80031bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	2282      	movs	r2, #130	; 0x82
 80031ca:	210a      	movs	r1, #10
 80031cc:	480d      	ldr	r0, [pc, #52]	; (8003204 <FuncMenu_DrawSyncMenu+0x3b8>)
 80031ce:	f009 fff3 	bl	800d1b8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 80031d2:	2300      	movs	r3, #0
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2302      	movs	r3, #2
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031de:	2296      	movs	r2, #150	; 0x96
 80031e0:	210a      	movs	r1, #10
 80031e2:	4809      	ldr	r0, [pc, #36]	; (8003208 <FuncMenu_DrawSyncMenu+0x3bc>)
 80031e4:	f009 ffe8 	bl	800d1b8 <ILI9341_Draw_Text>
				break;
 80031e8:	bf00      	nop

		}
	}

}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	080109f8 	.word	0x080109f8
 80031f8:	08010a00 	.word	0x08010a00
 80031fc:	08010a0c 	.word	0x08010a0c
 8003200:	08010a14 	.word	0x08010a14
 8003204:	08010a20 	.word	0x08010a20
 8003208:	08010a2c 	.word	0x08010a2c

0800320c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d007      	beq.n	800322c <GainMenu_DrawMenu+0x20>
 800321c:	2b03      	cmp	r3, #3
 800321e:	d008      	beq.n	8003232 <GainMenu_DrawMenu+0x26>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d000      	beq.n	8003226 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003224:	e008      	b.n	8003238 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003226:	f000 f80b 	bl	8003240 <GainMenu_DrawMainMenu>
			break;
 800322a:	e005      	b.n	8003238 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800322c:	f000 f84e 	bl	80032cc <GainMenu_DrawSignalMenu>
			break;
 8003230:	e002      	b.n	8003238 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003232:	f000 f85f 	bl	80032f4 <GainMenu_DrawSyncMenu>
			break;
 8003236:	bf00      	nop

	}
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("GAIN MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8003246:	2300      	movs	r3, #0
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2303      	movs	r3, #3
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003252:	220a      	movs	r2, #10
 8003254:	210a      	movs	r1, #10
 8003256:	4819      	ldr	r0, [pc, #100]	; (80032bc <GainMenu_DrawMainMenu+0x7c>)
 8003258:	f009 ffae 	bl	800d1b8 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 800325c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2302      	movs	r3, #2
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	22d2      	movs	r2, #210	; 0xd2
 800326a:	210a      	movs	r1, #10
 800326c:	4814      	ldr	r0, [pc, #80]	; (80032c0 <GainMenu_DrawMainMenu+0x80>)
 800326e:	f009 ffa3 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8003272:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	2302      	movs	r3, #2
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	22d2      	movs	r2, #210	; 0xd2
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	4810      	ldr	r0, [pc, #64]	; (80032c4 <GainMenu_DrawMainMenu+0x84>)
 8003284:	f009 ff98 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8003288:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	2302      	movs	r3, #2
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2300      	movs	r3, #0
 8003294:	22d2      	movs	r2, #210	; 0xd2
 8003296:	21af      	movs	r1, #175	; 0xaf
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <GainMenu_DrawMainMenu+0x88>)
 800329a:	f009 ff8d 	bl	800d1b8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800329e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	2302      	movs	r3, #2
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2300      	movs	r3, #0
 80032aa:	22d2      	movs	r2, #210	; 0xd2
 80032ac:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <GainMenu_DrawMainMenu+0x88>)
 80032b2:	f009 ff81 	bl	800d1b8 <ILI9341_Draw_Text>
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	08010a4c 	.word	0x08010a4c
 80032c0:	08010a5c 	.word	0x08010a5c
 80032c4:	08010a64 	.word	0x08010a64
 80032c8:	08010a6c 	.word	0x08010a6c

080032cc <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL GAIN", 10, 10, WHITE, 3, BLACK);
 80032d2:	2300      	movs	r3, #0
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2303      	movs	r3, #3
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032de:	220a      	movs	r2, #10
 80032e0:	210a      	movs	r1, #10
 80032e2:	4803      	ldr	r0, [pc, #12]	; (80032f0 <GainMenu_DrawSignalMenu+0x24>)
 80032e4:	f009 ff68 	bl	800d1b8 <ILI9341_Draw_Text>
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08010a74 	.word	0x08010a74

080032f4 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC GAIN", 10, 10, WHITE, 3, BLACK);
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2303      	movs	r3, #3
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003306:	220a      	movs	r2, #10
 8003308:	210a      	movs	r1, #10
 800330a:	4803      	ldr	r0, [pc, #12]	; (8003318 <GainMenu_DrawSyncMenu+0x24>)
 800330c:	f009 ff54 	bl	800d1b8 <ILI9341_Draw_Text>
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08010a88 	.word	0x08010a88

0800331c <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <BiasMenu_getStatus+0x14>)
 8003322:	781b      	ldrb	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20001f11 	.word	0x20001f11

08003334 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <BiasMenuEntryHandler+0x34>)
 800333a:	f00b fa81 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 800333e:	f7fd fef3 	bl	8001128 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <BiasMenuEntryHandler+0x38>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <BiasMenuEntryHandler+0x3c>)
 800334a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003350:	f000 fd60 	bl	8003e14 <BO_GetDcBiasEncoderValue>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <BiasMenuEntryHandler+0x3c>)
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <BiasMenuEntryHandler+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003362:	230c      	movs	r3, #12
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08010a9c 	.word	0x08010a9c
 800336c:	20001f11 	.word	0x20001f11
 8003370:	40012c00 	.word	0x40012c00
 8003374:	20001f13 	.word	0x20001f13

08003378 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 800337c:	4807      	ldr	r0, [pc, #28]	; (800339c <BiasMenuInputHandler+0x24>)
 800337e:	f00b fa5f 	bl	800e840 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003382:	2001      	movs	r0, #1
 8003384:	f001 faec 	bl	8004960 <SM_GetEncoderValue>
 8003388:	4603      	mov	r3, r0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fd4e 	bl	8003e2c <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <BiasMenuInputHandler+0x28>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003396:	230c      	movs	r3, #12
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	08010ac0 	.word	0x08010ac0
 80033a0:	20001f13 	.word	0x20001f13

080033a4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 80033a8:	4808      	ldr	r0, [pc, #32]	; (80033cc <BiasMenuExitHandler+0x28>)
 80033aa:	f00b fa49 	bl	800e840 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <BiasMenuExitHandler+0x2c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80033b4:	f7fd feb8 	bl	8001128 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 80033b8:	4806      	ldr	r0, [pc, #24]	; (80033d4 <BiasMenuExitHandler+0x30>)
 80033ba:	f00b fa41 	bl	800e840 <puts>
#endif

	eNewEvent = evIdle;
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <BiasMenuExitHandler+0x34>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	08010ae4 	.word	0x08010ae4
 80033d0:	20001f11 	.word	0x20001f11
 80033d4:	08010b08 	.word	0x08010b08
 80033d8:	20001f13 	.word	0x20001f13

080033dc <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0

	switch(eNextState)
 80033e0:	4bab      	ldr	r3, [pc, #684]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f200 81b7 	bhi.w	8003758 <EM_ProcessEvent+0x37c>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <EM_ProcessEvent+0x14>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003425 	.word	0x08003425
 80033f4:	0800347f 	.word	0x0800347f
 80033f8:	080034c5 	.word	0x080034c5
 80033fc:	080034f7 	.word	0x080034f7
 8003400:	08003529 	.word	0x08003529
 8003404:	0800356f 	.word	0x0800356f
 8003408:	080035a1 	.word	0x080035a1
 800340c:	08003759 	.word	0x08003759
 8003410:	080035d3 	.word	0x080035d3
 8003414:	0800362d 	.word	0x0800362d
 8003418:	0800365f 	.word	0x0800365f
 800341c:	080036c1 	.word	0x080036c1
 8003420:	08003729 	.word	0x08003729
// MAIN MENU

		case Idle_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Idle_State\n");
 8003424:	489b      	ldr	r0, [pc, #620]	; (8003694 <EM_ProcessEvent+0x2b8>)
 8003426:	f00b fa0b 	bl	800e840 <puts>
#endif

			if(eNewEvent == evBlueBtn)
 800342a:	4b9b      	ldr	r3, [pc, #620]	; (8003698 <EM_ProcessEvent+0x2bc>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <EM_ProcessEvent+0x62>
			{
				eNextState = FuncMainMenuEntryHandler();
 8003432:	f000 faef 	bl	8003a14 <FuncMainMenuEntryHandler>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	4b95      	ldr	r3, [pc, #596]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800343c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800343e:	4b96      	ldr	r3, [pc, #600]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d105      	bne.n	8003452 <EM_ProcessEvent+0x76>
			{
				eNextState = FreqMainMenuEntryHandler();
 8003446:	f000 f9cb 	bl	80037e0 <FreqMainMenuEntryHandler>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	4b90      	ldr	r3, [pc, #576]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003450:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003452:	4b91      	ldr	r3, [pc, #580]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d105      	bne.n	8003466 <EM_ProcessEvent+0x8a>
			{
				eNextState = GainMainMenuEntryHandler();
 800345a:	f000 fbdd 	bl	8003c18 <GainMainMenuEntryHandler>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003464:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003466:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b04      	cmp	r3, #4
 800346c:	f040 8176 	bne.w	800375c <EM_ProcessEvent+0x380>
			{
				eNextState = BiasMenuEntryHandler();
 8003470:	f7ff ff60 	bl	8003334 <BiasMenuEntryHandler>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	4b85      	ldr	r3, [pc, #532]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800347a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800347c:	e16e      	b.n	800375c <EM_ProcessEvent+0x380>
// FUNC MENUS

		case Func_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Main_Menu_State\n");
 800347e:	4887      	ldr	r0, [pc, #540]	; (800369c <EM_ProcessEvent+0x2c0>)
 8003480:	f00b f9de 	bl	800e840 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003484:	4b84      	ldr	r3, [pc, #528]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d105      	bne.n	8003498 <EM_ProcessEvent+0xbc>
			{
				eNextState = FuncMainMenuExitHandler();
 800348c:	f000 fad8 	bl	8003a40 <FuncMainMenuExitHandler>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	4b7e      	ldr	r3, [pc, #504]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003496:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003498:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <EM_ProcessEvent+0x2bc>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d105      	bne.n	80034ac <EM_ProcessEvent+0xd0>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80034a0:	f000 faea 	bl	8003a78 <FuncSignalMenuEntryHandler>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80034aa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80034ac:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	f040 8155 	bne.w	8003760 <EM_ProcessEvent+0x384>
			{
				eNextState = FuncSyncMenuEntryHandler();
 80034b6:	f000 fb41 	bl	8003b3c <FuncSyncMenuEntryHandler>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	4b74      	ldr	r3, [pc, #464]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80034c0:	701a      	strb	r2, [r3, #0]
			}

			break;
 80034c2:	e14d      	b.n	8003760 <EM_ProcessEvent+0x384>

		case Func_Signal_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Signal_Menu_State\n");
 80034c4:	4876      	ldr	r0, [pc, #472]	; (80036a0 <EM_ProcessEvent+0x2c4>)
 80034c6:	f00b f9bb 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d105      	bne.n	80034de <EM_ProcessEvent+0x102>
			{
				eNextState = FuncSignalMenuInputHandler();
 80034d2:	f000 fb07 	bl	8003ae4 <FuncSignalMenuInputHandler>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80034dc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	f040 813e 	bne.w	8003764 <EM_ProcessEvent+0x388>
			{
				eNextState = FuncSignalMenuExitHandler();
 80034e8:	f000 fb12 	bl	8003b10 <FuncSignalMenuExitHandler>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b67      	ldr	r3, [pc, #412]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80034f2:	701a      	strb	r2, [r3, #0]
			}

			break;
 80034f4:	e136      	b.n	8003764 <EM_ProcessEvent+0x388>

		case Func_Sync_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Sync_Menu_State\n");
 80034f6:	486b      	ldr	r0, [pc, #428]	; (80036a4 <EM_ProcessEvent+0x2c8>)
 80034f8:	f00b f9a2 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80034fc:	4b66      	ldr	r3, [pc, #408]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d105      	bne.n	8003510 <EM_ProcessEvent+0x134>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003504:	f000 fb50 	bl	8003ba8 <FuncSyncMenuInputHandler>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b60      	ldr	r3, [pc, #384]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800350e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b06      	cmp	r3, #6
 8003516:	f040 8127 	bne.w	8003768 <EM_ProcessEvent+0x38c>
			{
				eNextState = FuncSyncMenuExitHandler();
 800351a:	f000 fb5b 	bl	8003bd4 <FuncSyncMenuExitHandler>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003524:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003526:	e11f      	b.n	8003768 <EM_ProcessEvent+0x38c>
// GAIN MENUS

		case Gain_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Main_Menu_State\n");
 8003528:	485f      	ldr	r0, [pc, #380]	; (80036a8 <EM_ProcessEvent+0x2cc>)
 800352a:	f00b f989 	bl	800e840 <puts>
#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 800352e:	4b5a      	ldr	r3, [pc, #360]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d105      	bne.n	8003542 <EM_ProcessEvent+0x166>
			{
				eNextState = GainMainMenuExitHandler();
 8003536:	f000 fb85 	bl	8003c44 <GainMainMenuExitHandler>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003540:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003542:	4b55      	ldr	r3, [pc, #340]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <EM_ProcessEvent+0x17a>
			{
				eNextState = GainSignalMenuEntryHandler();
 800354a:	f000 fb97 	bl	8003c7c <GainSignalMenuEntryHandler>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003554:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003556:	4b50      	ldr	r3, [pc, #320]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	f040 8106 	bne.w	800376c <EM_ProcessEvent+0x390>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003560:	f000 fbec 	bl	8003d3c <GainSyncMenuEntryHandler>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800356a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800356c:	e0fe      	b.n	800376c <EM_ProcessEvent+0x390>

		case Gain_Signal_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Signal_Menu_State\n");
 800356e:	484f      	ldr	r0, [pc, #316]	; (80036ac <EM_ProcessEvent+0x2d0>)
 8003570:	f00b f966 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003574:	4b48      	ldr	r3, [pc, #288]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d105      	bne.n	8003588 <EM_ProcessEvent+0x1ac>
			{
				eNextState = GainSignalMenuInputHandler();
 800357c:	f000 fbb2 	bl	8003ce4 <GainSignalMenuInputHandler>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003586:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003588:	4b43      	ldr	r3, [pc, #268]	; (8003698 <EM_ProcessEvent+0x2bc>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b06      	cmp	r3, #6
 800358e:	f040 80ef 	bne.w	8003770 <EM_ProcessEvent+0x394>
			{
				eNextState = GainSignalMenuExitHandler();
 8003592:	f000 fbbd 	bl	8003d10 <GainSignalMenuExitHandler>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800359c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800359e:	e0e7      	b.n	8003770 <EM_ProcessEvent+0x394>

		case Gain_Sync_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Sync_Menu_State\n");
 80035a0:	4843      	ldr	r0, [pc, #268]	; (80036b0 <EM_ProcessEvent+0x2d4>)
 80035a2:	f00b f94d 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80035a6:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d105      	bne.n	80035ba <EM_ProcessEvent+0x1de>
			{
				eNextState = GainSyncMenuInputHandler();
 80035ae:	f000 fbf9 	bl	8003da4 <GainSyncMenuInputHandler>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b36      	ldr	r3, [pc, #216]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80035b8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	f040 80d8 	bne.w	8003774 <EM_ProcessEvent+0x398>
			{
				eNextState = GainSyncMenuExitHandler();
 80035c4:	f000 fc04 	bl	8003dd0 <GainSyncMenuExitHandler>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80035ce:	701a      	strb	r2, [r3, #0]
			}

			break;
 80035d0:	e0d0      	b.n	8003774 <EM_ProcessEvent+0x398>
// FREQ MENUS

		case Freq_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Main_Menu_State\n");
 80035d2:	4838      	ldr	r0, [pc, #224]	; (80036b4 <EM_ProcessEvent+0x2d8>)
 80035d4:	f00b f934 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderPush)
 80035d8:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d105      	bne.n	80035ec <EM_ProcessEvent+0x210>
			{
				eNextState = FreqMainMenuExitHandler();
 80035e0:	f000 f914 	bl	800380c <FreqMainMenuExitHandler>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b29      	ldr	r3, [pc, #164]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80035ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <EM_ProcessEvent+0x2bc>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <EM_ProcessEvent+0x224>
			{
				eNextState = FreqPresetMenuEntryHandler();
 80035f4:	f000 f92c 	bl	8003850 <FreqPresetMenuEntryHandler>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <EM_ProcessEvent+0x2b4>)
 80035fe:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d105      	bne.n	8003614 <EM_ProcessEvent+0x238>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003608:	f000 f97e 	bl	8003908 <FreqAdjustMenuEntryHandler>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003612:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b03      	cmp	r3, #3
 800361a:	f040 80ad 	bne.w	8003778 <EM_ProcessEvent+0x39c>
			{
				eNextState = FreqSweepMenuEntryHandler();
 800361e:	f000 f9bb 	bl	8003998 <FreqSweepMenuEntryHandler>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003628:	701a      	strb	r2, [r3, #0]
			}

			break;
 800362a:	e0a5      	b.n	8003778 <EM_ProcessEvent+0x39c>

		case Freq_Preset_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Preset_Menu_State\n");
 800362c:	4822      	ldr	r0, [pc, #136]	; (80036b8 <EM_ProcessEvent+0x2dc>)
 800362e:	f00b f907 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d105      	bne.n	8003646 <EM_ProcessEvent+0x26a>
			{
				eNextState = FreqPresetMenuInputHandler();
 800363a:	f000 f93b 	bl	80038b4 <FreqPresetMenuInputHandler>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003644:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b06      	cmp	r3, #6
 800364c:	f040 8096 	bne.w	800377c <EM_ProcessEvent+0x3a0>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003650:	f000 f946 	bl	80038e0 <FreqPresetMenuExitHandler>
 8003654:	4603      	mov	r3, r0
 8003656:	461a      	mov	r2, r3
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800365a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800365c:	e08e      	b.n	800377c <EM_ProcessEvent+0x3a0>

		case Freq_Adjust_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Adjust_Menu_State\n");
 800365e:	4817      	ldr	r0, [pc, #92]	; (80036bc <EM_ProcessEvent+0x2e0>)
 8003660:	f00b f8ee 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <EM_ProcessEvent+0x2bc>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d105      	bne.n	8003678 <EM_ProcessEvent+0x29c>
			{
				eNextState = FreqAdjustMenuInputHandler();
 800366c:	f000 f96e 	bl	800394c <FreqAdjustMenuInputHandler>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <EM_ProcessEvent+0x2b4>)
 8003676:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <EM_ProcessEvent+0x2bc>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b06      	cmp	r3, #6
 800367e:	d17f      	bne.n	8003780 <EM_ProcessEvent+0x3a4>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003680:	f000 f976 	bl	8003970 <FreqAdjustMenuExitHandler>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	4b01      	ldr	r3, [pc, #4]	; (8003690 <EM_ProcessEvent+0x2b4>)
 800368a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800368c:	e078      	b.n	8003780 <EM_ProcessEvent+0x3a4>
 800368e:	bf00      	nop
 8003690:	20001f12 	.word	0x20001f12
 8003694:	08010b20 	.word	0x08010b20
 8003698:	20001f13 	.word	0x20001f13
 800369c:	08010b2c 	.word	0x08010b2c
 80036a0:	08010b44 	.word	0x08010b44
 80036a4:	08010b5c 	.word	0x08010b5c
 80036a8:	08010b74 	.word	0x08010b74
 80036ac:	08010b8c 	.word	0x08010b8c
 80036b0:	08010ba4 	.word	0x08010ba4
 80036b4:	08010bbc 	.word	0x08010bbc
 80036b8:	08010bd4 	.word	0x08010bd4
 80036bc:	08010bec 	.word	0x08010bec

		case Freq_Sweep_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Sweep_Menu_State\n");
 80036c0:	4833      	ldr	r0, [pc, #204]	; (8003790 <EM_ProcessEvent+0x3b4>)
 80036c2:	f00b f8bd 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <EM_ProcessEvent+0x3b8>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d103      	bne.n	80036d6 <EM_ProcessEvent+0x2fa>
			{
				TIM3->ARR = TIM1->CNT;
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <EM_ProcessEvent+0x3bc>)
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <EM_ProcessEvent+0x3c0>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	62d3      	str	r3, [r2, #44]	; 0x2c
			}
			if(eNewEvent == evEncoderPush)
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <EM_ProcessEvent+0x3b8>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d105      	bne.n	80036ea <EM_ProcessEvent+0x30e>
			{
				eNextState = FreqSweepMenuExitHandler();
 80036de:	f000 f979 	bl	80039d4 <FreqSweepMenuExitHandler>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <EM_ProcessEvent+0x3c4>)
 80036e8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <EM_ProcessEvent+0x3b8>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <EM_ProcessEvent+0x322>
			{
				// enable
				TIM3->CR1 ^= TIM_CR1_CEN;
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <EM_ProcessEvent+0x3c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a29      	ldr	r2, [pc, #164]	; (800379c <EM_ProcessEvent+0x3c0>)
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	6013      	str	r3, [r2, #0]
			}
			if(eNewEvent == evGreenBtn)
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <EM_ProcessEvent+0x3b8>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d105      	bne.n	8003712 <EM_ProcessEvent+0x336>
			{
				// center-aligned mode
				TIM3->CR1 ^= (TIM_CR1_CMS_0);
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <EM_ProcessEvent+0x3c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a24      	ldr	r2, [pc, #144]	; (800379c <EM_ProcessEvent+0x3c0>)
 800370c:	f083 0320 	eor.w	r3, r3, #32
 8003710:	6013      	str	r3, [r2, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <EM_ProcessEvent+0x3b8>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d134      	bne.n	8003784 <EM_ProcessEvent+0x3a8>
			{
				// direction
				TIM3->CR1 ^= (TIM_CR1_DIR);
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <EM_ProcessEvent+0x3c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1f      	ldr	r2, [pc, #124]	; (800379c <EM_ProcessEvent+0x3c0>)
 8003720:	f083 0310 	eor.w	r3, r3, #16
 8003724:	6013      	str	r3, [r2, #0]
			}
			if(eNewEvent == evRedBtn)
			{

			}
			break;
 8003726:	e02d      	b.n	8003784 <EM_ProcessEvent+0x3a8>
// BIAS MENUS

		case Bias_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Bias_Menu_State\n");
 8003728:	481e      	ldr	r0, [pc, #120]	; (80037a4 <EM_ProcessEvent+0x3c8>)
 800372a:	f00b f889 	bl	800e840 <puts>
#endif

			if(eNewEvent == evEncoderSet)
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <EM_ProcessEvent+0x3b8>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d105      	bne.n	8003742 <EM_ProcessEvent+0x366>
			{
				eNextState = BiasMenuInputHandler();
 8003736:	f7ff fe1f 	bl	8003378 <BiasMenuInputHandler>
 800373a:	4603      	mov	r3, r0
 800373c:	461a      	mov	r2, r3
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <EM_ProcessEvent+0x3c4>)
 8003740:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <EM_ProcessEvent+0x3b8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d11e      	bne.n	8003788 <EM_ProcessEvent+0x3ac>
			{
				eNextState = BiasMenuExitHandler();
 800374a:	f7ff fe2b 	bl	80033a4 <BiasMenuExitHandler>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <EM_ProcessEvent+0x3c4>)
 8003754:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003756:	e017      	b.n	8003788 <EM_ProcessEvent+0x3ac>

		default:
			break;
 8003758:	bf00      	nop
 800375a:	e016      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 800375c:	bf00      	nop
 800375e:	e014      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003760:	bf00      	nop
 8003762:	e012      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003764:	bf00      	nop
 8003766:	e010      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003768:	bf00      	nop
 800376a:	e00e      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 800376c:	bf00      	nop
 800376e:	e00c      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003770:	bf00      	nop
 8003772:	e00a      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003774:	bf00      	nop
 8003776:	e008      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003778:	bf00      	nop
 800377a:	e006      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 800377c:	bf00      	nop
 800377e:	e004      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <EM_ProcessEvent+0x3ae>
			break;
 8003788:	bf00      	nop
	}

}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	08010c04 	.word	0x08010c04
 8003794:	20001f13 	.word	0x20001f13
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	20001f12 	.word	0x20001f12
 80037a4:	08010c1c 	.word	0x08010c1c

080037a8 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80037b2:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <EM_SetNewEvent+0x1c>)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	7013      	strb	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20001f13 	.word	0x20001f13

080037c8 <FreqMenu_getStatus>:
#include <stdio.h>

eFreqMenu_Status eNextFreqMenuStatus = 	DISABLE_FREQ_MENU;

eFreqMenu_Status FreqMenu_getStatus()
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <FreqMenu_getStatus+0x14>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20001f14 	.word	0x20001f14

080037e0 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqMainMenuEntryHandler Event captured\n");
 80037e4:	4806      	ldr	r0, [pc, #24]	; (8003800 <FreqMainMenuEntryHandler+0x20>)
 80037e6:	f00b f82b 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 80037ea:	f7fd fc9d 	bl	8001128 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <FreqMainMenuEntryHandler+0x24>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <FreqMainMenuEntryHandler+0x28>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80037fa:	2308      	movs	r3, #8
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	08010c2c 	.word	0x08010c2c
 8003804:	20001f14 	.word	0x20001f14
 8003808:	20001f13 	.word	0x20001f13

0800380c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqMainMenuExitHandler Event captured\n");
 8003810:	480a      	ldr	r0, [pc, #40]	; (800383c <FreqMainMenuExitHandler+0x30>)
 8003812:	f00b f815 	bl	800e840 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <FreqMainMenuExitHandler+0x34>)
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <FreqMainMenuExitHandler+0x38>)
 800381e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003824:	f7fd fc80 	bl	8001128 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003828:	4807      	ldr	r0, [pc, #28]	; (8003848 <FreqMainMenuExitHandler+0x3c>)
 800382a:	f00b f809 	bl	800e840 <puts>
#endif

	eNewEvent = evIdle;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <FreqMainMenuExitHandler+0x40>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	08010c7c 	.word	0x08010c7c
 8003840:	20001f14 	.word	0x20001f14
 8003844:	40012c00 	.word	0x40012c00
 8003848:	08010ca4 	.word	0x08010ca4
 800384c:	20001f13 	.word	0x20001f13

08003850 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqPresetMenuEntryHandler Event captured\n");
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <FreqPresetMenuEntryHandler+0x50>)
 8003858:	f00a fff2 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 800385c:	f7fd fc64 	bl	8001128 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <FreqPresetMenuEntryHandler+0x54>)
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003866:	f000 fcdf 	bl	8004228 <FreqO_GetFPresetObject>
 800386a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	791a      	ldrb	r2, [r3, #4]
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <FreqPresetMenuEntryHandler+0x58>)
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800387a:	f000 fd07 	bl	800428c <FreqO_GetFreqPresetEncoderRange>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <FreqPresetMenuEntryHandler+0x58>)
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
 8003886:	e002      	b.n	800388e <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003888:	4808      	ldr	r0, [pc, #32]	; (80038ac <FreqPresetMenuEntryHandler+0x5c>)
 800388a:	f7fd fd0b 	bl	80012a4 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <FreqPresetMenuEntryHandler+0x60>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003894:	2309      	movs	r3, #9
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	08010cbc 	.word	0x08010cbc
 80038a4:	20001f14 	.word	0x20001f14
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	08010ce8 	.word	0x08010ce8
 80038b0:	20001f13 	.word	0x20001f13

080038b4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqPresetMenuInputHandler Event captured\n");
 80038b8:	4807      	ldr	r0, [pc, #28]	; (80038d8 <FreqPresetMenuInputHandler+0x24>)
 80038ba:	f00a ffc1 	bl	800e840 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80038be:	2001      	movs	r0, #1
 80038c0:	f001 f84e 	bl	8004960 <SM_GetEncoderValue>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fbbc 	bl	8004044 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <FreqPresetMenuInputHandler+0x28>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80038d2:	2309      	movs	r3, #9
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08010d24 	.word	0x08010d24
 80038dc:	20001f13 	.word	0x20001f13

080038e0 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqPresetMenuExitHandler Event captured\n");
 80038e4:	4805      	ldr	r0, [pc, #20]	; (80038fc <FreqPresetMenuExitHandler+0x1c>)
 80038e6:	f00a ffab 	bl	800e840 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <FreqPresetMenuExitHandler+0x20>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <FreqPresetMenuExitHandler+0x24>)
 80038f2:	2202      	movs	r2, #2
 80038f4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	08010d50 	.word	0x08010d50
 8003900:	20001f14 	.word	0x20001f14
 8003904:	20001f13 	.word	0x20001f13

08003908 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqAdjustMenuEntryHandler Event captured\n");
 800390c:	480a      	ldr	r0, [pc, #40]	; (8003938 <FreqAdjustMenuEntryHandler+0x30>)
 800390e:	f00a ff97 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003912:	f7fd fc09 	bl	8001128 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <FreqAdjustMenuEntryHandler+0x34>)
 8003918:	2203      	movs	r2, #3
 800391a:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <FreqAdjustMenuEntryHandler+0x38>)
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <FreqAdjustMenuEntryHandler+0x3c>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <FreqAdjustMenuEntryHandler+0x3c>)
 8003926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <FreqAdjustMenuEntryHandler+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003932:	230a      	movs	r3, #10
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08010d7c 	.word	0x08010d7c
 800393c:	20001f14 	.word	0x20001f14
 8003940:	40013400 	.word	0x40013400
 8003944:	40012c00 	.word	0x40012c00
 8003948:	20001f13 	.word	0x20001f13

0800394c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqAdjustMenuInputHandler Event captured\n");
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <FreqAdjustMenuInputHandler+0x1c>)
 8003952:	f00a ff75 	bl	800e840 <puts>
#endif

	FreqO_AdjustFreq();
 8003956:	f000 fb67 	bl	8004028 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <FreqAdjustMenuInputHandler+0x20>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003960:	230a      	movs	r3, #10
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	08010da8 	.word	0x08010da8
 800396c:	20001f13 	.word	0x20001f13

08003970 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqAdjustMenuExitHandler Event captured\n");
 8003974:	4805      	ldr	r0, [pc, #20]	; (800398c <FreqAdjustMenuExitHandler+0x1c>)
 8003976:	f00a ff63 	bl	800e840 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <FreqAdjustMenuExitHandler+0x20>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <FreqAdjustMenuExitHandler+0x24>)
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	08010dd4 	.word	0x08010dd4
 8003990:	20001f14 	.word	0x20001f14
 8003994:	20001f13 	.word	0x20001f13

08003998 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqSweepMenuEntryHandler captured\n");
 800399c:	4809      	ldr	r0, [pc, #36]	; (80039c4 <FreqSweepMenuEntryHandler+0x2c>)
 800399e:	f00a ff4f 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 80039a2:	f7fd fbc1 	bl	8001128 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <FreqSweepMenuEntryHandler+0x30>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <FreqSweepMenuEntryHandler+0x34>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <FreqSweepMenuEntryHandler+0x34>)
 80039b4:	2238      	movs	r2, #56	; 0x38
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <FreqSweepMenuEntryHandler+0x38>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80039be:	230b      	movs	r3, #11
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	08010e00 	.word	0x08010e00
 80039c8:	20001f14 	.word	0x20001f14
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	20001f13 	.word	0x20001f13

080039d4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FreqSweepMenuExitHandler Event captured\n");
 80039d8:	4805      	ldr	r0, [pc, #20]	; (80039f0 <FreqSweepMenuExitHandler+0x1c>)
 80039da:	f00a ff31 	bl	800e840 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <FreqSweepMenuExitHandler+0x20>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <FreqSweepMenuExitHandler+0x24>)
 80039e6:	2202      	movs	r2, #2
 80039e8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	08010e24 	.word	0x08010e24
 80039f4:	20001f14 	.word	0x20001f14
 80039f8:	20001f13 	.word	0x20001f13

080039fc <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <FuncMenu_getStatus+0x14>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20001f15 	.word	0x20001f15

08003a14 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8003a18:	4806      	ldr	r0, [pc, #24]	; (8003a34 <FuncMainMenuEntryHandler+0x20>)
 8003a1a:	f00a ff11 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003a1e:	f7fd fb83 	bl	8001128 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <FuncMainMenuEntryHandler+0x24>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <FuncMainMenuEntryHandler+0x28>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003a2e:	2301      	movs	r3, #1
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08010e4c 	.word	0x08010e4c
 8003a38:	20001f15 	.word	0x20001f15
 8003a3c:	20001f13 	.word	0x20001f13

08003a40 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8003a44:	4808      	ldr	r0, [pc, #32]	; (8003a68 <FuncMainMenuExitHandler+0x28>)
 8003a46:	f00a fefb 	bl	800e840 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <FuncMainMenuExitHandler+0x2c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003a50:	f7fd fb6a 	bl	8001128 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003a54:	4806      	ldr	r0, [pc, #24]	; (8003a70 <FuncMainMenuExitHandler+0x30>)
 8003a56:	f00a fef3 	bl	800e840 <puts>
#endif

	eNewEvent = evIdle;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <FuncMainMenuExitHandler+0x34>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08010e9c 	.word	0x08010e9c
 8003a6c:	20001f15 	.word	0x20001f15
 8003a70:	08010ec4 	.word	0x08010ec4
 8003a74:	20001f13 	.word	0x20001f13

08003a78 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 8003a7e:	4814      	ldr	r0, [pc, #80]	; (8003ad0 <FuncSignalMenuEntryHandler+0x58>)
 8003a80:	f00a fede 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003a84:	f7fd fb50 	bl	8001128 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <FuncSignalMenuEntryHandler+0x5c>)
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f000 ff50 	bl	8004934 <SM_GetOutputChannel>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a9a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	785a      	ldrb	r2, [r3, #1]
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <FuncSignalMenuEntryHandler+0x60>)
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003aaa:	f000 fd73 	bl	8004594 <FuncO_GetFuncPresetEncoderRange>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <FuncSignalMenuEntryHandler+0x60>)
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ab6:	e002      	b.n	8003abe <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <FuncSignalMenuEntryHandler+0x64>)
 8003aba:	f7fd fbf3 	bl	80012a4 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <FuncSignalMenuEntryHandler+0x68>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003ac4:	2302      	movs	r3, #2
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08010edc 	.word	0x08010edc
 8003ad4:	20001f15 	.word	0x20001f15
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	08010f08 	.word	0x08010f08
 8003ae0:	20001f13 	.word	0x20001f13

08003ae4 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8003ae8:	4807      	ldr	r0, [pc, #28]	; (8003b08 <FuncSignalMenuInputHandler+0x24>)
 8003aea:	f00a fea9 	bl	800e840 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003aee:	2001      	movs	r0, #1
 8003af0:	f000 ff36 	bl	8004960 <SM_GetEncoderValue>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fbe8 	bl	80042cc <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <FuncSignalMenuInputHandler+0x28>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003b02:	2302      	movs	r3, #2
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08010f3c 	.word	0x08010f3c
 8003b0c:	20001f13 	.word	0x20001f13

08003b10 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 8003b14:	4806      	ldr	r0, [pc, #24]	; (8003b30 <FuncSignalMenuExitHandler+0x20>)
 8003b16:	f00a fe93 	bl	800e840 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <FuncSignalMenuExitHandler+0x24>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003b20:	f7fd fb02 	bl	8001128 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <FuncSignalMenuExitHandler+0x28>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08010f68 	.word	0x08010f68
 8003b34:	20001f15 	.word	0x20001f15
 8003b38:	20001f13 	.word	0x20001f13

08003b3c <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8003b42:	4814      	ldr	r0, [pc, #80]	; (8003b94 <FuncSyncMenuEntryHandler+0x58>)
 8003b44:	f00a fe7c 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003b48:	f7fd faee 	bl	8001128 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <FuncSyncMenuEntryHandler+0x5c>)
 8003b4e:	2203      	movs	r2, #3
 8003b50:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8003b52:	2001      	movs	r0, #1
 8003b54:	f000 feee 	bl	8004934 <SM_GetOutputChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b5e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	785a      	ldrb	r2, [r3, #1]
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <FuncSyncMenuEntryHandler+0x60>)
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003b6e:	f000 fd11 	bl	8004594 <FuncO_GetFuncPresetEncoderRange>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <FuncSyncMenuEntryHandler+0x60>)
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b7a:	e002      	b.n	8003b82 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003b7c:	4808      	ldr	r0, [pc, #32]	; (8003ba0 <FuncSyncMenuEntryHandler+0x64>)
 8003b7e:	f7fd fb91 	bl	80012a4 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <FuncSyncMenuEntryHandler+0x68>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003b88:	2303      	movs	r3, #3
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	08010f94 	.word	0x08010f94
 8003b98:	20001f15 	.word	0x20001f15
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	08010f08 	.word	0x08010f08
 8003ba4:	20001f13 	.word	0x20001f13

08003ba8 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 8003bac:	4807      	ldr	r0, [pc, #28]	; (8003bcc <FuncSyncMenuInputHandler+0x24>)
 8003bae:	f00a fe47 	bl	800e840 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f000 fed4 	bl	8004960 <SM_GetEncoderValue>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fbde 	bl	800437c <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <FuncSyncMenuInputHandler+0x28>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003bc6:	2303      	movs	r3, #3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	08010fbc 	.word	0x08010fbc
 8003bd0:	20001f13 	.word	0x20001f13

08003bd4 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8003bd8:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <FuncSyncMenuExitHandler+0x20>)
 8003bda:	f00a fe31 	bl	800e840 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <FuncSyncMenuExitHandler+0x24>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003be4:	f7fd faa0 	bl	8001128 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <FuncSyncMenuExitHandler+0x28>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08010fe4 	.word	0x08010fe4
 8003bf8:	20001f15 	.word	0x20001f15
 8003bfc:	20001f13 	.word	0x20001f13

08003c00 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <GainMenu_getStatus+0x14>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20001f16 	.word	0x20001f16

08003c18 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 8003c1c:	4806      	ldr	r0, [pc, #24]	; (8003c38 <GainMainMenuEntryHandler+0x20>)
 8003c1e:	f00a fe0f 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003c22:	f7fd fa81 	bl	8001128 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <GainMainMenuEntryHandler+0x24>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <GainMainMenuEntryHandler+0x28>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003c32:	2304      	movs	r3, #4
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	0801100c 	.word	0x0801100c
 8003c3c:	20001f16 	.word	0x20001f16
 8003c40:	20001f13 	.word	0x20001f13

08003c44 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8003c48:	4808      	ldr	r0, [pc, #32]	; (8003c6c <GainMainMenuExitHandler+0x28>)
 8003c4a:	f00a fdf9 	bl	800e840 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <GainMainMenuExitHandler+0x2c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003c54:	f7fd fa68 	bl	8001128 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003c58:	4806      	ldr	r0, [pc, #24]	; (8003c74 <GainMainMenuExitHandler+0x30>)
 8003c5a:	f00a fdf1 	bl	800e840 <puts>
#endif

	eNewEvent = evIdle;
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <GainMainMenuExitHandler+0x34>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	0801105c 	.word	0x0801105c
 8003c70:	20001f16 	.word	0x20001f16
 8003c74:	08011084 	.word	0x08011084
 8003c78:	20001f13 	.word	0x20001f13

08003c7c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8003c82:	4813      	ldr	r0, [pc, #76]	; (8003cd0 <GainSignalMenuEntryHandler+0x54>)
 8003c84:	f00a fddc 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003c88:	f7fd fa4e 	bl	8001128 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <GainSignalMenuEntryHandler+0x58>)
 8003c8e:	2202      	movs	r2, #2
 8003c90:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8003c92:	2000      	movs	r0, #0
 8003c94:	f000 fe4e 	bl	8004934 <SM_GetOutputChannel>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003c9e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8b1a      	ldrh	r2, [r3, #24]
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <GainSignalMenuEntryHandler+0x5c>)
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <GainSignalMenuEntryHandler+0x5c>)
 8003cb0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cb6:	e002      	b.n	8003cbe <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <GainSignalMenuEntryHandler+0x60>)
 8003cba:	f7fd faf3 	bl	80012a4 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <GainSignalMenuEntryHandler+0x64>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003cc4:	2305      	movs	r3, #5
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	0801109c 	.word	0x0801109c
 8003cd4:	20001f16 	.word	0x20001f16
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	080110c8 	.word	0x080110c8
 8003ce0:	20001f13 	.word	0x20001f13

08003ce4 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8003ce8:	4807      	ldr	r0, [pc, #28]	; (8003d08 <GainSignalMenuInputHandler+0x24>)
 8003cea:	f00a fda9 	bl	800e840 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f000 fe36 	bl	8004960 <SM_GetEncoderValue>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 ffea 	bl	8004cd0 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <GainSignalMenuInputHandler+0x28>)
 8003cfe:	2203      	movs	r2, #3
 8003d00:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003d02:	2305      	movs	r3, #5
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	08011100 	.word	0x08011100
 8003d0c:	20001f13 	.word	0x20001f13

08003d10 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 8003d14:	4806      	ldr	r0, [pc, #24]	; (8003d30 <GainSignalMenuExitHandler+0x20>)
 8003d16:	f00a fd93 	bl	800e840 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <GainSignalMenuExitHandler+0x24>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003d20:	f7fd fa02 	bl	8001128 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <GainSignalMenuExitHandler+0x28>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003d2a:	2304      	movs	r3, #4
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	0801112c 	.word	0x0801112c
 8003d34:	20001f16 	.word	0x20001f16
 8003d38:	20001f13 	.word	0x20001f13

08003d3c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8003d42:	4813      	ldr	r0, [pc, #76]	; (8003d90 <GainSyncMenuEntryHandler+0x54>)
 8003d44:	f00a fd7c 	bl	800e840 <puts>
#endif

	DM_RefreshScreen();
 8003d48:	f7fd f9ee 	bl	8001128 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <GainSyncMenuEntryHandler+0x58>)
 8003d4e:	2203      	movs	r2, #3
 8003d50:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8003d52:	2001      	movs	r0, #1
 8003d54:	f000 fdee 	bl	8004934 <SM_GetOutputChannel>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003d5e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8b1a      	ldrh	r2, [r3, #24]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <GainSyncMenuEntryHandler+0x5c>)
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <GainSyncMenuEntryHandler+0x5c>)
 8003d70:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d76:	e002      	b.n	8003d7e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003d78:	4808      	ldr	r0, [pc, #32]	; (8003d9c <GainSyncMenuEntryHandler+0x60>)
 8003d7a:	f7fd fa93 	bl	80012a4 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <GainSyncMenuEntryHandler+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003d84:	2306      	movs	r3, #6
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08011158 	.word	0x08011158
 8003d94:	20001f16 	.word	0x20001f16
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	080110c8 	.word	0x080110c8
 8003da0:	20001f13 	.word	0x20001f13

08003da4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8003da8:	4807      	ldr	r0, [pc, #28]	; (8003dc8 <GainSyncMenuInputHandler+0x24>)
 8003daa:	f00a fd49 	bl	800e840 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003dae:	2001      	movs	r0, #1
 8003db0:	f000 fdd6 	bl	8004960 <SM_GetEncoderValue>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fc34 	bl	8005624 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <GainSyncMenuInputHandler+0x28>)
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003dc2:	2306      	movs	r3, #6
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	08011180 	.word	0x08011180
 8003dcc:	20001f13 	.word	0x20001f13

08003dd0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 8003dd4:	4806      	ldr	r0, [pc, #24]	; (8003df0 <GainSyncMenuExitHandler+0x20>)
 8003dd6:	f00a fd33 	bl	800e840 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <GainSyncMenuExitHandler+0x24>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003de0:	f7fd f9a2 	bl	8001128 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <GainSyncMenuExitHandler+0x28>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003dea:	2304      	movs	r3, #4
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	080111a8 	.word	0x080111a8
 8003df4:	20001f16 	.word	0x20001f16
 8003df8:	20001f13 	.word	0x20001f13

08003dfc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <BO_GetBiasPolarity+0x14>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000008 	.word	0x20000008

08003e14 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <BO_GetDcBiasEncoderValue+0x14>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	2000000a 	.word	0x2000000a

08003e2c <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8003e36:	2000      	movs	r0, #0
 8003e38:	f000 fd92 	bl	8004960 <SM_GetEncoderValue>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <BO_ModifyOutput+0x84>)
 8003e42:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e4a:	d214      	bcs.n	8003e76 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <BO_ModifyOutput+0x88>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003e60:	2200      	movs	r2, #0
 8003e62:	2110      	movs	r1, #16
 8003e64:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <BO_ModifyOutput+0x8c>)
 8003e66:	f005 fcff 	bl	8009868 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2108      	movs	r1, #8
 8003e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e72:	f006 fbd9 	bl	800a628 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003e7c:	d314      	bcc.n	8003ea8 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <BO_ModifyOutput+0x88>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003e92:	2200      	movs	r2, #0
 8003e94:	2110      	movs	r1, #16
 8003e96:	4808      	ldr	r0, [pc, #32]	; (8003eb8 <BO_ModifyOutput+0x8c>)
 8003e98:	f005 fce6 	bl	8009868 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea4:	f006 fbc0 	bl	800a628 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000000a 	.word	0x2000000a
 8003eb4:	20000008 	.word	0x20000008
 8003eb8:	200025f8 	.word	0x200025f8

08003ebc <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <BO_GetOutputBias+0x14>)
 8003ec4:	f005 fd16 	bl	80098f4 <HAL_DAC_GetValue>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200025f8 	.word	0x200025f8

08003ed4 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	e06b      	b.n	8003fb8 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003ee0:	493a      	ldr	r1, [pc, #232]	; (8003fcc <DT_InitRegister+0xf8>)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3308      	adds	r3, #8
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d129      	bne.n	8003f4a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8003ef6:	4935      	ldr	r1, [pc, #212]	; (8003fcc <DT_InitRegister+0xf8>)
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3304      	adds	r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a31      	ldr	r2, [pc, #196]	; (8003fd0 <DT_InitRegister+0xfc>)
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f16:	492d      	ldr	r1, [pc, #180]	; (8003fcc <DT_InitRegister+0xf8>)
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3310      	adds	r3, #16
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f32:	ee17 0a90 	vmov	r0, s15
 8003f36:	4925      	ldr	r1, [pc, #148]	; (8003fcc <DT_InitRegister+0xf8>)
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	330c      	adds	r3, #12
 8003f46:	6018      	str	r0, [r3, #0]
 8003f48:	e033      	b.n	8003fb2 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8003f4a:	4920      	ldr	r1, [pc, #128]	; (8003fcc <DT_InitRegister+0xf8>)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <DT_InitRegister+0xfc>)
 8003f5e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f62:	481a      	ldr	r0, [pc, #104]	; (8003fcc <DT_InitRegister+0xf8>)
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4403      	add	r3, r0
 8003f70:	3308      	adds	r3, #8
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f80:	4912      	ldr	r1, [pc, #72]	; (8003fcc <DT_InitRegister+0xf8>)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3310      	adds	r3, #16
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9c:	ee17 0a90 	vmov	r0, s15
 8003fa0:	490a      	ldr	r1, [pc, #40]	; (8003fcc <DT_InitRegister+0xf8>)
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b0d      	cmp	r3, #13
 8003fbc:	dd90      	ble.n	8003ee0 <DT_InitRegister+0xc>
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	00155cc0 	.word	0x00155cc0

08003fd4 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e016      	b.n	8004010 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8003fe2:	4910      	ldr	r1, [pc, #64]	; (8004024 <DT_GetRegisterByEnum+0x50>)
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d107      	bne.n	800400a <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <DT_GetRegisterByEnum+0x50>)
 8004006:	4413      	add	r3, r2
 8004008:	e006      	b.n	8004018 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b0d      	cmp	r3, #13
 8004014:	dde5      	ble.n	8003fe2 <DT_GetRegisterByEnum+0xe>

	return 0;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	2000000c 	.word	0x2000000c

08004028 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 800402c:	2000      	movs	r0, #0
 800402e:	f000 fc97 	bl	8004960 <SM_GetEncoderValue>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b02      	ldr	r3, [pc, #8]	; (8004040 <FreqO_AdjustFreq+0x18>)
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40013400 	.word	0x40013400

08004044 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b38      	cmp	r3, #56	; 0x38
 8004052:	f200 80b4 	bhi.w	80041be <FreqO_ModifyOutput+0x17a>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <FreqO_ModifyOutput+0x18>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004141 	.word	0x08004141
 8004060:	08004141 	.word	0x08004141
 8004064:	08004141 	.word	0x08004141
 8004068:	08004141 	.word	0x08004141
 800406c:	08004149 	.word	0x08004149
 8004070:	08004149 	.word	0x08004149
 8004074:	08004149 	.word	0x08004149
 8004078:	08004149 	.word	0x08004149
 800407c:	08004151 	.word	0x08004151
 8004080:	08004151 	.word	0x08004151
 8004084:	08004151 	.word	0x08004151
 8004088:	08004151 	.word	0x08004151
 800408c:	08004159 	.word	0x08004159
 8004090:	08004159 	.word	0x08004159
 8004094:	08004159 	.word	0x08004159
 8004098:	08004159 	.word	0x08004159
 800409c:	08004161 	.word	0x08004161
 80040a0:	08004161 	.word	0x08004161
 80040a4:	08004161 	.word	0x08004161
 80040a8:	08004161 	.word	0x08004161
 80040ac:	08004169 	.word	0x08004169
 80040b0:	08004169 	.word	0x08004169
 80040b4:	08004169 	.word	0x08004169
 80040b8:	08004169 	.word	0x08004169
 80040bc:	08004173 	.word	0x08004173
 80040c0:	08004173 	.word	0x08004173
 80040c4:	08004173 	.word	0x08004173
 80040c8:	08004173 	.word	0x08004173
 80040cc:	0800417d 	.word	0x0800417d
 80040d0:	0800417d 	.word	0x0800417d
 80040d4:	0800417d 	.word	0x0800417d
 80040d8:	080041bf 	.word	0x080041bf
 80040dc:	0800417d 	.word	0x0800417d
 80040e0:	08004187 	.word	0x08004187
 80040e4:	08004187 	.word	0x08004187
 80040e8:	08004187 	.word	0x08004187
 80040ec:	08004187 	.word	0x08004187
 80040f0:	08004191 	.word	0x08004191
 80040f4:	08004191 	.word	0x08004191
 80040f8:	08004191 	.word	0x08004191
 80040fc:	08004191 	.word	0x08004191
 8004100:	0800419b 	.word	0x0800419b
 8004104:	0800419b 	.word	0x0800419b
 8004108:	0800419b 	.word	0x0800419b
 800410c:	0800419b 	.word	0x0800419b
 8004110:	080041a5 	.word	0x080041a5
 8004114:	080041a5 	.word	0x080041a5
 8004118:	080041a5 	.word	0x080041a5
 800411c:	080041a5 	.word	0x080041a5
 8004120:	080041af 	.word	0x080041af
 8004124:	080041af 	.word	0x080041af
 8004128:	080041af 	.word	0x080041af
 800412c:	080041af 	.word	0x080041af
 8004130:	080041b7 	.word	0x080041b7
 8004134:	080041b7 	.word	0x080041b7
 8004138:	080041b7 	.word	0x080041b7
 800413c:	080041b7 	.word	0x080041b7
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004140:	2001      	movs	r0, #1
 8004142:	f000 f845 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004146:	e03a      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004148:	200a      	movs	r0, #10
 800414a:	f000 f841 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 800414e:	e036      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004150:	2032      	movs	r0, #50	; 0x32
 8004152:	f000 f83d 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004156:	e032      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004158:	2064      	movs	r0, #100	; 0x64
 800415a:	f000 f839 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 800415e:	e02e      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004160:	20fa      	movs	r0, #250	; 0xfa
 8004162:	f000 f835 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004166:	e02a      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416c:	f000 f830 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004170:	e025      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004172:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004176:	f000 f82b 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 800417a:	e020      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 800417c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004180:	f000 f826 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004184:	e01b      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004186:	f241 3088 	movw	r0, #5000	; 0x1388
 800418a:	f000 f821 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 800418e:	e016      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004190:	f242 7010 	movw	r0, #10000	; 0x2710
 8004194:	f000 f81c 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 8004198:	e011      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800419a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800419e:	f000 f817 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 80041a2:	e00c      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 80041a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041a8:	f000 f812 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 80041ac:	e007      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 80041ae:	4806      	ldr	r0, [pc, #24]	; (80041c8 <FreqO_ModifyOutput+0x184>)
 80041b0:	f000 f80e 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 80041b4:	e003      	b.n	80041be <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80041b6:	4805      	ldr	r0, [pc, #20]	; (80041cc <FreqO_ModifyOutput+0x188>)
 80041b8:	f000 f80a 	bl	80041d0 <FreqO_ApplyPreset>
			break;
 80041bc:	bf00      	nop
	}

}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	000124f8 	.word	0x000124f8
 80041cc:	000186a0 	.word	0x000186a0

080041d0 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fefb 	bl	8003fd4 <DT_GetRegisterByEnum>
 80041de:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d015      	beq.n	8004212 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <FreqO_ApplyPreset+0x4c>)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <FreqO_ApplyPreset+0x4c>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f822 	bl	8004240 <FreqO_FindFPresetObject>
 80041fc:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004204:	4a06      	ldr	r2, [pc, #24]	; (8004220 <FreqO_ApplyPreset+0x50>)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 800420a:	e002      	b.n	8004212 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 800420c:	4805      	ldr	r0, [pc, #20]	; (8004224 <FreqO_ApplyPreset+0x54>)
 800420e:	f7fd f849 	bl	80012a4 <DM_SetErrorDebugMsg>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40013400 	.word	0x40013400
 8004220:	20000198 	.word	0x20000198
 8004224:	080111d0 	.word	0x080111d0

08004228 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
	return freq_profile;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <FreqO_GetFPresetObject+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000198 	.word	0x20000198

08004240 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e00e      	b.n	800426c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <FreqO_FindFPresetObject+0x44>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d104      	bne.n	8004266 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <FreqO_FindFPresetObject+0x44>)
 8004262:	4413      	add	r3, r2
 8004264:	e009      	b.n	800427a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b0d      	cmp	r3, #13
 8004270:	dded      	ble.n	800424e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <FreqO_FindFPresetObject+0x48>)
 8004274:	f7fd f816 	bl	80012a4 <DM_SetErrorDebugMsg>
	return 0;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000128 	.word	0x20000128
 8004288:	080111f8 	.word	0x080111f8

0800428c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000124 	.word	0x20000124

080042a4 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <FreqO_GetOutputFreq+0x14>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40013400 	.word	0x40013400

080042bc <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b17      	cmp	r3, #23
 80042da:	d84b      	bhi.n	8004374 <FuncO_ModifySignalOutput+0xa8>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <FuncO_ModifySignalOutput+0x18>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004345 	.word	0x08004345
 80042e8:	08004345 	.word	0x08004345
 80042ec:	08004345 	.word	0x08004345
 80042f0:	0800434d 	.word	0x0800434d
 80042f4:	0800434d 	.word	0x0800434d
 80042f8:	0800434d 	.word	0x0800434d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	08004355 	.word	0x08004355
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	0800435d 	.word	0x0800435d
 8004314:	0800435d 	.word	0x0800435d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800435d 	.word	0x0800435d
 8004320:	08004365 	.word	0x08004365
 8004324:	08004365 	.word	0x08004365
 8004328:	08004365 	.word	0x08004365
 800432c:	08004365 	.word	0x08004365
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	0800436d 	.word	0x0800436d
 800433c:	0800436d 	.word	0x0800436d
 8004340:	0800436d 	.word	0x0800436d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004344:	2000      	movs	r0, #0
 8004346:	f000 f871 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 800434a:	e013      	b.n	8004374 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 800434c:	2001      	movs	r0, #1
 800434e:	f000 f86d 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 8004352:	e00f      	b.n	8004374 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004354:	2002      	movs	r0, #2
 8004356:	f000 f869 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 800435a:	e00b      	b.n	8004374 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f865 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 8004362:	e007      	b.n	8004374 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004364:	2004      	movs	r0, #4
 8004366:	f000 f861 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 800436a:	e003      	b.n	8004374 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 800436c:	2005      	movs	r0, #5
 800436e:	f000 f85d 	bl	800442c <FuncO_ApplyPresetToSignal>
			break;
 8004372:	bf00      	nop

	}
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b17      	cmp	r3, #23
 800438a:	d84b      	bhi.n	8004424 <FuncO_ModifySyncOutput+0xa8>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <FuncO_ModifySyncOutput+0x18>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043f5 	.word	0x080043f5
 8004398:	080043f5 	.word	0x080043f5
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	080043fd 	.word	0x080043fd
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	080043fd 	.word	0x080043fd
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004405 	.word	0x08004405
 80043b8:	08004405 	.word	0x08004405
 80043bc:	08004405 	.word	0x08004405
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004415 	.word	0x08004415
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800441d 	.word	0x0800441d
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	0800441d 	.word	0x0800441d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f000 f873 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 80043fa:	e013      	b.n	8004424 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f000 f86f 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 8004402:	e00f      	b.n	8004424 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004404:	2002      	movs	r0, #2
 8004406:	f000 f86b 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 800440a:	e00b      	b.n	8004424 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 800440c:	2003      	movs	r0, #3
 800440e:	f000 f867 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 8004412:	e007      	b.n	8004424 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004414:	2004      	movs	r0, #4
 8004416:	f000 f863 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 800441a:	e003      	b.n	8004424 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 800441c:	2005      	movs	r0, #5
 800441e:	f000 f85f 	bl	80044e0 <FuncO_ApplyPresetToSync>
			break;
 8004422:	bf00      	nop

	}
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b087      	sub	sp, #28
 8004430:	af02      	add	r7, sp, #8
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004436:	79fc      	ldrb	r4, [r7, #7]
 8004438:	2000      	movs	r0, #0
 800443a:	f000 fa7b 	bl	8004934 <SM_GetOutputChannel>
 800443e:	4601      	mov	r1, r0
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <FuncO_ApplyPresetToSignal+0xa4>)
 8004442:	00e3      	lsls	r3, r4, #3
 8004444:	4413      	add	r3, r2
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800444a:	2000      	movs	r0, #0
 800444c:	f000 fa72 	bl	8004934 <SM_GetOutputChannel>
 8004450:	4603      	mov	r3, r0
 8004452:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fadf 	bl	8004a20 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004462:	79fc      	ldrb	r4, [r7, #7]
 8004464:	2000      	movs	r0, #0
 8004466:	f000 fa65 	bl	8004934 <SM_GetOutputChannel>
 800446a:	4601      	mov	r1, r0
 800446c:	00e3      	lsls	r3, r4, #3
 800446e:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <FuncO_ApplyPresetToSignal+0xa4>)
 8004470:	4413      	add	r3, r2
 8004472:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	HAL_TIM_Base_Stop(&htim8);
 8004476:	4817      	ldr	r0, [pc, #92]	; (80044d4 <FuncO_ApplyPresetToSignal+0xa8>)
 8004478:	f007 f9fe 	bl	800b878 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800447c:	2100      	movs	r1, #0
 800447e:	4816      	ldr	r0, [pc, #88]	; (80044d8 <FuncO_ApplyPresetToSignal+0xac>)
 8004480:	f005 f99c 	bl	80097bc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004484:	2000      	movs	r0, #0
 8004486:	f000 fa55 	bl	8004934 <SM_GetOutputChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	f103 0208 	add.w	r2, r3, #8
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2378      	movs	r3, #120	; 0x78
 8004496:	2100      	movs	r1, #0
 8004498:	480f      	ldr	r0, [pc, #60]	; (80044d8 <FuncO_ApplyPresetToSignal+0xac>)
 800449a:	f005 f8cd 	bl	8009638 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800449e:	2100      	movs	r1, #0
 80044a0:	480e      	ldr	r0, [pc, #56]	; (80044dc <FuncO_ApplyPresetToSignal+0xb0>)
 80044a2:	f005 f98b 	bl	80097bc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 fa44 	bl	8004934 <SM_GetOutputChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f103 0208 	add.w	r2, r3, #8
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2378      	movs	r3, #120	; 0x78
 80044b8:	2100      	movs	r1, #0
 80044ba:	4808      	ldr	r0, [pc, #32]	; (80044dc <FuncO_ApplyPresetToSignal+0xb0>)
 80044bc:	f005 f8bc 	bl	8009638 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 80044c0:	4804      	ldr	r0, [pc, #16]	; (80044d4 <FuncO_ApplyPresetToSignal+0xa8>)
 80044c2:	f007 f9ab 	bl	800b81c <HAL_TIM_Base_Start>
}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd90      	pop	{r4, r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200001a0 	.word	0x200001a0
 80044d4:	20002730 	.word	0x20002730
 80044d8:	200025f8 	.word	0x200025f8
 80044dc:	200025e4 	.word	0x200025e4

080044e0 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80044ea:	79fc      	ldrb	r4, [r7, #7]
 80044ec:	2001      	movs	r0, #1
 80044ee:	f000 fa21 	bl	8004934 <SM_GetOutputChannel>
 80044f2:	4601      	mov	r1, r0
 80044f4:	4a23      	ldr	r2, [pc, #140]	; (8004584 <FuncO_ApplyPresetToSync+0xa4>)
 80044f6:	00e3      	lsls	r3, r4, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 80044fe:	2001      	movs	r0, #1
 8004500:	f000 fa18 	bl	8004934 <SM_GetOutputChannel>
 8004504:	4603      	mov	r3, r0
 8004506:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fab3 	bl	8004a7c <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004516:	79fc      	ldrb	r4, [r7, #7]
 8004518:	2001      	movs	r0, #1
 800451a:	f000 fa0b 	bl	8004934 <SM_GetOutputChannel>
 800451e:	4601      	mov	r1, r0
 8004520:	00e3      	lsls	r3, r4, #3
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <FuncO_ApplyPresetToSync+0xa4>)
 8004524:	4413      	add	r3, r2
 8004526:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	HAL_TIM_Base_Stop(&htim8);
 800452a:	4817      	ldr	r0, [pc, #92]	; (8004588 <FuncO_ApplyPresetToSync+0xa8>)
 800452c:	f007 f9a4 	bl	800b878 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004530:	2100      	movs	r1, #0
 8004532:	4816      	ldr	r0, [pc, #88]	; (800458c <FuncO_ApplyPresetToSync+0xac>)
 8004534:	f005 f942 	bl	80097bc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004538:	2001      	movs	r0, #1
 800453a:	f000 f9fb 	bl	8004934 <SM_GetOutputChannel>
 800453e:	4603      	mov	r3, r0
 8004540:	f103 0208 	add.w	r2, r3, #8
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2378      	movs	r3, #120	; 0x78
 800454a:	2100      	movs	r1, #0
 800454c:	480f      	ldr	r0, [pc, #60]	; (800458c <FuncO_ApplyPresetToSync+0xac>)
 800454e:	f005 f873 	bl	8009638 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004552:	2100      	movs	r1, #0
 8004554:	480e      	ldr	r0, [pc, #56]	; (8004590 <FuncO_ApplyPresetToSync+0xb0>)
 8004556:	f005 f931 	bl	80097bc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800455a:	2000      	movs	r0, #0
 800455c:	f000 f9ea 	bl	8004934 <SM_GetOutputChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	f103 0208 	add.w	r2, r3, #8
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2378      	movs	r3, #120	; 0x78
 800456c:	2100      	movs	r1, #0
 800456e:	4808      	ldr	r0, [pc, #32]	; (8004590 <FuncO_ApplyPresetToSync+0xb0>)
 8004570:	f005 f862 	bl	8009638 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004574:	4804      	ldr	r0, [pc, #16]	; (8004588 <FuncO_ApplyPresetToSync+0xa8>)
 8004576:	f007 f951 	bl	800b81c <HAL_TIM_Base_Start>
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop
 8004584:	200001a0 	.word	0x200001a0
 8004588:	20002730 	.word	0x20002730
 800458c:	200025e4 	.word	0x200025e4
 8004590:	200025f8 	.word	0x200025f8

08004594 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <FuncO_GetFuncPresetEncoderRange+0x14>)
 800459a:	781b      	ldrb	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	2000019c 	.word	0x2000019c

080045ac <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80045b6:	79fc      	ldrb	r4, [r7, #7]
 80045b8:	2000      	movs	r0, #0
 80045ba:	f000 f9bb 	bl	8004934 <SM_GetOutputChannel>
 80045be:	4601      	mov	r1, r0
 80045c0:	4623      	mov	r3, r4
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4423      	add	r3, r4
 80045c6:	4a4f      	ldr	r2, [pc, #316]	; (8004704 <GO_ApplyPresetToSignal+0x158>)
 80045c8:	4413      	add	r3, r2
 80045ca:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	f200 8093 	bhi.w	80046fc <GO_ApplyPresetToSignal+0x150>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <GO_ApplyPresetToSignal+0x30>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	080045fd 	.word	0x080045fd
 80045e0:	0800461d 	.word	0x0800461d
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800467d 	.word	0x0800467d
 80045f0:	0800469d 	.word	0x0800469d
 80045f4:	080046bd 	.word	0x080046bd
 80045f8:	080046dd 	.word	0x080046dd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2101      	movs	r1, #1
 8004600:	4841      	ldr	r0, [pc, #260]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 8004602:	f006 f811 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004606:	2200      	movs	r2, #0
 8004608:	2120      	movs	r1, #32
 800460a:	4840      	ldr	r0, [pc, #256]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 800460c:	f006 f80c 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004610:	2200      	movs	r2, #0
 8004612:	2110      	movs	r1, #16
 8004614:	483d      	ldr	r0, [pc, #244]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 8004616:	f006 f807 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800461a:	e06f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	2101      	movs	r1, #1
 8004620:	4839      	ldr	r0, [pc, #228]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 8004622:	f006 f801 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004626:	2200      	movs	r2, #0
 8004628:	2120      	movs	r1, #32
 800462a:	4838      	ldr	r0, [pc, #224]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 800462c:	f005 fffc 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004630:	2200      	movs	r2, #0
 8004632:	2110      	movs	r1, #16
 8004634:	4835      	ldr	r0, [pc, #212]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 8004636:	f005 fff7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800463a:	e05f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800463c:	2200      	movs	r2, #0
 800463e:	2101      	movs	r1, #1
 8004640:	4831      	ldr	r0, [pc, #196]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 8004642:	f005 fff1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004646:	2201      	movs	r2, #1
 8004648:	2120      	movs	r1, #32
 800464a:	4830      	ldr	r0, [pc, #192]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 800464c:	f005 ffec 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004650:	2200      	movs	r2, #0
 8004652:	2110      	movs	r1, #16
 8004654:	482d      	ldr	r0, [pc, #180]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 8004656:	f005 ffe7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800465a:	e04f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800465c:	2201      	movs	r2, #1
 800465e:	2101      	movs	r1, #1
 8004660:	4829      	ldr	r0, [pc, #164]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 8004662:	f005 ffe1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004666:	2201      	movs	r2, #1
 8004668:	2120      	movs	r1, #32
 800466a:	4828      	ldr	r0, [pc, #160]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 800466c:	f005 ffdc 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004670:	2200      	movs	r2, #0
 8004672:	2110      	movs	r1, #16
 8004674:	4825      	ldr	r0, [pc, #148]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 8004676:	f005 ffd7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800467a:	e03f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800467c:	2200      	movs	r2, #0
 800467e:	2101      	movs	r1, #1
 8004680:	4821      	ldr	r0, [pc, #132]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 8004682:	f005 ffd1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004686:	2200      	movs	r2, #0
 8004688:	2120      	movs	r1, #32
 800468a:	4820      	ldr	r0, [pc, #128]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 800468c:	f005 ffcc 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004690:	2201      	movs	r2, #1
 8004692:	2110      	movs	r1, #16
 8004694:	481d      	ldr	r0, [pc, #116]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 8004696:	f005 ffc7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800469a:	e02f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800469c:	2201      	movs	r2, #1
 800469e:	2101      	movs	r1, #1
 80046a0:	4819      	ldr	r0, [pc, #100]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 80046a2:	f005 ffc1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2120      	movs	r1, #32
 80046aa:	4818      	ldr	r0, [pc, #96]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046ac:	f005 ffbc 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80046b0:	2201      	movs	r2, #1
 80046b2:	2110      	movs	r1, #16
 80046b4:	4815      	ldr	r0, [pc, #84]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046b6:	f005 ffb7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80046ba:	e01f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80046bc:	2200      	movs	r2, #0
 80046be:	2101      	movs	r1, #1
 80046c0:	4811      	ldr	r0, [pc, #68]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 80046c2:	f005 ffb1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80046c6:	2201      	movs	r2, #1
 80046c8:	2120      	movs	r1, #32
 80046ca:	4810      	ldr	r0, [pc, #64]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046cc:	f005 ffac 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80046d0:	2201      	movs	r2, #1
 80046d2:	2110      	movs	r1, #16
 80046d4:	480d      	ldr	r0, [pc, #52]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046d6:	f005 ffa7 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80046da:	e00f      	b.n	80046fc <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	2101      	movs	r1, #1
 80046e0:	4809      	ldr	r0, [pc, #36]	; (8004708 <GO_ApplyPresetToSignal+0x15c>)
 80046e2:	f005 ffa1 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80046e6:	2201      	movs	r2, #1
 80046e8:	2120      	movs	r1, #32
 80046ea:	4808      	ldr	r0, [pc, #32]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046ec:	f005 ff9c 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80046f0:	2201      	movs	r2, #1
 80046f2:	2110      	movs	r1, #16
 80046f4:	4805      	ldr	r0, [pc, #20]	; (800470c <GO_ApplyPresetToSignal+0x160>)
 80046f6:	f005 ff97 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80046fa:	bf00      	nop
	}
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	200001d0 	.word	0x200001d0
 8004708:	48000400 	.word	0x48000400
 800470c:	48000800 	.word	0x48000800

08004710 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800471a:	79fc      	ldrb	r4, [r7, #7]
 800471c:	2001      	movs	r0, #1
 800471e:	f000 f909 	bl	8004934 <SM_GetOutputChannel>
 8004722:	4601      	mov	r1, r0
 8004724:	4623      	mov	r3, r4
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4423      	add	r3, r4
 800472a:	4a4f      	ldr	r2, [pc, #316]	; (8004868 <GO_ApplyPresetToSync+0x158>)
 800472c:	4413      	add	r3, r2
 800472e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b07      	cmp	r3, #7
 8004736:	f200 8093 	bhi.w	8004860 <GO_ApplyPresetToSync+0x150>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <GO_ApplyPresetToSync+0x30>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004761 	.word	0x08004761
 8004744:	08004781 	.word	0x08004781
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047e1 	.word	0x080047e1
 8004754:	08004801 	.word	0x08004801
 8004758:	08004821 	.word	0x08004821
 800475c:	08004841 	.word	0x08004841
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004760:	2200      	movs	r2, #0
 8004762:	2101      	movs	r1, #1
 8004764:	4841      	ldr	r0, [pc, #260]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 8004766:	f005 ff5f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800476a:	2200      	movs	r2, #0
 800476c:	2120      	movs	r1, #32
 800476e:	4840      	ldr	r0, [pc, #256]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 8004770:	f005 ff5a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004774:	2200      	movs	r2, #0
 8004776:	2110      	movs	r1, #16
 8004778:	483d      	ldr	r0, [pc, #244]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 800477a:	f005 ff55 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800477e:	e06f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004780:	2201      	movs	r2, #1
 8004782:	2101      	movs	r1, #1
 8004784:	4839      	ldr	r0, [pc, #228]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 8004786:	f005 ff4f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800478a:	2200      	movs	r2, #0
 800478c:	2120      	movs	r1, #32
 800478e:	4838      	ldr	r0, [pc, #224]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 8004790:	f005 ff4a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004794:	2200      	movs	r2, #0
 8004796:	2110      	movs	r1, #16
 8004798:	4835      	ldr	r0, [pc, #212]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 800479a:	f005 ff45 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800479e:	e05f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2101      	movs	r1, #1
 80047a4:	4831      	ldr	r0, [pc, #196]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 80047a6:	f005 ff3f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80047aa:	2201      	movs	r2, #1
 80047ac:	2120      	movs	r1, #32
 80047ae:	4830      	ldr	r0, [pc, #192]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047b0:	f005 ff3a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	2110      	movs	r1, #16
 80047b8:	482d      	ldr	r0, [pc, #180]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047ba:	f005 ff35 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80047be:	e04f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80047c0:	2201      	movs	r2, #1
 80047c2:	2101      	movs	r1, #1
 80047c4:	4829      	ldr	r0, [pc, #164]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 80047c6:	f005 ff2f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80047ca:	2201      	movs	r2, #1
 80047cc:	2120      	movs	r1, #32
 80047ce:	4828      	ldr	r0, [pc, #160]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047d0:	f005 ff2a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80047d4:	2200      	movs	r2, #0
 80047d6:	2110      	movs	r1, #16
 80047d8:	4825      	ldr	r0, [pc, #148]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047da:	f005 ff25 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80047de:	e03f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80047e0:	2200      	movs	r2, #0
 80047e2:	2101      	movs	r1, #1
 80047e4:	4821      	ldr	r0, [pc, #132]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 80047e6:	f005 ff1f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2120      	movs	r1, #32
 80047ee:	4820      	ldr	r0, [pc, #128]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047f0:	f005 ff1a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80047f4:	2201      	movs	r2, #1
 80047f6:	2110      	movs	r1, #16
 80047f8:	481d      	ldr	r0, [pc, #116]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 80047fa:	f005 ff15 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 80047fe:	e02f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004800:	2201      	movs	r2, #1
 8004802:	2101      	movs	r1, #1
 8004804:	4819      	ldr	r0, [pc, #100]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 8004806:	f005 ff0f 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800480a:	2200      	movs	r2, #0
 800480c:	2120      	movs	r1, #32
 800480e:	4818      	ldr	r0, [pc, #96]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 8004810:	f005 ff0a 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004814:	2201      	movs	r2, #1
 8004816:	2110      	movs	r1, #16
 8004818:	4815      	ldr	r0, [pc, #84]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 800481a:	f005 ff05 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800481e:	e01f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004820:	2200      	movs	r2, #0
 8004822:	2101      	movs	r1, #1
 8004824:	4811      	ldr	r0, [pc, #68]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 8004826:	f005 feff 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800482a:	2201      	movs	r2, #1
 800482c:	2120      	movs	r1, #32
 800482e:	4810      	ldr	r0, [pc, #64]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 8004830:	f005 fefa 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004834:	2201      	movs	r2, #1
 8004836:	2110      	movs	r1, #16
 8004838:	480d      	ldr	r0, [pc, #52]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 800483a:	f005 fef5 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800483e:	e00f      	b.n	8004860 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004840:	2201      	movs	r2, #1
 8004842:	2101      	movs	r1, #1
 8004844:	4809      	ldr	r0, [pc, #36]	; (800486c <GO_ApplyPresetToSync+0x15c>)
 8004846:	f005 feef 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800484a:	2201      	movs	r2, #1
 800484c:	2120      	movs	r1, #32
 800484e:	4808      	ldr	r0, [pc, #32]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 8004850:	f005 feea 	bl	800a628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004854:	2201      	movs	r2, #1
 8004856:	2110      	movs	r1, #16
 8004858:	4805      	ldr	r0, [pc, #20]	; (8004870 <GO_ApplyPresetToSync+0x160>)
 800485a:	f005 fee5 	bl	800a628 <HAL_GPIO_WritePin>
			break;
 800485e:	bf00      	nop
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}
 8004868:	200001d0 	.word	0x200001d0
 800486c:	48000400 	.word	0x48000400
 8004870:	48000800 	.word	0x48000800

08004874 <SM_Init>:
sOutputChannel_t SignalChannel;
sOutputChannel_t SyncChannel;


void SM_Init()
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800487a:	4b28      	ldr	r3, [pc, #160]	; (800491c <SM_Init+0xa8>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <SM_Init+0xac>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <SM_Init+0xa8>)
 8004886:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <SM_Init+0xa8>)
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <SM_Init+0xac>)
 800488c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004890:	2300      	movs	r3, #0
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	e00b      	b.n	80048ae <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004896:	4a23      	ldr	r2, [pc, #140]	; (8004924 <SM_Init+0xb0>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800489e:	491f      	ldr	r1, [pc, #124]	; (800491c <SM_Init+0xa8>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3302      	adds	r3, #2
 80048a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3301      	adds	r3, #1
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b77      	cmp	r3, #119	; 0x77
 80048b2:	ddf0      	ble.n	8004896 <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <SM_Init+0xa8>)
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <SM_Init+0xb4>)
 80048b8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <SM_Init+0xa8>)
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <SM_Init+0xb8>)
 80048c0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <SM_Init+0xbc>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <SM_Init+0xac>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <SM_Init+0xbc>)
 80048d0:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80048d2:	4b17      	ldr	r3, [pc, #92]	; (8004930 <SM_Init+0xbc>)
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <SM_Init+0xac>)
 80048d6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	e00b      	b.n	80048f8 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80048e0:	4a10      	ldr	r2, [pc, #64]	; (8004924 <SM_Init+0xb0>)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048e8:	4911      	ldr	r1, [pc, #68]	; (8004930 <SM_Init+0xbc>)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3302      	adds	r3, #2
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b77      	cmp	r3, #119	; 0x77
 80048fc:	ddf0      	ble.n	80048e0 <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <SM_Init+0xbc>)
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <SM_Init+0xb4>)
 8004902:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <SM_Init+0xbc>)
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <SM_Init+0xb8>)
 800490a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20002120 	.word	0x20002120
 8004920:	200001a0 	.word	0x200001a0
 8004924:	20001578 	.word	0x20001578
 8004928:	20000ba4 	.word	0x20000ba4
 800492c:	200001d3 	.word	0x200001d3
 8004930:	20001f2c 	.word	0x20001f2c

08004934 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <SM_GetOutputChannel+0x24>)
 8004946:	e000      	b.n	800494a <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <SM_GetOutputChannel+0x28>)
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20002120 	.word	0x20002120
 800495c:	20001f2c 	.word	0x20001f2c

08004960 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <SM_GetEncoderValue+0x34>)
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	b29a      	uxth	r2, r3
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <SM_GetEncoderValue+0x34>)
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	b29b      	uxth	r3, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	b29b      	uxth	r3, r3
 8004980:	e002      	b.n	8004988 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <SM_GetEncoderValue+0x34>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b29b      	uxth	r3, r3
	}
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00

08004998 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <SM_GetOutputInHertz+0x7c>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <SM_GetOutputInHertz+0x16>
 80049a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e007      	b.n	80049be <SM_GetOutputInHertz+0x26>
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <SM_GetOutputInHertz+0x7c>)
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <SM_GetOutputInHertz+0x7c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <SM_GetOutputInHertz+0x36>
 80049c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e007      	b.n	80049de <SM_GetOutputInHertz+0x46>
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <SM_GetOutputInHertz+0x7c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 80049de:	ed97 7a02 	vldr	s14, [r7, #8]
 80049e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80049e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049ea:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004a18 <SM_GetOutputInHertz+0x80>
 80049ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f2:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 80049f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80049fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004a1c <SM_GetOutputInHertz+0x84>
 80049fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004a02:	eef0 7a66 	vmov.f32	s15, s13
}
 8004a06:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40013400 	.word	0x40013400
 8004a18:	4d2037a0 	.word	0x4d2037a0
 8004a1c:	42f00000 	.word	0x42f00000

08004a20 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8004a2a:	79fa      	ldrb	r2, [r7, #7]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <VPP_ApplyPresetToSignal+0x58>)
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7ff ff7a 	bl	8004934 <SM_GetOutputChannel>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	7a1b      	ldrb	r3, [r3, #8]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fdad 	bl	80045ac <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8b1b      	ldrh	r3, [r3, #24]
 8004a62:	4618      	mov	r0, r3
 8004a64:	eef0 0a47 	vmov.f32	s1, s14
 8004a68:	eeb0 0a67 	vmov.f32	s0, s15
 8004a6c:	f000 f834 	bl	8004ad8 <_ProcessSignalDataTable>


}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	200001e8 	.word	0x200001e8

08004a7c <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8004a86:	79fa      	ldrb	r2, [r7, #7]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <VPP_ApplyPresetToSync+0x58>)
 8004a92:	4413      	add	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8004a96:	2001      	movs	r0, #1
 8004a98:	f7ff ff4c 	bl	8004934 <SM_GetOutputChannel>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	7a1b      	ldrb	r3, [r3, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fe31 	bl	8004710 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	ed93 7a05 	vldr	s14, [r3, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8b1b      	ldrh	r3, [r3, #24]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	eef0 0a47 	vmov.f32	s1, s14
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	f000 f884 	bl	8004bd4 <_ProcessSyncDataTable>



}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	200001e8 	.word	0x200001e8

08004ad8 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ae2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e00f      	b.n	8004b10 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7ff ff1f 	bl	8004934 <SM_GetOutputChannel>
 8004af6:	4603      	mov	r3, r0
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4933      	ldr	r1, [pc, #204]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b77      	cmp	r3, #119	; 0x77
 8004b14:	ddec      	ble.n	8004af0 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004b16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b1a:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	089b      	lsrs	r3, r3, #2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b30:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e02e      	b.n	8004b98 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004b3a:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b56:	ee17 1a90 	vmov	r1, s15
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b72:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b76:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 1a90 	vmov	r1, s15
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3301      	adds	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b77      	cmp	r3, #119	; 0x77
 8004b9c:	ddcd      	ble.n	8004b3a <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e00e      	b.n	8004bc2 <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f7ff fec5 	bl	8004934 <SM_GetOutputChannel>
 8004baa:	4601      	mov	r1, r0
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <_ProcessSignalDataTable+0xf8>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b77      	cmp	r3, #119	; 0x77
 8004bc6:	dded      	ble.n	8004ba4 <_ProcessSignalDataTable+0xcc>
	}
}
 8004bc8:	bf00      	nop
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20002314 	.word	0x20002314

08004bd4 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	ed87 0a03 	vstr	s0, [r7, #12]
 8004bde:	edc7 0a02 	vstr	s1, [r7, #8]
 8004be2:	4603      	mov	r3, r0
 8004be4:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e00f      	b.n	8004c0c <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7ff fea1 	bl	8004934 <SM_GetOutputChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4933      	ldr	r1, [pc, #204]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b77      	cmp	r3, #119	; 0x77
 8004c10:	ddec      	ble.n	8004bec <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004c12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c16:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c2c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e02e      	b.n	8004c94 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004c36:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c52:	ee17 1a90 	vmov	r1, s15
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c72:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004c76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 1a90 	vmov	r1, s15
 8004c86:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3301      	adds	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b77      	cmp	r3, #119	; 0x77
 8004c98:	ddcd      	ble.n	8004c36 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	e00e      	b.n	8004cbe <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f7ff fe47 	bl	8004934 <SM_GetOutputChannel>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <_ProcessSyncDataTable+0xf8>)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b77      	cmp	r3, #119	; 0x77
 8004cc2:	dded      	ble.n	8004ca0 <_ProcessSyncDataTable+0xcc>
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20002314 	.word	0x20002314

08004cd0 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004ce0:	f200 849a 	bhi.w	8005618 <VPP_ModifySignalOutput+0x948>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <VPP_ModifySignalOutput+0x1c>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08005309 	.word	0x08005309
 8004cf0:	08005309 	.word	0x08005309
 8004cf4:	08005309 	.word	0x08005309
 8004cf8:	08005311 	.word	0x08005311
 8004cfc:	08005311 	.word	0x08005311
 8004d00:	08005311 	.word	0x08005311
 8004d04:	08005311 	.word	0x08005311
 8004d08:	08005319 	.word	0x08005319
 8004d0c:	08005319 	.word	0x08005319
 8004d10:	08005319 	.word	0x08005319
 8004d14:	08005319 	.word	0x08005319
 8004d18:	08005321 	.word	0x08005321
 8004d1c:	08005321 	.word	0x08005321
 8004d20:	08005321 	.word	0x08005321
 8004d24:	08005321 	.word	0x08005321
 8004d28:	08005329 	.word	0x08005329
 8004d2c:	08005329 	.word	0x08005329
 8004d30:	08005329 	.word	0x08005329
 8004d34:	08005329 	.word	0x08005329
 8004d38:	08005331 	.word	0x08005331
 8004d3c:	08005331 	.word	0x08005331
 8004d40:	08005331 	.word	0x08005331
 8004d44:	08005331 	.word	0x08005331
 8004d48:	08005339 	.word	0x08005339
 8004d4c:	08005339 	.word	0x08005339
 8004d50:	08005339 	.word	0x08005339
 8004d54:	08005339 	.word	0x08005339
 8004d58:	08005341 	.word	0x08005341
 8004d5c:	08005341 	.word	0x08005341
 8004d60:	08005341 	.word	0x08005341
 8004d64:	08005341 	.word	0x08005341
 8004d68:	08005349 	.word	0x08005349
 8004d6c:	08005349 	.word	0x08005349
 8004d70:	08005349 	.word	0x08005349
 8004d74:	08005349 	.word	0x08005349
 8004d78:	08005351 	.word	0x08005351
 8004d7c:	08005351 	.word	0x08005351
 8004d80:	08005351 	.word	0x08005351
 8004d84:	08005351 	.word	0x08005351
 8004d88:	08005359 	.word	0x08005359
 8004d8c:	08005359 	.word	0x08005359
 8004d90:	08005359 	.word	0x08005359
 8004d94:	08005359 	.word	0x08005359
 8004d98:	08005361 	.word	0x08005361
 8004d9c:	08005361 	.word	0x08005361
 8004da0:	08005361 	.word	0x08005361
 8004da4:	08005361 	.word	0x08005361
 8004da8:	08005369 	.word	0x08005369
 8004dac:	08005369 	.word	0x08005369
 8004db0:	08005369 	.word	0x08005369
 8004db4:	08005369 	.word	0x08005369
 8004db8:	08005371 	.word	0x08005371
 8004dbc:	08005371 	.word	0x08005371
 8004dc0:	08005371 	.word	0x08005371
 8004dc4:	08005371 	.word	0x08005371
 8004dc8:	08005379 	.word	0x08005379
 8004dcc:	08005379 	.word	0x08005379
 8004dd0:	08005379 	.word	0x08005379
 8004dd4:	08005379 	.word	0x08005379
 8004dd8:	08005381 	.word	0x08005381
 8004ddc:	08005381 	.word	0x08005381
 8004de0:	08005381 	.word	0x08005381
 8004de4:	08005381 	.word	0x08005381
 8004de8:	08005389 	.word	0x08005389
 8004dec:	08005389 	.word	0x08005389
 8004df0:	08005389 	.word	0x08005389
 8004df4:	08005389 	.word	0x08005389
 8004df8:	08005391 	.word	0x08005391
 8004dfc:	08005391 	.word	0x08005391
 8004e00:	08005391 	.word	0x08005391
 8004e04:	08005391 	.word	0x08005391
 8004e08:	08005399 	.word	0x08005399
 8004e0c:	08005399 	.word	0x08005399
 8004e10:	08005399 	.word	0x08005399
 8004e14:	08005399 	.word	0x08005399
 8004e18:	080053a1 	.word	0x080053a1
 8004e1c:	080053a1 	.word	0x080053a1
 8004e20:	080053a1 	.word	0x080053a1
 8004e24:	080053a1 	.word	0x080053a1
 8004e28:	080053a9 	.word	0x080053a9
 8004e2c:	080053a9 	.word	0x080053a9
 8004e30:	080053a9 	.word	0x080053a9
 8004e34:	080053a9 	.word	0x080053a9
 8004e38:	080053b1 	.word	0x080053b1
 8004e3c:	080053b1 	.word	0x080053b1
 8004e40:	080053b1 	.word	0x080053b1
 8004e44:	080053b1 	.word	0x080053b1
 8004e48:	080053b9 	.word	0x080053b9
 8004e4c:	080053b9 	.word	0x080053b9
 8004e50:	080053b9 	.word	0x080053b9
 8004e54:	080053b9 	.word	0x080053b9
 8004e58:	080053c1 	.word	0x080053c1
 8004e5c:	080053c1 	.word	0x080053c1
 8004e60:	080053c1 	.word	0x080053c1
 8004e64:	080053c1 	.word	0x080053c1
 8004e68:	080053c9 	.word	0x080053c9
 8004e6c:	080053c9 	.word	0x080053c9
 8004e70:	080053c9 	.word	0x080053c9
 8004e74:	080053c9 	.word	0x080053c9
 8004e78:	080053d1 	.word	0x080053d1
 8004e7c:	080053d1 	.word	0x080053d1
 8004e80:	080053d1 	.word	0x080053d1
 8004e84:	080053d1 	.word	0x080053d1
 8004e88:	080053d9 	.word	0x080053d9
 8004e8c:	080053d9 	.word	0x080053d9
 8004e90:	080053d9 	.word	0x080053d9
 8004e94:	080053d9 	.word	0x080053d9
 8004e98:	080053e1 	.word	0x080053e1
 8004e9c:	080053e1 	.word	0x080053e1
 8004ea0:	080053e1 	.word	0x080053e1
 8004ea4:	080053e1 	.word	0x080053e1
 8004ea8:	080053e9 	.word	0x080053e9
 8004eac:	080053e9 	.word	0x080053e9
 8004eb0:	080053e9 	.word	0x080053e9
 8004eb4:	080053e9 	.word	0x080053e9
 8004eb8:	080053f1 	.word	0x080053f1
 8004ebc:	080053f1 	.word	0x080053f1
 8004ec0:	080053f1 	.word	0x080053f1
 8004ec4:	080053f1 	.word	0x080053f1
 8004ec8:	080053f9 	.word	0x080053f9
 8004ecc:	080053f9 	.word	0x080053f9
 8004ed0:	080053f9 	.word	0x080053f9
 8004ed4:	080053f9 	.word	0x080053f9
 8004ed8:	08005401 	.word	0x08005401
 8004edc:	08005401 	.word	0x08005401
 8004ee0:	08005401 	.word	0x08005401
 8004ee4:	08005401 	.word	0x08005401
 8004ee8:	08005409 	.word	0x08005409
 8004eec:	08005409 	.word	0x08005409
 8004ef0:	08005409 	.word	0x08005409
 8004ef4:	08005409 	.word	0x08005409
 8004ef8:	08005411 	.word	0x08005411
 8004efc:	08005411 	.word	0x08005411
 8004f00:	08005411 	.word	0x08005411
 8004f04:	08005411 	.word	0x08005411
 8004f08:	08005419 	.word	0x08005419
 8004f0c:	08005419 	.word	0x08005419
 8004f10:	08005419 	.word	0x08005419
 8004f14:	08005419 	.word	0x08005419
 8004f18:	08005421 	.word	0x08005421
 8004f1c:	08005421 	.word	0x08005421
 8004f20:	08005421 	.word	0x08005421
 8004f24:	08005421 	.word	0x08005421
 8004f28:	08005429 	.word	0x08005429
 8004f2c:	08005429 	.word	0x08005429
 8004f30:	08005429 	.word	0x08005429
 8004f34:	08005429 	.word	0x08005429
 8004f38:	08005431 	.word	0x08005431
 8004f3c:	08005431 	.word	0x08005431
 8004f40:	08005431 	.word	0x08005431
 8004f44:	08005431 	.word	0x08005431
 8004f48:	08005439 	.word	0x08005439
 8004f4c:	08005439 	.word	0x08005439
 8004f50:	08005439 	.word	0x08005439
 8004f54:	08005439 	.word	0x08005439
 8004f58:	08005441 	.word	0x08005441
 8004f5c:	08005441 	.word	0x08005441
 8004f60:	08005441 	.word	0x08005441
 8004f64:	08005441 	.word	0x08005441
 8004f68:	08005449 	.word	0x08005449
 8004f6c:	08005449 	.word	0x08005449
 8004f70:	08005449 	.word	0x08005449
 8004f74:	08005449 	.word	0x08005449
 8004f78:	08005451 	.word	0x08005451
 8004f7c:	08005451 	.word	0x08005451
 8004f80:	08005451 	.word	0x08005451
 8004f84:	08005451 	.word	0x08005451
 8004f88:	08005459 	.word	0x08005459
 8004f8c:	08005459 	.word	0x08005459
 8004f90:	08005459 	.word	0x08005459
 8004f94:	08005459 	.word	0x08005459
 8004f98:	08005461 	.word	0x08005461
 8004f9c:	08005461 	.word	0x08005461
 8004fa0:	08005461 	.word	0x08005461
 8004fa4:	08005461 	.word	0x08005461
 8004fa8:	08005469 	.word	0x08005469
 8004fac:	08005469 	.word	0x08005469
 8004fb0:	08005469 	.word	0x08005469
 8004fb4:	08005469 	.word	0x08005469
 8004fb8:	08005471 	.word	0x08005471
 8004fbc:	08005471 	.word	0x08005471
 8004fc0:	08005471 	.word	0x08005471
 8004fc4:	08005471 	.word	0x08005471
 8004fc8:	08005479 	.word	0x08005479
 8004fcc:	08005479 	.word	0x08005479
 8004fd0:	08005479 	.word	0x08005479
 8004fd4:	08005479 	.word	0x08005479
 8004fd8:	08005481 	.word	0x08005481
 8004fdc:	08005481 	.word	0x08005481
 8004fe0:	08005481 	.word	0x08005481
 8004fe4:	08005481 	.word	0x08005481
 8004fe8:	08005489 	.word	0x08005489
 8004fec:	08005489 	.word	0x08005489
 8004ff0:	08005489 	.word	0x08005489
 8004ff4:	08005489 	.word	0x08005489
 8004ff8:	08005491 	.word	0x08005491
 8004ffc:	08005491 	.word	0x08005491
 8005000:	08005491 	.word	0x08005491
 8005004:	08005491 	.word	0x08005491
 8005008:	08005499 	.word	0x08005499
 800500c:	08005499 	.word	0x08005499
 8005010:	08005499 	.word	0x08005499
 8005014:	08005499 	.word	0x08005499
 8005018:	080054a1 	.word	0x080054a1
 800501c:	080054a1 	.word	0x080054a1
 8005020:	080054a1 	.word	0x080054a1
 8005024:	080054a1 	.word	0x080054a1
 8005028:	080054a9 	.word	0x080054a9
 800502c:	080054a9 	.word	0x080054a9
 8005030:	080054a9 	.word	0x080054a9
 8005034:	080054a9 	.word	0x080054a9
 8005038:	080054b1 	.word	0x080054b1
 800503c:	080054b1 	.word	0x080054b1
 8005040:	080054b1 	.word	0x080054b1
 8005044:	080054b1 	.word	0x080054b1
 8005048:	080054b9 	.word	0x080054b9
 800504c:	080054b9 	.word	0x080054b9
 8005050:	080054b9 	.word	0x080054b9
 8005054:	080054b9 	.word	0x080054b9
 8005058:	080054c1 	.word	0x080054c1
 800505c:	080054c1 	.word	0x080054c1
 8005060:	080054c1 	.word	0x080054c1
 8005064:	080054c1 	.word	0x080054c1
 8005068:	080054c9 	.word	0x080054c9
 800506c:	080054c9 	.word	0x080054c9
 8005070:	080054c9 	.word	0x080054c9
 8005074:	080054c9 	.word	0x080054c9
 8005078:	080054d1 	.word	0x080054d1
 800507c:	080054d1 	.word	0x080054d1
 8005080:	080054d1 	.word	0x080054d1
 8005084:	080054d1 	.word	0x080054d1
 8005088:	080054d9 	.word	0x080054d9
 800508c:	080054d9 	.word	0x080054d9
 8005090:	080054d9 	.word	0x080054d9
 8005094:	080054d9 	.word	0x080054d9
 8005098:	080054e1 	.word	0x080054e1
 800509c:	080054e1 	.word	0x080054e1
 80050a0:	080054e1 	.word	0x080054e1
 80050a4:	080054e1 	.word	0x080054e1
 80050a8:	080054e9 	.word	0x080054e9
 80050ac:	080054e9 	.word	0x080054e9
 80050b0:	080054e9 	.word	0x080054e9
 80050b4:	080054e9 	.word	0x080054e9
 80050b8:	080054f1 	.word	0x080054f1
 80050bc:	080054f1 	.word	0x080054f1
 80050c0:	080054f1 	.word	0x080054f1
 80050c4:	080054f1 	.word	0x080054f1
 80050c8:	080054f9 	.word	0x080054f9
 80050cc:	080054f9 	.word	0x080054f9
 80050d0:	080054f9 	.word	0x080054f9
 80050d4:	080054f9 	.word	0x080054f9
 80050d8:	08005501 	.word	0x08005501
 80050dc:	08005501 	.word	0x08005501
 80050e0:	08005501 	.word	0x08005501
 80050e4:	08005501 	.word	0x08005501
 80050e8:	08005509 	.word	0x08005509
 80050ec:	08005509 	.word	0x08005509
 80050f0:	08005509 	.word	0x08005509
 80050f4:	08005509 	.word	0x08005509
 80050f8:	08005511 	.word	0x08005511
 80050fc:	08005511 	.word	0x08005511
 8005100:	08005511 	.word	0x08005511
 8005104:	08005511 	.word	0x08005511
 8005108:	08005519 	.word	0x08005519
 800510c:	08005519 	.word	0x08005519
 8005110:	08005519 	.word	0x08005519
 8005114:	08005519 	.word	0x08005519
 8005118:	08005521 	.word	0x08005521
 800511c:	08005521 	.word	0x08005521
 8005120:	08005521 	.word	0x08005521
 8005124:	08005521 	.word	0x08005521
 8005128:	08005529 	.word	0x08005529
 800512c:	08005529 	.word	0x08005529
 8005130:	08005529 	.word	0x08005529
 8005134:	08005529 	.word	0x08005529
 8005138:	08005531 	.word	0x08005531
 800513c:	08005531 	.word	0x08005531
 8005140:	08005531 	.word	0x08005531
 8005144:	08005531 	.word	0x08005531
 8005148:	08005539 	.word	0x08005539
 800514c:	08005539 	.word	0x08005539
 8005150:	08005539 	.word	0x08005539
 8005154:	08005539 	.word	0x08005539
 8005158:	08005541 	.word	0x08005541
 800515c:	08005541 	.word	0x08005541
 8005160:	08005541 	.word	0x08005541
 8005164:	08005541 	.word	0x08005541
 8005168:	08005549 	.word	0x08005549
 800516c:	08005549 	.word	0x08005549
 8005170:	08005549 	.word	0x08005549
 8005174:	08005549 	.word	0x08005549
 8005178:	08005551 	.word	0x08005551
 800517c:	08005551 	.word	0x08005551
 8005180:	08005551 	.word	0x08005551
 8005184:	08005551 	.word	0x08005551
 8005188:	08005559 	.word	0x08005559
 800518c:	08005559 	.word	0x08005559
 8005190:	08005559 	.word	0x08005559
 8005194:	08005559 	.word	0x08005559
 8005198:	08005561 	.word	0x08005561
 800519c:	08005561 	.word	0x08005561
 80051a0:	08005561 	.word	0x08005561
 80051a4:	08005561 	.word	0x08005561
 80051a8:	08005569 	.word	0x08005569
 80051ac:	08005569 	.word	0x08005569
 80051b0:	08005569 	.word	0x08005569
 80051b4:	08005569 	.word	0x08005569
 80051b8:	08005571 	.word	0x08005571
 80051bc:	08005571 	.word	0x08005571
 80051c0:	08005571 	.word	0x08005571
 80051c4:	08005571 	.word	0x08005571
 80051c8:	08005579 	.word	0x08005579
 80051cc:	08005579 	.word	0x08005579
 80051d0:	08005579 	.word	0x08005579
 80051d4:	08005579 	.word	0x08005579
 80051d8:	08005581 	.word	0x08005581
 80051dc:	08005581 	.word	0x08005581
 80051e0:	08005581 	.word	0x08005581
 80051e4:	08005581 	.word	0x08005581
 80051e8:	08005589 	.word	0x08005589
 80051ec:	08005589 	.word	0x08005589
 80051f0:	08005589 	.word	0x08005589
 80051f4:	08005589 	.word	0x08005589
 80051f8:	08005591 	.word	0x08005591
 80051fc:	08005591 	.word	0x08005591
 8005200:	08005591 	.word	0x08005591
 8005204:	08005591 	.word	0x08005591
 8005208:	08005599 	.word	0x08005599
 800520c:	08005599 	.word	0x08005599
 8005210:	08005599 	.word	0x08005599
 8005214:	08005599 	.word	0x08005599
 8005218:	080055a1 	.word	0x080055a1
 800521c:	080055a1 	.word	0x080055a1
 8005220:	080055a1 	.word	0x080055a1
 8005224:	080055a1 	.word	0x080055a1
 8005228:	080055a9 	.word	0x080055a9
 800522c:	080055a9 	.word	0x080055a9
 8005230:	080055a9 	.word	0x080055a9
 8005234:	080055a9 	.word	0x080055a9
 8005238:	080055b1 	.word	0x080055b1
 800523c:	080055b1 	.word	0x080055b1
 8005240:	080055b1 	.word	0x080055b1
 8005244:	080055b1 	.word	0x080055b1
 8005248:	080055b9 	.word	0x080055b9
 800524c:	080055b9 	.word	0x080055b9
 8005250:	080055b9 	.word	0x080055b9
 8005254:	080055b9 	.word	0x080055b9
 8005258:	080055c1 	.word	0x080055c1
 800525c:	080055c1 	.word	0x080055c1
 8005260:	080055c1 	.word	0x080055c1
 8005264:	080055c1 	.word	0x080055c1
 8005268:	080055c9 	.word	0x080055c9
 800526c:	080055c9 	.word	0x080055c9
 8005270:	080055c9 	.word	0x080055c9
 8005274:	080055c9 	.word	0x080055c9
 8005278:	080055d1 	.word	0x080055d1
 800527c:	080055d1 	.word	0x080055d1
 8005280:	080055d1 	.word	0x080055d1
 8005284:	080055d1 	.word	0x080055d1
 8005288:	080055d9 	.word	0x080055d9
 800528c:	080055d9 	.word	0x080055d9
 8005290:	080055d9 	.word	0x080055d9
 8005294:	080055d9 	.word	0x080055d9
 8005298:	080055e1 	.word	0x080055e1
 800529c:	080055e1 	.word	0x080055e1
 80052a0:	080055e1 	.word	0x080055e1
 80052a4:	080055e1 	.word	0x080055e1
 80052a8:	080055e9 	.word	0x080055e9
 80052ac:	080055e9 	.word	0x080055e9
 80052b0:	080055e9 	.word	0x080055e9
 80052b4:	080055e9 	.word	0x080055e9
 80052b8:	080055f1 	.word	0x080055f1
 80052bc:	080055f1 	.word	0x080055f1
 80052c0:	080055f1 	.word	0x080055f1
 80052c4:	080055f1 	.word	0x080055f1
 80052c8:	080055f9 	.word	0x080055f9
 80052cc:	080055f9 	.word	0x080055f9
 80052d0:	080055f9 	.word	0x080055f9
 80052d4:	080055f9 	.word	0x080055f9
 80052d8:	08005601 	.word	0x08005601
 80052dc:	08005601 	.word	0x08005601
 80052e0:	08005601 	.word	0x08005601
 80052e4:	08005601 	.word	0x08005601
 80052e8:	08005609 	.word	0x08005609
 80052ec:	08005609 	.word	0x08005609
 80052f0:	08005609 	.word	0x08005609
 80052f4:	08005609 	.word	0x08005609
 80052f8:	08005611 	.word	0x08005611
 80052fc:	08005611 	.word	0x08005611
 8005300:	08005611 	.word	0x08005611
 8005304:	08005611 	.word	0x08005611
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005308:	2000      	movs	r0, #0
 800530a:	f7ff fb89 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800530e:	e184      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005310:	2001      	movs	r0, #1
 8005312:	f7ff fb85 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005316:	e180      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005318:	2002      	movs	r0, #2
 800531a:	f7ff fb81 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800531e:	e17c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005320:	2003      	movs	r0, #3
 8005322:	f7ff fb7d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005326:	e178      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005328:	2004      	movs	r0, #4
 800532a:	f7ff fb79 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800532e:	e174      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005330:	2005      	movs	r0, #5
 8005332:	f7ff fb75 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005336:	e170      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005338:	2006      	movs	r0, #6
 800533a:	f7ff fb71 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800533e:	e16c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005340:	2007      	movs	r0, #7
 8005342:	f7ff fb6d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005346:	e168      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005348:	2008      	movs	r0, #8
 800534a:	f7ff fb69 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800534e:	e164      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005350:	2009      	movs	r0, #9
 8005352:	f7ff fb65 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005356:	e160      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005358:	200a      	movs	r0, #10
 800535a:	f7ff fb61 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800535e:	e15c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005360:	200b      	movs	r0, #11
 8005362:	f7ff fb5d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005366:	e158      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005368:	200c      	movs	r0, #12
 800536a:	f7ff fb59 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800536e:	e154      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8005370:	200d      	movs	r0, #13
 8005372:	f7ff fb55 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005376:	e150      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005378:	200e      	movs	r0, #14
 800537a:	f7ff fb51 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800537e:	e14c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8005380:	200f      	movs	r0, #15
 8005382:	f7ff fb4d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005386:	e148      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8005388:	2010      	movs	r0, #16
 800538a:	f7ff fb49 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800538e:	e144      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8005390:	2011      	movs	r0, #17
 8005392:	f7ff fb45 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005396:	e140      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8005398:	2012      	movs	r0, #18
 800539a:	f7ff fb41 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800539e:	e13c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 80053a0:	2013      	movs	r0, #19
 80053a2:	f7ff fb3d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053a6:	e138      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 80053a8:	2014      	movs	r0, #20
 80053aa:	f7ff fb39 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053ae:	e134      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 80053b0:	2015      	movs	r0, #21
 80053b2:	f7ff fb35 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053b6:	e130      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 80053b8:	2016      	movs	r0, #22
 80053ba:	f7ff fb31 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053be:	e12c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 80053c0:	2017      	movs	r0, #23
 80053c2:	f7ff fb2d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053c6:	e128      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 80053c8:	2018      	movs	r0, #24
 80053ca:	f7ff fb29 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053ce:	e124      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 80053d0:	2019      	movs	r0, #25
 80053d2:	f7ff fb25 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053d6:	e120      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 80053d8:	201a      	movs	r0, #26
 80053da:	f7ff fb21 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053de:	e11c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 80053e0:	201b      	movs	r0, #27
 80053e2:	f7ff fb1d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053e6:	e118      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 80053e8:	201c      	movs	r0, #28
 80053ea:	f7ff fb19 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053ee:	e114      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 80053f0:	201d      	movs	r0, #29
 80053f2:	f7ff fb15 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053f6:	e110      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 80053f8:	201e      	movs	r0, #30
 80053fa:	f7ff fb11 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80053fe:	e10c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8005400:	201f      	movs	r0, #31
 8005402:	f7ff fb0d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005406:	e108      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8005408:	2020      	movs	r0, #32
 800540a:	f7ff fb09 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800540e:	e104      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8005410:	2021      	movs	r0, #33	; 0x21
 8005412:	f7ff fb05 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005416:	e100      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8005418:	2022      	movs	r0, #34	; 0x22
 800541a:	f7ff fb01 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800541e:	e0fc      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8005420:	2023      	movs	r0, #35	; 0x23
 8005422:	f7ff fafd 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005426:	e0f8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8005428:	2024      	movs	r0, #36	; 0x24
 800542a:	f7ff faf9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800542e:	e0f4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8005430:	2025      	movs	r0, #37	; 0x25
 8005432:	f7ff faf5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005436:	e0f0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8005438:	2026      	movs	r0, #38	; 0x26
 800543a:	f7ff faf1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800543e:	e0ec      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8005440:	2027      	movs	r0, #39	; 0x27
 8005442:	f7ff faed 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005446:	e0e8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8005448:	2028      	movs	r0, #40	; 0x28
 800544a:	f7ff fae9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800544e:	e0e4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8005450:	2029      	movs	r0, #41	; 0x29
 8005452:	f7ff fae5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005456:	e0e0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8005458:	202a      	movs	r0, #42	; 0x2a
 800545a:	f7ff fae1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800545e:	e0dc      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8005460:	202b      	movs	r0, #43	; 0x2b
 8005462:	f7ff fadd 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005466:	e0d8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8005468:	202c      	movs	r0, #44	; 0x2c
 800546a:	f7ff fad9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800546e:	e0d4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8005470:	202d      	movs	r0, #45	; 0x2d
 8005472:	f7ff fad5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005476:	e0d0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8005478:	202e      	movs	r0, #46	; 0x2e
 800547a:	f7ff fad1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800547e:	e0cc      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8005480:	202f      	movs	r0, #47	; 0x2f
 8005482:	f7ff facd 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005486:	e0c8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8005488:	2030      	movs	r0, #48	; 0x30
 800548a:	f7ff fac9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800548e:	e0c4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8005490:	2031      	movs	r0, #49	; 0x31
 8005492:	f7ff fac5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005496:	e0c0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8005498:	2032      	movs	r0, #50	; 0x32
 800549a:	f7ff fac1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800549e:	e0bc      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 80054a0:	2033      	movs	r0, #51	; 0x33
 80054a2:	f7ff fabd 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054a6:	e0b8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 80054a8:	2034      	movs	r0, #52	; 0x34
 80054aa:	f7ff fab9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054ae:	e0b4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 80054b0:	2035      	movs	r0, #53	; 0x35
 80054b2:	f7ff fab5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054b6:	e0b0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 80054b8:	2036      	movs	r0, #54	; 0x36
 80054ba:	f7ff fab1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054be:	e0ac      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 80054c0:	2037      	movs	r0, #55	; 0x37
 80054c2:	f7ff faad 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054c6:	e0a8      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 80054c8:	2038      	movs	r0, #56	; 0x38
 80054ca:	f7ff faa9 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054ce:	e0a4      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 80054d0:	2039      	movs	r0, #57	; 0x39
 80054d2:	f7ff faa5 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054d6:	e0a0      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 80054d8:	203a      	movs	r0, #58	; 0x3a
 80054da:	f7ff faa1 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054de:	e09c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 80054e0:	203b      	movs	r0, #59	; 0x3b
 80054e2:	f7ff fa9d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054e6:	e098      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 80054e8:	203c      	movs	r0, #60	; 0x3c
 80054ea:	f7ff fa99 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054ee:	e094      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 80054f0:	203d      	movs	r0, #61	; 0x3d
 80054f2:	f7ff fa95 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054f6:	e090      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 80054f8:	203e      	movs	r0, #62	; 0x3e
 80054fa:	f7ff fa91 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80054fe:	e08c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8005500:	203f      	movs	r0, #63	; 0x3f
 8005502:	f7ff fa8d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005506:	e088      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8005508:	2040      	movs	r0, #64	; 0x40
 800550a:	f7ff fa89 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800550e:	e084      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8005510:	2041      	movs	r0, #65	; 0x41
 8005512:	f7ff fa85 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005516:	e080      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8005518:	2042      	movs	r0, #66	; 0x42
 800551a:	f7ff fa81 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800551e:	e07c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8005520:	2043      	movs	r0, #67	; 0x43
 8005522:	f7ff fa7d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005526:	e078      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8005528:	2044      	movs	r0, #68	; 0x44
 800552a:	f7ff fa79 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800552e:	e074      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8005530:	2045      	movs	r0, #69	; 0x45
 8005532:	f7ff fa75 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005536:	e070      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8005538:	2046      	movs	r0, #70	; 0x46
 800553a:	f7ff fa71 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800553e:	e06c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8005540:	2047      	movs	r0, #71	; 0x47
 8005542:	f7ff fa6d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005546:	e068      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8005548:	2048      	movs	r0, #72	; 0x48
 800554a:	f7ff fa69 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800554e:	e064      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8005550:	2049      	movs	r0, #73	; 0x49
 8005552:	f7ff fa65 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005556:	e060      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8005558:	204a      	movs	r0, #74	; 0x4a
 800555a:	f7ff fa61 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800555e:	e05c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8005560:	204b      	movs	r0, #75	; 0x4b
 8005562:	f7ff fa5d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005566:	e058      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8005568:	204c      	movs	r0, #76	; 0x4c
 800556a:	f7ff fa59 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800556e:	e054      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8005570:	204d      	movs	r0, #77	; 0x4d
 8005572:	f7ff fa55 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005576:	e050      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8005578:	204e      	movs	r0, #78	; 0x4e
 800557a:	f7ff fa51 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800557e:	e04c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8005580:	204f      	movs	r0, #79	; 0x4f
 8005582:	f7ff fa4d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005586:	e048      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8005588:	2050      	movs	r0, #80	; 0x50
 800558a:	f7ff fa49 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800558e:	e044      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8005590:	2051      	movs	r0, #81	; 0x51
 8005592:	f7ff fa45 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005596:	e040      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8005598:	2052      	movs	r0, #82	; 0x52
 800559a:	f7ff fa41 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800559e:	e03c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 80055a0:	2053      	movs	r0, #83	; 0x53
 80055a2:	f7ff fa3d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055a6:	e038      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 80055a8:	2054      	movs	r0, #84	; 0x54
 80055aa:	f7ff fa39 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055ae:	e034      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 80055b0:	2055      	movs	r0, #85	; 0x55
 80055b2:	f7ff fa35 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055b6:	e030      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 80055b8:	2056      	movs	r0, #86	; 0x56
 80055ba:	f7ff fa31 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055be:	e02c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 80055c0:	2057      	movs	r0, #87	; 0x57
 80055c2:	f7ff fa2d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055c6:	e028      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 80055c8:	2058      	movs	r0, #88	; 0x58
 80055ca:	f7ff fa29 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055ce:	e024      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 80055d0:	2059      	movs	r0, #89	; 0x59
 80055d2:	f7ff fa25 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055d6:	e020      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 80055d8:	205a      	movs	r0, #90	; 0x5a
 80055da:	f7ff fa21 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055de:	e01c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 80055e0:	205b      	movs	r0, #91	; 0x5b
 80055e2:	f7ff fa1d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055e6:	e018      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 80055e8:	205c      	movs	r0, #92	; 0x5c
 80055ea:	f7ff fa19 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055ee:	e014      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 80055f0:	205d      	movs	r0, #93	; 0x5d
 80055f2:	f7ff fa15 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055f6:	e010      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80055f8:	205e      	movs	r0, #94	; 0x5e
 80055fa:	f7ff fa11 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 80055fe:	e00c      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8005600:	205f      	movs	r0, #95	; 0x5f
 8005602:	f7ff fa0d 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005606:	e008      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8005608:	2060      	movs	r0, #96	; 0x60
 800560a:	f7ff fa09 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 800560e:	e004      	b.n	800561a <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 8005610:	2061      	movs	r0, #97	; 0x61
 8005612:	f7ff fa05 	bl	8004a20 <VPP_ApplyPresetToSignal>
			break;
 8005616:	e000      	b.n	800561a <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8005618:	bf00      	nop
	}
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop

08005624 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005634:	f200 849a 	bhi.w	8005f6c <VPP_ModifySyncOutput+0x948>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <VPP_ModifySyncOutput+0x1c>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005c5d 	.word	0x08005c5d
 8005644:	08005c5d 	.word	0x08005c5d
 8005648:	08005c5d 	.word	0x08005c5d
 800564c:	08005c65 	.word	0x08005c65
 8005650:	08005c65 	.word	0x08005c65
 8005654:	08005c65 	.word	0x08005c65
 8005658:	08005c65 	.word	0x08005c65
 800565c:	08005c6d 	.word	0x08005c6d
 8005660:	08005c6d 	.word	0x08005c6d
 8005664:	08005c6d 	.word	0x08005c6d
 8005668:	08005c6d 	.word	0x08005c6d
 800566c:	08005c75 	.word	0x08005c75
 8005670:	08005c75 	.word	0x08005c75
 8005674:	08005c75 	.word	0x08005c75
 8005678:	08005c75 	.word	0x08005c75
 800567c:	08005c7d 	.word	0x08005c7d
 8005680:	08005c7d 	.word	0x08005c7d
 8005684:	08005c7d 	.word	0x08005c7d
 8005688:	08005c7d 	.word	0x08005c7d
 800568c:	08005c85 	.word	0x08005c85
 8005690:	08005c85 	.word	0x08005c85
 8005694:	08005c85 	.word	0x08005c85
 8005698:	08005c85 	.word	0x08005c85
 800569c:	08005c8d 	.word	0x08005c8d
 80056a0:	08005c8d 	.word	0x08005c8d
 80056a4:	08005c8d 	.word	0x08005c8d
 80056a8:	08005c8d 	.word	0x08005c8d
 80056ac:	08005c95 	.word	0x08005c95
 80056b0:	08005c95 	.word	0x08005c95
 80056b4:	08005c95 	.word	0x08005c95
 80056b8:	08005c95 	.word	0x08005c95
 80056bc:	08005c9d 	.word	0x08005c9d
 80056c0:	08005c9d 	.word	0x08005c9d
 80056c4:	08005c9d 	.word	0x08005c9d
 80056c8:	08005c9d 	.word	0x08005c9d
 80056cc:	08005ca5 	.word	0x08005ca5
 80056d0:	08005ca5 	.word	0x08005ca5
 80056d4:	08005ca5 	.word	0x08005ca5
 80056d8:	08005ca5 	.word	0x08005ca5
 80056dc:	08005cad 	.word	0x08005cad
 80056e0:	08005cad 	.word	0x08005cad
 80056e4:	08005cad 	.word	0x08005cad
 80056e8:	08005cad 	.word	0x08005cad
 80056ec:	08005cb5 	.word	0x08005cb5
 80056f0:	08005cb5 	.word	0x08005cb5
 80056f4:	08005cb5 	.word	0x08005cb5
 80056f8:	08005cb5 	.word	0x08005cb5
 80056fc:	08005cbd 	.word	0x08005cbd
 8005700:	08005cbd 	.word	0x08005cbd
 8005704:	08005cbd 	.word	0x08005cbd
 8005708:	08005cbd 	.word	0x08005cbd
 800570c:	08005cc5 	.word	0x08005cc5
 8005710:	08005cc5 	.word	0x08005cc5
 8005714:	08005cc5 	.word	0x08005cc5
 8005718:	08005cc5 	.word	0x08005cc5
 800571c:	08005ccd 	.word	0x08005ccd
 8005720:	08005ccd 	.word	0x08005ccd
 8005724:	08005ccd 	.word	0x08005ccd
 8005728:	08005ccd 	.word	0x08005ccd
 800572c:	08005cd5 	.word	0x08005cd5
 8005730:	08005cd5 	.word	0x08005cd5
 8005734:	08005cd5 	.word	0x08005cd5
 8005738:	08005cd5 	.word	0x08005cd5
 800573c:	08005cdd 	.word	0x08005cdd
 8005740:	08005cdd 	.word	0x08005cdd
 8005744:	08005cdd 	.word	0x08005cdd
 8005748:	08005cdd 	.word	0x08005cdd
 800574c:	08005ce5 	.word	0x08005ce5
 8005750:	08005ce5 	.word	0x08005ce5
 8005754:	08005ce5 	.word	0x08005ce5
 8005758:	08005ce5 	.word	0x08005ce5
 800575c:	08005ced 	.word	0x08005ced
 8005760:	08005ced 	.word	0x08005ced
 8005764:	08005ced 	.word	0x08005ced
 8005768:	08005ced 	.word	0x08005ced
 800576c:	08005cf5 	.word	0x08005cf5
 8005770:	08005cf5 	.word	0x08005cf5
 8005774:	08005cf5 	.word	0x08005cf5
 8005778:	08005cf5 	.word	0x08005cf5
 800577c:	08005cfd 	.word	0x08005cfd
 8005780:	08005cfd 	.word	0x08005cfd
 8005784:	08005cfd 	.word	0x08005cfd
 8005788:	08005cfd 	.word	0x08005cfd
 800578c:	08005d05 	.word	0x08005d05
 8005790:	08005d05 	.word	0x08005d05
 8005794:	08005d05 	.word	0x08005d05
 8005798:	08005d05 	.word	0x08005d05
 800579c:	08005d0d 	.word	0x08005d0d
 80057a0:	08005d0d 	.word	0x08005d0d
 80057a4:	08005d0d 	.word	0x08005d0d
 80057a8:	08005d0d 	.word	0x08005d0d
 80057ac:	08005d15 	.word	0x08005d15
 80057b0:	08005d15 	.word	0x08005d15
 80057b4:	08005d15 	.word	0x08005d15
 80057b8:	08005d15 	.word	0x08005d15
 80057bc:	08005d1d 	.word	0x08005d1d
 80057c0:	08005d1d 	.word	0x08005d1d
 80057c4:	08005d1d 	.word	0x08005d1d
 80057c8:	08005d1d 	.word	0x08005d1d
 80057cc:	08005d25 	.word	0x08005d25
 80057d0:	08005d25 	.word	0x08005d25
 80057d4:	08005d25 	.word	0x08005d25
 80057d8:	08005d25 	.word	0x08005d25
 80057dc:	08005d2d 	.word	0x08005d2d
 80057e0:	08005d2d 	.word	0x08005d2d
 80057e4:	08005d2d 	.word	0x08005d2d
 80057e8:	08005d2d 	.word	0x08005d2d
 80057ec:	08005d35 	.word	0x08005d35
 80057f0:	08005d35 	.word	0x08005d35
 80057f4:	08005d35 	.word	0x08005d35
 80057f8:	08005d35 	.word	0x08005d35
 80057fc:	08005d3d 	.word	0x08005d3d
 8005800:	08005d3d 	.word	0x08005d3d
 8005804:	08005d3d 	.word	0x08005d3d
 8005808:	08005d3d 	.word	0x08005d3d
 800580c:	08005d45 	.word	0x08005d45
 8005810:	08005d45 	.word	0x08005d45
 8005814:	08005d45 	.word	0x08005d45
 8005818:	08005d45 	.word	0x08005d45
 800581c:	08005d4d 	.word	0x08005d4d
 8005820:	08005d4d 	.word	0x08005d4d
 8005824:	08005d4d 	.word	0x08005d4d
 8005828:	08005d4d 	.word	0x08005d4d
 800582c:	08005d55 	.word	0x08005d55
 8005830:	08005d55 	.word	0x08005d55
 8005834:	08005d55 	.word	0x08005d55
 8005838:	08005d55 	.word	0x08005d55
 800583c:	08005d5d 	.word	0x08005d5d
 8005840:	08005d5d 	.word	0x08005d5d
 8005844:	08005d5d 	.word	0x08005d5d
 8005848:	08005d5d 	.word	0x08005d5d
 800584c:	08005d65 	.word	0x08005d65
 8005850:	08005d65 	.word	0x08005d65
 8005854:	08005d65 	.word	0x08005d65
 8005858:	08005d65 	.word	0x08005d65
 800585c:	08005d6d 	.word	0x08005d6d
 8005860:	08005d6d 	.word	0x08005d6d
 8005864:	08005d6d 	.word	0x08005d6d
 8005868:	08005d6d 	.word	0x08005d6d
 800586c:	08005d75 	.word	0x08005d75
 8005870:	08005d75 	.word	0x08005d75
 8005874:	08005d75 	.word	0x08005d75
 8005878:	08005d75 	.word	0x08005d75
 800587c:	08005d7d 	.word	0x08005d7d
 8005880:	08005d7d 	.word	0x08005d7d
 8005884:	08005d7d 	.word	0x08005d7d
 8005888:	08005d7d 	.word	0x08005d7d
 800588c:	08005d85 	.word	0x08005d85
 8005890:	08005d85 	.word	0x08005d85
 8005894:	08005d85 	.word	0x08005d85
 8005898:	08005d85 	.word	0x08005d85
 800589c:	08005d8d 	.word	0x08005d8d
 80058a0:	08005d8d 	.word	0x08005d8d
 80058a4:	08005d8d 	.word	0x08005d8d
 80058a8:	08005d8d 	.word	0x08005d8d
 80058ac:	08005d95 	.word	0x08005d95
 80058b0:	08005d95 	.word	0x08005d95
 80058b4:	08005d95 	.word	0x08005d95
 80058b8:	08005d95 	.word	0x08005d95
 80058bc:	08005d9d 	.word	0x08005d9d
 80058c0:	08005d9d 	.word	0x08005d9d
 80058c4:	08005d9d 	.word	0x08005d9d
 80058c8:	08005d9d 	.word	0x08005d9d
 80058cc:	08005da5 	.word	0x08005da5
 80058d0:	08005da5 	.word	0x08005da5
 80058d4:	08005da5 	.word	0x08005da5
 80058d8:	08005da5 	.word	0x08005da5
 80058dc:	08005dad 	.word	0x08005dad
 80058e0:	08005dad 	.word	0x08005dad
 80058e4:	08005dad 	.word	0x08005dad
 80058e8:	08005dad 	.word	0x08005dad
 80058ec:	08005db5 	.word	0x08005db5
 80058f0:	08005db5 	.word	0x08005db5
 80058f4:	08005db5 	.word	0x08005db5
 80058f8:	08005db5 	.word	0x08005db5
 80058fc:	08005dbd 	.word	0x08005dbd
 8005900:	08005dbd 	.word	0x08005dbd
 8005904:	08005dbd 	.word	0x08005dbd
 8005908:	08005dbd 	.word	0x08005dbd
 800590c:	08005dc5 	.word	0x08005dc5
 8005910:	08005dc5 	.word	0x08005dc5
 8005914:	08005dc5 	.word	0x08005dc5
 8005918:	08005dc5 	.word	0x08005dc5
 800591c:	08005dcd 	.word	0x08005dcd
 8005920:	08005dcd 	.word	0x08005dcd
 8005924:	08005dcd 	.word	0x08005dcd
 8005928:	08005dcd 	.word	0x08005dcd
 800592c:	08005dd5 	.word	0x08005dd5
 8005930:	08005dd5 	.word	0x08005dd5
 8005934:	08005dd5 	.word	0x08005dd5
 8005938:	08005dd5 	.word	0x08005dd5
 800593c:	08005ddd 	.word	0x08005ddd
 8005940:	08005ddd 	.word	0x08005ddd
 8005944:	08005ddd 	.word	0x08005ddd
 8005948:	08005ddd 	.word	0x08005ddd
 800594c:	08005de5 	.word	0x08005de5
 8005950:	08005de5 	.word	0x08005de5
 8005954:	08005de5 	.word	0x08005de5
 8005958:	08005de5 	.word	0x08005de5
 800595c:	08005ded 	.word	0x08005ded
 8005960:	08005ded 	.word	0x08005ded
 8005964:	08005ded 	.word	0x08005ded
 8005968:	08005ded 	.word	0x08005ded
 800596c:	08005df5 	.word	0x08005df5
 8005970:	08005df5 	.word	0x08005df5
 8005974:	08005df5 	.word	0x08005df5
 8005978:	08005df5 	.word	0x08005df5
 800597c:	08005dfd 	.word	0x08005dfd
 8005980:	08005dfd 	.word	0x08005dfd
 8005984:	08005dfd 	.word	0x08005dfd
 8005988:	08005dfd 	.word	0x08005dfd
 800598c:	08005e05 	.word	0x08005e05
 8005990:	08005e05 	.word	0x08005e05
 8005994:	08005e05 	.word	0x08005e05
 8005998:	08005e05 	.word	0x08005e05
 800599c:	08005e0d 	.word	0x08005e0d
 80059a0:	08005e0d 	.word	0x08005e0d
 80059a4:	08005e0d 	.word	0x08005e0d
 80059a8:	08005e0d 	.word	0x08005e0d
 80059ac:	08005e15 	.word	0x08005e15
 80059b0:	08005e15 	.word	0x08005e15
 80059b4:	08005e15 	.word	0x08005e15
 80059b8:	08005e15 	.word	0x08005e15
 80059bc:	08005e1d 	.word	0x08005e1d
 80059c0:	08005e1d 	.word	0x08005e1d
 80059c4:	08005e1d 	.word	0x08005e1d
 80059c8:	08005e1d 	.word	0x08005e1d
 80059cc:	08005e25 	.word	0x08005e25
 80059d0:	08005e25 	.word	0x08005e25
 80059d4:	08005e25 	.word	0x08005e25
 80059d8:	08005e25 	.word	0x08005e25
 80059dc:	08005e2d 	.word	0x08005e2d
 80059e0:	08005e2d 	.word	0x08005e2d
 80059e4:	08005e2d 	.word	0x08005e2d
 80059e8:	08005e2d 	.word	0x08005e2d
 80059ec:	08005e35 	.word	0x08005e35
 80059f0:	08005e35 	.word	0x08005e35
 80059f4:	08005e35 	.word	0x08005e35
 80059f8:	08005e35 	.word	0x08005e35
 80059fc:	08005e3d 	.word	0x08005e3d
 8005a00:	08005e3d 	.word	0x08005e3d
 8005a04:	08005e3d 	.word	0x08005e3d
 8005a08:	08005e3d 	.word	0x08005e3d
 8005a0c:	08005e45 	.word	0x08005e45
 8005a10:	08005e45 	.word	0x08005e45
 8005a14:	08005e45 	.word	0x08005e45
 8005a18:	08005e45 	.word	0x08005e45
 8005a1c:	08005e4d 	.word	0x08005e4d
 8005a20:	08005e4d 	.word	0x08005e4d
 8005a24:	08005e4d 	.word	0x08005e4d
 8005a28:	08005e4d 	.word	0x08005e4d
 8005a2c:	08005e55 	.word	0x08005e55
 8005a30:	08005e55 	.word	0x08005e55
 8005a34:	08005e55 	.word	0x08005e55
 8005a38:	08005e55 	.word	0x08005e55
 8005a3c:	08005e5d 	.word	0x08005e5d
 8005a40:	08005e5d 	.word	0x08005e5d
 8005a44:	08005e5d 	.word	0x08005e5d
 8005a48:	08005e5d 	.word	0x08005e5d
 8005a4c:	08005e65 	.word	0x08005e65
 8005a50:	08005e65 	.word	0x08005e65
 8005a54:	08005e65 	.word	0x08005e65
 8005a58:	08005e65 	.word	0x08005e65
 8005a5c:	08005e6d 	.word	0x08005e6d
 8005a60:	08005e6d 	.word	0x08005e6d
 8005a64:	08005e6d 	.word	0x08005e6d
 8005a68:	08005e6d 	.word	0x08005e6d
 8005a6c:	08005e75 	.word	0x08005e75
 8005a70:	08005e75 	.word	0x08005e75
 8005a74:	08005e75 	.word	0x08005e75
 8005a78:	08005e75 	.word	0x08005e75
 8005a7c:	08005e7d 	.word	0x08005e7d
 8005a80:	08005e7d 	.word	0x08005e7d
 8005a84:	08005e7d 	.word	0x08005e7d
 8005a88:	08005e7d 	.word	0x08005e7d
 8005a8c:	08005e85 	.word	0x08005e85
 8005a90:	08005e85 	.word	0x08005e85
 8005a94:	08005e85 	.word	0x08005e85
 8005a98:	08005e85 	.word	0x08005e85
 8005a9c:	08005e8d 	.word	0x08005e8d
 8005aa0:	08005e8d 	.word	0x08005e8d
 8005aa4:	08005e8d 	.word	0x08005e8d
 8005aa8:	08005e8d 	.word	0x08005e8d
 8005aac:	08005e95 	.word	0x08005e95
 8005ab0:	08005e95 	.word	0x08005e95
 8005ab4:	08005e95 	.word	0x08005e95
 8005ab8:	08005e95 	.word	0x08005e95
 8005abc:	08005e9d 	.word	0x08005e9d
 8005ac0:	08005e9d 	.word	0x08005e9d
 8005ac4:	08005e9d 	.word	0x08005e9d
 8005ac8:	08005e9d 	.word	0x08005e9d
 8005acc:	08005ea5 	.word	0x08005ea5
 8005ad0:	08005ea5 	.word	0x08005ea5
 8005ad4:	08005ea5 	.word	0x08005ea5
 8005ad8:	08005ea5 	.word	0x08005ea5
 8005adc:	08005ead 	.word	0x08005ead
 8005ae0:	08005ead 	.word	0x08005ead
 8005ae4:	08005ead 	.word	0x08005ead
 8005ae8:	08005ead 	.word	0x08005ead
 8005aec:	08005eb5 	.word	0x08005eb5
 8005af0:	08005eb5 	.word	0x08005eb5
 8005af4:	08005eb5 	.word	0x08005eb5
 8005af8:	08005eb5 	.word	0x08005eb5
 8005afc:	08005ebd 	.word	0x08005ebd
 8005b00:	08005ebd 	.word	0x08005ebd
 8005b04:	08005ebd 	.word	0x08005ebd
 8005b08:	08005ebd 	.word	0x08005ebd
 8005b0c:	08005ec5 	.word	0x08005ec5
 8005b10:	08005ec5 	.word	0x08005ec5
 8005b14:	08005ec5 	.word	0x08005ec5
 8005b18:	08005ec5 	.word	0x08005ec5
 8005b1c:	08005ecd 	.word	0x08005ecd
 8005b20:	08005ecd 	.word	0x08005ecd
 8005b24:	08005ecd 	.word	0x08005ecd
 8005b28:	08005ecd 	.word	0x08005ecd
 8005b2c:	08005ed5 	.word	0x08005ed5
 8005b30:	08005ed5 	.word	0x08005ed5
 8005b34:	08005ed5 	.word	0x08005ed5
 8005b38:	08005ed5 	.word	0x08005ed5
 8005b3c:	08005edd 	.word	0x08005edd
 8005b40:	08005edd 	.word	0x08005edd
 8005b44:	08005edd 	.word	0x08005edd
 8005b48:	08005edd 	.word	0x08005edd
 8005b4c:	08005ee5 	.word	0x08005ee5
 8005b50:	08005ee5 	.word	0x08005ee5
 8005b54:	08005ee5 	.word	0x08005ee5
 8005b58:	08005ee5 	.word	0x08005ee5
 8005b5c:	08005eed 	.word	0x08005eed
 8005b60:	08005eed 	.word	0x08005eed
 8005b64:	08005eed 	.word	0x08005eed
 8005b68:	08005eed 	.word	0x08005eed
 8005b6c:	08005ef5 	.word	0x08005ef5
 8005b70:	08005ef5 	.word	0x08005ef5
 8005b74:	08005ef5 	.word	0x08005ef5
 8005b78:	08005ef5 	.word	0x08005ef5
 8005b7c:	08005efd 	.word	0x08005efd
 8005b80:	08005efd 	.word	0x08005efd
 8005b84:	08005efd 	.word	0x08005efd
 8005b88:	08005efd 	.word	0x08005efd
 8005b8c:	08005f05 	.word	0x08005f05
 8005b90:	08005f05 	.word	0x08005f05
 8005b94:	08005f05 	.word	0x08005f05
 8005b98:	08005f05 	.word	0x08005f05
 8005b9c:	08005f0d 	.word	0x08005f0d
 8005ba0:	08005f0d 	.word	0x08005f0d
 8005ba4:	08005f0d 	.word	0x08005f0d
 8005ba8:	08005f0d 	.word	0x08005f0d
 8005bac:	08005f15 	.word	0x08005f15
 8005bb0:	08005f15 	.word	0x08005f15
 8005bb4:	08005f15 	.word	0x08005f15
 8005bb8:	08005f15 	.word	0x08005f15
 8005bbc:	08005f1d 	.word	0x08005f1d
 8005bc0:	08005f1d 	.word	0x08005f1d
 8005bc4:	08005f1d 	.word	0x08005f1d
 8005bc8:	08005f1d 	.word	0x08005f1d
 8005bcc:	08005f25 	.word	0x08005f25
 8005bd0:	08005f25 	.word	0x08005f25
 8005bd4:	08005f25 	.word	0x08005f25
 8005bd8:	08005f25 	.word	0x08005f25
 8005bdc:	08005f2d 	.word	0x08005f2d
 8005be0:	08005f2d 	.word	0x08005f2d
 8005be4:	08005f2d 	.word	0x08005f2d
 8005be8:	08005f2d 	.word	0x08005f2d
 8005bec:	08005f35 	.word	0x08005f35
 8005bf0:	08005f35 	.word	0x08005f35
 8005bf4:	08005f35 	.word	0x08005f35
 8005bf8:	08005f35 	.word	0x08005f35
 8005bfc:	08005f3d 	.word	0x08005f3d
 8005c00:	08005f3d 	.word	0x08005f3d
 8005c04:	08005f3d 	.word	0x08005f3d
 8005c08:	08005f3d 	.word	0x08005f3d
 8005c0c:	08005f45 	.word	0x08005f45
 8005c10:	08005f45 	.word	0x08005f45
 8005c14:	08005f45 	.word	0x08005f45
 8005c18:	08005f45 	.word	0x08005f45
 8005c1c:	08005f4d 	.word	0x08005f4d
 8005c20:	08005f4d 	.word	0x08005f4d
 8005c24:	08005f4d 	.word	0x08005f4d
 8005c28:	08005f4d 	.word	0x08005f4d
 8005c2c:	08005f55 	.word	0x08005f55
 8005c30:	08005f55 	.word	0x08005f55
 8005c34:	08005f55 	.word	0x08005f55
 8005c38:	08005f55 	.word	0x08005f55
 8005c3c:	08005f5d 	.word	0x08005f5d
 8005c40:	08005f5d 	.word	0x08005f5d
 8005c44:	08005f5d 	.word	0x08005f5d
 8005c48:	08005f5d 	.word	0x08005f5d
 8005c4c:	08005f65 	.word	0x08005f65
 8005c50:	08005f65 	.word	0x08005f65
 8005c54:	08005f65 	.word	0x08005f65
 8005c58:	08005f65 	.word	0x08005f65
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f7fe ff0d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c62:	e184      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8005c64:	2001      	movs	r0, #1
 8005c66:	f7fe ff09 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c6a:	e180      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8005c6c:	2002      	movs	r0, #2
 8005c6e:	f7fe ff05 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c72:	e17c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8005c74:	2003      	movs	r0, #3
 8005c76:	f7fe ff01 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c7a:	e178      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8005c7c:	2004      	movs	r0, #4
 8005c7e:	f7fe fefd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c82:	e174      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8005c84:	2005      	movs	r0, #5
 8005c86:	f7fe fef9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c8a:	e170      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8005c8c:	2006      	movs	r0, #6
 8005c8e:	f7fe fef5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c92:	e16c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8005c94:	2007      	movs	r0, #7
 8005c96:	f7fe fef1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005c9a:	e168      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8005c9c:	2008      	movs	r0, #8
 8005c9e:	f7fe feed 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ca2:	e164      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8005ca4:	2009      	movs	r0, #9
 8005ca6:	f7fe fee9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005caa:	e160      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8005cac:	200a      	movs	r0, #10
 8005cae:	f7fe fee5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cb2:	e15c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8005cb4:	200b      	movs	r0, #11
 8005cb6:	f7fe fee1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cba:	e158      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8005cbc:	200c      	movs	r0, #12
 8005cbe:	f7fe fedd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cc2:	e154      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8005cc4:	200d      	movs	r0, #13
 8005cc6:	f7fe fed9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cca:	e150      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8005ccc:	200e      	movs	r0, #14
 8005cce:	f7fe fed5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cd2:	e14c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8005cd4:	200f      	movs	r0, #15
 8005cd6:	f7fe fed1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cda:	e148      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8005cdc:	2010      	movs	r0, #16
 8005cde:	f7fe fecd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ce2:	e144      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8005ce4:	2011      	movs	r0, #17
 8005ce6:	f7fe fec9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cea:	e140      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8005cec:	2012      	movs	r0, #18
 8005cee:	f7fe fec5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cf2:	e13c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8005cf4:	2013      	movs	r0, #19
 8005cf6:	f7fe fec1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005cfa:	e138      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8005cfc:	2014      	movs	r0, #20
 8005cfe:	f7fe febd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d02:	e134      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8005d04:	2015      	movs	r0, #21
 8005d06:	f7fe feb9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d0a:	e130      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8005d0c:	2016      	movs	r0, #22
 8005d0e:	f7fe feb5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d12:	e12c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8005d14:	2017      	movs	r0, #23
 8005d16:	f7fe feb1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d1a:	e128      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8005d1c:	2018      	movs	r0, #24
 8005d1e:	f7fe fead 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d22:	e124      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 8005d24:	2019      	movs	r0, #25
 8005d26:	f7fe fea9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d2a:	e120      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8005d2c:	201a      	movs	r0, #26
 8005d2e:	f7fe fea5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d32:	e11c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 8005d34:	201b      	movs	r0, #27
 8005d36:	f7fe fea1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d3a:	e118      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8005d3c:	201c      	movs	r0, #28
 8005d3e:	f7fe fe9d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d42:	e114      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8005d44:	201d      	movs	r0, #29
 8005d46:	f7fe fe99 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d4a:	e110      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8005d4c:	201e      	movs	r0, #30
 8005d4e:	f7fe fe95 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d52:	e10c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8005d54:	201f      	movs	r0, #31
 8005d56:	f7fe fe91 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d5a:	e108      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8005d5c:	2020      	movs	r0, #32
 8005d5e:	f7fe fe8d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d62:	e104      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8005d64:	2021      	movs	r0, #33	; 0x21
 8005d66:	f7fe fe89 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d6a:	e100      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8005d6c:	2022      	movs	r0, #34	; 0x22
 8005d6e:	f7fe fe85 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d72:	e0fc      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8005d74:	2023      	movs	r0, #35	; 0x23
 8005d76:	f7fe fe81 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d7a:	e0f8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8005d7c:	2024      	movs	r0, #36	; 0x24
 8005d7e:	f7fe fe7d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d82:	e0f4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8005d84:	2025      	movs	r0, #37	; 0x25
 8005d86:	f7fe fe79 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d8a:	e0f0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8005d8c:	2026      	movs	r0, #38	; 0x26
 8005d8e:	f7fe fe75 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d92:	e0ec      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8005d94:	2027      	movs	r0, #39	; 0x27
 8005d96:	f7fe fe71 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005d9a:	e0e8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8005d9c:	2028      	movs	r0, #40	; 0x28
 8005d9e:	f7fe fe6d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005da2:	e0e4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8005da4:	2029      	movs	r0, #41	; 0x29
 8005da6:	f7fe fe69 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005daa:	e0e0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8005dac:	202a      	movs	r0, #42	; 0x2a
 8005dae:	f7fe fe65 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005db2:	e0dc      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8005db4:	202b      	movs	r0, #43	; 0x2b
 8005db6:	f7fe fe61 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dba:	e0d8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8005dbc:	202c      	movs	r0, #44	; 0x2c
 8005dbe:	f7fe fe5d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dc2:	e0d4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8005dc4:	202d      	movs	r0, #45	; 0x2d
 8005dc6:	f7fe fe59 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dca:	e0d0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8005dcc:	202e      	movs	r0, #46	; 0x2e
 8005dce:	f7fe fe55 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dd2:	e0cc      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8005dd4:	202f      	movs	r0, #47	; 0x2f
 8005dd6:	f7fe fe51 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dda:	e0c8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8005ddc:	2030      	movs	r0, #48	; 0x30
 8005dde:	f7fe fe4d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005de2:	e0c4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8005de4:	2031      	movs	r0, #49	; 0x31
 8005de6:	f7fe fe49 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dea:	e0c0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8005dec:	2032      	movs	r0, #50	; 0x32
 8005dee:	f7fe fe45 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005df2:	e0bc      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8005df4:	2033      	movs	r0, #51	; 0x33
 8005df6:	f7fe fe41 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005dfa:	e0b8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8005dfc:	2034      	movs	r0, #52	; 0x34
 8005dfe:	f7fe fe3d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e02:	e0b4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8005e04:	2035      	movs	r0, #53	; 0x35
 8005e06:	f7fe fe39 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e0a:	e0b0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8005e0c:	2036      	movs	r0, #54	; 0x36
 8005e0e:	f7fe fe35 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e12:	e0ac      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8005e14:	2037      	movs	r0, #55	; 0x37
 8005e16:	f7fe fe31 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e1a:	e0a8      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8005e1c:	2038      	movs	r0, #56	; 0x38
 8005e1e:	f7fe fe2d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e22:	e0a4      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8005e24:	2039      	movs	r0, #57	; 0x39
 8005e26:	f7fe fe29 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e2a:	e0a0      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8005e2c:	203a      	movs	r0, #58	; 0x3a
 8005e2e:	f7fe fe25 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e32:	e09c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8005e34:	203b      	movs	r0, #59	; 0x3b
 8005e36:	f7fe fe21 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e3a:	e098      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8005e3c:	203c      	movs	r0, #60	; 0x3c
 8005e3e:	f7fe fe1d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e42:	e094      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8005e44:	203d      	movs	r0, #61	; 0x3d
 8005e46:	f7fe fe19 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e4a:	e090      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8005e4c:	203e      	movs	r0, #62	; 0x3e
 8005e4e:	f7fe fe15 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e52:	e08c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8005e54:	203f      	movs	r0, #63	; 0x3f
 8005e56:	f7fe fe11 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e5a:	e088      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8005e5c:	2040      	movs	r0, #64	; 0x40
 8005e5e:	f7fe fe0d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e62:	e084      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8005e64:	2041      	movs	r0, #65	; 0x41
 8005e66:	f7fe fe09 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e6a:	e080      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8005e6c:	2042      	movs	r0, #66	; 0x42
 8005e6e:	f7fe fe05 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e72:	e07c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8005e74:	2043      	movs	r0, #67	; 0x43
 8005e76:	f7fe fe01 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e7a:	e078      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8005e7c:	2044      	movs	r0, #68	; 0x44
 8005e7e:	f7fe fdfd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e82:	e074      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8005e84:	2045      	movs	r0, #69	; 0x45
 8005e86:	f7fe fdf9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e8a:	e070      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8005e8c:	2046      	movs	r0, #70	; 0x46
 8005e8e:	f7fe fdf5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e92:	e06c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8005e94:	2047      	movs	r0, #71	; 0x47
 8005e96:	f7fe fdf1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005e9a:	e068      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8005e9c:	2048      	movs	r0, #72	; 0x48
 8005e9e:	f7fe fded 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ea2:	e064      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8005ea4:	2049      	movs	r0, #73	; 0x49
 8005ea6:	f7fe fde9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eaa:	e060      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8005eac:	204a      	movs	r0, #74	; 0x4a
 8005eae:	f7fe fde5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eb2:	e05c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8005eb4:	204b      	movs	r0, #75	; 0x4b
 8005eb6:	f7fe fde1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eba:	e058      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8005ebc:	204c      	movs	r0, #76	; 0x4c
 8005ebe:	f7fe fddd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ec2:	e054      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8005ec4:	204d      	movs	r0, #77	; 0x4d
 8005ec6:	f7fe fdd9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eca:	e050      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8005ecc:	204e      	movs	r0, #78	; 0x4e
 8005ece:	f7fe fdd5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ed2:	e04c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8005ed4:	204f      	movs	r0, #79	; 0x4f
 8005ed6:	f7fe fdd1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eda:	e048      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8005edc:	2050      	movs	r0, #80	; 0x50
 8005ede:	f7fe fdcd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ee2:	e044      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8005ee4:	2051      	movs	r0, #81	; 0x51
 8005ee6:	f7fe fdc9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005eea:	e040      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8005eec:	2052      	movs	r0, #82	; 0x52
 8005eee:	f7fe fdc5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005ef2:	e03c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8005ef4:	2053      	movs	r0, #83	; 0x53
 8005ef6:	f7fe fdc1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005efa:	e038      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8005efc:	2054      	movs	r0, #84	; 0x54
 8005efe:	f7fe fdbd 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f02:	e034      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8005f04:	2055      	movs	r0, #85	; 0x55
 8005f06:	f7fe fdb9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f0a:	e030      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8005f0c:	2056      	movs	r0, #86	; 0x56
 8005f0e:	f7fe fdb5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f12:	e02c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8005f14:	2057      	movs	r0, #87	; 0x57
 8005f16:	f7fe fdb1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f1a:	e028      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8005f1c:	2058      	movs	r0, #88	; 0x58
 8005f1e:	f7fe fdad 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f22:	e024      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8005f24:	2059      	movs	r0, #89	; 0x59
 8005f26:	f7fe fda9 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f2a:	e020      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8005f2c:	205a      	movs	r0, #90	; 0x5a
 8005f2e:	f7fe fda5 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f32:	e01c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8005f34:	205b      	movs	r0, #91	; 0x5b
 8005f36:	f7fe fda1 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f3a:	e018      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8005f3c:	205c      	movs	r0, #92	; 0x5c
 8005f3e:	f7fe fd9d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f42:	e014      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8005f44:	205d      	movs	r0, #93	; 0x5d
 8005f46:	f7fe fd99 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f4a:	e010      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8005f4c:	205e      	movs	r0, #94	; 0x5e
 8005f4e:	f7fe fd95 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f52:	e00c      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8005f54:	205f      	movs	r0, #95	; 0x5f
 8005f56:	f7fe fd91 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f5a:	e008      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8005f5c:	2060      	movs	r0, #96	; 0x60
 8005f5e:	f7fe fd8d 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f62:	e004      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8005f64:	2061      	movs	r0, #97	; 0x61
 8005f66:	f7fe fd89 	bl	8004a7c <VPP_ApplyPresetToSync>
			break;
 8005f6a:	e000      	b.n	8005f6e <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8005f6c:	bf00      	nop
	}
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop

08005f78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8005f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f007 ff95 	bl	800dec0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005f96:	4b32      	ldr	r3, [pc, #200]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005f98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8005f9e:	4b30      	ldr	r3, [pc, #192]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005fac:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8005fb2:	4b2b      	ldr	r3, [pc, #172]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005fb8:	4b29      	ldr	r3, [pc, #164]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005fbe:	4b28      	ldr	r3, [pc, #160]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005fc4:	4b26      	ldr	r3, [pc, #152]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005fca:	4b25      	ldr	r3, [pc, #148]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8005fd0:	4b23      	ldr	r3, [pc, #140]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005fd6:	4b22      	ldr	r3, [pc, #136]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005fde:	4b20      	ldr	r3, [pc, #128]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ff8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8005ffa:	4b19      	ldr	r3, [pc, #100]	; (8006060 <MX_ADC1_Init+0xe8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006002:	4817      	ldr	r0, [pc, #92]	; (8006060 <MX_ADC1_Init+0xe8>)
 8006004:	f002 f816 	bl	8008034 <HAL_ADC_Init>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800600e:	f000 ff07 	bl	8006e20 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006012:	2300      	movs	r3, #0
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	4619      	mov	r1, r3
 800601c:	4810      	ldr	r0, [pc, #64]	; (8006060 <MX_ADC1_Init+0xe8>)
 800601e:	f002 fd9f 	bl	8008b60 <HAL_ADCEx_MultiModeConfigChannel>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006028:	f000 fefa 	bl	8006e20 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <MX_ADC1_Init+0xec>)
 800602e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006030:	2306      	movs	r3, #6
 8006032:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006038:	237f      	movs	r3, #127	; 0x7f
 800603a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800603c:	2304      	movs	r3, #4
 800603e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4805      	ldr	r0, [pc, #20]	; (8006060 <MX_ADC1_Init+0xe8>)
 800604a:	f002 f9b3 	bl	80083b4 <HAL_ADC_ConfigChannel>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006054:	f000 fee4 	bl	8006e20 <Error_Handler>
  }

}
 8006058:	bf00      	nop
 800605a:	3730      	adds	r7, #48	; 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200024f4 	.word	0x200024f4
 8006064:	0c900008 	.word	0x0c900008

08006068 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006088:	d14f      	bne.n	800612a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800608a:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	4a29      	ldr	r2, [pc, #164]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 8006090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006096:	4b27      	ldr	r3, [pc, #156]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	4a23      	ldr	r2, [pc, #140]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060ae:	4b21      	ldr	r3, [pc, #132]	; (8006134 <HAL_ADC_MspInit+0xcc>)
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060ba:	2304      	movs	r3, #4
 80060bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060be:	2303      	movs	r3, #3
 80060c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060d0:	f004 f928 	bl	800a324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060d6:	4a19      	ldr	r2, [pc, #100]	; (800613c <HAL_ADC_MspInit+0xd4>)
 80060d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060dc:	2205      	movs	r2, #5
 80060de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 80060fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006100:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 8006104:	2220      	movs	r2, #32
 8006106:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800610e:	480a      	ldr	r0, [pc, #40]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 8006110:	f003 fe3c 	bl	8009d8c <HAL_DMA_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800611a:	f000 fe81 	bl	8006e20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a05      	ldr	r2, [pc, #20]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
 8006124:	4a04      	ldr	r2, [pc, #16]	; (8006138 <HAL_ADC_MspInit+0xd0>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800612a:	bf00      	nop
 800612c:	3728      	adds	r7, #40	; 0x28
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	40021000 	.word	0x40021000
 8006138:	20002560 	.word	0x20002560
 800613c:	40020008 	.word	0x40020008

08006140 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006144:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <MX_COMP1_Init+0x44>)
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <MX_COMP1_Init+0x48>)
 8006148:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <MX_COMP1_Init+0x44>)
 800614c:	2200      	movs	r2, #0
 800614e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <MX_COMP1_Init+0x44>)
 8006152:	4a0e      	ldr	r2, [pc, #56]	; (800618c <MX_COMP1_Init+0x4c>)
 8006154:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <MX_COMP1_Init+0x44>)
 8006158:	2200      	movs	r2, #0
 800615a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <MX_COMP1_Init+0x44>)
 800615e:	2200      	movs	r2, #0
 8006160:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <MX_COMP1_Init+0x44>)
 8006164:	2200      	movs	r2, #0
 8006166:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <MX_COMP1_Init+0x44>)
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800616e:	4805      	ldr	r0, [pc, #20]	; (8006184 <MX_COMP1_Init+0x44>)
 8006170:	f002 ff4a 	bl	8009008 <HAL_COMP_Init>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800617a:	f000 fe51 	bl	8006e20 <Error_Handler>
  }

}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	200025c0 	.word	0x200025c0
 8006188:	40010200 	.word	0x40010200
 800618c:	00800030 	.word	0x00800030

08006190 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 030c 	add.w	r3, r7, #12
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0f      	ldr	r2, [pc, #60]	; (80061ec <HAL_COMP_MspInit+0x5c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d118      	bne.n	80061e4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <HAL_COMP_MspInit+0x60>)
 80061b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b6:	4a0e      	ldr	r2, [pc, #56]	; (80061f0 <HAL_COMP_MspInit+0x60>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <HAL_COMP_MspInit+0x60>)
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80061ca:	2302      	movs	r3, #2
 80061cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061ce:	2303      	movs	r3, #3
 80061d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	4619      	mov	r1, r3
 80061dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061e0:	f004 f8a0 	bl	800a324 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80061e4:	bf00      	nop
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40010200 	.word	0x40010200
 80061f0:	40021000 	.word	0x40021000

080061f4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	; 0x30
 80061f8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80061fa:	463b      	mov	r3, r7
 80061fc:	2230      	movs	r2, #48	; 0x30
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f007 fe5d 	bl	800dec0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <MX_DAC1_Init+0x8c>)
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <MX_DAC1_Init+0x90>)
 800620a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800620c:	481c      	ldr	r0, [pc, #112]	; (8006280 <MX_DAC1_Init+0x8c>)
 800620e:	f003 f99e 	bl	800954e <HAL_DAC_Init>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006218:	f000 fe02 	bl	8006e20 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800621c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006220:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006222:	2300      	movs	r3, #0
 8006224:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006226:	2300      	movs	r3, #0
 8006228:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800622e:	2306      	movs	r3, #6
 8006230:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800623a:	2301      	movs	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006242:	463b      	mov	r3, r7
 8006244:	2200      	movs	r2, #0
 8006246:	4619      	mov	r1, r3
 8006248:	480d      	ldr	r0, [pc, #52]	; (8006280 <MX_DAC1_Init+0x8c>)
 800624a:	f003 fb69 	bl	8009920 <HAL_DAC_ConfigChannel>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006254:	f000 fde4 	bl	8006e20 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800625c:	2301      	movs	r3, #1
 800625e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006260:	463b      	mov	r3, r7
 8006262:	2210      	movs	r2, #16
 8006264:	4619      	mov	r1, r3
 8006266:	4806      	ldr	r0, [pc, #24]	; (8006280 <MX_DAC1_Init+0x8c>)
 8006268:	f003 fb5a 	bl	8009920 <HAL_DAC_ConfigChannel>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006272:	f000 fdd5 	bl	8006e20 <Error_Handler>
  }

}
 8006276:	bf00      	nop
 8006278:	3730      	adds	r7, #48	; 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200025f8 	.word	0x200025f8
 8006284:	50000800 	.word	0x50000800

08006288 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08c      	sub	sp, #48	; 0x30
 800628c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800628e:	463b      	mov	r3, r7
 8006290:	2230      	movs	r2, #48	; 0x30
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f007 fe13 	bl	800dec0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <MX_DAC2_Init+0x6c>)
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <MX_DAC2_Init+0x70>)
 800629e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80062a0:	4814      	ldr	r0, [pc, #80]	; (80062f4 <MX_DAC2_Init+0x6c>)
 80062a2:	f003 f954 	bl	800954e <HAL_DAC_Init>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80062ac:	f000 fdb8 	bl	8006e20 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80062b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062b4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80062c2:	2306      	movs	r3, #6
 80062c4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80062d6:	463b      	mov	r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	4619      	mov	r1, r3
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <MX_DAC2_Init+0x6c>)
 80062de:	f003 fb1f 	bl	8009920 <HAL_DAC_ConfigChannel>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80062e8:	f000 fd9a 	bl	8006e20 <Error_Handler>
  }

}
 80062ec:	bf00      	nop
 80062ee:	3730      	adds	r7, #48	; 0x30
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	200025e4 	.word	0x200025e4
 80062f8:	50000c00 	.word	0x50000c00

080062fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	; 0x30
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006304:	f107 031c 	add.w	r3, r7, #28
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a56      	ldr	r2, [pc, #344]	; (8006474 <HAL_DAC_MspInit+0x178>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d150      	bne.n	80063c0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800631e:	4b56      	ldr	r3, [pc, #344]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	4a55      	ldr	r2, [pc, #340]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800632a:	4b53      	ldr	r3, [pc, #332]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 800632c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006336:	4b50      	ldr	r3, [pc, #320]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	4a4f      	ldr	r2, [pc, #316]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006342:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800634e:	2330      	movs	r3, #48	; 0x30
 8006350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006352:	2303      	movs	r3, #3
 8006354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635a:	f107 031c 	add.w	r3, r7, #28
 800635e:	4619      	mov	r1, r3
 8006360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006364:	f003 ffde 	bl	800a324 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006368:	4b44      	ldr	r3, [pc, #272]	; (800647c <HAL_DAC_MspInit+0x180>)
 800636a:	4a45      	ldr	r2, [pc, #276]	; (8006480 <HAL_DAC_MspInit+0x184>)
 800636c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006370:	2206      	movs	r2, #6
 8006372:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006374:	4b41      	ldr	r3, [pc, #260]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006376:	2210      	movs	r2, #16
 8006378:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800637a:	4b40      	ldr	r3, [pc, #256]	; (800647c <HAL_DAC_MspInit+0x180>)
 800637c:	2200      	movs	r2, #0
 800637e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006380:	4b3e      	ldr	r3, [pc, #248]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006382:	2280      	movs	r2, #128	; 0x80
 8006384:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800638e:	4b3b      	ldr	r3, [pc, #236]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006394:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <HAL_DAC_MspInit+0x180>)
 8006398:	2220      	movs	r2, #32
 800639a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800639c:	4b37      	ldr	r3, [pc, #220]	; (800647c <HAL_DAC_MspInit+0x180>)
 800639e:	2200      	movs	r2, #0
 80063a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80063a2:	4836      	ldr	r0, [pc, #216]	; (800647c <HAL_DAC_MspInit+0x180>)
 80063a4:	f003 fcf2 	bl	8009d8c <HAL_DMA_Init>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80063ae:	f000 fd37 	bl	8006e20 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a31      	ldr	r2, [pc, #196]	; (800647c <HAL_DAC_MspInit+0x180>)
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	4a30      	ldr	r2, [pc, #192]	; (800647c <HAL_DAC_MspInit+0x180>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80063be:	e054      	b.n	800646a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <HAL_DAC_MspInit+0x188>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d14f      	bne.n	800646a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80063ca:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063d6:	4b28      	ldr	r3, [pc, #160]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e2:	4b25      	ldr	r3, [pc, #148]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e6:	4a24      	ldr	r2, [pc, #144]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ee:	4b22      	ldr	r3, [pc, #136]	; (8006478 <HAL_DAC_MspInit+0x17c>)
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80063fa:	2340      	movs	r3, #64	; 0x40
 80063fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063fe:	2303      	movs	r3, #3
 8006400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006406:	f107 031c 	add.w	r3, r7, #28
 800640a:	4619      	mov	r1, r3
 800640c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006410:	f003 ff88 	bl	800a324 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006414:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006416:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_DAC_MspInit+0x190>)
 8006418:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 800641c:	2229      	movs	r2, #41	; 0x29
 800641e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006422:	2210      	movs	r2, #16
 8006424:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006428:	2200      	movs	r2, #0
 800642a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800642c:	4b16      	ldr	r3, [pc, #88]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006438:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 800643c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006440:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006444:	2220      	movs	r2, #32
 8006446:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 800644a:	2200      	movs	r2, #0
 800644c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800644e:	480e      	ldr	r0, [pc, #56]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006450:	f003 fc9c 	bl	8009d8c <HAL_DMA_Init>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800645a:	f000 fce1 	bl	8006e20 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a09      	ldr	r2, [pc, #36]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	4a08      	ldr	r2, [pc, #32]	; (8006488 <HAL_DAC_MspInit+0x18c>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6293      	str	r3, [r2, #40]	; 0x28
}
 800646a:	bf00      	nop
 800646c:	3730      	adds	r7, #48	; 0x30
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	50000800 	.word	0x50000800
 8006478:	40021000 	.word	0x40021000
 800647c:	2000260c 	.word	0x2000260c
 8006480:	4002001c 	.word	0x4002001c
 8006484:	50000c00 	.word	0x50000c00
 8006488:	2000266c 	.word	0x2000266c
 800648c:	40020030 	.word	0x40020030

08006490 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <MX_DMA_Init+0x70>)
 8006498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649a:	4a19      	ldr	r2, [pc, #100]	; (8006500 <MX_DMA_Init+0x70>)
 800649c:	f043 0304 	orr.w	r3, r3, #4
 80064a0:	6493      	str	r3, [r2, #72]	; 0x48
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <MX_DMA_Init+0x70>)
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <MX_DMA_Init+0x70>)
 80064b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <MX_DMA_Init+0x70>)
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6493      	str	r3, [r2, #72]	; 0x48
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <MX_DMA_Init+0x70>)
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80064c6:	2200      	movs	r2, #0
 80064c8:	2101      	movs	r1, #1
 80064ca:	200b      	movs	r0, #11
 80064cc:	f003 f80b 	bl	80094e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80064d0:	200b      	movs	r0, #11
 80064d2:	f003 f822 	bl	800951a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80064d6:	2200      	movs	r2, #0
 80064d8:	2100      	movs	r1, #0
 80064da:	200c      	movs	r0, #12
 80064dc:	f003 f803 	bl	80094e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80064e0:	200c      	movs	r0, #12
 80064e2:	f003 f81a 	bl	800951a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80064e6:	2200      	movs	r2, #0
 80064e8:	2100      	movs	r1, #0
 80064ea:	200d      	movs	r0, #13
 80064ec:	f002 fffb 	bl	80094e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80064f0:	200d      	movs	r0, #13
 80064f2:	f003 f812 	bl	800951a <HAL_NVIC_EnableIRQ>

}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000

08006504 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <update_dc_bias_sweep+0x88>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <update_dc_bias_sweep+0x1a>
 8006510:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <update_dc_bias_sweep+0x8c>)
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <update_dc_bias_sweep+0x8c>)
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e005      	b.n	800652a <update_dc_bias_sweep+0x26>
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <update_dc_bias_sweep+0x8c>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <update_dc_bias_sweep+0x8c>)
 8006528:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <update_dc_bias_sweep+0x8c>)
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8006532:	4b18      	ldr	r3, [pc, #96]	; (8006594 <update_dc_bias_sweep+0x90>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <update_dc_bias_sweep+0x3e>
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <update_dc_bias_sweep+0x90>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e002      	b.n	8006548 <update_dc_bias_sweep+0x44>
 8006542:	4b14      	ldr	r3, [pc, #80]	; (8006594 <update_dc_bias_sweep+0x90>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <update_dc_bias_sweep+0x8c>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <update_dc_bias_sweep+0x52>
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <update_dc_bias_sweep+0x88>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <update_dc_bias_sweep+0x8c>)
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655e:	d302      	bcc.n	8006566 <update_dc_bias_sweep+0x62>
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <update_dc_bias_sweep+0x88>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <update_dc_bias_sweep+0x90>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	2108      	movs	r1, #8
 8006570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006574:	f004 f858 	bl	800a628 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <update_dc_bias_sweep+0x8c>)
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	2200      	movs	r2, #0
 800657e:	2110      	movs	r1, #16
 8006580:	4805      	ldr	r0, [pc, #20]	; (8006598 <update_dc_bias_sweep+0x94>)
 8006582:	f003 f971 	bl	8009868 <HAL_DAC_SetValue>
}
 8006586:	bf00      	nop
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000ca0 	.word	0x20000ca0
 8006590:	20001f18 	.word	0x20001f18
 8006594:	20001f1c 	.word	0x20001f1c
 8006598:	200025f8 	.word	0x200025f8

0800659c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <__NVIC_GetPriorityGrouping+0x18>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	f003 0307 	and.w	r3, r3, #7
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	e000ed00 	.word	0xe000ed00

080065b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	db0b      	blt.n	80065e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	f003 021f 	and.w	r2, r3, #31
 80065d0:	4907      	ldr	r1, [pc, #28]	; (80065f0 <__NVIC_EnableIRQ+0x38>)
 80065d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	2001      	movs	r0, #1
 80065da:	fa00 f202 	lsl.w	r2, r0, r2
 80065de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000e100 	.word	0xe000e100

080065f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	db0a      	blt.n	800661e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	490c      	ldr	r1, [pc, #48]	; (8006640 <__NVIC_SetPriority+0x4c>)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	440b      	add	r3, r1
 8006618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800661c:	e00a      	b.n	8006634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	4908      	ldr	r1, [pc, #32]	; (8006644 <__NVIC_SetPriority+0x50>)
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	3b04      	subs	r3, #4
 800662c:	0112      	lsls	r2, r2, #4
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	440b      	add	r3, r1
 8006632:	761a      	strb	r2, [r3, #24]
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	e000e100 	.word	0xe000e100
 8006644:	e000ed00 	.word	0xe000ed00

08006648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006648:	b480      	push	{r7}
 800664a:	b089      	sub	sp, #36	; 0x24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f1c3 0307 	rsb	r3, r3, #7
 8006662:	2b04      	cmp	r3, #4
 8006664:	bf28      	it	cs
 8006666:	2304      	movcs	r3, #4
 8006668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3304      	adds	r3, #4
 800666e:	2b06      	cmp	r3, #6
 8006670:	d902      	bls.n	8006678 <NVIC_EncodePriority+0x30>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3b03      	subs	r3, #3
 8006676:	e000      	b.n	800667a <NVIC_EncodePriority+0x32>
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800667c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	401a      	ands	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	43d9      	mvns	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a0:	4313      	orrs	r3, r2
         );
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3724      	adds	r7, #36	; 0x24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80066ba:	4a14      	ldr	r2, [pc, #80]	; (800670c <LL_SYSCFG_SetEXTISource+0x5c>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	3302      	adds	r3, #2
 80066c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	43db      	mvns	r3, r3
 80066ce:	ea02 0103 	and.w	r1, r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	409a      	lsls	r2, r3
 80066f0:	4806      	ldr	r0, [pc, #24]	; (800670c <LL_SYSCFG_SetEXTISource+0x5c>)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	430a      	orrs	r2, r1
 80066fa:	3302      	adds	r3, #2
 80066fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40010000 	.word	0x40010000

08006710 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	; 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	fa93 f3a3 	rbit	r3, r3
 800672a:	613b      	str	r3, [r7, #16]
  return result;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	fab3 f383 	clz	r3, r3
 8006732:	b2db      	uxtb	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	2103      	movs	r1, #3
 8006738:	fa01 f303 	lsl.w	r3, r1, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	401a      	ands	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	fa93 f3a3 	rbit	r3, r3
 800674a:	61bb      	str	r3, [r7, #24]
  return result;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	fab3 f383 	clz	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	601a      	str	r2, [r3, #0]
}
 8006762:	bf00      	nop
 8006764:	3724      	adds	r7, #36	; 0x24
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800676e:	b480      	push	{r7}
 8006770:	b089      	sub	sp, #36	; 0x24
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	fa93 f3a3 	rbit	r3, r3
 8006788:	613b      	str	r3, [r7, #16]
  return result;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	fab3 f383 	clz	r3, r3
 8006790:	b2db      	uxtb	r3, r3
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	2103      	movs	r1, #3
 8006796:	fa01 f303 	lsl.w	r3, r1, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	401a      	ands	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	fa93 f3a3 	rbit	r3, r3
 80067a8:	61bb      	str	r3, [r7, #24]
  return result;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	fab3 f383 	clz	r3, r3
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	60da      	str	r2, [r3, #12]
}
 80067c0:	bf00      	nop
 80067c2:	3724      	adds	r7, #36	; 0x24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80067f0:	4b08      	ldr	r3, [pc, #32]	; (8006814 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f4:	4907      	ldr	r1, [pc, #28]	; (8006814 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80067fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4013      	ands	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006806:	68fb      	ldr	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	40021000 	.word	0x40021000

08006818 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800681e:	f107 031c 	add.w	r3, r7, #28
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	611a      	str	r2, [r3, #16]
 8006838:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800683a:	2004      	movs	r0, #4
 800683c:	f7ff ffd4 	bl	80067e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006840:	2020      	movs	r0, #32
 8006842:	f7ff ffd1 	bl	80067e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006846:	2001      	movs	r0, #1
 8006848:	f7ff ffce 	bl	80067e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800684c:	2002      	movs	r0, #2
 800684e:	f7ff ffcb 	bl	80067e8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006852:	2108      	movs	r1, #8
 8006854:	48d3      	ldr	r0, [pc, #844]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006856:	f7ff ffb9 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800685a:	2108      	movs	r1, #8
 800685c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006860:	f7ff ffb4 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006864:	2110      	movs	r1, #16
 8006866:	48cf      	ldr	r0, [pc, #828]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006868:	f7ff ffb0 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 800686c:	2120      	movs	r1, #32
 800686e:	48cd      	ldr	r0, [pc, #820]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006870:	f7ff ffac 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006874:	2101      	movs	r1, #1
 8006876:	48cc      	ldr	r0, [pc, #816]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006878:	f7ff ffa8 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 800687c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006880:	48c8      	ldr	r0, [pc, #800]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006882:	f7ff ffa3 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800688a:	48c6      	ldr	r0, [pc, #792]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 800688c:	f7ff ff9e 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006890:	2140      	movs	r1, #64	; 0x40
 8006892:	48c5      	ldr	r0, [pc, #788]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006894:	f7ff ff9a 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	48c3      	ldr	r0, [pc, #780]	; (8006ba8 <MX_GPIO_Init+0x390>)
 800689c:	f7ff ff96 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80068a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068a4:	48c0      	ldr	r0, [pc, #768]	; (8006ba8 <MX_GPIO_Init+0x390>)
 80068a6:	f7ff ff91 	bl	80067cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80068aa:	49c0      	ldr	r1, [pc, #768]	; (8006bac <MX_GPIO_Init+0x394>)
 80068ac:	2002      	movs	r0, #2
 80068ae:	f7ff feff 	bl	80066b0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80068b2:	49bf      	ldr	r1, [pc, #764]	; (8006bb0 <MX_GPIO_Init+0x398>)
 80068b4:	2002      	movs	r0, #2
 80068b6:	f7ff fefb 	bl	80066b0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80068ba:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80068be:	2005      	movs	r0, #5
 80068c0:	f7ff fef6 	bl	80066b0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80068c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80068c8:	2005      	movs	r0, #5
 80068ca:	f7ff fef1 	bl	80066b0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80068ce:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80068d2:	2002      	movs	r0, #2
 80068d4:	f7ff feec 	bl	80066b0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80068d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068dc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80068ea:	2302      	movs	r3, #2
 80068ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80068f0:	f107 031c 	add.w	r3, r7, #28
 80068f4:	4618      	mov	r0, r3
 80068f6:	f006 f893 	bl	800ca20 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80068fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800690c:	2302      	movs	r3, #2
 800690e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4618      	mov	r0, r3
 8006918:	f006 f882 	bl	800ca20 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800692c:	2302      	movs	r3, #2
 800692e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006932:	f107 031c 	add.w	r3, r7, #28
 8006936:	4618      	mov	r0, r3
 8006938:	f006 f872 	bl	800ca20 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800693c:	2302      	movs	r3, #2
 800693e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800694c:	2302      	movs	r3, #2
 800694e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006952:	f107 031c 	add.w	r3, r7, #28
 8006956:	4618      	mov	r0, r3
 8006958:	f006 f862 	bl	800ca20 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800695c:	2304      	movs	r3, #4
 800695e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800696c:	2302      	movs	r3, #2
 800696e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006972:	f107 031c 	add.w	r3, r7, #28
 8006976:	4618      	mov	r0, r3
 8006978:	f006 f852 	bl	800ca20 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 800697c:	2201      	movs	r2, #1
 800697e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006982:	4888      	ldr	r0, [pc, #544]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006984:	f7ff fef3 	bl	800676e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006988:	2201      	movs	r2, #1
 800698a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800698e:	4885      	ldr	r0, [pc, #532]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006990:	f7ff feed 	bl	800676e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006994:	2201      	movs	r2, #1
 8006996:	2101      	movs	r1, #1
 8006998:	4886      	ldr	r0, [pc, #536]	; (8006bb4 <MX_GPIO_Init+0x39c>)
 800699a:	f7ff fee8 	bl	800676e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800699e:	2201      	movs	r2, #1
 80069a0:	2102      	movs	r1, #2
 80069a2:	4884      	ldr	r0, [pc, #528]	; (8006bb4 <MX_GPIO_Init+0x39c>)
 80069a4:	f7ff fee3 	bl	800676e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80069a8:	2201      	movs	r2, #1
 80069aa:	2104      	movs	r1, #4
 80069ac:	487d      	ldr	r0, [pc, #500]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 80069ae:	f7ff fede 	bl	800676e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80069b2:	2200      	movs	r2, #0
 80069b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069b8:	487a      	ldr	r0, [pc, #488]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 80069ba:	f7ff fea9 	bl	8006710 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80069be:	2200      	movs	r2, #0
 80069c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069c4:	4877      	ldr	r0, [pc, #476]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 80069c6:	f7ff fea3 	bl	8006710 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80069ca:	2200      	movs	r2, #0
 80069cc:	2101      	movs	r1, #1
 80069ce:	4879      	ldr	r0, [pc, #484]	; (8006bb4 <MX_GPIO_Init+0x39c>)
 80069d0:	f7ff fe9e 	bl	8006710 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80069d4:	2200      	movs	r2, #0
 80069d6:	2102      	movs	r1, #2
 80069d8:	4876      	ldr	r0, [pc, #472]	; (8006bb4 <MX_GPIO_Init+0x39c>)
 80069da:	f7ff fe99 	bl	8006710 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80069de:	2200      	movs	r2, #0
 80069e0:	2104      	movs	r1, #4
 80069e2:	4870      	ldr	r0, [pc, #448]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 80069e4:	f7ff fe94 	bl	8006710 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80069e8:	2308      	movs	r3, #8
 80069ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80069ec:	2301      	movs	r3, #1
 80069ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80069f8:	2302      	movs	r3, #2
 80069fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4868      	ldr	r0, [pc, #416]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006a02:	f006 fa00 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006a06:	2308      	movs	r3, #8
 8006a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a22:	f006 f9f0 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006a26:	2310      	movs	r3, #16
 8006a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4859      	ldr	r0, [pc, #356]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006a40:	f006 f9e1 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006a44:	2320      	movs	r3, #32
 8006a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4851      	ldr	r0, [pc, #324]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006a5e:	f006 f9d2 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006a62:	2301      	movs	r3, #1
 8006a64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a66:	2301      	movs	r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	484b      	ldr	r0, [pc, #300]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006a7c:	f006 f9c3 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006a86:	2301      	movs	r3, #1
 8006a88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4842      	ldr	r0, [pc, #264]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006a9c:	f006 f9b3 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	483a      	ldr	r0, [pc, #232]	; (8006ba4 <MX_GPIO_Init+0x38c>)
 8006abc:	f006 f9a3 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006ad4:	1d3b      	adds	r3, r7, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4833      	ldr	r0, [pc, #204]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006ada:	f006 f994 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006ade:	2380      	movs	r3, #128	; 0x80
 8006ae0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	482c      	ldr	r0, [pc, #176]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006af8:	f006 f985 	bl	800ce06 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006b02:	2301      	movs	r3, #1
 8006b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006b06:	2303      	movs	r3, #3
 8006b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4824      	ldr	r0, [pc, #144]	; (8006ba8 <MX_GPIO_Init+0x390>)
 8006b18:	f006 f975 	bl	800ce06 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b1c:	f7ff fd3e 	bl	800659c <__NVIC_GetPriorityGrouping>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fd8e 	bl	8006648 <NVIC_EncodePriority>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	4619      	mov	r1, r3
 8006b30:	2006      	movs	r0, #6
 8006b32:	f7ff fd5f 	bl	80065f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006b36:	2006      	movs	r0, #6
 8006b38:	f7ff fd3e 	bl	80065b8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b3c:	f7ff fd2e 	bl	800659c <__NVIC_GetPriorityGrouping>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fd7e 	bl	8006648 <NVIC_EncodePriority>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2007      	movs	r0, #7
 8006b52:	f7ff fd4f 	bl	80065f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006b56:	2007      	movs	r0, #7
 8006b58:	f7ff fd2e 	bl	80065b8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b5c:	f7ff fd1e 	bl	800659c <__NVIC_GetPriorityGrouping>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fd6e 	bl	8006648 <NVIC_EncodePriority>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4619      	mov	r1, r3
 8006b70:	2008      	movs	r0, #8
 8006b72:	f7ff fd3f 	bl	80065f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006b76:	2008      	movs	r0, #8
 8006b78:	f7ff fd1e 	bl	80065b8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b7c:	f7ff fd0e 	bl	800659c <__NVIC_GetPriorityGrouping>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fd5e 	bl	8006648 <NVIC_EncodePriority>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4619      	mov	r1, r3
 8006b90:	2028      	movs	r0, #40	; 0x28
 8006b92:	f7ff fd2f 	bl	80065f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006b96:	2028      	movs	r0, #40	; 0x28
 8006b98:	f7ff fd0e 	bl	80065b8 <__NVIC_EnableIRQ>

}
 8006b9c:	bf00      	nop
 8006b9e:	3728      	adds	r7, #40	; 0x28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e009      	b.n	8006bb8 <MX_GPIO_Init+0x3a0>
 8006ba4:	48000800 	.word	0x48000800
 8006ba8:	48000400 	.word	0x48000400
 8006bac:	0f000003 	.word	0x0f000003
 8006bb0:	f0000003 	.word	0xf0000003
 8006bb4:	48001400 	.word	0x48001400
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d013      	beq.n	8006bfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006bdc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006be4:	e000      	b.n	8006be8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006be6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006be8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f9      	beq.n	8006be6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006bf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006bfc:	687b      	ldr	r3, [r7, #4]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
  int i=0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e009      	b.n	8006c34 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	60ba      	str	r2, [r7, #8]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff ffc7 	bl	8006bbc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	3301      	adds	r3, #1
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dbf1      	blt.n	8006c20 <_write+0x16>
  return len;
 8006c3c:	687b      	ldr	r3, [r7, #4]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c4c:	f000 ff9d 	bl	8007b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c50:	f000 f878 	bl	8006d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c54:	f7ff fde0 	bl	8006818 <MX_GPIO_Init>
  MX_DMA_Init();
 8006c58:	f7ff fc1a 	bl	8006490 <MX_DMA_Init>
  MX_DAC1_Init();
 8006c5c:	f7ff faca 	bl	80061f4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8006c60:	f7ff fb12 	bl	8006288 <MX_DAC2_Init>
  MX_ADC1_Init();
 8006c64:	f7ff f988 	bl	8005f78 <MX_ADC1_Init>
  MX_COMP1_Init();
 8006c68:	f7ff fa6a 	bl	8006140 <MX_COMP1_Init>
  MX_TIM2_Init();
 8006c6c:	f000 fc1e 	bl	80074ac <MX_TIM2_Init>
  MX_TIM17_Init();
 8006c70:	f000 fe08 	bl	8007884 <MX_TIM17_Init>
  MX_SPI3_Init();
 8006c74:	f000 f912 	bl	8006e9c <MX_SPI3_Init>
  MX_RNG_Init();
 8006c78:	f000 f902 	bl	8006e80 <MX_RNG_Init>
  MX_TIM1_Init();
 8006c7c:	f000 fba6 	bl	80073cc <MX_TIM1_Init>
  MX_TIM8_Init();
 8006c80:	f000 fd1e 	bl	80076c0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8006c84:	f000 fdd6 	bl	8007834 <MX_TIM16_Init>
  MX_TIM15_Init();
 8006c88:	f000 fd82 	bl	8007790 <MX_TIM15_Init>
  MX_TIM5_Init();
 8006c8c:	f000 fcc8 	bl	8007620 <MX_TIM5_Init>
  MX_TIM3_Init();
 8006c90:	f000 fc76 	bl	8007580 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8006c94:	f7fd f91e 	bl	8003ed4 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8006c98:	f7fd fdec 	bl	8004874 <SM_Init>
  FuncO_Init();
 8006c9c:	f7fd fb0e 	bl	80042bc <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f7fd fbc3 	bl	800442c <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f7fd fc1a 	bl	80044e0 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006cac:	2110      	movs	r1, #16
 8006cae:	481d      	ldr	r0, [pc, #116]	; (8006d24 <main+0xdc>)
 8006cb0:	f002 fc6f 	bl	8009592 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8006cb4:	481c      	ldr	r0, [pc, #112]	; (8006d28 <main+0xe0>)
 8006cb6:	f004 fdb1 	bl	800b81c <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8006cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cbe:	f7fd fa87 	bl	80041d0 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	2108      	movs	r1, #8
 8006cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cca:	f003 fcad 	bl	800a628 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8006cce:	2059      	movs	r0, #89	; 0x59
 8006cd0:	f7fd fea6 	bl	8004a20 <VPP_ApplyPresetToSignal>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim3);
 8006cd4:	4815      	ldr	r0, [pc, #84]	; (8006d2c <main+0xe4>)
 8006cd6:	f004 fdf7 	bl	800b8c8 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ce0:	4813      	ldr	r0, [pc, #76]	; (8006d30 <main+0xe8>)
 8006ce2:	f003 fca1 	bl	800a628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cec:	4810      	ldr	r0, [pc, #64]	; (8006d30 <main+0xe8>)
 8006cee:	f003 fc9b 	bl	800a628 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8006cf2:	4810      	ldr	r0, [pc, #64]	; (8006d34 <main+0xec>)
 8006cf4:	f004 fd92 	bl	800b81c <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <main+0xf0>)
 8006cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <main+0xf0>)
 8006d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8006d08:	f7f9 ff9a 	bl	8000c40 <DM_Init>
  DM_PostInit();
 8006d0c:	f7f9 ffa6 	bl	8000c5c <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 8006d10:	480a      	ldr	r0, [pc, #40]	; (8006d3c <main+0xf4>)
 8006d12:	f004 fdd9 	bl	800b8c8 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8006d16:	480a      	ldr	r0, [pc, #40]	; (8006d40 <main+0xf8>)
 8006d18:	f004 fd80 	bl	800b81c <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8006d1c:	f7fc fb5e 	bl	80033dc <EM_ProcessEvent>
 8006d20:	e7fc      	b.n	8006d1c <main+0xd4>
 8006d22:	bf00      	nop
 8006d24:	200025f8 	.word	0x200025f8
 8006d28:	20002730 	.word	0x20002730
 8006d2c:	20002860 	.word	0x20002860
 8006d30:	48000800 	.word	0x48000800
 8006d34:	200028ac 	.word	0x200028ac
 8006d38:	40001000 	.word	0x40001000
 8006d3c:	2000277c 	.word	0x2000277c
 8006d40:	20002814 	.word	0x20002814

08006d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b0a8      	sub	sp, #160	; 0xa0
 8006d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006d4e:	2238      	movs	r2, #56	; 0x38
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f007 f8b4 	bl	800dec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d68:	463b      	mov	r3, r7
 8006d6a:	2254      	movs	r2, #84	; 0x54
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f007 f8a6 	bl	800dec0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8006d74:	2000      	movs	r0, #0
 8006d76:	f003 fc6f 	bl	800a658 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006d7a:	2322      	movs	r3, #34	; 0x22
 8006d7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d82:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006d94:	2302      	movs	r3, #2
 8006d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8006da0:	232a      	movs	r3, #42	; 0x2a
 8006da2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8006da6:	231e      	movs	r3, #30
 8006da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8006dac:	2304      	movs	r3, #4
 8006dae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006db2:	2302      	movs	r3, #2
 8006db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006db8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f003 fcef 	bl	800a7a0 <HAL_RCC_OscConfig>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8006dc8:	f000 f82a 	bl	8006e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dcc:	230f      	movs	r3, #15
 8006dce:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8006de0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006de4:	2108      	movs	r1, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f003 fff2 	bl	800add0 <HAL_RCC_ClockConfig>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006df2:	f000 f815 	bl	8006e20 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8006df6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006dfa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8006e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e06:	463b      	mov	r3, r7
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f004 f9d1 	bl	800b1b0 <HAL_RCCEx_PeriphCLKConfig>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006e14:	f000 f804 	bl	8006e20 <Error_Handler>
  }
}
 8006e18:	bf00      	nop
 8006e1a:	37a0      	adds	r7, #160	; 0xa0
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f043 0204 	orr.w	r2, r3, #4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <LL_AHB2_GRP1_EnableClock>:
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e58:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e5c:	4907      	ldr	r1, [pc, #28]	; (8006e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40021000 	.word	0x40021000

08006e80 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8006e84:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006e88:	f7ff ffe2 	bl	8006e50 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8006e8c:	4802      	ldr	r0, [pc, #8]	; (8006e98 <MX_RNG_Init+0x18>)
 8006e8e:	f7ff ffce 	bl	8006e2e <LL_RNG_Enable>

}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	50060800 	.word	0x50060800

08006e9c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <MX_SPI3_Init+0x78>)
 8006ea4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006eac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006eae:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006eb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006eba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ebc:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006ec8:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ece:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006eea:	2207      	movs	r2, #7
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006efa:	4805      	ldr	r0, [pc, #20]	; (8006f10 <MX_SPI3_Init+0x74>)
 8006efc:	f004 fba4 	bl	800b648 <HAL_SPI_Init>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006f06:	f7ff ff8b 	bl	8006e20 <Error_Handler>
  }

}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200026cc 	.word	0x200026cc
 8006f14:	40003c00 	.word	0x40003c00

08006f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	609a      	str	r2, [r3, #8]
 8006f2c:	60da      	str	r2, [r3, #12]
 8006f2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <HAL_SPI_MspInit+0x7c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d128      	bne.n	8006f8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006f3a:	4b17      	ldr	r3, [pc, #92]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3e:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f44:	6593      	str	r3, [r2, #88]	; 0x58
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f52:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f56:	4a10      	ldr	r2, [pc, #64]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f5e:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <HAL_SPI_MspInit+0x80>)
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006f6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f70:	2302      	movs	r3, #2
 8006f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f7c:	2306      	movs	r3, #6
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	4619      	mov	r1, r3
 8006f86:	4805      	ldr	r0, [pc, #20]	; (8006f9c <HAL_SPI_MspInit+0x84>)
 8006f88:	f003 f9cc 	bl	800a324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3728      	adds	r7, #40	; 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40003c00 	.word	0x40003c00
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	48000800 	.word	0x48000800

08006fa0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fae:	6093      	str	r3, [r2, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40007000 	.word	0x40007000

08006fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <HAL_MspInit+0x44>)
 8006fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fca:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <HAL_MspInit+0x44>)
 8006fcc:	f043 0301 	orr.w	r3, r3, #1
 8006fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <HAL_MspInit+0x44>)
 8006fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <HAL_MspInit+0x44>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe2:	4a08      	ldr	r2, [pc, #32]	; (8007004 <HAL_MspInit+0x44>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8006fea:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_MspInit+0x44>)
 8006fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8006ff6:	f7ff ffd3 	bl	8006fa0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40021000 	.word	0x40021000

08007008 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4013      	ands	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d101      	bne.n	8007022 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40010400 	.word	0x40010400

08007034 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800703c:	4a04      	ldr	r2, [pc, #16]	; (8007050 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6153      	str	r3, [r2, #20]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010400 	.word	0x40010400

08007054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007062:	b480      	push	{r7}
 8007064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007066:	e7fe      	b.n	8007066 <HardFault_Handler+0x4>

08007068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800706c:	e7fe      	b.n	800706c <MemManage_Handler+0x4>

0800706e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800706e:	b480      	push	{r7}
 8007070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007072:	e7fe      	b.n	8007072 <BusFault_Handler+0x4>

08007074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007078:	e7fe      	b.n	8007078 <UsageFault_Handler+0x4>

0800707a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800707a:	b480      	push	{r7}
 800707c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007096:	b480      	push	{r7}
 8007098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070a8:	f000 fdc2 	bl	8007c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070ac:	bf00      	nop
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80070b4:	2001      	movs	r0, #1
 80070b6:	f7ff ffa7 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 80070c0:	2004      	movs	r0, #4
 80070c2:	f7fc fb71 	bl	80037a8 <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 80070c6:	4807      	ldr	r0, [pc, #28]	; (80070e4 <EXTI0_IRQHandler+0x34>)
 80070c8:	f007 fbba 	bl	800e840 <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80070cc:	2001      	movs	r0, #1
 80070ce:	f7ff ff9b 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80070d8:	2001      	movs	r0, #1
 80070da:	f7ff ffab 	bl	8007034 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80070de:	bf00      	nop
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	080116f0 	.word	0x080116f0

080070e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80070ec:	2002      	movs	r0, #2
 80070ee:	f7ff ff8b 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 80070f8:	2002      	movs	r0, #2
 80070fa:	f7fc fb55 	bl	80037a8 <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 80070fe:	4807      	ldr	r0, [pc, #28]	; (800711c <EXTI1_IRQHandler+0x34>)
 8007100:	f007 fb9e 	bl	800e840 <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007104:	2002      	movs	r0, #2
 8007106:	f7ff ff7f 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007110:	2002      	movs	r0, #2
 8007112:	f7ff ff8f 	bl	8007034 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	08011708 	.word	0x08011708

08007120 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8007124:	2004      	movs	r0, #4
 8007126:	f7ff ff6f 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8007130:	2006      	movs	r0, #6
 8007132:	f7fc fb39 	bl	80037a8 <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8007136:	4807      	ldr	r0, [pc, #28]	; (8007154 <EXTI2_IRQHandler+0x34>)
 8007138:	f007 fb82 	bl	800e840 <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800713c:	2004      	movs	r0, #4
 800713e:	f7ff ff63 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007148:	2004      	movs	r0, #4
 800714a:	f7ff ff73 	bl	8007034 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	08011720 	.word	0x08011720

08007158 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800715c:	4802      	ldr	r0, [pc, #8]	; (8007168 <DMA1_Channel1_IRQHandler+0x10>)
 800715e:	f002 ff91 	bl	800a084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20002560 	.word	0x20002560

0800716c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007170:	4802      	ldr	r0, [pc, #8]	; (800717c <DMA1_Channel2_IRQHandler+0x10>)
 8007172:	f002 ff87 	bl	800a084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	2000260c 	.word	0x2000260c

08007180 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007184:	4802      	ldr	r0, [pc, #8]	; (8007190 <DMA1_Channel3_IRQHandler+0x10>)
 8007186:	f002 ff7d 	bl	800a084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800718a:	bf00      	nop
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2000266c 	.word	0x2000266c

08007194 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8007198:	f7f9 fe86 	bl	8000ea8 <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a8:	d10b      	bne.n	80071c2 <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 80071aa:	2005      	movs	r0, #5
 80071ac:	f7fc fafc 	bl	80037a8 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80071b0:	4809      	ldr	r0, [pc, #36]	; (80071d8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80071b2:	f007 fb45 	bl	800e840 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80071bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071c0:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80071c2:	4806      	ldr	r0, [pc, #24]	; (80071dc <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80071c4:	f004 fc8b 	bl	800bade <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80071c8:	4805      	ldr	r0, [pc, #20]	; (80071e0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80071ca:	f004 fc88 	bl	800bade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80071ce:	bf00      	nop
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	0801173c 	.word	0x0801173c
 80071dc:	200028ac 	.word	0x200028ac
 80071e0:	2000277c 	.word	0x2000277c

080071e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80071e8:	4803      	ldr	r0, [pc, #12]	; (80071f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80071ea:	f004 fc78 	bl	800bade <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80071ee:	4803      	ldr	r0, [pc, #12]	; (80071fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80071f0:	f004 fc75 	bl	800bade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80071f4:	bf00      	nop
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	200028ac 	.word	0x200028ac
 80071fc:	20002944 	.word	0x20002944

08007200 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8007204:	f7ff f97e 	bl	8006504 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007208:	4803      	ldr	r0, [pc, #12]	; (8007218 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800720a:	f004 fc68 	bl	800bade <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800720e:	4803      	ldr	r0, [pc, #12]	; (800721c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8007210:	f004 fc65 	bl	800bade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007214:	bf00      	nop
 8007216:	bd80      	pop	{r7, pc}
 8007218:	200028ac 	.word	0x200028ac
 800721c:	200027c8 	.word	0x200027c8

08007220 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <TIM2_IRQHandler+0x10>)
 8007226:	f004 fc5a 	bl	800bade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200028f8 	.word	0x200028f8

08007234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8007238:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800723c:	f7ff fee4 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8007246:	2001      	movs	r0, #1
 8007248:	f7fc faae 	bl	80037a8 <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 800724c:	4813      	ldr	r0, [pc, #76]	; (800729c <EXTI15_10_IRQHandler+0x68>)
 800724e:	f007 faf7 	bl	800e840 <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8007252:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007256:	f7ff fed7 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8007260:	2003      	movs	r0, #3
 8007262:	f7fc faa1 	bl	80037a8 <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8007266:	480e      	ldr	r0, [pc, #56]	; (80072a0 <EXTI15_10_IRQHandler+0x6c>)
 8007268:	f007 faea 	bl	800e840 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800726c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007270:	f7ff feca 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800727a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800727e:	f7ff fed9 	bl	8007034 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007282:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007286:	f7ff febf 	bl	8007008 <LL_EXTI_IsActiveFlag_0_31>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007290:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007294:	f7ff fece 	bl	8007034 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007298:	bf00      	nop
 800729a:	bd80      	pop	{r7, pc}
 800729c:	08011754 	.word	0x08011754
 80072a0:	0801176c 	.word	0x0801176c

080072a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e00a      	b.n	80072cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80072b6:	f3af 8000 	nop.w
 80072ba:	4601      	mov	r1, r0
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	60ba      	str	r2, [r7, #8]
 80072c2:	b2ca      	uxtb	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	3301      	adds	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dbf0      	blt.n	80072b6 <_read+0x12>
	}

return len;
 80072d4:	687b      	ldr	r3, [r7, #4]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <_close>:
	}
	return len;
}

int _close(int file)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
	return -1;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007306:	605a      	str	r2, [r3, #4]
	return 0;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <_isatty>:

int _isatty(int file)
{
 8007316:	b480      	push	{r7}
 8007318:	b083      	sub	sp, #12
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
	return 1;
 800731e:	2301      	movs	r3, #1
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	return 0;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007350:	4b11      	ldr	r3, [pc, #68]	; (8007398 <_sbrk+0x50>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <_sbrk+0x16>
		heap_end = &end;
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <_sbrk+0x50>)
 800735a:	4a10      	ldr	r2, [pc, #64]	; (800739c <_sbrk+0x54>)
 800735c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800735e:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <_sbrk+0x50>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <_sbrk+0x50>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	466a      	mov	r2, sp
 800736e:	4293      	cmp	r3, r2
 8007370:	d907      	bls.n	8007382 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007372:	f006 fd7b 	bl	800de6c <__errno>
 8007376:	4602      	mov	r2, r0
 8007378:	230c      	movs	r3, #12
 800737a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007380:	e006      	b.n	8007390 <_sbrk+0x48>
	}

	heap_end += incr;
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <_sbrk+0x50>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	4a03      	ldr	r2, [pc, #12]	; (8007398 <_sbrk+0x50>)
 800738c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20001f20 	.word	0x20001f20
 800739c:	20002998 	.word	0x20002998

080073a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <SystemInit+0x28>)
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <SystemInit+0x28>)
 80073ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <SystemInit+0x28>)
 80073b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073ba:	609a      	str	r2, [r3, #8]
#endif
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b09a      	sub	sp, #104	; 0x68
 80073d0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80073d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80073d6:	2224      	movs	r2, #36	; 0x24
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f006 fd70 	bl	800dec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	2234      	movs	r2, #52	; 0x34
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f006 fd64 	bl	800dec0 <memset>

  htim1.Instance = TIM1;
 80073f8:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <MX_TIM1_Init+0xd8>)
 80073fa:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <MX_TIM1_Init+0xdc>)
 80073fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007404:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007406:	2240      	movs	r2, #64	; 0x40
 8007408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800740a:	4b26      	ldr	r3, [pc, #152]	; (80074a4 <MX_TIM1_Init+0xd8>)
 800740c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007410:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007412:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007414:	2200      	movs	r2, #0
 8007416:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007418:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <MX_TIM1_Init+0xd8>)
 800741a:	2200      	movs	r2, #0
 800741c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800741e:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007420:	2200      	movs	r2, #0
 8007422:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007424:	2303      	movs	r3, #3
 8007426:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007428:	2300      	movs	r3, #0
 800742a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800742c:	2301      	movs	r3, #1
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007430:	2300      	movs	r3, #0
 8007432:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007438:	2300      	movs	r3, #0
 800743a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800743c:	2301      	movs	r3, #1
 800743e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007440:	2300      	movs	r3, #0
 8007442:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800744c:	4619      	mov	r1, r3
 800744e:	4815      	ldr	r0, [pc, #84]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007450:	f004 fa9f 	bl	800b992 <HAL_TIM_Encoder_Init>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800745a:	f7ff fce1 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800745e:	2320      	movs	r3, #32
 8007460:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007462:	2300      	movs	r3, #0
 8007464:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007466:	2300      	movs	r3, #0
 8007468:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800746a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800746e:	4619      	mov	r1, r3
 8007470:	480c      	ldr	r0, [pc, #48]	; (80074a4 <MX_TIM1_Init+0xd8>)
 8007472:	f005 f817 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800747c:	f7ff fcd0 	bl	8006e20 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007480:	2300      	movs	r3, #0
 8007482:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007484:	2300      	movs	r3, #0
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007488:	1d3b      	adds	r3, r7, #4
 800748a:	4619      	mov	r1, r3
 800748c:	4805      	ldr	r0, [pc, #20]	; (80074a4 <MX_TIM1_Init+0xd8>)
 800748e:	f005 f89f 	bl	800c5d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007498:	f7ff fcc2 	bl	8006e20 <Error_Handler>
  }

}
 800749c:	bf00      	nop
 800749e:	3768      	adds	r7, #104	; 0x68
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200028ac 	.word	0x200028ac
 80074a8:	40012c00 	.word	0x40012c00

080074ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074b2:	f107 0320 	add.w	r3, r7, #32
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	605a      	str	r2, [r3, #4]
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	60da      	str	r2, [r3, #12]
 80074ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074d0:	463b      	mov	r3, r7
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80074da:	4b28      	ldr	r3, [pc, #160]	; (800757c <MX_TIM2_Init+0xd0>)
 80074dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80074e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80074e2:	4b26      	ldr	r3, [pc, #152]	; (800757c <MX_TIM2_Init+0xd0>)
 80074e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80074e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <MX_TIM2_Init+0xd0>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <MX_TIM2_Init+0xd0>)
 80074f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074f8:	4b20      	ldr	r3, [pc, #128]	; (800757c <MX_TIM2_Init+0xd0>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074fe:	4b1f      	ldr	r3, [pc, #124]	; (800757c <MX_TIM2_Init+0xd0>)
 8007500:	2200      	movs	r2, #0
 8007502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007504:	481d      	ldr	r0, [pc, #116]	; (800757c <MX_TIM2_Init+0xd0>)
 8007506:	f004 f931 	bl	800b76c <HAL_TIM_Base_Init>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007510:	f7ff fc86 	bl	8006e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007518:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800751a:	f107 0320 	add.w	r3, r7, #32
 800751e:	4619      	mov	r1, r3
 8007520:	4816      	ldr	r0, [pc, #88]	; (800757c <MX_TIM2_Init+0xd0>)
 8007522:	f004 fc5b 	bl	800bddc <HAL_TIM_ConfigClockSource>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800752c:	f7ff fc78 	bl	8006e20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8007530:	2305      	movs	r3, #5
 8007532:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007534:	2350      	movs	r3, #80	; 0x50
 8007536:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8007540:	f107 030c 	add.w	r3, r7, #12
 8007544:	4619      	mov	r1, r3
 8007546:	480d      	ldr	r0, [pc, #52]	; (800757c <MX_TIM2_Init+0xd0>)
 8007548:	f004 fd38 	bl	800bfbc <HAL_TIM_SlaveConfigSynchro>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8007552:	f7ff fc65 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007556:	2300      	movs	r3, #0
 8007558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800755a:	2300      	movs	r3, #0
 800755c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800755e:	463b      	mov	r3, r7
 8007560:	4619      	mov	r1, r3
 8007562:	4806      	ldr	r0, [pc, #24]	; (800757c <MX_TIM2_Init+0xd0>)
 8007564:	f004 ff9e 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800756e:	f7ff fc57 	bl	8006e20 <Error_Handler>
  }

}
 8007572:	bf00      	nop
 8007574:	3730      	adds	r7, #48	; 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	200028f8 	.word	0x200028f8

08007580 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007586:	f107 0310 	add.w	r3, r7, #16
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	605a      	str	r2, [r3, #4]
 8007590:	609a      	str	r2, [r3, #8]
 8007592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	605a      	str	r2, [r3, #4]
 800759c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800759e:	4b1e      	ldr	r3, [pc, #120]	; (8007618 <MX_TIM3_Init+0x98>)
 80075a0:	4a1e      	ldr	r2, [pc, #120]	; (800761c <MX_TIM3_Init+0x9c>)
 80075a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 80075a4:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <MX_TIM3_Init+0x98>)
 80075a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <MX_TIM3_Init+0x98>)
 80075ae:	2210      	movs	r2, #16
 80075b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80075b2:	4b19      	ldr	r3, [pc, #100]	; (8007618 <MX_TIM3_Init+0x98>)
 80075b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075ba:	4b17      	ldr	r3, [pc, #92]	; (8007618 <MX_TIM3_Init+0x98>)
 80075bc:	2200      	movs	r2, #0
 80075be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075c0:	4b15      	ldr	r3, [pc, #84]	; (8007618 <MX_TIM3_Init+0x98>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80075c6:	4814      	ldr	r0, [pc, #80]	; (8007618 <MX_TIM3_Init+0x98>)
 80075c8:	f004 f8d0 	bl	800b76c <HAL_TIM_Base_Init>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80075d2:	f7ff fc25 	bl	8006e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80075dc:	f107 0310 	add.w	r3, r7, #16
 80075e0:	4619      	mov	r1, r3
 80075e2:	480d      	ldr	r0, [pc, #52]	; (8007618 <MX_TIM3_Init+0x98>)
 80075e4:	f004 fbfa 	bl	800bddc <HAL_TIM_ConfigClockSource>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80075ee:	f7ff fc17 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4806      	ldr	r0, [pc, #24]	; (8007618 <MX_TIM3_Init+0x98>)
 8007600:	f004 ff50 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800760a:	f7ff fc09 	bl	8006e20 <Error_Handler>
  }

}
 800760e:	bf00      	nop
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20002860 	.word	0x20002860
 800761c:	40000400 	.word	0x40000400

08007620 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	605a      	str	r2, [r3, #4]
 8007630:	609a      	str	r2, [r3, #8]
 8007632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	605a      	str	r2, [r3, #4]
 800763c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800763e:	4b1e      	ldr	r3, [pc, #120]	; (80076b8 <MX_TIM5_Init+0x98>)
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <MX_TIM5_Init+0x9c>)
 8007642:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8007644:	4b1c      	ldr	r3, [pc, #112]	; (80076b8 <MX_TIM5_Init+0x98>)
 8007646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800764a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <MX_TIM5_Init+0x98>)
 800764e:	2200      	movs	r2, #0
 8007650:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <MX_TIM5_Init+0x98>)
 8007654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007658:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <MX_TIM5_Init+0x98>)
 800765c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007660:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <MX_TIM5_Init+0x98>)
 8007664:	2200      	movs	r2, #0
 8007666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007668:	4813      	ldr	r0, [pc, #76]	; (80076b8 <MX_TIM5_Init+0x98>)
 800766a:	f004 f87f 	bl	800b76c <HAL_TIM_Base_Init>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8007674:	f7ff fbd4 	bl	8006e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800767c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800767e:	f107 0310 	add.w	r3, r7, #16
 8007682:	4619      	mov	r1, r3
 8007684:	480c      	ldr	r0, [pc, #48]	; (80076b8 <MX_TIM5_Init+0x98>)
 8007686:	f004 fba9 	bl	800bddc <HAL_TIM_ConfigClockSource>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8007690:	f7ff fbc6 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007694:	2300      	movs	r3, #0
 8007696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800769c:	1d3b      	adds	r3, r7, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4805      	ldr	r0, [pc, #20]	; (80076b8 <MX_TIM5_Init+0x98>)
 80076a2:	f004 feff 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80076ac:	f7ff fbb8 	bl	8006e20 <Error_Handler>
  }

}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20002814 	.word	0x20002814
 80076bc:	40000c00 	.word	0x40000c00

080076c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b094      	sub	sp, #80	; 0x50
 80076c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	605a      	str	r2, [r3, #4]
 80076d0:	609a      	str	r2, [r3, #8]
 80076d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80076e0:	463b      	mov	r3, r7
 80076e2:	2234      	movs	r2, #52	; 0x34
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f006 fbea 	bl	800dec0 <memset>

  htim8.Instance = TIM8;
 80076ec:	4b26      	ldr	r3, [pc, #152]	; (8007788 <MX_TIM8_Init+0xc8>)
 80076ee:	4a27      	ldr	r2, [pc, #156]	; (800778c <MX_TIM8_Init+0xcc>)
 80076f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80076f2:	4b25      	ldr	r3, [pc, #148]	; (8007788 <MX_TIM8_Init+0xc8>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076f8:	4b23      	ldr	r3, [pc, #140]	; (8007788 <MX_TIM8_Init+0xc8>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80076fe:	4b22      	ldr	r3, [pc, #136]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007700:	2201      	movs	r2, #1
 8007702:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007704:	4b20      	ldr	r3, [pc, #128]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007706:	2200      	movs	r2, #0
 8007708:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <MX_TIM8_Init+0xc8>)
 800770c:	2200      	movs	r2, #0
 800770e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007710:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007712:	2200      	movs	r2, #0
 8007714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007716:	481c      	ldr	r0, [pc, #112]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007718:	f004 f828 	bl	800b76c <HAL_TIM_Base_Init>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007722:	f7ff fb7d 	bl	8006e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800772a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800772c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007730:	4619      	mov	r1, r3
 8007732:	4815      	ldr	r0, [pc, #84]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007734:	f004 fb52 	bl	800bddc <HAL_TIM_ConfigClockSource>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800773e:	f7ff fb6f 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007742:	2320      	movs	r3, #32
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007746:	2300      	movs	r3, #0
 8007748:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800774a:	2300      	movs	r3, #0
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800774e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007752:	4619      	mov	r1, r3
 8007754:	480c      	ldr	r0, [pc, #48]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007756:	f004 fea5 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007760:	f7ff fb5e 	bl	8006e20 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007768:	2300      	movs	r3, #0
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800776c:	463b      	mov	r3, r7
 800776e:	4619      	mov	r1, r3
 8007770:	4805      	ldr	r0, [pc, #20]	; (8007788 <MX_TIM8_Init+0xc8>)
 8007772:	f004 ff2d 	bl	800c5d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800777c:	f7ff fb50 	bl	8006e20 <Error_Handler>
  }

}
 8007780:	bf00      	nop
 8007782:	3750      	adds	r7, #80	; 0x50
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20002730 	.word	0x20002730
 800778c:	40013400 	.word	0x40013400

08007790 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007796:	f107 0310 	add.w	r3, r7, #16
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077a4:	1d3b      	adds	r3, r7, #4
 80077a6:	2200      	movs	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <MX_TIM15_Init+0x9c>)
 80077b0:	4a1f      	ldr	r2, [pc, #124]	; (8007830 <MX_TIM15_Init+0xa0>)
 80077b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <MX_TIM15_Init+0x9c>)
 80077b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <MX_TIM15_Init+0x9c>)
 80077be:	2200      	movs	r2, #0
 80077c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <MX_TIM15_Init+0x9c>)
 80077c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <MX_TIM15_Init+0x9c>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80077d0:	4b16      	ldr	r3, [pc, #88]	; (800782c <MX_TIM15_Init+0x9c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <MX_TIM15_Init+0x9c>)
 80077d8:	2200      	movs	r2, #0
 80077da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80077dc:	4813      	ldr	r0, [pc, #76]	; (800782c <MX_TIM15_Init+0x9c>)
 80077de:	f003 ffc5 	bl	800b76c <HAL_TIM_Base_Init>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80077e8:	f7ff fb1a 	bl	8006e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80077f2:	f107 0310 	add.w	r3, r7, #16
 80077f6:	4619      	mov	r1, r3
 80077f8:	480c      	ldr	r0, [pc, #48]	; (800782c <MX_TIM15_Init+0x9c>)
 80077fa:	f004 faef 	bl	800bddc <HAL_TIM_ConfigClockSource>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007804:	f7ff fb0c 	bl	8006e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4805      	ldr	r0, [pc, #20]	; (800782c <MX_TIM15_Init+0x9c>)
 8007816:	f004 fe45 	bl	800c4a4 <HAL_TIMEx_MasterConfigSynchronization>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007820:	f7ff fafe 	bl	8006e20 <Error_Handler>
  }

}
 8007824:	bf00      	nop
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	2000277c 	.word	0x2000277c
 8007830:	40014000 	.word	0x40014000

08007834 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <MX_TIM16_Init+0x48>)
 800783a:	4a11      	ldr	r2, [pc, #68]	; (8007880 <MX_TIM16_Init+0x4c>)
 800783c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <MX_TIM16_Init+0x48>)
 8007840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007844:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <MX_TIM16_Init+0x48>)
 8007848:	2200      	movs	r2, #0
 800784a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <MX_TIM16_Init+0x48>)
 800784e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007852:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007854:	4b09      	ldr	r3, [pc, #36]	; (800787c <MX_TIM16_Init+0x48>)
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800785a:	4b08      	ldr	r3, [pc, #32]	; (800787c <MX_TIM16_Init+0x48>)
 800785c:	2200      	movs	r2, #0
 800785e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <MX_TIM16_Init+0x48>)
 8007862:	2200      	movs	r2, #0
 8007864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <MX_TIM16_Init+0x48>)
 8007868:	f003 ff80 	bl	800b76c <HAL_TIM_Base_Init>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007872:	f7ff fad5 	bl	8006e20 <Error_Handler>
  }

}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20002944 	.word	0x20002944
 8007880:	40014400 	.word	0x40014400

08007884 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <MX_TIM17_Init+0x44>)
 800788a:	4a10      	ldr	r2, [pc, #64]	; (80078cc <MX_TIM17_Init+0x48>)
 800788c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <MX_TIM17_Init+0x44>)
 8007890:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007894:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <MX_TIM17_Init+0x44>)
 8007898:	2200      	movs	r2, #0
 800789a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <MX_TIM17_Init+0x44>)
 800789e:	2240      	movs	r2, #64	; 0x40
 80078a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <MX_TIM17_Init+0x44>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80078a8:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <MX_TIM17_Init+0x44>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <MX_TIM17_Init+0x44>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80078b4:	4804      	ldr	r0, [pc, #16]	; (80078c8 <MX_TIM17_Init+0x44>)
 80078b6:	f003 ff59 	bl	800b76c <HAL_TIM_Base_Init>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80078c0:	f7ff faae 	bl	8006e20 <Error_Handler>
  }

}
 80078c4:	bf00      	nop
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	200027c8 	.word	0x200027c8
 80078cc:	40014800 	.word	0x40014800

080078d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a23      	ldr	r2, [pc, #140]	; (800797c <HAL_TIM_Encoder_MspInit+0xac>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d13f      	bne.n	8007972 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80078f2:	4b23      	ldr	r3, [pc, #140]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 80078f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f6:	4a22      	ldr	r2, [pc, #136]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 80078f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078fc:	6613      	str	r3, [r2, #96]	; 0x60
 80078fe:	4b20      	ldr	r3, [pc, #128]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 8007900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 800790c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790e:	4a1c      	ldr	r2, [pc, #112]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 8007910:	f043 0304 	orr.w	r3, r3, #4
 8007914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <HAL_TIM_Encoder_MspInit+0xb0>)
 8007918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007922:	2303      	movs	r3, #3
 8007924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007926:	2302      	movs	r3, #2
 8007928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800792e:	2300      	movs	r3, #0
 8007930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007932:	2302      	movs	r3, #2
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007936:	f107 0314 	add.w	r3, r7, #20
 800793a:	4619      	mov	r1, r3
 800793c:	4811      	ldr	r0, [pc, #68]	; (8007984 <HAL_TIM_Encoder_MspInit+0xb4>)
 800793e:	f002 fcf1 	bl	800a324 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007942:	2200      	movs	r2, #0
 8007944:	2100      	movs	r1, #0
 8007946:	2018      	movs	r0, #24
 8007948:	f001 fdcd 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800794c:	2018      	movs	r0, #24
 800794e:	f001 fde4 	bl	800951a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8007952:	2200      	movs	r2, #0
 8007954:	2101      	movs	r1, #1
 8007956:	2019      	movs	r0, #25
 8007958:	f001 fdc5 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800795c:	2019      	movs	r0, #25
 800795e:	f001 fddc 	bl	800951a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007962:	2200      	movs	r2, #0
 8007964:	2101      	movs	r1, #1
 8007966:	201a      	movs	r0, #26
 8007968:	f001 fdbd 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800796c:	201a      	movs	r0, #26
 800796e:	f001 fdd4 	bl	800951a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007972:	bf00      	nop
 8007974:	3728      	adds	r7, #40	; 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40021000 	.word	0x40021000
 8007984:	48000800 	.word	0x48000800

08007988 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b090      	sub	sp, #64	; 0x40
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d131      	bne.n	8007a0e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079aa:	4b5c      	ldr	r3, [pc, #368]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ae:	4a5b      	ldr	r2, [pc, #364]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	6593      	str	r3, [r2, #88]	; 0x58
 80079b6:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c2:	4b56      	ldr	r3, [pc, #344]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	4a55      	ldr	r2, [pc, #340]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079ce:	4b53      	ldr	r3, [pc, #332]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 80079d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80079da:	2301      	movs	r3, #1
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079de:	2302      	movs	r3, #2
 80079e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e6:	2300      	movs	r3, #0
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80079ea:	2301      	movs	r3, #1
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079f2:	4619      	mov	r1, r3
 80079f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079f8:	f002 fc94 	bl	800a324 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80079fc:	2200      	movs	r2, #0
 80079fe:	2101      	movs	r1, #1
 8007a00:	201c      	movs	r0, #28
 8007a02:	f001 fd70 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007a06:	201c      	movs	r0, #28
 8007a08:	f001 fd87 	bl	800951a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8007a0c:	e082      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM3)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a43      	ldr	r2, [pc, #268]	; (8007b20 <HAL_TIM_Base_MspInit+0x198>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d10c      	bne.n	8007a32 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a18:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	4a3f      	ldr	r2, [pc, #252]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a1e:	f043 0302 	orr.w	r3, r3, #2
 8007a22:	6593      	str	r3, [r2, #88]	; 0x58
 8007a24:	4b3d      	ldr	r3, [pc, #244]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
}
 8007a30:	e070      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM5)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a3b      	ldr	r2, [pc, #236]	; (8007b24 <HAL_TIM_Base_MspInit+0x19c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d10c      	bne.n	8007a56 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007a3c:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	4a36      	ldr	r2, [pc, #216]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a42:	f043 0308 	orr.w	r3, r3, #8
 8007a46:	6593      	str	r3, [r2, #88]	; 0x58
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	69fb      	ldr	r3, [r7, #28]
}
 8007a54:	e05e      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM8)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a33      	ldr	r2, [pc, #204]	; (8007b28 <HAL_TIM_Base_MspInit+0x1a0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10c      	bne.n	8007a7a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007a60:	4b2e      	ldr	r3, [pc, #184]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a64:	4a2d      	ldr	r2, [pc, #180]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8007a6c:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	69bb      	ldr	r3, [r7, #24]
}
 8007a78:	e04c      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM15)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <HAL_TIM_Base_MspInit+0x1a4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d114      	bne.n	8007aae <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007a84:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a88:	4a24      	ldr	r2, [pc, #144]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8007a90:	4b22      	ldr	r3, [pc, #136]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	2018      	movs	r0, #24
 8007aa2:	f001 fd20 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007aa6:	2018      	movs	r0, #24
 8007aa8:	f001 fd37 	bl	800951a <HAL_NVIC_EnableIRQ>
}
 8007aac:	e032      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM16)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <HAL_TIM_Base_MspInit+0x1a8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d114      	bne.n	8007ae2 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007ab8:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abc:	4a17      	ldr	r2, [pc, #92]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac2:	6613      	str	r3, [r2, #96]	; 0x60
 8007ac4:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	2019      	movs	r0, #25
 8007ad6:	f001 fd06 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007ada:	2019      	movs	r0, #25
 8007adc:	f001 fd1d 	bl	800951a <HAL_NVIC_EnableIRQ>
}
 8007ae0:	e018      	b.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM17)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <HAL_TIM_Base_MspInit+0x1ac>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d113      	bne.n	8007b14 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007af6:	6613      	str	r3, [r2, #96]	; 0x60
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <HAL_TIM_Base_MspInit+0x194>)
 8007afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007b04:	2200      	movs	r2, #0
 8007b06:	2101      	movs	r1, #1
 8007b08:	201a      	movs	r0, #26
 8007b0a:	f001 fcec 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007b0e:	201a      	movs	r0, #26
 8007b10:	f001 fd03 	bl	800951a <HAL_NVIC_EnableIRQ>
}
 8007b14:	bf00      	nop
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40013400 	.word	0x40013400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007b38:	480d      	ldr	r0, [pc, #52]	; (8007b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007b3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007b3c:	480d      	ldr	r0, [pc, #52]	; (8007b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8007b3e:	490e      	ldr	r1, [pc, #56]	; (8007b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007b40:	4a0e      	ldr	r2, [pc, #56]	; (8007b7c <LoopForever+0xe>)
  movs r3, #0
 8007b42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007b44:	e002      	b.n	8007b4c <LoopCopyDataInit>

08007b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007b4a:	3304      	adds	r3, #4

08007b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007b50:	d3f9      	bcc.n	8007b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007b52:	4a0b      	ldr	r2, [pc, #44]	; (8007b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007b54:	4c0b      	ldr	r4, [pc, #44]	; (8007b84 <LoopForever+0x16>)
  movs r3, #0
 8007b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007b58:	e001      	b.n	8007b5e <LoopFillZerobss>

08007b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b5c:	3204      	adds	r2, #4

08007b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b60:	d3fb      	bcc.n	8007b5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007b62:	f7ff fc1d 	bl	80073a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b66:	f006 f987 	bl	800de78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b6a:	f7ff f86d 	bl	8006c48 <main>

08007b6e <LoopForever>:

LoopForever:
    b LoopForever
 8007b6e:	e7fe      	b.n	8007b6e <LoopForever>
  ldr   r0, =_estack
 8007b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b78:	20001ec8 	.word	0x20001ec8
  ldr r2, =_sidata
 8007b7c:	08011ca0 	.word	0x08011ca0
  ldr r2, =_sbss
 8007b80:	20001ec8 	.word	0x20001ec8
  ldr r4, =_ebss
 8007b84:	20002998 	.word	0x20002998

08007b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b88:	e7fe      	b.n	8007b88 <ADC1_2_IRQHandler>

08007b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b94:	2003      	movs	r0, #3
 8007b96:	f001 fc9b 	bl	80094d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f000 f80e 	bl	8007bbc <HAL_InitTick>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	71fb      	strb	r3, [r7, #7]
 8007baa:	e001      	b.n	8007bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007bac:	f7ff fa08 	bl	8006fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007bb0:	79fb      	ldrb	r3, [r7, #7]

}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007bc8:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <HAL_InitTick+0x68>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d022      	beq.n	8007c16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <HAL_InitTick+0x6c>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <HAL_InitTick+0x68>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 fca6 	bl	8009536 <HAL_SYSTICK_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10f      	bne.n	8007c10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d809      	bhi.n	8007c0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bfe:	f001 fc72 	bl	80094e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007c02:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <HAL_InitTick+0x70>)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e007      	b.n	8007c1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	e004      	b.n	8007c1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	73fb      	strb	r3, [r7, #15]
 8007c14:	e001      	b.n	8007c1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000cac 	.word	0x20000cac
 8007c28:	20000ca4 	.word	0x20000ca4
 8007c2c:	20000ca8 	.word	0x20000ca8

08007c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <HAL_IncTick+0x1c>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <HAL_IncTick+0x20>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4a03      	ldr	r2, [pc, #12]	; (8007c4c <HAL_IncTick+0x1c>)
 8007c40:	6013      	str	r3, [r2, #0]
}
 8007c42:	bf00      	nop
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	20002990 	.word	0x20002990
 8007c50:	20000cac 	.word	0x20000cac

08007c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  return uwTick;
 8007c58:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <HAL_GetTick+0x14>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20002990 	.word	0x20002990

08007c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c74:	f7ff ffee 	bl	8007c54 <HAL_GetTick>
 8007c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c84:	d004      	beq.n	8007c90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c86:	4b09      	ldr	r3, [pc, #36]	; (8007cac <HAL_Delay+0x40>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c90:	bf00      	nop
 8007c92:	f7ff ffdf 	bl	8007c54 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d8f7      	bhi.n	8007c92 <HAL_Delay+0x26>
  {
  }
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000cac 	.word	0x20000cac

08007cb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	609a      	str	r2, [r3, #8]
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007d18:	b490      	push	{r4, r7}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3360      	adds	r3, #96	; 0x60
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007d34:	6822      	ldr	r2, [r4, #0]
 8007d36:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <LL_ADC_SetOffset+0x40>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d4a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc90      	pop	{r4, r7}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	03fff000 	.word	0x03fff000

08007d5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007d5c:	b490      	push	{r4, r7}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3360      	adds	r3, #96	; 0x60
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc90      	pop	{r4, r7}
 8007d82:	4770      	bx	lr

08007d84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007d84:	b490      	push	{r4, r7}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3360      	adds	r3, #96	; 0x60
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc90      	pop	{r4, r7}
 8007db2:	4770      	bx	lr

08007db4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007db4:	b490      	push	{r4, r7}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3360      	adds	r3, #96	; 0x60
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc90      	pop	{r4, r7}
 8007de2:	4770      	bx	lr

08007de4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007de4:	b490      	push	{r4, r7}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3360      	adds	r3, #96	; 0x60
 8007df4:	461a      	mov	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc90      	pop	{r4, r7}
 8007e12:	4770      	bx	lr

08007e14 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	615a      	str	r2, [r3, #20]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007e3a:	b490      	push	{r4, r7}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3330      	adds	r3, #48	; 0x30
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	f003 030c 	and.w	r3, r3, #12
 8007e56:	4413      	add	r3, r2
 8007e58:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	211f      	movs	r1, #31
 8007e64:	fa01 f303 	lsl.w	r3, r1, r3
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	401a      	ands	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	0e9b      	lsrs	r3, r3, #26
 8007e70:	f003 011f 	and.w	r1, r3, #31
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc90      	pop	{r4, r7}
 8007e8a:	4770      	bx	lr

08007e8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007e8c:	b490      	push	{r4, r7}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	0e5b      	lsrs	r3, r3, #25
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	4413      	add	r3, r2
 8007eaa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2107      	movs	r1, #7
 8007eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	401a      	ands	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	0d1b      	lsrs	r3, r3, #20
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc90      	pop	{r4, r7}
 8007eda:	4770      	bx	lr

08007edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef4:	43db      	mvns	r3, r3
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f003 0318 	and.w	r3, r3, #24
 8007efe:	4908      	ldr	r1, [pc, #32]	; (8007f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007f00:	40d9      	lsrs	r1, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	400b      	ands	r3, r1
 8007f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	0007ffff 	.word	0x0007ffff

08007f24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6093      	str	r3, [r2, #8]
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5c:	d101      	bne.n	8007f62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fac:	d101      	bne.n	8007fb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <LL_ADC_IsEnabled+0x18>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <LL_ADC_IsEnabled+0x1a>
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d101      	bne.n	8007ffe <LL_ADC_REG_IsConversionOngoing+0x18>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b08      	cmp	r3, #8
 800801e:	d101      	bne.n	8008024 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b089      	sub	sp, #36	; 0x24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008040:	2300      	movs	r3, #0
 8008042:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e1ad      	b.n	80083aa <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe f803 	bl	8006068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff ff67 	bl	8007f48 <LL_ADC_IsDeepPowerDownEnabled>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff4d 	bl	8007f24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ff82 	bl	8007f98 <LL_ADC_IsInternalRegulatorEnabled>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d113      	bne.n	80080c2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff66 	bl	8007f70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80080a4:	4b9e      	ldr	r3, [pc, #632]	; (8008320 <HAL_ADC_Init+0x2ec>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	099b      	lsrs	r3, r3, #6
 80080aa:	4a9e      	ldr	r2, [pc, #632]	; (8008324 <HAL_ADC_Init+0x2f0>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	099b      	lsrs	r3, r3, #6
 80080b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080b4:	e002      	b.n	80080bc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f9      	bne.n	80080b6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff66 	bl	8007f98 <LL_ADC_IsInternalRegulatorEnabled>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	f043 0210 	orr.w	r2, r3, #16
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e2:	f043 0201 	orr.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff ff77 	bl	8007fe6 <LL_ADC_REG_IsConversionOngoing>
 80080f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	f003 0310 	and.w	r3, r3, #16
 8008102:	2b00      	cmp	r3, #0
 8008104:	f040 8148 	bne.w	8008398 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 8144 	bne.w	8008398 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008118:	f043 0202 	orr.w	r2, r3, #2
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff ff4b 	bl	8007fc0 <LL_ADC_IsEnabled>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d141      	bne.n	80081b4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008138:	d004      	beq.n	8008144 <HAL_ADC_Init+0x110>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a7a      	ldr	r2, [pc, #488]	; (8008328 <HAL_ADC_Init+0x2f4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10f      	bne.n	8008164 <HAL_ADC_Init+0x130>
 8008144:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008148:	f7ff ff3a 	bl	8007fc0 <LL_ADC_IsEnabled>
 800814c:	4604      	mov	r4, r0
 800814e:	4876      	ldr	r0, [pc, #472]	; (8008328 <HAL_ADC_Init+0x2f4>)
 8008150:	f7ff ff36 	bl	8007fc0 <LL_ADC_IsEnabled>
 8008154:	4603      	mov	r3, r0
 8008156:	4323      	orrs	r3, r4
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e012      	b.n	800818a <HAL_ADC_Init+0x156>
 8008164:	4871      	ldr	r0, [pc, #452]	; (800832c <HAL_ADC_Init+0x2f8>)
 8008166:	f7ff ff2b 	bl	8007fc0 <LL_ADC_IsEnabled>
 800816a:	4604      	mov	r4, r0
 800816c:	4870      	ldr	r0, [pc, #448]	; (8008330 <HAL_ADC_Init+0x2fc>)
 800816e:	f7ff ff27 	bl	8007fc0 <LL_ADC_IsEnabled>
 8008172:	4603      	mov	r3, r0
 8008174:	431c      	orrs	r4, r3
 8008176:	486f      	ldr	r0, [pc, #444]	; (8008334 <HAL_ADC_Init+0x300>)
 8008178:	f7ff ff22 	bl	8007fc0 <LL_ADC_IsEnabled>
 800817c:	4603      	mov	r3, r0
 800817e:	4323      	orrs	r3, r4
 8008180:	2b00      	cmp	r3, #0
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d012      	beq.n	80081b4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008196:	d004      	beq.n	80081a2 <HAL_ADC_Init+0x16e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a62      	ldr	r2, [pc, #392]	; (8008328 <HAL_ADC_Init+0x2f4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d101      	bne.n	80081a6 <HAL_ADC_Init+0x172>
 80081a2:	4a65      	ldr	r2, [pc, #404]	; (8008338 <HAL_ADC_Init+0x304>)
 80081a4:	e000      	b.n	80081a8 <HAL_ADC_Init+0x174>
 80081a6:	4a65      	ldr	r2, [pc, #404]	; (800833c <HAL_ADC_Init+0x308>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f7ff fd7e 	bl	8007cb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7f5b      	ldrb	r3, [r3, #29]
 80081b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80081c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80081ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d106      	bne.n	80081f0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	3b01      	subs	r3, #1
 80081e8:	045b      	lsls	r3, r3, #17
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d009      	beq.n	800820c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	4313      	orrs	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	4b4b      	ldr	r3, [pc, #300]	; (8008340 <HAL_ADC_Init+0x30c>)
 8008214:	4013      	ands	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6812      	ldr	r2, [r2, #0]
 800821a:	69b9      	ldr	r1, [r7, #24]
 800821c:	430b      	orrs	r3, r1
 800821e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fed3 	bl	8007fe6 <LL_ADC_REG_IsConversionOngoing>
 8008240:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fee0 	bl	800800c <LL_ADC_INJ_IsConversionOngoing>
 800824c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d17f      	bne.n	8008354 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d17c      	bne.n	8008354 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800825e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008266:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008276:	f023 0302 	bic.w	r3, r3, #2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	69b9      	ldr	r1, [r7, #24]
 8008280:	430b      	orrs	r3, r1
 8008282:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d017      	beq.n	80082bc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800829a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80082a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80082a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6911      	ldr	r1, [r2, #16]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	430b      	orrs	r3, r1
 80082b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80082ba:	e013      	b.n	80082e4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80082dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80082e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d12a      	bne.n	8008344 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082f8:	f023 0304 	bic.w	r3, r3, #4
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008304:	4311      	orrs	r1, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800830a:	4311      	orrs	r1, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008310:	430a      	orrs	r2, r1
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0201 	orr.w	r2, r2, #1
 800831c:	611a      	str	r2, [r3, #16]
 800831e:	e019      	b.n	8008354 <HAL_ADC_Init+0x320>
 8008320:	20000ca4 	.word	0x20000ca4
 8008324:	053e2d63 	.word	0x053e2d63
 8008328:	50000100 	.word	0x50000100
 800832c:	50000400 	.word	0x50000400
 8008330:	50000500 	.word	0x50000500
 8008334:	50000600 	.word	0x50000600
 8008338:	50000300 	.word	0x50000300
 800833c:	50000700 	.word	0x50000700
 8008340:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691a      	ldr	r2, [r3, #16]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0201 	bic.w	r2, r2, #1
 8008352:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10c      	bne.n	8008376 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f023 010f 	bic.w	r1, r3, #15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	1e5a      	subs	r2, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
 8008374:	e007      	b.n	8008386 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 020f 	bic.w	r2, r2, #15
 8008384:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	f043 0201 	orr.w	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	65da      	str	r2, [r3, #92]	; 0x5c
 8008396:	e007      	b.n	80083a8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f043 0210 	orr.w	r2, r3, #16
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80083a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3724      	adds	r7, #36	; 0x24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd90      	pop	{r4, r7, pc}
 80083b2:	bf00      	nop

080083b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b0a6      	sub	sp, #152	; 0x98
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_ADC_ConfigChannel+0x22>
 80083d2:	2302      	movs	r3, #2
 80083d4:	e38e      	b.n	8008af4 <HAL_ADC_ConfigChannel+0x740>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff fdff 	bl	8007fe6 <LL_ADC_REG_IsConversionOngoing>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 836f 	bne.w	8008ace <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6859      	ldr	r1, [r3, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f7ff fd1c 	bl	8007e3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fded 	bl	8007fe6 <LL_ADC_REG_IsConversionOngoing>
 800840c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fdf9 	bl	800800c <LL_ADC_INJ_IsConversionOngoing>
 800841a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800841e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 817b 	bne.w	800871e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8176 	bne.w	800871e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800843a:	d10f      	bne.n	800845c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2200      	movs	r2, #0
 8008446:	4619      	mov	r1, r3
 8008448:	f7ff fd20 	bl	8007e8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fcdd 	bl	8007e14 <LL_ADC_SetSamplingTimeCommonConfig>
 800845a:	e00e      	b.n	800847a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6819      	ldr	r1, [r3, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	461a      	mov	r2, r3
 800846a:	f7ff fd0f 	bl	8007e8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fccd 	bl	8007e14 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	08db      	lsrs	r3, r3, #3
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b04      	cmp	r3, #4
 800849a:	d022      	beq.n	80084e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	6919      	ldr	r1, [r3, #16]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084ac:	f7ff fc34 	bl	8007d18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6919      	ldr	r1, [r3, #16]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	461a      	mov	r2, r3
 80084be:	f7ff fc79 	bl	8007db4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6919      	ldr	r1, [r3, #16]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	7f1b      	ldrb	r3, [r3, #28]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d102      	bne.n	80084d8 <HAL_ADC_ConfigChannel+0x124>
 80084d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084d6:	e000      	b.n	80084da <HAL_ADC_ConfigChannel+0x126>
 80084d8:	2300      	movs	r3, #0
 80084da:	461a      	mov	r2, r3
 80084dc:	f7ff fc82 	bl	8007de4 <LL_ADC_SetOffsetSaturation>
 80084e0:	e11d      	b.n	800871e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fc37 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <HAL_ADC_ConfigChannel+0x15a>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2100      	movs	r1, #0
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fc2c 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 8008504:	4603      	mov	r3, r0
 8008506:	0e9b      	lsrs	r3, r3, #26
 8008508:	f003 021f 	and.w	r2, r3, #31
 800850c:	e012      	b.n	8008534 <HAL_ADC_ConfigChannel+0x180>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2100      	movs	r1, #0
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fc21 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 800851a:	4603      	mov	r3, r0
 800851c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008524:	fa93 f3a3 	rbit	r3, r3
 8008528:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800852a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800852c:	fab3 f383 	clz	r3, r3
 8008530:	b2db      	uxtb	r3, r3
 8008532:	461a      	mov	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <HAL_ADC_ConfigChannel+0x198>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	0e9b      	lsrs	r3, r3, #26
 8008546:	f003 031f 	and.w	r3, r3, #31
 800854a:	e00a      	b.n	8008562 <HAL_ADC_ConfigChannel+0x1ae>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008554:	fa93 f3a3 	rbit	r3, r3
 8008558:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800855a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800855c:	fab3 f383 	clz	r3, r3
 8008560:	b2db      	uxtb	r3, r3
 8008562:	429a      	cmp	r2, r3
 8008564:	d106      	bne.n	8008574 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fc08 	bl	8007d84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2101      	movs	r1, #1
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff fbee 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 8008580:	4603      	mov	r3, r0
 8008582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <HAL_ADC_ConfigChannel+0x1ec>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2101      	movs	r1, #1
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fbe3 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 8008596:	4603      	mov	r3, r0
 8008598:	0e9b      	lsrs	r3, r3, #26
 800859a:	f003 021f 	and.w	r2, r3, #31
 800859e:	e010      	b.n	80085c2 <HAL_ADC_ConfigChannel+0x20e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2101      	movs	r1, #1
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fbd8 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 80085ac:	4603      	mov	r3, r0
 80085ae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085b2:	fa93 f3a3 	rbit	r3, r3
 80085b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	fab3 f383 	clz	r3, r3
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d105      	bne.n	80085da <HAL_ADC_ConfigChannel+0x226>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	0e9b      	lsrs	r3, r3, #26
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	e00a      	b.n	80085f0 <HAL_ADC_ConfigChannel+0x23c>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80085e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ea:	fab3 f383 	clz	r3, r3
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d106      	bne.n	8008602 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2200      	movs	r2, #0
 80085fa:	2101      	movs	r1, #1
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fbc1 	bl	8007d84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2102      	movs	r1, #2
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fba7 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 800860e:	4603      	mov	r3, r0
 8008610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <HAL_ADC_ConfigChannel+0x27a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fb9c 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 8008624:	4603      	mov	r3, r0
 8008626:	0e9b      	lsrs	r3, r3, #26
 8008628:	f003 021f 	and.w	r2, r3, #31
 800862c:	e010      	b.n	8008650 <HAL_ADC_ConfigChannel+0x29c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2102      	movs	r1, #2
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fb91 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 800863a:	4603      	mov	r3, r0
 800863c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008640:	fa93 f3a3 	rbit	r3, r3
 8008644:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008648:	fab3 f383 	clz	r3, r3
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x2b4>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	0e9b      	lsrs	r3, r3, #26
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	e00a      	b.n	800867e <HAL_ADC_ConfigChannel+0x2ca>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008670:	fa93 f3a3 	rbit	r3, r3
 8008674:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008678:	fab3 f383 	clz	r3, r3
 800867c:	b2db      	uxtb	r3, r3
 800867e:	429a      	cmp	r2, r3
 8008680:	d106      	bne.n	8008690 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	2102      	movs	r1, #2
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fb7a 	bl	8007d84 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2103      	movs	r1, #3
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fb60 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 800869c:	4603      	mov	r3, r0
 800869e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <HAL_ADC_ConfigChannel+0x308>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2103      	movs	r1, #3
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fb55 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 80086b2:	4603      	mov	r3, r0
 80086b4:	0e9b      	lsrs	r3, r3, #26
 80086b6:	f003 021f 	and.w	r2, r3, #31
 80086ba:	e010      	b.n	80086de <HAL_ADC_ConfigChannel+0x32a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2103      	movs	r1, #3
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fb4a 	bl	8007d5c <LL_ADC_GetOffsetChannel>
 80086c8:	4603      	mov	r3, r0
 80086ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ce:	fa93 f3a3 	rbit	r3, r3
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80086d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d6:	fab3 f383 	clz	r3, r3
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <HAL_ADC_ConfigChannel+0x342>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	0e9b      	lsrs	r3, r3, #26
 80086f0:	f003 031f 	and.w	r3, r3, #31
 80086f4:	e00a      	b.n	800870c <HAL_ADC_ConfigChannel+0x358>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fe:	fa93 f3a3 	rbit	r3, r3
 8008702:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	fab3 f383 	clz	r3, r3
 800870a:	b2db      	uxtb	r3, r3
 800870c:	429a      	cmp	r2, r3
 800870e:	d106      	bne.n	800871e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2200      	movs	r2, #0
 8008716:	2103      	movs	r1, #3
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff fb33 	bl	8007d84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fc4c 	bl	8007fc0 <LL_ADC_IsEnabled>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 810c 	bne.w	8008948 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	6819      	ldr	r1, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	461a      	mov	r2, r3
 800873e:	f7ff fbcd 	bl	8007edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	4aaf      	ldr	r2, [pc, #700]	; (8008a04 <HAL_ADC_ConfigChannel+0x650>)
 8008748:	4293      	cmp	r3, r2
 800874a:	f040 80fd 	bne.w	8008948 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <HAL_ADC_ConfigChannel+0x3c2>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	0e9b      	lsrs	r3, r3, #26
 8008764:	3301      	adds	r3, #1
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2b09      	cmp	r3, #9
 800876c:	bf94      	ite	ls
 800876e:	2301      	movls	r3, #1
 8008770:	2300      	movhi	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	e012      	b.n	800879c <HAL_ADC_ConfigChannel+0x3e8>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800877c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877e:	fa93 f3a3 	rbit	r3, r3
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	fab3 f383 	clz	r3, r3
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3301      	adds	r3, #1
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2b09      	cmp	r3, #9
 8008794:	bf94      	ite	ls
 8008796:	2301      	movls	r3, #1
 8008798:	2300      	movhi	r3, #0
 800879a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800879c:	2b00      	cmp	r3, #0
 800879e:	d064      	beq.n	800886a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d107      	bne.n	80087bc <HAL_ADC_ConfigChannel+0x408>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	0e9b      	lsrs	r3, r3, #26
 80087b2:	3301      	adds	r3, #1
 80087b4:	069b      	lsls	r3, r3, #26
 80087b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087ba:	e00e      	b.n	80087da <HAL_ADC_ConfigChannel+0x426>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	fa93 f3a3 	rbit	r3, r3
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	fab3 f383 	clz	r3, r3
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	3301      	adds	r3, #1
 80087d4:	069b      	lsls	r3, r3, #26
 80087d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <HAL_ADC_ConfigChannel+0x446>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	0e9b      	lsrs	r3, r3, #26
 80087ec:	3301      	adds	r3, #1
 80087ee:	f003 031f 	and.w	r3, r3, #31
 80087f2:	2101      	movs	r1, #1
 80087f4:	fa01 f303 	lsl.w	r3, r1, r3
 80087f8:	e010      	b.n	800881c <HAL_ADC_ConfigChannel+0x468>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	fa93 f3a3 	rbit	r3, r3
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	fab3 f383 	clz	r3, r3
 800880e:	b2db      	uxtb	r3, r3
 8008810:	3301      	adds	r3, #1
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	2101      	movs	r1, #1
 8008818:	fa01 f303 	lsl.w	r3, r1, r3
 800881c:	ea42 0103 	orr.w	r1, r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <HAL_ADC_ConfigChannel+0x48e>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	0e9b      	lsrs	r3, r3, #26
 8008832:	3301      	adds	r3, #1
 8008834:	f003 021f 	and.w	r2, r3, #31
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	051b      	lsls	r3, r3, #20
 8008840:	e011      	b.n	8008866 <HAL_ADC_ConfigChannel+0x4b2>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	fa93 f3a3 	rbit	r3, r3
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	fab3 f383 	clz	r3, r3
 8008856:	b2db      	uxtb	r3, r3
 8008858:	3301      	adds	r3, #1
 800885a:	f003 021f 	and.w	r2, r3, #31
 800885e:	4613      	mov	r3, r2
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	4413      	add	r3, r2
 8008864:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008866:	430b      	orrs	r3, r1
 8008868:	e069      	b.n	800893e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x4d2>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	0e9b      	lsrs	r3, r3, #26
 800887c:	3301      	adds	r3, #1
 800887e:	069b      	lsls	r3, r3, #26
 8008880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008884:	e00e      	b.n	80088a4 <HAL_ADC_ConfigChannel+0x4f0>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	fa93 f3a3 	rbit	r3, r3
 8008892:	61fb      	str	r3, [r7, #28]
  return result;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	fab3 f383 	clz	r3, r3
 800889a:	b2db      	uxtb	r3, r3
 800889c:	3301      	adds	r3, #1
 800889e:	069b      	lsls	r3, r3, #26
 80088a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <HAL_ADC_ConfigChannel+0x510>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	0e9b      	lsrs	r3, r3, #26
 80088b6:	3301      	adds	r3, #1
 80088b8:	f003 031f 	and.w	r3, r3, #31
 80088bc:	2101      	movs	r1, #1
 80088be:	fa01 f303 	lsl.w	r3, r1, r3
 80088c2:	e010      	b.n	80088e6 <HAL_ADC_ConfigChannel+0x532>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	fa93 f3a3 	rbit	r3, r3
 80088d0:	617b      	str	r3, [r7, #20]
  return result;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	fab3 f383 	clz	r3, r3
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	3301      	adds	r3, #1
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	ea42 0103 	orr.w	r1, r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10d      	bne.n	8008912 <HAL_ADC_ConfigChannel+0x55e>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	0e9b      	lsrs	r3, r3, #26
 80088fc:	3301      	adds	r3, #1
 80088fe:	f003 021f 	and.w	r2, r3, #31
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	3b1e      	subs	r3, #30
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008910:	e014      	b.n	800893c <HAL_ADC_ConfigChannel+0x588>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	fa93 f3a3 	rbit	r3, r3
 800891e:	60fb      	str	r3, [r7, #12]
  return result;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	fab3 f383 	clz	r3, r3
 8008926:	b2db      	uxtb	r3, r3
 8008928:	3301      	adds	r3, #1
 800892a:	f003 021f 	and.w	r2, r3, #31
 800892e:	4613      	mov	r3, r2
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4413      	add	r3, r2
 8008934:	3b1e      	subs	r3, #30
 8008936:	051b      	lsls	r3, r3, #20
 8008938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800893c:	430b      	orrs	r3, r1
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	4619      	mov	r1, r3
 8008944:	f7ff faa2 	bl	8007e8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	4b2e      	ldr	r3, [pc, #184]	; (8008a08 <HAL_ADC_ConfigChannel+0x654>)
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80c9 	beq.w	8008ae8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895e:	d004      	beq.n	800896a <HAL_ADC_ConfigChannel+0x5b6>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <HAL_ADC_ConfigChannel+0x658>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d101      	bne.n	800896e <HAL_ADC_ConfigChannel+0x5ba>
 800896a:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <HAL_ADC_ConfigChannel+0x65c>)
 800896c:	e000      	b.n	8008970 <HAL_ADC_ConfigChannel+0x5bc>
 800896e:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <HAL_ADC_ConfigChannel+0x660>)
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff f9c3 	bl	8007cfc <LL_ADC_GetCommonPathInternalCh>
 8008976:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a26      	ldr	r2, [pc, #152]	; (8008a18 <HAL_ADC_ConfigChannel+0x664>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <HAL_ADC_ConfigChannel+0x5da>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a24      	ldr	r2, [pc, #144]	; (8008a1c <HAL_ADC_ConfigChannel+0x668>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d14e      	bne.n	8008a2c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800898e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d148      	bne.n	8008a2c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089a2:	d005      	beq.n	80089b0 <HAL_ADC_ConfigChannel+0x5fc>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <HAL_ADC_ConfigChannel+0x66c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f040 8099 	bne.w	8008ae2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b8:	d004      	beq.n	80089c4 <HAL_ADC_ConfigChannel+0x610>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a13      	ldr	r2, [pc, #76]	; (8008a0c <HAL_ADC_ConfigChannel+0x658>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d101      	bne.n	80089c8 <HAL_ADC_ConfigChannel+0x614>
 80089c4:	4a12      	ldr	r2, [pc, #72]	; (8008a10 <HAL_ADC_ConfigChannel+0x65c>)
 80089c6:	e000      	b.n	80089ca <HAL_ADC_ConfigChannel+0x616>
 80089c8:	4a12      	ldr	r2, [pc, #72]	; (8008a14 <HAL_ADC_ConfigChannel+0x660>)
 80089ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7ff f97e 	bl	8007cd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <HAL_ADC_ConfigChannel+0x670>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	099b      	lsrs	r3, r3, #6
 80089e0:	4a11      	ldr	r2, [pc, #68]	; (8008a28 <HAL_ADC_ConfigChannel+0x674>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	099a      	lsrs	r2, r3, #6
 80089e8:	4613      	mov	r3, r2
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80089f2:	e002      	b.n	80089fa <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f9      	bne.n	80089f4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a00:	e06f      	b.n	8008ae2 <HAL_ADC_ConfigChannel+0x72e>
 8008a02:	bf00      	nop
 8008a04:	407f0000 	.word	0x407f0000
 8008a08:	80080000 	.word	0x80080000
 8008a0c:	50000100 	.word	0x50000100
 8008a10:	50000300 	.word	0x50000300
 8008a14:	50000700 	.word	0x50000700
 8008a18:	c3210000 	.word	0xc3210000
 8008a1c:	90c00010 	.word	0x90c00010
 8008a20:	50000600 	.word	0x50000600
 8008a24:	20000ca4 	.word	0x20000ca4
 8008a28:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a32      	ldr	r2, [pc, #200]	; (8008afc <HAL_ADC_ConfigChannel+0x748>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d125      	bne.n	8008a82 <HAL_ADC_ConfigChannel+0x6ce>
 8008a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11f      	bne.n	8008a82 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2e      	ldr	r2, [pc, #184]	; (8008b00 <HAL_ADC_ConfigChannel+0x74c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d104      	bne.n	8008a56 <HAL_ADC_ConfigChannel+0x6a2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2c      	ldr	r2, [pc, #176]	; (8008b04 <HAL_ADC_ConfigChannel+0x750>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d047      	beq.n	8008ae6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a5e:	d004      	beq.n	8008a6a <HAL_ADC_ConfigChannel+0x6b6>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a26      	ldr	r2, [pc, #152]	; (8008b00 <HAL_ADC_ConfigChannel+0x74c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d101      	bne.n	8008a6e <HAL_ADC_ConfigChannel+0x6ba>
 8008a6a:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <HAL_ADC_ConfigChannel+0x754>)
 8008a6c:	e000      	b.n	8008a70 <HAL_ADC_ConfigChannel+0x6bc>
 8008a6e:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <HAL_ADC_ConfigChannel+0x758>)
 8008a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f7ff f92b 	bl	8007cd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008a80:	e031      	b.n	8008ae6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a22      	ldr	r2, [pc, #136]	; (8008b10 <HAL_ADC_ConfigChannel+0x75c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d12d      	bne.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d127      	bne.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <HAL_ADC_ConfigChannel+0x74c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d022      	beq.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aaa:	d004      	beq.n	8008ab6 <HAL_ADC_ConfigChannel+0x702>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <HAL_ADC_ConfigChannel+0x74c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d101      	bne.n	8008aba <HAL_ADC_ConfigChannel+0x706>
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <HAL_ADC_ConfigChannel+0x754>)
 8008ab8:	e000      	b.n	8008abc <HAL_ADC_ConfigChannel+0x708>
 8008aba:	4a14      	ldr	r2, [pc, #80]	; (8008b0c <HAL_ADC_ConfigChannel+0x758>)
 8008abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7ff f905 	bl	8007cd6 <LL_ADC_SetCommonPathInternalCh>
 8008acc:	e00c      	b.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad2:	f043 0220 	orr.w	r2, r3, #32
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008ae0:	e002      	b.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ae6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008af0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3798      	adds	r7, #152	; 0x98
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	c7520000 	.word	0xc7520000
 8008b00:	50000100 	.word	0x50000100
 8008b04:	50000500 	.word	0x50000500
 8008b08:	50000300 	.word	0x50000300
 8008b0c:	50000700 	.word	0x50000700
 8008b10:	cb840000 	.word	0xcb840000

08008b14 <LL_ADC_IsEnabled>:
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <LL_ADC_IsEnabled+0x18>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <LL_ADC_IsEnabled+0x1a>
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d101      	bne.n	8008b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008b60:	b590      	push	{r4, r7, lr}
 8008b62:	b0a1      	sub	sp, #132	; 0x84
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0e3      	b.n	8008d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b8e:	d102      	bne.n	8008b96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008b90:	4b6f      	ldr	r3, [pc, #444]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008b92:	60bb      	str	r3, [r7, #8]
 8008b94:	e009      	b.n	8008baa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a6e      	ldr	r2, [pc, #440]	; (8008d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d102      	bne.n	8008ba6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008ba0:	4b6d      	ldr	r3, [pc, #436]	; (8008d58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ba2:	60bb      	str	r3, [r7, #8]
 8008ba4:	e001      	b.n	8008baa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e0be      	b.n	8008d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff ffb5 	bl	8008b3a <LL_ADC_REG_IsConversionOngoing>
 8008bd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff ffaf 	bl	8008b3a <LL_ADC_REG_IsConversionOngoing>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 80a0 	bne.w	8008d24 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 809c 	bne.w	8008d24 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bf4:	d004      	beq.n	8008c00 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a55      	ldr	r2, [pc, #340]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008c00:	4b56      	ldr	r3, [pc, #344]	; (8008d5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008c02:	e000      	b.n	8008c06 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008c04:	4b56      	ldr	r3, [pc, #344]	; (8008d60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008c06:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d04b      	beq.n	8008ca8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	6859      	ldr	r1, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c22:	035b      	lsls	r3, r3, #13
 8008c24:	430b      	orrs	r3, r1
 8008c26:	431a      	orrs	r2, r3
 8008c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c34:	d004      	beq.n	8008c40 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a45      	ldr	r2, [pc, #276]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10f      	bne.n	8008c60 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008c40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c44:	f7ff ff66 	bl	8008b14 <LL_ADC_IsEnabled>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4841      	ldr	r0, [pc, #260]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008c4c:	f7ff ff62 	bl	8008b14 <LL_ADC_IsEnabled>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4323      	orrs	r3, r4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf0c      	ite	eq
 8008c58:	2301      	moveq	r3, #1
 8008c5a:	2300      	movne	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	e012      	b.n	8008c86 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008c60:	483c      	ldr	r0, [pc, #240]	; (8008d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008c62:	f7ff ff57 	bl	8008b14 <LL_ADC_IsEnabled>
 8008c66:	4604      	mov	r4, r0
 8008c68:	483b      	ldr	r0, [pc, #236]	; (8008d58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008c6a:	f7ff ff53 	bl	8008b14 <LL_ADC_IsEnabled>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	431c      	orrs	r4, r3
 8008c72:	483c      	ldr	r0, [pc, #240]	; (8008d64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008c74:	f7ff ff4e 	bl	8008b14 <LL_ADC_IsEnabled>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4323      	orrs	r3, r4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	bf0c      	ite	eq
 8008c80:	2301      	moveq	r3, #1
 8008c82:	2300      	movne	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d056      	beq.n	8008d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008c92:	f023 030f 	bic.w	r3, r3, #15
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	6892      	ldr	r2, [r2, #8]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ca4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ca6:	e047      	b.n	8008d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cbc:	d004      	beq.n	8008cc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a23      	ldr	r2, [pc, #140]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d10f      	bne.n	8008ce8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008cc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ccc:	f7ff ff22 	bl	8008b14 <LL_ADC_IsEnabled>
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	481f      	ldr	r0, [pc, #124]	; (8008d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008cd4:	f7ff ff1e 	bl	8008b14 <LL_ADC_IsEnabled>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	4323      	orrs	r3, r4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf0c      	ite	eq
 8008ce0:	2301      	moveq	r3, #1
 8008ce2:	2300      	movne	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	e012      	b.n	8008d0e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008ce8:	481a      	ldr	r0, [pc, #104]	; (8008d54 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008cea:	f7ff ff13 	bl	8008b14 <LL_ADC_IsEnabled>
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4819      	ldr	r0, [pc, #100]	; (8008d58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008cf2:	f7ff ff0f 	bl	8008b14 <LL_ADC_IsEnabled>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	431c      	orrs	r4, r3
 8008cfa:	481a      	ldr	r0, [pc, #104]	; (8008d64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008cfc:	f7ff ff0a 	bl	8008b14 <LL_ADC_IsEnabled>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4323      	orrs	r3, r4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bf0c      	ite	eq
 8008d08:	2301      	moveq	r3, #1
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d012      	beq.n	8008d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008d1a:	f023 030f 	bic.w	r3, r3, #15
 8008d1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008d22:	e009      	b.n	8008d38 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d28:	f043 0220 	orr.w	r2, r3, #32
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008d36:	e000      	b.n	8008d3a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008d38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008d42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3784      	adds	r7, #132	; 0x84
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd90      	pop	{r4, r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	50000100 	.word	0x50000100
 8008d54:	50000400 	.word	0x50000400
 8008d58:	50000500 	.word	0x50000500
 8008d5c:	50000300 	.word	0x50000300
 8008d60:	50000700 	.word	0x50000700
 8008d64:	50000600 	.word	0x50000600

08008d68 <LL_EXTI_EnableIT_0_31>:
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <LL_EXTI_EnableIT_0_31+0x20>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4904      	ldr	r1, [pc, #16]	; (8008d88 <LL_EXTI_EnableIT_0_31+0x20>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	600b      	str	r3, [r1, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	40010400 	.word	0x40010400

08008d8c <LL_EXTI_EnableIT_32_63>:
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <LL_EXTI_EnableIT_32_63+0x20>)
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	4904      	ldr	r1, [pc, #16]	; (8008dac <LL_EXTI_EnableIT_32_63+0x20>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	620b      	str	r3, [r1, #32]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	40010400 	.word	0x40010400

08008db0 <LL_EXTI_DisableIT_0_31>:
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	600b      	str	r3, [r1, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <LL_EXTI_DisableIT_32_63>:
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <LL_EXTI_DisableIT_32_63+0x24>)
 8008de2:	6a1a      	ldr	r2, [r3, #32]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	43db      	mvns	r3, r3
 8008de8:	4904      	ldr	r1, [pc, #16]	; (8008dfc <LL_EXTI_DisableIT_32_63+0x24>)
 8008dea:	4013      	ands	r3, r2
 8008dec:	620b      	str	r3, [r1, #32]
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010400 	.word	0x40010400

08008e00 <LL_EXTI_EnableEvent_0_31>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	4904      	ldr	r1, [pc, #16]	; (8008e20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	604b      	str	r3, [r1, #4]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	40010400 	.word	0x40010400

08008e24 <LL_EXTI_EnableEvent_32_63>:
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e30:	4904      	ldr	r1, [pc, #16]	; (8008e44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40010400 	.word	0x40010400

08008e48 <LL_EXTI_DisableEvent_0_31>:
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	43db      	mvns	r3, r3
 8008e58:	4904      	ldr	r1, [pc, #16]	; (8008e6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	604b      	str	r3, [r1, #4]
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40010400 	.word	0x40010400

08008e70 <LL_EXTI_DisableEvent_32_63>:
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008e78:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	43db      	mvns	r3, r3
 8008e80:	4904      	ldr	r1, [pc, #16]	; (8008e94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010400 	.word	0x40010400

08008e98 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	4904      	ldr	r1, [pc, #16]	; (8008eb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	608b      	str	r3, [r1, #8]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	40010400 	.word	0x40010400

08008ebc <LL_EXTI_EnableRisingTrig_32_63>:
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ec8:	4904      	ldr	r1, [pc, #16]	; (8008edc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40010400 	.word	0x40010400

08008ee0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	4904      	ldr	r1, [pc, #16]	; (8008f04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	608b      	str	r3, [r1, #8]
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40010400 	.word	0x40010400

08008f08 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	4904      	ldr	r1, [pc, #16]	; (8008f2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40010400 	.word	0x40010400

08008f30 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60cb      	str	r3, [r1, #12]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	40010400 	.word	0x40010400

08008f54 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	40010400 	.word	0x40010400

08008f78 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	60cb      	str	r3, [r1, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40010400 	.word	0x40010400

08008fa0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	4904      	ldr	r1, [pc, #16]	; (8008fc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010400 	.word	0x40010400

08008fc8 <LL_EXTI_ClearFlag_0_31>:
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008fd0:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6153      	str	r3, [r2, #20]
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40010400 	.word	0x40010400

08008fe8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8008ff0:	4a04      	ldr	r2, [pc, #16]	; (8009004 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010400 	.word	0x40010400

08009008 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e180      	b.n	8009326 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800902e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009032:	d102      	bne.n	800903a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	e175      	b.n	8009326 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7f5b      	ldrb	r3, [r3, #29]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d108      	bne.n	8009056 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fd f89d 	bl	8006190 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009060:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b98      	ldr	r3, [pc, #608]	; (80092e8 <HAL_COMP_Init+0x2e0>)
 8009088:	4013      	ands	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	6979      	ldr	r1, [r7, #20]
 8009090:	430b      	orrs	r3, r1
 8009092:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d015      	beq.n	80090ce <HAL_COMP_Init+0xc6>
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d112      	bne.n	80090ce <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80090a8:	4b90      	ldr	r3, [pc, #576]	; (80092ec <HAL_COMP_Init+0x2e4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	099b      	lsrs	r3, r3, #6
 80090ae:	4a90      	ldr	r2, [pc, #576]	; (80092f0 <HAL_COMP_Init+0x2e8>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	099a      	lsrs	r2, r3, #6
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80090c0:	e002      	b.n	80090c8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1f9      	bne.n	80090c2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a88      	ldr	r2, [pc, #544]	; (80092f4 <HAL_COMP_Init+0x2ec>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d028      	beq.n	800912a <HAL_COMP_Init+0x122>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a86      	ldr	r2, [pc, #536]	; (80092f8 <HAL_COMP_Init+0x2f0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d020      	beq.n	8009124 <HAL_COMP_Init+0x11c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a85      	ldr	r2, [pc, #532]	; (80092fc <HAL_COMP_Init+0x2f4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d018      	beq.n	800911e <HAL_COMP_Init+0x116>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a83      	ldr	r2, [pc, #524]	; (8009300 <HAL_COMP_Init+0x2f8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d010      	beq.n	8009118 <HAL_COMP_Init+0x110>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a82      	ldr	r2, [pc, #520]	; (8009304 <HAL_COMP_Init+0x2fc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d008      	beq.n	8009112 <HAL_COMP_Init+0x10a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a80      	ldr	r2, [pc, #512]	; (8009308 <HAL_COMP_Init+0x300>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d101      	bne.n	800910e <HAL_COMP_Init+0x106>
 800910a:	2301      	movs	r3, #1
 800910c:	e00f      	b.n	800912e <HAL_COMP_Init+0x126>
 800910e:	2302      	movs	r3, #2
 8009110:	e00d      	b.n	800912e <HAL_COMP_Init+0x126>
 8009112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009116:	e00a      	b.n	800912e <HAL_COMP_Init+0x126>
 8009118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800911c:	e007      	b.n	800912e <HAL_COMP_Init+0x126>
 800911e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009122:	e004      	b.n	800912e <HAL_COMP_Init+0x126>
 8009124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009128:	e001      	b.n	800912e <HAL_COMP_Init+0x126>
 800912a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800912e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f003 0303 	and.w	r3, r3, #3
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80b6 	beq.w	80092aa <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	d011      	beq.n	800916e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a6e      	ldr	r2, [pc, #440]	; (8009308 <HAL_COMP_Init+0x300>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d004      	beq.n	800915e <HAL_COMP_Init+0x156>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a6c      	ldr	r2, [pc, #432]	; (800930c <HAL_COMP_Init+0x304>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d103      	bne.n	8009166 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800915e:	6938      	ldr	r0, [r7, #16]
 8009160:	f7ff feac 	bl	8008ebc <LL_EXTI_EnableRisingTrig_32_63>
 8009164:	e014      	b.n	8009190 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009166:	6938      	ldr	r0, [r7, #16]
 8009168:	f7ff fe96 	bl	8008e98 <LL_EXTI_EnableRisingTrig_0_31>
 800916c:	e010      	b.n	8009190 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a65      	ldr	r2, [pc, #404]	; (8009308 <HAL_COMP_Init+0x300>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <HAL_COMP_Init+0x17a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a63      	ldr	r2, [pc, #396]	; (800930c <HAL_COMP_Init+0x304>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d103      	bne.n	800918a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009182:	6938      	ldr	r0, [r7, #16]
 8009184:	f7ff fec0 	bl	8008f08 <LL_EXTI_DisableRisingTrig_32_63>
 8009188:	e002      	b.n	8009190 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800918a:	6938      	ldr	r0, [r7, #16]
 800918c:	f7ff fea8 	bl	8008ee0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d011      	beq.n	80091c0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a59      	ldr	r2, [pc, #356]	; (8009308 <HAL_COMP_Init+0x300>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <HAL_COMP_Init+0x1a8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a58      	ldr	r2, [pc, #352]	; (800930c <HAL_COMP_Init+0x304>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d103      	bne.n	80091b8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80091b0:	6938      	ldr	r0, [r7, #16]
 80091b2:	f7ff fecf 	bl	8008f54 <LL_EXTI_EnableFallingTrig_32_63>
 80091b6:	e014      	b.n	80091e2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80091b8:	6938      	ldr	r0, [r7, #16]
 80091ba:	f7ff feb9 	bl	8008f30 <LL_EXTI_EnableFallingTrig_0_31>
 80091be:	e010      	b.n	80091e2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a50      	ldr	r2, [pc, #320]	; (8009308 <HAL_COMP_Init+0x300>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d004      	beq.n	80091d4 <HAL_COMP_Init+0x1cc>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a4f      	ldr	r2, [pc, #316]	; (800930c <HAL_COMP_Init+0x304>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d103      	bne.n	80091dc <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80091d4:	6938      	ldr	r0, [r7, #16]
 80091d6:	f7ff fee3 	bl	8008fa0 <LL_EXTI_DisableFallingTrig_32_63>
 80091da:	e002      	b.n	80091e2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80091dc:	6938      	ldr	r0, [r7, #16]
 80091de:	f7ff fecb 	bl	8008f78 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a48      	ldr	r2, [pc, #288]	; (8009308 <HAL_COMP_Init+0x300>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d004      	beq.n	80091f6 <HAL_COMP_Init+0x1ee>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a46      	ldr	r2, [pc, #280]	; (800930c <HAL_COMP_Init+0x304>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d103      	bne.n	80091fe <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80091f6:	6938      	ldr	r0, [r7, #16]
 80091f8:	f7ff fef6 	bl	8008fe8 <LL_EXTI_ClearFlag_32_63>
 80091fc:	e002      	b.n	8009204 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80091fe:	6938      	ldr	r0, [r7, #16]
 8009200:	f7ff fee2 	bl	8008fc8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d011      	beq.n	8009234 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a3c      	ldr	r2, [pc, #240]	; (8009308 <HAL_COMP_Init+0x300>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d004      	beq.n	8009224 <HAL_COMP_Init+0x21c>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a3b      	ldr	r2, [pc, #236]	; (800930c <HAL_COMP_Init+0x304>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d103      	bne.n	800922c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009224:	6938      	ldr	r0, [r7, #16]
 8009226:	f7ff fdfd 	bl	8008e24 <LL_EXTI_EnableEvent_32_63>
 800922a:	e014      	b.n	8009256 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800922c:	6938      	ldr	r0, [r7, #16]
 800922e:	f7ff fde7 	bl	8008e00 <LL_EXTI_EnableEvent_0_31>
 8009232:	e010      	b.n	8009256 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a33      	ldr	r2, [pc, #204]	; (8009308 <HAL_COMP_Init+0x300>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d004      	beq.n	8009248 <HAL_COMP_Init+0x240>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a32      	ldr	r2, [pc, #200]	; (800930c <HAL_COMP_Init+0x304>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d103      	bne.n	8009250 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009248:	6938      	ldr	r0, [r7, #16]
 800924a:	f7ff fe11 	bl	8008e70 <LL_EXTI_DisableEvent_32_63>
 800924e:	e002      	b.n	8009256 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009250:	6938      	ldr	r0, [r7, #16]
 8009252:	f7ff fdf9 	bl	8008e48 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d011      	beq.n	8009286 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a28      	ldr	r2, [pc, #160]	; (8009308 <HAL_COMP_Init+0x300>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d004      	beq.n	8009276 <HAL_COMP_Init+0x26e>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a26      	ldr	r2, [pc, #152]	; (800930c <HAL_COMP_Init+0x304>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d103      	bne.n	800927e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f7ff fd88 	bl	8008d8c <LL_EXTI_EnableIT_32_63>
 800927c:	e04b      	b.n	8009316 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800927e:	6938      	ldr	r0, [r7, #16]
 8009280:	f7ff fd72 	bl	8008d68 <LL_EXTI_EnableIT_0_31>
 8009284:	e047      	b.n	8009316 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1f      	ldr	r2, [pc, #124]	; (8009308 <HAL_COMP_Init+0x300>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d004      	beq.n	800929a <HAL_COMP_Init+0x292>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a1d      	ldr	r2, [pc, #116]	; (800930c <HAL_COMP_Init+0x304>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d103      	bne.n	80092a2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800929a:	6938      	ldr	r0, [r7, #16]
 800929c:	f7ff fd9c 	bl	8008dd8 <LL_EXTI_DisableIT_32_63>
 80092a0:	e039      	b.n	8009316 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7ff fd84 	bl	8008db0 <LL_EXTI_DisableIT_0_31>
 80092a8:	e035      	b.n	8009316 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a16      	ldr	r2, [pc, #88]	; (8009308 <HAL_COMP_Init+0x300>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d004      	beq.n	80092be <HAL_COMP_Init+0x2b6>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a14      	ldr	r2, [pc, #80]	; (800930c <HAL_COMP_Init+0x304>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d103      	bne.n	80092c6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80092be:	6938      	ldr	r0, [r7, #16]
 80092c0:	f7ff fdd6 	bl	8008e70 <LL_EXTI_DisableEvent_32_63>
 80092c4:	e002      	b.n	80092cc <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80092c6:	6938      	ldr	r0, [r7, #16]
 80092c8:	f7ff fdbe 	bl	8008e48 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <HAL_COMP_Init+0x300>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d004      	beq.n	80092e0 <HAL_COMP_Init+0x2d8>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a0c      	ldr	r2, [pc, #48]	; (800930c <HAL_COMP_Init+0x304>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d117      	bne.n	8009310 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80092e0:	6938      	ldr	r0, [r7, #16]
 80092e2:	f7ff fd79 	bl	8008dd8 <LL_EXTI_DisableIT_32_63>
 80092e6:	e016      	b.n	8009316 <HAL_COMP_Init+0x30e>
 80092e8:	ff007e0f 	.word	0xff007e0f
 80092ec:	20000ca4 	.word	0x20000ca4
 80092f0:	053e2d63 	.word	0x053e2d63
 80092f4:	40010200 	.word	0x40010200
 80092f8:	40010204 	.word	0x40010204
 80092fc:	40010208 	.word	0x40010208
 8009300:	4001020c 	.word	0x4001020c
 8009304:	40010210 	.word	0x40010210
 8009308:	40010214 	.word	0x40010214
 800930c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f7ff fd4d 	bl	8008db0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	7f5b      	ldrb	r3, [r3, #29]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009326:	7ffb      	ldrb	r3, [r7, #31]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3720      	adds	r7, #32
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <__NVIC_SetPriorityGrouping>:
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <__NVIC_SetPriorityGrouping+0x44>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800934c:	4013      	ands	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800935c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009362:	4a04      	ldr	r2, [pc, #16]	; (8009374 <__NVIC_SetPriorityGrouping+0x44>)
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	60d3      	str	r3, [r2, #12]
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	e000ed00 	.word	0xe000ed00

08009378 <__NVIC_GetPriorityGrouping>:
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <__NVIC_GetPriorityGrouping+0x18>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	f003 0307 	and.w	r3, r3, #7
}
 8009386:	4618      	mov	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <__NVIC_EnableIRQ>:
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800939e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	db0b      	blt.n	80093be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	f003 021f 	and.w	r2, r3, #31
 80093ac:	4907      	ldr	r1, [pc, #28]	; (80093cc <__NVIC_EnableIRQ+0x38>)
 80093ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b2:	095b      	lsrs	r3, r3, #5
 80093b4:	2001      	movs	r0, #1
 80093b6:	fa00 f202 	lsl.w	r2, r0, r2
 80093ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	e000e100 	.word	0xe000e100

080093d0 <__NVIC_SetPriority>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db0a      	blt.n	80093fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	490c      	ldr	r1, [pc, #48]	; (800941c <__NVIC_SetPriority+0x4c>)
 80093ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ee:	0112      	lsls	r2, r2, #4
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	440b      	add	r3, r1
 80093f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093f8:	e00a      	b.n	8009410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	4908      	ldr	r1, [pc, #32]	; (8009420 <__NVIC_SetPriority+0x50>)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	3b04      	subs	r3, #4
 8009408:	0112      	lsls	r2, r2, #4
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	440b      	add	r3, r1
 800940e:	761a      	strb	r2, [r3, #24]
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	e000e100 	.word	0xe000e100
 8009420:	e000ed00 	.word	0xe000ed00

08009424 <NVIC_EncodePriority>:
{
 8009424:	b480      	push	{r7}
 8009426:	b089      	sub	sp, #36	; 0x24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f1c3 0307 	rsb	r3, r3, #7
 800943e:	2b04      	cmp	r3, #4
 8009440:	bf28      	it	cs
 8009442:	2304      	movcs	r3, #4
 8009444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3304      	adds	r3, #4
 800944a:	2b06      	cmp	r3, #6
 800944c:	d902      	bls.n	8009454 <NVIC_EncodePriority+0x30>
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3b03      	subs	r3, #3
 8009452:	e000      	b.n	8009456 <NVIC_EncodePriority+0x32>
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	fa02 f303 	lsl.w	r3, r2, r3
 8009462:	43da      	mvns	r2, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	401a      	ands	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800946c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	fa01 f303 	lsl.w	r3, r1, r3
 8009476:	43d9      	mvns	r1, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800947c:	4313      	orrs	r3, r2
}
 800947e:	4618      	mov	r0, r3
 8009480:	3724      	adds	r7, #36	; 0x24
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <SysTick_Config>:
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3b01      	subs	r3, #1
 8009498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800949c:	d301      	bcc.n	80094a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800949e:	2301      	movs	r3, #1
 80094a0:	e00f      	b.n	80094c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80094a2:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <SysTick_Config+0x40>)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80094aa:	210f      	movs	r1, #15
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b0:	f7ff ff8e 	bl	80093d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094b4:	4b05      	ldr	r3, [pc, #20]	; (80094cc <SysTick_Config+0x40>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094ba:	4b04      	ldr	r3, [pc, #16]	; (80094cc <SysTick_Config+0x40>)
 80094bc:	2207      	movs	r2, #7
 80094be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	e000e010 	.word	0xe000e010

080094d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff29 	bl	8009330 <__NVIC_SetPriorityGrouping>
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	4603      	mov	r3, r0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80094f4:	f7ff ff40 	bl	8009378 <__NVIC_GetPriorityGrouping>
 80094f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f7ff ff90 	bl	8009424 <NVIC_EncodePriority>
 8009504:	4602      	mov	r2, r0
 8009506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950a:	4611      	mov	r1, r2
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff ff5f 	bl	80093d0 <__NVIC_SetPriority>
}
 8009512:	bf00      	nop
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	4603      	mov	r3, r0
 8009522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff ff33 	bl	8009394 <__NVIC_EnableIRQ>
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff ffa4 	bl	800948c <SysTick_Config>
 8009544:	4603      	mov	r3, r0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e014      	b.n	800958a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	791b      	ldrb	r3, [r3, #4]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fc fec3 	bl	80062fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2202      	movs	r2, #2
 800957a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	795b      	ldrb	r3, [r3, #5]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_DAC_Start+0x16>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e043      	b.n	8009630 <HAL_DAC_Start+0x9e>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6819      	ldr	r1, [r3, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2201      	movs	r2, #1
 80095c2:	409a      	lsls	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80095cc:	2001      	movs	r0, #1
 80095ce:	f7fe fb4d 	bl	8007c6c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d11d      	bne.n	8009622 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0201 	orr.w	r2, r2, #1
 80095f4:	605a      	str	r2, [r3, #4]
 80095f6:	e014      	b.n	8009622 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	f003 0310 	and.w	r3, r3, #16
 8009608:	2102      	movs	r1, #2
 800960a:	fa01 f303 	lsl.w	r3, r1, r3
 800960e:	429a      	cmp	r2, r3
 8009610:	d107      	bne.n	8009622 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0202 	orr.w	r2, r2, #2
 8009620:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	795b      	ldrb	r3, [r3, #5]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <HAL_DAC_Start_DMA+0x1e>
 8009652:	2302      	movs	r3, #2
 8009654:	e0a1      	b.n	800979a <HAL_DAC_Start_DMA+0x162>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2202      	movs	r2, #2
 8009660:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d12a      	bne.n	80096be <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	4a4d      	ldr	r2, [pc, #308]	; (80097a4 <HAL_DAC_Start_DMA+0x16c>)
 800966e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4a4c      	ldr	r2, [pc, #304]	; (80097a8 <HAL_DAC_Start_DMA+0x170>)
 8009676:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	4a4b      	ldr	r2, [pc, #300]	; (80097ac <HAL_DAC_Start_DMA+0x174>)
 800967e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800968e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	2b04      	cmp	r3, #4
 8009694:	d009      	beq.n	80096aa <HAL_DAC_Start_DMA+0x72>
 8009696:	2b08      	cmp	r3, #8
 8009698:	d00c      	beq.n	80096b4 <HAL_DAC_Start_DMA+0x7c>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d000      	beq.n	80096a0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800969e:	e039      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	613b      	str	r3, [r7, #16]
        break;
 80096a8:	e034      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	613b      	str	r3, [r7, #16]
        break;
 80096b2:	e02f      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3310      	adds	r3, #16
 80096ba:	613b      	str	r3, [r7, #16]
        break;
 80096bc:	e02a      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	4a3b      	ldr	r2, [pc, #236]	; (80097b0 <HAL_DAC_Start_DMA+0x178>)
 80096c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	4a3a      	ldr	r2, [pc, #232]	; (80097b4 <HAL_DAC_Start_DMA+0x17c>)
 80096cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	4a39      	ldr	r2, [pc, #228]	; (80097b8 <HAL_DAC_Start_DMA+0x180>)
 80096d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80096e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d009      	beq.n	8009700 <HAL_DAC_Start_DMA+0xc8>
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d00c      	beq.n	800970a <HAL_DAC_Start_DMA+0xd2>
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d000      	beq.n	80096f6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80096f4:	e00e      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3314      	adds	r3, #20
 80096fc:	613b      	str	r3, [r7, #16]
        break;
 80096fe:	e009      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3318      	adds	r3, #24
 8009706:	613b      	str	r3, [r7, #16]
        break;
 8009708:	e004      	b.n	8009714 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	331c      	adds	r3, #28
 8009710:	613b      	str	r3, [r7, #16]
        break;
 8009712:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d111      	bne.n	800973e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009728:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6898      	ldr	r0, [r3, #8]
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	f000 fbd2 	bl	8009edc <HAL_DMA_Start_IT>
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]
 800973c:	e010      	b.n	8009760 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800974c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68d8      	ldr	r0, [r3, #12]
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	f000 fbc0 	bl	8009edc <HAL_DMA_Start_IT>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10f      	bne.n	800978c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6819      	ldr	r1, [r3, #0]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2201      	movs	r2, #1
 800977a:	409a      	lsls	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009784:	2001      	movs	r0, #1
 8009786:	f7fe fa71 	bl	8007c6c <HAL_Delay>
 800978a:	e005      	b.n	8009798 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f043 0204 	orr.w	r2, r3, #4
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	08009c79 	.word	0x08009c79
 80097a8:	08009c9b 	.word	0x08009c9b
 80097ac:	08009cb7 	.word	0x08009cb7
 80097b0:	08009d21 	.word	0x08009d21
 80097b4:	08009d43 	.word	0x08009d43
 80097b8:	08009d5f 	.word	0x08009d5f

080097bc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6819      	ldr	r1, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43da      	mvns	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	400a      	ands	r2, r1
 80097e2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2201      	movs	r2, #1
 80097f2:	fa02 f303 	lsl.w	r3, r2, r3
 80097f6:	43da      	mvns	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	400a      	ands	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009800:	2001      	movs	r0, #1
 8009802:	f7fe fa33 	bl	8007c6c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10f      	bne.n	800982c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fbde 	bl	8009fd2 <HAL_DMA_Abort>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e00e      	b.n	800984a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fbce 	bl	8009fd2 <HAL_DMA_Abort>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009848:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2204      	movs	r2, #4
 8009854:	711a      	strb	r2, [r3, #4]
 8009856:	e002      	b.n	800985e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4413      	add	r3, r2
 8009892:	3308      	adds	r3, #8
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	e004      	b.n	80098a2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4413      	add	r3, r2
 800989e:	3314      	adds	r3, #20
 80098a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	461a      	mov	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990a:	e002      	b.n	8009912 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	795b      	ldrb	r3, [r3, #5]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_DAC_ConfigChannel+0x1c>
 8009938:	2302      	movs	r3, #2
 800993a:	e194      	b.n	8009c66 <HAL_DAC_ConfigChannel+0x346>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	2b04      	cmp	r3, #4
 800994e:	d174      	bne.n	8009a3a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d137      	bne.n	80099c6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009956:	f7fe f97d 	bl	8007c54 <HAL_GetTick>
 800995a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800995c:	e011      	b.n	8009982 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800995e:	f7fe f979 	bl	8007c54 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	d90a      	bls.n	8009982 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	f043 0208 	orr.w	r2, r3, #8
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2203      	movs	r2, #3
 800997c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e171      	b.n	8009c66 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e6      	bne.n	800995e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009990:	2001      	movs	r0, #1
 8009992:	f7fe f96b 	bl	8007c6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800999e:	641a      	str	r2, [r3, #64]	; 0x40
 80099a0:	e01e      	b.n	80099e0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80099a2:	f7fe f957 	bl	8007c54 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d90a      	bls.n	80099c6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f043 0208 	orr.w	r2, r3, #8
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2203      	movs	r2, #3
 80099c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e14f      	b.n	8009c66 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dbe8      	blt.n	80099a2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80099d0:	2001      	movs	r0, #1
 80099d2:	f7fe f94b 	bl	8007c6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80099f0:	fa01 f303 	lsl.w	r3, r1, r3
 80099f4:	43db      	mvns	r3, r3
 80099f6:	ea02 0103 	and.w	r1, r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	409a      	lsls	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	21ff      	movs	r1, #255	; 0xff
 8009a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a20:	43db      	mvns	r3, r3
 8009a22:	ea02 0103 	and.w	r1, r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f003 0310 	and.w	r3, r3, #16
 8009a30:	409a      	lsls	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d11d      	bne.n	8009a7e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	221f      	movs	r2, #31
 8009a52:	fa02 f303 	lsl.w	r3, r2, r3
 8009a56:	43db      	mvns	r3, r3
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f003 0310 	and.w	r3, r3, #16
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a72:	4313      	orrs	r3, r2
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2207      	movs	r2, #7
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	43db      	mvns	r3, r3
 8009a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a96:	4013      	ands	r3, r2
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	623b      	str	r3, [r7, #32]
 8009aaa:	e011      	b.n	8009ad0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	623b      	str	r3, [r7, #32]
 8009abc:	e008      	b.n	8009ad0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	623b      	str	r3, [r7, #32]
 8009aca:	e001      	b.n	8009ad0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009acc:	2300      	movs	r3, #0
 8009ace:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	6a3a      	ldr	r2, [r7, #32]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aea:	fa02 f303 	lsl.w	r3, r2, r3
 8009aee:	43db      	mvns	r3, r3
 8009af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af2:	4013      	ands	r3, r2
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	791b      	ldrb	r3, [r3, #4]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d102      	bne.n	8009b04 <HAL_DAC_ConfigChannel+0x1e4>
 8009afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b02:	e000      	b.n	8009b06 <HAL_DAC_ConfigChannel+0x1e6>
 8009b04:	2300      	movs	r3, #0
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b16:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1a:	43db      	mvns	r3, r3
 8009b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1e:	4013      	ands	r3, r2
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	795b      	ldrb	r3, [r3, #5]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d102      	bne.n	8009b30 <HAL_DAC_ConfigChannel+0x210>
 8009b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b2e:	e000      	b.n	8009b32 <HAL_DAC_ConfigChannel+0x212>
 8009b30:	2300      	movs	r3, #0
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d114      	bne.n	8009b72 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009b48:	f001 fae0 	bl	800b10c <HAL_RCC_GetHCLKFreq>
 8009b4c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	4a47      	ldr	r2, [pc, #284]	; (8009c70 <HAL_DAC_ConfigChannel+0x350>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d904      	bls.n	8009b60 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5e:	e00d      	b.n	8009b7c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	4a44      	ldr	r2, [pc, #272]	; (8009c74 <HAL_DAC_ConfigChannel+0x354>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d909      	bls.n	8009b7c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b70:	e004      	b.n	8009b7c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f003 0310 	and.w	r3, r3, #16
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6819      	ldr	r1, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43da      	mvns	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	400a      	ands	r2, r1
 8009bb2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bca:	43db      	mvns	r3, r3
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bce:	4013      	ands	r3, r2
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f003 0310 	and.w	r3, r3, #16
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	fa02 f303 	lsl.w	r3, r2, r3
 8009be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be6:	4313      	orrs	r3, r2
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6819      	ldr	r1, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	22c0      	movs	r2, #192	; 0xc0
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	43da      	mvns	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	400a      	ands	r2, r1
 8009c0c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	089b      	lsrs	r3, r3, #2
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	089b      	lsrs	r3, r3, #2
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c40:	43db      	mvns	r3, r3
 8009c42:	ea02 0103 	and.w	r1, r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	409a      	lsls	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	; 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	09896800 	.word	0x09896800
 8009c74:	04c4b400 	.word	0x04c4b400

08009c78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff fe16 	bl	80098b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	711a      	strb	r2, [r3, #4]
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fe0f 	bl	80098cc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f043 0204 	orr.w	r2, r3, #4
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fe05 	bl	80098e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	711a      	strb	r2, [r3, #4]
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff ffd8 	bl	8009ce4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2201      	movs	r2, #1
 8009d38:	711a      	strb	r2, [r3, #4]
}
 8009d3a:	bf00      	nop
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff ffd1 	bl	8009cf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f043 0204 	orr.w	r2, r3, #4
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ffc7 	bl	8009d0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	711a      	strb	r2, [r3, #4]
}
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e08d      	b.n	8009eba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	4b47      	ldr	r3, [pc, #284]	; (8009ec4 <HAL_DMA_Init+0x138>)
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d80f      	bhi.n	8009dca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	4b45      	ldr	r3, [pc, #276]	; (8009ec8 <HAL_DMA_Init+0x13c>)
 8009db2:	4413      	add	r3, r2
 8009db4:	4a45      	ldr	r2, [pc, #276]	; (8009ecc <HAL_DMA_Init+0x140>)
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	009a      	lsls	r2, r3, #2
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a42      	ldr	r2, [pc, #264]	; (8009ed0 <HAL_DMA_Init+0x144>)
 8009dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8009dc8:	e00e      	b.n	8009de8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4b40      	ldr	r3, [pc, #256]	; (8009ed4 <HAL_DMA_Init+0x148>)
 8009dd2:	4413      	add	r3, r2
 8009dd4:	4a3d      	ldr	r2, [pc, #244]	; (8009ecc <HAL_DMA_Init+0x140>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	091b      	lsrs	r3, r3, #4
 8009ddc:	009a      	lsls	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a3c      	ldr	r2, [pc, #240]	; (8009ed8 <HAL_DMA_Init+0x14c>)
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2202      	movs	r2, #2
 8009dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa10 	bl	800a260 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e48:	d102      	bne.n	8009e50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d010      	beq.n	8009e90 <HAL_DMA_Init+0x104>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d80c      	bhi.n	8009e90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa30 	bl	800a2dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	e008      	b.n	8009ea2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	40020407 	.word	0x40020407
 8009ec8:	bffdfff8 	.word	0xbffdfff8
 8009ecc:	cccccccd 	.word	0xcccccccd
 8009ed0:	40020000 	.word	0x40020000
 8009ed4:	bffdfbf8 	.word	0xbffdfbf8
 8009ed8:	40020400 	.word	0x40020400

08009edc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_DMA_Start_IT+0x20>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e066      	b.n	8009fca <HAL_DMA_Start_IT+0xee>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d155      	bne.n	8009fbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f954 	bl	800a1e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 020e 	orr.w	r2, r2, #14
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	e00f      	b.n	8009f74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 0204 	bic.w	r2, r2, #4
 8009f62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 020a 	orr.w	r2, r2, #10
 8009f72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d007      	beq.n	8009f92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d007      	beq.n	8009faa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fa8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0201 	orr.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	e005      	b.n	8009fc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d005      	beq.n	8009ff6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2204      	movs	r2, #4
 8009fee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e037      	b.n	800a066 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 020e 	bic.w	r2, r2, #14
 800a004:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a014:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	f003 021f 	and.w	r2, r3, #31
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2101      	movs	r1, #1
 800a034:	fa01 f202 	lsl.w	r2, r1, r2
 800a038:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a042:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a05a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a064:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a0:	f003 031f 	and.w	r3, r3, #31
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	409a      	lsls	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d026      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x7a>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d021      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0320 	and.w	r3, r3, #32
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d107      	bne.n	800a0d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0204 	bic.w	r2, r2, #4
 800a0d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0dc:	f003 021f 	and.w	r2, r3, #31
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	2104      	movs	r1, #4
 800a0e6:	fa01 f202 	lsl.w	r2, r1, r2
 800a0ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d071      	beq.n	800a1d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a0fc:	e06c      	b.n	800a1d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a102:	f003 031f 	and.w	r3, r3, #31
 800a106:	2202      	movs	r2, #2
 800a108:	409a      	lsls	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4013      	ands	r3, r2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d02e      	beq.n	800a170 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d029      	beq.n	800a170 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0320 	and.w	r3, r3, #32
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10b      	bne.n	800a142 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 020a 	bic.w	r2, r2, #10
 800a138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	f003 021f 	and.w	r2, r3, #31
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	2102      	movs	r1, #2
 800a150:	fa01 f202 	lsl.w	r2, r1, r2
 800a154:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d038      	beq.n	800a1d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a16e:	e033      	b.n	800a1d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a174:	f003 031f 	and.w	r3, r3, #31
 800a178:	2208      	movs	r2, #8
 800a17a:	409a      	lsls	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4013      	ands	r3, r2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d02a      	beq.n	800a1da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d025      	beq.n	800a1da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 020e 	bic.w	r2, r2, #14
 800a19c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a2:	f003 021f 	and.w	r2, r3, #31
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	fa01 f202 	lsl.w	r2, r1, r2
 800a1b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
}
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	60f8      	str	r0, [r7, #12]
 800a1ea:	60b9      	str	r1, [r7, #8]
 800a1ec:	607a      	str	r2, [r7, #4]
 800a1ee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a1f8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a20a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a210:	f003 021f 	and.w	r2, r3, #31
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a218:	2101      	movs	r1, #1
 800a21a:	fa01 f202 	lsl.w	r2, r1, r2
 800a21e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d108      	bne.n	800a242 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a240:	e007      	b.n	800a252 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]
}
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
	...

0800a260 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a270:	429a      	cmp	r2, r3
 800a272:	d802      	bhi.n	800a27a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a274:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	e001      	b.n	800a27e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a27a:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a27c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	3b08      	subs	r3, #8
 800a28a:	4a12      	ldr	r2, [pc, #72]	; (800a2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a28c:	fba2 2303 	umull	r2, r3, r2, r3
 800a290:	091b      	lsrs	r3, r3, #4
 800a292:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	089b      	lsrs	r3, r3, #2
 800a29a:	009a      	lsls	r2, r3, #2
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a0b      	ldr	r2, [pc, #44]	; (800a2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a2aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f003 031f 	and.w	r3, r3, #31
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	409a      	lsls	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40020407 	.word	0x40020407
 800a2cc:	40020800 	.word	0x40020800
 800a2d0:	40020820 	.word	0x40020820
 800a2d4:	cccccccd 	.word	0xcccccccd
 800a2d8:	40020880 	.word	0x40020880

0800a2dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a08      	ldr	r2, [pc, #32]	; (800a320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a2fe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3b01      	subs	r3, #1
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	2201      	movs	r2, #1
 800a30a:	409a      	lsls	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a310:	bf00      	nop
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	1000823f 	.word	0x1000823f
 800a320:	40020940 	.word	0x40020940

0800a324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a332:	e15a      	b.n	800a5ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	2101      	movs	r1, #1
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	fa01 f303 	lsl.w	r3, r1, r3
 800a340:	4013      	ands	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 814c 	beq.w	800a5e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d00b      	beq.n	800a36c <HAL_GPIO_Init+0x48>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d007      	beq.n	800a36c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a360:	2b11      	cmp	r3, #17
 800a362:	d003      	beq.n	800a36c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b12      	cmp	r3, #18
 800a36a:	d130      	bne.n	800a3ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	2203      	movs	r2, #3
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	43db      	mvns	r3, r3
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4013      	ands	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4313      	orrs	r3, r2
 800a394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3aa:	43db      	mvns	r3, r3
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	091b      	lsrs	r3, r3, #4
 800a3b8:	f003 0201 	and.w	r2, r3, #1
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	2203      	movs	r2, #3
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	689a      	ldr	r2, [r3, #8]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d003      	beq.n	800a40e <HAL_GPIO_Init+0xea>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2b12      	cmp	r3, #18
 800a40c:	d123      	bne.n	800a456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	08da      	lsrs	r2, r3, #3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3208      	adds	r2, #8
 800a416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f003 0307 	and.w	r3, r3, #7
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	220f      	movs	r2, #15
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	43db      	mvns	r3, r3
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4013      	ands	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	691a      	ldr	r2, [r3, #16]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	fa02 f303 	lsl.w	r3, r2, r3
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	4313      	orrs	r3, r2
 800a446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	08da      	lsrs	r2, r3, #3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3208      	adds	r2, #8
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	2203      	movs	r2, #3
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	43db      	mvns	r3, r3
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	4013      	ands	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f003 0203 	and.w	r2, r3, #3
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	fa02 f303 	lsl.w	r3, r2, r3
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4313      	orrs	r3, r2
 800a482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 80a6 	beq.w	800a5e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a498:	4b5b      	ldr	r3, [pc, #364]	; (800a608 <HAL_GPIO_Init+0x2e4>)
 800a49a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49c:	4a5a      	ldr	r2, [pc, #360]	; (800a608 <HAL_GPIO_Init+0x2e4>)
 800a49e:	f043 0301 	orr.w	r3, r3, #1
 800a4a2:	6613      	str	r3, [r2, #96]	; 0x60
 800a4a4:	4b58      	ldr	r3, [pc, #352]	; (800a608 <HAL_GPIO_Init+0x2e4>)
 800a4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	60bb      	str	r3, [r7, #8]
 800a4ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4b0:	4a56      	ldr	r2, [pc, #344]	; (800a60c <HAL_GPIO_Init+0x2e8>)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	089b      	lsrs	r3, r3, #2
 800a4b6:	3302      	adds	r3, #2
 800a4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	220f      	movs	r2, #15
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	43db      	mvns	r3, r3
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a4da:	d01f      	beq.n	800a51c <HAL_GPIO_Init+0x1f8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a4c      	ldr	r2, [pc, #304]	; (800a610 <HAL_GPIO_Init+0x2ec>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d019      	beq.n	800a518 <HAL_GPIO_Init+0x1f4>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a4b      	ldr	r2, [pc, #300]	; (800a614 <HAL_GPIO_Init+0x2f0>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d013      	beq.n	800a514 <HAL_GPIO_Init+0x1f0>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a4a      	ldr	r2, [pc, #296]	; (800a618 <HAL_GPIO_Init+0x2f4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00d      	beq.n	800a510 <HAL_GPIO_Init+0x1ec>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a49      	ldr	r2, [pc, #292]	; (800a61c <HAL_GPIO_Init+0x2f8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <HAL_GPIO_Init+0x1e8>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a48      	ldr	r2, [pc, #288]	; (800a620 <HAL_GPIO_Init+0x2fc>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d101      	bne.n	800a508 <HAL_GPIO_Init+0x1e4>
 800a504:	2305      	movs	r3, #5
 800a506:	e00a      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a508:	2306      	movs	r3, #6
 800a50a:	e008      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a50c:	2304      	movs	r3, #4
 800a50e:	e006      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a510:	2303      	movs	r3, #3
 800a512:	e004      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a514:	2302      	movs	r3, #2
 800a516:	e002      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a518:	2301      	movs	r3, #1
 800a51a:	e000      	b.n	800a51e <HAL_GPIO_Init+0x1fa>
 800a51c:	2300      	movs	r3, #0
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	f002 0203 	and.w	r2, r2, #3
 800a524:	0092      	lsls	r2, r2, #2
 800a526:	4093      	lsls	r3, r2
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a52e:	4937      	ldr	r1, [pc, #220]	; (800a60c <HAL_GPIO_Init+0x2e8>)
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	089b      	lsrs	r3, r3, #2
 800a534:	3302      	adds	r3, #2
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a53c:	4b39      	ldr	r3, [pc, #228]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	43db      	mvns	r3, r3
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4013      	ands	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a560:	4a30      	ldr	r2, [pc, #192]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a566:	4b2f      	ldr	r3, [pc, #188]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	43db      	mvns	r3, r3
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4013      	ands	r3, r2
 800a574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4313      	orrs	r3, r2
 800a588:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a58a:	4a26      	ldr	r2, [pc, #152]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a590:	4b24      	ldr	r3, [pc, #144]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	43db      	mvns	r3, r3
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	4013      	ands	r3, r2
 800a59e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a5b4:	4a1b      	ldr	r2, [pc, #108]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	43db      	mvns	r3, r3
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a5de:	4a11      	ldr	r2, [pc, #68]	; (800a624 <HAL_GPIO_Init+0x300>)
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f47f ae9d 	bne.w	800a334 <HAL_GPIO_Init+0x10>
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	40021000 	.word	0x40021000
 800a60c:	40010000 	.word	0x40010000
 800a610:	48000400 	.word	0x48000400
 800a614:	48000800 	.word	0x48000800
 800a618:	48000c00 	.word	0x48000c00
 800a61c:	48001000 	.word	0x48001000
 800a620:	48001400 	.word	0x48001400
 800a624:	40010400 	.word	0x40010400

0800a628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	807b      	strh	r3, [r7, #2]
 800a634:	4613      	mov	r3, r2
 800a636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a638:	787b      	ldrb	r3, [r7, #1]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a63e:	887a      	ldrh	r2, [r7, #2]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a644:	e002      	b.n	800a64c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a646:	887a      	ldrh	r2, [r7, #2]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d141      	bne.n	800a6ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a666:	4b4b      	ldr	r3, [pc, #300]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a672:	d131      	bne.n	800a6d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a674:	4b47      	ldr	r3, [pc, #284]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a67a:	4a46      	ldr	r2, [pc, #280]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a67c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a684:	4b43      	ldr	r3, [pc, #268]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a68c:	4a41      	ldr	r2, [pc, #260]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a68e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a694:	4b40      	ldr	r3, [pc, #256]	; (800a798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2232      	movs	r2, #50	; 0x32
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	4a3f      	ldr	r2, [pc, #252]	; (800a79c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a4:	0c9b      	lsrs	r3, r3, #18
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6aa:	e002      	b.n	800a6b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6b2:	4b38      	ldr	r3, [pc, #224]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6be:	d102      	bne.n	800a6c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1f2      	bne.n	800a6ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a6c6:	4b33      	ldr	r3, [pc, #204]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6d2:	d158      	bne.n	800a786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e057      	b.n	800a788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a6d8:	4b2e      	ldr	r3, [pc, #184]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6de:	4a2d      	ldr	r2, [pc, #180]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a6e8:	e04d      	b.n	800a786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f0:	d141      	bne.n	800a776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a6f2:	4b28      	ldr	r3, [pc, #160]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fe:	d131      	bne.n	800a764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a700:	4b24      	ldr	r3, [pc, #144]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a706:	4a23      	ldr	r2, [pc, #140]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a70c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a710:	4b20      	ldr	r3, [pc, #128]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a718:	4a1e      	ldr	r2, [pc, #120]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a71a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a71e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a720:	4b1d      	ldr	r3, [pc, #116]	; (800a798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2232      	movs	r2, #50	; 0x32
 800a726:	fb02 f303 	mul.w	r3, r2, r3
 800a72a:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a72c:	fba2 2303 	umull	r2, r3, r2, r3
 800a730:	0c9b      	lsrs	r3, r3, #18
 800a732:	3301      	adds	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a736:	e002      	b.n	800a73e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a73e:	4b15      	ldr	r3, [pc, #84]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74a:	d102      	bne.n	800a752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f2      	bne.n	800a738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a752:	4b10      	ldr	r3, [pc, #64]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a75a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a75e:	d112      	bne.n	800a786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e011      	b.n	800a788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a764:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76a:	4a0a      	ldr	r2, [pc, #40]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a76c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a774:	e007      	b.n	800a786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a776:	4b07      	ldr	r3, [pc, #28]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a77e:	4a05      	ldr	r2, [pc, #20]	; (800a794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40007000 	.word	0x40007000
 800a798:	20000ca4 	.word	0x20000ca4
 800a79c:	431bde83 	.word	0x431bde83

0800a7a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e308      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d075      	beq.n	800a8aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7be:	4ba3      	ldr	r3, [pc, #652]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7c8:	4ba0      	ldr	r3, [pc, #640]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b0c      	cmp	r3, #12
 800a7d6:	d102      	bne.n	800a7de <HAL_RCC_OscConfig+0x3e>
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d002      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x44>
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d10b      	bne.n	800a7fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7e4:	4b99      	ldr	r3, [pc, #612]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d05b      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x108>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d157      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e2e3      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a804:	d106      	bne.n	800a814 <HAL_RCC_OscConfig+0x74>
 800a806:	4b91      	ldr	r3, [pc, #580]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a90      	ldr	r2, [pc, #576]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a80c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	e01d      	b.n	800a850 <HAL_RCC_OscConfig+0xb0>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a81c:	d10c      	bne.n	800a838 <HAL_RCC_OscConfig+0x98>
 800a81e:	4b8b      	ldr	r3, [pc, #556]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a8a      	ldr	r2, [pc, #552]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	4b88      	ldr	r3, [pc, #544]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a87      	ldr	r2, [pc, #540]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	e00b      	b.n	800a850 <HAL_RCC_OscConfig+0xb0>
 800a838:	4b84      	ldr	r3, [pc, #528]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a83      	ldr	r2, [pc, #524]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	4b81      	ldr	r3, [pc, #516]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a80      	ldr	r2, [pc, #512]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a84a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a84e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d013      	beq.n	800a880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fd f9fc 	bl	8007c54 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a860:	f7fd f9f8 	bl	8007c54 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b64      	cmp	r3, #100	; 0x64
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e2a8      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a872:	4b76      	ldr	r3, [pc, #472]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0f0      	beq.n	800a860 <HAL_RCC_OscConfig+0xc0>
 800a87e:	e014      	b.n	800a8aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a880:	f7fd f9e8 	bl	8007c54 <HAL_GetTick>
 800a884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a886:	e008      	b.n	800a89a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a888:	f7fd f9e4 	bl	8007c54 <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b64      	cmp	r3, #100	; 0x64
 800a894:	d901      	bls.n	800a89a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e294      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a89a:	4b6c      	ldr	r3, [pc, #432]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1f0      	bne.n	800a888 <HAL_RCC_OscConfig+0xe8>
 800a8a6:	e000      	b.n	800a8aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d075      	beq.n	800a9a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8b6:	4b65      	ldr	r3, [pc, #404]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f003 030c 	and.w	r3, r3, #12
 800a8be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8c0:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	2b0c      	cmp	r3, #12
 800a8ce:	d102      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x136>
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d002      	beq.n	800a8dc <HAL_RCC_OscConfig+0x13c>
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d11f      	bne.n	800a91c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8dc:	4b5b      	ldr	r3, [pc, #364]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x154>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e267      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f4:	4b55      	ldr	r3, [pc, #340]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	061b      	lsls	r3, r3, #24
 800a902:	4952      	ldr	r1, [pc, #328]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a904:	4313      	orrs	r3, r2
 800a906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a908:	4b51      	ldr	r3, [pc, #324]	; (800aa50 <HAL_RCC_OscConfig+0x2b0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fd f955 	bl	8007bbc <HAL_InitTick>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d043      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e253      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d023      	beq.n	800a96c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a924:	4b49      	ldr	r3, [pc, #292]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a48      	ldr	r2, [pc, #288]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a92a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a92e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a930:	f7fd f990 	bl	8007c54 <HAL_GetTick>
 800a934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a936:	e008      	b.n	800a94a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a938:	f7fd f98c 	bl	8007c54 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b02      	cmp	r3, #2
 800a944:	d901      	bls.n	800a94a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e23c      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a94a:	4b40      	ldr	r3, [pc, #256]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f0      	beq.n	800a938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a956:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	061b      	lsls	r3, r3, #24
 800a964:	4939      	ldr	r1, [pc, #228]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a966:	4313      	orrs	r3, r2
 800a968:	604b      	str	r3, [r1, #4]
 800a96a:	e01a      	b.n	800a9a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a96c:	4b37      	ldr	r3, [pc, #220]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a36      	ldr	r2, [pc, #216]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a978:	f7fd f96c 	bl	8007c54 <HAL_GetTick>
 800a97c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a97e:	e008      	b.n	800a992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a980:	f7fd f968 	bl	8007c54 <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d901      	bls.n	800a992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e218      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a992:	4b2e      	ldr	r3, [pc, #184]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1f0      	bne.n	800a980 <HAL_RCC_OscConfig+0x1e0>
 800a99e:	e000      	b.n	800a9a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d03c      	beq.n	800aa28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01c      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9b6:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a9b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9bc:	4a23      	ldr	r2, [pc, #140]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9c6:	f7fd f945 	bl	8007c54 <HAL_GetTick>
 800a9ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9cc:	e008      	b.n	800a9e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9ce:	f7fd f941 	bl	8007c54 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d901      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e1f1      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9e0:	4b1a      	ldr	r3, [pc, #104]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a9e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0ef      	beq.n	800a9ce <HAL_RCC_OscConfig+0x22e>
 800a9ee:	e01b      	b.n	800aa28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9f0:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a9f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9f6:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800a9f8:	f023 0301 	bic.w	r3, r3, #1
 800a9fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa00:	f7fd f928 	bl	8007c54 <HAL_GetTick>
 800aa04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa06:	e008      	b.n	800aa1a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa08:	f7fd f924 	bl	8007c54 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d901      	bls.n	800aa1a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e1d4      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800aa1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ef      	bne.n	800aa08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 80ab 	beq.w	800ab8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa36:	2300      	movs	r3, #0
 800aa38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aa3a:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <HAL_RCC_OscConfig+0x2ac>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <HAL_RCC_OscConfig+0x2b4>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e005      	b.n	800aa56 <HAL_RCC_OscConfig+0x2b6>
 800aa4a:	bf00      	nop
 800aa4c:	40021000 	.word	0x40021000
 800aa50:	20000ca8 	.word	0x20000ca8
 800aa54:	2300      	movs	r3, #0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00d      	beq.n	800aa76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa5a:	4baf      	ldr	r3, [pc, #700]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5e:	4aae      	ldr	r2, [pc, #696]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aa60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa64:	6593      	str	r3, [r2, #88]	; 0x58
 800aa66:	4bac      	ldr	r3, [pc, #688]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aa72:	2301      	movs	r3, #1
 800aa74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa76:	4ba9      	ldr	r3, [pc, #676]	; (800ad1c <HAL_RCC_OscConfig+0x57c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d118      	bne.n	800aab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa82:	4ba6      	ldr	r3, [pc, #664]	; (800ad1c <HAL_RCC_OscConfig+0x57c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4aa5      	ldr	r2, [pc, #660]	; (800ad1c <HAL_RCC_OscConfig+0x57c>)
 800aa88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa8e:	f7fd f8e1 	bl	8007c54 <HAL_GetTick>
 800aa92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa96:	f7fd f8dd 	bl	8007c54 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e18d      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaa8:	4b9c      	ldr	r3, [pc, #624]	; (800ad1c <HAL_RCC_OscConfig+0x57c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d108      	bne.n	800aace <HAL_RCC_OscConfig+0x32e>
 800aabc:	4b96      	ldr	r3, [pc, #600]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aabe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac2:	4a95      	ldr	r2, [pc, #596]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aac4:	f043 0301 	orr.w	r3, r3, #1
 800aac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aacc:	e024      	b.n	800ab18 <HAL_RCC_OscConfig+0x378>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	d110      	bne.n	800aaf8 <HAL_RCC_OscConfig+0x358>
 800aad6:	4b90      	ldr	r3, [pc, #576]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aadc:	4a8e      	ldr	r2, [pc, #568]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aade:	f043 0304 	orr.w	r3, r3, #4
 800aae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aae6:	4b8c      	ldr	r3, [pc, #560]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaec:	4a8a      	ldr	r2, [pc, #552]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aaf6:	e00f      	b.n	800ab18 <HAL_RCC_OscConfig+0x378>
 800aaf8:	4b87      	ldr	r3, [pc, #540]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aafe:	4a86      	ldr	r2, [pc, #536]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab08:	4b83      	ldr	r3, [pc, #524]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab0e:	4a82      	ldr	r2, [pc, #520]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab10:	f023 0304 	bic.w	r3, r3, #4
 800ab14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d016      	beq.n	800ab4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab20:	f7fd f898 	bl	8007c54 <HAL_GetTick>
 800ab24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab26:	e00a      	b.n	800ab3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab28:	f7fd f894 	bl	8007c54 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e142      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab3e:	4b76      	ldr	r3, [pc, #472]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0ed      	beq.n	800ab28 <HAL_RCC_OscConfig+0x388>
 800ab4c:	e015      	b.n	800ab7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab4e:	f7fd f881 	bl	8007c54 <HAL_GetTick>
 800ab52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab54:	e00a      	b.n	800ab6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab56:	f7fd f87d 	bl	8007c54 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d901      	bls.n	800ab6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e12b      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab6c:	4b6a      	ldr	r3, [pc, #424]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1ed      	bne.n	800ab56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ab7a:	7ffb      	ldrb	r3, [r7, #31]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d105      	bne.n	800ab8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab80:	4b65      	ldr	r3, [pc, #404]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab84:	4a64      	ldr	r2, [pc, #400]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ab86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d03c      	beq.n	800ac12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d01c      	beq.n	800abda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aba0:	4b5d      	ldr	r3, [pc, #372]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aba6:	4a5c      	ldr	r2, [pc, #368]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aba8:	f043 0301 	orr.w	r3, r3, #1
 800abac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abb0:	f7fd f850 	bl	8007c54 <HAL_GetTick>
 800abb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abb6:	e008      	b.n	800abca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abb8:	f7fd f84c 	bl	8007c54 <HAL_GetTick>
 800abbc:	4602      	mov	r2, r0
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d901      	bls.n	800abca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e0fc      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abca:	4b53      	ldr	r3, [pc, #332]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800abcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abd0:	f003 0302 	and.w	r3, r3, #2
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0ef      	beq.n	800abb8 <HAL_RCC_OscConfig+0x418>
 800abd8:	e01b      	b.n	800ac12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800abda:	4b4f      	ldr	r3, [pc, #316]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800abdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abe0:	4a4d      	ldr	r2, [pc, #308]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800abe2:	f023 0301 	bic.w	r3, r3, #1
 800abe6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abea:	f7fd f833 	bl	8007c54 <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800abf0:	e008      	b.n	800ac04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abf2:	f7fd f82f 	bl	8007c54 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e0df      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ac04:	4b44      	ldr	r3, [pc, #272]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1ef      	bne.n	800abf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 80d3 	beq.w	800adc2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac1c:	4b3e      	ldr	r3, [pc, #248]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f003 030c 	and.w	r3, r3, #12
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	f000 808d 	beq.w	800ad44 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d15a      	bne.n	800ace8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac32:	4b39      	ldr	r3, [pc, #228]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a38      	ldr	r2, [pc, #224]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac3e:	f7fd f809 	bl	8007c54 <HAL_GetTick>
 800ac42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac44:	e008      	b.n	800ac58 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac46:	f7fd f805 	bl	8007c54 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d901      	bls.n	800ac58 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e0b5      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac58:	4b2f      	ldr	r3, [pc, #188]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f0      	bne.n	800ac46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac64:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	4b2d      	ldr	r3, [pc, #180]	; (800ad20 <HAL_RCC_OscConfig+0x580>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6a11      	ldr	r1, [r2, #32]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac74:	3a01      	subs	r2, #1
 800ac76:	0112      	lsls	r2, r2, #4
 800ac78:	4311      	orrs	r1, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ac7e:	0212      	lsls	r2, r2, #8
 800ac80:	4311      	orrs	r1, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac86:	0852      	lsrs	r2, r2, #1
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	0552      	lsls	r2, r2, #21
 800ac8c:	4311      	orrs	r1, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac92:	0852      	lsrs	r2, r2, #1
 800ac94:	3a01      	subs	r2, #1
 800ac96:	0652      	lsls	r2, r2, #25
 800ac98:	4311      	orrs	r1, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac9e:	06d2      	lsls	r2, r2, #27
 800aca0:	430a      	orrs	r2, r1
 800aca2:	491d      	ldr	r1, [pc, #116]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a1a      	ldr	r2, [pc, #104]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acb4:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc0:	f7fc ffc8 	bl	8007c54 <HAL_GetTick>
 800acc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acc6:	e008      	b.n	800acda <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acc8:	f7fc ffc4 	bl	8007c54 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e074      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acda:	4b0f      	ldr	r3, [pc, #60]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d0f0      	beq.n	800acc8 <HAL_RCC_OscConfig+0x528>
 800ace6:	e06c      	b.n	800adc2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ace8:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a0a      	ldr	r2, [pc, #40]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acf2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800acf4:	4b08      	ldr	r3, [pc, #32]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4a07      	ldr	r2, [pc, #28]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	4a04      	ldr	r2, [pc, #16]	; (800ad18 <HAL_RCC_OscConfig+0x578>)
 800ad06:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ad0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad10:	f7fc ffa0 	bl	8007c54 <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad16:	e00e      	b.n	800ad36 <HAL_RCC_OscConfig+0x596>
 800ad18:	40021000 	.word	0x40021000
 800ad1c:	40007000 	.word	0x40007000
 800ad20:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad24:	f7fc ff96 	bl	8007c54 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e046      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad36:	4b25      	ldr	r3, [pc, #148]	; (800adcc <HAL_RCC_OscConfig+0x62c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1f0      	bne.n	800ad24 <HAL_RCC_OscConfig+0x584>
 800ad42:	e03e      	b.n	800adc2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e039      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ad50:	4b1e      	ldr	r3, [pc, #120]	; (800adcc <HAL_RCC_OscConfig+0x62c>)
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f003 0203 	and.w	r2, r3, #3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d12c      	bne.n	800adbe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d123      	bne.n	800adbe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d11b      	bne.n	800adbe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d113      	bne.n	800adbe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	085b      	lsrs	r3, r3, #1
 800ada2:	3b01      	subs	r3, #1
 800ada4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d109      	bne.n	800adbe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	085b      	lsrs	r3, r3, #1
 800adb6:	3b01      	subs	r3, #1
 800adb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800adba:	429a      	cmp	r2, r3
 800adbc:	d001      	beq.n	800adc2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	40021000 	.word	0x40021000

0800add0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e11e      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ade8:	4b91      	ldr	r3, [pc, #580]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 030f 	and.w	r3, r3, #15
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d910      	bls.n	800ae18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adf6:	4b8e      	ldr	r3, [pc, #568]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f023 020f 	bic.w	r2, r3, #15
 800adfe:	498c      	ldr	r1, [pc, #560]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae06:	4b8a      	ldr	r3, [pc, #552]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d001      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e106      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d073      	beq.n	800af0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d129      	bne.n	800ae80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae2c:	4b81      	ldr	r3, [pc, #516]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e0f4      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ae3c:	f000 f972 	bl	800b124 <RCC_GetSysClockFreqFromPLLSource>
 800ae40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	4a7c      	ldr	r2, [pc, #496]	; (800b038 <HAL_RCC_ClockConfig+0x268>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d93f      	bls.n	800aeca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae4a:	4b7a      	ldr	r3, [pc, #488]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d033      	beq.n	800aeca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d12f      	bne.n	800aeca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae6a:	4b72      	ldr	r3, [pc, #456]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae72:	4a70      	ldr	r2, [pc, #448]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ae7a:	2380      	movs	r3, #128	; 0x80
 800ae7c:	617b      	str	r3, [r7, #20]
 800ae7e:	e024      	b.n	800aeca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d107      	bne.n	800ae98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae88:	4b6a      	ldr	r3, [pc, #424]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d109      	bne.n	800aea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e0c6      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae98:	4b66      	ldr	r3, [pc, #408]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e0be      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800aea8:	f000 f8ce 	bl	800b048 <HAL_RCC_GetSysClockFreq>
 800aeac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	4a61      	ldr	r2, [pc, #388]	; (800b038 <HAL_RCC_ClockConfig+0x268>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d909      	bls.n	800aeca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aeb6:	4b5f      	ldr	r3, [pc, #380]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aebe:	4a5d      	ldr	r2, [pc, #372]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aec6:	2380      	movs	r3, #128	; 0x80
 800aec8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aeca:	4b5a      	ldr	r3, [pc, #360]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f023 0203 	bic.w	r2, r3, #3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4957      	ldr	r1, [pc, #348]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aedc:	f7fc feba 	bl	8007c54 <HAL_GetTick>
 800aee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aee2:	e00a      	b.n	800aefa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aee4:	f7fc feb6 	bl	8007c54 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e095      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aefa:	4b4e      	ldr	r3, [pc, #312]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 020c 	and.w	r2, r3, #12
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	429a      	cmp	r2, r3
 800af0a:	d1eb      	bne.n	800aee4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0302 	and.w	r3, r3, #2
 800af14:	2b00      	cmp	r3, #0
 800af16:	d023      	beq.n	800af60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af24:	4b43      	ldr	r3, [pc, #268]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	4a42      	ldr	r2, [pc, #264]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0308 	and.w	r3, r3, #8
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d007      	beq.n	800af4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800af3c:	4b3d      	ldr	r3, [pc, #244]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af44:	4a3b      	ldr	r2, [pc, #236]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af4c:	4b39      	ldr	r3, [pc, #228]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	4936      	ldr	r1, [pc, #216]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	608b      	str	r3, [r1, #8]
 800af5e:	e008      	b.n	800af72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b80      	cmp	r3, #128	; 0x80
 800af64:	d105      	bne.n	800af72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800af66:	4b33      	ldr	r3, [pc, #204]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	4a32      	ldr	r2, [pc, #200]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800af6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af72:	4b2f      	ldr	r3, [pc, #188]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 030f 	and.w	r3, r3, #15
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d21d      	bcs.n	800afbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af80:	4b2b      	ldr	r3, [pc, #172]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f023 020f 	bic.w	r2, r3, #15
 800af88:	4929      	ldr	r1, [pc, #164]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800af90:	f7fc fe60 	bl	8007c54 <HAL_GetTick>
 800af94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af96:	e00a      	b.n	800afae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af98:	f7fc fe5c 	bl	8007c54 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d901      	bls.n	800afae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e03b      	b.n	800b026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afae:	4b20      	ldr	r3, [pc, #128]	; (800b030 <HAL_RCC_ClockConfig+0x260>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 030f 	and.w	r3, r3, #15
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d1ed      	bne.n	800af98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	4917      	ldr	r1, [pc, #92]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 0308 	and.w	r3, r3, #8
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d009      	beq.n	800affa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800afe6:	4b13      	ldr	r3, [pc, #76]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	490f      	ldr	r1, [pc, #60]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800affa:	f000 f825 	bl	800b048 <HAL_RCC_GetSysClockFreq>
 800affe:	4601      	mov	r1, r0
 800b000:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <HAL_RCC_ClockConfig+0x264>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	091b      	lsrs	r3, r3, #4
 800b006:	f003 030f 	and.w	r3, r3, #15
 800b00a:	4a0c      	ldr	r2, [pc, #48]	; (800b03c <HAL_RCC_ClockConfig+0x26c>)
 800b00c:	5cd3      	ldrb	r3, [r2, r3]
 800b00e:	f003 031f 	and.w	r3, r3, #31
 800b012:	fa21 f303 	lsr.w	r3, r1, r3
 800b016:	4a0a      	ldr	r2, [pc, #40]	; (800b040 <HAL_RCC_ClockConfig+0x270>)
 800b018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <HAL_RCC_ClockConfig+0x274>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fc fdcc 	bl	8007bbc <HAL_InitTick>
 800b024:	4603      	mov	r3, r0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	40022000 	.word	0x40022000
 800b034:	40021000 	.word	0x40021000
 800b038:	04c4b400 	.word	0x04c4b400
 800b03c:	08011788 	.word	0x08011788
 800b040:	20000ca4 	.word	0x20000ca4
 800b044:	20000ca8 	.word	0x20000ca8

0800b048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b04e:	4b2c      	ldr	r3, [pc, #176]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f003 030c 	and.w	r3, r3, #12
 800b056:	2b04      	cmp	r3, #4
 800b058:	d102      	bne.n	800b060 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b05a:	4b2a      	ldr	r3, [pc, #168]	; (800b104 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	e047      	b.n	800b0f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f003 030c 	and.w	r3, r3, #12
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d102      	bne.n	800b072 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b06c:	4b26      	ldr	r3, [pc, #152]	; (800b108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b06e:	613b      	str	r3, [r7, #16]
 800b070:	e03e      	b.n	800b0f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b072:	4b23      	ldr	r3, [pc, #140]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 030c 	and.w	r3, r3, #12
 800b07a:	2b0c      	cmp	r3, #12
 800b07c:	d136      	bne.n	800b0ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b07e:	4b20      	ldr	r3, [pc, #128]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b088:	4b1d      	ldr	r3, [pc, #116]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	091b      	lsrs	r3, r3, #4
 800b08e:	f003 030f 	and.w	r3, r3, #15
 800b092:	3301      	adds	r3, #1
 800b094:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d10c      	bne.n	800b0b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b09c:	4a1a      	ldr	r2, [pc, #104]	; (800b108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a4:	4a16      	ldr	r2, [pc, #88]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0a6:	68d2      	ldr	r2, [r2, #12]
 800b0a8:	0a12      	lsrs	r2, r2, #8
 800b0aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
 800b0b2:	617b      	str	r3, [r7, #20]
      break;
 800b0b4:	e00c      	b.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0b6:	4a13      	ldr	r2, [pc, #76]	; (800b104 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	4a10      	ldr	r2, [pc, #64]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0c0:	68d2      	ldr	r2, [r2, #12]
 800b0c2:	0a12      	lsrs	r2, r2, #8
 800b0c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0c8:	fb02 f303 	mul.w	r3, r2, r3
 800b0cc:	617b      	str	r3, [r7, #20]
      break;
 800b0ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	0e5b      	lsrs	r3, r3, #25
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	3301      	adds	r3, #1
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	613b      	str	r3, [r7, #16]
 800b0ea:	e001      	b.n	800b0f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b0f0:	693b      	ldr	r3, [r7, #16]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	40021000 	.word	0x40021000
 800b104:	00f42400 	.word	0x00f42400
 800b108:	007a1200 	.word	0x007a1200

0800b10c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b110:	4b03      	ldr	r3, [pc, #12]	; (800b120 <HAL_RCC_GetHCLKFreq+0x14>)
 800b112:	681b      	ldr	r3, [r3, #0]
}
 800b114:	4618      	mov	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20000ca4 	.word	0x20000ca4

0800b124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b12a:	4b1e      	ldr	r3, [pc, #120]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	f003 0303 	and.w	r3, r3, #3
 800b132:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b134:	4b1b      	ldr	r3, [pc, #108]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	091b      	lsrs	r3, r3, #4
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	3301      	adds	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b03      	cmp	r3, #3
 800b146:	d10c      	bne.n	800b162 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b148:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b150:	4a14      	ldr	r2, [pc, #80]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b152:	68d2      	ldr	r2, [r2, #12]
 800b154:	0a12      	lsrs	r2, r2, #8
 800b156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	617b      	str	r3, [r7, #20]
    break;
 800b160:	e00c      	b.n	800b17c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b162:	4a12      	ldr	r2, [pc, #72]	; (800b1ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16a:	4a0e      	ldr	r2, [pc, #56]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b16c:	68d2      	ldr	r2, [r2, #12]
 800b16e:	0a12      	lsrs	r2, r2, #8
 800b170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b174:	fb02 f303 	mul.w	r3, r2, r3
 800b178:	617b      	str	r3, [r7, #20]
    break;
 800b17a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	0e5b      	lsrs	r3, r3, #25
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	3301      	adds	r3, #1
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	fbb2 f3f3 	udiv	r3, r2, r3
 800b194:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b196:	687b      	ldr	r3, [r7, #4]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	371c      	adds	r7, #28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	40021000 	.word	0x40021000
 800b1a8:	007a1200 	.word	0x007a1200
 800b1ac:	00f42400 	.word	0x00f42400

0800b1b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1bc:	2300      	movs	r3, #0
 800b1be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 8098 	beq.w	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1d2:	4b43      	ldr	r3, [pc, #268]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10d      	bne.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1de:	4b40      	ldr	r3, [pc, #256]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e2:	4a3f      	ldr	r2, [pc, #252]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1ea:	4b3d      	ldr	r3, [pc, #244]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1f2:	60bb      	str	r3, [r7, #8]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1fa:	4b3a      	ldr	r3, [pc, #232]	; (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a39      	ldr	r2, [pc, #228]	; (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b206:	f7fc fd25 	bl	8007c54 <HAL_GetTick>
 800b20a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b20c:	e009      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b20e:	f7fc fd21 	bl	8007c54 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d902      	bls.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	74fb      	strb	r3, [r7, #19]
        break;
 800b220:	e005      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b222:	4b30      	ldr	r3, [pc, #192]	; (800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0ef      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b22e:	7cfb      	ldrb	r3, [r7, #19]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d159      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b234:	4b2a      	ldr	r3, [pc, #168]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b23e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d01e      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d019      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b250:	4b23      	ldr	r3, [pc, #140]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b25a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b25c:	4b20      	ldr	r3, [pc, #128]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b262:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b26c:	4b1c      	ldr	r3, [pc, #112]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b272:	4a1b      	ldr	r2, [pc, #108]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b27c:	4a18      	ldr	r2, [pc, #96]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d016      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b28e:	f7fc fce1 	bl	8007c54 <HAL_GetTick>
 800b292:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b294:	e00b      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b296:	f7fc fcdd 	bl	8007c54 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d902      	bls.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	74fb      	strb	r3, [r7, #19]
            break;
 800b2ac:	e006      	b.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0ec      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b2bc:	7cfb      	ldrb	r3, [r7, #19]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10b      	bne.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2c2:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d0:	4903      	ldr	r1, [pc, #12]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b2d8:	e008      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	74bb      	strb	r3, [r7, #18]
 800b2de:	e005      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b2e0:	40021000 	.word	0x40021000
 800b2e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b2ec:	7c7b      	ldrb	r3, [r7, #17]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d105      	bne.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2f2:	4baf      	ldr	r3, [pc, #700]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	4aae      	ldr	r2, [pc, #696]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b2f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b30a:	4ba9      	ldr	r3, [pc, #676]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b310:	f023 0203 	bic.w	r2, r3, #3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	49a5      	ldr	r1, [pc, #660]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00a      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b32c:	4ba0      	ldr	r3, [pc, #640]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b332:	f023 020c 	bic.w	r2, r3, #12
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	499d      	ldr	r1, [pc, #628]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b34e:	4b98      	ldr	r3, [pc, #608]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	4994      	ldr	r1, [pc, #592]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00a      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b370:	4b8f      	ldr	r3, [pc, #572]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	498c      	ldr	r1, [pc, #560]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b380:	4313      	orrs	r3, r2
 800b382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0310 	and.w	r3, r3, #16
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b392:	4b87      	ldr	r3, [pc, #540]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	4983      	ldr	r1, [pc, #524]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0320 	and.w	r3, r3, #32
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00a      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3b4:	4b7e      	ldr	r3, [pc, #504]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	497b      	ldr	r1, [pc, #492]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b3d6:	4b76      	ldr	r3, [pc, #472]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	4972      	ldr	r1, [pc, #456]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00a      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b3f8:	4b6d      	ldr	r3, [pc, #436]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	496a      	ldr	r1, [pc, #424]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b41a:	4b65      	ldr	r3, [pc, #404]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	4961      	ldr	r1, [pc, #388]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00a      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b43c:	4b5c      	ldr	r3, [pc, #368]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b43e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b442:	f023 0203 	bic.w	r2, r3, #3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	4959      	ldr	r1, [pc, #356]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b45e:	4b54      	ldr	r3, [pc, #336]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	4950      	ldr	r1, [pc, #320]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d015      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b480:	4b4b      	ldr	r3, [pc, #300]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48e:	4948      	ldr	r1, [pc, #288]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b490:	4313      	orrs	r3, r2
 800b492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b49e:	d105      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4a0:	4b43      	ldr	r3, [pc, #268]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	4a42      	ldr	r2, [pc, #264]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d015      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b4b8:	4b3d      	ldr	r3, [pc, #244]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	493a      	ldr	r1, [pc, #232]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4d6:	d105      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4d8:	4b35      	ldr	r3, [pc, #212]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4a34      	ldr	r2, [pc, #208]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d015      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4f0:	4b2f      	ldr	r3, [pc, #188]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	492c      	ldr	r1, [pc, #176]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b500:	4313      	orrs	r3, r2
 800b502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b50e:	d105      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b510:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4a26      	ldr	r2, [pc, #152]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b51a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b524:	2b00      	cmp	r3, #0
 800b526:	d015      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b528:	4b21      	ldr	r3, [pc, #132]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b536:	491e      	ldr	r1, [pc, #120]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b546:	d105      	bne.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b548:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	4a18      	ldr	r2, [pc, #96]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b54e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b552:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d015      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b560:	4b13      	ldr	r3, [pc, #76]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	4910      	ldr	r1, [pc, #64]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b570:	4313      	orrs	r3, r2
 800b572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b57e:	d105      	bne.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	4a0a      	ldr	r2, [pc, #40]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b58a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d018      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b598:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a6:	4902      	ldr	r1, [pc, #8]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b5ae:	e001      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b5b0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5bc:	d105      	bne.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b5be:	4b21      	ldr	r3, [pc, #132]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4a20      	ldr	r2, [pc, #128]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5c8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d015      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b5d6:	4b1b      	ldr	r3, [pc, #108]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e4:	4917      	ldr	r1, [pc, #92]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f4:	d105      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b5f6:	4b13      	ldr	r3, [pc, #76]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	4a12      	ldr	r2, [pc, #72]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b5fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b600:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d015      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b60e:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61c:	4909      	ldr	r1, [pc, #36]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b62c:	d105      	bne.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4a04      	ldr	r2, [pc, #16]	; (800b644 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b638:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b63a:	7cbb      	ldrb	r3, [r7, #18]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	40021000 	.word	0x40021000

0800b648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e084      	b.n	800b764 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7fb fc4f 	bl	8006f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2202      	movs	r2, #2
 800b67e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b690:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b69a:	d902      	bls.n	800b6a2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	e002      	b.n	800b6a8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b6a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b6b0:	d007      	beq.n	800b6c2 <HAL_SPI_Init+0x7a>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6ba:	d002      	beq.n	800b6c2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10b      	bne.n	800b6e2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6d2:	d903      	bls.n	800b6dc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b6da:	e002      	b.n	800b6e2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b700:	431a      	orrs	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	ea42 0103 	orr.w	r1, r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	430a      	orrs	r2, r1
 800b71a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	f003 0204 	and.w	r2, r3, #4
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	431a      	orrs	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b730:	431a      	orrs	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	ea42 0103 	orr.w	r1, r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	430a      	orrs	r2, r1
 800b742:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	69da      	ldr	r2, [r3, #28]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e049      	b.n	800b812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fc f8f8 	bl	8007988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f000 fc7a 	bl	800c0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d001      	beq.n	800b834 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e019      	b.n	800b868 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689a      	ldr	r2, [r3, #8]
 800b842:	4b0c      	ldr	r3, [pc, #48]	; (800b874 <HAL_TIM_Base_Start+0x58>)
 800b844:	4013      	ands	r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b06      	cmp	r3, #6
 800b84c:	d00b      	beq.n	800b866 <HAL_TIM_Base_Start+0x4a>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b854:	d007      	beq.n	800b866 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f042 0201 	orr.w	r2, r2, #1
 800b864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	00010007 	.word	0x00010007

0800b878 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6a1a      	ldr	r2, [r3, #32]
 800b886:	f241 1311 	movw	r3, #4369	; 0x1111
 800b88a:	4013      	ands	r3, r2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10f      	bne.n	800b8b0 <HAL_TIM_Base_Stop+0x38>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6a1a      	ldr	r2, [r3, #32]
 800b896:	f244 4344 	movw	r3, #17476	; 0x4444
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d107      	bne.n	800b8b0 <HAL_TIM_Base_Stop+0x38>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f022 0201 	bic.w	r2, r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d001      	beq.n	800b8e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e021      	b.n	800b924 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f042 0201 	orr.w	r2, r2, #1
 800b8f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <HAL_TIM_Base_Start_IT+0x68>)
 800b900:	4013      	ands	r3, r2
 800b902:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b06      	cmp	r3, #6
 800b908:	d00b      	beq.n	800b922 <HAL_TIM_Base_Start_IT+0x5a>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b910:	d007      	beq.n	800b922 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	00010007 	.word	0x00010007

0800b934 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0201 	bic.w	r2, r2, #1
 800b94a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a1a      	ldr	r2, [r3, #32]
 800b952:	f241 1311 	movw	r3, #4369	; 0x1111
 800b956:	4013      	ands	r3, r2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10f      	bne.n	800b97c <HAL_TIM_Base_Stop_IT+0x48>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6a1a      	ldr	r2, [r3, #32]
 800b962:	f244 4344 	movw	r3, #17476	; 0x4444
 800b966:	4013      	ands	r3, r2
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d107      	bne.n	800b97c <HAL_TIM_Base_Stop_IT+0x48>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f022 0201 	bic.w	r2, r2, #1
 800b97a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e097      	b.n	800bad6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fb ff88 	bl	80078d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	6812      	ldr	r2, [r2, #0]
 800b9d2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800b9d6:	f023 0307 	bic.w	r3, r3, #7
 800b9da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f000 fb5c 	bl	800c0a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba14:	f023 0303 	bic.w	r3, r3, #3
 800ba18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	689a      	ldr	r2, [r3, #8]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	4313      	orrs	r3, r2
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba32:	f023 030c 	bic.w	r3, r3, #12
 800ba36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	68da      	ldr	r2, [r3, #12]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	011a      	lsls	r2, r3, #4
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	031b      	lsls	r3, r3, #12
 800ba62:	4313      	orrs	r3, r2
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ba70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ba78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4313      	orrs	r3, r2
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d122      	bne.n	800bb3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d11b      	bne.n	800bb3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f06f 0202 	mvn.w	r2, #2
 800bb0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	f003 0303 	and.w	r3, r3, #3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 faa1 	bl	800c068 <HAL_TIM_IC_CaptureCallback>
 800bb26:	e005      	b.n	800bb34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fa93 	bl	800c054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 faa4 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	f003 0304 	and.w	r3, r3, #4
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d122      	bne.n	800bb8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d11b      	bne.n	800bb8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f06f 0204 	mvn.w	r2, #4
 800bb5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2202      	movs	r2, #2
 800bb64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fa77 	bl	800c068 <HAL_TIM_IC_CaptureCallback>
 800bb7a:	e005      	b.n	800bb88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fa69 	bl	800c054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fa7a 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b08      	cmp	r3, #8
 800bb9a:	d122      	bne.n	800bbe2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	d11b      	bne.n	800bbe2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f06f 0208 	mvn.w	r2, #8
 800bbb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d003      	beq.n	800bbd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fa4d 	bl	800c068 <HAL_TIM_IC_CaptureCallback>
 800bbce:	e005      	b.n	800bbdc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa3f 	bl	800c054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fa50 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	f003 0310 	and.w	r3, r3, #16
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d122      	bne.n	800bc36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	f003 0310 	and.w	r3, r3, #16
 800bbfa:	2b10      	cmp	r3, #16
 800bbfc:	d11b      	bne.n	800bc36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f06f 0210 	mvn.w	r2, #16
 800bc06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2208      	movs	r2, #8
 800bc0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fa23 	bl	800c068 <HAL_TIM_IC_CaptureCallback>
 800bc22:	e005      	b.n	800bc30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fa15 	bl	800c054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa26 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d10e      	bne.n	800bc62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d107      	bne.n	800bc62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f06f 0201 	mvn.w	r2, #1
 800bc5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f9ef 	bl	800c040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6c:	2b80      	cmp	r3, #128	; 0x80
 800bc6e:	d10e      	bne.n	800bc8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7a:	2b80      	cmp	r3, #128	; 0x80
 800bc7c:	d107      	bne.n	800bc8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fd5d 	bl	800c748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9c:	d10e      	bne.n	800bcbc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca8:	2b80      	cmp	r3, #128	; 0x80
 800bcaa:	d107      	bne.n	800bcbc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bcb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fd50 	bl	800c75c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	d10e      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd4:	2b40      	cmp	r3, #64	; 0x40
 800bcd6:	d107      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f9d4 	bl	800c090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d10e      	bne.n	800bd14 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f003 0320 	and.w	r3, r3, #32
 800bd00:	2b20      	cmp	r3, #32
 800bd02:	d107      	bne.n	800bd14 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f06f 0220 	mvn.w	r2, #32
 800bd0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fd10 	bl	800c734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd22:	d10f      	bne.n	800bd44 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd32:	d107      	bne.n	800bd44 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bd3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fd16 	bl	800c770 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd52:	d10f      	bne.n	800bd74 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd62:	d107      	bne.n	800bd74 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bd6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd08 	bl	800c784 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd82:	d10f      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd92:	d107      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fcfa 	bl	800c798 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdb2:	d10f      	bne.n	800bdd4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdc2:	d107      	bne.n	800bdd4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bdcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fcec 	bl	800c7ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d101      	bne.n	800bdf4 <HAL_TIM_ConfigClockSource+0x18>
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e0d2      	b.n	800bf9a <HAL_TIM_ConfigClockSource+0x1be>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2202      	movs	r2, #2
 800be00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800be12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be30:	f000 80a9 	beq.w	800bf86 <HAL_TIM_ConfigClockSource+0x1aa>
 800be34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be38:	d81a      	bhi.n	800be70 <HAL_TIM_ConfigClockSource+0x94>
 800be3a:	2b30      	cmp	r3, #48	; 0x30
 800be3c:	f000 809a 	beq.w	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be40:	2b30      	cmp	r3, #48	; 0x30
 800be42:	d809      	bhi.n	800be58 <HAL_TIM_ConfigClockSource+0x7c>
 800be44:	2b10      	cmp	r3, #16
 800be46:	f000 8095 	beq.w	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be4a:	2b20      	cmp	r3, #32
 800be4c:	f000 8092 	beq.w	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 808f 	beq.w	800bf74 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800be56:	e097      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800be58:	2b50      	cmp	r3, #80	; 0x50
 800be5a:	d05b      	beq.n	800bf14 <HAL_TIM_ConfigClockSource+0x138>
 800be5c:	2b50      	cmp	r3, #80	; 0x50
 800be5e:	d802      	bhi.n	800be66 <HAL_TIM_ConfigClockSource+0x8a>
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d077      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800be64:	e090      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800be66:	2b60      	cmp	r3, #96	; 0x60
 800be68:	d064      	beq.n	800bf34 <HAL_TIM_ConfigClockSource+0x158>
 800be6a:	2b70      	cmp	r3, #112	; 0x70
 800be6c:	d028      	beq.n	800bec0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800be6e:	e08b      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800be70:	4a4c      	ldr	r2, [pc, #304]	; (800bfa4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d07e      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be76:	4a4b      	ldr	r2, [pc, #300]	; (800bfa4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d810      	bhi.n	800be9e <HAL_TIM_ConfigClockSource+0xc2>
 800be7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be80:	d078      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be86:	d803      	bhi.n	800be90 <HAL_TIM_ConfigClockSource+0xb4>
 800be88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be8c:	d02f      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x112>
      break;
 800be8e:	e07b      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800be90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be94:	d06e      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800be96:	4a44      	ldr	r2, [pc, #272]	; (800bfa8 <HAL_TIM_ConfigClockSource+0x1cc>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d06b      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800be9c:	e074      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800be9e:	4a43      	ldr	r2, [pc, #268]	; (800bfac <HAL_TIM_ConfigClockSource+0x1d0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d067      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800bea4:	4a41      	ldr	r2, [pc, #260]	; (800bfac <HAL_TIM_ConfigClockSource+0x1d0>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d803      	bhi.n	800beb2 <HAL_TIM_ConfigClockSource+0xd6>
 800beaa:	4a41      	ldr	r2, [pc, #260]	; (800bfb0 <HAL_TIM_ConfigClockSource+0x1d4>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d061      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800beb0:	e06a      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800beb2:	4a40      	ldr	r2, [pc, #256]	; (800bfb4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d05d      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
 800beb8:	4a3f      	ldr	r2, [pc, #252]	; (800bfb8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d05a      	beq.n	800bf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bebe:	e063      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	6899      	ldr	r1, [r3, #8]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f000 fac8 	bl	800c464 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	609a      	str	r2, [r3, #8]
      break;
 800beec:	e04c      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	6899      	ldr	r1, [r3, #8]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f000 fab1 	bl	800c464 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	689a      	ldr	r2, [r3, #8]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf10:	609a      	str	r2, [r3, #8]
      break;
 800bf12:	e039      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	461a      	mov	r2, r3
 800bf22:	f000 fa23 	bl	800c36c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2150      	movs	r1, #80	; 0x50
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 fa7c 	bl	800c42a <TIM_ITRx_SetConfig>
      break;
 800bf32:	e029      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	6859      	ldr	r1, [r3, #4]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	461a      	mov	r2, r3
 800bf42:	f000 fa42 	bl	800c3ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2160      	movs	r1, #96	; 0x60
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fa6c 	bl	800c42a <TIM_ITRx_SetConfig>
      break;
 800bf52:	e019      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	6859      	ldr	r1, [r3, #4]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	461a      	mov	r2, r3
 800bf62:	f000 fa03 	bl	800c36c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2140      	movs	r1, #64	; 0x40
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fa5c 	bl	800c42a <TIM_ITRx_SetConfig>
      break;
 800bf72:	e009      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f000 fa53 	bl	800c42a <TIM_ITRx_SetConfig>
      break;
 800bf84:	e000      	b.n	800bf88 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800bf86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	00100030 	.word	0x00100030
 800bfa8:	00100020 	.word	0x00100020
 800bfac:	00100050 	.word	0x00100050
 800bfb0:	00100040 	.word	0x00100040
 800bfb4:	00100060 	.word	0x00100060
 800bfb8:	00100070 	.word	0x00100070

0800bfbc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	e031      	b.n	800c038 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f904 	bl	800c1f4 <TIM_SlaveTimer_SetConfig>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e018      	b.n	800c038 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c014:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c024:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a46      	ldr	r2, [pc, #280]	; (800c1d0 <TIM_Base_SetConfig+0x12c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d017      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0c2:	d013      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a43      	ldr	r2, [pc, #268]	; (800c1d4 <TIM_Base_SetConfig+0x130>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00f      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a42      	ldr	r2, [pc, #264]	; (800c1d8 <TIM_Base_SetConfig+0x134>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00b      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a41      	ldr	r2, [pc, #260]	; (800c1dc <TIM_Base_SetConfig+0x138>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d007      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a40      	ldr	r2, [pc, #256]	; (800c1e0 <TIM_Base_SetConfig+0x13c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d003      	beq.n	800c0ec <TIM_Base_SetConfig+0x48>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a3f      	ldr	r2, [pc, #252]	; (800c1e4 <TIM_Base_SetConfig+0x140>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d108      	bne.n	800c0fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a33      	ldr	r2, [pc, #204]	; (800c1d0 <TIM_Base_SetConfig+0x12c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d023      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10c:	d01f      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a30      	ldr	r2, [pc, #192]	; (800c1d4 <TIM_Base_SetConfig+0x130>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d01b      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a2f      	ldr	r2, [pc, #188]	; (800c1d8 <TIM_Base_SetConfig+0x134>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d017      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a2e      	ldr	r2, [pc, #184]	; (800c1dc <TIM_Base_SetConfig+0x138>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d013      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2d      	ldr	r2, [pc, #180]	; (800c1e0 <TIM_Base_SetConfig+0x13c>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00f      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a2d      	ldr	r2, [pc, #180]	; (800c1e8 <TIM_Base_SetConfig+0x144>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00b      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <TIM_Base_SetConfig+0x148>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d007      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a2b      	ldr	r2, [pc, #172]	; (800c1f0 <TIM_Base_SetConfig+0x14c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d003      	beq.n	800c14e <TIM_Base_SetConfig+0xaa>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a26      	ldr	r2, [pc, #152]	; (800c1e4 <TIM_Base_SetConfig+0x140>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d108      	bne.n	800c160 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a12      	ldr	r2, [pc, #72]	; (800c1d0 <TIM_Base_SetConfig+0x12c>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d013      	beq.n	800c1b4 <TIM_Base_SetConfig+0x110>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a14      	ldr	r2, [pc, #80]	; (800c1e0 <TIM_Base_SetConfig+0x13c>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d00f      	beq.n	800c1b4 <TIM_Base_SetConfig+0x110>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <TIM_Base_SetConfig+0x144>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00b      	beq.n	800c1b4 <TIM_Base_SetConfig+0x110>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a13      	ldr	r2, [pc, #76]	; (800c1ec <TIM_Base_SetConfig+0x148>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d007      	beq.n	800c1b4 <TIM_Base_SetConfig+0x110>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a12      	ldr	r2, [pc, #72]	; (800c1f0 <TIM_Base_SetConfig+0x14c>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d003      	beq.n	800c1b4 <TIM_Base_SetConfig+0x110>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a0d      	ldr	r2, [pc, #52]	; (800c1e4 <TIM_Base_SetConfig+0x140>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d103      	bne.n	800c1bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	691a      	ldr	r2, [r3, #16]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	615a      	str	r2, [r3, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	40012c00 	.word	0x40012c00
 800c1d4:	40000400 	.word	0x40000400
 800c1d8:	40000800 	.word	0x40000800
 800c1dc:	40000c00 	.word	0x40000c00
 800c1e0:	40013400 	.word	0x40013400
 800c1e4:	40015000 	.word	0x40015000
 800c1e8:	40014000 	.word	0x40014000
 800c1ec:	40014400 	.word	0x40014400
 800c1f0:	40014800 	.word	0x40014800

0800c1f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c210:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	4313      	orrs	r3, r2
 800c21a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c222:	f023 0307 	bic.w	r3, r3, #7
 800c226:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	4313      	orrs	r3, r2
 800c230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	2b70      	cmp	r3, #112	; 0x70
 800c240:	d034      	beq.n	800c2ac <TIM_SlaveTimer_SetConfig+0xb8>
 800c242:	2b70      	cmp	r3, #112	; 0x70
 800c244:	d811      	bhi.n	800c26a <TIM_SlaveTimer_SetConfig+0x76>
 800c246:	2b30      	cmp	r3, #48	; 0x30
 800c248:	d07d      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c24a:	2b30      	cmp	r3, #48	; 0x30
 800c24c:	d806      	bhi.n	800c25c <TIM_SlaveTimer_SetConfig+0x68>
 800c24e:	2b10      	cmp	r3, #16
 800c250:	d079      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c252:	2b20      	cmp	r3, #32
 800c254:	d077      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d075      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800c25a:	e075      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c25c:	2b50      	cmp	r3, #80	; 0x50
 800c25e:	d05e      	beq.n	800c31e <TIM_SlaveTimer_SetConfig+0x12a>
 800c260:	2b60      	cmp	r3, #96	; 0x60
 800c262:	d066      	beq.n	800c332 <TIM_SlaveTimer_SetConfig+0x13e>
 800c264:	2b40      	cmp	r3, #64	; 0x40
 800c266:	d02c      	beq.n	800c2c2 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800c268:	e06e      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c26a:	4a3a      	ldr	r2, [pc, #232]	; (800c354 <TIM_SlaveTimer_SetConfig+0x160>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d06a      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c270:	4a38      	ldr	r2, [pc, #224]	; (800c354 <TIM_SlaveTimer_SetConfig+0x160>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d809      	bhi.n	800c28a <TIM_SlaveTimer_SetConfig+0x96>
 800c276:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c27a:	d064      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c27c:	4a36      	ldr	r2, [pc, #216]	; (800c358 <TIM_SlaveTimer_SetConfig+0x164>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d061      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c286:	d05e      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c288:	e05e      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c28a:	4a34      	ldr	r2, [pc, #208]	; (800c35c <TIM_SlaveTimer_SetConfig+0x168>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d05a      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c290:	4a32      	ldr	r2, [pc, #200]	; (800c35c <TIM_SlaveTimer_SetConfig+0x168>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d803      	bhi.n	800c29e <TIM_SlaveTimer_SetConfig+0xaa>
 800c296:	4a32      	ldr	r2, [pc, #200]	; (800c360 <TIM_SlaveTimer_SetConfig+0x16c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d054      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c29c:	e054      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c29e:	4a31      	ldr	r2, [pc, #196]	; (800c364 <TIM_SlaveTimer_SetConfig+0x170>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d050      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
 800c2a4:	4a30      	ldr	r2, [pc, #192]	; (800c368 <TIM_SlaveTimer_SetConfig+0x174>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d04d      	beq.n	800c346 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c2aa:	e04d      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	68d9      	ldr	r1, [r3, #12]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	f000 f8d2 	bl	800c464 <TIM_ETR_SetConfig>
      break;
 800c2c0:	e042      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d004      	beq.n	800c2d4 <TIM_SlaveTimer_SetConfig+0xe0>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800c2d2:	d101      	bne.n	800c2d8 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e038      	b.n	800c34a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6a1a      	ldr	r2, [r3, #32]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f022 0201 	bic.w	r2, r2, #1
 800c2ee:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2fe:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	011b      	lsls	r3, r3, #4
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4313      	orrs	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	621a      	str	r2, [r3, #32]
      break;
 800c31c:	e014      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	6899      	ldr	r1, [r3, #8]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	461a      	mov	r2, r3
 800c32c:	f000 f81e 	bl	800c36c <TIM_TI1_ConfigInputStage>
      break;
 800c330:	e00a      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	6899      	ldr	r1, [r3, #8]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	461a      	mov	r2, r3
 800c340:	f000 f843 	bl	800c3ca <TIM_TI2_ConfigInputStage>
      break;
 800c344:	e000      	b.n	800c348 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800c346:	bf00      	nop
  }
  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	00100030 	.word	0x00100030
 800c358:	00100020 	.word	0x00100020
 800c35c:	00100050 	.word	0x00100050
 800c360:	00100040 	.word	0x00100040
 800c364:	00100060 	.word	0x00100060
 800c368:	00100070 	.word	0x00100070

0800c36c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	f023 0201 	bic.w	r2, r3, #1
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f023 030a 	bic.w	r3, r3, #10
 800c3a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	621a      	str	r2, [r3, #32]
}
 800c3be:	bf00      	nop
 800c3c0:	371c      	adds	r7, #28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	f023 0210 	bic.w	r2, r3, #16
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	031b      	lsls	r3, r3, #12
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c406:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	011b      	lsls	r3, r3, #4
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	4313      	orrs	r3, r2
 800c410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	621a      	str	r2, [r3, #32]
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b085      	sub	sp, #20
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	f043 0307 	orr.w	r3, r3, #7
 800c450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	609a      	str	r2, [r3, #8]
}
 800c458:	bf00      	nop
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c47e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	021a      	lsls	r2, r3, #8
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	431a      	orrs	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	4313      	orrs	r3, r2
 800c490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	609a      	str	r2, [r3, #8]
}
 800c498:	bf00      	nop
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d101      	bne.n	800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e074      	b.n	800c5a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a34      	ldr	r2, [pc, #208]	; (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d009      	beq.n	800c4fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a33      	ldr	r2, [pc, #204]	; (800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d004      	beq.n	800c4fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a31      	ldr	r2, [pc, #196]	; (800c5bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d108      	bne.n	800c50c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c500:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4313      	orrs	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d022      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c53c:	d01d      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a1f      	ldr	r2, [pc, #124]	; (800c5c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d018      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a1d      	ldr	r2, [pc, #116]	; (800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a1c      	ldr	r2, [pc, #112]	; (800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00e      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a15      	ldr	r2, [pc, #84]	; (800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d009      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a18      	ldr	r2, [pc, #96]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d004      	beq.n	800c57a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a11      	ldr	r2, [pc, #68]	; (800c5bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d10c      	bne.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	40012c00 	.word	0x40012c00
 800c5b8:	40013400 	.word	0x40013400
 800c5bc:	40015000 	.word	0x40015000
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	40000800 	.word	0x40000800
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	40014000 	.word	0x40014000

0800c5d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d101      	bne.n	800c5ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e096      	b.n	800c71a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4313      	orrs	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	4313      	orrs	r3, r2
 800c638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	4313      	orrs	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c652:	4313      	orrs	r3, r2
 800c654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	041b      	lsls	r3, r3, #16
 800c662:	4313      	orrs	r3, r2
 800c664:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a2f      	ldr	r2, [pc, #188]	; (800c728 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d009      	beq.n	800c684 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a2d      	ldr	r2, [pc, #180]	; (800c72c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d004      	beq.n	800c684 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a2c      	ldr	r2, [pc, #176]	; (800c730 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d106      	bne.n	800c692 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	4313      	orrs	r3, r2
 800c690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a24      	ldr	r2, [pc, #144]	; (800c728 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d009      	beq.n	800c6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a22      	ldr	r2, [pc, #136]	; (800c72c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d004      	beq.n	800c6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a21      	ldr	r2, [pc, #132]	; (800c730 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d12b      	bne.n	800c708 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ba:	051b      	lsls	r3, r3, #20
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a11      	ldr	r2, [pc, #68]	; (800c728 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d009      	beq.n	800c6fa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a10      	ldr	r2, [pc, #64]	; (800c72c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d004      	beq.n	800c6fa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a0e      	ldr	r2, [pc, #56]	; (800c730 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d106      	bne.n	800c708 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	40012c00 	.word	0x40012c00
 800c72c:	40013400 	.word	0x40013400
 800c730:	40015000 	.word	0x40015000

0800c734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c764:	bf00      	nop
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c778:	bf00      	nop
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <LL_EXTI_EnableIT_0_31>:
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <LL_EXTI_EnableIT_0_31+0x20>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4904      	ldr	r1, [pc, #16]	; (800c7e0 <LL_EXTI_EnableIT_0_31+0x20>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	600b      	str	r3, [r1, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	40010400 	.word	0x40010400

0800c7e4 <LL_EXTI_EnableIT_32_63>:
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800c7ec:	4b05      	ldr	r3, [pc, #20]	; (800c804 <LL_EXTI_EnableIT_32_63+0x20>)
 800c7ee:	6a1a      	ldr	r2, [r3, #32]
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <LL_EXTI_EnableIT_32_63+0x20>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	620b      	str	r3, [r1, #32]
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	40010400 	.word	0x40010400

0800c808 <LL_EXTI_DisableIT_0_31>:
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <LL_EXTI_DisableIT_0_31+0x24>)
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	43db      	mvns	r3, r3
 800c818:	4904      	ldr	r1, [pc, #16]	; (800c82c <LL_EXTI_DisableIT_0_31+0x24>)
 800c81a:	4013      	ands	r3, r2
 800c81c:	600b      	str	r3, [r1, #0]
}
 800c81e:	bf00      	nop
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	40010400 	.word	0x40010400

0800c830 <LL_EXTI_DisableIT_32_63>:
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <LL_EXTI_DisableIT_32_63+0x24>)
 800c83a:	6a1a      	ldr	r2, [r3, #32]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	43db      	mvns	r3, r3
 800c840:	4904      	ldr	r1, [pc, #16]	; (800c854 <LL_EXTI_DisableIT_32_63+0x24>)
 800c842:	4013      	ands	r3, r2
 800c844:	620b      	str	r3, [r1, #32]
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	40010400 	.word	0x40010400

0800c858 <LL_EXTI_EnableEvent_0_31>:
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	4904      	ldr	r1, [pc, #16]	; (800c878 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4313      	orrs	r3, r2
 800c86a:	604b      	str	r3, [r1, #4]
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	40010400 	.word	0x40010400

0800c87c <LL_EXTI_EnableEvent_32_63>:
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800c884:	4b05      	ldr	r3, [pc, #20]	; (800c89c <LL_EXTI_EnableEvent_32_63+0x20>)
 800c886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c888:	4904      	ldr	r1, [pc, #16]	; (800c89c <LL_EXTI_EnableEvent_32_63+0x20>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	40010400 	.word	0x40010400

0800c8a0 <LL_EXTI_DisableEvent_0_31>:
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	43db      	mvns	r3, r3
 800c8b0:	4904      	ldr	r1, [pc, #16]	; (800c8c4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	604b      	str	r3, [r1, #4]
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	40010400 	.word	0x40010400

0800c8c8 <LL_EXTI_DisableEvent_32_63>:
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800c8d0:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <LL_EXTI_DisableEvent_32_63+0x24>)
 800c8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	43db      	mvns	r3, r3
 800c8d8:	4904      	ldr	r1, [pc, #16]	; (800c8ec <LL_EXTI_DisableEvent_32_63+0x24>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c8de:	bf00      	nop
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	40010400 	.word	0x40010400

0800c8f0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c8f8:	4b05      	ldr	r3, [pc, #20]	; (800c910 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	4904      	ldr	r1, [pc, #16]	; (800c910 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4313      	orrs	r3, r2
 800c902:	608b      	str	r3, [r1, #8]
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	40010400 	.word	0x40010400

0800c914 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c91c:	4b05      	ldr	r3, [pc, #20]	; (800c934 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c91e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c920:	4904      	ldr	r1, [pc, #16]	; (800c934 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4313      	orrs	r3, r2
 800c926:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	40010400 	.word	0x40010400

0800c938 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c940:	4b06      	ldr	r3, [pc, #24]	; (800c95c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	43db      	mvns	r3, r3
 800c948:	4904      	ldr	r1, [pc, #16]	; (800c95c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c94a:	4013      	ands	r3, r2
 800c94c:	608b      	str	r3, [r1, #8]
}
 800c94e:	bf00      	nop
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	40010400 	.word	0x40010400

0800c960 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c96a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	43db      	mvns	r3, r3
 800c970:	4904      	ldr	r1, [pc, #16]	; (800c984 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c972:	4013      	ands	r3, r2
 800c974:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	40010400 	.word	0x40010400

0800c988 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c990:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	4904      	ldr	r1, [pc, #16]	; (800c9a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4313      	orrs	r3, r2
 800c99a:	60cb      	str	r3, [r1, #12]
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	40010400 	.word	0x40010400

0800c9ac <LL_EXTI_EnableFallingTrig_32_63>:
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b8:	4904      	ldr	r1, [pc, #16]	; (800c9cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	40010400 	.word	0x40010400

0800c9d0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c9d8:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c9da:	68da      	ldr	r2, [r3, #12]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	43db      	mvns	r3, r3
 800c9e0:	4904      	ldr	r1, [pc, #16]	; (800c9f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	60cb      	str	r3, [r1, #12]
}
 800c9e6:	bf00      	nop
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	40010400 	.word	0x40010400

0800c9f8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ca00:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ca02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	43db      	mvns	r3, r3
 800ca08:	4904      	ldr	r1, [pc, #16]	; (800ca1c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	40010400 	.word	0x40010400

0800ca20 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7a1b      	ldrb	r3, [r3, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 80c8 	beq.w	800cbc6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d05d      	beq.n	800cafa <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7a5b      	ldrb	r3, [r3, #9]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d00e      	beq.n	800ca64 <LL_EXTI_Init+0x44>
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d017      	beq.n	800ca7a <LL_EXTI_Init+0x5a>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d120      	bne.n	800ca90 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff ff24 	bl	800c8a0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff feaf 	bl	800c7c0 <LL_EXTI_EnableIT_0_31>
          break;
 800ca62:	e018      	b.n	800ca96 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff fecd 	bl	800c808 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fef0 	bl	800c858 <LL_EXTI_EnableEvent_0_31>
          break;
 800ca78:	e00d      	b.n	800ca96 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7ff fe9e 	bl	800c7c0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fee5 	bl	800c858 <LL_EXTI_EnableEvent_0_31>
          break;
 800ca8e:	e002      	b.n	800ca96 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ca90:	2301      	movs	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
          break;
 800ca94:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	7a9b      	ldrb	r3, [r3, #10]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d02d      	beq.n	800cafa <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	7a9b      	ldrb	r3, [r3, #10]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d00e      	beq.n	800cac4 <LL_EXTI_Init+0xa4>
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d017      	beq.n	800cada <LL_EXTI_Init+0xba>
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d120      	bne.n	800caf0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff ff8c 	bl	800c9d0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff ff17 	bl	800c8f0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800cac2:	e01b      	b.n	800cafc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4618      	mov	r0, r3
 800caca:	f7ff ff35 	bl	800c938 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff ff58 	bl	800c988 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800cad8:	e010      	b.n	800cafc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff ff06 	bl	800c8f0 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff ff4d 	bl	800c988 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800caee:	e005      	b.n	800cafc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f043 0302 	orr.w	r3, r3, #2
 800caf6:	60fb      	str	r3, [r7, #12]
            break;
 800caf8:	e000      	b.n	800cafc <LL_EXTI_Init+0xdc>
        }
      }
 800cafa:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d075      	beq.n	800cbf0 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7a5b      	ldrb	r3, [r3, #9]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d00e      	beq.n	800cb2a <LL_EXTI_Init+0x10a>
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d017      	beq.n	800cb40 <LL_EXTI_Init+0x120>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d120      	bne.n	800cb56 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff fed5 	bl	800c8c8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff fe5e 	bl	800c7e4 <LL_EXTI_EnableIT_32_63>
          break;
 800cb28:	e01a      	b.n	800cb60 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff fe7e 	bl	800c830 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fe9f 	bl	800c87c <LL_EXTI_EnableEvent_32_63>
          break;
 800cb3e:	e00f      	b.n	800cb60 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff fe4d 	bl	800c7e4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff fe94 	bl	800c87c <LL_EXTI_EnableEvent_32_63>
          break;
 800cb54:	e004      	b.n	800cb60 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f043 0304 	orr.w	r3, r3, #4
 800cb5c:	60fb      	str	r3, [r7, #12]
          break;
 800cb5e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7a9b      	ldrb	r3, [r3, #10]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d043      	beq.n	800cbf0 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	7a9b      	ldrb	r3, [r3, #10]
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d00e      	beq.n	800cb8e <LL_EXTI_Init+0x16e>
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d017      	beq.n	800cba4 <LL_EXTI_Init+0x184>
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d120      	bne.n	800cbba <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff ff3b 	bl	800c9f8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fec4 	bl	800c914 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800cb8c:	e031      	b.n	800cbf2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fee4 	bl	800c960 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff05 	bl	800c9ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800cba2:	e026      	b.n	800cbf2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff feb3 	bl	800c914 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff fefa 	bl	800c9ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800cbb8:	e01b      	b.n	800cbf2 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f043 0305 	orr.w	r3, r3, #5
 800cbc0:	60fb      	str	r3, [r7, #12]
            break;
 800cbc2:	bf00      	nop
 800cbc4:	e015      	b.n	800cbf2 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff fe1c 	bl	800c808 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7ff fe63 	bl	800c8a0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff fe26 	bl	800c830 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff fe6d 	bl	800c8c8 <LL_EXTI_DisableEvent_32_63>
 800cbee:	e000      	b.n	800cbf2 <LL_EXTI_Init+0x1d2>
      }
 800cbf0:	bf00      	nop
  }

  return status;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <LL_GPIO_SetPinMode>:
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b089      	sub	sp, #36	; 0x24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	fa93 f3a3 	rbit	r3, r3
 800cc16:	613b      	str	r3, [r7, #16]
  return result;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	fab3 f383 	clz	r3, r3
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	2103      	movs	r1, #3
 800cc24:	fa01 f303 	lsl.w	r3, r1, r3
 800cc28:	43db      	mvns	r3, r3
 800cc2a:	401a      	ands	r2, r3
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	fa93 f3a3 	rbit	r3, r3
 800cc36:	61bb      	str	r3, [r7, #24]
  return result;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	fab3 f383 	clz	r3, r3
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	6879      	ldr	r1, [r7, #4]
 800cc44:	fa01 f303 	lsl.w	r3, r1, r3
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	601a      	str	r2, [r3, #0]
}
 800cc4e:	bf00      	nop
 800cc50:	3724      	adds	r7, #36	; 0x24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <LL_GPIO_SetPinOutputType>:
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	43db      	mvns	r3, r3
 800cc6e:	401a      	ands	r2, r3
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	605a      	str	r2, [r3, #4]
}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <LL_GPIO_SetPinSpeed>:
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b089      	sub	sp, #36	; 0x24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689a      	ldr	r2, [r3, #8]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	fa93 f3a3 	rbit	r3, r3
 800cca4:	613b      	str	r3, [r7, #16]
  return result;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	fab3 f383 	clz	r3, r3
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	2103      	movs	r1, #3
 800ccb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccb6:	43db      	mvns	r3, r3
 800ccb8:	401a      	ands	r2, r3
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	fa93 f3a3 	rbit	r3, r3
 800ccc4:	61bb      	str	r3, [r7, #24]
  return result;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	fab3 f383 	clz	r3, r3
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	609a      	str	r2, [r3, #8]
}
 800ccdc:	bf00      	nop
 800ccde:	3724      	adds	r7, #36	; 0x24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <LL_GPIO_SetPinPull>:
{
 800cce8:	b480      	push	{r7}
 800ccea:	b089      	sub	sp, #36	; 0x24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68da      	ldr	r2, [r3, #12]
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	fa93 f3a3 	rbit	r3, r3
 800cd02:	613b      	str	r3, [r7, #16]
  return result;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	fab3 f383 	clz	r3, r3
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	2103      	movs	r1, #3
 800cd10:	fa01 f303 	lsl.w	r3, r1, r3
 800cd14:	43db      	mvns	r3, r3
 800cd16:	401a      	ands	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	fa93 f3a3 	rbit	r3, r3
 800cd22:	61bb      	str	r3, [r7, #24]
  return result;
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	fab3 f383 	clz	r3, r3
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	fa01 f303 	lsl.w	r3, r1, r3
 800cd34:	431a      	orrs	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	60da      	str	r2, [r3, #12]
}
 800cd3a:	bf00      	nop
 800cd3c:	3724      	adds	r7, #36	; 0x24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <LL_GPIO_SetAFPin_0_7>:
{
 800cd46:	b480      	push	{r7}
 800cd48:	b089      	sub	sp, #36	; 0x24
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	60f8      	str	r0, [r7, #12]
 800cd4e:	60b9      	str	r1, [r7, #8]
 800cd50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6a1a      	ldr	r2, [r3, #32]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	fa93 f3a3 	rbit	r3, r3
 800cd60:	613b      	str	r3, [r7, #16]
  return result;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	fab3 f383 	clz	r3, r3
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	210f      	movs	r1, #15
 800cd6e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd72:	43db      	mvns	r3, r3
 800cd74:	401a      	ands	r2, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	fa93 f3a3 	rbit	r3, r3
 800cd80:	61bb      	str	r3, [r7, #24]
  return result;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	fab3 f383 	clz	r3, r3
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd92:	431a      	orrs	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	621a      	str	r2, [r3, #32]
}
 800cd98:	bf00      	nop
 800cd9a:	3724      	adds	r7, #36	; 0x24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <LL_GPIO_SetAFPin_8_15>:
{
 800cda4:	b480      	push	{r7}
 800cda6:	b089      	sub	sp, #36	; 0x24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	0a1b      	lsrs	r3, r3, #8
 800cdb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	fa93 f3a3 	rbit	r3, r3
 800cdc0:	613b      	str	r3, [r7, #16]
  return result;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	fab3 f383 	clz	r3, r3
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	210f      	movs	r1, #15
 800cdce:	fa01 f303 	lsl.w	r3, r1, r3
 800cdd2:	43db      	mvns	r3, r3
 800cdd4:	401a      	ands	r2, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	0a1b      	lsrs	r3, r3, #8
 800cdda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	fa93 f3a3 	rbit	r3, r3
 800cde2:	61bb      	str	r3, [r7, #24]
  return result;
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	fab3 f383 	clz	r3, r3
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cdfa:	bf00      	nop
 800cdfc:	3724      	adds	r7, #36	; 0x24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b086      	sub	sp, #24
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	fa93 f3a3 	rbit	r3, r3
 800ce1c:	60bb      	str	r3, [r7, #8]
  return result;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	fab3 f383 	clz	r3, r3
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ce28:	e040      	b.n	800ceac <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	2101      	movs	r1, #1
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	fa01 f303 	lsl.w	r3, r1, r3
 800ce36:	4013      	ands	r3, r2
 800ce38:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d032      	beq.n	800cea6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	461a      	mov	r2, r3
 800ce46:	6939      	ldr	r1, [r7, #16]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fed7 	bl	800cbfc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d003      	beq.n	800ce5e <LL_GPIO_Init+0x58>
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d106      	bne.n	800ce6c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	461a      	mov	r2, r3
 800ce64:	6939      	ldr	r1, [r7, #16]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff ff0f 	bl	800cc8a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	461a      	mov	r2, r3
 800ce72:	6939      	ldr	r1, [r7, #16]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ff37 	bl	800cce8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d111      	bne.n	800cea6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	2bff      	cmp	r3, #255	; 0xff
 800ce86:	d807      	bhi.n	800ce98 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	6939      	ldr	r1, [r7, #16]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff ff58 	bl	800cd46 <LL_GPIO_SetAFPin_0_7>
 800ce96:	e006      	b.n	800cea6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	6939      	ldr	r1, [r7, #16]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff ff7f 	bl	800cda4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1b7      	bne.n	800ce2a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d003      	beq.n	800ceca <LL_GPIO_Init+0xc4>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d107      	bne.n	800ceda <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	6819      	ldr	r1, [r3, #0]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	461a      	mov	r2, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff fec0 	bl	800cc5a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	4611      	mov	r1, r2
 800cef0:	461a      	mov	r2, r3
 800cef2:	4623      	mov	r3, r4
 800cef4:	80fb      	strh	r3, [r7, #6]
 800cef6:	4603      	mov	r3, r0
 800cef8:	80bb      	strh	r3, [r7, #4]
 800cefa:	460b      	mov	r3, r1
 800cefc:	807b      	strh	r3, [r7, #2]
 800cefe:	4613      	mov	r3, r2
 800cf00:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800cf06:	7bfa      	ldrb	r2, [r7, #15]
 800cf08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d93a      	bls.n	800cf86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800cf10:	88ba      	ldrh	r2, [r7, #4]
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	441a      	add	r2, r3
 800cf16:	88b9      	ldrh	r1, [r7, #4]
 800cf18:	883b      	ldrh	r3, [r7, #0]
 800cf1a:	4419      	add	r1, r3
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	1acb      	subs	r3, r1, r3
 800cf20:	429a      	cmp	r2, r3
 800cf22:	f000 8090 	beq.w	800d046 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	441a      	add	r2, r3
 800cf2c:	88f9      	ldrh	r1, [r7, #6]
 800cf2e:	887b      	ldrh	r3, [r7, #2]
 800cf30:	4419      	add	r1, r3
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	1acb      	subs	r3, r1, r3
 800cf36:	429a      	cmp	r2, r3
 800cf38:	f000 8085 	beq.w	800d046 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	4413      	add	r3, r2
 800cf44:	b298      	uxth	r0, r3
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	88bb      	ldrh	r3, [r7, #4]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	b299      	uxth	r1, r3
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	887a      	ldrh	r2, [r7, #2]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	3301      	adds	r3, #1
 800cf60:	b29c      	uxth	r4, r3
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	883a      	ldrh	r2, [r7, #0]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	3301      	adds	r3, #1
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	2304      	movs	r3, #4
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	8c3b      	ldrh	r3, [r7, #32]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	4622      	mov	r2, r4
 800cf80:	f000 fcd6 	bl	800d930 <ILI9341_Draw_Rectangle>
				goto finish;
 800cf84:	e060      	b.n	800d048 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	88fb      	ldrh	r3, [r7, #6]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	b298      	uxth	r0, r3
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	88bb      	ldrh	r3, [r7, #4]
 800cf96:	4413      	add	r3, r2
 800cf98:	b299      	uxth	r1, r3
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	887a      	ldrh	r2, [r7, #2]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	f000 fa81 	bl	800d4b4 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	88fb      	ldrh	r3, [r7, #6]
 800cfb8:	4413      	add	r3, r2
 800cfba:	b298      	uxth	r0, r3
										(y + h) - b,
 800cfbc:	88ba      	ldrh	r2, [r7, #4]
 800cfbe:	883b      	ldrh	r3, [r7, #0]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	b299      	uxth	r1, r3
 800cfcc:	7bfb      	ldrb	r3, [r7, #15]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	887a      	ldrh	r2, [r7, #2]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	f000 fa6a 	bl	800d4b4 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	b298      	uxth	r0, r3
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	88bb      	ldrh	r3, [r7, #4]
 800cff0:	4413      	add	r3, r2
 800cff2:	b299      	uxth	r1, r3
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	883a      	ldrh	r2, [r7, #0]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	b29a      	uxth	r2, r3
 800d002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d006:	b29b      	uxth	r3, r3
 800d008:	f000 fa9c 	bl	800d544 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800d00c:	88fa      	ldrh	r2, [r7, #6]
 800d00e:	887b      	ldrh	r3, [r7, #2]
 800d010:	4413      	add	r3, r2
 800d012:	b29a      	uxth	r2, r3
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	b29b      	uxth	r3, r3
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	b298      	uxth	r0, r3
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	b29a      	uxth	r2, r3
 800d020:	88bb      	ldrh	r3, [r7, #4]
 800d022:	4413      	add	r3, r2
 800d024:	b299      	uxth	r1, r3
 800d026:	7bfb      	ldrb	r3, [r7, #15]
 800d028:	b29b      	uxth	r3, r3
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	883a      	ldrh	r2, [r7, #0]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	b29a      	uxth	r2, r3
 800d034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f000 fa83 	bl	800d544 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	3301      	adds	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d044:	e75f      	b.n	800cf06 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d046:	bf00      	nop
	// done
	return;
 800d048:	bf00      	nop
}
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd90      	pop	{r4, r7, pc}

0800d050 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b089      	sub	sp, #36	; 0x24
 800d054:	af02      	add	r7, sp, #8
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	4611      	mov	r1, r2
 800d05c:	461a      	mov	r2, r3
 800d05e:	4623      	mov	r3, r4
 800d060:	71fb      	strb	r3, [r7, #7]
 800d062:	4603      	mov	r3, r0
 800d064:	80bb      	strh	r3, [r7, #4]
 800d066:	460b      	mov	r3, r1
 800d068:	807b      	strh	r3, [r7, #2]
 800d06a:	4613      	mov	r3, r2
 800d06c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	2b1f      	cmp	r3, #31
 800d076:	d802      	bhi.n	800d07e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	71fb      	strb	r3, [r7, #7]
 800d07c:	e002      	b.n	800d084 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	3b20      	subs	r3, #32
 800d082:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d084:	2300      	movs	r3, #0
 800d086:	753b      	strb	r3, [r7, #20]
 800d088:	e012      	b.n	800d0b0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d08a:	7dfa      	ldrb	r2, [r7, #23]
 800d08c:	7d38      	ldrb	r0, [r7, #20]
 800d08e:	7d39      	ldrb	r1, [r7, #20]
 800d090:	4c48      	ldr	r4, [pc, #288]	; (800d1b4 <ILI9341_Draw_Char+0x164>)
 800d092:	4613      	mov	r3, r2
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	4413      	add	r3, r2
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4423      	add	r3, r4
 800d09c:	4403      	add	r3, r0
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	f107 0318 	add.w	r3, r7, #24
 800d0a4:	440b      	add	r3, r1
 800d0a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d0aa:	7d3b      	ldrb	r3, [r7, #20]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	753b      	strb	r3, [r7, #20]
 800d0b0:	7d3b      	ldrb	r3, [r7, #20]
 800d0b2:	2b05      	cmp	r3, #5
 800d0b4:	d9e9      	bls.n	800d08a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	757b      	strb	r3, [r7, #21]
 800d0ba:	e074      	b.n	800d1a6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	75bb      	strb	r3, [r7, #22]
 800d0c0:	e06b      	b.n	800d19a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d0c2:	7d7b      	ldrb	r3, [r7, #21]
 800d0c4:	f107 0218 	add.w	r2, r7, #24
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	7dbb      	ldrb	r3, [r7, #22]
 800d0d2:	fa42 f303 	asr.w	r3, r2, r3
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d02d      	beq.n	800d13a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d0de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d10e      	bne.n	800d102 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d0e4:	7d7b      	ldrb	r3, [r7, #21]
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	88bb      	ldrh	r3, [r7, #4]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	b298      	uxth	r0, r3
 800d0ee:	7dbb      	ldrb	r3, [r7, #22]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	887b      	ldrh	r3, [r7, #2]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	883a      	ldrh	r2, [r7, #0]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f000 fae0 	bl	800d6c0 <ILI9341_Draw_Pixel>
 800d100:	e048      	b.n	800d194 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d102:	7d7b      	ldrb	r3, [r7, #21]
 800d104:	b29b      	uxth	r3, r3
 800d106:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d108:	fb12 f303 	smulbb	r3, r2, r3
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	88bb      	ldrh	r3, [r7, #4]
 800d110:	4413      	add	r3, r2
 800d112:	b298      	uxth	r0, r3
 800d114:	7dbb      	ldrb	r3, [r7, #22]
 800d116:	b29b      	uxth	r3, r3
 800d118:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d11a:	fb12 f303 	smulbb	r3, r2, r3
 800d11e:	b29a      	uxth	r2, r3
 800d120:	887b      	ldrh	r3, [r7, #2]
 800d122:	4413      	add	r3, r2
 800d124:	b299      	uxth	r1, r3
 800d126:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d128:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d12a:	2301      	movs	r3, #1
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	883b      	ldrh	r3, [r7, #0]
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	4623      	mov	r3, r4
 800d134:	f000 fbfc 	bl	800d930 <ILI9341_Draw_Rectangle>
 800d138:	e02c      	b.n	800d194 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d13a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d10e      	bne.n	800d15e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d140:	7d7b      	ldrb	r3, [r7, #21]
 800d142:	b29a      	uxth	r2, r3
 800d144:	88bb      	ldrh	r3, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	b298      	uxth	r0, r3
 800d14a:	7dbb      	ldrb	r3, [r7, #22]
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	887b      	ldrh	r3, [r7, #2]
 800d150:	4413      	add	r3, r2
 800d152:	b29b      	uxth	r3, r3
 800d154:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d156:	4619      	mov	r1, r3
 800d158:	f000 fab2 	bl	800d6c0 <ILI9341_Draw_Pixel>
 800d15c:	e01a      	b.n	800d194 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d15e:	7d7b      	ldrb	r3, [r7, #21]
 800d160:	b29b      	uxth	r3, r3
 800d162:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d164:	fb12 f303 	smulbb	r3, r2, r3
 800d168:	b29a      	uxth	r2, r3
 800d16a:	88bb      	ldrh	r3, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	b298      	uxth	r0, r3
 800d170:	7dbb      	ldrb	r3, [r7, #22]
 800d172:	b29b      	uxth	r3, r3
 800d174:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d176:	fb12 f303 	smulbb	r3, r2, r3
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	887b      	ldrh	r3, [r7, #2]
 800d17e:	4413      	add	r3, r2
 800d180:	b299      	uxth	r1, r3
 800d182:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d184:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d186:	2301      	movs	r3, #1
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	4623      	mov	r3, r4
 800d190:	f000 fbce 	bl	800d930 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d194:	7dbb      	ldrb	r3, [r7, #22]
 800d196:	3301      	adds	r3, #1
 800d198:	75bb      	strb	r3, [r7, #22]
 800d19a:	7dbb      	ldrb	r3, [r7, #22]
 800d19c:	2b07      	cmp	r3, #7
 800d19e:	d990      	bls.n	800d0c2 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d1a0:	7d7b      	ldrb	r3, [r7, #21]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	757b      	strb	r3, [r7, #21]
 800d1a6:	7d7b      	ldrb	r3, [r7, #21]
 800d1a8:	2b05      	cmp	r3, #5
 800d1aa:	d987      	bls.n	800d0bc <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d1ac:	bf00      	nop
 800d1ae:	371c      	adds	r7, #28
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd90      	pop	{r4, r7, pc}
 800d1b4:	08011798 	.word	0x08011798

0800d1b8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d1b8:	b590      	push	{r4, r7, lr}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af02      	add	r7, sp, #8
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	817b      	strh	r3, [r7, #10]
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	813b      	strh	r3, [r7, #8]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800d1d2:	e016      	b.n	800d202 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	1c5a      	adds	r2, r3, #1
 800d1d8:	60fa      	str	r2, [r7, #12]
 800d1da:	7818      	ldrb	r0, [r3, #0]
 800d1dc:	88fc      	ldrh	r4, [r7, #6]
 800d1de:	893a      	ldrh	r2, [r7, #8]
 800d1e0:	8979      	ldrh	r1, [r7, #10]
 800d1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e4:	9301      	str	r3, [sp, #4]
 800d1e6:	8c3b      	ldrh	r3, [r7, #32]
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	4623      	mov	r3, r4
 800d1ec:	f7ff ff30 	bl	800d050 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800d1f0:	8c3b      	ldrh	r3, [r7, #32]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	0052      	lsls	r2, r2, #1
 800d1f6:	4413      	add	r3, r2
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	897b      	ldrh	r3, [r7, #10]
 800d1fe:	4413      	add	r3, r2
 800d200:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1e4      	bne.n	800d1d4 <ILI9341_Draw_Text+0x1c>
    }


}
 800d20a:	bf00      	nop
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd90      	pop	{r4, r7, pc}
	...

0800d214 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800d21e:	2300      	movs	r3, #0
 800d220:	80fb      	strh	r3, [r7, #6]
 800d222:	e010      	b.n	800d246 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	4a0c      	ldr	r2, [pc, #48]	; (800d258 <ILI9341_FillScreenGradient+0x44>)
 800d228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	88b9      	ldrh	r1, [r7, #4]
 800d230:	88f8      	ldrh	r0, [r7, #6]
 800d232:	2204      	movs	r2, #4
 800d234:	9201      	str	r2, [sp, #4]
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	23f0      	movs	r3, #240	; 0xf0
 800d23a:	2201      	movs	r2, #1
 800d23c:	f000 fb78 	bl	800d930 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800d240:	88fb      	ldrh	r3, [r7, #6]
 800d242:	3301      	adds	r3, #1
 800d244:	80fb      	strh	r3, [r7, #6]
 800d246:	88fb      	ldrh	r3, [r7, #6]
 800d248:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d24c:	d9ea      	bls.n	800d224 <ILI9341_FillScreenGradient+0x10>

	}
}
 800d24e:	bf00      	nop
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20000cb8 	.word	0x20000cb8

0800d25c <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800d260:	f000 fc3a 	bl	800dad8 <_LCD_Enable>
	ILI9341_SPI_Init();
 800d264:	f000 f908 	bl	800d478 <ILI9341_SPI_Init>
	_LCD_Reset();
 800d268:	f000 fc46 	bl	800daf8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800d26c:	2001      	movs	r0, #1
 800d26e:	f000 fd11 	bl	800dc94 <_LCD_SendCommand>
	HAL_Delay(2000);
 800d272:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d276:	f7fa fcf9 	bl	8007c6c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800d27a:	20cb      	movs	r0, #203	; 0xcb
 800d27c:	f000 fd0a 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800d280:	2039      	movs	r0, #57	; 0x39
 800d282:	f000 fd39 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800d286:	202c      	movs	r0, #44	; 0x2c
 800d288:	f000 fd36 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d28c:	2000      	movs	r0, #0
 800d28e:	f000 fd33 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x34);
 800d292:	2034      	movs	r0, #52	; 0x34
 800d294:	f000 fd30 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x02);
 800d298:	2002      	movs	r0, #2
 800d29a:	f000 fd2d 	bl	800dcf8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800d29e:	20cf      	movs	r0, #207	; 0xcf
 800d2a0:	f000 fcf8 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	f000 fd27 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d2aa:	20c1      	movs	r0, #193	; 0xc1
 800d2ac:	f000 fd24 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x30);
 800d2b0:	2030      	movs	r0, #48	; 0x30
 800d2b2:	f000 fd21 	bl	800dcf8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800d2b6:	20e8      	movs	r0, #232	; 0xe8
 800d2b8:	f000 fcec 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800d2bc:	2085      	movs	r0, #133	; 0x85
 800d2be:	f000 fd1b 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f000 fd18 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x78);
 800d2c8:	2078      	movs	r0, #120	; 0x78
 800d2ca:	f000 fd15 	bl	800dcf8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800d2ce:	20ea      	movs	r0, #234	; 0xea
 800d2d0:	f000 fce0 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	f000 fd0f 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f000 fd0c 	bl	800dcf8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800d2e0:	20ed      	movs	r0, #237	; 0xed
 800d2e2:	f000 fcd7 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800d2e6:	2064      	movs	r0, #100	; 0x64
 800d2e8:	f000 fd06 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d2ec:	2003      	movs	r0, #3
 800d2ee:	f000 fd03 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x12);
 800d2f2:	2012      	movs	r0, #18
 800d2f4:	f000 fd00 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x81);
 800d2f8:	2081      	movs	r0, #129	; 0x81
 800d2fa:	f000 fcfd 	bl	800dcf8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800d2fe:	20f7      	movs	r0, #247	; 0xf7
 800d300:	f000 fcc8 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800d304:	2020      	movs	r0, #32
 800d306:	f000 fcf7 	bl	800dcf8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800d30a:	20c0      	movs	r0, #192	; 0xc0
 800d30c:	f000 fcc2 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800d310:	2023      	movs	r0, #35	; 0x23
 800d312:	f000 fcf1 	bl	800dcf8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800d316:	20c1      	movs	r0, #193	; 0xc1
 800d318:	f000 fcbc 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800d31c:	2010      	movs	r0, #16
 800d31e:	f000 fceb 	bl	800dcf8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800d322:	20c5      	movs	r0, #197	; 0xc5
 800d324:	f000 fcb6 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800d328:	203e      	movs	r0, #62	; 0x3e
 800d32a:	f000 fce5 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x28);
 800d32e:	2028      	movs	r0, #40	; 0x28
 800d330:	f000 fce2 	bl	800dcf8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800d334:	20c7      	movs	r0, #199	; 0xc7
 800d336:	f000 fcad 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800d33a:	2086      	movs	r0, #134	; 0x86
 800d33c:	f000 fcdc 	bl	800dcf8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800d340:	2036      	movs	r0, #54	; 0x36
 800d342:	f000 fca7 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800d346:	2048      	movs	r0, #72	; 0x48
 800d348:	f000 fcd6 	bl	800dcf8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800d34c:	203a      	movs	r0, #58	; 0x3a
 800d34e:	f000 fca1 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800d352:	2055      	movs	r0, #85	; 0x55
 800d354:	f000 fcd0 	bl	800dcf8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800d358:	20b1      	movs	r0, #177	; 0xb1
 800d35a:	f000 fc9b 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d35e:	2000      	movs	r0, #0
 800d360:	f000 fcca 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x18);
 800d364:	2018      	movs	r0, #24
 800d366:	f000 fcc7 	bl	800dcf8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800d36a:	20b6      	movs	r0, #182	; 0xb6
 800d36c:	f000 fc92 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800d370:	2008      	movs	r0, #8
 800d372:	f000 fcc1 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x82);
 800d376:	2082      	movs	r0, #130	; 0x82
 800d378:	f000 fcbe 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x27);
 800d37c:	2027      	movs	r0, #39	; 0x27
 800d37e:	f000 fcbb 	bl	800dcf8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800d382:	20f2      	movs	r0, #242	; 0xf2
 800d384:	f000 fc86 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d388:	2000      	movs	r0, #0
 800d38a:	f000 fcb5 	bl	800dcf8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800d38e:	2026      	movs	r0, #38	; 0x26
 800d390:	f000 fc80 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800d394:	2001      	movs	r0, #1
 800d396:	f000 fcaf 	bl	800dcf8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800d39a:	20e0      	movs	r0, #224	; 0xe0
 800d39c:	f000 fc7a 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800d3a0:	200f      	movs	r0, #15
 800d3a2:	f000 fca9 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d3a6:	2031      	movs	r0, #49	; 0x31
 800d3a8:	f000 fca6 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d3ac:	202b      	movs	r0, #43	; 0x2b
 800d3ae:	f000 fca3 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d3b2:	200c      	movs	r0, #12
 800d3b4:	f000 fca0 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d3b8:	200e      	movs	r0, #14
 800d3ba:	f000 fc9d 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d3be:	2008      	movs	r0, #8
 800d3c0:	f000 fc9a 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d3c4:	204e      	movs	r0, #78	; 0x4e
 800d3c6:	f000 fc97 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d3ca:	20f1      	movs	r0, #241	; 0xf1
 800d3cc:	f000 fc94 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x37);
 800d3d0:	2037      	movs	r0, #55	; 0x37
 800d3d2:	f000 fc91 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d3d6:	2007      	movs	r0, #7
 800d3d8:	f000 fc8e 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x10);
 800d3dc:	2010      	movs	r0, #16
 800d3de:	f000 fc8b 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d3e2:	2003      	movs	r0, #3
 800d3e4:	f000 fc88 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d3e8:	200e      	movs	r0, #14
 800d3ea:	f000 fc85 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x09);
 800d3ee:	2009      	movs	r0, #9
 800d3f0:	f000 fc82 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f000 fc7f 	bl	800dcf8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800d3fa:	20e1      	movs	r0, #225	; 0xe1
 800d3fc:	f000 fc4a 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d400:	2000      	movs	r0, #0
 800d402:	f000 fc79 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d406:	200e      	movs	r0, #14
 800d408:	f000 fc76 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x14);
 800d40c:	2014      	movs	r0, #20
 800d40e:	f000 fc73 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d412:	2003      	movs	r0, #3
 800d414:	f000 fc70 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x11);
 800d418:	2011      	movs	r0, #17
 800d41a:	f000 fc6d 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d41e:	2007      	movs	r0, #7
 800d420:	f000 fc6a 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d424:	2031      	movs	r0, #49	; 0x31
 800d426:	f000 fc67 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d42a:	20c1      	movs	r0, #193	; 0xc1
 800d42c:	f000 fc64 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x48);
 800d430:	2048      	movs	r0, #72	; 0x48
 800d432:	f000 fc61 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d436:	2008      	movs	r0, #8
 800d438:	f000 fc5e 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d43c:	200f      	movs	r0, #15
 800d43e:	f000 fc5b 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d442:	200c      	movs	r0, #12
 800d444:	f000 fc58 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d448:	2031      	movs	r0, #49	; 0x31
 800d44a:	f000 fc55 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x36);
 800d44e:	2036      	movs	r0, #54	; 0x36
 800d450:	f000 fc52 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d454:	200f      	movs	r0, #15
 800d456:	f000 fc4f 	bl	800dcf8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800d45a:	2011      	movs	r0, #17
 800d45c:	f000 fc1a 	bl	800dc94 <_LCD_SendCommand>
	HAL_Delay(240);
 800d460:	20f0      	movs	r0, #240	; 0xf0
 800d462:	f7fa fc03 	bl	8007c6c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800d466:	2029      	movs	r0, #41	; 0x29
 800d468:	f000 fc14 	bl	800dc94 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800d46c:	2000      	movs	r0, #0
 800d46e:	f000 fae5 	bl	800da3c <ILI9341_Set_Rotation>
}
 800d472:	bf00      	nop
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800d478:	b480      	push	{r7}
 800d47a:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d47c:	4b0b      	ldr	r3, [pc, #44]	; (800d4ac <ILI9341_SPI_Init+0x34>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d484:	2b40      	cmp	r3, #64	; 0x40
 800d486:	d005      	beq.n	800d494 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800d488:	4b08      	ldr	r3, [pc, #32]	; (800d4ac <ILI9341_SPI_Init+0x34>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a07      	ldr	r2, [pc, #28]	; (800d4ac <ILI9341_SPI_Init+0x34>)
 800d48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d492:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d494:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <ILI9341_SPI_Init+0x38>)
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	4a05      	ldr	r2, [pc, #20]	; (800d4b0 <ILI9341_SPI_Init+0x38>)
 800d49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d49e:	6153      	str	r3, [r2, #20]
}
 800d4a0:	bf00      	nop
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	40003c00 	.word	0x40003c00
 800d4b0:	48000400 	.word	0x48000400

0800d4b4 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	4611      	mov	r1, r2
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4623      	mov	r3, r4
 800d4c4:	80fb      	strh	r3, [r7, #6]
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	80bb      	strh	r3, [r7, #4]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	807b      	strh	r3, [r7, #2]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d4d2:	4b1a      	ldr	r3, [pc, #104]	; (800d53c <ILI9341_Draw_Horizontal_Line+0x88>)
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	88fa      	ldrh	r2, [r7, #6]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d229      	bcs.n	800d532 <ILI9341_Draw_Horizontal_Line+0x7e>
 800d4de:	4b18      	ldr	r3, [pc, #96]	; (800d540 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	88ba      	ldrh	r2, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d223      	bcs.n	800d532 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800d4ea:	88fa      	ldrh	r2, [r7, #6]
 800d4ec:	887b      	ldrh	r3, [r7, #2]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	4a12      	ldr	r2, [pc, #72]	; (800d53c <ILI9341_Draw_Horizontal_Line+0x88>)
 800d4f4:	8812      	ldrh	r2, [r2, #0]
 800d4f6:	b292      	uxth	r2, r2
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	db05      	blt.n	800d508 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800d4fc:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <ILI9341_Draw_Horizontal_Line+0x88>)
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	b29a      	uxth	r2, r3
 800d502:	88fb      	ldrh	r3, [r7, #6]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800d508:	88fa      	ldrh	r2, [r7, #6]
 800d50a:	887b      	ldrh	r3, [r7, #2]
 800d50c:	4413      	add	r3, r2
 800d50e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d510:	3b01      	subs	r3, #1
 800d512:	b29a      	uxth	r2, r3
 800d514:	88bb      	ldrh	r3, [r7, #4]
 800d516:	88b9      	ldrh	r1, [r7, #4]
 800d518:	88f8      	ldrh	r0, [r7, #6]
 800d51a:	f000 f85b 	bl	800d5d4 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800d51e:	887c      	ldrh	r4, [r7, #2]
 800d520:	883a      	ldrh	r2, [r7, #0]
 800d522:	88b9      	ldrh	r1, [r7, #4]
 800d524:	88f8      	ldrh	r0, [r7, #6]
 800d526:	2303      	movs	r3, #3
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	4623      	mov	r3, r4
 800d52c:	f000 fb02 	bl	800db34 <_LCD_Write_Frame>
 800d530:	e000      	b.n	800d534 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d532:	bf00      	nop
}
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	bd90      	pop	{r4, r7, pc}
 800d53a:	bf00      	nop
 800d53c:	20000cb2 	.word	0x20000cb2
 800d540:	20000cb0 	.word	0x20000cb0

0800d544 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b085      	sub	sp, #20
 800d548:	af02      	add	r7, sp, #8
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	4611      	mov	r1, r2
 800d550:	461a      	mov	r2, r3
 800d552:	4623      	mov	r3, r4
 800d554:	80fb      	strh	r3, [r7, #6]
 800d556:	4603      	mov	r3, r0
 800d558:	80bb      	strh	r3, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	807b      	strh	r3, [r7, #2]
 800d55e:	4613      	mov	r3, r2
 800d560:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d562:	4b1a      	ldr	r3, [pc, #104]	; (800d5cc <ILI9341_Draw_Vertical_Line+0x88>)
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	b29b      	uxth	r3, r3
 800d568:	88fa      	ldrh	r2, [r7, #6]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d229      	bcs.n	800d5c2 <ILI9341_Draw_Vertical_Line+0x7e>
 800d56e:	4b18      	ldr	r3, [pc, #96]	; (800d5d0 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	b29b      	uxth	r3, r3
 800d574:	88ba      	ldrh	r2, [r7, #4]
 800d576:	429a      	cmp	r2, r3
 800d578:	d223      	bcs.n	800d5c2 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800d57a:	88ba      	ldrh	r2, [r7, #4]
 800d57c:	887b      	ldrh	r3, [r7, #2]
 800d57e:	4413      	add	r3, r2
 800d580:	3b01      	subs	r3, #1
 800d582:	4a13      	ldr	r2, [pc, #76]	; (800d5d0 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d584:	8812      	ldrh	r2, [r2, #0]
 800d586:	b292      	uxth	r2, r2
 800d588:	4293      	cmp	r3, r2
 800d58a:	db05      	blt.n	800d598 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800d58c:	4b10      	ldr	r3, [pc, #64]	; (800d5d0 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	b29a      	uxth	r2, r3
 800d592:	88bb      	ldrh	r3, [r7, #4]
 800d594:	1ad3      	subs	r3, r2, r3
 800d596:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800d598:	88ba      	ldrh	r2, [r7, #4]
 800d59a:	887b      	ldrh	r3, [r7, #2]
 800d59c:	4413      	add	r3, r2
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	88fa      	ldrh	r2, [r7, #6]
 800d5a6:	88b9      	ldrh	r1, [r7, #4]
 800d5a8:	88f8      	ldrh	r0, [r7, #6]
 800d5aa:	f000 f813 	bl	800d5d4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800d5ae:	887c      	ldrh	r4, [r7, #2]
 800d5b0:	883a      	ldrh	r2, [r7, #0]
 800d5b2:	88b9      	ldrh	r1, [r7, #4]
 800d5b4:	88f8      	ldrh	r0, [r7, #6]
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	f000 faba 	bl	800db34 <_LCD_Write_Frame>
 800d5c0:	e000      	b.n	800d5c4 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d5c2:	bf00      	nop
}
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd90      	pop	{r4, r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20000cb2 	.word	0x20000cb2
 800d5d0:	20000cb0 	.word	0x20000cb0

0800d5d4 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800d5d4:	b590      	push	{r4, r7, lr}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	4623      	mov	r3, r4
 800d5e4:	80fb      	strh	r3, [r7, #6]
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	80bb      	strh	r3, [r7, #4]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	807b      	strh	r3, [r7, #2]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800d5f2:	202a      	movs	r0, #42	; 0x2a
 800d5f4:	f000 fb4e 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800d5f8:	88fb      	ldrh	r3, [r7, #6]
 800d5fa:	0a1b      	lsrs	r3, r3, #8
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	4618      	mov	r0, r3
 800d602:	f000 fb79 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(sc);
 800d606:	88fb      	ldrh	r3, [r7, #6]
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 fb74 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800d610:	887b      	ldrh	r3, [r7, #2]
 800d612:	0a1b      	lsrs	r3, r3, #8
 800d614:	b29b      	uxth	r3, r3
 800d616:	b2db      	uxtb	r3, r3
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fb6d 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(ec);
 800d61e:	887b      	ldrh	r3, [r7, #2]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	4618      	mov	r0, r3
 800d624:	f000 fb68 	bl	800dcf8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800d628:	202b      	movs	r0, #43	; 0x2b
 800d62a:	f000 fb33 	bl	800dc94 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800d62e:	88bb      	ldrh	r3, [r7, #4]
 800d630:	0a1b      	lsrs	r3, r3, #8
 800d632:	b29b      	uxth	r3, r3
 800d634:	b2db      	uxtb	r3, r3
 800d636:	4618      	mov	r0, r3
 800d638:	f000 fb5e 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(sp);
 800d63c:	88bb      	ldrh	r3, [r7, #4]
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	4618      	mov	r0, r3
 800d642:	f000 fb59 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800d646:	883b      	ldrh	r3, [r7, #0]
 800d648:	0a1b      	lsrs	r3, r3, #8
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fb52 	bl	800dcf8 <_LCD_SendData>
	_LCD_SendData(ep);
 800d654:	883b      	ldrh	r3, [r7, #0]
 800d656:	b2db      	uxtb	r3, r3
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fb4d 	bl	800dcf8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800d65e:	202c      	movs	r0, #44	; 0x2c
 800d660:	f000 fb18 	bl	800dc94 <_LCD_SendCommand>
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af02      	add	r7, sp, #8
 800d672:	4603      	mov	r3, r0
 800d674:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800d676:	4b10      	ldr	r3, [pc, #64]	; (800d6b8 <ILI9341_Fill_Screen+0x4c>)
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b0f      	ldr	r3, [pc, #60]	; (800d6bc <ILI9341_Fill_Screen+0x50>)
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	b29b      	uxth	r3, r3
 800d682:	2100      	movs	r1, #0
 800d684:	2000      	movs	r0, #0
 800d686:	f7ff ffa5 	bl	800d5d4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800d68a:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <ILI9341_Fill_Screen+0x4c>)
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	461a      	mov	r2, r3
 800d692:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <ILI9341_Fill_Screen+0x50>)
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	b29b      	uxth	r3, r3
 800d698:	fb03 f302 	mul.w	r3, r3, r2
 800d69c:	4619      	mov	r1, r3
 800d69e:	88fa      	ldrh	r2, [r7, #6]
 800d6a0:	2304      	movs	r3, #4
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f000 fa43 	bl	800db34 <_LCD_Write_Frame>
}
 800d6ae:	bf00      	nop
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20000cb2 	.word	0x20000cb2
 800d6bc:	20000cb0 	.word	0x20000cb0

0800d6c0 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08c      	sub	sp, #48	; 0x30
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	80fb      	strh	r3, [r7, #6]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	80bb      	strh	r3, [r7, #4]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d6d2:	4b94      	ldr	r3, [pc, #592]	; (800d924 <ILI9341_Draw_Pixel+0x264>)
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	f080 811e 	bcs.w	800d91c <ILI9341_Draw_Pixel+0x25c>
 800d6e0:	4b91      	ldr	r3, [pc, #580]	; (800d928 <ILI9341_Draw_Pixel+0x268>)
 800d6e2:	881b      	ldrh	r3, [r3, #0]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	88ba      	ldrh	r2, [r7, #4]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	f080 8117 	bcs.w	800d91c <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d6ee:	4b8f      	ldr	r3, [pc, #572]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	4a8e      	ldr	r2, [pc, #568]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d6fa:	4b8c      	ldr	r3, [pc, #560]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	4a8b      	ldr	r2, [pc, #556]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d704:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800d706:	2200      	movs	r2, #0
 800d708:	2100      	movs	r1, #0
 800d70a:	202a      	movs	r0, #42	; 0x2a
 800d70c:	f000 fb26 	bl	800dd5c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d710:	2300      	movs	r3, #0
 800d712:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d714:	e008      	b.n	800d728 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d716:	4b85      	ldr	r3, [pc, #532]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	4a84      	ldr	r2, [pc, #528]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d71c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d720:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	3301      	adds	r3, #1
 800d726:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	ddf3      	ble.n	800d716 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d72e:	4b7f      	ldr	r3, [pc, #508]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	4a7e      	ldr	r2, [pc, #504]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d738:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d73a:	4b7c      	ldr	r3, [pc, #496]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	4a7b      	ldr	r2, [pc, #492]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d744:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d746:	4b79      	ldr	r3, [pc, #484]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	4a78      	ldr	r2, [pc, #480]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d750:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800d752:	88fb      	ldrh	r3, [r7, #6]
 800d754:	0a1b      	lsrs	r3, r3, #8
 800d756:	b29b      	uxth	r3, r3
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	753b      	strb	r3, [r7, #20]
 800d75c:	88fb      	ldrh	r3, [r7, #6]
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800d762:	88fb      	ldrh	r3, [r7, #6]
 800d764:	3301      	adds	r3, #1
 800d766:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800d76c:	88fb      	ldrh	r3, [r7, #6]
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	3301      	adds	r3, #1
 800d772:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800d774:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800d776:	f107 0014 	add.w	r0, r7, #20
 800d77a:	230a      	movs	r3, #10
 800d77c:	2200      	movs	r2, #0
 800d77e:	2104      	movs	r1, #4
 800d780:	f000 fb1e 	bl	800ddc0 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d784:	2300      	movs	r3, #0
 800d786:	62bb      	str	r3, [r7, #40]	; 0x28
 800d788:	e008      	b.n	800d79c <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d78a:	4b68      	ldr	r3, [pc, #416]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d78c:	695b      	ldr	r3, [r3, #20]
 800d78e:	4a67      	ldr	r2, [pc, #412]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d794:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	3301      	adds	r3, #1
 800d79a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	ddf3      	ble.n	800d78a <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d7a2:	4b62      	ldr	r3, [pc, #392]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	4a61      	ldr	r2, [pc, #388]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7ac:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d7ae:	4b5f      	ldr	r3, [pc, #380]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	4a5e      	ldr	r2, [pc, #376]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d7ba:	4b5c      	ldr	r3, [pc, #368]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	4a5b      	ldr	r2, [pc, #364]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7c4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	202b      	movs	r0, #43	; 0x2b
 800d7cc:	f000 fac6 	bl	800dd5c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d7d4:	e008      	b.n	800d7e8 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d7d6:	4b55      	ldr	r3, [pc, #340]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7d8:	695b      	ldr	r3, [r3, #20]
 800d7da:	4a54      	ldr	r2, [pc, #336]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7e0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	ddf3      	ble.n	800d7d6 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	4a4e      	ldr	r2, [pc, #312]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d7fa:	4b4c      	ldr	r3, [pc, #304]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d7fc:	695b      	ldr	r3, [r3, #20]
 800d7fe:	4a4b      	ldr	r2, [pc, #300]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d804:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d806:	4b49      	ldr	r3, [pc, #292]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	4a48      	ldr	r2, [pc, #288]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d80c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d810:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800d812:	88bb      	ldrh	r3, [r7, #4]
 800d814:	0a1b      	lsrs	r3, r3, #8
 800d816:	b29b      	uxth	r3, r3
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	743b      	strb	r3, [r7, #16]
 800d81c:	88bb      	ldrh	r3, [r7, #4]
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800d822:	88bb      	ldrh	r3, [r7, #4]
 800d824:	3301      	adds	r3, #1
 800d826:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800d82c:	88bb      	ldrh	r3, [r7, #4]
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	3301      	adds	r3, #1
 800d832:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800d834:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800d836:	f107 0010 	add.w	r0, r7, #16
 800d83a:	230a      	movs	r3, #10
 800d83c:	2200      	movs	r2, #0
 800d83e:	2104      	movs	r1, #4
 800d840:	f000 fabe 	bl	800ddc0 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d844:	2300      	movs	r3, #0
 800d846:	623b      	str	r3, [r7, #32]
 800d848:	e008      	b.n	800d85c <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d84a:	4b38      	ldr	r3, [pc, #224]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	4a37      	ldr	r2, [pc, #220]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d854:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	3301      	adds	r3, #1
 800d85a:	623b      	str	r3, [r7, #32]
 800d85c:	6a3b      	ldr	r3, [r7, #32]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	ddf3      	ble.n	800d84a <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d862:	4b32      	ldr	r3, [pc, #200]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	4a31      	ldr	r2, [pc, #196]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d86c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d86e:	4b2f      	ldr	r3, [pc, #188]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	4a2e      	ldr	r2, [pc, #184]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d878:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d87a:	4b2c      	ldr	r3, [pc, #176]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	4a2b      	ldr	r2, [pc, #172]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d884:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800d886:	2200      	movs	r2, #0
 800d888:	2100      	movs	r1, #0
 800d88a:	202c      	movs	r0, #44	; 0x2c
 800d88c:	f000 fa66 	bl	800dd5c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d890:	2300      	movs	r3, #0
 800d892:	61fb      	str	r3, [r7, #28]
 800d894:	e008      	b.n	800d8a8 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d896:	4b25      	ldr	r3, [pc, #148]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	4a24      	ldr	r2, [pc, #144]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d89c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	61fb      	str	r3, [r7, #28]
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	ddf3      	ble.n	800d896 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d8ae:	4b1f      	ldr	r3, [pc, #124]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d8ba:	4b1c      	ldr	r3, [pc, #112]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	4a1b      	ldr	r2, [pc, #108]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8c4:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d8c6:	4b19      	ldr	r3, [pc, #100]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	4a18      	ldr	r2, [pc, #96]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8d0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800d8d2:	887b      	ldrh	r3, [r7, #2]
 800d8d4:	0a1b      	lsrs	r3, r3, #8
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	733b      	strb	r3, [r7, #12]
 800d8dc:	887b      	ldrh	r3, [r7, #2]
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800d8e2:	f107 000c 	add.w	r0, r7, #12
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2104      	movs	r1, #4
 800d8ec:	f000 fa68 	bl	800ddc0 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	61bb      	str	r3, [r7, #24]
 800d8f4:	e008      	b.n	800d908 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8f8:	695b      	ldr	r3, [r3, #20]
 800d8fa:	4a0c      	ldr	r2, [pc, #48]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d8fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d900:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	3301      	adds	r3, #1
 800d906:	61bb      	str	r3, [r7, #24]
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	ddf3      	ble.n	800d8f6 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	4a06      	ldr	r2, [pc, #24]	; (800d92c <ILI9341_Draw_Pixel+0x26c>)
 800d914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d918:	6153      	str	r3, [r2, #20]
 800d91a:	e000      	b.n	800d91e <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d91c:	bf00      	nop


}
 800d91e:	3730      	adds	r7, #48	; 0x30
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	20000cb2 	.word	0x20000cb2
 800d928:	20000cb0 	.word	0x20000cb0
 800d92c:	48000400 	.word	0x48000400

0800d930 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800d930:	b590      	push	{r4, r7, lr}
 800d932:	b087      	sub	sp, #28
 800d934:	af02      	add	r7, sp, #8
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	4611      	mov	r1, r2
 800d93c:	461a      	mov	r2, r3
 800d93e:	4623      	mov	r3, r4
 800d940:	80fb      	strh	r3, [r7, #6]
 800d942:	4603      	mov	r3, r0
 800d944:	80bb      	strh	r3, [r7, #4]
 800d946:	460b      	mov	r3, r1
 800d948:	807b      	strh	r3, [r7, #2]
 800d94a:	4613      	mov	r3, r2
 800d94c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d94e:	4b39      	ldr	r3, [pc, #228]	; (800da34 <ILI9341_Draw_Rectangle+0x104>)
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	b29b      	uxth	r3, r3
 800d954:	88fa      	ldrh	r2, [r7, #6]
 800d956:	429a      	cmp	r2, r3
 800d958:	d268      	bcs.n	800da2c <ILI9341_Draw_Rectangle+0xfc>
 800d95a:	4b37      	ldr	r3, [pc, #220]	; (800da38 <ILI9341_Draw_Rectangle+0x108>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	88ba      	ldrh	r2, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d262      	bcs.n	800da2c <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800d966:	88fa      	ldrh	r2, [r7, #6]
 800d968:	887b      	ldrh	r3, [r7, #2]
 800d96a:	4413      	add	r3, r2
 800d96c:	3b01      	subs	r3, #1
 800d96e:	4a31      	ldr	r2, [pc, #196]	; (800da34 <ILI9341_Draw_Rectangle+0x104>)
 800d970:	8812      	ldrh	r2, [r2, #0]
 800d972:	b292      	uxth	r2, r2
 800d974:	4293      	cmp	r3, r2
 800d976:	db05      	blt.n	800d984 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800d978:	4b2e      	ldr	r3, [pc, #184]	; (800da34 <ILI9341_Draw_Rectangle+0x104>)
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	b29a      	uxth	r2, r3
 800d97e:	88fb      	ldrh	r3, [r7, #6]
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800d984:	88ba      	ldrh	r2, [r7, #4]
 800d986:	883b      	ldrh	r3, [r7, #0]
 800d988:	4413      	add	r3, r2
 800d98a:	3b01      	subs	r3, #1
 800d98c:	4a2a      	ldr	r2, [pc, #168]	; (800da38 <ILI9341_Draw_Rectangle+0x108>)
 800d98e:	8812      	ldrh	r2, [r2, #0]
 800d990:	b292      	uxth	r2, r2
 800d992:	4293      	cmp	r3, r2
 800d994:	db05      	blt.n	800d9a2 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800d996:	4b28      	ldr	r3, [pc, #160]	; (800da38 <ILI9341_Draw_Rectangle+0x108>)
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	88bb      	ldrh	r3, [r7, #4]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800d9a2:	88fa      	ldrh	r2, [r7, #6]
 800d9a4:	887b      	ldrh	r3, [r7, #2]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800d9ae:	88ba      	ldrh	r2, [r7, #4]
 800d9b0:	883b      	ldrh	r3, [r7, #0]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	88b9      	ldrh	r1, [r7, #4]
 800d9bc:	88f8      	ldrh	r0, [r7, #6]
 800d9be:	4622      	mov	r2, r4
 800d9c0:	f7ff fe08 	bl	800d5d4 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800d9c4:	883a      	ldrh	r2, [r7, #0]
 800d9c6:	887b      	ldrh	r3, [r7, #2]
 800d9c8:	fb12 f303 	smulbb	r3, r2, r3
 800d9cc:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800d9d2:	89fb      	ldrh	r3, [r7, #14]
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d009      	beq.n	800d9f0 <ILI9341_Draw_Rectangle+0xc0>
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d906      	bls.n	800d9f0 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800d9e6:	89fb      	ldrh	r3, [r7, #14]
 800d9e8:	085b      	lsrs	r3, r3, #1
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800d9f0:	89fc      	ldrh	r4, [r7, #14]
 800d9f2:	8c3a      	ldrh	r2, [r7, #32]
 800d9f4:	88b9      	ldrh	r1, [r7, #4]
 800d9f6:	88f8      	ldrh	r0, [r7, #6]
 800d9f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	4623      	mov	r3, r4
 800da00:	f000 f898 	bl	800db34 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800da04:	7b7b      	ldrb	r3, [r7, #13]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d011      	beq.n	800da2e <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800da0a:	88fa      	ldrh	r2, [r7, #6]
 800da0c:	887b      	ldrh	r3, [r7, #2]
 800da0e:	4413      	add	r3, r2
 800da10:	b29b      	uxth	r3, r3
 800da12:	3b01      	subs	r3, #1
 800da14:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800da16:	88ba      	ldrh	r2, [r7, #4]
 800da18:	883b      	ldrh	r3, [r7, #0]
 800da1a:	4413      	add	r3, r2
 800da1c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800da1e:	3b01      	subs	r3, #1
 800da20:	b29b      	uxth	r3, r3
 800da22:	8c3a      	ldrh	r2, [r7, #32]
 800da24:	4619      	mov	r1, r3
 800da26:	f7ff fe4b 	bl	800d6c0 <ILI9341_Draw_Pixel>
 800da2a:	e000      	b.n	800da2e <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800da2c:	bf00      	nop
							colour);
	}
}
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	bd90      	pop	{r4, r7, pc}
 800da34:	20000cb2 	.word	0x20000cb2
 800da38:	20000cb0 	.word	0x20000cb0

0800da3c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800da4a:	2036      	movs	r0, #54	; 0x36
 800da4c:	f000 f922 	bl	800dc94 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	2b03      	cmp	r3, #3
 800da54:	d836      	bhi.n	800dac4 <ILI9341_Set_Rotation+0x88>
 800da56:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <ILI9341_Set_Rotation+0x20>)
 800da58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5c:	0800da6d 	.word	0x0800da6d
 800da60:	0800da83 	.word	0x0800da83
 800da64:	0800da99 	.word	0x0800da99
 800da68:	0800daaf 	.word	0x0800daaf
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800da6c:	2048      	movs	r0, #72	; 0x48
 800da6e:	f000 f943 	bl	800dcf8 <_LCD_SendData>
			LCD_WIDTH = 240;
 800da72:	4b17      	ldr	r3, [pc, #92]	; (800dad0 <ILI9341_Set_Rotation+0x94>)
 800da74:	22f0      	movs	r2, #240	; 0xf0
 800da76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800da78:	4b16      	ldr	r3, [pc, #88]	; (800dad4 <ILI9341_Set_Rotation+0x98>)
 800da7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800da7e:	801a      	strh	r2, [r3, #0]
			break;
 800da80:	e021      	b.n	800dac6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800da82:	2028      	movs	r0, #40	; 0x28
 800da84:	f000 f938 	bl	800dcf8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800da88:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <ILI9341_Set_Rotation+0x94>)
 800da8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800da8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800da90:	4b10      	ldr	r3, [pc, #64]	; (800dad4 <ILI9341_Set_Rotation+0x98>)
 800da92:	22f0      	movs	r2, #240	; 0xf0
 800da94:	801a      	strh	r2, [r3, #0]
			break;
 800da96:	e016      	b.n	800dac6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800da98:	2088      	movs	r0, #136	; 0x88
 800da9a:	f000 f92d 	bl	800dcf8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <ILI9341_Set_Rotation+0x94>)
 800daa0:	22f0      	movs	r2, #240	; 0xf0
 800daa2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800daa4:	4b0b      	ldr	r3, [pc, #44]	; (800dad4 <ILI9341_Set_Rotation+0x98>)
 800daa6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800daaa:	801a      	strh	r2, [r3, #0]
			break;
 800daac:	e00b      	b.n	800dac6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800daae:	20e8      	movs	r0, #232	; 0xe8
 800dab0:	f000 f922 	bl	800dcf8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <ILI9341_Set_Rotation+0x94>)
 800dab6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800daba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800dabc:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <ILI9341_Set_Rotation+0x98>)
 800dabe:	22f0      	movs	r2, #240	; 0xf0
 800dac0:	801a      	strh	r2, [r3, #0]
			break;
 800dac2:	e000      	b.n	800dac6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800dac4:	bf00      	nop
	}
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	20000cb2 	.word	0x20000cb2
 800dad4:	20000cb0 	.word	0x20000cb0

0800dad8 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800dad8:	b480      	push	{r7}
 800dada:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800dadc:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <_LCD_Enable+0x1c>)
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	4a04      	ldr	r2, [pc, #16]	; (800daf4 <_LCD_Enable+0x1c>)
 800dae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dae6:	6153      	str	r3, [r2, #20]
}
 800dae8:	bf00      	nop
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	48000400 	.word	0x48000400

0800daf8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800dafc:	4b0c      	ldr	r3, [pc, #48]	; (800db30 <_LCD_Reset+0x38>)
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	4a0b      	ldr	r2, [pc, #44]	; (800db30 <_LCD_Reset+0x38>)
 800db02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db06:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800db08:	20c8      	movs	r0, #200	; 0xc8
 800db0a:	f7fa f8af 	bl	8007c6c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800db0e:	4b08      	ldr	r3, [pc, #32]	; (800db30 <_LCD_Reset+0x38>)
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	4a07      	ldr	r2, [pc, #28]	; (800db30 <_LCD_Reset+0x38>)
 800db14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db18:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800db1a:	20c8      	movs	r0, #200	; 0xc8
 800db1c:	f7fa f8a6 	bl	8007c6c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800db20:	4b03      	ldr	r3, [pc, #12]	; (800db30 <_LCD_Reset+0x38>)
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	4a02      	ldr	r2, [pc, #8]	; (800db30 <_LCD_Reset+0x38>)
 800db26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800db2a:	6153      	str	r3, [r2, #20]
}
 800db2c:	bf00      	nop
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	48000400 	.word	0x48000400

0800db34 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800db34:	b5b0      	push	{r4, r5, r7, lr}
 800db36:	b08e      	sub	sp, #56	; 0x38
 800db38:	af00      	add	r7, sp, #0
 800db3a:	607b      	str	r3, [r7, #4]
 800db3c:	4603      	mov	r3, r0
 800db3e:	81fb      	strh	r3, [r7, #14]
 800db40:	460b      	mov	r3, r1
 800db42:	81bb      	strh	r3, [r7, #12]
 800db44:	4613      	mov	r3, r2
 800db46:	817b      	strh	r3, [r7, #10]
 800db48:	466b      	mov	r3, sp
 800db4a:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4a4d      	ldr	r2, [pc, #308]	; (800dc8c <_LCD_Write_Frame+0x158>)
 800db56:	8812      	ldrh	r2, [r2, #0]
 800db58:	4293      	cmp	r3, r2
 800db5a:	d202      	bcs.n	800db62 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db60:	e002      	b.n	800db68 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800db62:	4b4a      	ldr	r3, [pc, #296]	; (800dc8c <_LCD_Write_Frame+0x158>)
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800db68:	897b      	ldrh	r3, [r7, #10]
 800db6a:	0a1b      	lsrs	r3, r3, #8
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800db70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db72:	4603      	mov	r3, r0
 800db74:	3b01      	subs	r3, #1
 800db76:	61bb      	str	r3, [r7, #24]
 800db78:	4601      	mov	r1, r0
 800db7a:	f04f 0200 	mov.w	r2, #0
 800db7e:	f04f 0300 	mov.w	r3, #0
 800db82:	f04f 0400 	mov.w	r4, #0
 800db86:	00d4      	lsls	r4, r2, #3
 800db88:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800db8c:	00cb      	lsls	r3, r1, #3
 800db8e:	4601      	mov	r1, r0
 800db90:	f04f 0200 	mov.w	r2, #0
 800db94:	f04f 0300 	mov.w	r3, #0
 800db98:	f04f 0400 	mov.w	r4, #0
 800db9c:	00d4      	lsls	r4, r2, #3
 800db9e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800dba2:	00cb      	lsls	r3, r1, #3
 800dba4:	1dc3      	adds	r3, r0, #7
 800dba6:	08db      	lsrs	r3, r3, #3
 800dba8:	00db      	lsls	r3, r3, #3
 800dbaa:	ebad 0d03 	sub.w	sp, sp, r3
 800dbae:	466b      	mov	r3, sp
 800dbb0:	3300      	adds	r3, #0
 800dbb2:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
 800dbb8:	e00d      	b.n	800dbd6 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbe:	4413      	add	r3, r2
 800dbc0:	7ffa      	ldrb	r2, [r7, #31]
 800dbc2:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	897a      	ldrh	r2, [r7, #10]
 800dbca:	b2d1      	uxtb	r1, r2
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	3302      	adds	r3, #2
 800dbd4:	633b      	str	r3, [r7, #48]	; 0x30
 800dbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d3ed      	bcc.n	800dbba <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00d      	beq.n	800dc0e <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbfa:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc00:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc06:	fb01 f202 	mul.w	r2, r1, r2
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800dc0e:	4b20      	ldr	r3, [pc, #128]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	4a1f      	ldr	r2, [pc, #124]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc18:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dc1a:	4b1d      	ldr	r3, [pc, #116]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc1c:	695b      	ldr	r3, [r3, #20]
 800dc1e:	4a1c      	ldr	r2, [pc, #112]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc24:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800dc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00f      	beq.n	800dc4c <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc30:	e008      	b.n	800dc44 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800dc32:	6978      	ldr	r0, [r7, #20]
 800dc34:	230a      	movs	r3, #10
 800dc36:	2200      	movs	r2, #0
 800dc38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc3a:	f000 f8c1 	bl	800ddc0 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	3301      	adds	r3, #1
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
 800dc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d3f2      	bcc.n	800dc32 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800dc4c:	6978      	ldr	r0, [r7, #20]
 800dc4e:	230a      	movs	r3, #10
 800dc50:	2200      	movs	r2, #0
 800dc52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc54:	f000 f8b4 	bl	800ddc0 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	623b      	str	r3, [r7, #32]
 800dc5c:	e008      	b.n	800dc70 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc60:	695b      	ldr	r3, [r3, #20]
 800dc62:	4a0b      	ldr	r2, [pc, #44]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc68:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	623b      	str	r3, [r7, #32]
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	ddf3      	ble.n	800dc5e <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	4a05      	ldr	r2, [pc, #20]	; (800dc90 <_LCD_Write_Frame+0x15c>)
 800dc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc80:	6153      	str	r3, [r2, #20]
 800dc82:	46ad      	mov	sp, r5

}
 800dc84:	bf00      	nop
 800dc86:	3738      	adds	r7, #56	; 0x38
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc8c:	20000cb4 	.word	0x20000cb4
 800dc90:	48000400 	.word	0x48000400

0800dc94 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dc9e:	4b15      	ldr	r3, [pc, #84]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	4a14      	ldr	r2, [pc, #80]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dca8:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800dcaa:	4b12      	ldr	r3, [pc, #72]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	4a11      	ldr	r2, [pc, #68]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dcb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcb4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2100      	movs	r1, #0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 f84d 	bl	800dd5c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	e008      	b.n	800dcda <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dcce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcd2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	60fb      	str	r3, [r7, #12]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	ddf3      	ble.n	800dcc8 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800dce0:	4b04      	ldr	r3, [pc, #16]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	4a03      	ldr	r2, [pc, #12]	; (800dcf4 <_LCD_SendCommand+0x60>)
 800dce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcea:	6153      	str	r3, [r2, #20]
}
 800dcec:	bf00      	nop
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	48000400 	.word	0x48000400

0800dcf8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <_LCD_SendData+0x60>)
 800dd04:	695b      	ldr	r3, [r3, #20]
 800dd06:	4a14      	ldr	r2, [pc, #80]	; (800dd58 <_LCD_SendData+0x60>)
 800dd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd0c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <_LCD_SendData+0x60>)
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	4a11      	ldr	r2, [pc, #68]	; (800dd58 <_LCD_SendData+0x60>)
 800dd14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd18:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 f81b 	bl	800dd5c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dd26:	2300      	movs	r3, #0
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	e008      	b.n	800dd3e <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <_LCD_SendData+0x60>)
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	4a09      	ldr	r2, [pc, #36]	; (800dd58 <_LCD_SendData+0x60>)
 800dd32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd36:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	ddf3      	ble.n	800dd2c <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd44:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <_LCD_SendData+0x60>)
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	4a03      	ldr	r2, [pc, #12]	; (800dd58 <_LCD_SendData+0x60>)
 800dd4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd4e:	6153      	str	r3, [r2, #20]
}
 800dd50:	bf00      	nop
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	48000400 	.word	0x48000400

0800dd5c <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	4603      	mov	r3, r0
 800dd64:	71fb      	strb	r3, [r7, #7]
 800dd66:	460b      	mov	r3, r1
 800dd68:	71bb      	strb	r3, [r7, #6]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60fb      	str	r3, [r7, #12]
 800dd72:	e003      	b.n	800dd7c <_SPI_SendByte+0x20>
   		asm("nop");
 800dd74:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	79bb      	ldrb	r3, [r7, #6]
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	dbf7      	blt.n	800dd74 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800dd84:	4b0c      	ldr	r3, [pc, #48]	; (800ddb8 <_SPI_SendByte+0x5c>)
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	f003 0302 	and.w	r3, r3, #2
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d102      	bne.n	800dd96 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800dd90:	4a0a      	ldr	r2, [pc, #40]	; (800ddbc <_SPI_SendByte+0x60>)
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800dd96:	2300      	movs	r3, #0
 800dd98:	60bb      	str	r3, [r7, #8]
 800dd9a:	e003      	b.n	800dda4 <_SPI_SendByte+0x48>
   		asm("nop");
 800dd9c:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	3301      	adds	r3, #1
 800dda2:	60bb      	str	r3, [r7, #8]
 800dda4:	797b      	ldrb	r3, [r7, #5]
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	dbf7      	blt.n	800dd9c <_SPI_SendByte+0x40>

#endif

}
 800ddac:	bf00      	nop
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr
 800ddb8:	40003c00 	.word	0x40003c00
 800ddbc:	40003c0c 	.word	0x40003c0c

0800ddc0 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b089      	sub	sp, #36	; 0x24
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	4611      	mov	r1, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	460b      	mov	r3, r1
 800ddd0:	71fb      	strb	r3, [r7, #7]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	61fb      	str	r3, [r7, #28]
 800ddda:	e003      	b.n	800dde4 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800dddc:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	3301      	adds	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	dbf7      	blt.n	800dddc <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ddf0:	e01d      	b.n	800de2e <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ddf2:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <_SPI_SendByteMultiByte+0xa4>)
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	f003 0302 	and.w	r3, r3, #2
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d117      	bne.n	800de2e <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d90a      	bls.n	800de1a <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	881a      	ldrh	r2, [r3, #0]
 800de08:	4b16      	ldr	r3, [pc, #88]	; (800de64 <_SPI_SendByteMultiByte+0xa4>)
 800de0a:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	3302      	adds	r3, #2
 800de10:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	3b02      	subs	r3, #2
 800de16:	60bb      	str	r3, [r7, #8]
 800de18:	e009      	b.n	800de2e <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800de1a:	4a13      	ldr	r2, [pc, #76]	; (800de68 <_SPI_SendByteMultiByte+0xa8>)
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	3301      	adds	r3, #1
 800de26:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1de      	bne.n	800ddf2 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800de34:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <_SPI_SendByteMultiByte+0xa4>)
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <_SPI_SendByteMultiByte+0xa4>)
 800de3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de3e:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800de40:	2300      	movs	r3, #0
 800de42:	617b      	str	r3, [r7, #20]
 800de44:	e003      	b.n	800de4e <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800de46:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	3301      	adds	r3, #1
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	79bb      	ldrb	r3, [r7, #6]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	429a      	cmp	r2, r3
 800de54:	dbf7      	blt.n	800de46 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800de56:	bf00      	nop
 800de58:	3724      	adds	r7, #36	; 0x24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	40003c00 	.word	0x40003c00
 800de68:	40003c0c 	.word	0x40003c0c

0800de6c <__errno>:
 800de6c:	4b01      	ldr	r3, [pc, #4]	; (800de74 <__errno+0x8>)
 800de6e:	6818      	ldr	r0, [r3, #0]
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	20001cf8 	.word	0x20001cf8

0800de78 <__libc_init_array>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	4e0d      	ldr	r6, [pc, #52]	; (800deb0 <__libc_init_array+0x38>)
 800de7c:	4c0d      	ldr	r4, [pc, #52]	; (800deb4 <__libc_init_array+0x3c>)
 800de7e:	1ba4      	subs	r4, r4, r6
 800de80:	10a4      	asrs	r4, r4, #2
 800de82:	2500      	movs	r5, #0
 800de84:	42a5      	cmp	r5, r4
 800de86:	d109      	bne.n	800de9c <__libc_init_array+0x24>
 800de88:	4e0b      	ldr	r6, [pc, #44]	; (800deb8 <__libc_init_array+0x40>)
 800de8a:	4c0c      	ldr	r4, [pc, #48]	; (800debc <__libc_init_array+0x44>)
 800de8c:	f002 fc30 	bl	80106f0 <_init>
 800de90:	1ba4      	subs	r4, r4, r6
 800de92:	10a4      	asrs	r4, r4, #2
 800de94:	2500      	movs	r5, #0
 800de96:	42a5      	cmp	r5, r4
 800de98:	d105      	bne.n	800dea6 <__libc_init_array+0x2e>
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dea0:	4798      	blx	r3
 800dea2:	3501      	adds	r5, #1
 800dea4:	e7ee      	b.n	800de84 <__libc_init_array+0xc>
 800dea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800deaa:	4798      	blx	r3
 800deac:	3501      	adds	r5, #1
 800deae:	e7f2      	b.n	800de96 <__libc_init_array+0x1e>
 800deb0:	08011c98 	.word	0x08011c98
 800deb4:	08011c98 	.word	0x08011c98
 800deb8:	08011c98 	.word	0x08011c98
 800debc:	08011c9c 	.word	0x08011c9c

0800dec0 <memset>:
 800dec0:	4402      	add	r2, r0
 800dec2:	4603      	mov	r3, r0
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d100      	bne.n	800deca <memset+0xa>
 800dec8:	4770      	bx	lr
 800deca:	f803 1b01 	strb.w	r1, [r3], #1
 800dece:	e7f9      	b.n	800dec4 <memset+0x4>

0800ded0 <__cvt>:
 800ded0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	ec55 4b10 	vmov	r4, r5, d0
 800ded8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800deda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dede:	2d00      	cmp	r5, #0
 800dee0:	460e      	mov	r6, r1
 800dee2:	4691      	mov	r9, r2
 800dee4:	4619      	mov	r1, r3
 800dee6:	bfb8      	it	lt
 800dee8:	4622      	movlt	r2, r4
 800deea:	462b      	mov	r3, r5
 800deec:	f027 0720 	bic.w	r7, r7, #32
 800def0:	bfbb      	ittet	lt
 800def2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800def6:	461d      	movlt	r5, r3
 800def8:	2300      	movge	r3, #0
 800defa:	232d      	movlt	r3, #45	; 0x2d
 800defc:	bfb8      	it	lt
 800defe:	4614      	movlt	r4, r2
 800df00:	2f46      	cmp	r7, #70	; 0x46
 800df02:	700b      	strb	r3, [r1, #0]
 800df04:	d004      	beq.n	800df10 <__cvt+0x40>
 800df06:	2f45      	cmp	r7, #69	; 0x45
 800df08:	d100      	bne.n	800df0c <__cvt+0x3c>
 800df0a:	3601      	adds	r6, #1
 800df0c:	2102      	movs	r1, #2
 800df0e:	e000      	b.n	800df12 <__cvt+0x42>
 800df10:	2103      	movs	r1, #3
 800df12:	ab03      	add	r3, sp, #12
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	ab02      	add	r3, sp, #8
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	4632      	mov	r2, r6
 800df1c:	4653      	mov	r3, sl
 800df1e:	ec45 4b10 	vmov	d0, r4, r5
 800df22:	f000 fe25 	bl	800eb70 <_dtoa_r>
 800df26:	2f47      	cmp	r7, #71	; 0x47
 800df28:	4680      	mov	r8, r0
 800df2a:	d102      	bne.n	800df32 <__cvt+0x62>
 800df2c:	f019 0f01 	tst.w	r9, #1
 800df30:	d026      	beq.n	800df80 <__cvt+0xb0>
 800df32:	2f46      	cmp	r7, #70	; 0x46
 800df34:	eb08 0906 	add.w	r9, r8, r6
 800df38:	d111      	bne.n	800df5e <__cvt+0x8e>
 800df3a:	f898 3000 	ldrb.w	r3, [r8]
 800df3e:	2b30      	cmp	r3, #48	; 0x30
 800df40:	d10a      	bne.n	800df58 <__cvt+0x88>
 800df42:	2200      	movs	r2, #0
 800df44:	2300      	movs	r3, #0
 800df46:	4620      	mov	r0, r4
 800df48:	4629      	mov	r1, r5
 800df4a:	f7f2 fde5 	bl	8000b18 <__aeabi_dcmpeq>
 800df4e:	b918      	cbnz	r0, 800df58 <__cvt+0x88>
 800df50:	f1c6 0601 	rsb	r6, r6, #1
 800df54:	f8ca 6000 	str.w	r6, [sl]
 800df58:	f8da 3000 	ldr.w	r3, [sl]
 800df5c:	4499      	add	r9, r3
 800df5e:	2200      	movs	r2, #0
 800df60:	2300      	movs	r3, #0
 800df62:	4620      	mov	r0, r4
 800df64:	4629      	mov	r1, r5
 800df66:	f7f2 fdd7 	bl	8000b18 <__aeabi_dcmpeq>
 800df6a:	b938      	cbnz	r0, 800df7c <__cvt+0xac>
 800df6c:	2230      	movs	r2, #48	; 0x30
 800df6e:	9b03      	ldr	r3, [sp, #12]
 800df70:	454b      	cmp	r3, r9
 800df72:	d205      	bcs.n	800df80 <__cvt+0xb0>
 800df74:	1c59      	adds	r1, r3, #1
 800df76:	9103      	str	r1, [sp, #12]
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	e7f8      	b.n	800df6e <__cvt+0x9e>
 800df7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df84:	eba3 0308 	sub.w	r3, r3, r8
 800df88:	4640      	mov	r0, r8
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	b004      	add	sp, #16
 800df8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800df92 <__exponent>:
 800df92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df94:	2900      	cmp	r1, #0
 800df96:	4604      	mov	r4, r0
 800df98:	bfba      	itte	lt
 800df9a:	4249      	neglt	r1, r1
 800df9c:	232d      	movlt	r3, #45	; 0x2d
 800df9e:	232b      	movge	r3, #43	; 0x2b
 800dfa0:	2909      	cmp	r1, #9
 800dfa2:	f804 2b02 	strb.w	r2, [r4], #2
 800dfa6:	7043      	strb	r3, [r0, #1]
 800dfa8:	dd20      	ble.n	800dfec <__exponent+0x5a>
 800dfaa:	f10d 0307 	add.w	r3, sp, #7
 800dfae:	461f      	mov	r7, r3
 800dfb0:	260a      	movs	r6, #10
 800dfb2:	fb91 f5f6 	sdiv	r5, r1, r6
 800dfb6:	fb06 1115 	mls	r1, r6, r5, r1
 800dfba:	3130      	adds	r1, #48	; 0x30
 800dfbc:	2d09      	cmp	r5, #9
 800dfbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dfc2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	dc09      	bgt.n	800dfde <__exponent+0x4c>
 800dfca:	3130      	adds	r1, #48	; 0x30
 800dfcc:	3b02      	subs	r3, #2
 800dfce:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dfd2:	42bb      	cmp	r3, r7
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	d304      	bcc.n	800dfe2 <__exponent+0x50>
 800dfd8:	1a10      	subs	r0, r2, r0
 800dfda:	b003      	add	sp, #12
 800dfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfde:	4613      	mov	r3, r2
 800dfe0:	e7e7      	b.n	800dfb2 <__exponent+0x20>
 800dfe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfe6:	f804 2b01 	strb.w	r2, [r4], #1
 800dfea:	e7f2      	b.n	800dfd2 <__exponent+0x40>
 800dfec:	2330      	movs	r3, #48	; 0x30
 800dfee:	4419      	add	r1, r3
 800dff0:	7083      	strb	r3, [r0, #2]
 800dff2:	1d02      	adds	r2, r0, #4
 800dff4:	70c1      	strb	r1, [r0, #3]
 800dff6:	e7ef      	b.n	800dfd8 <__exponent+0x46>

0800dff8 <_printf_float>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	b08d      	sub	sp, #52	; 0x34
 800dffe:	460c      	mov	r4, r1
 800e000:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e004:	4616      	mov	r6, r2
 800e006:	461f      	mov	r7, r3
 800e008:	4605      	mov	r5, r0
 800e00a:	f001 fce3 	bl	800f9d4 <_localeconv_r>
 800e00e:	6803      	ldr	r3, [r0, #0]
 800e010:	9304      	str	r3, [sp, #16]
 800e012:	4618      	mov	r0, r3
 800e014:	f7f2 f904 	bl	8000220 <strlen>
 800e018:	2300      	movs	r3, #0
 800e01a:	930a      	str	r3, [sp, #40]	; 0x28
 800e01c:	f8d8 3000 	ldr.w	r3, [r8]
 800e020:	9005      	str	r0, [sp, #20]
 800e022:	3307      	adds	r3, #7
 800e024:	f023 0307 	bic.w	r3, r3, #7
 800e028:	f103 0208 	add.w	r2, r3, #8
 800e02c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e030:	f8d4 b000 	ldr.w	fp, [r4]
 800e034:	f8c8 2000 	str.w	r2, [r8]
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e040:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e044:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e048:	9307      	str	r3, [sp, #28]
 800e04a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e04e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e052:	4ba7      	ldr	r3, [pc, #668]	; (800e2f0 <_printf_float+0x2f8>)
 800e054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e058:	f7f2 fd90 	bl	8000b7c <__aeabi_dcmpun>
 800e05c:	bb70      	cbnz	r0, 800e0bc <_printf_float+0xc4>
 800e05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e062:	4ba3      	ldr	r3, [pc, #652]	; (800e2f0 <_printf_float+0x2f8>)
 800e064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e068:	f7f2 fd6a 	bl	8000b40 <__aeabi_dcmple>
 800e06c:	bb30      	cbnz	r0, 800e0bc <_printf_float+0xc4>
 800e06e:	2200      	movs	r2, #0
 800e070:	2300      	movs	r3, #0
 800e072:	4640      	mov	r0, r8
 800e074:	4649      	mov	r1, r9
 800e076:	f7f2 fd59 	bl	8000b2c <__aeabi_dcmplt>
 800e07a:	b110      	cbz	r0, 800e082 <_printf_float+0x8a>
 800e07c:	232d      	movs	r3, #45	; 0x2d
 800e07e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e082:	4a9c      	ldr	r2, [pc, #624]	; (800e2f4 <_printf_float+0x2fc>)
 800e084:	4b9c      	ldr	r3, [pc, #624]	; (800e2f8 <_printf_float+0x300>)
 800e086:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e08a:	bf8c      	ite	hi
 800e08c:	4690      	movhi	r8, r2
 800e08e:	4698      	movls	r8, r3
 800e090:	2303      	movs	r3, #3
 800e092:	f02b 0204 	bic.w	r2, fp, #4
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	6022      	str	r2, [r4, #0]
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	9700      	str	r7, [sp, #0]
 800e0a0:	4633      	mov	r3, r6
 800e0a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 f9e6 	bl	800e478 <_printf_common>
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	f040 808d 	bne.w	800e1cc <_printf_float+0x1d4>
 800e0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0b6:	b00d      	add	sp, #52	; 0x34
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	4642      	mov	r2, r8
 800e0be:	464b      	mov	r3, r9
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	f7f2 fd5a 	bl	8000b7c <__aeabi_dcmpun>
 800e0c8:	b110      	cbz	r0, 800e0d0 <_printf_float+0xd8>
 800e0ca:	4a8c      	ldr	r2, [pc, #560]	; (800e2fc <_printf_float+0x304>)
 800e0cc:	4b8c      	ldr	r3, [pc, #560]	; (800e300 <_printf_float+0x308>)
 800e0ce:	e7da      	b.n	800e086 <_printf_float+0x8e>
 800e0d0:	6861      	ldr	r1, [r4, #4]
 800e0d2:	1c4b      	adds	r3, r1, #1
 800e0d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e0d8:	a80a      	add	r0, sp, #40	; 0x28
 800e0da:	d13e      	bne.n	800e15a <_printf_float+0x162>
 800e0dc:	2306      	movs	r3, #6
 800e0de:	6063      	str	r3, [r4, #4]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e0e6:	ab09      	add	r3, sp, #36	; 0x24
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	ec49 8b10 	vmov	d0, r8, r9
 800e0ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0f2:	6022      	str	r2, [r4, #0]
 800e0f4:	f8cd a004 	str.w	sl, [sp, #4]
 800e0f8:	6861      	ldr	r1, [r4, #4]
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f7ff fee8 	bl	800ded0 <__cvt>
 800e100:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e104:	2b47      	cmp	r3, #71	; 0x47
 800e106:	4680      	mov	r8, r0
 800e108:	d109      	bne.n	800e11e <_printf_float+0x126>
 800e10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e10c:	1cd8      	adds	r0, r3, #3
 800e10e:	db02      	blt.n	800e116 <_printf_float+0x11e>
 800e110:	6862      	ldr	r2, [r4, #4]
 800e112:	4293      	cmp	r3, r2
 800e114:	dd47      	ble.n	800e1a6 <_printf_float+0x1ae>
 800e116:	f1aa 0a02 	sub.w	sl, sl, #2
 800e11a:	fa5f fa8a 	uxtb.w	sl, sl
 800e11e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e122:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e124:	d824      	bhi.n	800e170 <_printf_float+0x178>
 800e126:	3901      	subs	r1, #1
 800e128:	4652      	mov	r2, sl
 800e12a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e12e:	9109      	str	r1, [sp, #36]	; 0x24
 800e130:	f7ff ff2f 	bl	800df92 <__exponent>
 800e134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e136:	1813      	adds	r3, r2, r0
 800e138:	2a01      	cmp	r2, #1
 800e13a:	4681      	mov	r9, r0
 800e13c:	6123      	str	r3, [r4, #16]
 800e13e:	dc02      	bgt.n	800e146 <_printf_float+0x14e>
 800e140:	6822      	ldr	r2, [r4, #0]
 800e142:	07d1      	lsls	r1, r2, #31
 800e144:	d501      	bpl.n	800e14a <_printf_float+0x152>
 800e146:	3301      	adds	r3, #1
 800e148:	6123      	str	r3, [r4, #16]
 800e14a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d0a5      	beq.n	800e09e <_printf_float+0xa6>
 800e152:	232d      	movs	r3, #45	; 0x2d
 800e154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e158:	e7a1      	b.n	800e09e <_printf_float+0xa6>
 800e15a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e15e:	f000 8177 	beq.w	800e450 <_printf_float+0x458>
 800e162:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e166:	d1bb      	bne.n	800e0e0 <_printf_float+0xe8>
 800e168:	2900      	cmp	r1, #0
 800e16a:	d1b9      	bne.n	800e0e0 <_printf_float+0xe8>
 800e16c:	2301      	movs	r3, #1
 800e16e:	e7b6      	b.n	800e0de <_printf_float+0xe6>
 800e170:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e174:	d119      	bne.n	800e1aa <_printf_float+0x1b2>
 800e176:	2900      	cmp	r1, #0
 800e178:	6863      	ldr	r3, [r4, #4]
 800e17a:	dd0c      	ble.n	800e196 <_printf_float+0x19e>
 800e17c:	6121      	str	r1, [r4, #16]
 800e17e:	b913      	cbnz	r3, 800e186 <_printf_float+0x18e>
 800e180:	6822      	ldr	r2, [r4, #0]
 800e182:	07d2      	lsls	r2, r2, #31
 800e184:	d502      	bpl.n	800e18c <_printf_float+0x194>
 800e186:	3301      	adds	r3, #1
 800e188:	440b      	add	r3, r1
 800e18a:	6123      	str	r3, [r4, #16]
 800e18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e18e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e190:	f04f 0900 	mov.w	r9, #0
 800e194:	e7d9      	b.n	800e14a <_printf_float+0x152>
 800e196:	b913      	cbnz	r3, 800e19e <_printf_float+0x1a6>
 800e198:	6822      	ldr	r2, [r4, #0]
 800e19a:	07d0      	lsls	r0, r2, #31
 800e19c:	d501      	bpl.n	800e1a2 <_printf_float+0x1aa>
 800e19e:	3302      	adds	r3, #2
 800e1a0:	e7f3      	b.n	800e18a <_printf_float+0x192>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e7f1      	b.n	800e18a <_printf_float+0x192>
 800e1a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e1aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	db05      	blt.n	800e1be <_printf_float+0x1c6>
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	6123      	str	r3, [r4, #16]
 800e1b6:	07d1      	lsls	r1, r2, #31
 800e1b8:	d5e8      	bpl.n	800e18c <_printf_float+0x194>
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	e7e5      	b.n	800e18a <_printf_float+0x192>
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	bfd4      	ite	le
 800e1c2:	f1c3 0302 	rsble	r3, r3, #2
 800e1c6:	2301      	movgt	r3, #1
 800e1c8:	4413      	add	r3, r2
 800e1ca:	e7de      	b.n	800e18a <_printf_float+0x192>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	055a      	lsls	r2, r3, #21
 800e1d0:	d407      	bmi.n	800e1e2 <_printf_float+0x1ea>
 800e1d2:	6923      	ldr	r3, [r4, #16]
 800e1d4:	4642      	mov	r2, r8
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4628      	mov	r0, r5
 800e1da:	47b8      	blx	r7
 800e1dc:	3001      	adds	r0, #1
 800e1de:	d12b      	bne.n	800e238 <_printf_float+0x240>
 800e1e0:	e767      	b.n	800e0b2 <_printf_float+0xba>
 800e1e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e1e6:	f240 80dc 	bls.w	800e3a2 <_printf_float+0x3aa>
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1f2:	f7f2 fc91 	bl	8000b18 <__aeabi_dcmpeq>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d033      	beq.n	800e262 <_printf_float+0x26a>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4a41      	ldr	r2, [pc, #260]	; (800e304 <_printf_float+0x30c>)
 800e1fe:	4631      	mov	r1, r6
 800e200:	4628      	mov	r0, r5
 800e202:	47b8      	blx	r7
 800e204:	3001      	adds	r0, #1
 800e206:	f43f af54 	beq.w	800e0b2 <_printf_float+0xba>
 800e20a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e20e:	429a      	cmp	r2, r3
 800e210:	db02      	blt.n	800e218 <_printf_float+0x220>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	07d8      	lsls	r0, r3, #31
 800e216:	d50f      	bpl.n	800e238 <_printf_float+0x240>
 800e218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e21c:	4631      	mov	r1, r6
 800e21e:	4628      	mov	r0, r5
 800e220:	47b8      	blx	r7
 800e222:	3001      	adds	r0, #1
 800e224:	f43f af45 	beq.w	800e0b2 <_printf_float+0xba>
 800e228:	f04f 0800 	mov.w	r8, #0
 800e22c:	f104 091a 	add.w	r9, r4, #26
 800e230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e232:	3b01      	subs	r3, #1
 800e234:	4543      	cmp	r3, r8
 800e236:	dc09      	bgt.n	800e24c <_printf_float+0x254>
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	079b      	lsls	r3, r3, #30
 800e23c:	f100 8103 	bmi.w	800e446 <_printf_float+0x44e>
 800e240:	68e0      	ldr	r0, [r4, #12]
 800e242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e244:	4298      	cmp	r0, r3
 800e246:	bfb8      	it	lt
 800e248:	4618      	movlt	r0, r3
 800e24a:	e734      	b.n	800e0b6 <_printf_float+0xbe>
 800e24c:	2301      	movs	r3, #1
 800e24e:	464a      	mov	r2, r9
 800e250:	4631      	mov	r1, r6
 800e252:	4628      	mov	r0, r5
 800e254:	47b8      	blx	r7
 800e256:	3001      	adds	r0, #1
 800e258:	f43f af2b 	beq.w	800e0b2 <_printf_float+0xba>
 800e25c:	f108 0801 	add.w	r8, r8, #1
 800e260:	e7e6      	b.n	800e230 <_printf_float+0x238>
 800e262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e264:	2b00      	cmp	r3, #0
 800e266:	dc2b      	bgt.n	800e2c0 <_printf_float+0x2c8>
 800e268:	2301      	movs	r3, #1
 800e26a:	4a26      	ldr	r2, [pc, #152]	; (800e304 <_printf_float+0x30c>)
 800e26c:	4631      	mov	r1, r6
 800e26e:	4628      	mov	r0, r5
 800e270:	47b8      	blx	r7
 800e272:	3001      	adds	r0, #1
 800e274:	f43f af1d 	beq.w	800e0b2 <_printf_float+0xba>
 800e278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e27a:	b923      	cbnz	r3, 800e286 <_printf_float+0x28e>
 800e27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e27e:	b913      	cbnz	r3, 800e286 <_printf_float+0x28e>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	07d9      	lsls	r1, r3, #31
 800e284:	d5d8      	bpl.n	800e238 <_printf_float+0x240>
 800e286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e28a:	4631      	mov	r1, r6
 800e28c:	4628      	mov	r0, r5
 800e28e:	47b8      	blx	r7
 800e290:	3001      	adds	r0, #1
 800e292:	f43f af0e 	beq.w	800e0b2 <_printf_float+0xba>
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	f104 0a1a 	add.w	sl, r4, #26
 800e29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a0:	425b      	negs	r3, r3
 800e2a2:	454b      	cmp	r3, r9
 800e2a4:	dc01      	bgt.n	800e2aa <_printf_float+0x2b2>
 800e2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a8:	e794      	b.n	800e1d4 <_printf_float+0x1dc>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4652      	mov	r2, sl
 800e2ae:	4631      	mov	r1, r6
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	47b8      	blx	r7
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	f43f aefc 	beq.w	800e0b2 <_printf_float+0xba>
 800e2ba:	f109 0901 	add.w	r9, r9, #1
 800e2be:	e7ee      	b.n	800e29e <_printf_float+0x2a6>
 800e2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	bfa8      	it	ge
 800e2c8:	461a      	movge	r2, r3
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	4691      	mov	r9, r2
 800e2ce:	dd07      	ble.n	800e2e0 <_printf_float+0x2e8>
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	4642      	mov	r2, r8
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	47b8      	blx	r7
 800e2da:	3001      	adds	r0, #1
 800e2dc:	f43f aee9 	beq.w	800e0b2 <_printf_float+0xba>
 800e2e0:	f104 031a 	add.w	r3, r4, #26
 800e2e4:	f04f 0b00 	mov.w	fp, #0
 800e2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ec:	9306      	str	r3, [sp, #24]
 800e2ee:	e015      	b.n	800e31c <_printf_float+0x324>
 800e2f0:	7fefffff 	.word	0x7fefffff
 800e2f4:	080119e0 	.word	0x080119e0
 800e2f8:	080119dc 	.word	0x080119dc
 800e2fc:	080119e8 	.word	0x080119e8
 800e300:	080119e4 	.word	0x080119e4
 800e304:	080119ec 	.word	0x080119ec
 800e308:	2301      	movs	r3, #1
 800e30a:	9a06      	ldr	r2, [sp, #24]
 800e30c:	4631      	mov	r1, r6
 800e30e:	4628      	mov	r0, r5
 800e310:	47b8      	blx	r7
 800e312:	3001      	adds	r0, #1
 800e314:	f43f aecd 	beq.w	800e0b2 <_printf_float+0xba>
 800e318:	f10b 0b01 	add.w	fp, fp, #1
 800e31c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e320:	ebaa 0309 	sub.w	r3, sl, r9
 800e324:	455b      	cmp	r3, fp
 800e326:	dcef      	bgt.n	800e308 <_printf_float+0x310>
 800e328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e32c:	429a      	cmp	r2, r3
 800e32e:	44d0      	add	r8, sl
 800e330:	db15      	blt.n	800e35e <_printf_float+0x366>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	07da      	lsls	r2, r3, #31
 800e336:	d412      	bmi.n	800e35e <_printf_float+0x366>
 800e338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e33a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e33c:	eba3 020a 	sub.w	r2, r3, sl
 800e340:	eba3 0a01 	sub.w	sl, r3, r1
 800e344:	4592      	cmp	sl, r2
 800e346:	bfa8      	it	ge
 800e348:	4692      	movge	sl, r2
 800e34a:	f1ba 0f00 	cmp.w	sl, #0
 800e34e:	dc0e      	bgt.n	800e36e <_printf_float+0x376>
 800e350:	f04f 0800 	mov.w	r8, #0
 800e354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e358:	f104 091a 	add.w	r9, r4, #26
 800e35c:	e019      	b.n	800e392 <_printf_float+0x39a>
 800e35e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	d1e5      	bne.n	800e338 <_printf_float+0x340>
 800e36c:	e6a1      	b.n	800e0b2 <_printf_float+0xba>
 800e36e:	4653      	mov	r3, sl
 800e370:	4642      	mov	r2, r8
 800e372:	4631      	mov	r1, r6
 800e374:	4628      	mov	r0, r5
 800e376:	47b8      	blx	r7
 800e378:	3001      	adds	r0, #1
 800e37a:	d1e9      	bne.n	800e350 <_printf_float+0x358>
 800e37c:	e699      	b.n	800e0b2 <_printf_float+0xba>
 800e37e:	2301      	movs	r3, #1
 800e380:	464a      	mov	r2, r9
 800e382:	4631      	mov	r1, r6
 800e384:	4628      	mov	r0, r5
 800e386:	47b8      	blx	r7
 800e388:	3001      	adds	r0, #1
 800e38a:	f43f ae92 	beq.w	800e0b2 <_printf_float+0xba>
 800e38e:	f108 0801 	add.w	r8, r8, #1
 800e392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e396:	1a9b      	subs	r3, r3, r2
 800e398:	eba3 030a 	sub.w	r3, r3, sl
 800e39c:	4543      	cmp	r3, r8
 800e39e:	dcee      	bgt.n	800e37e <_printf_float+0x386>
 800e3a0:	e74a      	b.n	800e238 <_printf_float+0x240>
 800e3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a4:	2a01      	cmp	r2, #1
 800e3a6:	dc01      	bgt.n	800e3ac <_printf_float+0x3b4>
 800e3a8:	07db      	lsls	r3, r3, #31
 800e3aa:	d53a      	bpl.n	800e422 <_printf_float+0x42a>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	4642      	mov	r2, r8
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b8      	blx	r7
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	f43f ae7b 	beq.w	800e0b2 <_printf_float+0xba>
 800e3bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f108 0801 	add.w	r8, r8, #1
 800e3cc:	f43f ae71 	beq.w	800e0b2 <_printf_float+0xba>
 800e3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f7f2 fb9b 	bl	8000b18 <__aeabi_dcmpeq>
 800e3e2:	b9c8      	cbnz	r0, 800e418 <_printf_float+0x420>
 800e3e4:	4653      	mov	r3, sl
 800e3e6:	4642      	mov	r2, r8
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d10e      	bne.n	800e410 <_printf_float+0x418>
 800e3f2:	e65e      	b.n	800e0b2 <_printf_float+0xba>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	4652      	mov	r2, sl
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	47b8      	blx	r7
 800e3fe:	3001      	adds	r0, #1
 800e400:	f43f ae57 	beq.w	800e0b2 <_printf_float+0xba>
 800e404:	f108 0801 	add.w	r8, r8, #1
 800e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e40a:	3b01      	subs	r3, #1
 800e40c:	4543      	cmp	r3, r8
 800e40e:	dcf1      	bgt.n	800e3f4 <_printf_float+0x3fc>
 800e410:	464b      	mov	r3, r9
 800e412:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e416:	e6de      	b.n	800e1d6 <_printf_float+0x1de>
 800e418:	f04f 0800 	mov.w	r8, #0
 800e41c:	f104 0a1a 	add.w	sl, r4, #26
 800e420:	e7f2      	b.n	800e408 <_printf_float+0x410>
 800e422:	2301      	movs	r3, #1
 800e424:	e7df      	b.n	800e3e6 <_printf_float+0x3ee>
 800e426:	2301      	movs	r3, #1
 800e428:	464a      	mov	r2, r9
 800e42a:	4631      	mov	r1, r6
 800e42c:	4628      	mov	r0, r5
 800e42e:	47b8      	blx	r7
 800e430:	3001      	adds	r0, #1
 800e432:	f43f ae3e 	beq.w	800e0b2 <_printf_float+0xba>
 800e436:	f108 0801 	add.w	r8, r8, #1
 800e43a:	68e3      	ldr	r3, [r4, #12]
 800e43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e43e:	1a9b      	subs	r3, r3, r2
 800e440:	4543      	cmp	r3, r8
 800e442:	dcf0      	bgt.n	800e426 <_printf_float+0x42e>
 800e444:	e6fc      	b.n	800e240 <_printf_float+0x248>
 800e446:	f04f 0800 	mov.w	r8, #0
 800e44a:	f104 0919 	add.w	r9, r4, #25
 800e44e:	e7f4      	b.n	800e43a <_printf_float+0x442>
 800e450:	2900      	cmp	r1, #0
 800e452:	f43f ae8b 	beq.w	800e16c <_printf_float+0x174>
 800e456:	2300      	movs	r3, #0
 800e458:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e45c:	ab09      	add	r3, sp, #36	; 0x24
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	ec49 8b10 	vmov	d0, r8, r9
 800e464:	6022      	str	r2, [r4, #0]
 800e466:	f8cd a004 	str.w	sl, [sp, #4]
 800e46a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e46e:	4628      	mov	r0, r5
 800e470:	f7ff fd2e 	bl	800ded0 <__cvt>
 800e474:	4680      	mov	r8, r0
 800e476:	e648      	b.n	800e10a <_printf_float+0x112>

0800e478 <_printf_common>:
 800e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e47c:	4691      	mov	r9, r2
 800e47e:	461f      	mov	r7, r3
 800e480:	688a      	ldr	r2, [r1, #8]
 800e482:	690b      	ldr	r3, [r1, #16]
 800e484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e488:	4293      	cmp	r3, r2
 800e48a:	bfb8      	it	lt
 800e48c:	4613      	movlt	r3, r2
 800e48e:	f8c9 3000 	str.w	r3, [r9]
 800e492:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e496:	4606      	mov	r6, r0
 800e498:	460c      	mov	r4, r1
 800e49a:	b112      	cbz	r2, 800e4a2 <_printf_common+0x2a>
 800e49c:	3301      	adds	r3, #1
 800e49e:	f8c9 3000 	str.w	r3, [r9]
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	0699      	lsls	r1, r3, #26
 800e4a6:	bf42      	ittt	mi
 800e4a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e4ac:	3302      	addmi	r3, #2
 800e4ae:	f8c9 3000 	strmi.w	r3, [r9]
 800e4b2:	6825      	ldr	r5, [r4, #0]
 800e4b4:	f015 0506 	ands.w	r5, r5, #6
 800e4b8:	d107      	bne.n	800e4ca <_printf_common+0x52>
 800e4ba:	f104 0a19 	add.w	sl, r4, #25
 800e4be:	68e3      	ldr	r3, [r4, #12]
 800e4c0:	f8d9 2000 	ldr.w	r2, [r9]
 800e4c4:	1a9b      	subs	r3, r3, r2
 800e4c6:	42ab      	cmp	r3, r5
 800e4c8:	dc28      	bgt.n	800e51c <_printf_common+0xa4>
 800e4ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e4ce:	6822      	ldr	r2, [r4, #0]
 800e4d0:	3300      	adds	r3, #0
 800e4d2:	bf18      	it	ne
 800e4d4:	2301      	movne	r3, #1
 800e4d6:	0692      	lsls	r2, r2, #26
 800e4d8:	d42d      	bmi.n	800e536 <_printf_common+0xbe>
 800e4da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4de:	4639      	mov	r1, r7
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	47c0      	blx	r8
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d020      	beq.n	800e52a <_printf_common+0xb2>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	68e5      	ldr	r5, [r4, #12]
 800e4ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e4f0:	f003 0306 	and.w	r3, r3, #6
 800e4f4:	2b04      	cmp	r3, #4
 800e4f6:	bf08      	it	eq
 800e4f8:	1aad      	subeq	r5, r5, r2
 800e4fa:	68a3      	ldr	r3, [r4, #8]
 800e4fc:	6922      	ldr	r2, [r4, #16]
 800e4fe:	bf0c      	ite	eq
 800e500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e504:	2500      	movne	r5, #0
 800e506:	4293      	cmp	r3, r2
 800e508:	bfc4      	itt	gt
 800e50a:	1a9b      	subgt	r3, r3, r2
 800e50c:	18ed      	addgt	r5, r5, r3
 800e50e:	f04f 0900 	mov.w	r9, #0
 800e512:	341a      	adds	r4, #26
 800e514:	454d      	cmp	r5, r9
 800e516:	d11a      	bne.n	800e54e <_printf_common+0xd6>
 800e518:	2000      	movs	r0, #0
 800e51a:	e008      	b.n	800e52e <_printf_common+0xb6>
 800e51c:	2301      	movs	r3, #1
 800e51e:	4652      	mov	r2, sl
 800e520:	4639      	mov	r1, r7
 800e522:	4630      	mov	r0, r6
 800e524:	47c0      	blx	r8
 800e526:	3001      	adds	r0, #1
 800e528:	d103      	bne.n	800e532 <_printf_common+0xba>
 800e52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e532:	3501      	adds	r5, #1
 800e534:	e7c3      	b.n	800e4be <_printf_common+0x46>
 800e536:	18e1      	adds	r1, r4, r3
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	2030      	movs	r0, #48	; 0x30
 800e53c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e540:	4422      	add	r2, r4
 800e542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e54a:	3302      	adds	r3, #2
 800e54c:	e7c5      	b.n	800e4da <_printf_common+0x62>
 800e54e:	2301      	movs	r3, #1
 800e550:	4622      	mov	r2, r4
 800e552:	4639      	mov	r1, r7
 800e554:	4630      	mov	r0, r6
 800e556:	47c0      	blx	r8
 800e558:	3001      	adds	r0, #1
 800e55a:	d0e6      	beq.n	800e52a <_printf_common+0xb2>
 800e55c:	f109 0901 	add.w	r9, r9, #1
 800e560:	e7d8      	b.n	800e514 <_printf_common+0x9c>
	...

0800e564 <_printf_i>:
 800e564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e568:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e56c:	460c      	mov	r4, r1
 800e56e:	7e09      	ldrb	r1, [r1, #24]
 800e570:	b085      	sub	sp, #20
 800e572:	296e      	cmp	r1, #110	; 0x6e
 800e574:	4617      	mov	r7, r2
 800e576:	4606      	mov	r6, r0
 800e578:	4698      	mov	r8, r3
 800e57a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e57c:	f000 80b3 	beq.w	800e6e6 <_printf_i+0x182>
 800e580:	d822      	bhi.n	800e5c8 <_printf_i+0x64>
 800e582:	2963      	cmp	r1, #99	; 0x63
 800e584:	d036      	beq.n	800e5f4 <_printf_i+0x90>
 800e586:	d80a      	bhi.n	800e59e <_printf_i+0x3a>
 800e588:	2900      	cmp	r1, #0
 800e58a:	f000 80b9 	beq.w	800e700 <_printf_i+0x19c>
 800e58e:	2958      	cmp	r1, #88	; 0x58
 800e590:	f000 8083 	beq.w	800e69a <_printf_i+0x136>
 800e594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e598:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e59c:	e032      	b.n	800e604 <_printf_i+0xa0>
 800e59e:	2964      	cmp	r1, #100	; 0x64
 800e5a0:	d001      	beq.n	800e5a6 <_printf_i+0x42>
 800e5a2:	2969      	cmp	r1, #105	; 0x69
 800e5a4:	d1f6      	bne.n	800e594 <_printf_i+0x30>
 800e5a6:	6820      	ldr	r0, [r4, #0]
 800e5a8:	6813      	ldr	r3, [r2, #0]
 800e5aa:	0605      	lsls	r5, r0, #24
 800e5ac:	f103 0104 	add.w	r1, r3, #4
 800e5b0:	d52a      	bpl.n	800e608 <_printf_i+0xa4>
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6011      	str	r1, [r2, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da03      	bge.n	800e5c2 <_printf_i+0x5e>
 800e5ba:	222d      	movs	r2, #45	; 0x2d
 800e5bc:	425b      	negs	r3, r3
 800e5be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e5c2:	486f      	ldr	r0, [pc, #444]	; (800e780 <_printf_i+0x21c>)
 800e5c4:	220a      	movs	r2, #10
 800e5c6:	e039      	b.n	800e63c <_printf_i+0xd8>
 800e5c8:	2973      	cmp	r1, #115	; 0x73
 800e5ca:	f000 809d 	beq.w	800e708 <_printf_i+0x1a4>
 800e5ce:	d808      	bhi.n	800e5e2 <_printf_i+0x7e>
 800e5d0:	296f      	cmp	r1, #111	; 0x6f
 800e5d2:	d020      	beq.n	800e616 <_printf_i+0xb2>
 800e5d4:	2970      	cmp	r1, #112	; 0x70
 800e5d6:	d1dd      	bne.n	800e594 <_printf_i+0x30>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	f043 0320 	orr.w	r3, r3, #32
 800e5de:	6023      	str	r3, [r4, #0]
 800e5e0:	e003      	b.n	800e5ea <_printf_i+0x86>
 800e5e2:	2975      	cmp	r1, #117	; 0x75
 800e5e4:	d017      	beq.n	800e616 <_printf_i+0xb2>
 800e5e6:	2978      	cmp	r1, #120	; 0x78
 800e5e8:	d1d4      	bne.n	800e594 <_printf_i+0x30>
 800e5ea:	2378      	movs	r3, #120	; 0x78
 800e5ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5f0:	4864      	ldr	r0, [pc, #400]	; (800e784 <_printf_i+0x220>)
 800e5f2:	e055      	b.n	800e6a0 <_printf_i+0x13c>
 800e5f4:	6813      	ldr	r3, [r2, #0]
 800e5f6:	1d19      	adds	r1, r3, #4
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6011      	str	r1, [r2, #0]
 800e5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e604:	2301      	movs	r3, #1
 800e606:	e08c      	b.n	800e722 <_printf_i+0x1be>
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	6011      	str	r1, [r2, #0]
 800e60c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e610:	bf18      	it	ne
 800e612:	b21b      	sxthne	r3, r3
 800e614:	e7cf      	b.n	800e5b6 <_printf_i+0x52>
 800e616:	6813      	ldr	r3, [r2, #0]
 800e618:	6825      	ldr	r5, [r4, #0]
 800e61a:	1d18      	adds	r0, r3, #4
 800e61c:	6010      	str	r0, [r2, #0]
 800e61e:	0628      	lsls	r0, r5, #24
 800e620:	d501      	bpl.n	800e626 <_printf_i+0xc2>
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	e002      	b.n	800e62c <_printf_i+0xc8>
 800e626:	0668      	lsls	r0, r5, #25
 800e628:	d5fb      	bpl.n	800e622 <_printf_i+0xbe>
 800e62a:	881b      	ldrh	r3, [r3, #0]
 800e62c:	4854      	ldr	r0, [pc, #336]	; (800e780 <_printf_i+0x21c>)
 800e62e:	296f      	cmp	r1, #111	; 0x6f
 800e630:	bf14      	ite	ne
 800e632:	220a      	movne	r2, #10
 800e634:	2208      	moveq	r2, #8
 800e636:	2100      	movs	r1, #0
 800e638:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e63c:	6865      	ldr	r5, [r4, #4]
 800e63e:	60a5      	str	r5, [r4, #8]
 800e640:	2d00      	cmp	r5, #0
 800e642:	f2c0 8095 	blt.w	800e770 <_printf_i+0x20c>
 800e646:	6821      	ldr	r1, [r4, #0]
 800e648:	f021 0104 	bic.w	r1, r1, #4
 800e64c:	6021      	str	r1, [r4, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d13d      	bne.n	800e6ce <_printf_i+0x16a>
 800e652:	2d00      	cmp	r5, #0
 800e654:	f040 808e 	bne.w	800e774 <_printf_i+0x210>
 800e658:	4665      	mov	r5, ip
 800e65a:	2a08      	cmp	r2, #8
 800e65c:	d10b      	bne.n	800e676 <_printf_i+0x112>
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	07db      	lsls	r3, r3, #31
 800e662:	d508      	bpl.n	800e676 <_printf_i+0x112>
 800e664:	6923      	ldr	r3, [r4, #16]
 800e666:	6862      	ldr	r2, [r4, #4]
 800e668:	429a      	cmp	r2, r3
 800e66a:	bfde      	ittt	le
 800e66c:	2330      	movle	r3, #48	; 0x30
 800e66e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e672:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e676:	ebac 0305 	sub.w	r3, ip, r5
 800e67a:	6123      	str	r3, [r4, #16]
 800e67c:	f8cd 8000 	str.w	r8, [sp]
 800e680:	463b      	mov	r3, r7
 800e682:	aa03      	add	r2, sp, #12
 800e684:	4621      	mov	r1, r4
 800e686:	4630      	mov	r0, r6
 800e688:	f7ff fef6 	bl	800e478 <_printf_common>
 800e68c:	3001      	adds	r0, #1
 800e68e:	d14d      	bne.n	800e72c <_printf_i+0x1c8>
 800e690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e694:	b005      	add	sp, #20
 800e696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e69a:	4839      	ldr	r0, [pc, #228]	; (800e780 <_printf_i+0x21c>)
 800e69c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e6a0:	6813      	ldr	r3, [r2, #0]
 800e6a2:	6821      	ldr	r1, [r4, #0]
 800e6a4:	1d1d      	adds	r5, r3, #4
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6015      	str	r5, [r2, #0]
 800e6aa:	060a      	lsls	r2, r1, #24
 800e6ac:	d50b      	bpl.n	800e6c6 <_printf_i+0x162>
 800e6ae:	07ca      	lsls	r2, r1, #31
 800e6b0:	bf44      	itt	mi
 800e6b2:	f041 0120 	orrmi.w	r1, r1, #32
 800e6b6:	6021      	strmi	r1, [r4, #0]
 800e6b8:	b91b      	cbnz	r3, 800e6c2 <_printf_i+0x15e>
 800e6ba:	6822      	ldr	r2, [r4, #0]
 800e6bc:	f022 0220 	bic.w	r2, r2, #32
 800e6c0:	6022      	str	r2, [r4, #0]
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	e7b7      	b.n	800e636 <_printf_i+0xd2>
 800e6c6:	064d      	lsls	r5, r1, #25
 800e6c8:	bf48      	it	mi
 800e6ca:	b29b      	uxthmi	r3, r3
 800e6cc:	e7ef      	b.n	800e6ae <_printf_i+0x14a>
 800e6ce:	4665      	mov	r5, ip
 800e6d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6d4:	fb02 3311 	mls	r3, r2, r1, r3
 800e6d8:	5cc3      	ldrb	r3, [r0, r3]
 800e6da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e6de:	460b      	mov	r3, r1
 800e6e0:	2900      	cmp	r1, #0
 800e6e2:	d1f5      	bne.n	800e6d0 <_printf_i+0x16c>
 800e6e4:	e7b9      	b.n	800e65a <_printf_i+0xf6>
 800e6e6:	6813      	ldr	r3, [r2, #0]
 800e6e8:	6825      	ldr	r5, [r4, #0]
 800e6ea:	6961      	ldr	r1, [r4, #20]
 800e6ec:	1d18      	adds	r0, r3, #4
 800e6ee:	6010      	str	r0, [r2, #0]
 800e6f0:	0628      	lsls	r0, r5, #24
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	d501      	bpl.n	800e6fa <_printf_i+0x196>
 800e6f6:	6019      	str	r1, [r3, #0]
 800e6f8:	e002      	b.n	800e700 <_printf_i+0x19c>
 800e6fa:	066a      	lsls	r2, r5, #25
 800e6fc:	d5fb      	bpl.n	800e6f6 <_printf_i+0x192>
 800e6fe:	8019      	strh	r1, [r3, #0]
 800e700:	2300      	movs	r3, #0
 800e702:	6123      	str	r3, [r4, #16]
 800e704:	4665      	mov	r5, ip
 800e706:	e7b9      	b.n	800e67c <_printf_i+0x118>
 800e708:	6813      	ldr	r3, [r2, #0]
 800e70a:	1d19      	adds	r1, r3, #4
 800e70c:	6011      	str	r1, [r2, #0]
 800e70e:	681d      	ldr	r5, [r3, #0]
 800e710:	6862      	ldr	r2, [r4, #4]
 800e712:	2100      	movs	r1, #0
 800e714:	4628      	mov	r0, r5
 800e716:	f7f1 fd8b 	bl	8000230 <memchr>
 800e71a:	b108      	cbz	r0, 800e720 <_printf_i+0x1bc>
 800e71c:	1b40      	subs	r0, r0, r5
 800e71e:	6060      	str	r0, [r4, #4]
 800e720:	6863      	ldr	r3, [r4, #4]
 800e722:	6123      	str	r3, [r4, #16]
 800e724:	2300      	movs	r3, #0
 800e726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e72a:	e7a7      	b.n	800e67c <_printf_i+0x118>
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	462a      	mov	r2, r5
 800e730:	4639      	mov	r1, r7
 800e732:	4630      	mov	r0, r6
 800e734:	47c0      	blx	r8
 800e736:	3001      	adds	r0, #1
 800e738:	d0aa      	beq.n	800e690 <_printf_i+0x12c>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	079b      	lsls	r3, r3, #30
 800e73e:	d413      	bmi.n	800e768 <_printf_i+0x204>
 800e740:	68e0      	ldr	r0, [r4, #12]
 800e742:	9b03      	ldr	r3, [sp, #12]
 800e744:	4298      	cmp	r0, r3
 800e746:	bfb8      	it	lt
 800e748:	4618      	movlt	r0, r3
 800e74a:	e7a3      	b.n	800e694 <_printf_i+0x130>
 800e74c:	2301      	movs	r3, #1
 800e74e:	464a      	mov	r2, r9
 800e750:	4639      	mov	r1, r7
 800e752:	4630      	mov	r0, r6
 800e754:	47c0      	blx	r8
 800e756:	3001      	adds	r0, #1
 800e758:	d09a      	beq.n	800e690 <_printf_i+0x12c>
 800e75a:	3501      	adds	r5, #1
 800e75c:	68e3      	ldr	r3, [r4, #12]
 800e75e:	9a03      	ldr	r2, [sp, #12]
 800e760:	1a9b      	subs	r3, r3, r2
 800e762:	42ab      	cmp	r3, r5
 800e764:	dcf2      	bgt.n	800e74c <_printf_i+0x1e8>
 800e766:	e7eb      	b.n	800e740 <_printf_i+0x1dc>
 800e768:	2500      	movs	r5, #0
 800e76a:	f104 0919 	add.w	r9, r4, #25
 800e76e:	e7f5      	b.n	800e75c <_printf_i+0x1f8>
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1ac      	bne.n	800e6ce <_printf_i+0x16a>
 800e774:	7803      	ldrb	r3, [r0, #0]
 800e776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e77a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e77e:	e76c      	b.n	800e65a <_printf_i+0xf6>
 800e780:	080119ee 	.word	0x080119ee
 800e784:	080119ff 	.word	0x080119ff

0800e788 <_puts_r>:
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	460e      	mov	r6, r1
 800e78c:	4605      	mov	r5, r0
 800e78e:	b118      	cbz	r0, 800e798 <_puts_r+0x10>
 800e790:	6983      	ldr	r3, [r0, #24]
 800e792:	b90b      	cbnz	r3, 800e798 <_puts_r+0x10>
 800e794:	f001 f894 	bl	800f8c0 <__sinit>
 800e798:	69ab      	ldr	r3, [r5, #24]
 800e79a:	68ac      	ldr	r4, [r5, #8]
 800e79c:	b913      	cbnz	r3, 800e7a4 <_puts_r+0x1c>
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f001 f88e 	bl	800f8c0 <__sinit>
 800e7a4:	4b23      	ldr	r3, [pc, #140]	; (800e834 <_puts_r+0xac>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	d117      	bne.n	800e7da <_puts_r+0x52>
 800e7aa:	686c      	ldr	r4, [r5, #4]
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	071b      	lsls	r3, r3, #28
 800e7b0:	d51d      	bpl.n	800e7ee <_puts_r+0x66>
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	b1db      	cbz	r3, 800e7ee <_puts_r+0x66>
 800e7b6:	3e01      	subs	r6, #1
 800e7b8:	68a3      	ldr	r3, [r4, #8]
 800e7ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	60a3      	str	r3, [r4, #8]
 800e7c2:	b9e9      	cbnz	r1, 800e800 <_puts_r+0x78>
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	da2e      	bge.n	800e826 <_puts_r+0x9e>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	210a      	movs	r1, #10
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f000 f883 	bl	800e8d8 <__swbuf_r>
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	d011      	beq.n	800e7fa <_puts_r+0x72>
 800e7d6:	200a      	movs	r0, #10
 800e7d8:	e011      	b.n	800e7fe <_puts_r+0x76>
 800e7da:	4b17      	ldr	r3, [pc, #92]	; (800e838 <_puts_r+0xb0>)
 800e7dc:	429c      	cmp	r4, r3
 800e7de:	d101      	bne.n	800e7e4 <_puts_r+0x5c>
 800e7e0:	68ac      	ldr	r4, [r5, #8]
 800e7e2:	e7e3      	b.n	800e7ac <_puts_r+0x24>
 800e7e4:	4b15      	ldr	r3, [pc, #84]	; (800e83c <_puts_r+0xb4>)
 800e7e6:	429c      	cmp	r4, r3
 800e7e8:	bf08      	it	eq
 800e7ea:	68ec      	ldreq	r4, [r5, #12]
 800e7ec:	e7de      	b.n	800e7ac <_puts_r+0x24>
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f000 f8c3 	bl	800e97c <__swsetup_r>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d0dd      	beq.n	800e7b6 <_puts_r+0x2e>
 800e7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7fe:	bd70      	pop	{r4, r5, r6, pc}
 800e800:	2b00      	cmp	r3, #0
 800e802:	da04      	bge.n	800e80e <_puts_r+0x86>
 800e804:	69a2      	ldr	r2, [r4, #24]
 800e806:	429a      	cmp	r2, r3
 800e808:	dc06      	bgt.n	800e818 <_puts_r+0x90>
 800e80a:	290a      	cmp	r1, #10
 800e80c:	d004      	beq.n	800e818 <_puts_r+0x90>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	6022      	str	r2, [r4, #0]
 800e814:	7019      	strb	r1, [r3, #0]
 800e816:	e7cf      	b.n	800e7b8 <_puts_r+0x30>
 800e818:	4622      	mov	r2, r4
 800e81a:	4628      	mov	r0, r5
 800e81c:	f000 f85c 	bl	800e8d8 <__swbuf_r>
 800e820:	3001      	adds	r0, #1
 800e822:	d1c9      	bne.n	800e7b8 <_puts_r+0x30>
 800e824:	e7e9      	b.n	800e7fa <_puts_r+0x72>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	200a      	movs	r0, #10
 800e82a:	1c5a      	adds	r2, r3, #1
 800e82c:	6022      	str	r2, [r4, #0]
 800e82e:	7018      	strb	r0, [r3, #0]
 800e830:	e7e5      	b.n	800e7fe <_puts_r+0x76>
 800e832:	bf00      	nop
 800e834:	08011a40 	.word	0x08011a40
 800e838:	08011a60 	.word	0x08011a60
 800e83c:	08011a20 	.word	0x08011a20

0800e840 <puts>:
 800e840:	4b02      	ldr	r3, [pc, #8]	; (800e84c <puts+0xc>)
 800e842:	4601      	mov	r1, r0
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f7ff bf9f 	b.w	800e788 <_puts_r>
 800e84a:	bf00      	nop
 800e84c:	20001cf8 	.word	0x20001cf8

0800e850 <sniprintf>:
 800e850:	b40c      	push	{r2, r3}
 800e852:	b530      	push	{r4, r5, lr}
 800e854:	4b17      	ldr	r3, [pc, #92]	; (800e8b4 <sniprintf+0x64>)
 800e856:	1e0c      	subs	r4, r1, #0
 800e858:	b09d      	sub	sp, #116	; 0x74
 800e85a:	681d      	ldr	r5, [r3, #0]
 800e85c:	da08      	bge.n	800e870 <sniprintf+0x20>
 800e85e:	238b      	movs	r3, #139	; 0x8b
 800e860:	602b      	str	r3, [r5, #0]
 800e862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e866:	b01d      	add	sp, #116	; 0x74
 800e868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e86c:	b002      	add	sp, #8
 800e86e:	4770      	bx	lr
 800e870:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e874:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e878:	bf14      	ite	ne
 800e87a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e87e:	4623      	moveq	r3, r4
 800e880:	9304      	str	r3, [sp, #16]
 800e882:	9307      	str	r3, [sp, #28]
 800e884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e888:	9002      	str	r0, [sp, #8]
 800e88a:	9006      	str	r0, [sp, #24]
 800e88c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e890:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e892:	ab21      	add	r3, sp, #132	; 0x84
 800e894:	a902      	add	r1, sp, #8
 800e896:	4628      	mov	r0, r5
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	f001 fd0b 	bl	80102b4 <_svfiprintf_r>
 800e89e:	1c43      	adds	r3, r0, #1
 800e8a0:	bfbc      	itt	lt
 800e8a2:	238b      	movlt	r3, #139	; 0x8b
 800e8a4:	602b      	strlt	r3, [r5, #0]
 800e8a6:	2c00      	cmp	r4, #0
 800e8a8:	d0dd      	beq.n	800e866 <sniprintf+0x16>
 800e8aa:	9b02      	ldr	r3, [sp, #8]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	701a      	strb	r2, [r3, #0]
 800e8b0:	e7d9      	b.n	800e866 <sniprintf+0x16>
 800e8b2:	bf00      	nop
 800e8b4:	20001cf8 	.word	0x20001cf8

0800e8b8 <strcat>:
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	781a      	ldrb	r2, [r3, #0]
 800e8be:	1c5c      	adds	r4, r3, #1
 800e8c0:	b93a      	cbnz	r2, 800e8d2 <strcat+0x1a>
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8cc:	2a00      	cmp	r2, #0
 800e8ce:	d1f9      	bne.n	800e8c4 <strcat+0xc>
 800e8d0:	bd10      	pop	{r4, pc}
 800e8d2:	4623      	mov	r3, r4
 800e8d4:	e7f2      	b.n	800e8bc <strcat+0x4>
	...

0800e8d8 <__swbuf_r>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	460e      	mov	r6, r1
 800e8dc:	4614      	mov	r4, r2
 800e8de:	4605      	mov	r5, r0
 800e8e0:	b118      	cbz	r0, 800e8ea <__swbuf_r+0x12>
 800e8e2:	6983      	ldr	r3, [r0, #24]
 800e8e4:	b90b      	cbnz	r3, 800e8ea <__swbuf_r+0x12>
 800e8e6:	f000 ffeb 	bl	800f8c0 <__sinit>
 800e8ea:	4b21      	ldr	r3, [pc, #132]	; (800e970 <__swbuf_r+0x98>)
 800e8ec:	429c      	cmp	r4, r3
 800e8ee:	d12a      	bne.n	800e946 <__swbuf_r+0x6e>
 800e8f0:	686c      	ldr	r4, [r5, #4]
 800e8f2:	69a3      	ldr	r3, [r4, #24]
 800e8f4:	60a3      	str	r3, [r4, #8]
 800e8f6:	89a3      	ldrh	r3, [r4, #12]
 800e8f8:	071a      	lsls	r2, r3, #28
 800e8fa:	d52e      	bpl.n	800e95a <__swbuf_r+0x82>
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	b363      	cbz	r3, 800e95a <__swbuf_r+0x82>
 800e900:	6923      	ldr	r3, [r4, #16]
 800e902:	6820      	ldr	r0, [r4, #0]
 800e904:	1ac0      	subs	r0, r0, r3
 800e906:	6963      	ldr	r3, [r4, #20]
 800e908:	b2f6      	uxtb	r6, r6
 800e90a:	4283      	cmp	r3, r0
 800e90c:	4637      	mov	r7, r6
 800e90e:	dc04      	bgt.n	800e91a <__swbuf_r+0x42>
 800e910:	4621      	mov	r1, r4
 800e912:	4628      	mov	r0, r5
 800e914:	f000 ff6a 	bl	800f7ec <_fflush_r>
 800e918:	bb28      	cbnz	r0, 800e966 <__swbuf_r+0x8e>
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	3b01      	subs	r3, #1
 800e91e:	60a3      	str	r3, [r4, #8]
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	6022      	str	r2, [r4, #0]
 800e926:	701e      	strb	r6, [r3, #0]
 800e928:	6963      	ldr	r3, [r4, #20]
 800e92a:	3001      	adds	r0, #1
 800e92c:	4283      	cmp	r3, r0
 800e92e:	d004      	beq.n	800e93a <__swbuf_r+0x62>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	07db      	lsls	r3, r3, #31
 800e934:	d519      	bpl.n	800e96a <__swbuf_r+0x92>
 800e936:	2e0a      	cmp	r6, #10
 800e938:	d117      	bne.n	800e96a <__swbuf_r+0x92>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f000 ff55 	bl	800f7ec <_fflush_r>
 800e942:	b190      	cbz	r0, 800e96a <__swbuf_r+0x92>
 800e944:	e00f      	b.n	800e966 <__swbuf_r+0x8e>
 800e946:	4b0b      	ldr	r3, [pc, #44]	; (800e974 <__swbuf_r+0x9c>)
 800e948:	429c      	cmp	r4, r3
 800e94a:	d101      	bne.n	800e950 <__swbuf_r+0x78>
 800e94c:	68ac      	ldr	r4, [r5, #8]
 800e94e:	e7d0      	b.n	800e8f2 <__swbuf_r+0x1a>
 800e950:	4b09      	ldr	r3, [pc, #36]	; (800e978 <__swbuf_r+0xa0>)
 800e952:	429c      	cmp	r4, r3
 800e954:	bf08      	it	eq
 800e956:	68ec      	ldreq	r4, [r5, #12]
 800e958:	e7cb      	b.n	800e8f2 <__swbuf_r+0x1a>
 800e95a:	4621      	mov	r1, r4
 800e95c:	4628      	mov	r0, r5
 800e95e:	f000 f80d 	bl	800e97c <__swsetup_r>
 800e962:	2800      	cmp	r0, #0
 800e964:	d0cc      	beq.n	800e900 <__swbuf_r+0x28>
 800e966:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e96a:	4638      	mov	r0, r7
 800e96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e96e:	bf00      	nop
 800e970:	08011a40 	.word	0x08011a40
 800e974:	08011a60 	.word	0x08011a60
 800e978:	08011a20 	.word	0x08011a20

0800e97c <__swsetup_r>:
 800e97c:	4b32      	ldr	r3, [pc, #200]	; (800ea48 <__swsetup_r+0xcc>)
 800e97e:	b570      	push	{r4, r5, r6, lr}
 800e980:	681d      	ldr	r5, [r3, #0]
 800e982:	4606      	mov	r6, r0
 800e984:	460c      	mov	r4, r1
 800e986:	b125      	cbz	r5, 800e992 <__swsetup_r+0x16>
 800e988:	69ab      	ldr	r3, [r5, #24]
 800e98a:	b913      	cbnz	r3, 800e992 <__swsetup_r+0x16>
 800e98c:	4628      	mov	r0, r5
 800e98e:	f000 ff97 	bl	800f8c0 <__sinit>
 800e992:	4b2e      	ldr	r3, [pc, #184]	; (800ea4c <__swsetup_r+0xd0>)
 800e994:	429c      	cmp	r4, r3
 800e996:	d10f      	bne.n	800e9b8 <__swsetup_r+0x3c>
 800e998:	686c      	ldr	r4, [r5, #4]
 800e99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	0715      	lsls	r5, r2, #28
 800e9a2:	d42c      	bmi.n	800e9fe <__swsetup_r+0x82>
 800e9a4:	06d0      	lsls	r0, r2, #27
 800e9a6:	d411      	bmi.n	800e9cc <__swsetup_r+0x50>
 800e9a8:	2209      	movs	r2, #9
 800e9aa:	6032      	str	r2, [r6, #0]
 800e9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b0:	81a3      	strh	r3, [r4, #12]
 800e9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9b6:	e03e      	b.n	800ea36 <__swsetup_r+0xba>
 800e9b8:	4b25      	ldr	r3, [pc, #148]	; (800ea50 <__swsetup_r+0xd4>)
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	d101      	bne.n	800e9c2 <__swsetup_r+0x46>
 800e9be:	68ac      	ldr	r4, [r5, #8]
 800e9c0:	e7eb      	b.n	800e99a <__swsetup_r+0x1e>
 800e9c2:	4b24      	ldr	r3, [pc, #144]	; (800ea54 <__swsetup_r+0xd8>)
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	bf08      	it	eq
 800e9c8:	68ec      	ldreq	r4, [r5, #12]
 800e9ca:	e7e6      	b.n	800e99a <__swsetup_r+0x1e>
 800e9cc:	0751      	lsls	r1, r2, #29
 800e9ce:	d512      	bpl.n	800e9f6 <__swsetup_r+0x7a>
 800e9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9d2:	b141      	cbz	r1, 800e9e6 <__swsetup_r+0x6a>
 800e9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	d002      	beq.n	800e9e2 <__swsetup_r+0x66>
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f001 fb67 	bl	80100b0 <_free_r>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	6063      	str	r3, [r4, #4]
 800e9f2:	6923      	ldr	r3, [r4, #16]
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	f043 0308 	orr.w	r3, r3, #8
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	6923      	ldr	r3, [r4, #16]
 800ea00:	b94b      	cbnz	r3, 800ea16 <__swsetup_r+0x9a>
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea0c:	d003      	beq.n	800ea16 <__swsetup_r+0x9a>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4630      	mov	r0, r6
 800ea12:	f001 f811 	bl	800fa38 <__smakebuf_r>
 800ea16:	89a2      	ldrh	r2, [r4, #12]
 800ea18:	f012 0301 	ands.w	r3, r2, #1
 800ea1c:	d00c      	beq.n	800ea38 <__swsetup_r+0xbc>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60a3      	str	r3, [r4, #8]
 800ea22:	6963      	ldr	r3, [r4, #20]
 800ea24:	425b      	negs	r3, r3
 800ea26:	61a3      	str	r3, [r4, #24]
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	b953      	cbnz	r3, 800ea42 <__swsetup_r+0xc6>
 800ea2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ea34:	d1ba      	bne.n	800e9ac <__swsetup_r+0x30>
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	0792      	lsls	r2, r2, #30
 800ea3a:	bf58      	it	pl
 800ea3c:	6963      	ldrpl	r3, [r4, #20]
 800ea3e:	60a3      	str	r3, [r4, #8]
 800ea40:	e7f2      	b.n	800ea28 <__swsetup_r+0xac>
 800ea42:	2000      	movs	r0, #0
 800ea44:	e7f7      	b.n	800ea36 <__swsetup_r+0xba>
 800ea46:	bf00      	nop
 800ea48:	20001cf8 	.word	0x20001cf8
 800ea4c:	08011a40 	.word	0x08011a40
 800ea50:	08011a60 	.word	0x08011a60
 800ea54:	08011a20 	.word	0x08011a20

0800ea58 <quorem>:
 800ea58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	6903      	ldr	r3, [r0, #16]
 800ea5e:	690c      	ldr	r4, [r1, #16]
 800ea60:	42a3      	cmp	r3, r4
 800ea62:	4680      	mov	r8, r0
 800ea64:	f2c0 8082 	blt.w	800eb6c <quorem+0x114>
 800ea68:	3c01      	subs	r4, #1
 800ea6a:	f101 0714 	add.w	r7, r1, #20
 800ea6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ea72:	f100 0614 	add.w	r6, r0, #20
 800ea76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ea7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ea7e:	eb06 030c 	add.w	r3, r6, ip
 800ea82:	3501      	adds	r5, #1
 800ea84:	eb07 090c 	add.w	r9, r7, ip
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	fbb0 f5f5 	udiv	r5, r0, r5
 800ea8e:	b395      	cbz	r5, 800eaf6 <quorem+0x9e>
 800ea90:	f04f 0a00 	mov.w	sl, #0
 800ea94:	4638      	mov	r0, r7
 800ea96:	46b6      	mov	lr, r6
 800ea98:	46d3      	mov	fp, sl
 800ea9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea9e:	b293      	uxth	r3, r2
 800eaa0:	fb05 a303 	mla	r3, r5, r3, sl
 800eaa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	ebab 0303 	sub.w	r3, fp, r3
 800eaae:	0c12      	lsrs	r2, r2, #16
 800eab0:	f8de b000 	ldr.w	fp, [lr]
 800eab4:	fb05 a202 	mla	r2, r5, r2, sl
 800eab8:	fa13 f38b 	uxtah	r3, r3, fp
 800eabc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800eac0:	fa1f fb82 	uxth.w	fp, r2
 800eac4:	f8de 2000 	ldr.w	r2, [lr]
 800eac8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800eacc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ead6:	4581      	cmp	r9, r0
 800ead8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800eadc:	f84e 3b04 	str.w	r3, [lr], #4
 800eae0:	d2db      	bcs.n	800ea9a <quorem+0x42>
 800eae2:	f856 300c 	ldr.w	r3, [r6, ip]
 800eae6:	b933      	cbnz	r3, 800eaf6 <quorem+0x9e>
 800eae8:	9b01      	ldr	r3, [sp, #4]
 800eaea:	3b04      	subs	r3, #4
 800eaec:	429e      	cmp	r6, r3
 800eaee:	461a      	mov	r2, r3
 800eaf0:	d330      	bcc.n	800eb54 <quorem+0xfc>
 800eaf2:	f8c8 4010 	str.w	r4, [r8, #16]
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	f001 fa06 	bl	800ff08 <__mcmp>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	db25      	blt.n	800eb4c <quorem+0xf4>
 800eb00:	3501      	adds	r5, #1
 800eb02:	4630      	mov	r0, r6
 800eb04:	f04f 0c00 	mov.w	ip, #0
 800eb08:	f857 2b04 	ldr.w	r2, [r7], #4
 800eb0c:	f8d0 e000 	ldr.w	lr, [r0]
 800eb10:	b293      	uxth	r3, r2
 800eb12:	ebac 0303 	sub.w	r3, ip, r3
 800eb16:	0c12      	lsrs	r2, r2, #16
 800eb18:	fa13 f38e 	uxtah	r3, r3, lr
 800eb1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb2a:	45b9      	cmp	r9, r7
 800eb2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb30:	f840 3b04 	str.w	r3, [r0], #4
 800eb34:	d2e8      	bcs.n	800eb08 <quorem+0xb0>
 800eb36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800eb3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800eb3e:	b92a      	cbnz	r2, 800eb4c <quorem+0xf4>
 800eb40:	3b04      	subs	r3, #4
 800eb42:	429e      	cmp	r6, r3
 800eb44:	461a      	mov	r2, r3
 800eb46:	d30b      	bcc.n	800eb60 <quorem+0x108>
 800eb48:	f8c8 4010 	str.w	r4, [r8, #16]
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	b003      	add	sp, #12
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	6812      	ldr	r2, [r2, #0]
 800eb56:	3b04      	subs	r3, #4
 800eb58:	2a00      	cmp	r2, #0
 800eb5a:	d1ca      	bne.n	800eaf2 <quorem+0x9a>
 800eb5c:	3c01      	subs	r4, #1
 800eb5e:	e7c5      	b.n	800eaec <quorem+0x94>
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	2a00      	cmp	r2, #0
 800eb66:	d1ef      	bne.n	800eb48 <quorem+0xf0>
 800eb68:	3c01      	subs	r4, #1
 800eb6a:	e7ea      	b.n	800eb42 <quorem+0xea>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e7ee      	b.n	800eb4e <quorem+0xf6>

0800eb70 <_dtoa_r>:
 800eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	ec57 6b10 	vmov	r6, r7, d0
 800eb78:	b097      	sub	sp, #92	; 0x5c
 800eb7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb7c:	9106      	str	r1, [sp, #24]
 800eb7e:	4604      	mov	r4, r0
 800eb80:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb82:	9312      	str	r3, [sp, #72]	; 0x48
 800eb84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb88:	e9cd 6700 	strd	r6, r7, [sp]
 800eb8c:	b93d      	cbnz	r5, 800eb9e <_dtoa_r+0x2e>
 800eb8e:	2010      	movs	r0, #16
 800eb90:	f000 ff92 	bl	800fab8 <malloc>
 800eb94:	6260      	str	r0, [r4, #36]	; 0x24
 800eb96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb9a:	6005      	str	r5, [r0, #0]
 800eb9c:	60c5      	str	r5, [r0, #12]
 800eb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	b151      	cbz	r1, 800ebba <_dtoa_r+0x4a>
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	604a      	str	r2, [r1, #4]
 800eba8:	2301      	movs	r3, #1
 800ebaa:	4093      	lsls	r3, r2
 800ebac:	608b      	str	r3, [r1, #8]
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f000 ffc9 	bl	800fb46 <_Bfree>
 800ebb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	1e3b      	subs	r3, r7, #0
 800ebbc:	bfbb      	ittet	lt
 800ebbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ebc2:	9301      	strlt	r3, [sp, #4]
 800ebc4:	2300      	movge	r3, #0
 800ebc6:	2201      	movlt	r2, #1
 800ebc8:	bfac      	ite	ge
 800ebca:	f8c8 3000 	strge.w	r3, [r8]
 800ebce:	f8c8 2000 	strlt.w	r2, [r8]
 800ebd2:	4baf      	ldr	r3, [pc, #700]	; (800ee90 <_dtoa_r+0x320>)
 800ebd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ebd8:	ea33 0308 	bics.w	r3, r3, r8
 800ebdc:	d114      	bne.n	800ec08 <_dtoa_r+0x98>
 800ebde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebe0:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	9b00      	ldr	r3, [sp, #0]
 800ebe8:	b923      	cbnz	r3, 800ebf4 <_dtoa_r+0x84>
 800ebea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f000 8542 	beq.w	800f678 <_dtoa_r+0xb08>
 800ebf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800eea4 <_dtoa_r+0x334>
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f000 8544 	beq.w	800f688 <_dtoa_r+0xb18>
 800ec00:	f10b 0303 	add.w	r3, fp, #3
 800ec04:	f000 bd3e 	b.w	800f684 <_dtoa_r+0xb14>
 800ec08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2300      	movs	r3, #0
 800ec10:	4630      	mov	r0, r6
 800ec12:	4639      	mov	r1, r7
 800ec14:	f7f1 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 800ec18:	4681      	mov	r9, r0
 800ec1a:	b168      	cbz	r0, 800ec38 <_dtoa_r+0xc8>
 800ec1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec1e:	2301      	movs	r3, #1
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f000 8524 	beq.w	800f672 <_dtoa_r+0xb02>
 800ec2a:	4b9a      	ldr	r3, [pc, #616]	; (800ee94 <_dtoa_r+0x324>)
 800ec2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec2e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	f000 bd28 	b.w	800f688 <_dtoa_r+0xb18>
 800ec38:	aa14      	add	r2, sp, #80	; 0x50
 800ec3a:	a915      	add	r1, sp, #84	; 0x54
 800ec3c:	ec47 6b10 	vmov	d0, r6, r7
 800ec40:	4620      	mov	r0, r4
 800ec42:	f001 f9d8 	bl	800fff6 <__d2b>
 800ec46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec4a:	9004      	str	r0, [sp, #16]
 800ec4c:	2d00      	cmp	r5, #0
 800ec4e:	d07c      	beq.n	800ed4a <_dtoa_r+0x1da>
 800ec50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ec58:	46b2      	mov	sl, r6
 800ec5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ec5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ec66:	2200      	movs	r2, #0
 800ec68:	4b8b      	ldr	r3, [pc, #556]	; (800ee98 <_dtoa_r+0x328>)
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	4659      	mov	r1, fp
 800ec6e:	f7f1 fb33 	bl	80002d8 <__aeabi_dsub>
 800ec72:	a381      	add	r3, pc, #516	; (adr r3, 800ee78 <_dtoa_r+0x308>)
 800ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec78:	f7f1 fce6 	bl	8000648 <__aeabi_dmul>
 800ec7c:	a380      	add	r3, pc, #512	; (adr r3, 800ee80 <_dtoa_r+0x310>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	f7f1 fb2b 	bl	80002dc <__adddf3>
 800ec86:	4606      	mov	r6, r0
 800ec88:	4628      	mov	r0, r5
 800ec8a:	460f      	mov	r7, r1
 800ec8c:	f7f1 fc72 	bl	8000574 <__aeabi_i2d>
 800ec90:	a37d      	add	r3, pc, #500	; (adr r3, 800ee88 <_dtoa_r+0x318>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	f7f1 fcd7 	bl	8000648 <__aeabi_dmul>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	4630      	mov	r0, r6
 800eca0:	4639      	mov	r1, r7
 800eca2:	f7f1 fb1b 	bl	80002dc <__adddf3>
 800eca6:	4606      	mov	r6, r0
 800eca8:	460f      	mov	r7, r1
 800ecaa:	f7f1 ff7d 	bl	8000ba8 <__aeabi_d2iz>
 800ecae:	2200      	movs	r2, #0
 800ecb0:	4682      	mov	sl, r0
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	f7f1 ff38 	bl	8000b2c <__aeabi_dcmplt>
 800ecbc:	b148      	cbz	r0, 800ecd2 <_dtoa_r+0x162>
 800ecbe:	4650      	mov	r0, sl
 800ecc0:	f7f1 fc58 	bl	8000574 <__aeabi_i2d>
 800ecc4:	4632      	mov	r2, r6
 800ecc6:	463b      	mov	r3, r7
 800ecc8:	f7f1 ff26 	bl	8000b18 <__aeabi_dcmpeq>
 800eccc:	b908      	cbnz	r0, 800ecd2 <_dtoa_r+0x162>
 800ecce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ecd2:	f1ba 0f16 	cmp.w	sl, #22
 800ecd6:	d859      	bhi.n	800ed8c <_dtoa_r+0x21c>
 800ecd8:	4970      	ldr	r1, [pc, #448]	; (800ee9c <_dtoa_r+0x32c>)
 800ecda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ecde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ece2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ece6:	f7f1 ff3f 	bl	8000b68 <__aeabi_dcmpgt>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d050      	beq.n	800ed90 <_dtoa_r+0x220>
 800ecee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecf8:	1b5d      	subs	r5, r3, r5
 800ecfa:	f1b5 0801 	subs.w	r8, r5, #1
 800ecfe:	bf49      	itett	mi
 800ed00:	f1c5 0301 	rsbmi	r3, r5, #1
 800ed04:	2300      	movpl	r3, #0
 800ed06:	9305      	strmi	r3, [sp, #20]
 800ed08:	f04f 0800 	movmi.w	r8, #0
 800ed0c:	bf58      	it	pl
 800ed0e:	9305      	strpl	r3, [sp, #20]
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	db3e      	blt.n	800ed94 <_dtoa_r+0x224>
 800ed16:	2300      	movs	r3, #0
 800ed18:	44d0      	add	r8, sl
 800ed1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ed1e:	9307      	str	r3, [sp, #28]
 800ed20:	9b06      	ldr	r3, [sp, #24]
 800ed22:	2b09      	cmp	r3, #9
 800ed24:	f200 8090 	bhi.w	800ee48 <_dtoa_r+0x2d8>
 800ed28:	2b05      	cmp	r3, #5
 800ed2a:	bfc4      	itt	gt
 800ed2c:	3b04      	subgt	r3, #4
 800ed2e:	9306      	strgt	r3, [sp, #24]
 800ed30:	9b06      	ldr	r3, [sp, #24]
 800ed32:	f1a3 0302 	sub.w	r3, r3, #2
 800ed36:	bfcc      	ite	gt
 800ed38:	2500      	movgt	r5, #0
 800ed3a:	2501      	movle	r5, #1
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	f200 808f 	bhi.w	800ee60 <_dtoa_r+0x2f0>
 800ed42:	e8df f003 	tbb	[pc, r3]
 800ed46:	7f7d      	.short	0x7f7d
 800ed48:	7131      	.short	0x7131
 800ed4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ed4e:	441d      	add	r5, r3
 800ed50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ed54:	2820      	cmp	r0, #32
 800ed56:	dd13      	ble.n	800ed80 <_dtoa_r+0x210>
 800ed58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ed5c:	9b00      	ldr	r3, [sp, #0]
 800ed5e:	fa08 f800 	lsl.w	r8, r8, r0
 800ed62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ed66:	fa23 f000 	lsr.w	r0, r3, r0
 800ed6a:	ea48 0000 	orr.w	r0, r8, r0
 800ed6e:	f7f1 fbf1 	bl	8000554 <__aeabi_ui2d>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4682      	mov	sl, r0
 800ed76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ed7a:	3d01      	subs	r5, #1
 800ed7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed7e:	e772      	b.n	800ec66 <_dtoa_r+0xf6>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	f1c0 0020 	rsb	r0, r0, #32
 800ed86:	fa03 f000 	lsl.w	r0, r3, r0
 800ed8a:	e7f0      	b.n	800ed6e <_dtoa_r+0x1fe>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e7b1      	b.n	800ecf4 <_dtoa_r+0x184>
 800ed90:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed92:	e7b0      	b.n	800ecf6 <_dtoa_r+0x186>
 800ed94:	9b05      	ldr	r3, [sp, #20]
 800ed96:	eba3 030a 	sub.w	r3, r3, sl
 800ed9a:	9305      	str	r3, [sp, #20]
 800ed9c:	f1ca 0300 	rsb	r3, sl, #0
 800eda0:	9307      	str	r3, [sp, #28]
 800eda2:	2300      	movs	r3, #0
 800eda4:	930e      	str	r3, [sp, #56]	; 0x38
 800eda6:	e7bb      	b.n	800ed20 <_dtoa_r+0x1b0>
 800eda8:	2301      	movs	r3, #1
 800edaa:	930a      	str	r3, [sp, #40]	; 0x28
 800edac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edae:	2b00      	cmp	r3, #0
 800edb0:	dd59      	ble.n	800ee66 <_dtoa_r+0x2f6>
 800edb2:	9302      	str	r3, [sp, #8]
 800edb4:	4699      	mov	r9, r3
 800edb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800edb8:	2200      	movs	r2, #0
 800edba:	6072      	str	r2, [r6, #4]
 800edbc:	2204      	movs	r2, #4
 800edbe:	f102 0014 	add.w	r0, r2, #20
 800edc2:	4298      	cmp	r0, r3
 800edc4:	6871      	ldr	r1, [r6, #4]
 800edc6:	d953      	bls.n	800ee70 <_dtoa_r+0x300>
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 fe88 	bl	800fade <_Balloc>
 800edce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd0:	6030      	str	r0, [r6, #0]
 800edd2:	f1b9 0f0e 	cmp.w	r9, #14
 800edd6:	f8d3 b000 	ldr.w	fp, [r3]
 800edda:	f200 80e6 	bhi.w	800efaa <_dtoa_r+0x43a>
 800edde:	2d00      	cmp	r5, #0
 800ede0:	f000 80e3 	beq.w	800efaa <_dtoa_r+0x43a>
 800ede4:	ed9d 7b00 	vldr	d7, [sp]
 800ede8:	f1ba 0f00 	cmp.w	sl, #0
 800edec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800edf0:	dd74      	ble.n	800eedc <_dtoa_r+0x36c>
 800edf2:	4a2a      	ldr	r2, [pc, #168]	; (800ee9c <_dtoa_r+0x32c>)
 800edf4:	f00a 030f 	and.w	r3, sl, #15
 800edf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edfc:	ed93 7b00 	vldr	d7, [r3]
 800ee00:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ee04:	06f0      	lsls	r0, r6, #27
 800ee06:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ee0a:	d565      	bpl.n	800eed8 <_dtoa_r+0x368>
 800ee0c:	4b24      	ldr	r3, [pc, #144]	; (800eea0 <_dtoa_r+0x330>)
 800ee0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee16:	f7f1 fd41 	bl	800089c <__aeabi_ddiv>
 800ee1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ee1e:	f006 060f 	and.w	r6, r6, #15
 800ee22:	2503      	movs	r5, #3
 800ee24:	4f1e      	ldr	r7, [pc, #120]	; (800eea0 <_dtoa_r+0x330>)
 800ee26:	e04c      	b.n	800eec2 <_dtoa_r+0x352>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee2e:	4453      	add	r3, sl
 800ee30:	f103 0901 	add.w	r9, r3, #1
 800ee34:	9302      	str	r3, [sp, #8]
 800ee36:	464b      	mov	r3, r9
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	bfb8      	it	lt
 800ee3c:	2301      	movlt	r3, #1
 800ee3e:	e7ba      	b.n	800edb6 <_dtoa_r+0x246>
 800ee40:	2300      	movs	r3, #0
 800ee42:	e7b2      	b.n	800edaa <_dtoa_r+0x23a>
 800ee44:	2300      	movs	r3, #0
 800ee46:	e7f0      	b.n	800ee2a <_dtoa_r+0x2ba>
 800ee48:	2501      	movs	r5, #1
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9306      	str	r3, [sp, #24]
 800ee4e:	950a      	str	r5, [sp, #40]	; 0x28
 800ee50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee54:	9302      	str	r3, [sp, #8]
 800ee56:	4699      	mov	r9, r3
 800ee58:	2200      	movs	r2, #0
 800ee5a:	2312      	movs	r3, #18
 800ee5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee5e:	e7aa      	b.n	800edb6 <_dtoa_r+0x246>
 800ee60:	2301      	movs	r3, #1
 800ee62:	930a      	str	r3, [sp, #40]	; 0x28
 800ee64:	e7f4      	b.n	800ee50 <_dtoa_r+0x2e0>
 800ee66:	2301      	movs	r3, #1
 800ee68:	9302      	str	r3, [sp, #8]
 800ee6a:	4699      	mov	r9, r3
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	e7f5      	b.n	800ee5c <_dtoa_r+0x2ec>
 800ee70:	3101      	adds	r1, #1
 800ee72:	6071      	str	r1, [r6, #4]
 800ee74:	0052      	lsls	r2, r2, #1
 800ee76:	e7a2      	b.n	800edbe <_dtoa_r+0x24e>
 800ee78:	636f4361 	.word	0x636f4361
 800ee7c:	3fd287a7 	.word	0x3fd287a7
 800ee80:	8b60c8b3 	.word	0x8b60c8b3
 800ee84:	3fc68a28 	.word	0x3fc68a28
 800ee88:	509f79fb 	.word	0x509f79fb
 800ee8c:	3fd34413 	.word	0x3fd34413
 800ee90:	7ff00000 	.word	0x7ff00000
 800ee94:	080119ed 	.word	0x080119ed
 800ee98:	3ff80000 	.word	0x3ff80000
 800ee9c:	08011aa8 	.word	0x08011aa8
 800eea0:	08011a80 	.word	0x08011a80
 800eea4:	08011a19 	.word	0x08011a19
 800eea8:	07f1      	lsls	r1, r6, #31
 800eeaa:	d508      	bpl.n	800eebe <_dtoa_r+0x34e>
 800eeac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eeb4:	f7f1 fbc8 	bl	8000648 <__aeabi_dmul>
 800eeb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eebc:	3501      	adds	r5, #1
 800eebe:	1076      	asrs	r6, r6, #1
 800eec0:	3708      	adds	r7, #8
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	d1f0      	bne.n	800eea8 <_dtoa_r+0x338>
 800eec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eeca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eece:	f7f1 fce5 	bl	800089c <__aeabi_ddiv>
 800eed2:	e9cd 0100 	strd	r0, r1, [sp]
 800eed6:	e01a      	b.n	800ef0e <_dtoa_r+0x39e>
 800eed8:	2502      	movs	r5, #2
 800eeda:	e7a3      	b.n	800ee24 <_dtoa_r+0x2b4>
 800eedc:	f000 80a0 	beq.w	800f020 <_dtoa_r+0x4b0>
 800eee0:	f1ca 0600 	rsb	r6, sl, #0
 800eee4:	4b9f      	ldr	r3, [pc, #636]	; (800f164 <_dtoa_r+0x5f4>)
 800eee6:	4fa0      	ldr	r7, [pc, #640]	; (800f168 <_dtoa_r+0x5f8>)
 800eee8:	f006 020f 	and.w	r2, r6, #15
 800eeec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eef8:	f7f1 fba6 	bl	8000648 <__aeabi_dmul>
 800eefc:	e9cd 0100 	strd	r0, r1, [sp]
 800ef00:	1136      	asrs	r6, r6, #4
 800ef02:	2300      	movs	r3, #0
 800ef04:	2502      	movs	r5, #2
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d17f      	bne.n	800f00a <_dtoa_r+0x49a>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e1      	bne.n	800eed2 <_dtoa_r+0x362>
 800ef0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 8087 	beq.w	800f024 <_dtoa_r+0x4b4>
 800ef16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	4b93      	ldr	r3, [pc, #588]	; (800f16c <_dtoa_r+0x5fc>)
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4639      	mov	r1, r7
 800ef22:	f7f1 fe03 	bl	8000b2c <__aeabi_dcmplt>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d07c      	beq.n	800f024 <_dtoa_r+0x4b4>
 800ef2a:	f1b9 0f00 	cmp.w	r9, #0
 800ef2e:	d079      	beq.n	800f024 <_dtoa_r+0x4b4>
 800ef30:	9b02      	ldr	r3, [sp, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	dd35      	ble.n	800efa2 <_dtoa_r+0x432>
 800ef36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ef3a:	9308      	str	r3, [sp, #32]
 800ef3c:	4639      	mov	r1, r7
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4b8b      	ldr	r3, [pc, #556]	; (800f170 <_dtoa_r+0x600>)
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7f1 fb80 	bl	8000648 <__aeabi_dmul>
 800ef48:	e9cd 0100 	strd	r0, r1, [sp]
 800ef4c:	9f02      	ldr	r7, [sp, #8]
 800ef4e:	3501      	adds	r5, #1
 800ef50:	4628      	mov	r0, r5
 800ef52:	f7f1 fb0f 	bl	8000574 <__aeabi_i2d>
 800ef56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef5a:	f7f1 fb75 	bl	8000648 <__aeabi_dmul>
 800ef5e:	2200      	movs	r2, #0
 800ef60:	4b84      	ldr	r3, [pc, #528]	; (800f174 <_dtoa_r+0x604>)
 800ef62:	f7f1 f9bb 	bl	80002dc <__adddf3>
 800ef66:	4605      	mov	r5, r0
 800ef68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ef6c:	2f00      	cmp	r7, #0
 800ef6e:	d15d      	bne.n	800f02c <_dtoa_r+0x4bc>
 800ef70:	2200      	movs	r2, #0
 800ef72:	4b81      	ldr	r3, [pc, #516]	; (800f178 <_dtoa_r+0x608>)
 800ef74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef78:	f7f1 f9ae 	bl	80002d8 <__aeabi_dsub>
 800ef7c:	462a      	mov	r2, r5
 800ef7e:	4633      	mov	r3, r6
 800ef80:	e9cd 0100 	strd	r0, r1, [sp]
 800ef84:	f7f1 fdf0 	bl	8000b68 <__aeabi_dcmpgt>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f040 8288 	bne.w	800f49e <_dtoa_r+0x92e>
 800ef8e:	462a      	mov	r2, r5
 800ef90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef98:	f7f1 fdc8 	bl	8000b2c <__aeabi_dcmplt>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	f040 827c 	bne.w	800f49a <_dtoa_r+0x92a>
 800efa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800efa6:	e9cd 2300 	strd	r2, r3, [sp]
 800efaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efac:	2b00      	cmp	r3, #0
 800efae:	f2c0 8150 	blt.w	800f252 <_dtoa_r+0x6e2>
 800efb2:	f1ba 0f0e 	cmp.w	sl, #14
 800efb6:	f300 814c 	bgt.w	800f252 <_dtoa_r+0x6e2>
 800efba:	4b6a      	ldr	r3, [pc, #424]	; (800f164 <_dtoa_r+0x5f4>)
 800efbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efc0:	ed93 7b00 	vldr	d7, [r3]
 800efc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800efcc:	f280 80d8 	bge.w	800f180 <_dtoa_r+0x610>
 800efd0:	f1b9 0f00 	cmp.w	r9, #0
 800efd4:	f300 80d4 	bgt.w	800f180 <_dtoa_r+0x610>
 800efd8:	f040 825e 	bne.w	800f498 <_dtoa_r+0x928>
 800efdc:	2200      	movs	r2, #0
 800efde:	4b66      	ldr	r3, [pc, #408]	; (800f178 <_dtoa_r+0x608>)
 800efe0:	ec51 0b17 	vmov	r0, r1, d7
 800efe4:	f7f1 fb30 	bl	8000648 <__aeabi_dmul>
 800efe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efec:	f7f1 fdb2 	bl	8000b54 <__aeabi_dcmpge>
 800eff0:	464f      	mov	r7, r9
 800eff2:	464e      	mov	r6, r9
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f040 8234 	bne.w	800f462 <_dtoa_r+0x8f2>
 800effa:	2331      	movs	r3, #49	; 0x31
 800effc:	f10b 0501 	add.w	r5, fp, #1
 800f000:	f88b 3000 	strb.w	r3, [fp]
 800f004:	f10a 0a01 	add.w	sl, sl, #1
 800f008:	e22f      	b.n	800f46a <_dtoa_r+0x8fa>
 800f00a:	07f2      	lsls	r2, r6, #31
 800f00c:	d505      	bpl.n	800f01a <_dtoa_r+0x4aa>
 800f00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f012:	f7f1 fb19 	bl	8000648 <__aeabi_dmul>
 800f016:	3501      	adds	r5, #1
 800f018:	2301      	movs	r3, #1
 800f01a:	1076      	asrs	r6, r6, #1
 800f01c:	3708      	adds	r7, #8
 800f01e:	e772      	b.n	800ef06 <_dtoa_r+0x396>
 800f020:	2502      	movs	r5, #2
 800f022:	e774      	b.n	800ef0e <_dtoa_r+0x39e>
 800f024:	f8cd a020 	str.w	sl, [sp, #32]
 800f028:	464f      	mov	r7, r9
 800f02a:	e791      	b.n	800ef50 <_dtoa_r+0x3e0>
 800f02c:	4b4d      	ldr	r3, [pc, #308]	; (800f164 <_dtoa_r+0x5f4>)
 800f02e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f032:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d047      	beq.n	800f0cc <_dtoa_r+0x55c>
 800f03c:	4602      	mov	r2, r0
 800f03e:	460b      	mov	r3, r1
 800f040:	2000      	movs	r0, #0
 800f042:	494e      	ldr	r1, [pc, #312]	; (800f17c <_dtoa_r+0x60c>)
 800f044:	f7f1 fc2a 	bl	800089c <__aeabi_ddiv>
 800f048:	462a      	mov	r2, r5
 800f04a:	4633      	mov	r3, r6
 800f04c:	f7f1 f944 	bl	80002d8 <__aeabi_dsub>
 800f050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f054:	465d      	mov	r5, fp
 800f056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f05a:	f7f1 fda5 	bl	8000ba8 <__aeabi_d2iz>
 800f05e:	4606      	mov	r6, r0
 800f060:	f7f1 fa88 	bl	8000574 <__aeabi_i2d>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f06c:	f7f1 f934 	bl	80002d8 <__aeabi_dsub>
 800f070:	3630      	adds	r6, #48	; 0x30
 800f072:	f805 6b01 	strb.w	r6, [r5], #1
 800f076:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f07a:	e9cd 0100 	strd	r0, r1, [sp]
 800f07e:	f7f1 fd55 	bl	8000b2c <__aeabi_dcmplt>
 800f082:	2800      	cmp	r0, #0
 800f084:	d163      	bne.n	800f14e <_dtoa_r+0x5de>
 800f086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f08a:	2000      	movs	r0, #0
 800f08c:	4937      	ldr	r1, [pc, #220]	; (800f16c <_dtoa_r+0x5fc>)
 800f08e:	f7f1 f923 	bl	80002d8 <__aeabi_dsub>
 800f092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f096:	f7f1 fd49 	bl	8000b2c <__aeabi_dcmplt>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f040 80b7 	bne.w	800f20e <_dtoa_r+0x69e>
 800f0a0:	eba5 030b 	sub.w	r3, r5, fp
 800f0a4:	429f      	cmp	r7, r3
 800f0a6:	f77f af7c 	ble.w	800efa2 <_dtoa_r+0x432>
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	4b30      	ldr	r3, [pc, #192]	; (800f170 <_dtoa_r+0x600>)
 800f0ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f0b2:	f7f1 fac9 	bl	8000648 <__aeabi_dmul>
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f0bc:	4b2c      	ldr	r3, [pc, #176]	; (800f170 <_dtoa_r+0x600>)
 800f0be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0c2:	f7f1 fac1 	bl	8000648 <__aeabi_dmul>
 800f0c6:	e9cd 0100 	strd	r0, r1, [sp]
 800f0ca:	e7c4      	b.n	800f056 <_dtoa_r+0x4e6>
 800f0cc:	462a      	mov	r2, r5
 800f0ce:	4633      	mov	r3, r6
 800f0d0:	f7f1 faba 	bl	8000648 <__aeabi_dmul>
 800f0d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f0d8:	eb0b 0507 	add.w	r5, fp, r7
 800f0dc:	465e      	mov	r6, fp
 800f0de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0e2:	f7f1 fd61 	bl	8000ba8 <__aeabi_d2iz>
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	f7f1 fa44 	bl	8000574 <__aeabi_i2d>
 800f0ec:	3730      	adds	r7, #48	; 0x30
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0f6:	f7f1 f8ef 	bl	80002d8 <__aeabi_dsub>
 800f0fa:	f806 7b01 	strb.w	r7, [r6], #1
 800f0fe:	42ae      	cmp	r6, r5
 800f100:	e9cd 0100 	strd	r0, r1, [sp]
 800f104:	f04f 0200 	mov.w	r2, #0
 800f108:	d126      	bne.n	800f158 <_dtoa_r+0x5e8>
 800f10a:	4b1c      	ldr	r3, [pc, #112]	; (800f17c <_dtoa_r+0x60c>)
 800f10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f110:	f7f1 f8e4 	bl	80002dc <__adddf3>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f11c:	f7f1 fd24 	bl	8000b68 <__aeabi_dcmpgt>
 800f120:	2800      	cmp	r0, #0
 800f122:	d174      	bne.n	800f20e <_dtoa_r+0x69e>
 800f124:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f128:	2000      	movs	r0, #0
 800f12a:	4914      	ldr	r1, [pc, #80]	; (800f17c <_dtoa_r+0x60c>)
 800f12c:	f7f1 f8d4 	bl	80002d8 <__aeabi_dsub>
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f138:	f7f1 fcf8 	bl	8000b2c <__aeabi_dcmplt>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	f43f af30 	beq.w	800efa2 <_dtoa_r+0x432>
 800f142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f146:	2b30      	cmp	r3, #48	; 0x30
 800f148:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f14c:	d002      	beq.n	800f154 <_dtoa_r+0x5e4>
 800f14e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f152:	e04a      	b.n	800f1ea <_dtoa_r+0x67a>
 800f154:	4615      	mov	r5, r2
 800f156:	e7f4      	b.n	800f142 <_dtoa_r+0x5d2>
 800f158:	4b05      	ldr	r3, [pc, #20]	; (800f170 <_dtoa_r+0x600>)
 800f15a:	f7f1 fa75 	bl	8000648 <__aeabi_dmul>
 800f15e:	e9cd 0100 	strd	r0, r1, [sp]
 800f162:	e7bc      	b.n	800f0de <_dtoa_r+0x56e>
 800f164:	08011aa8 	.word	0x08011aa8
 800f168:	08011a80 	.word	0x08011a80
 800f16c:	3ff00000 	.word	0x3ff00000
 800f170:	40240000 	.word	0x40240000
 800f174:	401c0000 	.word	0x401c0000
 800f178:	40140000 	.word	0x40140000
 800f17c:	3fe00000 	.word	0x3fe00000
 800f180:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f184:	465d      	mov	r5, fp
 800f186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	f7f1 fb85 	bl	800089c <__aeabi_ddiv>
 800f192:	f7f1 fd09 	bl	8000ba8 <__aeabi_d2iz>
 800f196:	4680      	mov	r8, r0
 800f198:	f7f1 f9ec 	bl	8000574 <__aeabi_i2d>
 800f19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1a0:	f7f1 fa52 	bl	8000648 <__aeabi_dmul>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f1b0:	f7f1 f892 	bl	80002d8 <__aeabi_dsub>
 800f1b4:	f805 6b01 	strb.w	r6, [r5], #1
 800f1b8:	eba5 060b 	sub.w	r6, r5, fp
 800f1bc:	45b1      	cmp	r9, r6
 800f1be:	4602      	mov	r2, r0
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	d139      	bne.n	800f238 <_dtoa_r+0x6c8>
 800f1c4:	f7f1 f88a 	bl	80002dc <__adddf3>
 800f1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	460f      	mov	r7, r1
 800f1d0:	f7f1 fcca 	bl	8000b68 <__aeabi_dcmpgt>
 800f1d4:	b9c8      	cbnz	r0, 800f20a <_dtoa_r+0x69a>
 800f1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1da:	4630      	mov	r0, r6
 800f1dc:	4639      	mov	r1, r7
 800f1de:	f7f1 fc9b 	bl	8000b18 <__aeabi_dcmpeq>
 800f1e2:	b110      	cbz	r0, 800f1ea <_dtoa_r+0x67a>
 800f1e4:	f018 0f01 	tst.w	r8, #1
 800f1e8:	d10f      	bne.n	800f20a <_dtoa_r+0x69a>
 800f1ea:	9904      	ldr	r1, [sp, #16]
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 fcaa 	bl	800fb46 <_Bfree>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1f6:	702b      	strb	r3, [r5, #0]
 800f1f8:	f10a 0301 	add.w	r3, sl, #1
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 8241 	beq.w	800f688 <_dtoa_r+0xb18>
 800f206:	601d      	str	r5, [r3, #0]
 800f208:	e23e      	b.n	800f688 <_dtoa_r+0xb18>
 800f20a:	f8cd a020 	str.w	sl, [sp, #32]
 800f20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f212:	2a39      	cmp	r2, #57	; 0x39
 800f214:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f218:	d108      	bne.n	800f22c <_dtoa_r+0x6bc>
 800f21a:	459b      	cmp	fp, r3
 800f21c:	d10a      	bne.n	800f234 <_dtoa_r+0x6c4>
 800f21e:	9b08      	ldr	r3, [sp, #32]
 800f220:	3301      	adds	r3, #1
 800f222:	9308      	str	r3, [sp, #32]
 800f224:	2330      	movs	r3, #48	; 0x30
 800f226:	f88b 3000 	strb.w	r3, [fp]
 800f22a:	465b      	mov	r3, fp
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	3201      	adds	r2, #1
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	e78c      	b.n	800f14e <_dtoa_r+0x5de>
 800f234:	461d      	mov	r5, r3
 800f236:	e7ea      	b.n	800f20e <_dtoa_r+0x69e>
 800f238:	2200      	movs	r2, #0
 800f23a:	4b9b      	ldr	r3, [pc, #620]	; (800f4a8 <_dtoa_r+0x938>)
 800f23c:	f7f1 fa04 	bl	8000648 <__aeabi_dmul>
 800f240:	2200      	movs	r2, #0
 800f242:	2300      	movs	r3, #0
 800f244:	4606      	mov	r6, r0
 800f246:	460f      	mov	r7, r1
 800f248:	f7f1 fc66 	bl	8000b18 <__aeabi_dcmpeq>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d09a      	beq.n	800f186 <_dtoa_r+0x616>
 800f250:	e7cb      	b.n	800f1ea <_dtoa_r+0x67a>
 800f252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f254:	2a00      	cmp	r2, #0
 800f256:	f000 808b 	beq.w	800f370 <_dtoa_r+0x800>
 800f25a:	9a06      	ldr	r2, [sp, #24]
 800f25c:	2a01      	cmp	r2, #1
 800f25e:	dc6e      	bgt.n	800f33e <_dtoa_r+0x7ce>
 800f260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f262:	2a00      	cmp	r2, #0
 800f264:	d067      	beq.n	800f336 <_dtoa_r+0x7c6>
 800f266:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f26a:	9f07      	ldr	r7, [sp, #28]
 800f26c:	9d05      	ldr	r5, [sp, #20]
 800f26e:	9a05      	ldr	r2, [sp, #20]
 800f270:	2101      	movs	r1, #1
 800f272:	441a      	add	r2, r3
 800f274:	4620      	mov	r0, r4
 800f276:	9205      	str	r2, [sp, #20]
 800f278:	4498      	add	r8, r3
 800f27a:	f000 fd04 	bl	800fc86 <__i2b>
 800f27e:	4606      	mov	r6, r0
 800f280:	2d00      	cmp	r5, #0
 800f282:	dd0c      	ble.n	800f29e <_dtoa_r+0x72e>
 800f284:	f1b8 0f00 	cmp.w	r8, #0
 800f288:	dd09      	ble.n	800f29e <_dtoa_r+0x72e>
 800f28a:	4545      	cmp	r5, r8
 800f28c:	9a05      	ldr	r2, [sp, #20]
 800f28e:	462b      	mov	r3, r5
 800f290:	bfa8      	it	ge
 800f292:	4643      	movge	r3, r8
 800f294:	1ad2      	subs	r2, r2, r3
 800f296:	9205      	str	r2, [sp, #20]
 800f298:	1aed      	subs	r5, r5, r3
 800f29a:	eba8 0803 	sub.w	r8, r8, r3
 800f29e:	9b07      	ldr	r3, [sp, #28]
 800f2a0:	b1eb      	cbz	r3, 800f2de <_dtoa_r+0x76e>
 800f2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d067      	beq.n	800f378 <_dtoa_r+0x808>
 800f2a8:	b18f      	cbz	r7, 800f2ce <_dtoa_r+0x75e>
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	463a      	mov	r2, r7
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f000 fd88 	bl	800fdc4 <__pow5mult>
 800f2b4:	9a04      	ldr	r2, [sp, #16]
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f000 fcec 	bl	800fc98 <__multiply>
 800f2c0:	9904      	ldr	r1, [sp, #16]
 800f2c2:	9008      	str	r0, [sp, #32]
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 fc3e 	bl	800fb46 <_Bfree>
 800f2ca:	9b08      	ldr	r3, [sp, #32]
 800f2cc:	9304      	str	r3, [sp, #16]
 800f2ce:	9b07      	ldr	r3, [sp, #28]
 800f2d0:	1bda      	subs	r2, r3, r7
 800f2d2:	d004      	beq.n	800f2de <_dtoa_r+0x76e>
 800f2d4:	9904      	ldr	r1, [sp, #16]
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 fd74 	bl	800fdc4 <__pow5mult>
 800f2dc:	9004      	str	r0, [sp, #16]
 800f2de:	2101      	movs	r1, #1
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f000 fcd0 	bl	800fc86 <__i2b>
 800f2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2e8:	4607      	mov	r7, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 81d0 	beq.w	800f690 <_dtoa_r+0xb20>
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f000 fd65 	bl	800fdc4 <__pow5mult>
 800f2fa:	9b06      	ldr	r3, [sp, #24]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	4607      	mov	r7, r0
 800f300:	dc40      	bgt.n	800f384 <_dtoa_r+0x814>
 800f302:	9b00      	ldr	r3, [sp, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d139      	bne.n	800f37c <_dtoa_r+0x80c>
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d136      	bne.n	800f380 <_dtoa_r+0x810>
 800f312:	9b01      	ldr	r3, [sp, #4]
 800f314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f318:	0d1b      	lsrs	r3, r3, #20
 800f31a:	051b      	lsls	r3, r3, #20
 800f31c:	b12b      	cbz	r3, 800f32a <_dtoa_r+0x7ba>
 800f31e:	9b05      	ldr	r3, [sp, #20]
 800f320:	3301      	adds	r3, #1
 800f322:	9305      	str	r3, [sp, #20]
 800f324:	f108 0801 	add.w	r8, r8, #1
 800f328:	2301      	movs	r3, #1
 800f32a:	9307      	str	r3, [sp, #28]
 800f32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d12a      	bne.n	800f388 <_dtoa_r+0x818>
 800f332:	2001      	movs	r0, #1
 800f334:	e030      	b.n	800f398 <_dtoa_r+0x828>
 800f336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f338:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f33c:	e795      	b.n	800f26a <_dtoa_r+0x6fa>
 800f33e:	9b07      	ldr	r3, [sp, #28]
 800f340:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f344:	42bb      	cmp	r3, r7
 800f346:	bfbf      	itttt	lt
 800f348:	9b07      	ldrlt	r3, [sp, #28]
 800f34a:	9707      	strlt	r7, [sp, #28]
 800f34c:	1afa      	sublt	r2, r7, r3
 800f34e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f350:	bfbb      	ittet	lt
 800f352:	189b      	addlt	r3, r3, r2
 800f354:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f356:	1bdf      	subge	r7, r3, r7
 800f358:	2700      	movlt	r7, #0
 800f35a:	f1b9 0f00 	cmp.w	r9, #0
 800f35e:	bfb5      	itete	lt
 800f360:	9b05      	ldrlt	r3, [sp, #20]
 800f362:	9d05      	ldrge	r5, [sp, #20]
 800f364:	eba3 0509 	sublt.w	r5, r3, r9
 800f368:	464b      	movge	r3, r9
 800f36a:	bfb8      	it	lt
 800f36c:	2300      	movlt	r3, #0
 800f36e:	e77e      	b.n	800f26e <_dtoa_r+0x6fe>
 800f370:	9f07      	ldr	r7, [sp, #28]
 800f372:	9d05      	ldr	r5, [sp, #20]
 800f374:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f376:	e783      	b.n	800f280 <_dtoa_r+0x710>
 800f378:	9a07      	ldr	r2, [sp, #28]
 800f37a:	e7ab      	b.n	800f2d4 <_dtoa_r+0x764>
 800f37c:	2300      	movs	r3, #0
 800f37e:	e7d4      	b.n	800f32a <_dtoa_r+0x7ba>
 800f380:	9b00      	ldr	r3, [sp, #0]
 800f382:	e7d2      	b.n	800f32a <_dtoa_r+0x7ba>
 800f384:	2300      	movs	r3, #0
 800f386:	9307      	str	r3, [sp, #28]
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f38e:	6918      	ldr	r0, [r3, #16]
 800f390:	f000 fc2b 	bl	800fbea <__hi0bits>
 800f394:	f1c0 0020 	rsb	r0, r0, #32
 800f398:	4440      	add	r0, r8
 800f39a:	f010 001f 	ands.w	r0, r0, #31
 800f39e:	d047      	beq.n	800f430 <_dtoa_r+0x8c0>
 800f3a0:	f1c0 0320 	rsb	r3, r0, #32
 800f3a4:	2b04      	cmp	r3, #4
 800f3a6:	dd3b      	ble.n	800f420 <_dtoa_r+0x8b0>
 800f3a8:	9b05      	ldr	r3, [sp, #20]
 800f3aa:	f1c0 001c 	rsb	r0, r0, #28
 800f3ae:	4403      	add	r3, r0
 800f3b0:	9305      	str	r3, [sp, #20]
 800f3b2:	4405      	add	r5, r0
 800f3b4:	4480      	add	r8, r0
 800f3b6:	9b05      	ldr	r3, [sp, #20]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	dd05      	ble.n	800f3c8 <_dtoa_r+0x858>
 800f3bc:	461a      	mov	r2, r3
 800f3be:	9904      	ldr	r1, [sp, #16]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fd4d 	bl	800fe60 <__lshift>
 800f3c6:	9004      	str	r0, [sp, #16]
 800f3c8:	f1b8 0f00 	cmp.w	r8, #0
 800f3cc:	dd05      	ble.n	800f3da <_dtoa_r+0x86a>
 800f3ce:	4639      	mov	r1, r7
 800f3d0:	4642      	mov	r2, r8
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 fd44 	bl	800fe60 <__lshift>
 800f3d8:	4607      	mov	r7, r0
 800f3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3dc:	b353      	cbz	r3, 800f434 <_dtoa_r+0x8c4>
 800f3de:	4639      	mov	r1, r7
 800f3e0:	9804      	ldr	r0, [sp, #16]
 800f3e2:	f000 fd91 	bl	800ff08 <__mcmp>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	da24      	bge.n	800f434 <_dtoa_r+0x8c4>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	220a      	movs	r2, #10
 800f3ee:	9904      	ldr	r1, [sp, #16]
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 fbbf 	bl	800fb74 <__multadd>
 800f3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3f8:	9004      	str	r0, [sp, #16]
 800f3fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f000 814d 	beq.w	800f69e <_dtoa_r+0xb2e>
 800f404:	2300      	movs	r3, #0
 800f406:	4631      	mov	r1, r6
 800f408:	220a      	movs	r2, #10
 800f40a:	4620      	mov	r0, r4
 800f40c:	f000 fbb2 	bl	800fb74 <__multadd>
 800f410:	9b02      	ldr	r3, [sp, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	4606      	mov	r6, r0
 800f416:	dc4f      	bgt.n	800f4b8 <_dtoa_r+0x948>
 800f418:	9b06      	ldr	r3, [sp, #24]
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	dd4c      	ble.n	800f4b8 <_dtoa_r+0x948>
 800f41e:	e011      	b.n	800f444 <_dtoa_r+0x8d4>
 800f420:	d0c9      	beq.n	800f3b6 <_dtoa_r+0x846>
 800f422:	9a05      	ldr	r2, [sp, #20]
 800f424:	331c      	adds	r3, #28
 800f426:	441a      	add	r2, r3
 800f428:	9205      	str	r2, [sp, #20]
 800f42a:	441d      	add	r5, r3
 800f42c:	4498      	add	r8, r3
 800f42e:	e7c2      	b.n	800f3b6 <_dtoa_r+0x846>
 800f430:	4603      	mov	r3, r0
 800f432:	e7f6      	b.n	800f422 <_dtoa_r+0x8b2>
 800f434:	f1b9 0f00 	cmp.w	r9, #0
 800f438:	dc38      	bgt.n	800f4ac <_dtoa_r+0x93c>
 800f43a:	9b06      	ldr	r3, [sp, #24]
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	dd35      	ble.n	800f4ac <_dtoa_r+0x93c>
 800f440:	f8cd 9008 	str.w	r9, [sp, #8]
 800f444:	9b02      	ldr	r3, [sp, #8]
 800f446:	b963      	cbnz	r3, 800f462 <_dtoa_r+0x8f2>
 800f448:	4639      	mov	r1, r7
 800f44a:	2205      	movs	r2, #5
 800f44c:	4620      	mov	r0, r4
 800f44e:	f000 fb91 	bl	800fb74 <__multadd>
 800f452:	4601      	mov	r1, r0
 800f454:	4607      	mov	r7, r0
 800f456:	9804      	ldr	r0, [sp, #16]
 800f458:	f000 fd56 	bl	800ff08 <__mcmp>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f73f adcc 	bgt.w	800effa <_dtoa_r+0x48a>
 800f462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f464:	465d      	mov	r5, fp
 800f466:	ea6f 0a03 	mvn.w	sl, r3
 800f46a:	f04f 0900 	mov.w	r9, #0
 800f46e:	4639      	mov	r1, r7
 800f470:	4620      	mov	r0, r4
 800f472:	f000 fb68 	bl	800fb46 <_Bfree>
 800f476:	2e00      	cmp	r6, #0
 800f478:	f43f aeb7 	beq.w	800f1ea <_dtoa_r+0x67a>
 800f47c:	f1b9 0f00 	cmp.w	r9, #0
 800f480:	d005      	beq.n	800f48e <_dtoa_r+0x91e>
 800f482:	45b1      	cmp	r9, r6
 800f484:	d003      	beq.n	800f48e <_dtoa_r+0x91e>
 800f486:	4649      	mov	r1, r9
 800f488:	4620      	mov	r0, r4
 800f48a:	f000 fb5c 	bl	800fb46 <_Bfree>
 800f48e:	4631      	mov	r1, r6
 800f490:	4620      	mov	r0, r4
 800f492:	f000 fb58 	bl	800fb46 <_Bfree>
 800f496:	e6a8      	b.n	800f1ea <_dtoa_r+0x67a>
 800f498:	2700      	movs	r7, #0
 800f49a:	463e      	mov	r6, r7
 800f49c:	e7e1      	b.n	800f462 <_dtoa_r+0x8f2>
 800f49e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f4a2:	463e      	mov	r6, r7
 800f4a4:	e5a9      	b.n	800effa <_dtoa_r+0x48a>
 800f4a6:	bf00      	nop
 800f4a8:	40240000 	.word	0x40240000
 800f4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f000 80fa 	beq.w	800f6ac <_dtoa_r+0xb3c>
 800f4b8:	2d00      	cmp	r5, #0
 800f4ba:	dd05      	ble.n	800f4c8 <_dtoa_r+0x958>
 800f4bc:	4631      	mov	r1, r6
 800f4be:	462a      	mov	r2, r5
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fccd 	bl	800fe60 <__lshift>
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	9b07      	ldr	r3, [sp, #28]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d04c      	beq.n	800f568 <_dtoa_r+0x9f8>
 800f4ce:	6871      	ldr	r1, [r6, #4]
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f000 fb04 	bl	800fade <_Balloc>
 800f4d6:	6932      	ldr	r2, [r6, #16]
 800f4d8:	3202      	adds	r2, #2
 800f4da:	4605      	mov	r5, r0
 800f4dc:	0092      	lsls	r2, r2, #2
 800f4de:	f106 010c 	add.w	r1, r6, #12
 800f4e2:	300c      	adds	r0, #12
 800f4e4:	f000 faf0 	bl	800fac8 <memcpy>
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 fcb7 	bl	800fe60 <__lshift>
 800f4f2:	9b00      	ldr	r3, [sp, #0]
 800f4f4:	f8cd b014 	str.w	fp, [sp, #20]
 800f4f8:	f003 0301 	and.w	r3, r3, #1
 800f4fc:	46b1      	mov	r9, r6
 800f4fe:	9307      	str	r3, [sp, #28]
 800f500:	4606      	mov	r6, r0
 800f502:	4639      	mov	r1, r7
 800f504:	9804      	ldr	r0, [sp, #16]
 800f506:	f7ff faa7 	bl	800ea58 <quorem>
 800f50a:	4649      	mov	r1, r9
 800f50c:	4605      	mov	r5, r0
 800f50e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f512:	9804      	ldr	r0, [sp, #16]
 800f514:	f000 fcf8 	bl	800ff08 <__mcmp>
 800f518:	4632      	mov	r2, r6
 800f51a:	9000      	str	r0, [sp, #0]
 800f51c:	4639      	mov	r1, r7
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 fd0c 	bl	800ff3c <__mdiff>
 800f524:	68c3      	ldr	r3, [r0, #12]
 800f526:	4602      	mov	r2, r0
 800f528:	bb03      	cbnz	r3, 800f56c <_dtoa_r+0x9fc>
 800f52a:	4601      	mov	r1, r0
 800f52c:	9008      	str	r0, [sp, #32]
 800f52e:	9804      	ldr	r0, [sp, #16]
 800f530:	f000 fcea 	bl	800ff08 <__mcmp>
 800f534:	9a08      	ldr	r2, [sp, #32]
 800f536:	4603      	mov	r3, r0
 800f538:	4611      	mov	r1, r2
 800f53a:	4620      	mov	r0, r4
 800f53c:	9308      	str	r3, [sp, #32]
 800f53e:	f000 fb02 	bl	800fb46 <_Bfree>
 800f542:	9b08      	ldr	r3, [sp, #32]
 800f544:	b9a3      	cbnz	r3, 800f570 <_dtoa_r+0xa00>
 800f546:	9a06      	ldr	r2, [sp, #24]
 800f548:	b992      	cbnz	r2, 800f570 <_dtoa_r+0xa00>
 800f54a:	9a07      	ldr	r2, [sp, #28]
 800f54c:	b982      	cbnz	r2, 800f570 <_dtoa_r+0xa00>
 800f54e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f552:	d029      	beq.n	800f5a8 <_dtoa_r+0xa38>
 800f554:	9b00      	ldr	r3, [sp, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	dd01      	ble.n	800f55e <_dtoa_r+0x9ee>
 800f55a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f55e:	9b05      	ldr	r3, [sp, #20]
 800f560:	1c5d      	adds	r5, r3, #1
 800f562:	f883 8000 	strb.w	r8, [r3]
 800f566:	e782      	b.n	800f46e <_dtoa_r+0x8fe>
 800f568:	4630      	mov	r0, r6
 800f56a:	e7c2      	b.n	800f4f2 <_dtoa_r+0x982>
 800f56c:	2301      	movs	r3, #1
 800f56e:	e7e3      	b.n	800f538 <_dtoa_r+0x9c8>
 800f570:	9a00      	ldr	r2, [sp, #0]
 800f572:	2a00      	cmp	r2, #0
 800f574:	db04      	blt.n	800f580 <_dtoa_r+0xa10>
 800f576:	d125      	bne.n	800f5c4 <_dtoa_r+0xa54>
 800f578:	9a06      	ldr	r2, [sp, #24]
 800f57a:	bb1a      	cbnz	r2, 800f5c4 <_dtoa_r+0xa54>
 800f57c:	9a07      	ldr	r2, [sp, #28]
 800f57e:	bb0a      	cbnz	r2, 800f5c4 <_dtoa_r+0xa54>
 800f580:	2b00      	cmp	r3, #0
 800f582:	ddec      	ble.n	800f55e <_dtoa_r+0x9ee>
 800f584:	2201      	movs	r2, #1
 800f586:	9904      	ldr	r1, [sp, #16]
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 fc69 	bl	800fe60 <__lshift>
 800f58e:	4639      	mov	r1, r7
 800f590:	9004      	str	r0, [sp, #16]
 800f592:	f000 fcb9 	bl	800ff08 <__mcmp>
 800f596:	2800      	cmp	r0, #0
 800f598:	dc03      	bgt.n	800f5a2 <_dtoa_r+0xa32>
 800f59a:	d1e0      	bne.n	800f55e <_dtoa_r+0x9ee>
 800f59c:	f018 0f01 	tst.w	r8, #1
 800f5a0:	d0dd      	beq.n	800f55e <_dtoa_r+0x9ee>
 800f5a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f5a6:	d1d8      	bne.n	800f55a <_dtoa_r+0x9ea>
 800f5a8:	9b05      	ldr	r3, [sp, #20]
 800f5aa:	9a05      	ldr	r2, [sp, #20]
 800f5ac:	1c5d      	adds	r5, r3, #1
 800f5ae:	2339      	movs	r3, #57	; 0x39
 800f5b0:	7013      	strb	r3, [r2, #0]
 800f5b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5b6:	2b39      	cmp	r3, #57	; 0x39
 800f5b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f5bc:	d04f      	beq.n	800f65e <_dtoa_r+0xaee>
 800f5be:	3301      	adds	r3, #1
 800f5c0:	7013      	strb	r3, [r2, #0]
 800f5c2:	e754      	b.n	800f46e <_dtoa_r+0x8fe>
 800f5c4:	9a05      	ldr	r2, [sp, #20]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f102 0501 	add.w	r5, r2, #1
 800f5cc:	dd06      	ble.n	800f5dc <_dtoa_r+0xa6c>
 800f5ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f5d2:	d0e9      	beq.n	800f5a8 <_dtoa_r+0xa38>
 800f5d4:	f108 0801 	add.w	r8, r8, #1
 800f5d8:	9b05      	ldr	r3, [sp, #20]
 800f5da:	e7c2      	b.n	800f562 <_dtoa_r+0x9f2>
 800f5dc:	9a02      	ldr	r2, [sp, #8]
 800f5de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f5e2:	eba5 030b 	sub.w	r3, r5, fp
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d021      	beq.n	800f62e <_dtoa_r+0xabe>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	220a      	movs	r2, #10
 800f5ee:	9904      	ldr	r1, [sp, #16]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f000 fabf 	bl	800fb74 <__multadd>
 800f5f6:	45b1      	cmp	r9, r6
 800f5f8:	9004      	str	r0, [sp, #16]
 800f5fa:	f04f 0300 	mov.w	r3, #0
 800f5fe:	f04f 020a 	mov.w	r2, #10
 800f602:	4649      	mov	r1, r9
 800f604:	4620      	mov	r0, r4
 800f606:	d105      	bne.n	800f614 <_dtoa_r+0xaa4>
 800f608:	f000 fab4 	bl	800fb74 <__multadd>
 800f60c:	4681      	mov	r9, r0
 800f60e:	4606      	mov	r6, r0
 800f610:	9505      	str	r5, [sp, #20]
 800f612:	e776      	b.n	800f502 <_dtoa_r+0x992>
 800f614:	f000 faae 	bl	800fb74 <__multadd>
 800f618:	4631      	mov	r1, r6
 800f61a:	4681      	mov	r9, r0
 800f61c:	2300      	movs	r3, #0
 800f61e:	220a      	movs	r2, #10
 800f620:	4620      	mov	r0, r4
 800f622:	f000 faa7 	bl	800fb74 <__multadd>
 800f626:	4606      	mov	r6, r0
 800f628:	e7f2      	b.n	800f610 <_dtoa_r+0xaa0>
 800f62a:	f04f 0900 	mov.w	r9, #0
 800f62e:	2201      	movs	r2, #1
 800f630:	9904      	ldr	r1, [sp, #16]
 800f632:	4620      	mov	r0, r4
 800f634:	f000 fc14 	bl	800fe60 <__lshift>
 800f638:	4639      	mov	r1, r7
 800f63a:	9004      	str	r0, [sp, #16]
 800f63c:	f000 fc64 	bl	800ff08 <__mcmp>
 800f640:	2800      	cmp	r0, #0
 800f642:	dcb6      	bgt.n	800f5b2 <_dtoa_r+0xa42>
 800f644:	d102      	bne.n	800f64c <_dtoa_r+0xadc>
 800f646:	f018 0f01 	tst.w	r8, #1
 800f64a:	d1b2      	bne.n	800f5b2 <_dtoa_r+0xa42>
 800f64c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f650:	2b30      	cmp	r3, #48	; 0x30
 800f652:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f656:	f47f af0a 	bne.w	800f46e <_dtoa_r+0x8fe>
 800f65a:	4615      	mov	r5, r2
 800f65c:	e7f6      	b.n	800f64c <_dtoa_r+0xadc>
 800f65e:	4593      	cmp	fp, r2
 800f660:	d105      	bne.n	800f66e <_dtoa_r+0xafe>
 800f662:	2331      	movs	r3, #49	; 0x31
 800f664:	f10a 0a01 	add.w	sl, sl, #1
 800f668:	f88b 3000 	strb.w	r3, [fp]
 800f66c:	e6ff      	b.n	800f46e <_dtoa_r+0x8fe>
 800f66e:	4615      	mov	r5, r2
 800f670:	e79f      	b.n	800f5b2 <_dtoa_r+0xa42>
 800f672:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f6d8 <_dtoa_r+0xb68>
 800f676:	e007      	b.n	800f688 <_dtoa_r+0xb18>
 800f678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f67a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f6dc <_dtoa_r+0xb6c>
 800f67e:	b11b      	cbz	r3, 800f688 <_dtoa_r+0xb18>
 800f680:	f10b 0308 	add.w	r3, fp, #8
 800f684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f686:	6013      	str	r3, [r2, #0]
 800f688:	4658      	mov	r0, fp
 800f68a:	b017      	add	sp, #92	; 0x5c
 800f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	9b06      	ldr	r3, [sp, #24]
 800f692:	2b01      	cmp	r3, #1
 800f694:	f77f ae35 	ble.w	800f302 <_dtoa_r+0x792>
 800f698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f69a:	9307      	str	r3, [sp, #28]
 800f69c:	e649      	b.n	800f332 <_dtoa_r+0x7c2>
 800f69e:	9b02      	ldr	r3, [sp, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dc03      	bgt.n	800f6ac <_dtoa_r+0xb3c>
 800f6a4:	9b06      	ldr	r3, [sp, #24]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	f73f aecc 	bgt.w	800f444 <_dtoa_r+0x8d4>
 800f6ac:	465d      	mov	r5, fp
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	9804      	ldr	r0, [sp, #16]
 800f6b2:	f7ff f9d1 	bl	800ea58 <quorem>
 800f6b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f6ba:	f805 8b01 	strb.w	r8, [r5], #1
 800f6be:	9a02      	ldr	r2, [sp, #8]
 800f6c0:	eba5 030b 	sub.w	r3, r5, fp
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	ddb0      	ble.n	800f62a <_dtoa_r+0xaba>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	220a      	movs	r2, #10
 800f6cc:	9904      	ldr	r1, [sp, #16]
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 fa50 	bl	800fb74 <__multadd>
 800f6d4:	9004      	str	r0, [sp, #16]
 800f6d6:	e7ea      	b.n	800f6ae <_dtoa_r+0xb3e>
 800f6d8:	080119ec 	.word	0x080119ec
 800f6dc:	08011a10 	.word	0x08011a10

0800f6e0 <__sflush_r>:
 800f6e0:	898a      	ldrh	r2, [r1, #12]
 800f6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	0710      	lsls	r0, r2, #28
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	d458      	bmi.n	800f7a0 <__sflush_r+0xc0>
 800f6ee:	684b      	ldr	r3, [r1, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dc05      	bgt.n	800f700 <__sflush_r+0x20>
 800f6f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dc02      	bgt.n	800f700 <__sflush_r+0x20>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f702:	2e00      	cmp	r6, #0
 800f704:	d0f9      	beq.n	800f6fa <__sflush_r+0x1a>
 800f706:	2300      	movs	r3, #0
 800f708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f70c:	682f      	ldr	r7, [r5, #0]
 800f70e:	6a21      	ldr	r1, [r4, #32]
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	d032      	beq.n	800f77a <__sflush_r+0x9a>
 800f714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	075a      	lsls	r2, r3, #29
 800f71a:	d505      	bpl.n	800f728 <__sflush_r+0x48>
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	1ac0      	subs	r0, r0, r3
 800f720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f722:	b10b      	cbz	r3, 800f728 <__sflush_r+0x48>
 800f724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f726:	1ac0      	subs	r0, r0, r3
 800f728:	2300      	movs	r3, #0
 800f72a:	4602      	mov	r2, r0
 800f72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f72e:	6a21      	ldr	r1, [r4, #32]
 800f730:	4628      	mov	r0, r5
 800f732:	47b0      	blx	r6
 800f734:	1c43      	adds	r3, r0, #1
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	d106      	bne.n	800f748 <__sflush_r+0x68>
 800f73a:	6829      	ldr	r1, [r5, #0]
 800f73c:	291d      	cmp	r1, #29
 800f73e:	d848      	bhi.n	800f7d2 <__sflush_r+0xf2>
 800f740:	4a29      	ldr	r2, [pc, #164]	; (800f7e8 <__sflush_r+0x108>)
 800f742:	40ca      	lsrs	r2, r1
 800f744:	07d6      	lsls	r6, r2, #31
 800f746:	d544      	bpl.n	800f7d2 <__sflush_r+0xf2>
 800f748:	2200      	movs	r2, #0
 800f74a:	6062      	str	r2, [r4, #4]
 800f74c:	04d9      	lsls	r1, r3, #19
 800f74e:	6922      	ldr	r2, [r4, #16]
 800f750:	6022      	str	r2, [r4, #0]
 800f752:	d504      	bpl.n	800f75e <__sflush_r+0x7e>
 800f754:	1c42      	adds	r2, r0, #1
 800f756:	d101      	bne.n	800f75c <__sflush_r+0x7c>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	b903      	cbnz	r3, 800f75e <__sflush_r+0x7e>
 800f75c:	6560      	str	r0, [r4, #84]	; 0x54
 800f75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f760:	602f      	str	r7, [r5, #0]
 800f762:	2900      	cmp	r1, #0
 800f764:	d0c9      	beq.n	800f6fa <__sflush_r+0x1a>
 800f766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f76a:	4299      	cmp	r1, r3
 800f76c:	d002      	beq.n	800f774 <__sflush_r+0x94>
 800f76e:	4628      	mov	r0, r5
 800f770:	f000 fc9e 	bl	80100b0 <_free_r>
 800f774:	2000      	movs	r0, #0
 800f776:	6360      	str	r0, [r4, #52]	; 0x34
 800f778:	e7c0      	b.n	800f6fc <__sflush_r+0x1c>
 800f77a:	2301      	movs	r3, #1
 800f77c:	4628      	mov	r0, r5
 800f77e:	47b0      	blx	r6
 800f780:	1c41      	adds	r1, r0, #1
 800f782:	d1c8      	bne.n	800f716 <__sflush_r+0x36>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0c5      	beq.n	800f716 <__sflush_r+0x36>
 800f78a:	2b1d      	cmp	r3, #29
 800f78c:	d001      	beq.n	800f792 <__sflush_r+0xb2>
 800f78e:	2b16      	cmp	r3, #22
 800f790:	d101      	bne.n	800f796 <__sflush_r+0xb6>
 800f792:	602f      	str	r7, [r5, #0]
 800f794:	e7b1      	b.n	800f6fa <__sflush_r+0x1a>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	e7ad      	b.n	800f6fc <__sflush_r+0x1c>
 800f7a0:	690f      	ldr	r7, [r1, #16]
 800f7a2:	2f00      	cmp	r7, #0
 800f7a4:	d0a9      	beq.n	800f6fa <__sflush_r+0x1a>
 800f7a6:	0793      	lsls	r3, r2, #30
 800f7a8:	680e      	ldr	r6, [r1, #0]
 800f7aa:	bf08      	it	eq
 800f7ac:	694b      	ldreq	r3, [r1, #20]
 800f7ae:	600f      	str	r7, [r1, #0]
 800f7b0:	bf18      	it	ne
 800f7b2:	2300      	movne	r3, #0
 800f7b4:	eba6 0807 	sub.w	r8, r6, r7
 800f7b8:	608b      	str	r3, [r1, #8]
 800f7ba:	f1b8 0f00 	cmp.w	r8, #0
 800f7be:	dd9c      	ble.n	800f6fa <__sflush_r+0x1a>
 800f7c0:	4643      	mov	r3, r8
 800f7c2:	463a      	mov	r2, r7
 800f7c4:	6a21      	ldr	r1, [r4, #32]
 800f7c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b0      	blx	r6
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	dc06      	bgt.n	800f7de <__sflush_r+0xfe>
 800f7d0:	89a3      	ldrh	r3, [r4, #12]
 800f7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7d6:	81a3      	strh	r3, [r4, #12]
 800f7d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7dc:	e78e      	b.n	800f6fc <__sflush_r+0x1c>
 800f7de:	4407      	add	r7, r0
 800f7e0:	eba8 0800 	sub.w	r8, r8, r0
 800f7e4:	e7e9      	b.n	800f7ba <__sflush_r+0xda>
 800f7e6:	bf00      	nop
 800f7e8:	20400001 	.word	0x20400001

0800f7ec <_fflush_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	690b      	ldr	r3, [r1, #16]
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	b1db      	cbz	r3, 800f82e <_fflush_r+0x42>
 800f7f6:	b118      	cbz	r0, 800f800 <_fflush_r+0x14>
 800f7f8:	6983      	ldr	r3, [r0, #24]
 800f7fa:	b90b      	cbnz	r3, 800f800 <_fflush_r+0x14>
 800f7fc:	f000 f860 	bl	800f8c0 <__sinit>
 800f800:	4b0c      	ldr	r3, [pc, #48]	; (800f834 <_fflush_r+0x48>)
 800f802:	429c      	cmp	r4, r3
 800f804:	d109      	bne.n	800f81a <_fflush_r+0x2e>
 800f806:	686c      	ldr	r4, [r5, #4]
 800f808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f80c:	b17b      	cbz	r3, 800f82e <_fflush_r+0x42>
 800f80e:	4621      	mov	r1, r4
 800f810:	4628      	mov	r0, r5
 800f812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f816:	f7ff bf63 	b.w	800f6e0 <__sflush_r>
 800f81a:	4b07      	ldr	r3, [pc, #28]	; (800f838 <_fflush_r+0x4c>)
 800f81c:	429c      	cmp	r4, r3
 800f81e:	d101      	bne.n	800f824 <_fflush_r+0x38>
 800f820:	68ac      	ldr	r4, [r5, #8]
 800f822:	e7f1      	b.n	800f808 <_fflush_r+0x1c>
 800f824:	4b05      	ldr	r3, [pc, #20]	; (800f83c <_fflush_r+0x50>)
 800f826:	429c      	cmp	r4, r3
 800f828:	bf08      	it	eq
 800f82a:	68ec      	ldreq	r4, [r5, #12]
 800f82c:	e7ec      	b.n	800f808 <_fflush_r+0x1c>
 800f82e:	2000      	movs	r0, #0
 800f830:	bd38      	pop	{r3, r4, r5, pc}
 800f832:	bf00      	nop
 800f834:	08011a40 	.word	0x08011a40
 800f838:	08011a60 	.word	0x08011a60
 800f83c:	08011a20 	.word	0x08011a20

0800f840 <std>:
 800f840:	2300      	movs	r3, #0
 800f842:	b510      	push	{r4, lr}
 800f844:	4604      	mov	r4, r0
 800f846:	e9c0 3300 	strd	r3, r3, [r0]
 800f84a:	6083      	str	r3, [r0, #8]
 800f84c:	8181      	strh	r1, [r0, #12]
 800f84e:	6643      	str	r3, [r0, #100]	; 0x64
 800f850:	81c2      	strh	r2, [r0, #14]
 800f852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f856:	6183      	str	r3, [r0, #24]
 800f858:	4619      	mov	r1, r3
 800f85a:	2208      	movs	r2, #8
 800f85c:	305c      	adds	r0, #92	; 0x5c
 800f85e:	f7fe fb2f 	bl	800dec0 <memset>
 800f862:	4b05      	ldr	r3, [pc, #20]	; (800f878 <std+0x38>)
 800f864:	6263      	str	r3, [r4, #36]	; 0x24
 800f866:	4b05      	ldr	r3, [pc, #20]	; (800f87c <std+0x3c>)
 800f868:	62a3      	str	r3, [r4, #40]	; 0x28
 800f86a:	4b05      	ldr	r3, [pc, #20]	; (800f880 <std+0x40>)
 800f86c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f86e:	4b05      	ldr	r3, [pc, #20]	; (800f884 <std+0x44>)
 800f870:	6224      	str	r4, [r4, #32]
 800f872:	6323      	str	r3, [r4, #48]	; 0x30
 800f874:	bd10      	pop	{r4, pc}
 800f876:	bf00      	nop
 800f878:	080104c5 	.word	0x080104c5
 800f87c:	080104e7 	.word	0x080104e7
 800f880:	0801051f 	.word	0x0801051f
 800f884:	08010543 	.word	0x08010543

0800f888 <_cleanup_r>:
 800f888:	4901      	ldr	r1, [pc, #4]	; (800f890 <_cleanup_r+0x8>)
 800f88a:	f000 b885 	b.w	800f998 <_fwalk_reent>
 800f88e:	bf00      	nop
 800f890:	0800f7ed 	.word	0x0800f7ed

0800f894 <__sfmoreglue>:
 800f894:	b570      	push	{r4, r5, r6, lr}
 800f896:	1e4a      	subs	r2, r1, #1
 800f898:	2568      	movs	r5, #104	; 0x68
 800f89a:	4355      	muls	r5, r2
 800f89c:	460e      	mov	r6, r1
 800f89e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8a2:	f000 fc53 	bl	801014c <_malloc_r>
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	b140      	cbz	r0, 800f8bc <__sfmoreglue+0x28>
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f8b0:	300c      	adds	r0, #12
 800f8b2:	60a0      	str	r0, [r4, #8]
 800f8b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8b8:	f7fe fb02 	bl	800dec0 <memset>
 800f8bc:	4620      	mov	r0, r4
 800f8be:	bd70      	pop	{r4, r5, r6, pc}

0800f8c0 <__sinit>:
 800f8c0:	6983      	ldr	r3, [r0, #24]
 800f8c2:	b510      	push	{r4, lr}
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	bb33      	cbnz	r3, 800f916 <__sinit+0x56>
 800f8c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f8cc:	6503      	str	r3, [r0, #80]	; 0x50
 800f8ce:	4b12      	ldr	r3, [pc, #72]	; (800f918 <__sinit+0x58>)
 800f8d0:	4a12      	ldr	r2, [pc, #72]	; (800f91c <__sinit+0x5c>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6282      	str	r2, [r0, #40]	; 0x28
 800f8d6:	4298      	cmp	r0, r3
 800f8d8:	bf04      	itt	eq
 800f8da:	2301      	moveq	r3, #1
 800f8dc:	6183      	streq	r3, [r0, #24]
 800f8de:	f000 f81f 	bl	800f920 <__sfp>
 800f8e2:	6060      	str	r0, [r4, #4]
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 f81b 	bl	800f920 <__sfp>
 800f8ea:	60a0      	str	r0, [r4, #8]
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 f817 	bl	800f920 <__sfp>
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	60e0      	str	r0, [r4, #12]
 800f8f6:	2104      	movs	r1, #4
 800f8f8:	6860      	ldr	r0, [r4, #4]
 800f8fa:	f7ff ffa1 	bl	800f840 <std>
 800f8fe:	2201      	movs	r2, #1
 800f900:	2109      	movs	r1, #9
 800f902:	68a0      	ldr	r0, [r4, #8]
 800f904:	f7ff ff9c 	bl	800f840 <std>
 800f908:	2202      	movs	r2, #2
 800f90a:	2112      	movs	r1, #18
 800f90c:	68e0      	ldr	r0, [r4, #12]
 800f90e:	f7ff ff97 	bl	800f840 <std>
 800f912:	2301      	movs	r3, #1
 800f914:	61a3      	str	r3, [r4, #24]
 800f916:	bd10      	pop	{r4, pc}
 800f918:	080119d8 	.word	0x080119d8
 800f91c:	0800f889 	.word	0x0800f889

0800f920 <__sfp>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	4b1b      	ldr	r3, [pc, #108]	; (800f990 <__sfp+0x70>)
 800f924:	681e      	ldr	r6, [r3, #0]
 800f926:	69b3      	ldr	r3, [r6, #24]
 800f928:	4607      	mov	r7, r0
 800f92a:	b913      	cbnz	r3, 800f932 <__sfp+0x12>
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff ffc7 	bl	800f8c0 <__sinit>
 800f932:	3648      	adds	r6, #72	; 0x48
 800f934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f938:	3b01      	subs	r3, #1
 800f93a:	d503      	bpl.n	800f944 <__sfp+0x24>
 800f93c:	6833      	ldr	r3, [r6, #0]
 800f93e:	b133      	cbz	r3, 800f94e <__sfp+0x2e>
 800f940:	6836      	ldr	r6, [r6, #0]
 800f942:	e7f7      	b.n	800f934 <__sfp+0x14>
 800f944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f948:	b16d      	cbz	r5, 800f966 <__sfp+0x46>
 800f94a:	3468      	adds	r4, #104	; 0x68
 800f94c:	e7f4      	b.n	800f938 <__sfp+0x18>
 800f94e:	2104      	movs	r1, #4
 800f950:	4638      	mov	r0, r7
 800f952:	f7ff ff9f 	bl	800f894 <__sfmoreglue>
 800f956:	6030      	str	r0, [r6, #0]
 800f958:	2800      	cmp	r0, #0
 800f95a:	d1f1      	bne.n	800f940 <__sfp+0x20>
 800f95c:	230c      	movs	r3, #12
 800f95e:	603b      	str	r3, [r7, #0]
 800f960:	4604      	mov	r4, r0
 800f962:	4620      	mov	r0, r4
 800f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <__sfp+0x74>)
 800f968:	6665      	str	r5, [r4, #100]	; 0x64
 800f96a:	e9c4 5500 	strd	r5, r5, [r4]
 800f96e:	60a5      	str	r5, [r4, #8]
 800f970:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f974:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f978:	2208      	movs	r2, #8
 800f97a:	4629      	mov	r1, r5
 800f97c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f980:	f7fe fa9e 	bl	800dec0 <memset>
 800f984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f98c:	e7e9      	b.n	800f962 <__sfp+0x42>
 800f98e:	bf00      	nop
 800f990:	080119d8 	.word	0x080119d8
 800f994:	ffff0001 	.word	0xffff0001

0800f998 <_fwalk_reent>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	4680      	mov	r8, r0
 800f99e:	4689      	mov	r9, r1
 800f9a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f9a4:	2600      	movs	r6, #0
 800f9a6:	b914      	cbnz	r4, 800f9ae <_fwalk_reent+0x16>
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f9b2:	3f01      	subs	r7, #1
 800f9b4:	d501      	bpl.n	800f9ba <_fwalk_reent+0x22>
 800f9b6:	6824      	ldr	r4, [r4, #0]
 800f9b8:	e7f5      	b.n	800f9a6 <_fwalk_reent+0xe>
 800f9ba:	89ab      	ldrh	r3, [r5, #12]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d907      	bls.n	800f9d0 <_fwalk_reent+0x38>
 800f9c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	d003      	beq.n	800f9d0 <_fwalk_reent+0x38>
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	47c8      	blx	r9
 800f9ce:	4306      	orrs	r6, r0
 800f9d0:	3568      	adds	r5, #104	; 0x68
 800f9d2:	e7ee      	b.n	800f9b2 <_fwalk_reent+0x1a>

0800f9d4 <_localeconv_r>:
 800f9d4:	4b04      	ldr	r3, [pc, #16]	; (800f9e8 <_localeconv_r+0x14>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	6a18      	ldr	r0, [r3, #32]
 800f9da:	4b04      	ldr	r3, [pc, #16]	; (800f9ec <_localeconv_r+0x18>)
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	bf08      	it	eq
 800f9e0:	4618      	moveq	r0, r3
 800f9e2:	30f0      	adds	r0, #240	; 0xf0
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	20001cf8 	.word	0x20001cf8
 800f9ec:	20001d5c 	.word	0x20001d5c

0800f9f0 <__swhatbuf_r>:
 800f9f0:	b570      	push	{r4, r5, r6, lr}
 800f9f2:	460e      	mov	r6, r1
 800f9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f8:	2900      	cmp	r1, #0
 800f9fa:	b096      	sub	sp, #88	; 0x58
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	461d      	mov	r5, r3
 800fa00:	da07      	bge.n	800fa12 <__swhatbuf_r+0x22>
 800fa02:	2300      	movs	r3, #0
 800fa04:	602b      	str	r3, [r5, #0]
 800fa06:	89b3      	ldrh	r3, [r6, #12]
 800fa08:	061a      	lsls	r2, r3, #24
 800fa0a:	d410      	bmi.n	800fa2e <__swhatbuf_r+0x3e>
 800fa0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa10:	e00e      	b.n	800fa30 <__swhatbuf_r+0x40>
 800fa12:	466a      	mov	r2, sp
 800fa14:	f000 fdbc 	bl	8010590 <_fstat_r>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	dbf2      	blt.n	800fa02 <__swhatbuf_r+0x12>
 800fa1c:	9a01      	ldr	r2, [sp, #4]
 800fa1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa26:	425a      	negs	r2, r3
 800fa28:	415a      	adcs	r2, r3
 800fa2a:	602a      	str	r2, [r5, #0]
 800fa2c:	e7ee      	b.n	800fa0c <__swhatbuf_r+0x1c>
 800fa2e:	2340      	movs	r3, #64	; 0x40
 800fa30:	2000      	movs	r0, #0
 800fa32:	6023      	str	r3, [r4, #0]
 800fa34:	b016      	add	sp, #88	; 0x58
 800fa36:	bd70      	pop	{r4, r5, r6, pc}

0800fa38 <__smakebuf_r>:
 800fa38:	898b      	ldrh	r3, [r1, #12]
 800fa3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa3c:	079d      	lsls	r5, r3, #30
 800fa3e:	4606      	mov	r6, r0
 800fa40:	460c      	mov	r4, r1
 800fa42:	d507      	bpl.n	800fa54 <__smakebuf_r+0x1c>
 800fa44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	6123      	str	r3, [r4, #16]
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	6163      	str	r3, [r4, #20]
 800fa50:	b002      	add	sp, #8
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	ab01      	add	r3, sp, #4
 800fa56:	466a      	mov	r2, sp
 800fa58:	f7ff ffca 	bl	800f9f0 <__swhatbuf_r>
 800fa5c:	9900      	ldr	r1, [sp, #0]
 800fa5e:	4605      	mov	r5, r0
 800fa60:	4630      	mov	r0, r6
 800fa62:	f000 fb73 	bl	801014c <_malloc_r>
 800fa66:	b948      	cbnz	r0, 800fa7c <__smakebuf_r+0x44>
 800fa68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa6c:	059a      	lsls	r2, r3, #22
 800fa6e:	d4ef      	bmi.n	800fa50 <__smakebuf_r+0x18>
 800fa70:	f023 0303 	bic.w	r3, r3, #3
 800fa74:	f043 0302 	orr.w	r3, r3, #2
 800fa78:	81a3      	strh	r3, [r4, #12]
 800fa7a:	e7e3      	b.n	800fa44 <__smakebuf_r+0xc>
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	; (800fab4 <__smakebuf_r+0x7c>)
 800fa7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	6020      	str	r0, [r4, #0]
 800fa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	9b00      	ldr	r3, [sp, #0]
 800fa8c:	6163      	str	r3, [r4, #20]
 800fa8e:	9b01      	ldr	r3, [sp, #4]
 800fa90:	6120      	str	r0, [r4, #16]
 800fa92:	b15b      	cbz	r3, 800faac <__smakebuf_r+0x74>
 800fa94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f000 fd8b 	bl	80105b4 <_isatty_r>
 800fa9e:	b128      	cbz	r0, 800faac <__smakebuf_r+0x74>
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	f023 0303 	bic.w	r3, r3, #3
 800faa6:	f043 0301 	orr.w	r3, r3, #1
 800faaa:	81a3      	strh	r3, [r4, #12]
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	431d      	orrs	r5, r3
 800fab0:	81a5      	strh	r5, [r4, #12]
 800fab2:	e7cd      	b.n	800fa50 <__smakebuf_r+0x18>
 800fab4:	0800f889 	.word	0x0800f889

0800fab8 <malloc>:
 800fab8:	4b02      	ldr	r3, [pc, #8]	; (800fac4 <malloc+0xc>)
 800faba:	4601      	mov	r1, r0
 800fabc:	6818      	ldr	r0, [r3, #0]
 800fabe:	f000 bb45 	b.w	801014c <_malloc_r>
 800fac2:	bf00      	nop
 800fac4:	20001cf8 	.word	0x20001cf8

0800fac8 <memcpy>:
 800fac8:	b510      	push	{r4, lr}
 800faca:	1e43      	subs	r3, r0, #1
 800facc:	440a      	add	r2, r1
 800face:	4291      	cmp	r1, r2
 800fad0:	d100      	bne.n	800fad4 <memcpy+0xc>
 800fad2:	bd10      	pop	{r4, pc}
 800fad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fadc:	e7f7      	b.n	800face <memcpy+0x6>

0800fade <_Balloc>:
 800fade:	b570      	push	{r4, r5, r6, lr}
 800fae0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fae2:	4604      	mov	r4, r0
 800fae4:	460e      	mov	r6, r1
 800fae6:	b93d      	cbnz	r5, 800faf8 <_Balloc+0x1a>
 800fae8:	2010      	movs	r0, #16
 800faea:	f7ff ffe5 	bl	800fab8 <malloc>
 800faee:	6260      	str	r0, [r4, #36]	; 0x24
 800faf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800faf4:	6005      	str	r5, [r0, #0]
 800faf6:	60c5      	str	r5, [r0, #12]
 800faf8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fafa:	68eb      	ldr	r3, [r5, #12]
 800fafc:	b183      	cbz	r3, 800fb20 <_Balloc+0x42>
 800fafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fb06:	b9b8      	cbnz	r0, 800fb38 <_Balloc+0x5a>
 800fb08:	2101      	movs	r1, #1
 800fb0a:	fa01 f506 	lsl.w	r5, r1, r6
 800fb0e:	1d6a      	adds	r2, r5, #5
 800fb10:	0092      	lsls	r2, r2, #2
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 fabe 	bl	8010094 <_calloc_r>
 800fb18:	b160      	cbz	r0, 800fb34 <_Balloc+0x56>
 800fb1a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fb1e:	e00e      	b.n	800fb3e <_Balloc+0x60>
 800fb20:	2221      	movs	r2, #33	; 0x21
 800fb22:	2104      	movs	r1, #4
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 fab5 	bl	8010094 <_calloc_r>
 800fb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb2c:	60e8      	str	r0, [r5, #12]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1e4      	bne.n	800fafe <_Balloc+0x20>
 800fb34:	2000      	movs	r0, #0
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	6802      	ldr	r2, [r0, #0]
 800fb3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb44:	e7f7      	b.n	800fb36 <_Balloc+0x58>

0800fb46 <_Bfree>:
 800fb46:	b570      	push	{r4, r5, r6, lr}
 800fb48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	460d      	mov	r5, r1
 800fb4e:	b93c      	cbnz	r4, 800fb60 <_Bfree+0x1a>
 800fb50:	2010      	movs	r0, #16
 800fb52:	f7ff ffb1 	bl	800fab8 <malloc>
 800fb56:	6270      	str	r0, [r6, #36]	; 0x24
 800fb58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb5c:	6004      	str	r4, [r0, #0]
 800fb5e:	60c4      	str	r4, [r0, #12]
 800fb60:	b13d      	cbz	r5, 800fb72 <_Bfree+0x2c>
 800fb62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fb64:	686a      	ldr	r2, [r5, #4]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb6c:	6029      	str	r1, [r5, #0]
 800fb6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fb72:	bd70      	pop	{r4, r5, r6, pc}

0800fb74 <__multadd>:
 800fb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb78:	690d      	ldr	r5, [r1, #16]
 800fb7a:	461f      	mov	r7, r3
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	460c      	mov	r4, r1
 800fb80:	f101 0c14 	add.w	ip, r1, #20
 800fb84:	2300      	movs	r3, #0
 800fb86:	f8dc 0000 	ldr.w	r0, [ip]
 800fb8a:	b281      	uxth	r1, r0
 800fb8c:	fb02 7101 	mla	r1, r2, r1, r7
 800fb90:	0c0f      	lsrs	r7, r1, #16
 800fb92:	0c00      	lsrs	r0, r0, #16
 800fb94:	fb02 7000 	mla	r0, r2, r0, r7
 800fb98:	b289      	uxth	r1, r1
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fba0:	429d      	cmp	r5, r3
 800fba2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fba6:	f84c 1b04 	str.w	r1, [ip], #4
 800fbaa:	dcec      	bgt.n	800fb86 <__multadd+0x12>
 800fbac:	b1d7      	cbz	r7, 800fbe4 <__multadd+0x70>
 800fbae:	68a3      	ldr	r3, [r4, #8]
 800fbb0:	42ab      	cmp	r3, r5
 800fbb2:	dc12      	bgt.n	800fbda <__multadd+0x66>
 800fbb4:	6861      	ldr	r1, [r4, #4]
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	3101      	adds	r1, #1
 800fbba:	f7ff ff90 	bl	800fade <_Balloc>
 800fbbe:	6922      	ldr	r2, [r4, #16]
 800fbc0:	3202      	adds	r2, #2
 800fbc2:	f104 010c 	add.w	r1, r4, #12
 800fbc6:	4680      	mov	r8, r0
 800fbc8:	0092      	lsls	r2, r2, #2
 800fbca:	300c      	adds	r0, #12
 800fbcc:	f7ff ff7c 	bl	800fac8 <memcpy>
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7ff ffb7 	bl	800fb46 <_Bfree>
 800fbd8:	4644      	mov	r4, r8
 800fbda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbde:	3501      	adds	r5, #1
 800fbe0:	615f      	str	r7, [r3, #20]
 800fbe2:	6125      	str	r5, [r4, #16]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fbea <__hi0bits>:
 800fbea:	0c02      	lsrs	r2, r0, #16
 800fbec:	0412      	lsls	r2, r2, #16
 800fbee:	4603      	mov	r3, r0
 800fbf0:	b9b2      	cbnz	r2, 800fc20 <__hi0bits+0x36>
 800fbf2:	0403      	lsls	r3, r0, #16
 800fbf4:	2010      	movs	r0, #16
 800fbf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fbfa:	bf04      	itt	eq
 800fbfc:	021b      	lsleq	r3, r3, #8
 800fbfe:	3008      	addeq	r0, #8
 800fc00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fc04:	bf04      	itt	eq
 800fc06:	011b      	lsleq	r3, r3, #4
 800fc08:	3004      	addeq	r0, #4
 800fc0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fc0e:	bf04      	itt	eq
 800fc10:	009b      	lsleq	r3, r3, #2
 800fc12:	3002      	addeq	r0, #2
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	db06      	blt.n	800fc26 <__hi0bits+0x3c>
 800fc18:	005b      	lsls	r3, r3, #1
 800fc1a:	d503      	bpl.n	800fc24 <__hi0bits+0x3a>
 800fc1c:	3001      	adds	r0, #1
 800fc1e:	4770      	bx	lr
 800fc20:	2000      	movs	r0, #0
 800fc22:	e7e8      	b.n	800fbf6 <__hi0bits+0xc>
 800fc24:	2020      	movs	r0, #32
 800fc26:	4770      	bx	lr

0800fc28 <__lo0bits>:
 800fc28:	6803      	ldr	r3, [r0, #0]
 800fc2a:	f013 0207 	ands.w	r2, r3, #7
 800fc2e:	4601      	mov	r1, r0
 800fc30:	d00b      	beq.n	800fc4a <__lo0bits+0x22>
 800fc32:	07da      	lsls	r2, r3, #31
 800fc34:	d423      	bmi.n	800fc7e <__lo0bits+0x56>
 800fc36:	0798      	lsls	r0, r3, #30
 800fc38:	bf49      	itett	mi
 800fc3a:	085b      	lsrmi	r3, r3, #1
 800fc3c:	089b      	lsrpl	r3, r3, #2
 800fc3e:	2001      	movmi	r0, #1
 800fc40:	600b      	strmi	r3, [r1, #0]
 800fc42:	bf5c      	itt	pl
 800fc44:	600b      	strpl	r3, [r1, #0]
 800fc46:	2002      	movpl	r0, #2
 800fc48:	4770      	bx	lr
 800fc4a:	b298      	uxth	r0, r3
 800fc4c:	b9a8      	cbnz	r0, 800fc7a <__lo0bits+0x52>
 800fc4e:	0c1b      	lsrs	r3, r3, #16
 800fc50:	2010      	movs	r0, #16
 800fc52:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fc56:	bf04      	itt	eq
 800fc58:	0a1b      	lsreq	r3, r3, #8
 800fc5a:	3008      	addeq	r0, #8
 800fc5c:	071a      	lsls	r2, r3, #28
 800fc5e:	bf04      	itt	eq
 800fc60:	091b      	lsreq	r3, r3, #4
 800fc62:	3004      	addeq	r0, #4
 800fc64:	079a      	lsls	r2, r3, #30
 800fc66:	bf04      	itt	eq
 800fc68:	089b      	lsreq	r3, r3, #2
 800fc6a:	3002      	addeq	r0, #2
 800fc6c:	07da      	lsls	r2, r3, #31
 800fc6e:	d402      	bmi.n	800fc76 <__lo0bits+0x4e>
 800fc70:	085b      	lsrs	r3, r3, #1
 800fc72:	d006      	beq.n	800fc82 <__lo0bits+0x5a>
 800fc74:	3001      	adds	r0, #1
 800fc76:	600b      	str	r3, [r1, #0]
 800fc78:	4770      	bx	lr
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	e7e9      	b.n	800fc52 <__lo0bits+0x2a>
 800fc7e:	2000      	movs	r0, #0
 800fc80:	4770      	bx	lr
 800fc82:	2020      	movs	r0, #32
 800fc84:	4770      	bx	lr

0800fc86 <__i2b>:
 800fc86:	b510      	push	{r4, lr}
 800fc88:	460c      	mov	r4, r1
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	f7ff ff27 	bl	800fade <_Balloc>
 800fc90:	2201      	movs	r2, #1
 800fc92:	6144      	str	r4, [r0, #20]
 800fc94:	6102      	str	r2, [r0, #16]
 800fc96:	bd10      	pop	{r4, pc}

0800fc98 <__multiply>:
 800fc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	4614      	mov	r4, r2
 800fc9e:	690a      	ldr	r2, [r1, #16]
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	bfb8      	it	lt
 800fca6:	460b      	movlt	r3, r1
 800fca8:	4688      	mov	r8, r1
 800fcaa:	bfbc      	itt	lt
 800fcac:	46a0      	movlt	r8, r4
 800fcae:	461c      	movlt	r4, r3
 800fcb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fcb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fcb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fcbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fcc0:	eb07 0609 	add.w	r6, r7, r9
 800fcc4:	42b3      	cmp	r3, r6
 800fcc6:	bfb8      	it	lt
 800fcc8:	3101      	addlt	r1, #1
 800fcca:	f7ff ff08 	bl	800fade <_Balloc>
 800fcce:	f100 0514 	add.w	r5, r0, #20
 800fcd2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4573      	cmp	r3, lr
 800fcdc:	d316      	bcc.n	800fd0c <__multiply+0x74>
 800fcde:	f104 0214 	add.w	r2, r4, #20
 800fce2:	f108 0114 	add.w	r1, r8, #20
 800fce6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fcea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	9b00      	ldr	r3, [sp, #0]
 800fcf2:	9201      	str	r2, [sp, #4]
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d80c      	bhi.n	800fd12 <__multiply+0x7a>
 800fcf8:	2e00      	cmp	r6, #0
 800fcfa:	dd03      	ble.n	800fd04 <__multiply+0x6c>
 800fcfc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d05d      	beq.n	800fdc0 <__multiply+0x128>
 800fd04:	6106      	str	r6, [r0, #16]
 800fd06:	b003      	add	sp, #12
 800fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0c:	f843 2b04 	str.w	r2, [r3], #4
 800fd10:	e7e3      	b.n	800fcda <__multiply+0x42>
 800fd12:	f8b2 b000 	ldrh.w	fp, [r2]
 800fd16:	f1bb 0f00 	cmp.w	fp, #0
 800fd1a:	d023      	beq.n	800fd64 <__multiply+0xcc>
 800fd1c:	4689      	mov	r9, r1
 800fd1e:	46ac      	mov	ip, r5
 800fd20:	f04f 0800 	mov.w	r8, #0
 800fd24:	f859 4b04 	ldr.w	r4, [r9], #4
 800fd28:	f8dc a000 	ldr.w	sl, [ip]
 800fd2c:	b2a3      	uxth	r3, r4
 800fd2e:	fa1f fa8a 	uxth.w	sl, sl
 800fd32:	fb0b a303 	mla	r3, fp, r3, sl
 800fd36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fd3a:	f8dc 4000 	ldr.w	r4, [ip]
 800fd3e:	4443      	add	r3, r8
 800fd40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fd44:	fb0b 840a 	mla	r4, fp, sl, r8
 800fd48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fd4c:	46e2      	mov	sl, ip
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fd54:	454f      	cmp	r7, r9
 800fd56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fd5a:	f84a 3b04 	str.w	r3, [sl], #4
 800fd5e:	d82b      	bhi.n	800fdb8 <__multiply+0x120>
 800fd60:	f8cc 8004 	str.w	r8, [ip, #4]
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fd6a:	3204      	adds	r2, #4
 800fd6c:	f1ba 0f00 	cmp.w	sl, #0
 800fd70:	d020      	beq.n	800fdb4 <__multiply+0x11c>
 800fd72:	682b      	ldr	r3, [r5, #0]
 800fd74:	4689      	mov	r9, r1
 800fd76:	46a8      	mov	r8, r5
 800fd78:	f04f 0b00 	mov.w	fp, #0
 800fd7c:	f8b9 c000 	ldrh.w	ip, [r9]
 800fd80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fd84:	fb0a 440c 	mla	r4, sl, ip, r4
 800fd88:	445c      	add	r4, fp
 800fd8a:	46c4      	mov	ip, r8
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fd92:	f84c 3b04 	str.w	r3, [ip], #4
 800fd96:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fd9e:	0c1b      	lsrs	r3, r3, #16
 800fda0:	fb0a b303 	mla	r3, sl, r3, fp
 800fda4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fda8:	454f      	cmp	r7, r9
 800fdaa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fdae:	d805      	bhi.n	800fdbc <__multiply+0x124>
 800fdb0:	f8c8 3004 	str.w	r3, [r8, #4]
 800fdb4:	3504      	adds	r5, #4
 800fdb6:	e79b      	b.n	800fcf0 <__multiply+0x58>
 800fdb8:	46d4      	mov	ip, sl
 800fdba:	e7b3      	b.n	800fd24 <__multiply+0x8c>
 800fdbc:	46e0      	mov	r8, ip
 800fdbe:	e7dd      	b.n	800fd7c <__multiply+0xe4>
 800fdc0:	3e01      	subs	r6, #1
 800fdc2:	e799      	b.n	800fcf8 <__multiply+0x60>

0800fdc4 <__pow5mult>:
 800fdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	4615      	mov	r5, r2
 800fdca:	f012 0203 	ands.w	r2, r2, #3
 800fdce:	4606      	mov	r6, r0
 800fdd0:	460f      	mov	r7, r1
 800fdd2:	d007      	beq.n	800fde4 <__pow5mult+0x20>
 800fdd4:	3a01      	subs	r2, #1
 800fdd6:	4c21      	ldr	r4, [pc, #132]	; (800fe5c <__pow5mult+0x98>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdde:	f7ff fec9 	bl	800fb74 <__multadd>
 800fde2:	4607      	mov	r7, r0
 800fde4:	10ad      	asrs	r5, r5, #2
 800fde6:	d035      	beq.n	800fe54 <__pow5mult+0x90>
 800fde8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fdea:	b93c      	cbnz	r4, 800fdfc <__pow5mult+0x38>
 800fdec:	2010      	movs	r0, #16
 800fdee:	f7ff fe63 	bl	800fab8 <malloc>
 800fdf2:	6270      	str	r0, [r6, #36]	; 0x24
 800fdf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fdf8:	6004      	str	r4, [r0, #0]
 800fdfa:	60c4      	str	r4, [r0, #12]
 800fdfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe04:	b94c      	cbnz	r4, 800fe1a <__pow5mult+0x56>
 800fe06:	f240 2171 	movw	r1, #625	; 0x271
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f7ff ff3b 	bl	800fc86 <__i2b>
 800fe10:	2300      	movs	r3, #0
 800fe12:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe16:	4604      	mov	r4, r0
 800fe18:	6003      	str	r3, [r0, #0]
 800fe1a:	f04f 0800 	mov.w	r8, #0
 800fe1e:	07eb      	lsls	r3, r5, #31
 800fe20:	d50a      	bpl.n	800fe38 <__pow5mult+0x74>
 800fe22:	4639      	mov	r1, r7
 800fe24:	4622      	mov	r2, r4
 800fe26:	4630      	mov	r0, r6
 800fe28:	f7ff ff36 	bl	800fc98 <__multiply>
 800fe2c:	4639      	mov	r1, r7
 800fe2e:	4681      	mov	r9, r0
 800fe30:	4630      	mov	r0, r6
 800fe32:	f7ff fe88 	bl	800fb46 <_Bfree>
 800fe36:	464f      	mov	r7, r9
 800fe38:	106d      	asrs	r5, r5, #1
 800fe3a:	d00b      	beq.n	800fe54 <__pow5mult+0x90>
 800fe3c:	6820      	ldr	r0, [r4, #0]
 800fe3e:	b938      	cbnz	r0, 800fe50 <__pow5mult+0x8c>
 800fe40:	4622      	mov	r2, r4
 800fe42:	4621      	mov	r1, r4
 800fe44:	4630      	mov	r0, r6
 800fe46:	f7ff ff27 	bl	800fc98 <__multiply>
 800fe4a:	6020      	str	r0, [r4, #0]
 800fe4c:	f8c0 8000 	str.w	r8, [r0]
 800fe50:	4604      	mov	r4, r0
 800fe52:	e7e4      	b.n	800fe1e <__pow5mult+0x5a>
 800fe54:	4638      	mov	r0, r7
 800fe56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe5a:	bf00      	nop
 800fe5c:	08011b70 	.word	0x08011b70

0800fe60 <__lshift>:
 800fe60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe64:	460c      	mov	r4, r1
 800fe66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe6a:	6923      	ldr	r3, [r4, #16]
 800fe6c:	6849      	ldr	r1, [r1, #4]
 800fe6e:	eb0a 0903 	add.w	r9, sl, r3
 800fe72:	68a3      	ldr	r3, [r4, #8]
 800fe74:	4607      	mov	r7, r0
 800fe76:	4616      	mov	r6, r2
 800fe78:	f109 0501 	add.w	r5, r9, #1
 800fe7c:	42ab      	cmp	r3, r5
 800fe7e:	db32      	blt.n	800fee6 <__lshift+0x86>
 800fe80:	4638      	mov	r0, r7
 800fe82:	f7ff fe2c 	bl	800fade <_Balloc>
 800fe86:	2300      	movs	r3, #0
 800fe88:	4680      	mov	r8, r0
 800fe8a:	f100 0114 	add.w	r1, r0, #20
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4553      	cmp	r3, sl
 800fe92:	db2b      	blt.n	800feec <__lshift+0x8c>
 800fe94:	6920      	ldr	r0, [r4, #16]
 800fe96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe9a:	f104 0314 	add.w	r3, r4, #20
 800fe9e:	f016 021f 	ands.w	r2, r6, #31
 800fea2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fea6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800feaa:	d025      	beq.n	800fef8 <__lshift+0x98>
 800feac:	f1c2 0e20 	rsb	lr, r2, #32
 800feb0:	2000      	movs	r0, #0
 800feb2:	681e      	ldr	r6, [r3, #0]
 800feb4:	468a      	mov	sl, r1
 800feb6:	4096      	lsls	r6, r2
 800feb8:	4330      	orrs	r0, r6
 800feba:	f84a 0b04 	str.w	r0, [sl], #4
 800febe:	f853 0b04 	ldr.w	r0, [r3], #4
 800fec2:	459c      	cmp	ip, r3
 800fec4:	fa20 f00e 	lsr.w	r0, r0, lr
 800fec8:	d814      	bhi.n	800fef4 <__lshift+0x94>
 800feca:	6048      	str	r0, [r1, #4]
 800fecc:	b108      	cbz	r0, 800fed2 <__lshift+0x72>
 800fece:	f109 0502 	add.w	r5, r9, #2
 800fed2:	3d01      	subs	r5, #1
 800fed4:	4638      	mov	r0, r7
 800fed6:	f8c8 5010 	str.w	r5, [r8, #16]
 800feda:	4621      	mov	r1, r4
 800fedc:	f7ff fe33 	bl	800fb46 <_Bfree>
 800fee0:	4640      	mov	r0, r8
 800fee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee6:	3101      	adds	r1, #1
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	e7c7      	b.n	800fe7c <__lshift+0x1c>
 800feec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fef0:	3301      	adds	r3, #1
 800fef2:	e7cd      	b.n	800fe90 <__lshift+0x30>
 800fef4:	4651      	mov	r1, sl
 800fef6:	e7dc      	b.n	800feb2 <__lshift+0x52>
 800fef8:	3904      	subs	r1, #4
 800fefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fefe:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff02:	459c      	cmp	ip, r3
 800ff04:	d8f9      	bhi.n	800fefa <__lshift+0x9a>
 800ff06:	e7e4      	b.n	800fed2 <__lshift+0x72>

0800ff08 <__mcmp>:
 800ff08:	6903      	ldr	r3, [r0, #16]
 800ff0a:	690a      	ldr	r2, [r1, #16]
 800ff0c:	1a9b      	subs	r3, r3, r2
 800ff0e:	b530      	push	{r4, r5, lr}
 800ff10:	d10c      	bne.n	800ff2c <__mcmp+0x24>
 800ff12:	0092      	lsls	r2, r2, #2
 800ff14:	3014      	adds	r0, #20
 800ff16:	3114      	adds	r1, #20
 800ff18:	1884      	adds	r4, r0, r2
 800ff1a:	4411      	add	r1, r2
 800ff1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ff20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ff24:	4295      	cmp	r5, r2
 800ff26:	d003      	beq.n	800ff30 <__mcmp+0x28>
 800ff28:	d305      	bcc.n	800ff36 <__mcmp+0x2e>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	bd30      	pop	{r4, r5, pc}
 800ff30:	42a0      	cmp	r0, r4
 800ff32:	d3f3      	bcc.n	800ff1c <__mcmp+0x14>
 800ff34:	e7fa      	b.n	800ff2c <__mcmp+0x24>
 800ff36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff3a:	e7f7      	b.n	800ff2c <__mcmp+0x24>

0800ff3c <__mdiff>:
 800ff3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff40:	460d      	mov	r5, r1
 800ff42:	4607      	mov	r7, r0
 800ff44:	4611      	mov	r1, r2
 800ff46:	4628      	mov	r0, r5
 800ff48:	4614      	mov	r4, r2
 800ff4a:	f7ff ffdd 	bl	800ff08 <__mcmp>
 800ff4e:	1e06      	subs	r6, r0, #0
 800ff50:	d108      	bne.n	800ff64 <__mdiff+0x28>
 800ff52:	4631      	mov	r1, r6
 800ff54:	4638      	mov	r0, r7
 800ff56:	f7ff fdc2 	bl	800fade <_Balloc>
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ff60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff64:	bfa4      	itt	ge
 800ff66:	4623      	movge	r3, r4
 800ff68:	462c      	movge	r4, r5
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	6861      	ldr	r1, [r4, #4]
 800ff6e:	bfa6      	itte	ge
 800ff70:	461d      	movge	r5, r3
 800ff72:	2600      	movge	r6, #0
 800ff74:	2601      	movlt	r6, #1
 800ff76:	f7ff fdb2 	bl	800fade <_Balloc>
 800ff7a:	692b      	ldr	r3, [r5, #16]
 800ff7c:	60c6      	str	r6, [r0, #12]
 800ff7e:	6926      	ldr	r6, [r4, #16]
 800ff80:	f105 0914 	add.w	r9, r5, #20
 800ff84:	f104 0214 	add.w	r2, r4, #20
 800ff88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ff8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ff90:	f100 0514 	add.w	r5, r0, #20
 800ff94:	f04f 0e00 	mov.w	lr, #0
 800ff98:	f852 ab04 	ldr.w	sl, [r2], #4
 800ff9c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ffa0:	fa1e f18a 	uxtah	r1, lr, sl
 800ffa4:	b2a3      	uxth	r3, r4
 800ffa6:	1ac9      	subs	r1, r1, r3
 800ffa8:	0c23      	lsrs	r3, r4, #16
 800ffaa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ffae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ffb2:	b289      	uxth	r1, r1
 800ffb4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ffb8:	45c8      	cmp	r8, r9
 800ffba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ffbe:	4694      	mov	ip, r2
 800ffc0:	f845 3b04 	str.w	r3, [r5], #4
 800ffc4:	d8e8      	bhi.n	800ff98 <__mdiff+0x5c>
 800ffc6:	45bc      	cmp	ip, r7
 800ffc8:	d304      	bcc.n	800ffd4 <__mdiff+0x98>
 800ffca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ffce:	b183      	cbz	r3, 800fff2 <__mdiff+0xb6>
 800ffd0:	6106      	str	r6, [r0, #16]
 800ffd2:	e7c5      	b.n	800ff60 <__mdiff+0x24>
 800ffd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ffd8:	fa1e f381 	uxtah	r3, lr, r1
 800ffdc:	141a      	asrs	r2, r3, #16
 800ffde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffe8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ffec:	f845 3b04 	str.w	r3, [r5], #4
 800fff0:	e7e9      	b.n	800ffc6 <__mdiff+0x8a>
 800fff2:	3e01      	subs	r6, #1
 800fff4:	e7e9      	b.n	800ffca <__mdiff+0x8e>

0800fff6 <__d2b>:
 800fff6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fffa:	460e      	mov	r6, r1
 800fffc:	2101      	movs	r1, #1
 800fffe:	ec59 8b10 	vmov	r8, r9, d0
 8010002:	4615      	mov	r5, r2
 8010004:	f7ff fd6b 	bl	800fade <_Balloc>
 8010008:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801000c:	4607      	mov	r7, r0
 801000e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010012:	bb34      	cbnz	r4, 8010062 <__d2b+0x6c>
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	f1b8 0300 	subs.w	r3, r8, #0
 801001a:	d027      	beq.n	801006c <__d2b+0x76>
 801001c:	a802      	add	r0, sp, #8
 801001e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010022:	f7ff fe01 	bl	800fc28 <__lo0bits>
 8010026:	9900      	ldr	r1, [sp, #0]
 8010028:	b1f0      	cbz	r0, 8010068 <__d2b+0x72>
 801002a:	9a01      	ldr	r2, [sp, #4]
 801002c:	f1c0 0320 	rsb	r3, r0, #32
 8010030:	fa02 f303 	lsl.w	r3, r2, r3
 8010034:	430b      	orrs	r3, r1
 8010036:	40c2      	lsrs	r2, r0
 8010038:	617b      	str	r3, [r7, #20]
 801003a:	9201      	str	r2, [sp, #4]
 801003c:	9b01      	ldr	r3, [sp, #4]
 801003e:	61bb      	str	r3, [r7, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	bf14      	ite	ne
 8010044:	2102      	movne	r1, #2
 8010046:	2101      	moveq	r1, #1
 8010048:	6139      	str	r1, [r7, #16]
 801004a:	b1c4      	cbz	r4, 801007e <__d2b+0x88>
 801004c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010050:	4404      	add	r4, r0
 8010052:	6034      	str	r4, [r6, #0]
 8010054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010058:	6028      	str	r0, [r5, #0]
 801005a:	4638      	mov	r0, r7
 801005c:	b003      	add	sp, #12
 801005e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010066:	e7d5      	b.n	8010014 <__d2b+0x1e>
 8010068:	6179      	str	r1, [r7, #20]
 801006a:	e7e7      	b.n	801003c <__d2b+0x46>
 801006c:	a801      	add	r0, sp, #4
 801006e:	f7ff fddb 	bl	800fc28 <__lo0bits>
 8010072:	9b01      	ldr	r3, [sp, #4]
 8010074:	617b      	str	r3, [r7, #20]
 8010076:	2101      	movs	r1, #1
 8010078:	6139      	str	r1, [r7, #16]
 801007a:	3020      	adds	r0, #32
 801007c:	e7e5      	b.n	801004a <__d2b+0x54>
 801007e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010082:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010086:	6030      	str	r0, [r6, #0]
 8010088:	6918      	ldr	r0, [r3, #16]
 801008a:	f7ff fdae 	bl	800fbea <__hi0bits>
 801008e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010092:	e7e1      	b.n	8010058 <__d2b+0x62>

08010094 <_calloc_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	fb02 f401 	mul.w	r4, r2, r1
 801009a:	4621      	mov	r1, r4
 801009c:	f000 f856 	bl	801014c <_malloc_r>
 80100a0:	4605      	mov	r5, r0
 80100a2:	b118      	cbz	r0, 80100ac <_calloc_r+0x18>
 80100a4:	4622      	mov	r2, r4
 80100a6:	2100      	movs	r1, #0
 80100a8:	f7fd ff0a 	bl	800dec0 <memset>
 80100ac:	4628      	mov	r0, r5
 80100ae:	bd38      	pop	{r3, r4, r5, pc}

080100b0 <_free_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	4605      	mov	r5, r0
 80100b4:	2900      	cmp	r1, #0
 80100b6:	d045      	beq.n	8010144 <_free_r+0x94>
 80100b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100bc:	1f0c      	subs	r4, r1, #4
 80100be:	2b00      	cmp	r3, #0
 80100c0:	bfb8      	it	lt
 80100c2:	18e4      	addlt	r4, r4, r3
 80100c4:	f000 fac3 	bl	801064e <__malloc_lock>
 80100c8:	4a1f      	ldr	r2, [pc, #124]	; (8010148 <_free_r+0x98>)
 80100ca:	6813      	ldr	r3, [r2, #0]
 80100cc:	4610      	mov	r0, r2
 80100ce:	b933      	cbnz	r3, 80100de <_free_r+0x2e>
 80100d0:	6063      	str	r3, [r4, #4]
 80100d2:	6014      	str	r4, [r2, #0]
 80100d4:	4628      	mov	r0, r5
 80100d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100da:	f000 bab9 	b.w	8010650 <__malloc_unlock>
 80100de:	42a3      	cmp	r3, r4
 80100e0:	d90c      	bls.n	80100fc <_free_r+0x4c>
 80100e2:	6821      	ldr	r1, [r4, #0]
 80100e4:	1862      	adds	r2, r4, r1
 80100e6:	4293      	cmp	r3, r2
 80100e8:	bf04      	itt	eq
 80100ea:	681a      	ldreq	r2, [r3, #0]
 80100ec:	685b      	ldreq	r3, [r3, #4]
 80100ee:	6063      	str	r3, [r4, #4]
 80100f0:	bf04      	itt	eq
 80100f2:	1852      	addeq	r2, r2, r1
 80100f4:	6022      	streq	r2, [r4, #0]
 80100f6:	6004      	str	r4, [r0, #0]
 80100f8:	e7ec      	b.n	80100d4 <_free_r+0x24>
 80100fa:	4613      	mov	r3, r2
 80100fc:	685a      	ldr	r2, [r3, #4]
 80100fe:	b10a      	cbz	r2, 8010104 <_free_r+0x54>
 8010100:	42a2      	cmp	r2, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x4a>
 8010104:	6819      	ldr	r1, [r3, #0]
 8010106:	1858      	adds	r0, r3, r1
 8010108:	42a0      	cmp	r0, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x74>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	4401      	add	r1, r0
 8010110:	1858      	adds	r0, r3, r1
 8010112:	4282      	cmp	r2, r0
 8010114:	6019      	str	r1, [r3, #0]
 8010116:	d1dd      	bne.n	80100d4 <_free_r+0x24>
 8010118:	6810      	ldr	r0, [r2, #0]
 801011a:	6852      	ldr	r2, [r2, #4]
 801011c:	605a      	str	r2, [r3, #4]
 801011e:	4401      	add	r1, r0
 8010120:	6019      	str	r1, [r3, #0]
 8010122:	e7d7      	b.n	80100d4 <_free_r+0x24>
 8010124:	d902      	bls.n	801012c <_free_r+0x7c>
 8010126:	230c      	movs	r3, #12
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	e7d3      	b.n	80100d4 <_free_r+0x24>
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	1821      	adds	r1, r4, r0
 8010130:	428a      	cmp	r2, r1
 8010132:	bf04      	itt	eq
 8010134:	6811      	ldreq	r1, [r2, #0]
 8010136:	6852      	ldreq	r2, [r2, #4]
 8010138:	6062      	str	r2, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1809      	addeq	r1, r1, r0
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	605c      	str	r4, [r3, #4]
 8010142:	e7c7      	b.n	80100d4 <_free_r+0x24>
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	20001f24 	.word	0x20001f24

0801014c <_malloc_r>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	1ccd      	adds	r5, r1, #3
 8010150:	f025 0503 	bic.w	r5, r5, #3
 8010154:	3508      	adds	r5, #8
 8010156:	2d0c      	cmp	r5, #12
 8010158:	bf38      	it	cc
 801015a:	250c      	movcc	r5, #12
 801015c:	2d00      	cmp	r5, #0
 801015e:	4606      	mov	r6, r0
 8010160:	db01      	blt.n	8010166 <_malloc_r+0x1a>
 8010162:	42a9      	cmp	r1, r5
 8010164:	d903      	bls.n	801016e <_malloc_r+0x22>
 8010166:	230c      	movs	r3, #12
 8010168:	6033      	str	r3, [r6, #0]
 801016a:	2000      	movs	r0, #0
 801016c:	bd70      	pop	{r4, r5, r6, pc}
 801016e:	f000 fa6e 	bl	801064e <__malloc_lock>
 8010172:	4a21      	ldr	r2, [pc, #132]	; (80101f8 <_malloc_r+0xac>)
 8010174:	6814      	ldr	r4, [r2, #0]
 8010176:	4621      	mov	r1, r4
 8010178:	b991      	cbnz	r1, 80101a0 <_malloc_r+0x54>
 801017a:	4c20      	ldr	r4, [pc, #128]	; (80101fc <_malloc_r+0xb0>)
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	b91b      	cbnz	r3, 8010188 <_malloc_r+0x3c>
 8010180:	4630      	mov	r0, r6
 8010182:	f000 f98f 	bl	80104a4 <_sbrk_r>
 8010186:	6020      	str	r0, [r4, #0]
 8010188:	4629      	mov	r1, r5
 801018a:	4630      	mov	r0, r6
 801018c:	f000 f98a 	bl	80104a4 <_sbrk_r>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	d124      	bne.n	80101de <_malloc_r+0x92>
 8010194:	230c      	movs	r3, #12
 8010196:	6033      	str	r3, [r6, #0]
 8010198:	4630      	mov	r0, r6
 801019a:	f000 fa59 	bl	8010650 <__malloc_unlock>
 801019e:	e7e4      	b.n	801016a <_malloc_r+0x1e>
 80101a0:	680b      	ldr	r3, [r1, #0]
 80101a2:	1b5b      	subs	r3, r3, r5
 80101a4:	d418      	bmi.n	80101d8 <_malloc_r+0x8c>
 80101a6:	2b0b      	cmp	r3, #11
 80101a8:	d90f      	bls.n	80101ca <_malloc_r+0x7e>
 80101aa:	600b      	str	r3, [r1, #0]
 80101ac:	50cd      	str	r5, [r1, r3]
 80101ae:	18cc      	adds	r4, r1, r3
 80101b0:	4630      	mov	r0, r6
 80101b2:	f000 fa4d 	bl	8010650 <__malloc_unlock>
 80101b6:	f104 000b 	add.w	r0, r4, #11
 80101ba:	1d23      	adds	r3, r4, #4
 80101bc:	f020 0007 	bic.w	r0, r0, #7
 80101c0:	1ac3      	subs	r3, r0, r3
 80101c2:	d0d3      	beq.n	801016c <_malloc_r+0x20>
 80101c4:	425a      	negs	r2, r3
 80101c6:	50e2      	str	r2, [r4, r3]
 80101c8:	e7d0      	b.n	801016c <_malloc_r+0x20>
 80101ca:	428c      	cmp	r4, r1
 80101cc:	684b      	ldr	r3, [r1, #4]
 80101ce:	bf16      	itet	ne
 80101d0:	6063      	strne	r3, [r4, #4]
 80101d2:	6013      	streq	r3, [r2, #0]
 80101d4:	460c      	movne	r4, r1
 80101d6:	e7eb      	b.n	80101b0 <_malloc_r+0x64>
 80101d8:	460c      	mov	r4, r1
 80101da:	6849      	ldr	r1, [r1, #4]
 80101dc:	e7cc      	b.n	8010178 <_malloc_r+0x2c>
 80101de:	1cc4      	adds	r4, r0, #3
 80101e0:	f024 0403 	bic.w	r4, r4, #3
 80101e4:	42a0      	cmp	r0, r4
 80101e6:	d005      	beq.n	80101f4 <_malloc_r+0xa8>
 80101e8:	1a21      	subs	r1, r4, r0
 80101ea:	4630      	mov	r0, r6
 80101ec:	f000 f95a 	bl	80104a4 <_sbrk_r>
 80101f0:	3001      	adds	r0, #1
 80101f2:	d0cf      	beq.n	8010194 <_malloc_r+0x48>
 80101f4:	6025      	str	r5, [r4, #0]
 80101f6:	e7db      	b.n	80101b0 <_malloc_r+0x64>
 80101f8:	20001f24 	.word	0x20001f24
 80101fc:	20001f28 	.word	0x20001f28

08010200 <__ssputs_r>:
 8010200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010204:	688e      	ldr	r6, [r1, #8]
 8010206:	429e      	cmp	r6, r3
 8010208:	4682      	mov	sl, r0
 801020a:	460c      	mov	r4, r1
 801020c:	4690      	mov	r8, r2
 801020e:	4699      	mov	r9, r3
 8010210:	d837      	bhi.n	8010282 <__ssputs_r+0x82>
 8010212:	898a      	ldrh	r2, [r1, #12]
 8010214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010218:	d031      	beq.n	801027e <__ssputs_r+0x7e>
 801021a:	6825      	ldr	r5, [r4, #0]
 801021c:	6909      	ldr	r1, [r1, #16]
 801021e:	1a6f      	subs	r7, r5, r1
 8010220:	6965      	ldr	r5, [r4, #20]
 8010222:	2302      	movs	r3, #2
 8010224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010228:	fb95 f5f3 	sdiv	r5, r5, r3
 801022c:	f109 0301 	add.w	r3, r9, #1
 8010230:	443b      	add	r3, r7
 8010232:	429d      	cmp	r5, r3
 8010234:	bf38      	it	cc
 8010236:	461d      	movcc	r5, r3
 8010238:	0553      	lsls	r3, r2, #21
 801023a:	d530      	bpl.n	801029e <__ssputs_r+0x9e>
 801023c:	4629      	mov	r1, r5
 801023e:	f7ff ff85 	bl	801014c <_malloc_r>
 8010242:	4606      	mov	r6, r0
 8010244:	b950      	cbnz	r0, 801025c <__ssputs_r+0x5c>
 8010246:	230c      	movs	r3, #12
 8010248:	f8ca 3000 	str.w	r3, [sl]
 801024c:	89a3      	ldrh	r3, [r4, #12]
 801024e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010252:	81a3      	strh	r3, [r4, #12]
 8010254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025c:	463a      	mov	r2, r7
 801025e:	6921      	ldr	r1, [r4, #16]
 8010260:	f7ff fc32 	bl	800fac8 <memcpy>
 8010264:	89a3      	ldrh	r3, [r4, #12]
 8010266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801026a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801026e:	81a3      	strh	r3, [r4, #12]
 8010270:	6126      	str	r6, [r4, #16]
 8010272:	6165      	str	r5, [r4, #20]
 8010274:	443e      	add	r6, r7
 8010276:	1bed      	subs	r5, r5, r7
 8010278:	6026      	str	r6, [r4, #0]
 801027a:	60a5      	str	r5, [r4, #8]
 801027c:	464e      	mov	r6, r9
 801027e:	454e      	cmp	r6, r9
 8010280:	d900      	bls.n	8010284 <__ssputs_r+0x84>
 8010282:	464e      	mov	r6, r9
 8010284:	4632      	mov	r2, r6
 8010286:	4641      	mov	r1, r8
 8010288:	6820      	ldr	r0, [r4, #0]
 801028a:	f000 f9c7 	bl	801061c <memmove>
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	1b9b      	subs	r3, r3, r6
 8010292:	60a3      	str	r3, [r4, #8]
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	441e      	add	r6, r3
 8010298:	6026      	str	r6, [r4, #0]
 801029a:	2000      	movs	r0, #0
 801029c:	e7dc      	b.n	8010258 <__ssputs_r+0x58>
 801029e:	462a      	mov	r2, r5
 80102a0:	f000 f9d7 	bl	8010652 <_realloc_r>
 80102a4:	4606      	mov	r6, r0
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d1e2      	bne.n	8010270 <__ssputs_r+0x70>
 80102aa:	6921      	ldr	r1, [r4, #16]
 80102ac:	4650      	mov	r0, sl
 80102ae:	f7ff feff 	bl	80100b0 <_free_r>
 80102b2:	e7c8      	b.n	8010246 <__ssputs_r+0x46>

080102b4 <_svfiprintf_r>:
 80102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b8:	461d      	mov	r5, r3
 80102ba:	898b      	ldrh	r3, [r1, #12]
 80102bc:	061f      	lsls	r7, r3, #24
 80102be:	b09d      	sub	sp, #116	; 0x74
 80102c0:	4680      	mov	r8, r0
 80102c2:	460c      	mov	r4, r1
 80102c4:	4616      	mov	r6, r2
 80102c6:	d50f      	bpl.n	80102e8 <_svfiprintf_r+0x34>
 80102c8:	690b      	ldr	r3, [r1, #16]
 80102ca:	b96b      	cbnz	r3, 80102e8 <_svfiprintf_r+0x34>
 80102cc:	2140      	movs	r1, #64	; 0x40
 80102ce:	f7ff ff3d 	bl	801014c <_malloc_r>
 80102d2:	6020      	str	r0, [r4, #0]
 80102d4:	6120      	str	r0, [r4, #16]
 80102d6:	b928      	cbnz	r0, 80102e4 <_svfiprintf_r+0x30>
 80102d8:	230c      	movs	r3, #12
 80102da:	f8c8 3000 	str.w	r3, [r8]
 80102de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102e2:	e0c8      	b.n	8010476 <_svfiprintf_r+0x1c2>
 80102e4:	2340      	movs	r3, #64	; 0x40
 80102e6:	6163      	str	r3, [r4, #20]
 80102e8:	2300      	movs	r3, #0
 80102ea:	9309      	str	r3, [sp, #36]	; 0x24
 80102ec:	2320      	movs	r3, #32
 80102ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102f2:	2330      	movs	r3, #48	; 0x30
 80102f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102f8:	9503      	str	r5, [sp, #12]
 80102fa:	f04f 0b01 	mov.w	fp, #1
 80102fe:	4637      	mov	r7, r6
 8010300:	463d      	mov	r5, r7
 8010302:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010306:	b10b      	cbz	r3, 801030c <_svfiprintf_r+0x58>
 8010308:	2b25      	cmp	r3, #37	; 0x25
 801030a:	d13e      	bne.n	801038a <_svfiprintf_r+0xd6>
 801030c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010310:	d00b      	beq.n	801032a <_svfiprintf_r+0x76>
 8010312:	4653      	mov	r3, sl
 8010314:	4632      	mov	r2, r6
 8010316:	4621      	mov	r1, r4
 8010318:	4640      	mov	r0, r8
 801031a:	f7ff ff71 	bl	8010200 <__ssputs_r>
 801031e:	3001      	adds	r0, #1
 8010320:	f000 80a4 	beq.w	801046c <_svfiprintf_r+0x1b8>
 8010324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010326:	4453      	add	r3, sl
 8010328:	9309      	str	r3, [sp, #36]	; 0x24
 801032a:	783b      	ldrb	r3, [r7, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 809d 	beq.w	801046c <_svfiprintf_r+0x1b8>
 8010332:	2300      	movs	r3, #0
 8010334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801033c:	9304      	str	r3, [sp, #16]
 801033e:	9307      	str	r3, [sp, #28]
 8010340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010344:	931a      	str	r3, [sp, #104]	; 0x68
 8010346:	462f      	mov	r7, r5
 8010348:	2205      	movs	r2, #5
 801034a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801034e:	4850      	ldr	r0, [pc, #320]	; (8010490 <_svfiprintf_r+0x1dc>)
 8010350:	f7ef ff6e 	bl	8000230 <memchr>
 8010354:	9b04      	ldr	r3, [sp, #16]
 8010356:	b9d0      	cbnz	r0, 801038e <_svfiprintf_r+0xda>
 8010358:	06d9      	lsls	r1, r3, #27
 801035a:	bf44      	itt	mi
 801035c:	2220      	movmi	r2, #32
 801035e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010362:	071a      	lsls	r2, r3, #28
 8010364:	bf44      	itt	mi
 8010366:	222b      	movmi	r2, #43	; 0x2b
 8010368:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801036c:	782a      	ldrb	r2, [r5, #0]
 801036e:	2a2a      	cmp	r2, #42	; 0x2a
 8010370:	d015      	beq.n	801039e <_svfiprintf_r+0xea>
 8010372:	9a07      	ldr	r2, [sp, #28]
 8010374:	462f      	mov	r7, r5
 8010376:	2000      	movs	r0, #0
 8010378:	250a      	movs	r5, #10
 801037a:	4639      	mov	r1, r7
 801037c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010380:	3b30      	subs	r3, #48	; 0x30
 8010382:	2b09      	cmp	r3, #9
 8010384:	d94d      	bls.n	8010422 <_svfiprintf_r+0x16e>
 8010386:	b1b8      	cbz	r0, 80103b8 <_svfiprintf_r+0x104>
 8010388:	e00f      	b.n	80103aa <_svfiprintf_r+0xf6>
 801038a:	462f      	mov	r7, r5
 801038c:	e7b8      	b.n	8010300 <_svfiprintf_r+0x4c>
 801038e:	4a40      	ldr	r2, [pc, #256]	; (8010490 <_svfiprintf_r+0x1dc>)
 8010390:	1a80      	subs	r0, r0, r2
 8010392:	fa0b f000 	lsl.w	r0, fp, r0
 8010396:	4318      	orrs	r0, r3
 8010398:	9004      	str	r0, [sp, #16]
 801039a:	463d      	mov	r5, r7
 801039c:	e7d3      	b.n	8010346 <_svfiprintf_r+0x92>
 801039e:	9a03      	ldr	r2, [sp, #12]
 80103a0:	1d11      	adds	r1, r2, #4
 80103a2:	6812      	ldr	r2, [r2, #0]
 80103a4:	9103      	str	r1, [sp, #12]
 80103a6:	2a00      	cmp	r2, #0
 80103a8:	db01      	blt.n	80103ae <_svfiprintf_r+0xfa>
 80103aa:	9207      	str	r2, [sp, #28]
 80103ac:	e004      	b.n	80103b8 <_svfiprintf_r+0x104>
 80103ae:	4252      	negs	r2, r2
 80103b0:	f043 0302 	orr.w	r3, r3, #2
 80103b4:	9207      	str	r2, [sp, #28]
 80103b6:	9304      	str	r3, [sp, #16]
 80103b8:	783b      	ldrb	r3, [r7, #0]
 80103ba:	2b2e      	cmp	r3, #46	; 0x2e
 80103bc:	d10c      	bne.n	80103d8 <_svfiprintf_r+0x124>
 80103be:	787b      	ldrb	r3, [r7, #1]
 80103c0:	2b2a      	cmp	r3, #42	; 0x2a
 80103c2:	d133      	bne.n	801042c <_svfiprintf_r+0x178>
 80103c4:	9b03      	ldr	r3, [sp, #12]
 80103c6:	1d1a      	adds	r2, r3, #4
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	9203      	str	r2, [sp, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	bfb8      	it	lt
 80103d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80103d4:	3702      	adds	r7, #2
 80103d6:	9305      	str	r3, [sp, #20]
 80103d8:	4d2e      	ldr	r5, [pc, #184]	; (8010494 <_svfiprintf_r+0x1e0>)
 80103da:	7839      	ldrb	r1, [r7, #0]
 80103dc:	2203      	movs	r2, #3
 80103de:	4628      	mov	r0, r5
 80103e0:	f7ef ff26 	bl	8000230 <memchr>
 80103e4:	b138      	cbz	r0, 80103f6 <_svfiprintf_r+0x142>
 80103e6:	2340      	movs	r3, #64	; 0x40
 80103e8:	1b40      	subs	r0, r0, r5
 80103ea:	fa03 f000 	lsl.w	r0, r3, r0
 80103ee:	9b04      	ldr	r3, [sp, #16]
 80103f0:	4303      	orrs	r3, r0
 80103f2:	3701      	adds	r7, #1
 80103f4:	9304      	str	r3, [sp, #16]
 80103f6:	7839      	ldrb	r1, [r7, #0]
 80103f8:	4827      	ldr	r0, [pc, #156]	; (8010498 <_svfiprintf_r+0x1e4>)
 80103fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103fe:	2206      	movs	r2, #6
 8010400:	1c7e      	adds	r6, r7, #1
 8010402:	f7ef ff15 	bl	8000230 <memchr>
 8010406:	2800      	cmp	r0, #0
 8010408:	d038      	beq.n	801047c <_svfiprintf_r+0x1c8>
 801040a:	4b24      	ldr	r3, [pc, #144]	; (801049c <_svfiprintf_r+0x1e8>)
 801040c:	bb13      	cbnz	r3, 8010454 <_svfiprintf_r+0x1a0>
 801040e:	9b03      	ldr	r3, [sp, #12]
 8010410:	3307      	adds	r3, #7
 8010412:	f023 0307 	bic.w	r3, r3, #7
 8010416:	3308      	adds	r3, #8
 8010418:	9303      	str	r3, [sp, #12]
 801041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801041c:	444b      	add	r3, r9
 801041e:	9309      	str	r3, [sp, #36]	; 0x24
 8010420:	e76d      	b.n	80102fe <_svfiprintf_r+0x4a>
 8010422:	fb05 3202 	mla	r2, r5, r2, r3
 8010426:	2001      	movs	r0, #1
 8010428:	460f      	mov	r7, r1
 801042a:	e7a6      	b.n	801037a <_svfiprintf_r+0xc6>
 801042c:	2300      	movs	r3, #0
 801042e:	3701      	adds	r7, #1
 8010430:	9305      	str	r3, [sp, #20]
 8010432:	4619      	mov	r1, r3
 8010434:	250a      	movs	r5, #10
 8010436:	4638      	mov	r0, r7
 8010438:	f810 2b01 	ldrb.w	r2, [r0], #1
 801043c:	3a30      	subs	r2, #48	; 0x30
 801043e:	2a09      	cmp	r2, #9
 8010440:	d903      	bls.n	801044a <_svfiprintf_r+0x196>
 8010442:	2b00      	cmp	r3, #0
 8010444:	d0c8      	beq.n	80103d8 <_svfiprintf_r+0x124>
 8010446:	9105      	str	r1, [sp, #20]
 8010448:	e7c6      	b.n	80103d8 <_svfiprintf_r+0x124>
 801044a:	fb05 2101 	mla	r1, r5, r1, r2
 801044e:	2301      	movs	r3, #1
 8010450:	4607      	mov	r7, r0
 8010452:	e7f0      	b.n	8010436 <_svfiprintf_r+0x182>
 8010454:	ab03      	add	r3, sp, #12
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	4622      	mov	r2, r4
 801045a:	4b11      	ldr	r3, [pc, #68]	; (80104a0 <_svfiprintf_r+0x1ec>)
 801045c:	a904      	add	r1, sp, #16
 801045e:	4640      	mov	r0, r8
 8010460:	f7fd fdca 	bl	800dff8 <_printf_float>
 8010464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010468:	4681      	mov	r9, r0
 801046a:	d1d6      	bne.n	801041a <_svfiprintf_r+0x166>
 801046c:	89a3      	ldrh	r3, [r4, #12]
 801046e:	065b      	lsls	r3, r3, #25
 8010470:	f53f af35 	bmi.w	80102de <_svfiprintf_r+0x2a>
 8010474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010476:	b01d      	add	sp, #116	; 0x74
 8010478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047c:	ab03      	add	r3, sp, #12
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	4622      	mov	r2, r4
 8010482:	4b07      	ldr	r3, [pc, #28]	; (80104a0 <_svfiprintf_r+0x1ec>)
 8010484:	a904      	add	r1, sp, #16
 8010486:	4640      	mov	r0, r8
 8010488:	f7fe f86c 	bl	800e564 <_printf_i>
 801048c:	e7ea      	b.n	8010464 <_svfiprintf_r+0x1b0>
 801048e:	bf00      	nop
 8010490:	08011b7c 	.word	0x08011b7c
 8010494:	08011b82 	.word	0x08011b82
 8010498:	08011b86 	.word	0x08011b86
 801049c:	0800dff9 	.word	0x0800dff9
 80104a0:	08010201 	.word	0x08010201

080104a4 <_sbrk_r>:
 80104a4:	b538      	push	{r3, r4, r5, lr}
 80104a6:	4c06      	ldr	r4, [pc, #24]	; (80104c0 <_sbrk_r+0x1c>)
 80104a8:	2300      	movs	r3, #0
 80104aa:	4605      	mov	r5, r0
 80104ac:	4608      	mov	r0, r1
 80104ae:	6023      	str	r3, [r4, #0]
 80104b0:	f7f6 ff4a 	bl	8007348 <_sbrk>
 80104b4:	1c43      	adds	r3, r0, #1
 80104b6:	d102      	bne.n	80104be <_sbrk_r+0x1a>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	b103      	cbz	r3, 80104be <_sbrk_r+0x1a>
 80104bc:	602b      	str	r3, [r5, #0]
 80104be:	bd38      	pop	{r3, r4, r5, pc}
 80104c0:	20002994 	.word	0x20002994

080104c4 <__sread>:
 80104c4:	b510      	push	{r4, lr}
 80104c6:	460c      	mov	r4, r1
 80104c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104cc:	f000 f8e8 	bl	80106a0 <_read_r>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	bfab      	itete	ge
 80104d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104d6:	89a3      	ldrhlt	r3, [r4, #12]
 80104d8:	181b      	addge	r3, r3, r0
 80104da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104de:	bfac      	ite	ge
 80104e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80104e2:	81a3      	strhlt	r3, [r4, #12]
 80104e4:	bd10      	pop	{r4, pc}

080104e6 <__swrite>:
 80104e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ea:	461f      	mov	r7, r3
 80104ec:	898b      	ldrh	r3, [r1, #12]
 80104ee:	05db      	lsls	r3, r3, #23
 80104f0:	4605      	mov	r5, r0
 80104f2:	460c      	mov	r4, r1
 80104f4:	4616      	mov	r6, r2
 80104f6:	d505      	bpl.n	8010504 <__swrite+0x1e>
 80104f8:	2302      	movs	r3, #2
 80104fa:	2200      	movs	r2, #0
 80104fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010500:	f000 f868 	bl	80105d4 <_lseek_r>
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801050a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801050e:	81a3      	strh	r3, [r4, #12]
 8010510:	4632      	mov	r2, r6
 8010512:	463b      	mov	r3, r7
 8010514:	4628      	mov	r0, r5
 8010516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801051a:	f000 b817 	b.w	801054c <_write_r>

0801051e <__sseek>:
 801051e:	b510      	push	{r4, lr}
 8010520:	460c      	mov	r4, r1
 8010522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010526:	f000 f855 	bl	80105d4 <_lseek_r>
 801052a:	1c43      	adds	r3, r0, #1
 801052c:	89a3      	ldrh	r3, [r4, #12]
 801052e:	bf15      	itete	ne
 8010530:	6560      	strne	r0, [r4, #84]	; 0x54
 8010532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801053a:	81a3      	strheq	r3, [r4, #12]
 801053c:	bf18      	it	ne
 801053e:	81a3      	strhne	r3, [r4, #12]
 8010540:	bd10      	pop	{r4, pc}

08010542 <__sclose>:
 8010542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010546:	f000 b813 	b.w	8010570 <_close_r>
	...

0801054c <_write_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4c07      	ldr	r4, [pc, #28]	; (801056c <_write_r+0x20>)
 8010550:	4605      	mov	r5, r0
 8010552:	4608      	mov	r0, r1
 8010554:	4611      	mov	r1, r2
 8010556:	2200      	movs	r2, #0
 8010558:	6022      	str	r2, [r4, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	f7f6 fb55 	bl	8006c0a <_write>
 8010560:	1c43      	adds	r3, r0, #1
 8010562:	d102      	bne.n	801056a <_write_r+0x1e>
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	b103      	cbz	r3, 801056a <_write_r+0x1e>
 8010568:	602b      	str	r3, [r5, #0]
 801056a:	bd38      	pop	{r3, r4, r5, pc}
 801056c:	20002994 	.word	0x20002994

08010570 <_close_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4c06      	ldr	r4, [pc, #24]	; (801058c <_close_r+0x1c>)
 8010574:	2300      	movs	r3, #0
 8010576:	4605      	mov	r5, r0
 8010578:	4608      	mov	r0, r1
 801057a:	6023      	str	r3, [r4, #0]
 801057c:	f7f6 feaf 	bl	80072de <_close>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_close_r+0x1a>
 8010584:	6823      	ldr	r3, [r4, #0]
 8010586:	b103      	cbz	r3, 801058a <_close_r+0x1a>
 8010588:	602b      	str	r3, [r5, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	20002994 	.word	0x20002994

08010590 <_fstat_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4c07      	ldr	r4, [pc, #28]	; (80105b0 <_fstat_r+0x20>)
 8010594:	2300      	movs	r3, #0
 8010596:	4605      	mov	r5, r0
 8010598:	4608      	mov	r0, r1
 801059a:	4611      	mov	r1, r2
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	f7f6 feaa 	bl	80072f6 <_fstat>
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d102      	bne.n	80105ac <_fstat_r+0x1c>
 80105a6:	6823      	ldr	r3, [r4, #0]
 80105a8:	b103      	cbz	r3, 80105ac <_fstat_r+0x1c>
 80105aa:	602b      	str	r3, [r5, #0]
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	20002994 	.word	0x20002994

080105b4 <_isatty_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	4c06      	ldr	r4, [pc, #24]	; (80105d0 <_isatty_r+0x1c>)
 80105b8:	2300      	movs	r3, #0
 80105ba:	4605      	mov	r5, r0
 80105bc:	4608      	mov	r0, r1
 80105be:	6023      	str	r3, [r4, #0]
 80105c0:	f7f6 fea9 	bl	8007316 <_isatty>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_isatty_r+0x1a>
 80105c8:	6823      	ldr	r3, [r4, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_isatty_r+0x1a>
 80105cc:	602b      	str	r3, [r5, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20002994 	.word	0x20002994

080105d4 <_lseek_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4c07      	ldr	r4, [pc, #28]	; (80105f4 <_lseek_r+0x20>)
 80105d8:	4605      	mov	r5, r0
 80105da:	4608      	mov	r0, r1
 80105dc:	4611      	mov	r1, r2
 80105de:	2200      	movs	r2, #0
 80105e0:	6022      	str	r2, [r4, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	f7f6 fea2 	bl	800732c <_lseek>
 80105e8:	1c43      	adds	r3, r0, #1
 80105ea:	d102      	bne.n	80105f2 <_lseek_r+0x1e>
 80105ec:	6823      	ldr	r3, [r4, #0]
 80105ee:	b103      	cbz	r3, 80105f2 <_lseek_r+0x1e>
 80105f0:	602b      	str	r3, [r5, #0]
 80105f2:	bd38      	pop	{r3, r4, r5, pc}
 80105f4:	20002994 	.word	0x20002994

080105f8 <__ascii_mbtowc>:
 80105f8:	b082      	sub	sp, #8
 80105fa:	b901      	cbnz	r1, 80105fe <__ascii_mbtowc+0x6>
 80105fc:	a901      	add	r1, sp, #4
 80105fe:	b142      	cbz	r2, 8010612 <__ascii_mbtowc+0x1a>
 8010600:	b14b      	cbz	r3, 8010616 <__ascii_mbtowc+0x1e>
 8010602:	7813      	ldrb	r3, [r2, #0]
 8010604:	600b      	str	r3, [r1, #0]
 8010606:	7812      	ldrb	r2, [r2, #0]
 8010608:	1c10      	adds	r0, r2, #0
 801060a:	bf18      	it	ne
 801060c:	2001      	movne	r0, #1
 801060e:	b002      	add	sp, #8
 8010610:	4770      	bx	lr
 8010612:	4610      	mov	r0, r2
 8010614:	e7fb      	b.n	801060e <__ascii_mbtowc+0x16>
 8010616:	f06f 0001 	mvn.w	r0, #1
 801061a:	e7f8      	b.n	801060e <__ascii_mbtowc+0x16>

0801061c <memmove>:
 801061c:	4288      	cmp	r0, r1
 801061e:	b510      	push	{r4, lr}
 8010620:	eb01 0302 	add.w	r3, r1, r2
 8010624:	d807      	bhi.n	8010636 <memmove+0x1a>
 8010626:	1e42      	subs	r2, r0, #1
 8010628:	4299      	cmp	r1, r3
 801062a:	d00a      	beq.n	8010642 <memmove+0x26>
 801062c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010630:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010634:	e7f8      	b.n	8010628 <memmove+0xc>
 8010636:	4283      	cmp	r3, r0
 8010638:	d9f5      	bls.n	8010626 <memmove+0xa>
 801063a:	1881      	adds	r1, r0, r2
 801063c:	1ad2      	subs	r2, r2, r3
 801063e:	42d3      	cmn	r3, r2
 8010640:	d100      	bne.n	8010644 <memmove+0x28>
 8010642:	bd10      	pop	{r4, pc}
 8010644:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010648:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801064c:	e7f7      	b.n	801063e <memmove+0x22>

0801064e <__malloc_lock>:
 801064e:	4770      	bx	lr

08010650 <__malloc_unlock>:
 8010650:	4770      	bx	lr

08010652 <_realloc_r>:
 8010652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010654:	4607      	mov	r7, r0
 8010656:	4614      	mov	r4, r2
 8010658:	460e      	mov	r6, r1
 801065a:	b921      	cbnz	r1, 8010666 <_realloc_r+0x14>
 801065c:	4611      	mov	r1, r2
 801065e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010662:	f7ff bd73 	b.w	801014c <_malloc_r>
 8010666:	b922      	cbnz	r2, 8010672 <_realloc_r+0x20>
 8010668:	f7ff fd22 	bl	80100b0 <_free_r>
 801066c:	4625      	mov	r5, r4
 801066e:	4628      	mov	r0, r5
 8010670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010672:	f000 f834 	bl	80106de <_malloc_usable_size_r>
 8010676:	42a0      	cmp	r0, r4
 8010678:	d20f      	bcs.n	801069a <_realloc_r+0x48>
 801067a:	4621      	mov	r1, r4
 801067c:	4638      	mov	r0, r7
 801067e:	f7ff fd65 	bl	801014c <_malloc_r>
 8010682:	4605      	mov	r5, r0
 8010684:	2800      	cmp	r0, #0
 8010686:	d0f2      	beq.n	801066e <_realloc_r+0x1c>
 8010688:	4631      	mov	r1, r6
 801068a:	4622      	mov	r2, r4
 801068c:	f7ff fa1c 	bl	800fac8 <memcpy>
 8010690:	4631      	mov	r1, r6
 8010692:	4638      	mov	r0, r7
 8010694:	f7ff fd0c 	bl	80100b0 <_free_r>
 8010698:	e7e9      	b.n	801066e <_realloc_r+0x1c>
 801069a:	4635      	mov	r5, r6
 801069c:	e7e7      	b.n	801066e <_realloc_r+0x1c>
	...

080106a0 <_read_r>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	4c07      	ldr	r4, [pc, #28]	; (80106c0 <_read_r+0x20>)
 80106a4:	4605      	mov	r5, r0
 80106a6:	4608      	mov	r0, r1
 80106a8:	4611      	mov	r1, r2
 80106aa:	2200      	movs	r2, #0
 80106ac:	6022      	str	r2, [r4, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	f7f6 fdf8 	bl	80072a4 <_read>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_read_r+0x1e>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	b103      	cbz	r3, 80106be <_read_r+0x1e>
 80106bc:	602b      	str	r3, [r5, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	20002994 	.word	0x20002994

080106c4 <__ascii_wctomb>:
 80106c4:	b149      	cbz	r1, 80106da <__ascii_wctomb+0x16>
 80106c6:	2aff      	cmp	r2, #255	; 0xff
 80106c8:	bf85      	ittet	hi
 80106ca:	238a      	movhi	r3, #138	; 0x8a
 80106cc:	6003      	strhi	r3, [r0, #0]
 80106ce:	700a      	strbls	r2, [r1, #0]
 80106d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80106d4:	bf98      	it	ls
 80106d6:	2001      	movls	r0, #1
 80106d8:	4770      	bx	lr
 80106da:	4608      	mov	r0, r1
 80106dc:	4770      	bx	lr

080106de <_malloc_usable_size_r>:
 80106de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106e2:	1f18      	subs	r0, r3, #4
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	bfbc      	itt	lt
 80106e8:	580b      	ldrlt	r3, [r1, r0]
 80106ea:	18c0      	addlt	r0, r0, r3
 80106ec:	4770      	bx	lr
	...

080106f0 <_init>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	bf00      	nop
 80106f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106f6:	bc08      	pop	{r3}
 80106f8:	469e      	mov	lr, r3
 80106fa:	4770      	bx	lr

080106fc <_fini>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	bf00      	nop
 8010700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010702:	bc08      	pop	{r3}
 8010704:	469e      	mov	lr, r3
 8010706:	4770      	bx	lr
